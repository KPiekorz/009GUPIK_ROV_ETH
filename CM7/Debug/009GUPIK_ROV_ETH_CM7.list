
009GUPIK_ROV_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019910  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be0  08019bb0  08019bb0  00029bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c790  0801c790  0002c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c798  0801c798  0002c798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c79c  0801c79c  0002c79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801c7a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000793c  20000098  0801c838  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200079d4  0801c838  000379d4  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0801c838  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005b704  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000098aa  00000000  00000000  0008b7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000028b8  00000000  00000000  00095078  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002600  00000000  00000000  00097930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004cb46  00000000  00000000  00099f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000355f6  00000000  00000000  000e6a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a567e  00000000  00000000  0011c06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002c16ea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ad0c  00000000  00000000  002c1768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019b98 	.word	0x08019b98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	08019b98 	.word	0x08019b98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <SystemInit+0xc4>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <SystemInit+0xc4>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SystemInit+0xc4>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <SystemInit+0xc4>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemInit+0xc8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemInit+0xc8>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemInit+0xc8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemInit+0xc8>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4924      	ldr	r1, [pc, #144]	; (8000748 <SystemInit+0xc8>)
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <SystemInit+0xcc>)
 80006ba:	4013      	ands	r3, r2
 80006bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemInit+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <SystemInit+0xc8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <SystemInit+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <SystemInit+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <SystemInit+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SystemInit+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <SystemInit+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <SystemInit+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <SystemInit+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <SystemInit+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <SystemInit+0xc8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <SystemInit+0xc8>)
 8000706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <SystemInit+0xc8>)
 800070e:	2200      	movs	r2, #0
 8000710:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <SystemInit+0xd0>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <SystemInit+0xd0>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <SystemInit+0xd4>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <SystemInit+0xd8>)
 8000724:	4013      	ands	r3, r2
 8000726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800072a:	d202      	bcs.n	8000732 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <SystemInit+0xdc>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SystemInit+0xc4>)
 8000734:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000738:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	58024400 	.word	0x58024400
 800074c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000750:	580000c0 	.word	0x580000c0
 8000754:	5c001000 	.word	0x5c001000
 8000758:	ffff0000 	.word	0xffff0000
 800075c:	51008108 	.word	0x51008108

08000760 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <vApplicationGetIdleTaskMemory+0x2c>)
 8000770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <vApplicationGetIdleTaskMemory+0x30>)
 8000776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200000b4 	.word	0x200000b4
 8000790:	20000108 	.word	0x20000108

08000794 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_FREERTOS_Init+0x5c>)
 800079c:	1d3c      	adds	r4, r7, #4
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 fae9 	bl	8009d88 <osThreadCreate>
 80007b6:	4602      	mov	r2, r0
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_FREERTOS_Init+0x60>)
 80007ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vTaskEthTCPCommunication, "vTaskEthTCPCommunication", 1000, NULL, 1, NULL);
 80007bc:	2300      	movs	r3, #0
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2301      	movs	r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	490b      	ldr	r1, [pc, #44]	; (80007f8 <MX_FREERTOS_Init+0x64>)
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_FREERTOS_Init+0x68>)
 80007ce:	f00a fe65 	bl	800b49c <xTaskCreate>
  xTaskCreate(vTaskControlTask, "vTaskControlTask", 1000, NULL, 1, NULL);
 80007d2:	2300      	movs	r3, #0
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	2301      	movs	r3, #1
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e0:	4907      	ldr	r1, [pc, #28]	; (8000800 <MX_FREERTOS_Init+0x6c>)
 80007e2:	4808      	ldr	r0, [pc, #32]	; (8000804 <MX_FREERTOS_Init+0x70>)
 80007e4:	f00a fe5a 	bl	800b49c <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bdb0      	pop	{r4, r5, r7, pc}
 80007f0:	08019bec 	.word	0x08019bec
 80007f4:	200041f8 	.word	0x200041f8
 80007f8:	08019bb0 	.word	0x08019bb0
 80007fc:	0800082d 	.word	0x0800082d
 8000800:	08019bcc 	.word	0x08019bcc
 8000804:	0800081b 	.word	0x0800081b

08000808 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8000810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000814:	f009 fb04 	bl	8009e20 <osDelay>
 8000818:	e7fa      	b.n	8000810 <StartDefaultTask+0x8>

0800081a <vTaskControlTask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     

void vTaskControlTask(void * argument){
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]


	for(;;){

		vTaskDelay(pdMS_TO_TICKS(1000));
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f00a ff6f 	bl	800b708 <vTaskDelay>
 800082a:	e7fa      	b.n	8000822 <vTaskControlTask+0x8>

0800082c <vTaskEthTCPCommunication>:

	}
}

/* task to hold tcp communication */
void vTaskEthTCPCommunication(void * argument){
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af02      	add	r7, sp, #8
 8000832:	6078      	str	r0, [r7, #4]
	for(;;){


		/* Infinite loop */
		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_TCP);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2010      	movs	r0, #16
 800083a:	f00c fa15 	bl	800cc68 <netconn_new_with_proto_and_callback>
 800083e:	61f8      	str	r0, [r7, #28]
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000840:	2101      	movs	r1, #1
 8000842:	482f      	ldr	r0, [pc, #188]	; (8000900 <vTaskEthTCPCommunication+0xd4>)
 8000844:	f002 ff81 	bl	800374a <HAL_GPIO_TogglePin>

		if (conn != NULL) {
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f2      	beq.n	8000834 <vTaskEthTCPCommunication+0x8>

			/* Bind connection to well known port number. */
			err = netconn_bind(conn, NULL, 80);
 800084e:	2250      	movs	r2, #80	; 0x50
 8000850:	2100      	movs	r1, #0
 8000852:	69f8      	ldr	r0, [r7, #28]
 8000854:	f00c faa8 	bl	800cda8 <netconn_bind>
 8000858:	4603      	mov	r3, r0
 800085a:	76fb      	strb	r3, [r7, #27]

			if (err == ERR_OK) {
 800085c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d147      	bne.n	80008f4 <vTaskEthTCPCommunication+0xc8>

				/* Tell connection to go into listening mode. */
				netconn_listen(conn);
 8000864:	21ff      	movs	r1, #255	; 0xff
 8000866:	69f8      	ldr	r0, [r7, #28]
 8000868:	f00c fad6 	bl	800ce18 <netconn_listen_with_backlog>

				while (1) {

					/* Grab new connection. */
					accept_err = netconn_accept(conn, &newconn);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	69f8      	ldr	r0, [r7, #28]
 8000874:	f00c fafc 	bl	800ce70 <netconn_accept>
 8000878:	4603      	mov	r3, r0
 800087a:	76bb      	strb	r3, [r7, #26]
					HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <vTaskEthTCPCommunication+0xd4>)
 8000882:	f002 ff62 	bl	800374a <HAL_GPIO_TogglePin>



					/* Process the new connection. */
					if (accept_err == ERR_OK) {
 8000886:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ee      	bne.n	800086c <vTaskEthTCPCommunication+0x40>

						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 800088e:	e01b      	b.n	80008c8 <vTaskEthTCPCommunication+0x9c>

							do {
								netbuf_data(buf, &data, &len);
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	f107 020a 	add.w	r2, r7, #10
 8000896:	f107 010c 	add.w	r1, r7, #12
 800089a:	4618      	mov	r0, r3
 800089c:	f00e f9b2 	bl	800ec04 <netbuf_data>
								netconn_write(newconn, data, len, NETCONN_COPY);
 80008a0:	6978      	ldr	r0, [r7, #20]
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	897b      	ldrh	r3, [r7, #10]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2300      	movs	r3, #0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	f00c fca5 	bl	800d1fc <netconn_write_partly>
							} while (netbuf_next(buf) >= 0);
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f00e f9ef 	bl	800ec98 <netbuf_next>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dae7      	bge.n	8000890 <vTaskEthTCPCommunication+0x64>

							netbuf_delete(buf);
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f00e f97e 	bl	800ebc4 <netbuf_delete>
						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f107 0210 	add.w	r2, r7, #16
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00c fc1b 	bl	800d10c <netconn_recv>
 80008d6:	4603      	mov	r3, r0
 80008d8:	767b      	strb	r3, [r7, #25]
 80008da:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0d6      	beq.n	8000890 <vTaskEthTCPCommunication+0x64>

						}

						/* Close connection and discard connection identifier. */
						netconn_close(newconn);
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f00c fd31 	bl	800d34c <netconn_close>
						netconn_delete(newconn);
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00c fa35 	bl	800cd5c <netconn_delete>
					accept_err = netconn_accept(conn, &newconn);
 80008f2:	e7bb      	b.n	800086c <vTaskEthTCPCommunication+0x40>
					}
				}

			} else {
				netconn_delete(newconn);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00c fa30 	bl	800cd5c <netconn_delete>
		conn = netconn_new(NETCONN_TCP);
 80008fc:	e79a      	b.n	8000834 <vTaskEthTCPCommunication+0x8>
 80008fe:	bf00      	nop
 8000900:	58020400 	.word	0x58020400

08000904 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <MX_GPIO_Init+0x140>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x140>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <MX_GPIO_Init+0x140>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <MX_GPIO_Init+0x140>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x140>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <MX_GPIO_Init+0x140>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_GPIO_Init+0x140>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <MX_GPIO_Init+0x140>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f244 0101 	movw	r1, #16385	; 0x4001
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x144>)
 80009f4:	f002 fe90 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2102      	movs	r1, #2
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_GPIO_Init+0x148>)
 80009fe:	f002 fe8b 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a02:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <MX_GPIO_Init+0x144>)
 8000a1c:	f002 fccc 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_GPIO_Init+0x148>)
 8000a38:	f002 fcbe 	bl	80033b8 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58021000 	.word	0x58021000

08000a50 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a58:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <SCB_EnableICache+0x3c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <SCB_EnableICache+0x3c>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <SCB_EnableICache+0x3c>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a7c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <SCB_EnableDCache+0x7c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <SCB_EnableDCache+0x7c>)
 8000aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aa8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	0b5b      	lsrs	r3, r3, #13
 8000aae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ab2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000abc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	015a      	lsls	r2, r3, #5
 8000ac2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ac6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000acc:	490f      	ldr	r1, [pc, #60]	; (8000b0c <SCB_EnableDCache+0x7c>)
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1ef      	bne.n	8000abe <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	60fa      	str	r2, [r7, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1e5      	bne.n	8000ab4 <SCB_EnableDCache+0x24>
 8000ae8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SCB_EnableDCache+0x7c>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <SCB_EnableDCache+0x7c>)
 8000af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af6:	6153      	str	r3, [r2, #20]
 8000af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000afc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000b16:	f000 fef9 	bl	800190c <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MPU_Config+0x80>)
 8000b20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b22:	2307      	movs	r3, #7
 8000b24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b26:	2303      	movs	r3, #3
 8000b28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 ff13 	bl	8001974 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MPU_Config+0x84>)
 8000b54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b56:	230d      	movs	r3, #13
 8000b58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fef9 	bl	8001974 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b82:	2004      	movs	r0, #4
 8000b84:	f000 fed8 	bl	8001938 <HAL_MPU_Enable>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	30040000 	.word	0x30040000
 8000b94:	30044000 	.word	0x30044000

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	MPU_Config();
 8000b9e:	f7ff ffb7 	bl	8000b10 <MPU_Config>
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ba2:	f7ff ff55 	bl	8000a50 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ba6:	f7ff ff73 	bl	8000a90 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb0:	bf00      	nop
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <main+0xb0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <main+0x30>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dcf4      	bgt.n	8000bb2 <main+0x1a>
  if ( timeout < 0 )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da01      	bge.n	8000bd2 <main+0x3a>
  {
  Error_Handler();
 8000bce:	f000 f933 	bl	8000e38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fd1d 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f839 	bl	8000c4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <main+0xb0>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <main+0xb0>)
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <main+0xb0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f002 fdc1 	bl	8003780 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f002 fdd7 	bl	80037b4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c0c:	bf00      	nop
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <main+0xb0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <main+0x8c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dcf4      	bgt.n	8000c0e <main+0x76>
if ( timeout < 0 )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <main+0x96>
{
Error_Handler();
 8000c2a:	f000 f905 	bl	8000e38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f7ff fe69 	bl	8000904 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c32:	f000 fa43 	bl	80010bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c36:	f000 fad7 	bl	80011e8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 8000c3a:	f008 fb71 	bl	8009320 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000c3e:	f7ff fda9 	bl	8000794 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c42:	f009 f88a 	bl	8009d5a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0xae>
 8000c48:	58024400 	.word	0x58024400

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0cc      	sub	sp, #304	; 0x130
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c56:	224c      	movs	r2, #76	; 0x4c
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f018 f8b0 	bl	8018dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c64:	2220      	movs	r2, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f018 f8a9 	bl	8018dc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	4618      	mov	r0, r3
 8000c74:	23bc      	movs	r3, #188	; 0xbc
 8000c76:	461a      	mov	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f018 f8a1 	bl	8018dc0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f002 fef4 	bl	8003a6c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	4b5e      	ldr	r3, [pc, #376]	; (8000e04 <SystemClock_Config+0x1b8>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a5d      	ldr	r2, [pc, #372]	; (8000e04 <SystemClock_Config+0x1b8>)
 8000c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <SystemClock_Config+0x1b8>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	4b59      	ldr	r3, [pc, #356]	; (8000e08 <SystemClock_Config+0x1bc>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <SystemClock_Config+0x1bc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cae:	4b56      	ldr	r3, [pc, #344]	; (8000e08 <SystemClock_Config+0x1bc>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cbe:	bf00      	nop
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <SystemClock_Config+0x1b8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ccc:	d1f8      	bne.n	8000cc0 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cce:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <SystemClock_Config+0x1c0>)
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f023 0303 	bic.w	r3, r3, #3
 8000cd6:	4a4d      	ldr	r2, [pc, #308]	; (8000e0c <SystemClock_Config+0x1c0>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ce4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ce8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cfe:	2378      	movs	r3, #120	; 0x78
 8000d00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 ff07 	bl	8003b40 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d38:	f000 f87e 	bl	8000e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	233f      	movs	r3, #63	; 0x3f
 8000d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d68:	2340      	movs	r3, #64	; 0x40
 8000d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d72:	2104      	movs	r1, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fabb 	bl	80042f0 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000d80:	f000 f85a 	bl	8000e38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <SystemClock_Config+0x1c4>)
 8000d8a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2201      	movs	r2, #1
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2218      	movs	r2, #24
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2202      	movs	r2, #2
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2204      	movs	r2, #4
 8000daa:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	2202      	movs	r2, #2
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2200      	movs	r2, #0
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fe48 	bl	8004a7c <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 8000df2:	f000 f821 	bl	8000e38 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000df6:	f002 fe93 	bl	8003b20 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000dfa:	bf00      	nop
 8000dfc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024800 	.word	0x58024800
 8000e08:	58000400 	.word	0x58000400
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	00040002 	.word	0x00040002

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 fc2f 	bl	8001688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010000 	.word	0x40010000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x38>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_MspInit+0x38>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_MspInit+0x38>)
 8000e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f06f 0001 	mvn.w	r0, #1
 8000e74:	f000 fd22 	bl	80018bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	58024400 	.word	0x58024400

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	; 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2019      	movs	r0, #25
 8000e9a:	f000 fd0f 	bl	80018bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000e9e:	2019      	movs	r0, #25
 8000ea0:	f000 fd26 	bl	80018f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_InitTick+0xa8>)
 8000ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <HAL_InitTick+0xa8>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_InitTick+0xa8>)
 8000eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fd93 	bl	80049f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ed2:	f003 fd7b 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_InitTick+0xac>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	0c9b      	lsrs	r3, r3, #18
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0xb0>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_InitTick+0xb4>)
 8000eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_InitTick+0xb0>)
 8000ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_InitTick+0xb0>)
 8000efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_InitTick+0xb0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_InitTick+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f0a:	480a      	ldr	r0, [pc, #40]	; (8000f34 <HAL_InitTick+0xb0>)
 8000f0c:	f005 f8a6 	bl	800605c <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d104      	bne.n	8000f20 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <HAL_InitTick+0xb0>)
 8000f18:	f005 f8d6 	bl	80060c8 <HAL_TIM_Base_Start_IT>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	e000      	b.n	8000f22 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3738      	adds	r7, #56	; 0x38
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	200041fc 	.word	0x200041fc
 8000f38:	40010000 	.word	0x40010000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_UP_IRQHandler+0x10>)
 8000f76:	f005 f8d1 	bl	800611c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200041fc 	.word	0x200041fc

08000f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
	}

return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x12>
	}
	return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	605a      	str	r2, [r3, #4]
	return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x50>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x16>
		heap_end = &end;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <_sbrk+0x50>)
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <_sbrk+0x54>)
 8001074:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_sbrk+0x50>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <_sbrk+0x50>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	466a      	mov	r2, sp
 8001086:	4293      	cmp	r3, r2
 8001088:	d905      	bls.n	8001096 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <_sbrk+0x58>)
 800108c:	220c      	movs	r2, #12
 800108e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	e006      	b.n	80010a4 <_sbrk+0x44>
	}

	heap_end += incr;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <_sbrk+0x50>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <_sbrk+0x50>)
 80010a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	20000308 	.word	0x20000308
 80010b4:	200079d8 	.word	0x200079d8
 80010b8:	200079cc 	.word	0x200079cc

080010bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_USART3_UART_Init+0x94>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001106:	f005 fa09 	bl	800651c <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001110:	f7ff fe92 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001118:	f007 fd73 	bl	8008c02 <HAL_UARTEx_SetTxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001122:	f7ff fe89 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <MX_USART3_UART_Init+0x90>)
 800112a:	f007 fda8 	bl	8008c7e <HAL_UARTEx_SetRxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001134:	f7ff fe80 	bl	8000e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_USART3_UART_Init+0x90>)
 800113a:	f007 fd29 	bl	8008b90 <HAL_UARTEx_DisableFifoMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001144:	f7ff fe78 	bl	8000e38 <Error_Handler>
  }

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000423c 	.word	0x2000423c
 8001150:	40004800 	.word	0x40004800

08001154 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12e      	bne.n	80011d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800118c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_UART_MspInit+0x90>)
 80011d0:	f002 f8f2 	bl	80033b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40004800 	.word	0x40004800
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020c00 	.word	0x58020c00

080011e8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f4:	2209      	movs	r2, #9
 80011f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001206:	2202      	movs	r2, #2
 8001208:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121e:	2201      	movs	r2, #1
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001224:	2201      	movs	r2, #1
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001230:	f002 fad4 	bl	80037dc <HAL_PCD_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800123a:	f7ff fdfd 	bl	8000e38 <Error_Handler>
  }

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200042c8 	.word	0x200042c8
 8001248:	40080000 	.word	0x40080000

0800124c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <HAL_PCD_MspInit+0xa4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d13b      	bne.n	80012e6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_PCD_MspInit+0xa8>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <HAL_PCD_MspInit+0xa8>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_PCD_MspInit+0xa8>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800128c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800129e:	230a      	movs	r3, #10
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <HAL_PCD_MspInit+0xac>)
 80012aa:	f002 f885 	bl	80033b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <HAL_PCD_MspInit+0xac>)
 80012c4:	f002 f878 	bl	80033b8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_PCD_MspInit+0xa8>)
 80012ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_PCD_MspInit+0xa8>)
 80012d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_PCD_MspInit+0xa8>)
 80012da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40080000 	.word	0x40080000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020000 	.word	0x58020000

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001300:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001302:	e003      	b.n	800130c <LoopCopyDataInit>

08001304 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001306:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001308:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800130a:	3104      	adds	r1, #4

0800130c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001310:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001312:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001314:	d3f6      	bcc.n	8001304 <CopyDataInit>
  ldr  r2, =_sbss
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001318:	e002      	b.n	8001320 <LoopFillZerobss>

0800131a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800131a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800131c:	f842 3b04 	str.w	r3, [r2], #4

08001320 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001322:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001324:	d3f9      	bcc.n	800131a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001326:	f7ff f9ab 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f017 fd0b 	bl	8018d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fc33 	bl	8000b98 <main>
  bx  lr    
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001338:	0801c7a0 	.word	0x0801c7a0
  ldr  r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001340:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8001344:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001348:	200079d4 	.word	0x200079d4

0800134c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC3_IRQHandler>

0800134e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <LAN8742_RegisterBusIO+0x28>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <LAN8742_RegisterBusIO+0x28>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <LAN8742_RegisterBusIO+0x28>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e014      	b.n	80013a6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d17c      	bne.n	80014cc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2220      	movs	r2, #32
 80013e4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e01c      	b.n	8001426 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f107 0208 	add.w	r2, r7, #8
 80013f4:	2112      	movs	r1, #18
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	4798      	blx	r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da03      	bge.n	8001408 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001400:	f06f 0304 	mvn.w	r3, #4
 8001404:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001406:	e00b      	b.n	8001420 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	d105      	bne.n	8001420 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
         break;
 800141e:	e005      	b.n	800142c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b1f      	cmp	r3, #31
 800142a:	d9df      	bls.n	80013ec <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b1f      	cmp	r3, #31
 8001432:	d902      	bls.n	800143a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001434:	f06f 0302 	mvn.w	r3, #2
 8001438:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d145      	bne.n	80014cc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6810      	ldr	r0, [r2, #0]
 8001448:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144c:	2100      	movs	r1, #0
 800144e:	4798      	blx	r3
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	db37      	blt.n	80014c6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6810      	ldr	r0, [r2, #0]
 800145e:	f107 0208 	add.w	r2, r7, #8
 8001462:	2100      	movs	r1, #0
 8001464:	4798      	blx	r3
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	db28      	blt.n	80014be <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4798      	blx	r3
 8001472:	4603      	mov	r3, r0
 8001474:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001476:	e01c      	b.n	80014b2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4798      	blx	r3
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800148a:	d80e      	bhi.n	80014aa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6810      	ldr	r0, [r2, #0]
 8001494:	f107 0208 	add.w	r2, r7, #8
 8001498:	2100      	movs	r1, #0
 800149a:	4798      	blx	r3
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da07      	bge.n	80014b2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80014a2:	f06f 0304 	mvn.w	r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
                 break;
 80014a8:	e010      	b.n	80014cc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014aa:	f06f 0301 	mvn.w	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
               break;
 80014b0:	e00c      	b.n	80014cc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1dd      	bne.n	8001478 <LAN8742_Init+0xc6>
 80014bc:	e006      	b.n	80014cc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80014be:	f06f 0304 	mvn.w	r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	e002      	b.n	80014cc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80014c6:	f06f 0303 	mvn.w	r3, #3
 80014ca:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d112      	bne.n	80014f8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4798      	blx	r3
 80014d8:	4603      	mov	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014dc:	bf00      	nop
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4798      	blx	r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014f0:	d9f5      	bls.n	80014de <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014f8:	693b      	ldr	r3, [r7, #16]
 }
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6810      	ldr	r0, [r2, #0]
 8001516:	f107 020c 	add.w	r2, r7, #12
 800151a:	2101      	movs	r1, #1
 800151c:	4798      	blx	r3
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	da02      	bge.n	800152a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001524:	f06f 0304 	mvn.w	r3, #4
 8001528:	e06e      	b.n	8001608 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6810      	ldr	r0, [r2, #0]
 8001532:	f107 020c 	add.w	r2, r7, #12
 8001536:	2101      	movs	r1, #1
 8001538:	4798      	blx	r3
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	da02      	bge.n	8001546 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001540:	f06f 0304 	mvn.w	r3, #4
 8001544:	e060      	b.n	8001608 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001550:	2301      	movs	r3, #1
 8001552:	e059      	b.n	8001608 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6810      	ldr	r0, [r2, #0]
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	2100      	movs	r1, #0
 8001562:	4798      	blx	r3
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	da02      	bge.n	8001570 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800156a:	f06f 0304 	mvn.w	r3, #4
 800156e:	e04b      	b.n	8001608 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11b      	bne.n	80015b2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <LAN8742_GetLinkState+0x90>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800158e:	2302      	movs	r3, #2
 8001590:	e03a      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800159c:	2303      	movs	r3, #3
 800159e:	e033      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015aa:	2304      	movs	r3, #4
 80015ac:	e02c      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015ae:	2305      	movs	r3, #5
 80015b0:	e02a      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6810      	ldr	r0, [r2, #0]
 80015ba:	f107 020c 	add.w	r2, r7, #12
 80015be:	211f      	movs	r1, #31
 80015c0:	4798      	blx	r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da02      	bge.n	80015ce <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80015c8:	f06f 0304 	mvn.w	r3, #4
 80015cc:	e01c      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015d8:	2306      	movs	r3, #6
 80015da:	e015      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 031c 	and.w	r3, r3, #28
 80015e2:	2b18      	cmp	r3, #24
 80015e4:	d101      	bne.n	80015ea <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015e6:	2302      	movs	r3, #2
 80015e8:	e00e      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 031c 	and.w	r3, r3, #28
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d101      	bne.n	80015f8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e007      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 031c 	and.w	r3, r3, #28
 80015fe:	2b14      	cmp	r3, #20
 8001600:	d101      	bne.n	8001606 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001602:	2304      	movs	r3, #4
 8001604:	e000      	b.n	8001608 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001606:	2305      	movs	r3, #5
    }				
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001616:	2003      	movs	r0, #3
 8001618:	f000 f945 	bl	80018a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800161c:	f003 f81e 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8001620:	4601      	mov	r1, r0
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_Init+0x68>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_Init+0x6c>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	fa21 f303 	lsr.w	r3, r1, r3
 8001638:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_Init+0x68>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_Init+0x6c>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_Init+0x70>)
 8001652:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x74>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fc12 	bl	8000e84 <HAL_InitTick>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e002      	b.n	8001670 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800166a:	f7ff fbed 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	58024400 	.word	0x58024400
 800167c:	0801c5b0 	.word	0x0801c5b0
 8001680:	20000004 	.word	0x20000004
 8001684:	20000000 	.word	0x20000000

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	200046d0 	.word	0x200046d0

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200046d0 	.word	0x200046d0

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_Delay+0x40>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000000c 	.word	0x2000000c

0800170c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetREVID+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0c1b      	lsrs	r3, r3, #16
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	5c001000 	.word	0x5c001000

08001724 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001734:	4904      	ldr	r1, [pc, #16]	; (8001748 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <__NVIC_SetPriorityGrouping>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <__NVIC_SetPriorityGrouping+0x40>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	4313      	orrs	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x40>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	05fa0000 	.word	0x05fa0000

08001794 <__NVIC_GetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff4c 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ca:	f7ff ff63 	bl	8001794 <__NVIC_GetPriorityGrouping>
 80018ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff ffb3 	bl	8001840 <NVIC_EncodePriority>
 80018da:	4602      	mov	r2, r0
 80018dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff82 	bl	80017ec <__NVIC_SetPriority>
}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff56 	bl	80017b0 <__NVIC_EnableIRQ>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001910:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_MPU_Disable+0x24>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_MPU_Disable+0x24>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <HAL_MPU_Disable+0x28>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00
 8001934:	e000ed90 	.word	0xe000ed90

08001938 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_MPU_Enable+0x34>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_MPU_Enable+0x38>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_MPU_Enable+0x38>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001956:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed90 	.word	0xe000ed90
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	785a      	ldrb	r2, [r3, #1]
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_MPU_ConfigRegion+0x84>)
 8001982:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d029      	beq.n	80019e0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800198c:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_MPU_ConfigRegion+0x84>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7adb      	ldrb	r3, [r3, #11]
 800199e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a9b      	ldrb	r3, [r3, #10]
 80019a6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b5b      	ldrb	r3, [r3, #13]
 80019ae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7b9b      	ldrb	r3, [r3, #14]
 80019b6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7bdb      	ldrb	r3, [r3, #15]
 80019be:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7a5b      	ldrb	r3, [r3, #9]
 80019c6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7a1b      	ldrb	r3, [r3, #8]
 80019ce:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019d0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019da:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019dc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80019de:	e005      	b.n	80019ec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_MPU_ConfigRegion+0x84>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_MPU_ConfigRegion+0x84>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed90 	.word	0xe000ed90

080019fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0c6      	b.n	8001b9c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f007 fdda 	bl	80095d0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2223      	movs	r2, #35	; 0x23
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <HAL_ETH_Init+0x1a8>)
 8001a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a28:	4a5e      	ldr	r2, [pc, #376]	; (8001ba4 <HAL_ETH_Init+0x1a8>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <HAL_ETH_Init+0x1a8>)
 8001a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7a1b      	ldrb	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fe6b 	bl	8001724 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a4e:	e003      	b.n	8001a58 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a50:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a54:	f7ff fe66 	bl	8001724 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a70:	f7ff fe1e 	bl	80016b0 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a76:	e00f      	b.n	8001a98 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a78:	f7ff fe1a 	bl	80016b0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a86:	d907      	bls.n	8001a98 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	22e0      	movs	r2, #224	; 0xe0
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e081      	b.n	8001b9c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1e6      	bne.n	8001a78 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f001 f934 	bl	8002d18 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ab0:	f002 ff46 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_ETH_Init+0x1ac>)
 8001ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8001abc:	0c9a      	lsrs	r2, r3, #18
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f001 f887 	bl	8002bdc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ae4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	22e0      	movs	r2, #224	; 0xe0
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e04a      	b.n	8001b9c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b0e:	4413      	add	r3, r2
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_ETH_Init+0x1b0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6952      	ldr	r2, [r2, #20]
 8001b1a:	0052      	lsls	r2, r2, #1
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	6809      	ldr	r1, [r1, #0]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b26:	440b      	add	r3, r1
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f001 f94c 	bl	8002dc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f001 f990 	bl	8002e56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	3305      	adds	r3, #5
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021a      	lsls	r2, r3, #8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	3304      	adds	r3, #4
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	3303      	adds	r3, #3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	061a      	lsls	r2, r3, #24
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	3302      	adds	r3, #2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b82:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2210      	movs	r2, #16
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2210      	movs	r2, #16
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	ffff8001 	.word	0xffff8001

08001bb0 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	330a      	adds	r3, #10
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_ETH_DescAssignMemory+0x28>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d904      	bls.n	8001be2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e021      	b.n	8001c26 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b087      	sub	sp, #28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	330a      	adds	r3, #10
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d17d      	bne.n	8001d50 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2223      	movs	r2, #35	; 0x23
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e018      	b.n	8001c92 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d902      	bls.n	8001c7e <HAL_ETH_Start_IT+0x4c>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	330a      	adds	r3, #10
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d9e3      	bls.n	8001c60 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0202 	orr.w	r2, r2, #2
 8001cac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cea:	440b      	add	r3, r1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cf6:	4413      	add	r3, r2
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d06:	440b      	add	r3, r1
 8001d08:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001d1c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d20:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2210      	movs	r2, #16
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2222      	movs	r2, #34	; 0x22
 8001d2c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d36:	4413      	add	r3, r2
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001d42:	431a      	orrs	r2, r3
 8001d44:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d48:	440b      	add	r3, r1
 8001d4a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e076      	b.n	8001e6e <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d171      	bne.n	8001e6c <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f001 f8bf 	bl	8002f10 <ETH_Prepare_Tx_Descriptors>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f043 0202 	orr.w	r2, r3, #2
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e062      	b.n	8001e6e <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3206      	adds	r2, #6
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d904      	bls.n	8001dd2 <HAL_ETH_Transmit+0x74>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	1f1a      	subs	r2, r3, #4
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	3106      	adds	r1, #6
 8001dde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001de2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001de6:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001de8:	f7ff fc62 	bl	80016b0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001dee:	e034      	b.n	8001e5a <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d011      	beq.n	8001e26 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	f043 0208 	orr.w	r2, r3, #8
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	22e0      	movs	r2, #224	; 0xe0
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e023      	b.n	8001e6e <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d015      	beq.n	8001e5a <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001e2e:	f7ff fc3f 	bl	80016b0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <HAL_ETH_Transmit+0xe6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2210      	movs	r2, #16
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e009      	b.n	8001e6e <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	dbc6      	blt.n	8001df0 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2210      	movs	r2, #16
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e000      	b.n	8001e6e <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
  }
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b089      	sub	sp, #36	; 0x24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	332c      	adds	r3, #44	; 0x2c
 8001e82:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d06b      	beq.n	8001f80 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e0bc      	b.n	8002026 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d036      	beq.n	8001f2c <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d902      	bls.n	8001ee0 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b04      	subs	r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db11      	blt.n	8001f16 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2201      	movs	r2, #1
 8001f02:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d902      	bls.n	8001f16 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3b04      	subs	r3, #4
 8001f14:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e07c      	b.n	8002026 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3301      	adds	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d902      	bls.n	8001f52 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e010      	b.n	8001f80 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3301      	adds	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d902      	bls.n	8001f76 <HAL_ETH_IsRxDataAvailable+0x100>
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3b04      	subs	r3, #4
 8001f74:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db02      	blt.n	8001f8e <HAL_ETH_IsRxDataAvailable+0x118>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d98e      	bls.n	8001eac <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d044      	beq.n	800201e <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e036      	b.n	8002016 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fb6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d902      	bls.n	8002006 <HAL_ETH_IsRxDataAvailable+0x190>
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3b04      	subs	r3, #4
 8002004:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d3c4      	bcc.n	8001fa8 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]

  return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	332c      	adds	r3, #44	; 0x2c
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07d      	b.n	8002166 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff feff 	bl	8001e76 <HAL_ETH_IsRxDataAvailable>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e071      	b.n	8002166 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002090:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	e031      	b.n	80020fc <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	461a      	mov	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	461a      	mov	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020d2:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d902      	bls.n	80020e6 <HAL_ETH_GetRxDataBuffer+0xb4>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3b04      	subs	r3, #4
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	3301      	adds	r3, #1
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	3b01      	subs	r3, #1
 8002102:	6a3a      	ldr	r2, [r7, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3c7      	bcc.n	8002098 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	461a      	mov	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	429a      	cmp	r2, r3
 8002128:	d803      	bhi.n	8002132 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	e018      	b.n	8002164 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	461a      	mov	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e001      	b.n	8002164 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3728      	adds	r7, #40	; 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	332c      	adds	r3, #44	; 0x2c
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fe72 	bl	8001e76 <HAL_ETH_IsRxDataAvailable>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e017      	b.n	80021cc <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	3b01      	subs	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d902      	bls.n	80021b4 <HAL_ETH_GetRxDataLength+0x46>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3b04      	subs	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	332c      	adds	r3, #44	; 0x2c
 80021e0:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e055      	b.n	80022b0 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e03c      	b.n	8002292 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002226:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	3b01      	subs	r3, #1
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	429a      	cmp	r2, r3
 800226e:	d20d      	bcs.n	800228c <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d902      	bls.n	8002282 <HAL_ETH_BuildRxDescriptors+0xae>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3b04      	subs	r3, #4
 8002280:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3301      	adds	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3be      	bcc.n	8002218 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	f241 1328 	movw	r3, #4392	; 0x1128
 80022a4:	440b      	add	r3, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3724      	adds	r7, #36	; 0x24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e03e      	b.n	800235c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	055b      	lsls	r3, r3, #21
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f043 030c 	orr.w	r3, r3, #12
 800230a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800231e:	f7ff f9c7 	bl	80016b0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002324:	e009      	b.n	800233a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002326:	f7ff f9c3 	bl	80016b0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002334:	d901      	bls.n	800233a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e010      	b.n	800235c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ed      	bne.n	8002326 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e03c      	b.n	8002400 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800238e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	055b      	lsls	r3, r3, #21
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 030c 	bic.w	r3, r3, #12
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_ETH_WritePHYRegister+0xa4>)
 80023c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_ETH_WritePHYRegister+0xa4>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80023d2:	f7ff f96d 	bl	80016b0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023d8:	e009      	b.n	80023ee <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80023da:	f7ff f969 	bl	80016b0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023e8:	d901      	bls.n	80023ee <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e008      	b.n	8002400 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ed      	bne.n	80023da <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40028000 	.word	0x40028000

0800240c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e1c3      	b.n	80027a8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0e5b      	lsrs	r3, r3, #25
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002734:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002744:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf14      	ite	ne
 800277a:	2301      	movne	r3, #1
 800277c:	2300      	moveq	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e00a      	b.n	80027de <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d105      	bne.n	80027dc <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f860 	bl	8002898 <ETH_SetMACConfig>

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027f8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002800:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002802:	f002 f89d 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8002806:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d908      	bls.n	8002822 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d804      	bhi.n	8002822 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e027      	b.n	8002872 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4a18      	ldr	r2, [pc, #96]	; (8002888 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d908      	bls.n	800283c <HAL_ETH_SetMDIOClockRange+0x54>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d804      	bhi.n	800283c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e01a      	b.n	8002872 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d903      	bls.n	800284c <HAL_ETH_SetMDIOClockRange+0x64>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d911      	bls.n	8002870 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d908      	bls.n	8002866 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d804      	bhi.n	8002866 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e005      	b.n	8002872 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e000      	b.n	8002872 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002870:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	01312cff 	.word	0x01312cff
 8002888:	02160ebf 	.word	0x02160ebf
 800288c:	039386ff 	.word	0x039386ff
 8002890:	05f5e0ff 	.word	0x05f5e0ff
 8002894:	08f0d17f 	.word	0x08f0d17f

08002898 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80028aa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80028b2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	7b1b      	ldrb	r3, [r3, #12]
 80028b8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028ba:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	7b5b      	ldrb	r3, [r3, #13]
 80028c0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028c2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	7b9b      	ldrb	r3, [r3, #14]
 80028c8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	7bdb      	ldrb	r3, [r3, #15]
 80028d0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028d2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	7c12      	ldrb	r2, [r2, #16]
 80028d8:	2a00      	cmp	r2, #0
 80028da:	d102      	bne.n	80028e2 <ETH_SetMACConfig+0x4a>
 80028dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028e0:	e000      	b.n	80028e4 <ETH_SetMACConfig+0x4c>
 80028e2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028e4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	7c52      	ldrb	r2, [r2, #17]
 80028ea:	2a00      	cmp	r2, #0
 80028ec:	d102      	bne.n	80028f4 <ETH_SetMACConfig+0x5c>
 80028ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f2:	e000      	b.n	80028f6 <ETH_SetMACConfig+0x5e>
 80028f4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028f6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	7c9b      	ldrb	r3, [r3, #18]
 80028fc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028fe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002904:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800290a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	7f1b      	ldrb	r3, [r3, #28]
 8002910:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002912:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7f5b      	ldrb	r3, [r3, #29]
 8002918:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800291a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	7f92      	ldrb	r2, [r2, #30]
 8002920:	2a00      	cmp	r2, #0
 8002922:	d102      	bne.n	800292a <ETH_SetMACConfig+0x92>
 8002924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002928:	e000      	b.n	800292c <ETH_SetMACConfig+0x94>
 800292a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800292c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	7fdb      	ldrb	r3, [r3, #31]
 8002932:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002934:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	f892 2020 	ldrb.w	r2, [r2, #32]
 800293c:	2a00      	cmp	r2, #0
 800293e:	d102      	bne.n	8002946 <ETH_SetMACConfig+0xae>
 8002940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002944:	e000      	b.n	8002948 <ETH_SetMACConfig+0xb0>
 8002946:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002948:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800294e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002956:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002958:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <ETH_SetMACConfig+0x22c>)
 800296a:	4013      	ands	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	430b      	orrs	r3, r1
 8002974:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002982:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002984:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800298e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002996:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002998:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80029a0:	2a00      	cmp	r2, #0
 80029a2:	d102      	bne.n	80029aa <ETH_SetMACConfig+0x112>
 80029a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029a8:	e000      	b.n	80029ac <ETH_SetMACConfig+0x114>
 80029aa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80029ac:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <ETH_SetMACConfig+0x230>)
 80029be:	4013      	ands	r3, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	430b      	orrs	r3, r1
 80029c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <ETH_SetMACConfig+0x234>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	430b      	orrs	r3, r1
 80029ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029fa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	d101      	bne.n	8002a0a <ETH_SetMACConfig+0x172>
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	e000      	b.n	8002a0c <ETH_SetMACConfig+0x174>
 8002a0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002a0c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a1e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002a22:	4013      	ands	r3, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	68f9      	ldr	r1, [r7, #12]
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002a34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f023 0103 	bic.w	r1, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a62:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	d101      	bne.n	8002a86 <ETH_SetMACConfig+0x1ee>
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	e000      	b.n	8002a88 <ETH_SetMACConfig+0x1f0>
 8002a86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002a88:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002a90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a92:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002aa8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	00048083 	.word	0x00048083
 8002ac8:	c0f88000 	.word	0xc0f88000
 8002acc:	fffffef0 	.word	0xfffffef0

08002ad0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <ETH_SetDMAConfig+0xf8>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6809      	ldr	r1, [r1, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002af6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	791b      	ldrb	r3, [r3, #4]
 8002afc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b02:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	7b1b      	ldrb	r3, [r3, #12]
 8002b08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b16:	4413      	add	r3, r2
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <ETH_SetDMAConfig+0xfc>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6811      	ldr	r1, [r2, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b2a:	440b      	add	r3, r1
 8002b2c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	7b5b      	ldrb	r3, [r3, #13]
 8002b32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <ETH_SetDMAConfig+0x100>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002b56:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	7d1b      	ldrb	r3, [r3, #20]
 8002b60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b62:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	7f5b      	ldrb	r3, [r3, #29]
 8002b68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b76:	4413      	add	r3, r2
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <ETH_SetDMAConfig+0x104>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b8a:	440b      	add	r3, r1
 8002b8c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	7f1b      	ldrb	r3, [r3, #28]
 8002b92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ba4:	4413      	add	r3, r2
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <ETH_SetDMAConfig+0x108>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6811      	ldr	r1, [r2, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bb8:	440b      	add	r3, r1
 8002bba:	601a      	str	r2, [r3, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	ffff87fd 	.word	0xffff87fd
 8002bcc:	ffff2ffe 	.word	0xffff2ffe
 8002bd0:	fffec000 	.word	0xfffec000
 8002bd4:	ffc0efef 	.word	0xffc0efef
 8002bd8:	7fc0ffff 	.word	0x7fc0ffff

08002bdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0a4      	sub	sp, #144	; 0x90
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bea:	2300      	movs	r3, #0
 8002bec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002c38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002c56:	2300      	movs	r3, #0
 8002c58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c74:	2320      	movs	r3, #32
 8002c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fde6 	bl	8002898 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ce6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cf4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002cfc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fee1 	bl	8002ad0 <ETH_SetDMAConfig>
}
 8002d0e:	bf00      	nop
 8002d10:	3790      	adds	r7, #144	; 0x90
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d32:	f001 fe05 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8002d36:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d908      	bls.n	8002d52 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d804      	bhi.n	8002d52 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e027      	b.n	8002da2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d908      	bls.n	8002d6c <ETH_MAC_MDIO_ClkConfig+0x54>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d804      	bhi.n	8002d6c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e01a      	b.n	8002da2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d903      	bls.n	8002d7c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d911      	bls.n	8002da0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d908      	bls.n	8002d96 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d804      	bhi.n	8002d96 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e005      	b.n	8002da2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e000      	b.n	8002da2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002da0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	01312cff 	.word	0x01312cff
 8002db8:	02160ebf 	.word	0x02160ebf
 8002dbc:	039386ff 	.word	0x039386ff
 8002dc0:	05f5e0ff 	.word	0x05f5e0ff
 8002dc4:	08f0d17f 	.word	0x08f0d17f

08002dc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e01d      	b.n	8002e12 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	3206      	adds	r2, #6
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d9de      	bls.n	8002dd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f241 132c 	movw	r3, #4396	; 0x112c
 8002e26:	4413      	add	r3, r2
 8002e28:	2203      	movs	r2, #3
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68d9      	ldr	r1, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	f241 1314 	movw	r3, #4372	; 0x1114
 8002e38:	4413      	add	r3, r2
 8002e3a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e024      	b.n	8002eae <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6919      	ldr	r1, [r3, #16]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	330a      	adds	r3, #10
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d9d7      	bls.n	8002e64 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	f241 1330 	movw	r3, #4400	; 0x1130
 8002eda:	4413      	add	r3, r2
 8002edc:	2203      	movs	r2, #3
 8002ede:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6919      	ldr	r1, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f241 131c 	movw	r3, #4380	; 0x111c
 8002eec:	4413      	add	r3, r2
 8002eee:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f00:	4413      	add	r3, r2
 8002f02:	6019      	str	r1, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b08d      	sub	sp, #52	; 0x34
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3318      	adds	r3, #24
 8002f20:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f4e:	d101      	bne.n	8002f54 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f50:	2302      	movs	r3, #2
 8002f52:	e223      	b.n	800339c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d044      	beq.n	8002fea <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	4b72      	ldr	r3, [pc, #456]	; (8003130 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d027      	beq.n	8002fea <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fd8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00e      	beq.n	8003014 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	6992      	ldr	r2, [r2, #24]
 8003002:	431a      	orrs	r2, r3
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <ETH_Prepare_Tx_Descriptors+0x11c>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d030      	beq.n	800308e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	3301      	adds	r3, #1
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	2b03      	cmp	r3, #3
 800304e:	d902      	bls.n	8003056 <ETH_Prepare_Tx_Descriptors+0x146>
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	3b04      	subs	r3, #4
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	3301      	adds	r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800306e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003072:	d10c      	bne.n	800308e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800308a:	2302      	movs	r3, #2
 800308c:	e186      	b.n	800339c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	3301      	adds	r3, #1
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <ETH_Prepare_Tx_Descriptors+0x224>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	6852      	ldr	r2, [r2, #4]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <ETH_Prepare_Tx_Descriptors+0x228>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	6852      	ldr	r2, [r2, #4]
 80030d4:	0412      	lsls	r2, r2, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e008      	b.n	80030f0 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <ETH_Prepare_Tx_Descriptors+0x228>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d021      	beq.n	8003140 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	04db      	lsls	r3, r3, #19
 800310a:	431a      	orrs	r2, r3
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <ETH_Prepare_Tx_Descriptors+0x22c>)
 8003116:	4013      	ands	r3, r2
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	69d2      	ldr	r2, [r2, #28]
 800311c:	431a      	orrs	r2, r3
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e02e      	b.n	800318e <ETH_Prepare_Tx_Descriptors+0x27e>
 8003130:	ffff0000 	.word	0xffff0000
 8003134:	ffffc000 	.word	0xffffc000
 8003138:	c000ffff 	.word	0xc000ffff
 800313c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	4b98      	ldr	r3, [pc, #608]	; (80033a8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003146:	4013      	ands	r3, r2
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	6852      	ldr	r2, [r2, #4]
 800314c:	431a      	orrs	r2, r3
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	431a      	orrs	r2, r3
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	431a      	orrs	r2, r3
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	431a      	orrs	r2, r3
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80c0 	beq.w	800335e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80031f0:	e0b5      	b.n	800335e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	3301      	adds	r3, #1
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2b03      	cmp	r3, #3
 8003208:	d902      	bls.n	8003210 <ETH_Prepare_Tx_Descriptors+0x300>
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	3b04      	subs	r3, #4
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800322e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003232:	d126      	bne.n	8003282 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	e016      	b.n	8003276 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	3301      	adds	r3, #1
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	2b03      	cmp	r3, #3
 800325e:	d902      	bls.n	8003266 <ETH_Prepare_Tx_Descriptors+0x356>
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	3b04      	subs	r3, #4
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	429a      	cmp	r2, r3
 800327c:	d3e4      	bcc.n	8003248 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	e08c      	b.n	800339c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	3301      	adds	r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <ETH_Prepare_Tx_Descriptors+0x49c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	6852      	ldr	r2, [r2, #4]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	6852      	ldr	r2, [r2, #4]
 80032ce:	0412      	lsls	r2, r2, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	e008      	b.n	80032ea <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	6a3a      	ldr	r2, [r7, #32]
 80032e8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00f      	beq.n	8003316 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	69d2      	ldr	r2, [r2, #28]
 8003302:	431a      	orrs	r2, r3
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e017      	b.n	8003346 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <ETH_Prepare_Tx_Descriptors+0x498>)
 800331c:	4013      	ands	r3, r2
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	431a      	orrs	r2, r3
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	431a      	orrs	r2, r3
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f47f af45 	bne.w	80031f2 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	e005      	b.n	8003388 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3734      	adds	r7, #52	; 0x34
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	ffff8000 	.word	0xffff8000
 80033ac:	ffffc000 	.word	0xffffc000
 80033b0:	c000ffff 	.word	0xc000ffff
 80033b4:	fffc0000 	.word	0xfffc0000

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033c6:	4b89      	ldr	r3, [pc, #548]	; (80035ec <HAL_GPIO_Init+0x234>)
 80033c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033ca:	e194      	b.n	80036f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8186 	beq.w	80036f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d00b      	beq.n	8003404 <HAL_GPIO_Init+0x4c>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d007      	beq.n	8003404 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b12      	cmp	r3, #18
 8003402:	d130      	bne.n	8003466 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343a:	2201      	movs	r2, #1
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f003 0201 	and.w	r2, r3, #1
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0xee>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b12      	cmp	r3, #18
 80034a4:	d123      	bne.n	80034ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	08da      	lsrs	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3208      	adds	r2, #8
 80034ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	08da      	lsrs	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3208      	adds	r2, #8
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0203 	and.w	r2, r3, #3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80e0 	beq.w	80036f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003530:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_GPIO_Init+0x238>)
 8003532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003536:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_GPIO_Init+0x238>)
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_GPIO_Init+0x238>)
 8003542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_GPIO_Init+0x23c>)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	220f      	movs	r2, #15
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <HAL_GPIO_Init+0x240>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d052      	beq.n	8003620 <HAL_GPIO_Init+0x268>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_GPIO_Init+0x244>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d031      	beq.n	80035e6 <HAL_GPIO_Init+0x22e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_GPIO_Init+0x248>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02b      	beq.n	80035e2 <HAL_GPIO_Init+0x22a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_GPIO_Init+0x24c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d025      	beq.n	80035de <HAL_GPIO_Init+0x226>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_GPIO_Init+0x250>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01f      	beq.n	80035da <HAL_GPIO_Init+0x222>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_GPIO_Init+0x254>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d019      	beq.n	80035d6 <HAL_GPIO_Init+0x21e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <HAL_GPIO_Init+0x258>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_GPIO_Init+0x21a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_GPIO_Init+0x25c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00d      	beq.n	80035ce <HAL_GPIO_Init+0x216>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_GPIO_Init+0x260>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <HAL_GPIO_Init+0x212>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_GPIO_Init+0x264>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_GPIO_Init+0x20e>
 80035c2:	2309      	movs	r3, #9
 80035c4:	e02d      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035c6:	230a      	movs	r3, #10
 80035c8:	e02b      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035ca:	2308      	movs	r3, #8
 80035cc:	e029      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e027      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035d2:	2306      	movs	r3, #6
 80035d4:	e025      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035d6:	2305      	movs	r3, #5
 80035d8:	e023      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035da:	2304      	movs	r3, #4
 80035dc:	e021      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035de:	2303      	movs	r3, #3
 80035e0:	e01f      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e01d      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e01b      	b.n	8003622 <HAL_GPIO_Init+0x26a>
 80035ea:	bf00      	nop
 80035ec:	58000080 	.word	0x58000080
 80035f0:	58024400 	.word	0x58024400
 80035f4:	58000400 	.word	0x58000400
 80035f8:	58020000 	.word	0x58020000
 80035fc:	58020400 	.word	0x58020400
 8003600:	58020800 	.word	0x58020800
 8003604:	58020c00 	.word	0x58020c00
 8003608:	58021000 	.word	0x58021000
 800360c:	58021400 	.word	0x58021400
 8003610:	58021800 	.word	0x58021800
 8003614:	58021c00 	.word	0x58021c00
 8003618:	58022000 	.word	0x58022000
 800361c:	58022400 	.word	0x58022400
 8003620:	2300      	movs	r3, #0
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	f002 0203 	and.w	r2, r2, #3
 8003628:	0092      	lsls	r2, r2, #2
 800362a:	4093      	lsls	r3, r2
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003632:	4938      	ldr	r1, [pc, #224]	; (8003714 <HAL_GPIO_Init+0x35c>)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3302      	adds	r3, #2
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80036ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f ae63 	bne.w	80033cc <HAL_GPIO_Init+0x14>
  }
}
 8003706:	bf00      	nop
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	58000400 	.word	0x58000400

08003718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003734:	e003      	b.n	800373e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	401a      	ands	r2, r3
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	429a      	cmp	r2, r3
 8003762:	d104      	bne.n	800376e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	041a      	lsls	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800376c:	e002      	b.n	8003774 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <HAL_HSEM_FastTake+0x2c>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3320      	adds	r3, #32
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <HAL_HSEM_FastTake+0x30>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	58026400 	.word	0x58026400
 80037b0:	80000300 	.word	0x80000300

080037b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80037be:	4906      	ldr	r1, [pc, #24]	; (80037d8 <HAL_HSEM_Release+0x24>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	58026400 	.word	0x58026400

080037dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037de:	b08f      	sub	sp, #60	; 0x3c
 80037e0:	af0a      	add	r7, sp, #40	; 0x28
 80037e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e116      	b.n	8003a1c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fd fd1f 	bl	800124c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2203      	movs	r2, #3
 8003812:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f005 fb2f 	bl	8008e90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	687e      	ldr	r6, [r7, #4]
 800383a:	466d      	mov	r5, sp
 800383c:	f106 0410 	add.w	r4, r6, #16
 8003840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003848:	e894 0003 	ldmia.w	r4, {r0, r1}
 800384c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003850:	1d33      	adds	r3, r6, #4
 8003852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f005 fab9 	bl	8008dcc <USB_CoreInit>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d7      	b.n	8003a1c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f005 fb1d 	bl	8008eb2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e04a      	b.n	8003914 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	333d      	adds	r3, #61	; 0x3d
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	333c      	adds	r3, #60	; 0x3c
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	b298      	uxth	r0, r3
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3342      	adds	r3, #66	; 0x42
 80038ba:	4602      	mov	r2, r0
 80038bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	333f      	adds	r3, #63	; 0x3f
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3344      	adds	r3, #68	; 0x44
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3348      	adds	r3, #72	; 0x48
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	3350      	adds	r3, #80	; 0x50
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	3301      	adds	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d3af      	bcc.n	800387e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	e044      	b.n	80039ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003924:	7bfa      	ldrb	r2, [r7, #15]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	3301      	adds	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d3b5      	bcc.n	8003924 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	687e      	ldr	r6, [r7, #4]
 80039c0:	466d      	mov	r5, sp
 80039c2:	f106 0410 	add.w	r4, r6, #16
 80039c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039d6:	1d33      	adds	r3, r6, #4
 80039d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f005 fa94 	bl	8008f08 <USB_DevInit>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e014      	b.n	8003a1c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f80a 	bl	8003a24 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f005 fc36 	bl	8009286 <USB_DevDisconnect>

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	10000003 	.word	0x10000003

08003a6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a74:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	2b06      	cmp	r3, #6
 8003a7e:	d00a      	beq.n	8003a96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a80:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d001      	beq.n	8003a92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e040      	b.n	8003b14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e03e      	b.n	8003b14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a9e:	491f      	ldr	r1, [pc, #124]	; (8003b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003aa6:	f7fd fe03 	bl	80016b0 <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aac:	e009      	b.n	8003ac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003aae:	f7fd fdff 	bl	80016b0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003abc:	d901      	bls.n	8003ac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e028      	b.n	8003b14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d1ee      	bne.n	8003aae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b1e      	cmp	r3, #30
 8003ad4:	d008      	beq.n	8003ae8 <HAL_PWREx_ConfigSupply+0x7c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8003ada:	d005      	beq.n	8003ae8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b1d      	cmp	r3, #29
 8003ae0:	d002      	beq.n	8003ae8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ae6:	d114      	bne.n	8003b12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ae8:	f7fd fde2 	bl	80016b0 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003af0:	f7fd fdde 	bl	80016b0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afe:	d901      	bls.n	8003b04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b10:	d1ee      	bne.n	8003af0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	58024800 	.word	0x58024800

08003b20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	58024800 	.word	0x58024800

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	; 0x30
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e3c4      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8087 	beq.w	8003c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b60:	4ba2      	ldr	r3, [pc, #648]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b6a:	4ba0      	ldr	r3, [pc, #640]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d007      	beq.n	8003b86 <HAL_RCC_OscConfig+0x46>
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	2b18      	cmp	r3, #24
 8003b7a:	d110      	bne.n	8003b9e <HAL_RCC_OscConfig+0x5e>
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b86:	4b99      	ldr	r3, [pc, #612]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d06c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x12c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d168      	bne.n	8003c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e39e      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x76>
 8003ba8:	4b90      	ldr	r3, [pc, #576]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a8f      	ldr	r2, [pc, #572]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e02e      	b.n	8003c14 <HAL_RCC_OscConfig+0xd4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a87      	ldr	r2, [pc, #540]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e01d      	b.n	8003c14 <HAL_RCC_OscConfig+0xd4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0xbc>
 8003be2:	4b82      	ldr	r3, [pc, #520]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a81      	ldr	r2, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b7f      	ldr	r3, [pc, #508]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7e      	ldr	r2, [pc, #504]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0xd4>
 8003bfc:	4b7b      	ldr	r3, [pc, #492]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7a      	ldr	r2, [pc, #488]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a77      	ldr	r2, [pc, #476]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fd48 	bl	80016b0 <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd fd44 	bl	80016b0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e352      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c36:	4b6d      	ldr	r3, [pc, #436]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0xe4>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fd34 	bl	80016b0 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fd fd30 	bl	80016b0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e33e      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x10c>
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8092 	beq.w	8003da0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7c:	4b5b      	ldr	r3, [pc, #364]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c86:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x162>
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2b18      	cmp	r3, #24
 8003c96:	d12d      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1b4>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d128      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca2:	4b52      	ldr	r3, [pc, #328]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_RCC_OscConfig+0x17a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e310      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	f7fd fd27 	bl	800170c <HAL_GetREVID>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d80a      	bhi.n	8003cde <HAL_RCC_OscConfig+0x19e>
 8003cc8:	4b48      	ldr	r3, [pc, #288]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	4945      	ldr	r1, [pc, #276]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	e060      	b.n	8003da0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	061b      	lsls	r3, r3, #24
 8003cec:	493f      	ldr	r1, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf2:	e055      	b.n	8003da0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d038      	beq.n	8003d6e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 0219 	bic.w	r2, r3, #25
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4938      	ldr	r1, [pc, #224]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd fccf 	bl	80016b0 <HAL_GetTick>
 8003d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fd fccb 	bl	80016b0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e2d9      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d28:	4b30      	ldr	r3, [pc, #192]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	f7fd fcea 	bl	800170c <HAL_GetREVID>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d80a      	bhi.n	8003d58 <HAL_RCC_OscConfig+0x218>
 8003d42:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	031b      	lsls	r3, r3, #12
 8003d50:	4926      	ldr	r1, [pc, #152]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]
 8003d56:	e023      	b.n	8003da0 <HAL_RCC_OscConfig+0x260>
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	4921      	ldr	r1, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
 8003d6c:	e018      	b.n	8003da0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fd fc99 	bl	80016b0 <HAL_GetTick>
 8003d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d82:	f7fd fc95 	bl	80016b0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e2a3      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d94:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8091 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d007      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x294>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b18      	cmp	r3, #24
 8003dc8:	d12f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2ea>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d12a      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2b0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d003      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e277      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
 8003dec:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003df0:	f7fd fc8c 	bl	800170c <HAL_GetREVID>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d80a      	bhi.n	8003e14 <HAL_RCC_OscConfig+0x2d4>
 8003dfe:	4ba2      	ldr	r3, [pc, #648]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	069b      	lsls	r3, r3, #26
 8003e0c:	499e      	ldr	r1, [pc, #632]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e12:	e05d      	b.n	8003ed0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e14:	4b9c      	ldr	r3, [pc, #624]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	4999      	ldr	r1, [pc, #612]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e28:	e052      	b.n	8003ed0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d035      	beq.n	8003e9e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e32:	4b95      	ldr	r3, [pc, #596]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a94      	ldr	r2, [pc, #592]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fc37 	bl	80016b0 <HAL_GetTick>
 8003e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e46:	f7fd fc33 	bl	80016b0 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e241      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e58:	4b8b      	ldr	r3, [pc, #556]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e64:	f7fd fc52 	bl	800170c <HAL_GetREVID>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d80a      	bhi.n	8003e88 <HAL_RCC_OscConfig+0x348>
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	069b      	lsls	r3, r3, #26
 8003e80:	4981      	ldr	r1, [pc, #516]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
 8003e86:	e023      	b.n	8003ed0 <HAL_RCC_OscConfig+0x390>
 8003e88:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	497c      	ldr	r1, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
 8003e9c:	e018      	b.n	8003ed0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a79      	ldr	r2, [pc, #484]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fd fc01 	bl	80016b0 <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003eb2:	f7fd fbfd 	bl	80016b0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e20b      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ec4:	4b70      	ldr	r3, [pc, #448]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d036      	beq.n	8003f4a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d019      	beq.n	8003f18 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee4:	4b68      	ldr	r3, [pc, #416]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	4a67      	ldr	r2, [pc, #412]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fbde 	bl	80016b0 <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7fd fbda 	bl	80016b0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e1e8      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x3b8>
 8003f16:	e018      	b.n	8003f4a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f18:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fd fbc4 	bl	80016b0 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fd fbc0 	bl	80016b0 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e1ce      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f3e:	4b52      	ldr	r3, [pc, #328]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d036      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d019      	beq.n	8003f92 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a49      	ldr	r2, [pc, #292]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd fba1 	bl	80016b0 <HAL_GetTick>
 8003f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f72:	f7fd fb9d 	bl	80016b0 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1ab      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f84:	4b40      	ldr	r3, [pc, #256]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x432>
 8003f90:	e018      	b.n	8003fc4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f92:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f9e:	f7fd fb87 	bl	80016b0 <HAL_GetTick>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fa6:	f7fd fb83 	bl	80016b0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e191      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fb8:	4b33      	ldr	r3, [pc, #204]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8086 	beq.w	80040de <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCC_OscConfig+0x54c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	; (800408c <HAL_RCC_OscConfig+0x54c>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fde:	f7fd fb67 	bl	80016b0 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd fb63 	bl	80016b0 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b64      	cmp	r3, #100	; 0x64
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e171      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCC_OscConfig+0x54c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x4da>
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	e02d      	b.n	8004076 <HAL_RCC_OscConfig+0x536>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0x4fc>
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	; 0x70
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	e01c      	b.n	8004076 <HAL_RCC_OscConfig+0x536>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b05      	cmp	r3, #5
 8004042:	d10c      	bne.n	800405e <HAL_RCC_OscConfig+0x51e>
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 800404a:	f043 0304 	orr.w	r3, r3, #4
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
 800405c:	e00b      	b.n	8004076 <HAL_RCC_OscConfig+0x536>
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a06      	ldr	r2, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x548>)
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01a      	beq.n	80040b4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407e:	f7fd fb17 	bl	80016b0 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004084:	e00f      	b.n	80040a6 <HAL_RCC_OscConfig+0x566>
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
 800408c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7fd fb0e 	bl	80016b0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e11a      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040a6:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ee      	beq.n	8004090 <HAL_RCC_OscConfig+0x550>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fd fafc 	bl	80016b0 <HAL_GetTick>
 80040b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7fd faf8 	bl	80016b0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e104      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040d2:	4b84      	ldr	r3, [pc, #528]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1ee      	bne.n	80040bc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80f9 	beq.w	80042da <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040e8:	4b7e      	ldr	r3, [pc, #504]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f0:	2b18      	cmp	r3, #24
 80040f2:	f000 80b4 	beq.w	800425e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	f040 8095 	bne.w	800422a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004100:	4b78      	ldr	r3, [pc, #480]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a77      	ldr	r2, [pc, #476]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd fad0 	bl	80016b0 <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd facc 	bl	80016b0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0da      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004126:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004132:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004136:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <HAL_RCC_OscConfig+0x7a8>)
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	430a      	orrs	r2, r1
 8004146:	4967      	ldr	r1, [pc, #412]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	628b      	str	r3, [r1, #40]	; 0x28
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	3b01      	subs	r3, #1
 8004152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	3b01      	subs	r3, #1
 800415c:	025b      	lsls	r3, r3, #9
 800415e:	b29b      	uxth	r3, r3
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	3b01      	subs	r3, #1
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	3b01      	subs	r3, #1
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800417c:	4959      	ldr	r1, [pc, #356]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004182:	4b58      	ldr	r3, [pc, #352]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	4a57      	ldr	r2, [pc, #348]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800418e:	4b55      	ldr	r3, [pc, #340]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004192:	4b56      	ldr	r3, [pc, #344]	; (80042ec <HAL_RCC_OscConfig+0x7ac>)
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800419a:	00d2      	lsls	r2, r2, #3
 800419c:	4951      	ldr	r1, [pc, #324]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041a2:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f023 020c 	bic.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f023 0202 	bic.w	r2, r3, #2
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	4948      	ldr	r1, [pc, #288]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a46      	ldr	r2, [pc, #280]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	4a43      	ldr	r2, [pc, #268]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	4a40      	ldr	r2, [pc, #256]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3a      	ldr	r2, [pc, #232]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 80041fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fd fa55 	bl	80016b0 <HAL_GetTick>
 8004206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420a:	f7fd fa51 	bl	80016b0 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e05f      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800421c:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x6ca>
 8004228:	e057      	b.n	80042da <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd fa3b 	bl	80016b0 <HAL_GetTick>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423e:	f7fd fa37 	bl	80016b0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e045      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x6fe>
 800425c:	e03d      	b.n	80042da <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <HAL_RCC_OscConfig+0x7a4>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b01      	cmp	r3, #1
 8004270:	d031      	beq.n	80042d6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0203 	and.w	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d12a      	bne.n	80042d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d122      	bne.n	80042d6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d11a      	bne.n	80042d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0a5b      	lsrs	r3, r3, #9
 80042a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d111      	bne.n	80042d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d108      	bne.n	80042d6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3730      	adds	r7, #48	; 0x30
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	58024400 	.word	0x58024400
 80042e8:	fffffc0c 	.word	0xfffffc0c
 80042ec:	ffff0007 	.word	0xffff0007

080042f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e19c      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b8a      	ldr	r3, [pc, #552]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d910      	bls.n	8004334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b87      	ldr	r3, [pc, #540]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	4985      	ldr	r1, [pc, #532]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e184      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800434c:	429a      	cmp	r2, r3
 800434e:	d908      	bls.n	8004362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004350:	4b78      	ldr	r3, [pc, #480]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	4975      	ldr	r1, [pc, #468]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800435e:	4313      	orrs	r3, r2
 8004360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437a:	429a      	cmp	r2, r3
 800437c:	d908      	bls.n	8004390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800437e:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	496a      	ldr	r1, [pc, #424]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800438c:	4313      	orrs	r3, r2
 800438e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d908      	bls.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043ac:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	495e      	ldr	r1, [pc, #376]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d010      	beq.n	80043ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d908      	bls.n	80043ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4953      	ldr	r1, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	429a      	cmp	r2, r3
 8004406:	d908      	bls.n	800441a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f023 020f 	bic.w	r2, r3, #15
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4947      	ldr	r1, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004416:	4313      	orrs	r3, r2
 8004418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d055      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004426:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4940      	ldr	r1, [pc, #256]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004434:	4313      	orrs	r3, r2
 8004436:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004440:	4b3c      	ldr	r3, [pc, #240]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d121      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0f6      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d115      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0ea      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0de      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004480:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0d6      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004490:	4b28      	ldr	r3, [pc, #160]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f023 0207 	bic.w	r2, r3, #7
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4925      	ldr	r1, [pc, #148]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fd f905 	bl	80016b0 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a8:	e00a      	b.n	80044c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044aa:	f7fd f901 	bl	80016b0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0be      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c0:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d1eb      	bne.n	80044aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d208      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d214      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 020f 	bic.w	r2, r3, #15
 8004516:	4906      	ldr	r1, [pc, #24]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e086      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
 8004530:	52002000 	.word	0x52002000
 8004534:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004550:	429a      	cmp	r2, r3
 8004552:	d208      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4939      	ldr	r1, [pc, #228]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004562:	4313      	orrs	r3, r2
 8004564:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800457e:	429a      	cmp	r2, r3
 8004580:	d208      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	492e      	ldr	r1, [pc, #184]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004590:	4313      	orrs	r3, r2
 8004592:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d208      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	4922      	ldr	r1, [pc, #136]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045da:	429a      	cmp	r2, r3
 80045dc:	d208      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4917      	ldr	r1, [pc, #92]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045f0:	f000 f834 	bl	800465c <HAL_RCC_GetSysClockFreq>
 80045f4:	4601      	mov	r1, r0
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_RCC_ClockConfig+0x35c>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	fa21 f303 	lsr.w	r3, r1, r3
 800460c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	4a0d      	ldr	r2, [pc, #52]	; (800464c <HAL_RCC_ClockConfig+0x35c>)
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <HAL_RCC_ClockConfig+0x360>)
 8004626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004628:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_RCC_ClockConfig+0x364>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x368>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fc26 	bl	8000e84 <HAL_InitTick>
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	58024400 	.word	0x58024400
 800464c:	0801c5b0 	.word	0x0801c5b0
 8004650:	20000004 	.word	0x20000004
 8004654:	20000000 	.word	0x20000000
 8004658:	20000008 	.word	0x20000008

0800465c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004662:	4baf      	ldr	r3, [pc, #700]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466a:	2b18      	cmp	r3, #24
 800466c:	f200 814e 	bhi.w	800490c <HAL_RCC_GetSysClockFreq+0x2b0>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046dd 	.word	0x080046dd
 800467c:	0800490d 	.word	0x0800490d
 8004680:	0800490d 	.word	0x0800490d
 8004684:	0800490d 	.word	0x0800490d
 8004688:	0800490d 	.word	0x0800490d
 800468c:	0800490d 	.word	0x0800490d
 8004690:	0800490d 	.word	0x0800490d
 8004694:	0800490d 	.word	0x0800490d
 8004698:	08004703 	.word	0x08004703
 800469c:	0800490d 	.word	0x0800490d
 80046a0:	0800490d 	.word	0x0800490d
 80046a4:	0800490d 	.word	0x0800490d
 80046a8:	0800490d 	.word	0x0800490d
 80046ac:	0800490d 	.word	0x0800490d
 80046b0:	0800490d 	.word	0x0800490d
 80046b4:	0800490d 	.word	0x0800490d
 80046b8:	08004709 	.word	0x08004709
 80046bc:	0800490d 	.word	0x0800490d
 80046c0:	0800490d 	.word	0x0800490d
 80046c4:	0800490d 	.word	0x0800490d
 80046c8:	0800490d 	.word	0x0800490d
 80046cc:	0800490d 	.word	0x0800490d
 80046d0:	0800490d 	.word	0x0800490d
 80046d4:	0800490d 	.word	0x0800490d
 80046d8:	0800470f 	.word	0x0800470f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046dc:	4b90      	ldr	r3, [pc, #576]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046e8:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	4a8c      	ldr	r2, [pc, #560]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
 80046f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046fa:	e10a      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046fc:	4b89      	ldr	r3, [pc, #548]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046fe:	61bb      	str	r3, [r7, #24]
    break;
 8004700:	e107      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004702:	4b89      	ldr	r3, [pc, #548]	; (8004928 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004704:	61bb      	str	r3, [r7, #24]
    break;
 8004706:	e104      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004708:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800470a:	61bb      	str	r3, [r7, #24]
    break;
 800470c:	e101      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800470e:	4b84      	ldr	r3, [pc, #528]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004718:	4b81      	ldr	r3, [pc, #516]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004722:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004724:	4b7e      	ldr	r3, [pc, #504]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800472e:	4b7c      	ldr	r3, [pc, #496]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	08db      	lsrs	r3, r3, #3
 8004734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80da 	beq.w	8004906 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d05a      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x1b2>
 8004758:	2b01      	cmp	r3, #1
 800475a:	d302      	bcc.n	8004762 <HAL_RCC_GetSysClockFreq+0x106>
 800475c:	2b02      	cmp	r3, #2
 800475e:	d078      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004760:	e099      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004762:	4b6f      	ldr	r3, [pc, #444]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02d      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800476e:	4b6c      	ldr	r3, [pc, #432]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	4a6a      	ldr	r2, [pc, #424]	; (8004924 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004798:	4b61      	ldr	r3, [pc, #388]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2d4>
 80047b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80047c8:	e087      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004934 <HAL_RCC_GetSysClockFreq+0x2d8>
 80047d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047dc:	4b50      	ldr	r3, [pc, #320]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80047f0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2d4>
 80047f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480c:	e065      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004818:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004938 <HAL_RCC_GetSysClockFreq+0x2dc>
 800481c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004820:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004830:	ed97 6a02 	vldr	s12, [r7, #8]
 8004834:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004850:	e043      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800493c <HAL_RCC_GetSysClockFreq+0x2e0>
 8004860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004864:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004874:	ed97 6a02 	vldr	s12, [r7, #8]
 8004878:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2d4>
 800487c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004894:	e021      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004938 <HAL_RCC_GetSysClockFreq+0x2dc>
 80048a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80048bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004930 <HAL_RCC_GetSysClockFreq+0x2d4>
 80048c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	0a5b      	lsrs	r3, r3, #9
 80048e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e4:	3301      	adds	r3, #1
 80048e6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fe:	ee17 3a90 	vmov	r3, s15
 8004902:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004904:	e005      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
    break;
 800490a:	e002      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800490e:	61bb      	str	r3, [r7, #24]
    break;
 8004910:	bf00      	nop
  }

  return sysclockfreq;
 8004912:	69bb      	ldr	r3, [r7, #24]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3724      	adds	r7, #36	; 0x24
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	58024400 	.word	0x58024400
 8004924:	03d09000 	.word	0x03d09000
 8004928:	003d0900 	.word	0x003d0900
 800492c:	007a1200 	.word	0x007a1200
 8004930:	46000000 	.word	0x46000000
 8004934:	4c742400 	.word	0x4c742400
 8004938:	4a742400 	.word	0x4a742400
 800493c:	4af42400 	.word	0x4af42400

08004940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004946:	f7ff fe89 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800494a:	4601      	mov	r1, r0
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_RCC_GetHCLKFreq+0x50>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <HAL_RCC_GetHCLKFreq+0x54>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	fa21 f303 	lsr.w	r3, r1, r3
 8004962:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_GetHCLKFreq+0x50>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_GetHCLKFreq+0x54>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_RCC_GetHCLKFreq+0x58>)
 800497c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800497e:	4a07      	ldr	r2, [pc, #28]	; (800499c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <HAL_RCC_GetHCLKFreq+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	58024400 	.word	0x58024400
 8004994:	0801c5b0 	.word	0x0801c5b0
 8004998:	20000004 	.word	0x20000004
 800499c:	20000000 	.word	0x20000000

080049a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049a4:	f7ff ffcc 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 80049a8:	4601      	mov	r1, r0
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	58024400 	.word	0x58024400
 80049c8:	0801c5b0 	.word	0x0801c5b0

080049cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049d0:	f7ff ffb6 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 80049d4:	4601      	mov	r1, r0
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	58024400 	.word	0x58024400
 80049f4:	0801c5b0 	.word	0x0801c5b0

080049f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223f      	movs	r2, #63	; 0x3f
 8004a06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0207 	and.w	r2, r3, #7
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 020f 	and.w	r2, r3, #15
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_RCC_GetClockConfig+0x7c>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_RCC_GetClockConfig+0x80>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	58024400 	.word	0x58024400
 8004a78:	52002000 	.word	0x52002000

08004a7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a88:	2300      	movs	r3, #0
 8004a8a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d03d      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa0:	d013      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa6:	d802      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004aac:	e01f      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab2:	d013      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004ab4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ab8:	d01c      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004aba:	e018      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004abc:	4baf      	ldr	r3, [pc, #700]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4aae      	ldr	r2, [pc, #696]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ac8:	e015      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 f95f 	bl	8005d94 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ada:	e00c      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3324      	adds	r3, #36	; 0x24
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 fa08 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
      break;
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004afc:	4b9f      	ldr	r3, [pc, #636]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b08:	499c      	ldr	r1, [pc, #624]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b0e:	e001      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d03d      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d826      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b45 	.word	0x08004b45
 8004b34:	08004b53 	.word	0x08004b53
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004b7d 	.word	0x08004b7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b44:	4b8d      	ldr	r3, [pc, #564]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a8c      	ldr	r2, [pc, #560]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b50:	e015      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 f91b 	bl	8005d94 <RCCEx_PLL2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b62:	e00c      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3324      	adds	r3, #36	; 0x24
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 f9c4 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b74:	e003      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b84:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	f023 0207 	bic.w	r2, r3, #7
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	497a      	ldr	r1, [pc, #488]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	650b      	str	r3, [r1, #80]	; 0x50
 8004b96:	e001      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d03e      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d01c      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d804      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004bbc:	e01e      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc0:	d01f      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d01e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bc8:	e018      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bca:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a6b      	ldr	r2, [pc, #428]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bd6:	e017      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 f8d8 	bl	8005d94 <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004be8:	e00e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f981 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bfa:	e005      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c0e:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	4958      	ldr	r1, [pc, #352]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c20:	e001      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d044      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3c:	d01f      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c42:	d805      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c4c:	d00e      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004c4e:	e01f      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004c50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c54:	d01f      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c5a:	d01e      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c5c:	e018      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a46      	ldr	r2, [pc, #280]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c6a:	e017      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 f88e 	bl	8005d94 <RCCEx_PLL2_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3324      	adds	r3, #36	; 0x24
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 f937 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c8e:	e005      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ca2:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cb0:	4932      	ldr	r1, [pc, #200]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d044      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cd2:	d01f      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cd8:	d805      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce2:	d00e      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ce4:	e01f      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004ce6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cea:	d01f      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf0:	d01e      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004cf2:	e018      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d00:	e017      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f843 	bl	8005d94 <RCCEx_PLL2_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d12:	e00e      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 f8ec 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d24:	e005      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d46:	490d      	ldr	r1, [pc, #52]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d4c:	e001      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d035      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d00c      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d802      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01b      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004d6e:	e017      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d00c      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d018      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004d78:	e012      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d80:	4baf      	ldr	r3, [pc, #700]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4aae      	ldr	r2, [pc, #696]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d8c:	e00e      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fffd 	bl	8005d94 <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d9e:	e005      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	e002      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004db2:	4ba3      	ldr	r3, [pc, #652]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbe:	49a0      	ldr	r1, [pc, #640]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dc4:	e001      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d042      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	d01f      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de4:	d805      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d00e      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004df0:	e01f      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004df2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df6:	d01f      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfc:	d01e      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004dfe:	e018      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e00:	4b8f      	ldr	r3, [pc, #572]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a8e      	ldr	r2, [pc, #568]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e0c:	e017      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 ffbd 	bl	8005d94 <RCCEx_PLL2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e1e:	e00e      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3324      	adds	r3, #36	; 0x24
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 f866 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e30:	e005      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e44:	4b7e      	ldr	r3, [pc, #504]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e50:	497b      	ldr	r1, [pc, #492]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	650b      	str	r3, [r1, #80]	; 0x50
 8004e56:	e001      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d042      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e70:	d01b      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e76:	d805      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d022      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004e82:	e01b      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e88:	d01d      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e8e:	d01c      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004e90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e94:	d01b      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004e96:	e011      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff78 	bl	8005d94 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ea8:	e012      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3324      	adds	r3, #36	; 0x24
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f821 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004eba:	e009      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e004      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ed6:	4b5a      	ldr	r3, [pc, #360]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	4957      	ldr	r1, [pc, #348]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ee8:	e001      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f04:	d01b      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f0a:	d805      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d022      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f16:	e01b      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d01d      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f22:	d01c      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004f24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f28:	d01b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004f2a:	e011      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	2101      	movs	r1, #1
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 ff2e 	bl	8005d94 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f3c:	e012      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2101      	movs	r1, #1
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 ffd7 	bl	8005ef8 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f4e:	e009      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
      break;
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f56:	bf00      	nop
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f6a:	4b35      	ldr	r3, [pc, #212]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f78:	4931      	ldr	r1, [pc, #196]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f98:	d005      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d009      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004fa4:	e00f      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a25      	ldr	r2, [pc, #148]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fb2:	e00c      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 feea 	bl	8005d94 <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fc4:	e003      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fca:	e000      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe0:	4917      	ldr	r1, [pc, #92]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8004fe6:	e001      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d035      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d81b      	bhi.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	08005045 	.word	0x08005045
 800500c:	08005019 	.word	0x08005019
 8005010:	08005027 	.word	0x08005027
 8005014:	08005045 	.word	0x08005045
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800501e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	2102      	movs	r1, #2
 800502c:	4618      	mov	r0, r3
 800502e:	f000 feb1 	bl	8005d94 <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005036:	e006      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	e003      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800503e:	bf00      	nop
 8005040:	58024400 	.word	0x58024400
      break;
 8005044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800504c:	4bba      	ldr	r3, [pc, #744]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	f023 0203 	bic.w	r2, r3, #3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	49b7      	ldr	r1, [pc, #732]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800505e:	e001      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8086 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005072:	4bb2      	ldr	r3, [pc, #712]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4ab1      	ldr	r2, [pc, #708]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800507e:	f7fc fb17 	bl	80016b0 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005084:	e009      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005086:	f7fc fb13 	bl	80016b0 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b64      	cmp	r3, #100	; 0x64
 8005092:	d902      	bls.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	75fb      	strb	r3, [r7, #23]
        break;
 8005098:	e005      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800509a:	4ba8      	ldr	r3, [pc, #672]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0ef      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d166      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050ac:	4ba2      	ldr	r3, [pc, #648]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050b6:	4053      	eors	r3, r2
 80050b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c0:	4b9d      	ldr	r3, [pc, #628]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ca:	4b9b      	ldr	r3, [pc, #620]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a9a      	ldr	r2, [pc, #616]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d6:	4b98      	ldr	r3, [pc, #608]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a97      	ldr	r2, [pc, #604]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050e2:	4a95      	ldr	r2, [pc, #596]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f2:	d115      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fc fadc 	bl	80016b0 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fa:	e00b      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7fc fad8 	bl	80016b0 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d902      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	75fb      	strb	r3, [r7, #23]
            break;
 8005112:	e005      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005114:	4b88      	ldr	r3, [pc, #544]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ed      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d126      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800512c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005134:	d10d      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005136:	4b80      	ldr	r3, [pc, #512]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005144:	0919      	lsrs	r1, r3, #4
 8005146:	4b7e      	ldr	r3, [pc, #504]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005148:	400b      	ands	r3, r1
 800514a:	497b      	ldr	r1, [pc, #492]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
 8005150:	e005      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005152:	4b79      	ldr	r3, [pc, #484]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	4a78      	ldr	r2, [pc, #480]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005158:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800515c:	6113      	str	r3, [r2, #16]
 800515e:	4b76      	ldr	r3, [pc, #472]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005160:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516c:	4972      	ldr	r1, [pc, #456]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	670b      	str	r3, [r1, #112]	; 0x70
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	75bb      	strb	r3, [r7, #22]
 8005178:	e001      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d07d      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518e:	2b28      	cmp	r3, #40	; 0x28
 8005190:	d866      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	08005267 	.word	0x08005267
 800519c:	08005261 	.word	0x08005261
 80051a0:	08005261 	.word	0x08005261
 80051a4:	08005261 	.word	0x08005261
 80051a8:	08005261 	.word	0x08005261
 80051ac:	08005261 	.word	0x08005261
 80051b0:	08005261 	.word	0x08005261
 80051b4:	08005261 	.word	0x08005261
 80051b8:	0800523d 	.word	0x0800523d
 80051bc:	08005261 	.word	0x08005261
 80051c0:	08005261 	.word	0x08005261
 80051c4:	08005261 	.word	0x08005261
 80051c8:	08005261 	.word	0x08005261
 80051cc:	08005261 	.word	0x08005261
 80051d0:	08005261 	.word	0x08005261
 80051d4:	08005261 	.word	0x08005261
 80051d8:	0800524f 	.word	0x0800524f
 80051dc:	08005261 	.word	0x08005261
 80051e0:	08005261 	.word	0x08005261
 80051e4:	08005261 	.word	0x08005261
 80051e8:	08005261 	.word	0x08005261
 80051ec:	08005261 	.word	0x08005261
 80051f0:	08005261 	.word	0x08005261
 80051f4:	08005261 	.word	0x08005261
 80051f8:	08005267 	.word	0x08005267
 80051fc:	08005261 	.word	0x08005261
 8005200:	08005261 	.word	0x08005261
 8005204:	08005261 	.word	0x08005261
 8005208:	08005261 	.word	0x08005261
 800520c:	08005261 	.word	0x08005261
 8005210:	08005261 	.word	0x08005261
 8005214:	08005261 	.word	0x08005261
 8005218:	08005267 	.word	0x08005267
 800521c:	08005261 	.word	0x08005261
 8005220:	08005261 	.word	0x08005261
 8005224:	08005261 	.word	0x08005261
 8005228:	08005261 	.word	0x08005261
 800522c:	08005261 	.word	0x08005261
 8005230:	08005261 	.word	0x08005261
 8005234:	08005261 	.word	0x08005261
 8005238:	08005267 	.word	0x08005267
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	2101      	movs	r1, #1
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fda6 	bl	8005d94 <RCCEx_PLL2_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800524c:	e00c      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3324      	adds	r3, #36	; 0x24
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fe4f 	bl	8005ef8 <RCCEx_PLL3_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800525e:	e003      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800526e:	4b32      	ldr	r3, [pc, #200]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527a:	492f      	ldr	r1, [pc, #188]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800527c:	4313      	orrs	r3, r2
 800527e:	654b      	str	r3, [r1, #84]	; 0x54
 8005280:	e001      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d037      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005296:	2b05      	cmp	r3, #5
 8005298:	d820      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052e3 	.word	0x080052e3
 80052a4:	080052b9 	.word	0x080052b9
 80052a8:	080052cb 	.word	0x080052cb
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052e3 	.word	0x080052e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fd68 	bl	8005d94 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052c8:	e00c      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	2101      	movs	r1, #1
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fe11 	bl	8005ef8 <RCCEx_PLL3_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052da:	e003      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	75fb      	strb	r3, [r7, #23]
      break;
 80052e0:	e000      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80052e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f6:	4910      	ldr	r1, [pc, #64]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	654b      	str	r3, [r1, #84]	; 0x54
 80052fc:	e001      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d040      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005314:	2b05      	cmp	r3, #5
 8005316:	d827      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	0800536f 	.word	0x0800536f
 8005324:	08005345 	.word	0x08005345
 8005328:	08005357 	.word	0x08005357
 800532c:	0800536f 	.word	0x0800536f
 8005330:	0800536f 	.word	0x0800536f
 8005334:	0800536f 	.word	0x0800536f
 8005338:	58024400 	.word	0x58024400
 800533c:	58024800 	.word	0x58024800
 8005340:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	2101      	movs	r1, #1
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fd22 	bl	8005d94 <RCCEx_PLL2_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005354:	e00c      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3324      	adds	r3, #36	; 0x24
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fdcb 	bl	8005ef8 <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005366:	e003      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
      break;
 800536c:	e000      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800536e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005376:	4bb2      	ldr	r3, [pc, #712]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	f023 0207 	bic.w	r2, r3, #7
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	49ae      	ldr	r1, [pc, #696]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	658b      	str	r3, [r1, #88]	; 0x58
 800538a:	e001      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d044      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a6:	d01b      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80053a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ac:	d805      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d022      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80053b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x952>
 80053b8:	e01b      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d01d      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80053c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053c4:	d01c      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80053c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053ca:	d01b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80053cc:	e011      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fcdd 	bl	8005d94 <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053de:	e012      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3324      	adds	r3, #36	; 0x24
 80053e4:	2102      	movs	r1, #2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fd86 	bl	8005ef8 <RCCEx_PLL3_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053f0:	e009      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75fb      	strb	r3, [r7, #23]
      break;
 80053f6:	e006      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053f8:	bf00      	nop
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540c:	4b8c      	ldr	r3, [pc, #560]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541a:	4989      	ldr	r1, [pc, #548]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800541c:	4313      	orrs	r3, r2
 800541e:	654b      	str	r3, [r1, #84]	; 0x54
 8005420:	e001      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d044      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543c:	d01b      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d805      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d022      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800544e:	e01b      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d01d      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005456:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800545a:	d01c      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800545c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005460:	d01b      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005462:	e011      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fc92 	bl	8005d94 <RCCEx_PLL2_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005474:	e012      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3324      	adds	r3, #36	; 0x24
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fd3b 	bl	8005ef8 <RCCEx_PLL3_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005486:	e009      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
      break;
 800548c:	e006      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800549a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a2:	4b67      	ldr	r3, [pc, #412]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b0:	4963      	ldr	r1, [pc, #396]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	658b      	str	r3, [r1, #88]	; 0x58
 80054b6:	e001      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d044      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d2:	d01b      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80054d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d8:	d805      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d022      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80054e4:	e01b      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d01d      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80054ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054f0:	d01c      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80054f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054f6:	d01b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80054f8:	e011      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fc47 	bl	8005d94 <RCCEx_PLL2_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800550a:	e012      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3324      	adds	r3, #36	; 0x24
 8005510:	2102      	movs	r1, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fcf0 	bl	8005ef8 <RCCEx_PLL3_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800551c:	e009      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
      break;
 8005522:	e006      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005524:	bf00      	nop
 8005526:	e004      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005528:	bf00      	nop
 800552a:	e002      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005538:	4b41      	ldr	r3, [pc, #260]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005546:	493e      	ldr	r1, [pc, #248]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005548:	4313      	orrs	r3, r2
 800554a:	658b      	str	r3, [r1, #88]	; 0x58
 800554c:	e001      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d10a      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3324      	adds	r3, #36	; 0x24
 800556e:	2102      	movs	r1, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fcc1 	bl	8005ef8 <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005580:	4b2f      	ldr	r3, [pc, #188]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558e:	492c      	ldr	r1, [pc, #176]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055aa:	d10a      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3324      	adds	r3, #36	; 0x24
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fca0 	bl	8005ef8 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055c2:	4b1f      	ldr	r3, [pc, #124]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d0:	491b      	ldr	r1, [pc, #108]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d032      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d00d      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80055ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f2:	d016      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d111      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fbc8 	bl	8005d94 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005608:	e00c      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3324      	adds	r3, #36	; 0x24
 800560e:	2102      	movs	r1, #2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fc71 	bl	8005ef8 <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800561a:	e003      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	e000      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10c      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005638:	4901      	ldr	r1, [pc, #4]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	658b      	str	r3, [r1, #88]	; 0x58
 800563e:	e003      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005640:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d02f      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565e:	d00c      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005664:	d015      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566a:	d10f      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566c:	4b71      	ldr	r3, [pc, #452]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a70      	ldr	r2, [pc, #448]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005678:	e00c      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	2101      	movs	r1, #1
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fc39 	bl	8005ef8 <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800568a:	e003      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
      break;
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800569a:	4b66      	ldr	r3, [pc, #408]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a8:	4962      	ldr	r1, [pc, #392]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	654b      	str	r3, [r1, #84]	; 0x54
 80056ae:	e001      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d029      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d007      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80056ce:	e00f      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	4b58      	ldr	r3, [pc, #352]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a57      	ldr	r2, [pc, #348]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056dc:	e00b      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2102      	movs	r1, #2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb55 	bl	8005d94 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056ee:	e002      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
      break;
 80056f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056fc:	4b4d      	ldr	r3, [pc, #308]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005708:	494a      	ldr	r1, [pc, #296]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800570e:	e001      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fbe6 	bl	8005ef8 <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02f      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574a:	d00c      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800574c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005750:	d802      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d011      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005756:	e00d      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d00f      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800575e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005762:	d00e      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005766:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4a32      	ldr	r2, [pc, #200]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005772:	e007      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
      break;
 8005778:	e004      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800577a:	bf00      	nop
 800577c:	e002      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800578a:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005796:	4927      	ldr	r1, [pc, #156]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005798:	4313      	orrs	r3, r2
 800579a:	654b      	str	r3, [r1, #84]	; 0x54
 800579c:	e001      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ae:	4b21      	ldr	r3, [pc, #132]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	491e      	ldr	r1, [pc, #120]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d8:	4916      	ldr	r1, [pc, #88]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057ea:	4b12      	ldr	r3, [pc, #72]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	4a11      	ldr	r2, [pc, #68]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057f4:	6113      	str	r3, [r2, #16]
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005800:	490c      	ldr	r1, [pc, #48]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005802:	4313      	orrs	r3, r2
 8005804:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da08      	bge.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581a:	4906      	ldr	r1, [pc, #24]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800581c:	4313      	orrs	r3, r2
 800581e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005820:	7dbb      	ldrb	r3, [r7, #22]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	58024400 	.word	0x58024400

08005838 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800583c:	f7ff f880 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8005840:	4601      	mov	r1, r0
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800584e:	5cd3      	ldrb	r3, [r2, r3]
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005858:	4618      	mov	r0, r3
 800585a:	bd80      	pop	{r7, pc}
 800585c:	58024400 	.word	0x58024400
 8005860:	0801c5b0 	.word	0x0801c5b0

08005864 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800586c:	4b9d      	ldr	r3, [pc, #628]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005876:	4b9b      	ldr	r3, [pc, #620]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	0b1b      	lsrs	r3, r3, #12
 800587c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005880:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005882:	4b98      	ldr	r3, [pc, #608]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800588e:	4b95      	ldr	r3, [pc, #596]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 810a 	beq.w	8005ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d05a      	beq.n	800596e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d302      	bcc.n	80058c2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d078      	beq.n	80059b2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80058c0:	e099      	b.n	80059f6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c2:	4b88      	ldr	r3, [pc, #544]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d02d      	beq.n	800592a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058ce:	4b85      	ldr	r3, [pc, #532]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	08db      	lsrs	r3, r3, #3
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	4a83      	ldr	r2, [pc, #524]	; (8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80058da:	fa22 f303 	lsr.w	r3, r2, r3
 80058de:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f8:	4b7a      	ldr	r3, [pc, #488]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005908:	ed97 6a03 	vldr	s12, [r7, #12]
 800590c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800591c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005924:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005928:	e087      	b.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005934:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593c:	4b69      	ldr	r3, [pc, #420]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005950:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800596c:	e065      	b.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005978:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800597c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005980:	4b58      	ldr	r3, [pc, #352]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005990:	ed97 6a03 	vldr	s12, [r7, #12]
 8005994:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b0:	e043      	b.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80059c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c4:	4b47      	ldr	r3, [pc, #284]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f4:	e021      	b.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a00:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a08:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a38:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	0a5b      	lsrs	r3, r3, #9
 8005a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a60:	ee17 2a90 	vmov	r2, s15
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 2a90 	vmov	r2, s15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a96:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	0e1b      	lsrs	r3, r3, #24
 8005a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005abc:	ee17 2a90 	vmov	r2, s15
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	3724      	adds	r7, #36	; 0x24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	03d09000 	.word	0x03d09000
 8005aec:	46000000 	.word	0x46000000
 8005af0:	4c742400 	.word	0x4c742400
 8005af4:	4a742400 	.word	0x4a742400
 8005af8:	4af42400 	.word	0x4af42400

08005afc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b04:	4b9d      	ldr	r3, [pc, #628]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b0e:	4b9b      	ldr	r3, [pc, #620]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	0d1b      	lsrs	r3, r3, #20
 8005b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b1a:	4b98      	ldr	r3, [pc, #608]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b26:	4b95      	ldr	r3, [pc, #596]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 810a 	beq.w	8005d5e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d05a      	beq.n	8005c06 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d302      	bcc.n	8005b5a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d078      	beq.n	8005c4a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005b58:	e099      	b.n	8005c8e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b5a:	4b88      	ldr	r3, [pc, #544]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d02d      	beq.n	8005bc2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b66:	4b85      	ldr	r3, [pc, #532]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	4a83      	ldr	r2, [pc, #524]	; (8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b90:	4b7a      	ldr	r3, [pc, #488]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005bc0:	e087      	b.n	8005cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bcc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd4:	4b69      	ldr	r3, [pc, #420]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c04:	e065      	b.n	8005cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	ee07 3a90 	vmov	s15, r3
 8005c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c18:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c48:	e043      	b.n	8005cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5c:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c8c:	e021      	b.n	8005cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca0:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cd0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005cd2:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	0a5b      	lsrs	r3, r3, #9
 8005cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf8:	ee17 2a90 	vmov	r2, s15
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d26:	ee17 2a90 	vmov	r2, s15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	0e1b      	lsrs	r3, r3, #24
 8005d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d54:	ee17 2a90 	vmov	r2, s15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d5c:	e008      	b.n	8005d70 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	3724      	adds	r7, #36	; 0x24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	03d09000 	.word	0x03d09000
 8005d84:	46000000 	.word	0x46000000
 8005d88:	4c742400 	.word	0x4c742400
 8005d8c:	4a742400 	.word	0x4a742400
 8005d90:	4af42400 	.word	0x4af42400

08005d94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005da2:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d101      	bne.n	8005db2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e099      	b.n	8005ee6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005db2:	4b4f      	ldr	r3, [pc, #316]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4e      	ldr	r2, [pc, #312]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005db8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dbe:	f7fb fc77 	bl	80016b0 <HAL_GetTick>
 8005dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dc4:	e008      	b.n	8005dd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dc6:	f7fb fc73 	bl	80016b0 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e086      	b.n	8005ee6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dd8:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f0      	bne.n	8005dc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005de4:	4b42      	ldr	r3, [pc, #264]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	493f      	ldr	r1, [pc, #252]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	628b      	str	r3, [r1, #40]	; 0x28
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	025b      	lsls	r3, r3, #9
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e28:	4931      	ldr	r1, [pc, #196]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e2e:	4b30      	ldr	r3, [pc, #192]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	492d      	ldr	r1, [pc, #180]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e40:	4b2b      	ldr	r3, [pc, #172]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f023 0220 	bic.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	4928      	ldr	r1, [pc, #160]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e52:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e58:	f023 0310 	bic.w	r3, r3, #16
 8005e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e5e:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e62:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <RCCEx_PLL2_Config+0x160>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	69d2      	ldr	r2, [r2, #28]
 8005e6a:	00d2      	lsls	r2, r2, #3
 8005e6c:	4920      	ldr	r1, [pc, #128]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e72:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e78:	f043 0310 	orr.w	r3, r3, #16
 8005e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e84:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e90:	e00f      	b.n	8005eb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ea4:	e005      	b.n	8005eb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ea6:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ebe:	f7fb fbf7 	bl	80016b0 <HAL_GetTick>
 8005ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ec4:	e008      	b.n	8005ed8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ec6:	f7fb fbf3 	bl	80016b0 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e006      	b.n	8005ee6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	58024400 	.word	0x58024400
 8005ef4:	ffff0007 	.word	0xffff0007

08005ef8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f06:	4b53      	ldr	r3, [pc, #332]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d101      	bne.n	8005f16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e099      	b.n	800604a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f16:	4b4f      	ldr	r3, [pc, #316]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a4e      	ldr	r2, [pc, #312]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f22:	f7fb fbc5 	bl	80016b0 <HAL_GetTick>
 8005f26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f28:	e008      	b.n	8005f3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f2a:	f7fb fbc1 	bl	80016b0 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e086      	b.n	800604a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f3c:	4b45      	ldr	r3, [pc, #276]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	051b      	lsls	r3, r3, #20
 8005f56:	493f      	ldr	r1, [pc, #252]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	025b      	lsls	r3, r3, #9
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	061b      	lsls	r3, r3, #24
 8005f88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f8c:	4931      	ldr	r1, [pc, #196]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f92:	4b30      	ldr	r3, [pc, #192]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	492d      	ldr	r1, [pc, #180]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fa4:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4928      	ldr	r1, [pc, #160]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fb6:	4b27      	ldr	r3, [pc, #156]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4a26      	ldr	r2, [pc, #152]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <RCCEx_PLL3_Config+0x160>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	69d2      	ldr	r2, [r2, #28]
 8005fce:	00d2      	lsls	r2, r2, #3
 8005fd0:	4920      	ldr	r1, [pc, #128]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4a19      	ldr	r2, [pc, #100]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005fee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ff4:	e00f      	b.n	8006016 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d106      	bne.n	800600a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ffc:	4b15      	ldr	r3, [pc, #84]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8006002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006008:	e005      	b.n	8006016 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4a11      	ldr	r2, [pc, #68]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8006010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006014:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb fb45 	bl	80016b0 <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006028:	e008      	b.n	800603c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800602a:	f7fb fb41 	bl	80016b0 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e006      	b.n	800604a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <RCCEx_PLL3_Config+0x15c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	58024400 	.word	0x58024400
 8006058:	ffff0007 	.word	0xffff0007

0800605c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e01d      	b.n	80060aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f815 	bl	80060b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f000 f986 	bl	80063ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <HAL_TIM_Base_Start_IT+0x50>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b06      	cmp	r3, #6
 80060f0:	d00b      	beq.n	800610a <HAL_TIM_Base_Start_IT+0x42>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d007      	beq.n	800610a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	00010007 	.word	0x00010007

0800611c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b02      	cmp	r3, #2
 8006130:	d122      	bne.n	8006178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d11b      	bne.n	8006178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0202 	mvn.w	r2, #2
 8006148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f905 	bl	800636e <HAL_TIM_IC_CaptureCallback>
 8006164:	e005      	b.n	8006172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8f7 	bl	800635a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f908 	bl	8006382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b04      	cmp	r3, #4
 8006184:	d122      	bne.n	80061cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d11b      	bne.n	80061cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0204 	mvn.w	r2, #4
 800619c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8db 	bl	800636e <HAL_TIM_IC_CaptureCallback>
 80061b8:	e005      	b.n	80061c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8cd 	bl	800635a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f8de 	bl	8006382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d122      	bne.n	8006220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0208 	mvn.w	r2, #8
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2204      	movs	r2, #4
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8b1 	bl	800636e <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f8a3 	bl	800635a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8b4 	bl	8006382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b10      	cmp	r3, #16
 800622c:	d122      	bne.n	8006274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b10      	cmp	r3, #16
 800623a:	d11b      	bne.n	8006274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0210 	mvn.w	r2, #16
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2208      	movs	r2, #8
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f887 	bl	800636e <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f879 	bl	800635a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f88a 	bl	8006382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d10e      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0201 	mvn.w	r2, #1
 8006298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fa fdba 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d10e      	bne.n	80062cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d107      	bne.n	80062cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f914 	bl	80064f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062da:	d10e      	bne.n	80062fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d107      	bne.n	80062fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f907 	bl	8006508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d10e      	bne.n	8006326 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d107      	bne.n	8006326 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f838 	bl	8006396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b20      	cmp	r3, #32
 8006332:	d10e      	bne.n	8006352 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b20      	cmp	r3, #32
 8006340:	d107      	bne.n	8006352 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0220 	mvn.w	r2, #32
 800634a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8c7 	bl	80064e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a40      	ldr	r2, [pc, #256]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ca:	d00f      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3d      	ldr	r2, [pc, #244]	; (80064c4 <TIM_Base_SetConfig+0x118>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00b      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <TIM_Base_SetConfig+0x11c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <TIM_Base_SetConfig+0x120>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a3a      	ldr	r2, [pc, #232]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d108      	bne.n	80063fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01f      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d01b      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2c      	ldr	r2, [pc, #176]	; (80064c4 <TIM_Base_SetConfig+0x118>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d017      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2b      	ldr	r2, [pc, #172]	; (80064c8 <TIM_Base_SetConfig+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2a      	ldr	r2, [pc, #168]	; (80064cc <TIM_Base_SetConfig+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <TIM_Base_SetConfig+0x128>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a27      	ldr	r2, [pc, #156]	; (80064d8 <TIM_Base_SetConfig+0x12c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_Base_SetConfig+0x9a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a26      	ldr	r2, [pc, #152]	; (80064dc <TIM_Base_SetConfig+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a10      	ldr	r2, [pc, #64]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00f      	beq.n	80064a4 <TIM_Base_SetConfig+0xf8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_Base_SetConfig+0xf8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a11      	ldr	r2, [pc, #68]	; (80064d4 <TIM_Base_SetConfig+0x128>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_Base_SetConfig+0xf8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <TIM_Base_SetConfig+0x12c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0xf8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a0f      	ldr	r2, [pc, #60]	; (80064dc <TIM_Base_SetConfig+0x130>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d103      	bne.n	80064ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	615a      	str	r2, [r3, #20]
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40010400 	.word	0x40010400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800

080064e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e042      	b.n	80065b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fa fe07 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2224      	movs	r2, #36	; 0x24
 800654a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f82e 	bl	80065c0 <UART_SetConfig>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e022      	b.n	80065b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f002 f9a0 	bl	80088bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 fa27 	bl	8008a00 <UART_CheckIdleState>
 80065b2:	4603      	mov	r3, r0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	0000      	movs	r0, r0
	...

080065c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065c4:	b090      	sub	sp, #64	; 0x40
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f6:	4313      	orrs	r3, r2
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4bc1      	ldr	r3, [pc, #772]	; (8006908 <UART_SetConfig+0x348>)
 8006602:	4013      	ands	r3, r2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800660a:	430b      	orrs	r3, r1
 800660c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4ab7      	ldr	r2, [pc, #732]	; (800690c <UART_SetConfig+0x34c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800663a:	4313      	orrs	r3, r2
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	4bb2      	ldr	r3, [pc, #712]	; (8006910 <UART_SetConfig+0x350>)
 8006646:	4013      	ands	r3, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800664e:	430b      	orrs	r3, r1
 8006650:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	f023 010f 	bic.w	r1, r3, #15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4aa9      	ldr	r2, [pc, #676]	; (8006914 <UART_SetConfig+0x354>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d177      	bne.n	8006762 <UART_SetConfig+0x1a2>
 8006672:	4ba9      	ldr	r3, [pc, #676]	; (8006918 <UART_SetConfig+0x358>)
 8006674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800667a:	2b28      	cmp	r3, #40	; 0x28
 800667c:	d86c      	bhi.n	8006758 <UART_SetConfig+0x198>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0xc4>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	08006729 	.word	0x08006729
 8006688:	08006759 	.word	0x08006759
 800668c:	08006759 	.word	0x08006759
 8006690:	08006759 	.word	0x08006759
 8006694:	08006759 	.word	0x08006759
 8006698:	08006759 	.word	0x08006759
 800669c:	08006759 	.word	0x08006759
 80066a0:	08006759 	.word	0x08006759
 80066a4:	08006731 	.word	0x08006731
 80066a8:	08006759 	.word	0x08006759
 80066ac:	08006759 	.word	0x08006759
 80066b0:	08006759 	.word	0x08006759
 80066b4:	08006759 	.word	0x08006759
 80066b8:	08006759 	.word	0x08006759
 80066bc:	08006759 	.word	0x08006759
 80066c0:	08006759 	.word	0x08006759
 80066c4:	08006739 	.word	0x08006739
 80066c8:	08006759 	.word	0x08006759
 80066cc:	08006759 	.word	0x08006759
 80066d0:	08006759 	.word	0x08006759
 80066d4:	08006759 	.word	0x08006759
 80066d8:	08006759 	.word	0x08006759
 80066dc:	08006759 	.word	0x08006759
 80066e0:	08006759 	.word	0x08006759
 80066e4:	08006741 	.word	0x08006741
 80066e8:	08006759 	.word	0x08006759
 80066ec:	08006759 	.word	0x08006759
 80066f0:	08006759 	.word	0x08006759
 80066f4:	08006759 	.word	0x08006759
 80066f8:	08006759 	.word	0x08006759
 80066fc:	08006759 	.word	0x08006759
 8006700:	08006759 	.word	0x08006759
 8006704:	08006749 	.word	0x08006749
 8006708:	08006759 	.word	0x08006759
 800670c:	08006759 	.word	0x08006759
 8006710:	08006759 	.word	0x08006759
 8006714:	08006759 	.word	0x08006759
 8006718:	08006759 	.word	0x08006759
 800671c:	08006759 	.word	0x08006759
 8006720:	08006759 	.word	0x08006759
 8006724:	08006751 	.word	0x08006751
 8006728:	2301      	movs	r3, #1
 800672a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800672e:	e233      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006730:	2304      	movs	r3, #4
 8006732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006736:	e22f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006738:	2308      	movs	r3, #8
 800673a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800673e:	e22b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006746:	e227      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006748:	2320      	movs	r3, #32
 800674a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800674e:	e223      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006756:	e21f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006758:	2380      	movs	r3, #128	; 0x80
 800675a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800675e:	bf00      	nop
 8006760:	e21a      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6d      	ldr	r2, [pc, #436]	; (800691c <UART_SetConfig+0x35c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d132      	bne.n	80067d2 <UART_SetConfig+0x212>
 800676c:	4b6a      	ldr	r3, [pc, #424]	; (8006918 <UART_SetConfig+0x358>)
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	2b05      	cmp	r3, #5
 8006776:	d827      	bhi.n	80067c8 <UART_SetConfig+0x208>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0x1c0>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	08006799 	.word	0x08006799
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067a9 	.word	0x080067a9
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	2300      	movs	r3, #0
 800679a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800679e:	e1fb      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067a6:	e1f7      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ae:	e1f3      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067b6:	e1ef      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067b8:	2320      	movs	r3, #32
 80067ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067be:	e1eb      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067c6:	e1e7      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ce:	bf00      	nop
 80067d0:	e1e2      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a52      	ldr	r2, [pc, #328]	; (8006920 <UART_SetConfig+0x360>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d132      	bne.n	8006842 <UART_SetConfig+0x282>
 80067dc:	4b4e      	ldr	r3, [pc, #312]	; (8006918 <UART_SetConfig+0x358>)
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d827      	bhi.n	8006838 <UART_SetConfig+0x278>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x230>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	2300      	movs	r3, #0
 800680a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800680e:	e1c3      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006816:	e1bf      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800681e:	e1bb      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006826:	e1b7      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006828:	2320      	movs	r3, #32
 800682a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800682e:	e1b3      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006830:	2340      	movs	r3, #64	; 0x40
 8006832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006836:	e1af      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800683e:	bf00      	nop
 8006840:	e1aa      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a37      	ldr	r2, [pc, #220]	; (8006924 <UART_SetConfig+0x364>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d132      	bne.n	80068b2 <UART_SetConfig+0x2f2>
 800684c:	4b32      	ldr	r3, [pc, #200]	; (8006918 <UART_SetConfig+0x358>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	2b05      	cmp	r3, #5
 8006856:	d827      	bhi.n	80068a8 <UART_SetConfig+0x2e8>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x2a0>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006879 	.word	0x08006879
 8006864:	08006881 	.word	0x08006881
 8006868:	08006889 	.word	0x08006889
 800686c:	08006891 	.word	0x08006891
 8006870:	08006899 	.word	0x08006899
 8006874:	080068a1 	.word	0x080068a1
 8006878:	2300      	movs	r3, #0
 800687a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800687e:	e18b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006880:	2304      	movs	r3, #4
 8006882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006886:	e187      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006888:	2308      	movs	r3, #8
 800688a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800688e:	e183      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006890:	2310      	movs	r3, #16
 8006892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006896:	e17f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006898:	2320      	movs	r3, #32
 800689a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800689e:	e17b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80068a0:	2340      	movs	r3, #64	; 0x40
 80068a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068a6:	e177      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ae:	bf00      	nop
 80068b0:	e172      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1c      	ldr	r2, [pc, #112]	; (8006928 <UART_SetConfig+0x368>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d144      	bne.n	8006946 <UART_SetConfig+0x386>
 80068bc:	4b16      	ldr	r3, [pc, #88]	; (8006918 <UART_SetConfig+0x358>)
 80068be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	2b05      	cmp	r3, #5
 80068c6:	d839      	bhi.n	800693c <UART_SetConfig+0x37c>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <UART_SetConfig+0x310>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068e9 	.word	0x080068e9
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	080068f9 	.word	0x080068f9
 80068dc:	08006901 	.word	0x08006901
 80068e0:	0800692d 	.word	0x0800692d
 80068e4:	08006935 	.word	0x08006935
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ee:	e153      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80068f0:	2304      	movs	r3, #4
 80068f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068f6:	e14f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 80068f8:	2308      	movs	r3, #8
 80068fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068fe:	e14b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006900:	2310      	movs	r3, #16
 8006902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006906:	e147      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006908:	cfff69f3 	.word	0xcfff69f3
 800690c:	58000c00 	.word	0x58000c00
 8006910:	11fff4ff 	.word	0x11fff4ff
 8006914:	40011000 	.word	0x40011000
 8006918:	58024400 	.word	0x58024400
 800691c:	40004400 	.word	0x40004400
 8006920:	40004800 	.word	0x40004800
 8006924:	40004c00 	.word	0x40004c00
 8006928:	40005000 	.word	0x40005000
 800692c:	2320      	movs	r3, #32
 800692e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006932:	e131      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800693a:	e12d      	b.n	8006b98 <UART_SetConfig+0x5d8>
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006942:	bf00      	nop
 8006944:	e128      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4ac3      	ldr	r2, [pc, #780]	; (8006c58 <UART_SetConfig+0x698>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d178      	bne.n	8006a42 <UART_SetConfig+0x482>
 8006950:	4bc2      	ldr	r3, [pc, #776]	; (8006c5c <UART_SetConfig+0x69c>)
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006958:	2b28      	cmp	r3, #40	; 0x28
 800695a:	d86d      	bhi.n	8006a38 <UART_SetConfig+0x478>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <UART_SetConfig+0x3a4>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006a09 	.word	0x08006a09
 8006968:	08006a39 	.word	0x08006a39
 800696c:	08006a39 	.word	0x08006a39
 8006970:	08006a39 	.word	0x08006a39
 8006974:	08006a39 	.word	0x08006a39
 8006978:	08006a39 	.word	0x08006a39
 800697c:	08006a39 	.word	0x08006a39
 8006980:	08006a39 	.word	0x08006a39
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a39 	.word	0x08006a39
 800698c:	08006a39 	.word	0x08006a39
 8006990:	08006a39 	.word	0x08006a39
 8006994:	08006a39 	.word	0x08006a39
 8006998:	08006a39 	.word	0x08006a39
 800699c:	08006a39 	.word	0x08006a39
 80069a0:	08006a39 	.word	0x08006a39
 80069a4:	08006a19 	.word	0x08006a19
 80069a8:	08006a39 	.word	0x08006a39
 80069ac:	08006a39 	.word	0x08006a39
 80069b0:	08006a39 	.word	0x08006a39
 80069b4:	08006a39 	.word	0x08006a39
 80069b8:	08006a39 	.word	0x08006a39
 80069bc:	08006a39 	.word	0x08006a39
 80069c0:	08006a39 	.word	0x08006a39
 80069c4:	08006a21 	.word	0x08006a21
 80069c8:	08006a39 	.word	0x08006a39
 80069cc:	08006a39 	.word	0x08006a39
 80069d0:	08006a39 	.word	0x08006a39
 80069d4:	08006a39 	.word	0x08006a39
 80069d8:	08006a39 	.word	0x08006a39
 80069dc:	08006a39 	.word	0x08006a39
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a29 	.word	0x08006a29
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006a39 	.word	0x08006a39
 80069f0:	08006a39 	.word	0x08006a39
 80069f4:	08006a39 	.word	0x08006a39
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a39 	.word	0x08006a39
 8006a00:	08006a39 	.word	0x08006a39
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a0e:	e0c3      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a10:	2304      	movs	r3, #4
 8006a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a16:	e0bf      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a18:	2308      	movs	r3, #8
 8006a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a1e:	e0bb      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a20:	2310      	movs	r3, #16
 8006a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a26:	e0b7      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a28:	2320      	movs	r3, #32
 8006a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a2e:	e0b3      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a30:	2340      	movs	r3, #64	; 0x40
 8006a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a36:	e0af      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a3e:	bf00      	nop
 8006a40:	e0aa      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a86      	ldr	r2, [pc, #536]	; (8006c60 <UART_SetConfig+0x6a0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d132      	bne.n	8006ab2 <UART_SetConfig+0x4f2>
 8006a4c:	4b83      	ldr	r3, [pc, #524]	; (8006c5c <UART_SetConfig+0x69c>)
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	2b05      	cmp	r3, #5
 8006a56:	d827      	bhi.n	8006aa8 <UART_SetConfig+0x4e8>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x4a0>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a79 	.word	0x08006a79
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a89 	.word	0x08006a89
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a7e:	e08b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a86:	e087      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a8e:	e083      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a96:	e07f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a9e:	e07b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aa6:	e077      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aae:	bf00      	nop
 8006ab0:	e072      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6b      	ldr	r2, [pc, #428]	; (8006c64 <UART_SetConfig+0x6a4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d132      	bne.n	8006b22 <UART_SetConfig+0x562>
 8006abc:	4b67      	ldr	r3, [pc, #412]	; (8006c5c <UART_SetConfig+0x69c>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	2b05      	cmp	r3, #5
 8006ac6:	d827      	bhi.n	8006b18 <UART_SetConfig+0x558>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x510>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006ae9 	.word	0x08006ae9
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	08006af9 	.word	0x08006af9
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aee:	e053      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006af6:	e04f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006afe:	e04b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b06:	e047      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b08:	2320      	movs	r3, #32
 8006b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0e:	e043      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b16:	e03f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b1e:	bf00      	nop
 8006b20:	e03a      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a50      	ldr	r2, [pc, #320]	; (8006c68 <UART_SetConfig+0x6a8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d132      	bne.n	8006b92 <UART_SetConfig+0x5d2>
 8006b2c:	4b4b      	ldr	r3, [pc, #300]	; (8006c5c <UART_SetConfig+0x69c>)
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d827      	bhi.n	8006b88 <UART_SetConfig+0x5c8>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x580>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b59 	.word	0x08006b59
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	2302      	movs	r3, #2
 8006b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b5e:	e01b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b66:	e017      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b6e:	e013      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b76:	e00f      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b7e:	e00b      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b86:	e007      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <UART_SetConfig+0x5d8>
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a32      	ldr	r2, [pc, #200]	; (8006c68 <UART_SetConfig+0x6a8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f040 86f7 	bne.w	8007992 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ba4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	f000 80c0 	beq.w	8006d2e <UART_SetConfig+0x76e>
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	dc04      	bgt.n	8006bbc <UART_SetConfig+0x5fc>
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d00c      	beq.n	8006bd0 <UART_SetConfig+0x610>
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d065      	beq.n	8006c86 <UART_SetConfig+0x6c6>
 8006bba:	e27a      	b.n	80070b2 <UART_SetConfig+0xaf2>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	f000 81b0 	beq.w	8006f22 <UART_SetConfig+0x962>
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	f000 821e 	beq.w	8007004 <UART_SetConfig+0xa44>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	f000 8104 	beq.w	8006dd6 <UART_SetConfig+0x816>
 8006bce:	e270      	b.n	80070b2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bd0:	f7fe fe32 	bl	8005838 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d04e      	beq.n	8006c7c <UART_SetConfig+0x6bc>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d048      	beq.n	8006c78 <UART_SetConfig+0x6b8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d042      	beq.n	8006c74 <UART_SetConfig+0x6b4>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d03c      	beq.n	8006c70 <UART_SetConfig+0x6b0>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d036      	beq.n	8006c6c <UART_SetConfig+0x6ac>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	d026      	beq.n	8006c54 <UART_SetConfig+0x694>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b06      	cmp	r3, #6
 8006c0c:	d020      	beq.n	8006c50 <UART_SetConfig+0x690>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b07      	cmp	r3, #7
 8006c14:	d01a      	beq.n	8006c4c <UART_SetConfig+0x68c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d014      	beq.n	8006c48 <UART_SetConfig+0x688>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b09      	cmp	r3, #9
 8006c24:	d00e      	beq.n	8006c44 <UART_SetConfig+0x684>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b0a      	cmp	r3, #10
 8006c2c:	d008      	beq.n	8006c40 <UART_SetConfig+0x680>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	2b0b      	cmp	r3, #11
 8006c34:	d102      	bne.n	8006c3c <UART_SetConfig+0x67c>
 8006c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c3a:	e020      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e01e      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	e01c      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	e01a      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	e018      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	e016      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c50:	230c      	movs	r3, #12
 8006c52:	e014      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c54:	230a      	movs	r3, #10
 8006c56:	e012      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c58:	40011400 	.word	0x40011400
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	40007800 	.word	0x40007800
 8006c64:	40007c00 	.word	0x40007c00
 8006c68:	58000c00 	.word	0x58000c00
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	e006      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c70:	2306      	movs	r3, #6
 8006c72:	e004      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c74:	2304      	movs	r3, #4
 8006c76:	e002      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e000      	b.n	8006c7e <UART_SetConfig+0x6be>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c84:	e219      	b.n	80070ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0318 	add.w	r3, r7, #24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fdea 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d044      	beq.n	8006d24 <UART_SetConfig+0x764>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d03e      	beq.n	8006d20 <UART_SetConfig+0x760>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d038      	beq.n	8006d1c <UART_SetConfig+0x75c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d032      	beq.n	8006d18 <UART_SetConfig+0x758>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d02c      	beq.n	8006d14 <UART_SetConfig+0x754>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d026      	beq.n	8006d10 <UART_SetConfig+0x750>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b06      	cmp	r3, #6
 8006cc8:	d020      	beq.n	8006d0c <UART_SetConfig+0x74c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b07      	cmp	r3, #7
 8006cd0:	d01a      	beq.n	8006d08 <UART_SetConfig+0x748>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d014      	beq.n	8006d04 <UART_SetConfig+0x744>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	d00e      	beq.n	8006d00 <UART_SetConfig+0x740>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b0a      	cmp	r3, #10
 8006ce8:	d008      	beq.n	8006cfc <UART_SetConfig+0x73c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	2b0b      	cmp	r3, #11
 8006cf0:	d102      	bne.n	8006cf8 <UART_SetConfig+0x738>
 8006cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cf6:	e016      	b.n	8006d26 <UART_SetConfig+0x766>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e014      	b.n	8006d26 <UART_SetConfig+0x766>
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	e012      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	e010      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d04:	2320      	movs	r3, #32
 8006d06:	e00e      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	e00c      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d0c:	230c      	movs	r3, #12
 8006d0e:	e00a      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d10:	230a      	movs	r3, #10
 8006d12:	e008      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d14:	2308      	movs	r3, #8
 8006d16:	e006      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d18:	2306      	movs	r3, #6
 8006d1a:	e004      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	e002      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e000      	b.n	8006d26 <UART_SetConfig+0x766>
 8006d24:	2301      	movs	r3, #1
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d2c:	e1c5      	b.n	80070ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d2e:	f107 030c 	add.w	r3, r7, #12
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fee2 	bl	8005afc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d044      	beq.n	8006dcc <UART_SetConfig+0x80c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d03e      	beq.n	8006dc8 <UART_SetConfig+0x808>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d038      	beq.n	8006dc4 <UART_SetConfig+0x804>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d032      	beq.n	8006dc0 <UART_SetConfig+0x800>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d02c      	beq.n	8006dbc <UART_SetConfig+0x7fc>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d026      	beq.n	8006db8 <UART_SetConfig+0x7f8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b06      	cmp	r3, #6
 8006d70:	d020      	beq.n	8006db4 <UART_SetConfig+0x7f4>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b07      	cmp	r3, #7
 8006d78:	d01a      	beq.n	8006db0 <UART_SetConfig+0x7f0>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d014      	beq.n	8006dac <UART_SetConfig+0x7ec>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d00e      	beq.n	8006da8 <UART_SetConfig+0x7e8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b0a      	cmp	r3, #10
 8006d90:	d008      	beq.n	8006da4 <UART_SetConfig+0x7e4>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2b0b      	cmp	r3, #11
 8006d98:	d102      	bne.n	8006da0 <UART_SetConfig+0x7e0>
 8006d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d9e:	e016      	b.n	8006dce <UART_SetConfig+0x80e>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e014      	b.n	8006dce <UART_SetConfig+0x80e>
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	e012      	b.n	8006dce <UART_SetConfig+0x80e>
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	e010      	b.n	8006dce <UART_SetConfig+0x80e>
 8006dac:	2320      	movs	r3, #32
 8006dae:	e00e      	b.n	8006dce <UART_SetConfig+0x80e>
 8006db0:	2310      	movs	r3, #16
 8006db2:	e00c      	b.n	8006dce <UART_SetConfig+0x80e>
 8006db4:	230c      	movs	r3, #12
 8006db6:	e00a      	b.n	8006dce <UART_SetConfig+0x80e>
 8006db8:	230a      	movs	r3, #10
 8006dba:	e008      	b.n	8006dce <UART_SetConfig+0x80e>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	e006      	b.n	8006dce <UART_SetConfig+0x80e>
 8006dc0:	2306      	movs	r3, #6
 8006dc2:	e004      	b.n	8006dce <UART_SetConfig+0x80e>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	e002      	b.n	8006dce <UART_SetConfig+0x80e>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e000      	b.n	8006dce <UART_SetConfig+0x80e>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dd4:	e171      	b.n	80070ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd6:	4b7a      	ldr	r3, [pc, #488]	; (8006fc0 <UART_SetConfig+0xa00>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d054      	beq.n	8006e8c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006de2:	4b77      	ldr	r3, [pc, #476]	; (8006fc0 <UART_SetConfig+0xa00>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	4a75      	ldr	r2, [pc, #468]	; (8006fc4 <UART_SetConfig+0xa04>)
 8006dee:	40da      	lsrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d044      	beq.n	8006e82 <UART_SetConfig+0x8c2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d03e      	beq.n	8006e7e <UART_SetConfig+0x8be>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d038      	beq.n	8006e7a <UART_SetConfig+0x8ba>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d032      	beq.n	8006e76 <UART_SetConfig+0x8b6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d02c      	beq.n	8006e72 <UART_SetConfig+0x8b2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d026      	beq.n	8006e6e <UART_SetConfig+0x8ae>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	2b06      	cmp	r3, #6
 8006e26:	d020      	beq.n	8006e6a <UART_SetConfig+0x8aa>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	2b07      	cmp	r3, #7
 8006e2e:	d01a      	beq.n	8006e66 <UART_SetConfig+0x8a6>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d014      	beq.n	8006e62 <UART_SetConfig+0x8a2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	2b09      	cmp	r3, #9
 8006e3e:	d00e      	beq.n	8006e5e <UART_SetConfig+0x89e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	2b0a      	cmp	r3, #10
 8006e46:	d008      	beq.n	8006e5a <UART_SetConfig+0x89a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	2b0b      	cmp	r3, #11
 8006e4e:	d102      	bne.n	8006e56 <UART_SetConfig+0x896>
 8006e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e54:	e016      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e014      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	e012      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	e010      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e62:	2320      	movs	r3, #32
 8006e64:	e00e      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e66:	2310      	movs	r3, #16
 8006e68:	e00c      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	e00a      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e6e:	230a      	movs	r3, #10
 8006e70:	e008      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e72:	2308      	movs	r3, #8
 8006e74:	e006      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e76:	2306      	movs	r3, #6
 8006e78:	e004      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	e002      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e000      	b.n	8006e84 <UART_SetConfig+0x8c4>
 8006e82:	2301      	movs	r3, #1
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006e8a:	e116      	b.n	80070ba <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d043      	beq.n	8006f1c <UART_SetConfig+0x95c>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d03d      	beq.n	8006f18 <UART_SetConfig+0x958>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d037      	beq.n	8006f14 <UART_SetConfig+0x954>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d031      	beq.n	8006f10 <UART_SetConfig+0x950>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d02b      	beq.n	8006f0c <UART_SetConfig+0x94c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d025      	beq.n	8006f08 <UART_SetConfig+0x948>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d01f      	beq.n	8006f04 <UART_SetConfig+0x944>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	2b07      	cmp	r3, #7
 8006eca:	d019      	beq.n	8006f00 <UART_SetConfig+0x940>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d013      	beq.n	8006efc <UART_SetConfig+0x93c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	2b09      	cmp	r3, #9
 8006eda:	d00d      	beq.n	8006ef8 <UART_SetConfig+0x938>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2b0a      	cmp	r3, #10
 8006ee2:	d007      	beq.n	8006ef4 <UART_SetConfig+0x934>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	2b0b      	cmp	r3, #11
 8006eea:	d101      	bne.n	8006ef0 <UART_SetConfig+0x930>
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <UART_SetConfig+0xa08>)
 8006eee:	e016      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006ef0:	4b34      	ldr	r3, [pc, #208]	; (8006fc4 <UART_SetConfig+0xa04>)
 8006ef2:	e014      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006ef4:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <UART_SetConfig+0xa0c>)
 8006ef6:	e012      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006ef8:	4b35      	ldr	r3, [pc, #212]	; (8006fd0 <UART_SetConfig+0xa10>)
 8006efa:	e010      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006efc:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <UART_SetConfig+0xa14>)
 8006efe:	e00e      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f00:	4b35      	ldr	r3, [pc, #212]	; (8006fd8 <UART_SetConfig+0xa18>)
 8006f02:	e00c      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f04:	4b35      	ldr	r3, [pc, #212]	; (8006fdc <UART_SetConfig+0xa1c>)
 8006f06:	e00a      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f08:	4b35      	ldr	r3, [pc, #212]	; (8006fe0 <UART_SetConfig+0xa20>)
 8006f0a:	e008      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f0c:	4b35      	ldr	r3, [pc, #212]	; (8006fe4 <UART_SetConfig+0xa24>)
 8006f0e:	e006      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f10:	4b35      	ldr	r3, [pc, #212]	; (8006fe8 <UART_SetConfig+0xa28>)
 8006f12:	e004      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f14:	4b35      	ldr	r3, [pc, #212]	; (8006fec <UART_SetConfig+0xa2c>)
 8006f16:	e002      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f18:	4b35      	ldr	r3, [pc, #212]	; (8006ff0 <UART_SetConfig+0xa30>)
 8006f1a:	e000      	b.n	8006f1e <UART_SetConfig+0x95e>
 8006f1c:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <UART_SetConfig+0xa04>)
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f20:	e0cb      	b.n	80070ba <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d046      	beq.n	8006fb8 <UART_SetConfig+0x9f8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d040      	beq.n	8006fb4 <UART_SetConfig+0x9f4>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d03a      	beq.n	8006fb0 <UART_SetConfig+0x9f0>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d034      	beq.n	8006fac <UART_SetConfig+0x9ec>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d02e      	beq.n	8006fa8 <UART_SetConfig+0x9e8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	d028      	beq.n	8006fa4 <UART_SetConfig+0x9e4>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b06      	cmp	r3, #6
 8006f58:	d022      	beq.n	8006fa0 <UART_SetConfig+0x9e0>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b07      	cmp	r3, #7
 8006f60:	d01c      	beq.n	8006f9c <UART_SetConfig+0x9dc>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d016      	beq.n	8006f98 <UART_SetConfig+0x9d8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	2b09      	cmp	r3, #9
 8006f70:	d00f      	beq.n	8006f92 <UART_SetConfig+0x9d2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	2b0a      	cmp	r3, #10
 8006f78:	d008      	beq.n	8006f8c <UART_SetConfig+0x9cc>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b0b      	cmp	r3, #11
 8006f80:	d102      	bne.n	8006f88 <UART_SetConfig+0x9c8>
 8006f82:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006f86:	e018      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006f88:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <UART_SetConfig+0xa18>)
 8006f8a:	e016      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006f8c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006f90:	e013      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006f92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f96:	e010      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <UART_SetConfig+0xa34>)
 8006f9a:	e00e      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <UART_SetConfig+0xa08>)
 8006f9e:	e00c      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fa0:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <UART_SetConfig+0xa38>)
 8006fa2:	e00a      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fa4:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <UART_SetConfig+0xa3c>)
 8006fa6:	e008      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <UART_SetConfig+0xa0c>)
 8006faa:	e006      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <UART_SetConfig+0xa40>)
 8006fae:	e004      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <UART_SetConfig+0xa10>)
 8006fb2:	e002      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <UART_SetConfig+0xa14>)
 8006fb6:	e000      	b.n	8006fba <UART_SetConfig+0x9fa>
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <UART_SetConfig+0xa18>)
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fbc:	e07d      	b.n	80070ba <UART_SetConfig+0xafa>
 8006fbe:	bf00      	nop
 8006fc0:	58024400 	.word	0x58024400
 8006fc4:	03d09000 	.word	0x03d09000
 8006fc8:	0003d090 	.word	0x0003d090
 8006fcc:	0007a120 	.word	0x0007a120
 8006fd0:	000f4240 	.word	0x000f4240
 8006fd4:	001e8480 	.word	0x001e8480
 8006fd8:	003d0900 	.word	0x003d0900
 8006fdc:	00516155 	.word	0x00516155
 8006fe0:	0061a800 	.word	0x0061a800
 8006fe4:	007a1200 	.word	0x007a1200
 8006fe8:	00a2c2aa 	.word	0x00a2c2aa
 8006fec:	00f42400 	.word	0x00f42400
 8006ff0:	01e84800 	.word	0x01e84800
 8006ff4:	0001e848 	.word	0x0001e848
 8006ff8:	00051615 	.word	0x00051615
 8006ffc:	00061a80 	.word	0x00061a80
 8007000:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d04e      	beq.n	80070aa <UART_SetConfig+0xaea>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b01      	cmp	r3, #1
 8007012:	d047      	beq.n	80070a4 <UART_SetConfig+0xae4>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	2b02      	cmp	r3, #2
 800701a:	d040      	beq.n	800709e <UART_SetConfig+0xade>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b03      	cmp	r3, #3
 8007022:	d039      	beq.n	8007098 <UART_SetConfig+0xad8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b04      	cmp	r3, #4
 800702a:	d032      	beq.n	8007092 <UART_SetConfig+0xad2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b05      	cmp	r3, #5
 8007032:	d02b      	beq.n	800708c <UART_SetConfig+0xacc>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b06      	cmp	r3, #6
 800703a:	d024      	beq.n	8007086 <UART_SetConfig+0xac6>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b07      	cmp	r3, #7
 8007042:	d01d      	beq.n	8007080 <UART_SetConfig+0xac0>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2b08      	cmp	r3, #8
 800704a:	d016      	beq.n	800707a <UART_SetConfig+0xaba>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2b09      	cmp	r3, #9
 8007052:	d00f      	beq.n	8007074 <UART_SetConfig+0xab4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b0a      	cmp	r3, #10
 800705a:	d008      	beq.n	800706e <UART_SetConfig+0xaae>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b0b      	cmp	r3, #11
 8007062:	d101      	bne.n	8007068 <UART_SetConfig+0xaa8>
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	e022      	b.n	80070ae <UART_SetConfig+0xaee>
 8007068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706c:	e01f      	b.n	80070ae <UART_SetConfig+0xaee>
 800706e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007072:	e01c      	b.n	80070ae <UART_SetConfig+0xaee>
 8007074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007078:	e019      	b.n	80070ae <UART_SetConfig+0xaee>
 800707a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707e:	e016      	b.n	80070ae <UART_SetConfig+0xaee>
 8007080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007084:	e013      	b.n	80070ae <UART_SetConfig+0xaee>
 8007086:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800708a:	e010      	b.n	80070ae <UART_SetConfig+0xaee>
 800708c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007090:	e00d      	b.n	80070ae <UART_SetConfig+0xaee>
 8007092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007096:	e00a      	b.n	80070ae <UART_SetConfig+0xaee>
 8007098:	f241 5355 	movw	r3, #5461	; 0x1555
 800709c:	e007      	b.n	80070ae <UART_SetConfig+0xaee>
 800709e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070a2:	e004      	b.n	80070ae <UART_SetConfig+0xaee>
 80070a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070a8:	e001      	b.n	80070ae <UART_SetConfig+0xaee>
 80070aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070b0:	e003      	b.n	80070ba <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80070b8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f001 83e8 	beq.w	8008892 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d305      	bcc.n	80070de <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d904      	bls.n	80070e8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e4:	f001 bbd5 	b.w	8008892 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80070e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	f000 8154 	beq.w	800739a <UART_SetConfig+0xdda>
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	dc06      	bgt.n	8007104 <UART_SetConfig+0xb44>
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d00f      	beq.n	800711a <UART_SetConfig+0xb5a>
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	f000 80ac 	beq.w	8007258 <UART_SetConfig+0xc98>
 8007100:	f000 bc30 	b.w	8007964 <UART_SetConfig+0x13a4>
 8007104:	2b20      	cmp	r3, #32
 8007106:	f000 832d 	beq.w	8007764 <UART_SetConfig+0x11a4>
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	f000 83a5 	beq.w	800785a <UART_SetConfig+0x129a>
 8007110:	2b10      	cmp	r3, #16
 8007112:	f000 81e3 	beq.w	80074dc <UART_SetConfig+0xf1c>
 8007116:	f000 bc25 	b.w	8007964 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800711a:	f7fe fb8d 	bl	8005838 <HAL_RCCEx_GetD3PCLK1Freq>
 800711e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	4618      	mov	r0, r3
 8007124:	f04f 0100 	mov.w	r1, #0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d067      	beq.n	8007200 <UART_SetConfig+0xc40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	2b01      	cmp	r3, #1
 8007136:	d05e      	beq.n	80071f6 <UART_SetConfig+0xc36>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b02      	cmp	r3, #2
 800713e:	d055      	beq.n	80071ec <UART_SetConfig+0xc2c>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	2b03      	cmp	r3, #3
 8007146:	d04c      	beq.n	80071e2 <UART_SetConfig+0xc22>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	2b04      	cmp	r3, #4
 800714e:	d043      	beq.n	80071d8 <UART_SetConfig+0xc18>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b05      	cmp	r3, #5
 8007156:	d03a      	beq.n	80071ce <UART_SetConfig+0xc0e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b06      	cmp	r3, #6
 800715e:	d031      	beq.n	80071c4 <UART_SetConfig+0xc04>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b07      	cmp	r3, #7
 8007166:	d028      	beq.n	80071ba <UART_SetConfig+0xbfa>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b08      	cmp	r3, #8
 800716e:	d01f      	beq.n	80071b0 <UART_SetConfig+0xbf0>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	2b09      	cmp	r3, #9
 8007176:	d016      	beq.n	80071a6 <UART_SetConfig+0xbe6>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b0a      	cmp	r3, #10
 800717e:	d00d      	beq.n	800719c <UART_SetConfig+0xbdc>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	2b0b      	cmp	r3, #11
 8007186:	d104      	bne.n	8007192 <UART_SetConfig+0xbd2>
 8007188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800718c:	f04f 0400 	mov.w	r4, #0
 8007190:	e03a      	b.n	8007208 <UART_SetConfig+0xc48>
 8007192:	f04f 0301 	mov.w	r3, #1
 8007196:	f04f 0400 	mov.w	r4, #0
 800719a:	e035      	b.n	8007208 <UART_SetConfig+0xc48>
 800719c:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071a0:	f04f 0400 	mov.w	r4, #0
 80071a4:	e030      	b.n	8007208 <UART_SetConfig+0xc48>
 80071a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80071aa:	f04f 0400 	mov.w	r4, #0
 80071ae:	e02b      	b.n	8007208 <UART_SetConfig+0xc48>
 80071b0:	f04f 0320 	mov.w	r3, #32
 80071b4:	f04f 0400 	mov.w	r4, #0
 80071b8:	e026      	b.n	8007208 <UART_SetConfig+0xc48>
 80071ba:	f04f 0310 	mov.w	r3, #16
 80071be:	f04f 0400 	mov.w	r4, #0
 80071c2:	e021      	b.n	8007208 <UART_SetConfig+0xc48>
 80071c4:	f04f 030c 	mov.w	r3, #12
 80071c8:	f04f 0400 	mov.w	r4, #0
 80071cc:	e01c      	b.n	8007208 <UART_SetConfig+0xc48>
 80071ce:	f04f 030a 	mov.w	r3, #10
 80071d2:	f04f 0400 	mov.w	r4, #0
 80071d6:	e017      	b.n	8007208 <UART_SetConfig+0xc48>
 80071d8:	f04f 0308 	mov.w	r3, #8
 80071dc:	f04f 0400 	mov.w	r4, #0
 80071e0:	e012      	b.n	8007208 <UART_SetConfig+0xc48>
 80071e2:	f04f 0306 	mov.w	r3, #6
 80071e6:	f04f 0400 	mov.w	r4, #0
 80071ea:	e00d      	b.n	8007208 <UART_SetConfig+0xc48>
 80071ec:	f04f 0304 	mov.w	r3, #4
 80071f0:	f04f 0400 	mov.w	r4, #0
 80071f4:	e008      	b.n	8007208 <UART_SetConfig+0xc48>
 80071f6:	f04f 0302 	mov.w	r3, #2
 80071fa:	f04f 0400 	mov.w	r4, #0
 80071fe:	e003      	b.n	8007208 <UART_SetConfig+0xc48>
 8007200:	f04f 0301 	mov.w	r3, #1
 8007204:	f04f 0400 	mov.w	r4, #0
 8007208:	461a      	mov	r2, r3
 800720a:	4623      	mov	r3, r4
 800720c:	f7f9 f8b8 	bl	8000380 <__aeabi_uldivmod>
 8007210:	4603      	mov	r3, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4619      	mov	r1, r3
 8007216:	4622      	mov	r2, r4
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	f04f 0400 	mov.w	r4, #0
 8007220:	0214      	lsls	r4, r2, #8
 8007222:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007226:	020b      	lsls	r3, r1, #8
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6852      	ldr	r2, [r2, #4]
 800722c:	0852      	lsrs	r2, r2, #1
 800722e:	4611      	mov	r1, r2
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	eb13 0b01 	adds.w	fp, r3, r1
 8007238:	eb44 0c02 	adc.w	ip, r4, r2
 800723c:	4658      	mov	r0, fp
 800723e:	4661      	mov	r1, ip
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f04f 0400 	mov.w	r4, #0
 8007248:	461a      	mov	r2, r3
 800724a:	4623      	mov	r3, r4
 800724c:	f7f9 f898 	bl	8000380 <__aeabi_uldivmod>
 8007250:	4603      	mov	r3, r0
 8007252:	460c      	mov	r4, r1
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007256:	e389      	b.n	800796c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007258:	f107 0318 	add.w	r3, r7, #24
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fb01 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4618      	mov	r0, r3
 8007266:	f04f 0100 	mov.w	r1, #0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d067      	beq.n	8007342 <UART_SetConfig+0xd82>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b01      	cmp	r3, #1
 8007278:	d05e      	beq.n	8007338 <UART_SetConfig+0xd78>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b02      	cmp	r3, #2
 8007280:	d055      	beq.n	800732e <UART_SetConfig+0xd6e>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b03      	cmp	r3, #3
 8007288:	d04c      	beq.n	8007324 <UART_SetConfig+0xd64>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b04      	cmp	r3, #4
 8007290:	d043      	beq.n	800731a <UART_SetConfig+0xd5a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b05      	cmp	r3, #5
 8007298:	d03a      	beq.n	8007310 <UART_SetConfig+0xd50>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b06      	cmp	r3, #6
 80072a0:	d031      	beq.n	8007306 <UART_SetConfig+0xd46>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b07      	cmp	r3, #7
 80072a8:	d028      	beq.n	80072fc <UART_SetConfig+0xd3c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d01f      	beq.n	80072f2 <UART_SetConfig+0xd32>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d016      	beq.n	80072e8 <UART_SetConfig+0xd28>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	d00d      	beq.n	80072de <UART_SetConfig+0xd1e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b0b      	cmp	r3, #11
 80072c8:	d104      	bne.n	80072d4 <UART_SetConfig+0xd14>
 80072ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ce:	f04f 0400 	mov.w	r4, #0
 80072d2:	e03a      	b.n	800734a <UART_SetConfig+0xd8a>
 80072d4:	f04f 0301 	mov.w	r3, #1
 80072d8:	f04f 0400 	mov.w	r4, #0
 80072dc:	e035      	b.n	800734a <UART_SetConfig+0xd8a>
 80072de:	f04f 0380 	mov.w	r3, #128	; 0x80
 80072e2:	f04f 0400 	mov.w	r4, #0
 80072e6:	e030      	b.n	800734a <UART_SetConfig+0xd8a>
 80072e8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80072ec:	f04f 0400 	mov.w	r4, #0
 80072f0:	e02b      	b.n	800734a <UART_SetConfig+0xd8a>
 80072f2:	f04f 0320 	mov.w	r3, #32
 80072f6:	f04f 0400 	mov.w	r4, #0
 80072fa:	e026      	b.n	800734a <UART_SetConfig+0xd8a>
 80072fc:	f04f 0310 	mov.w	r3, #16
 8007300:	f04f 0400 	mov.w	r4, #0
 8007304:	e021      	b.n	800734a <UART_SetConfig+0xd8a>
 8007306:	f04f 030c 	mov.w	r3, #12
 800730a:	f04f 0400 	mov.w	r4, #0
 800730e:	e01c      	b.n	800734a <UART_SetConfig+0xd8a>
 8007310:	f04f 030a 	mov.w	r3, #10
 8007314:	f04f 0400 	mov.w	r4, #0
 8007318:	e017      	b.n	800734a <UART_SetConfig+0xd8a>
 800731a:	f04f 0308 	mov.w	r3, #8
 800731e:	f04f 0400 	mov.w	r4, #0
 8007322:	e012      	b.n	800734a <UART_SetConfig+0xd8a>
 8007324:	f04f 0306 	mov.w	r3, #6
 8007328:	f04f 0400 	mov.w	r4, #0
 800732c:	e00d      	b.n	800734a <UART_SetConfig+0xd8a>
 800732e:	f04f 0304 	mov.w	r3, #4
 8007332:	f04f 0400 	mov.w	r4, #0
 8007336:	e008      	b.n	800734a <UART_SetConfig+0xd8a>
 8007338:	f04f 0302 	mov.w	r3, #2
 800733c:	f04f 0400 	mov.w	r4, #0
 8007340:	e003      	b.n	800734a <UART_SetConfig+0xd8a>
 8007342:	f04f 0301 	mov.w	r3, #1
 8007346:	f04f 0400 	mov.w	r4, #0
 800734a:	461a      	mov	r2, r3
 800734c:	4623      	mov	r3, r4
 800734e:	f7f9 f817 	bl	8000380 <__aeabi_uldivmod>
 8007352:	4603      	mov	r3, r0
 8007354:	460c      	mov	r4, r1
 8007356:	4619      	mov	r1, r3
 8007358:	4622      	mov	r2, r4
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	f04f 0400 	mov.w	r4, #0
 8007362:	0214      	lsls	r4, r2, #8
 8007364:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007368:	020b      	lsls	r3, r1, #8
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6852      	ldr	r2, [r2, #4]
 800736e:	0852      	lsrs	r2, r2, #1
 8007370:	4611      	mov	r1, r2
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	eb13 0b01 	adds.w	fp, r3, r1
 800737a:	eb44 0c02 	adc.w	ip, r4, r2
 800737e:	4658      	mov	r0, fp
 8007380:	4661      	mov	r1, ip
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f04f 0400 	mov.w	r4, #0
 800738a:	461a      	mov	r2, r3
 800738c:	4623      	mov	r3, r4
 800738e:	f7f8 fff7 	bl	8000380 <__aeabi_uldivmod>
 8007392:	4603      	mov	r3, r0
 8007394:	460c      	mov	r4, r1
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007398:	e2e8      	b.n	800796c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fbac 	bl	8005afc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d067      	beq.n	8007484 <UART_SetConfig+0xec4>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d05e      	beq.n	800747a <UART_SetConfig+0xeba>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d055      	beq.n	8007470 <UART_SetConfig+0xeb0>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d04c      	beq.n	8007466 <UART_SetConfig+0xea6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d043      	beq.n	800745c <UART_SetConfig+0xe9c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d03a      	beq.n	8007452 <UART_SetConfig+0xe92>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	d031      	beq.n	8007448 <UART_SetConfig+0xe88>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d028      	beq.n	800743e <UART_SetConfig+0xe7e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d01f      	beq.n	8007434 <UART_SetConfig+0xe74>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d016      	beq.n	800742a <UART_SetConfig+0xe6a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b0a      	cmp	r3, #10
 8007402:	d00d      	beq.n	8007420 <UART_SetConfig+0xe60>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b0b      	cmp	r3, #11
 800740a:	d104      	bne.n	8007416 <UART_SetConfig+0xe56>
 800740c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007410:	f04f 0400 	mov.w	r4, #0
 8007414:	e03a      	b.n	800748c <UART_SetConfig+0xecc>
 8007416:	f04f 0301 	mov.w	r3, #1
 800741a:	f04f 0400 	mov.w	r4, #0
 800741e:	e035      	b.n	800748c <UART_SetConfig+0xecc>
 8007420:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007424:	f04f 0400 	mov.w	r4, #0
 8007428:	e030      	b.n	800748c <UART_SetConfig+0xecc>
 800742a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800742e:	f04f 0400 	mov.w	r4, #0
 8007432:	e02b      	b.n	800748c <UART_SetConfig+0xecc>
 8007434:	f04f 0320 	mov.w	r3, #32
 8007438:	f04f 0400 	mov.w	r4, #0
 800743c:	e026      	b.n	800748c <UART_SetConfig+0xecc>
 800743e:	f04f 0310 	mov.w	r3, #16
 8007442:	f04f 0400 	mov.w	r4, #0
 8007446:	e021      	b.n	800748c <UART_SetConfig+0xecc>
 8007448:	f04f 030c 	mov.w	r3, #12
 800744c:	f04f 0400 	mov.w	r4, #0
 8007450:	e01c      	b.n	800748c <UART_SetConfig+0xecc>
 8007452:	f04f 030a 	mov.w	r3, #10
 8007456:	f04f 0400 	mov.w	r4, #0
 800745a:	e017      	b.n	800748c <UART_SetConfig+0xecc>
 800745c:	f04f 0308 	mov.w	r3, #8
 8007460:	f04f 0400 	mov.w	r4, #0
 8007464:	e012      	b.n	800748c <UART_SetConfig+0xecc>
 8007466:	f04f 0306 	mov.w	r3, #6
 800746a:	f04f 0400 	mov.w	r4, #0
 800746e:	e00d      	b.n	800748c <UART_SetConfig+0xecc>
 8007470:	f04f 0304 	mov.w	r3, #4
 8007474:	f04f 0400 	mov.w	r4, #0
 8007478:	e008      	b.n	800748c <UART_SetConfig+0xecc>
 800747a:	f04f 0302 	mov.w	r3, #2
 800747e:	f04f 0400 	mov.w	r4, #0
 8007482:	e003      	b.n	800748c <UART_SetConfig+0xecc>
 8007484:	f04f 0301 	mov.w	r3, #1
 8007488:	f04f 0400 	mov.w	r4, #0
 800748c:	461a      	mov	r2, r3
 800748e:	4623      	mov	r3, r4
 8007490:	f7f8 ff76 	bl	8000380 <__aeabi_uldivmod>
 8007494:	4603      	mov	r3, r0
 8007496:	460c      	mov	r4, r1
 8007498:	4619      	mov	r1, r3
 800749a:	4622      	mov	r2, r4
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	f04f 0400 	mov.w	r4, #0
 80074a4:	0214      	lsls	r4, r2, #8
 80074a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80074aa:	020b      	lsls	r3, r1, #8
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6852      	ldr	r2, [r2, #4]
 80074b0:	0852      	lsrs	r2, r2, #1
 80074b2:	4611      	mov	r1, r2
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	eb13 0b01 	adds.w	fp, r3, r1
 80074bc:	eb44 0c02 	adc.w	ip, r4, r2
 80074c0:	4658      	mov	r0, fp
 80074c2:	4661      	mov	r1, ip
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f04f 0400 	mov.w	r4, #0
 80074cc:	461a      	mov	r2, r3
 80074ce:	4623      	mov	r3, r4
 80074d0:	f7f8 ff56 	bl	8000380 <__aeabi_uldivmod>
 80074d4:	4603      	mov	r3, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074da:	e247      	b.n	800796c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074dc:	4b96      	ldr	r3, [pc, #600]	; (8007738 <UART_SetConfig+0x1178>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80a3 	beq.w	8007630 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ea:	4b93      	ldr	r3, [pc, #588]	; (8007738 <UART_SetConfig+0x1178>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	08db      	lsrs	r3, r3, #3
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	4a91      	ldr	r2, [pc, #580]	; (800773c <UART_SetConfig+0x117c>)
 80074f6:	fa22 f303 	lsr.w	r3, r2, r3
 80074fa:	4618      	mov	r0, r3
 80074fc:	f04f 0100 	mov.w	r1, #0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d067      	beq.n	80075d8 <UART_SetConfig+0x1018>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b01      	cmp	r3, #1
 800750e:	d05e      	beq.n	80075ce <UART_SetConfig+0x100e>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b02      	cmp	r3, #2
 8007516:	d055      	beq.n	80075c4 <UART_SetConfig+0x1004>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b03      	cmp	r3, #3
 800751e:	d04c      	beq.n	80075ba <UART_SetConfig+0xffa>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b04      	cmp	r3, #4
 8007526:	d043      	beq.n	80075b0 <UART_SetConfig+0xff0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b05      	cmp	r3, #5
 800752e:	d03a      	beq.n	80075a6 <UART_SetConfig+0xfe6>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b06      	cmp	r3, #6
 8007536:	d031      	beq.n	800759c <UART_SetConfig+0xfdc>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b07      	cmp	r3, #7
 800753e:	d028      	beq.n	8007592 <UART_SetConfig+0xfd2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2b08      	cmp	r3, #8
 8007546:	d01f      	beq.n	8007588 <UART_SetConfig+0xfc8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2b09      	cmp	r3, #9
 800754e:	d016      	beq.n	800757e <UART_SetConfig+0xfbe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b0a      	cmp	r3, #10
 8007556:	d00d      	beq.n	8007574 <UART_SetConfig+0xfb4>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b0b      	cmp	r3, #11
 800755e:	d104      	bne.n	800756a <UART_SetConfig+0xfaa>
 8007560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007564:	f04f 0400 	mov.w	r4, #0
 8007568:	e03a      	b.n	80075e0 <UART_SetConfig+0x1020>
 800756a:	f04f 0301 	mov.w	r3, #1
 800756e:	f04f 0400 	mov.w	r4, #0
 8007572:	e035      	b.n	80075e0 <UART_SetConfig+0x1020>
 8007574:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007578:	f04f 0400 	mov.w	r4, #0
 800757c:	e030      	b.n	80075e0 <UART_SetConfig+0x1020>
 800757e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007582:	f04f 0400 	mov.w	r4, #0
 8007586:	e02b      	b.n	80075e0 <UART_SetConfig+0x1020>
 8007588:	f04f 0320 	mov.w	r3, #32
 800758c:	f04f 0400 	mov.w	r4, #0
 8007590:	e026      	b.n	80075e0 <UART_SetConfig+0x1020>
 8007592:	f04f 0310 	mov.w	r3, #16
 8007596:	f04f 0400 	mov.w	r4, #0
 800759a:	e021      	b.n	80075e0 <UART_SetConfig+0x1020>
 800759c:	f04f 030c 	mov.w	r3, #12
 80075a0:	f04f 0400 	mov.w	r4, #0
 80075a4:	e01c      	b.n	80075e0 <UART_SetConfig+0x1020>
 80075a6:	f04f 030a 	mov.w	r3, #10
 80075aa:	f04f 0400 	mov.w	r4, #0
 80075ae:	e017      	b.n	80075e0 <UART_SetConfig+0x1020>
 80075b0:	f04f 0308 	mov.w	r3, #8
 80075b4:	f04f 0400 	mov.w	r4, #0
 80075b8:	e012      	b.n	80075e0 <UART_SetConfig+0x1020>
 80075ba:	f04f 0306 	mov.w	r3, #6
 80075be:	f04f 0400 	mov.w	r4, #0
 80075c2:	e00d      	b.n	80075e0 <UART_SetConfig+0x1020>
 80075c4:	f04f 0304 	mov.w	r3, #4
 80075c8:	f04f 0400 	mov.w	r4, #0
 80075cc:	e008      	b.n	80075e0 <UART_SetConfig+0x1020>
 80075ce:	f04f 0302 	mov.w	r3, #2
 80075d2:	f04f 0400 	mov.w	r4, #0
 80075d6:	e003      	b.n	80075e0 <UART_SetConfig+0x1020>
 80075d8:	f04f 0301 	mov.w	r3, #1
 80075dc:	f04f 0400 	mov.w	r4, #0
 80075e0:	461a      	mov	r2, r3
 80075e2:	4623      	mov	r3, r4
 80075e4:	f7f8 fecc 	bl	8000380 <__aeabi_uldivmod>
 80075e8:	4603      	mov	r3, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	4619      	mov	r1, r3
 80075ee:	4622      	mov	r2, r4
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	f04f 0400 	mov.w	r4, #0
 80075f8:	0214      	lsls	r4, r2, #8
 80075fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075fe:	020b      	lsls	r3, r1, #8
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6852      	ldr	r2, [r2, #4]
 8007604:	0852      	lsrs	r2, r2, #1
 8007606:	4611      	mov	r1, r2
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	eb13 0b01 	adds.w	fp, r3, r1
 8007610:	eb44 0c02 	adc.w	ip, r4, r2
 8007614:	4658      	mov	r0, fp
 8007616:	4661      	mov	r1, ip
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f04f 0400 	mov.w	r4, #0
 8007620:	461a      	mov	r2, r3
 8007622:	4623      	mov	r3, r4
 8007624:	f7f8 feac 	bl	8000380 <__aeabi_uldivmod>
 8007628:	4603      	mov	r3, r0
 800762a:	460c      	mov	r4, r1
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800762e:	e19d      	b.n	800796c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d05b      	beq.n	80076f0 <UART_SetConfig+0x1130>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b01      	cmp	r3, #1
 800763e:	d053      	beq.n	80076e8 <UART_SetConfig+0x1128>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b02      	cmp	r3, #2
 8007646:	d04b      	beq.n	80076e0 <UART_SetConfig+0x1120>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b03      	cmp	r3, #3
 800764e:	d043      	beq.n	80076d8 <UART_SetConfig+0x1118>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b04      	cmp	r3, #4
 8007656:	d03b      	beq.n	80076d0 <UART_SetConfig+0x1110>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b05      	cmp	r3, #5
 800765e:	d033      	beq.n	80076c8 <UART_SetConfig+0x1108>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b06      	cmp	r3, #6
 8007666:	d02b      	beq.n	80076c0 <UART_SetConfig+0x1100>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b07      	cmp	r3, #7
 800766e:	d023      	beq.n	80076b8 <UART_SetConfig+0x10f8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b08      	cmp	r3, #8
 8007676:	d01b      	beq.n	80076b0 <UART_SetConfig+0x10f0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b09      	cmp	r3, #9
 800767e:	d013      	beq.n	80076a8 <UART_SetConfig+0x10e8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b0a      	cmp	r3, #10
 8007686:	d00b      	beq.n	80076a0 <UART_SetConfig+0x10e0>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b0b      	cmp	r3, #11
 800768e:	d103      	bne.n	8007698 <UART_SetConfig+0x10d8>
 8007690:	4b2a      	ldr	r3, [pc, #168]	; (800773c <UART_SetConfig+0x117c>)
 8007692:	f04f 0400 	mov.w	r4, #0
 8007696:	e02e      	b.n	80076f6 <UART_SetConfig+0x1136>
 8007698:	4b29      	ldr	r3, [pc, #164]	; (8007740 <UART_SetConfig+0x1180>)
 800769a:	f04f 0403 	mov.w	r4, #3
 800769e:	e02a      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076a0:	4b28      	ldr	r3, [pc, #160]	; (8007744 <UART_SetConfig+0x1184>)
 80076a2:	f04f 0400 	mov.w	r4, #0
 80076a6:	e026      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <UART_SetConfig+0x1188>)
 80076aa:	f04f 0400 	mov.w	r4, #0
 80076ae:	e022      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076b0:	4b26      	ldr	r3, [pc, #152]	; (800774c <UART_SetConfig+0x118c>)
 80076b2:	f04f 0400 	mov.w	r4, #0
 80076b6:	e01e      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <UART_SetConfig+0x1190>)
 80076ba:	f04f 0400 	mov.w	r4, #0
 80076be:	e01a      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076c0:	a419      	add	r4, pc, #100	; (adr r4, 8007728 <UART_SetConfig+0x1168>)
 80076c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80076c6:	e016      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <UART_SetConfig+0x1194>)
 80076ca:	f04f 0400 	mov.w	r4, #0
 80076ce:	e012      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076d0:	4b21      	ldr	r3, [pc, #132]	; (8007758 <UART_SetConfig+0x1198>)
 80076d2:	f04f 0400 	mov.w	r4, #0
 80076d6:	e00e      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076d8:	a415      	add	r4, pc, #84	; (adr r4, 8007730 <UART_SetConfig+0x1170>)
 80076da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80076de:	e00a      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076e0:	4b1e      	ldr	r3, [pc, #120]	; (800775c <UART_SetConfig+0x119c>)
 80076e2:	f04f 0400 	mov.w	r4, #0
 80076e6:	e006      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <UART_SetConfig+0x11a0>)
 80076ea:	f04f 0401 	mov.w	r4, #1
 80076ee:	e002      	b.n	80076f6 <UART_SetConfig+0x1136>
 80076f0:	4b13      	ldr	r3, [pc, #76]	; (8007740 <UART_SetConfig+0x1180>)
 80076f2:	f04f 0403 	mov.w	r4, #3
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6852      	ldr	r2, [r2, #4]
 80076fa:	0852      	lsrs	r2, r2, #1
 80076fc:	4611      	mov	r1, r2
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	eb13 0b01 	adds.w	fp, r3, r1
 8007706:	eb44 0c02 	adc.w	ip, r4, r2
 800770a:	4658      	mov	r0, fp
 800770c:	4661      	mov	r1, ip
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f04f 0400 	mov.w	r4, #0
 8007716:	461a      	mov	r2, r3
 8007718:	4623      	mov	r3, r4
 800771a:	f7f8 fe31 	bl	8000380 <__aeabi_uldivmod>
 800771e:	4603      	mov	r3, r0
 8007720:	460c      	mov	r4, r1
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007724:	e122      	b.n	800796c <UART_SetConfig+0x13ac>
 8007726:	bf00      	nop
 8007728:	51615500 	.word	0x51615500
 800772c:	00000000 	.word	0x00000000
 8007730:	a2c2aa00 	.word	0xa2c2aa00
 8007734:	00000000 	.word	0x00000000
 8007738:	58024400 	.word	0x58024400
 800773c:	03d09000 	.word	0x03d09000
 8007740:	d0900000 	.word	0xd0900000
 8007744:	07a12000 	.word	0x07a12000
 8007748:	0f424000 	.word	0x0f424000
 800774c:	1e848000 	.word	0x1e848000
 8007750:	3d090000 	.word	0x3d090000
 8007754:	61a80000 	.word	0x61a80000
 8007758:	7a120000 	.word	0x7a120000
 800775c:	f4240000 	.word	0xf4240000
 8007760:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05b      	beq.n	8007824 <UART_SetConfig+0x1264>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b01      	cmp	r3, #1
 8007772:	d053      	beq.n	800781c <UART_SetConfig+0x125c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b02      	cmp	r3, #2
 800777a:	d04b      	beq.n	8007814 <UART_SetConfig+0x1254>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b03      	cmp	r3, #3
 8007782:	d043      	beq.n	800780c <UART_SetConfig+0x124c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b04      	cmp	r3, #4
 800778a:	d03b      	beq.n	8007804 <UART_SetConfig+0x1244>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b05      	cmp	r3, #5
 8007792:	d033      	beq.n	80077fc <UART_SetConfig+0x123c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b06      	cmp	r3, #6
 800779a:	d02b      	beq.n	80077f4 <UART_SetConfig+0x1234>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b07      	cmp	r3, #7
 80077a2:	d023      	beq.n	80077ec <UART_SetConfig+0x122c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d01b      	beq.n	80077e4 <UART_SetConfig+0x1224>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b09      	cmp	r3, #9
 80077b2:	d013      	beq.n	80077dc <UART_SetConfig+0x121c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b0a      	cmp	r3, #10
 80077ba:	d00b      	beq.n	80077d4 <UART_SetConfig+0x1214>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b0b      	cmp	r3, #11
 80077c2:	d103      	bne.n	80077cc <UART_SetConfig+0x120c>
 80077c4:	4bc0      	ldr	r3, [pc, #768]	; (8007ac8 <UART_SetConfig+0x1508>)
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	e02e      	b.n	800782a <UART_SetConfig+0x126a>
 80077cc:	4bbf      	ldr	r3, [pc, #764]	; (8007acc <UART_SetConfig+0x150c>)
 80077ce:	f04f 0400 	mov.w	r4, #0
 80077d2:	e02a      	b.n	800782a <UART_SetConfig+0x126a>
 80077d4:	4bbe      	ldr	r3, [pc, #760]	; (8007ad0 <UART_SetConfig+0x1510>)
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	e026      	b.n	800782a <UART_SetConfig+0x126a>
 80077dc:	4bbd      	ldr	r3, [pc, #756]	; (8007ad4 <UART_SetConfig+0x1514>)
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	e022      	b.n	800782a <UART_SetConfig+0x126a>
 80077e4:	4bbc      	ldr	r3, [pc, #752]	; (8007ad8 <UART_SetConfig+0x1518>)
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	e01e      	b.n	800782a <UART_SetConfig+0x126a>
 80077ec:	4bbb      	ldr	r3, [pc, #748]	; (8007adc <UART_SetConfig+0x151c>)
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	e01a      	b.n	800782a <UART_SetConfig+0x126a>
 80077f4:	a4b0      	add	r4, pc, #704	; (adr r4, 8007ab8 <UART_SetConfig+0x14f8>)
 80077f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077fa:	e016      	b.n	800782a <UART_SetConfig+0x126a>
 80077fc:	4bb8      	ldr	r3, [pc, #736]	; (8007ae0 <UART_SetConfig+0x1520>)
 80077fe:	f04f 0400 	mov.w	r4, #0
 8007802:	e012      	b.n	800782a <UART_SetConfig+0x126a>
 8007804:	4bb7      	ldr	r3, [pc, #732]	; (8007ae4 <UART_SetConfig+0x1524>)
 8007806:	f04f 0400 	mov.w	r4, #0
 800780a:	e00e      	b.n	800782a <UART_SetConfig+0x126a>
 800780c:	a4ac      	add	r4, pc, #688	; (adr r4, 8007ac0 <UART_SetConfig+0x1500>)
 800780e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007812:	e00a      	b.n	800782a <UART_SetConfig+0x126a>
 8007814:	4bb4      	ldr	r3, [pc, #720]	; (8007ae8 <UART_SetConfig+0x1528>)
 8007816:	f04f 0400 	mov.w	r4, #0
 800781a:	e006      	b.n	800782a <UART_SetConfig+0x126a>
 800781c:	4bb3      	ldr	r3, [pc, #716]	; (8007aec <UART_SetConfig+0x152c>)
 800781e:	f04f 0400 	mov.w	r4, #0
 8007822:	e002      	b.n	800782a <UART_SetConfig+0x126a>
 8007824:	4ba9      	ldr	r3, [pc, #676]	; (8007acc <UART_SetConfig+0x150c>)
 8007826:	f04f 0400 	mov.w	r4, #0
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6852      	ldr	r2, [r2, #4]
 800782e:	0852      	lsrs	r2, r2, #1
 8007830:	4611      	mov	r1, r2
 8007832:	f04f 0200 	mov.w	r2, #0
 8007836:	eb13 0b01 	adds.w	fp, r3, r1
 800783a:	eb44 0c02 	adc.w	ip, r4, r2
 800783e:	4658      	mov	r0, fp
 8007840:	4661      	mov	r1, ip
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f04f 0400 	mov.w	r4, #0
 800784a:	461a      	mov	r2, r3
 800784c:	4623      	mov	r3, r4
 800784e:	f7f8 fd97 	bl	8000380 <__aeabi_uldivmod>
 8007852:	4603      	mov	r3, r0
 8007854:	460c      	mov	r4, r1
 8007856:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007858:	e088      	b.n	800796c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d064      	beq.n	800792c <UART_SetConfig+0x136c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b01      	cmp	r3, #1
 8007868:	d05b      	beq.n	8007922 <UART_SetConfig+0x1362>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b02      	cmp	r3, #2
 8007870:	d052      	beq.n	8007918 <UART_SetConfig+0x1358>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b03      	cmp	r3, #3
 8007878:	d04a      	beq.n	8007910 <UART_SetConfig+0x1350>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b04      	cmp	r3, #4
 8007880:	d041      	beq.n	8007906 <UART_SetConfig+0x1346>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b05      	cmp	r3, #5
 8007888:	d039      	beq.n	80078fe <UART_SetConfig+0x133e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	2b06      	cmp	r3, #6
 8007890:	d031      	beq.n	80078f6 <UART_SetConfig+0x1336>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b07      	cmp	r3, #7
 8007898:	d028      	beq.n	80078ec <UART_SetConfig+0x132c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d01f      	beq.n	80078e2 <UART_SetConfig+0x1322>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d016      	beq.n	80078d8 <UART_SetConfig+0x1318>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	2b0a      	cmp	r3, #10
 80078b0:	d00d      	beq.n	80078ce <UART_SetConfig+0x130e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	2b0b      	cmp	r3, #11
 80078b8:	d104      	bne.n	80078c4 <UART_SetConfig+0x1304>
 80078ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078be:	f04f 0400 	mov.w	r4, #0
 80078c2:	e037      	b.n	8007934 <UART_SetConfig+0x1374>
 80078c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078c8:	f04f 0400 	mov.w	r4, #0
 80078cc:	e032      	b.n	8007934 <UART_SetConfig+0x1374>
 80078ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078d2:	f04f 0400 	mov.w	r4, #0
 80078d6:	e02d      	b.n	8007934 <UART_SetConfig+0x1374>
 80078d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078dc:	f04f 0400 	mov.w	r4, #0
 80078e0:	e028      	b.n	8007934 <UART_SetConfig+0x1374>
 80078e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078e6:	f04f 0400 	mov.w	r4, #0
 80078ea:	e023      	b.n	8007934 <UART_SetConfig+0x1374>
 80078ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	e01e      	b.n	8007934 <UART_SetConfig+0x1374>
 80078f6:	4b7e      	ldr	r3, [pc, #504]	; (8007af0 <UART_SetConfig+0x1530>)
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	e01a      	b.n	8007934 <UART_SetConfig+0x1374>
 80078fe:	4b7d      	ldr	r3, [pc, #500]	; (8007af4 <UART_SetConfig+0x1534>)
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	e016      	b.n	8007934 <UART_SetConfig+0x1374>
 8007906:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800790a:	f04f 0400 	mov.w	r4, #0
 800790e:	e011      	b.n	8007934 <UART_SetConfig+0x1374>
 8007910:	4b79      	ldr	r3, [pc, #484]	; (8007af8 <UART_SetConfig+0x1538>)
 8007912:	f04f 0400 	mov.w	r4, #0
 8007916:	e00d      	b.n	8007934 <UART_SetConfig+0x1374>
 8007918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800791c:	f04f 0400 	mov.w	r4, #0
 8007920:	e008      	b.n	8007934 <UART_SetConfig+0x1374>
 8007922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007926:	f04f 0400 	mov.w	r4, #0
 800792a:	e003      	b.n	8007934 <UART_SetConfig+0x1374>
 800792c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6852      	ldr	r2, [r2, #4]
 8007938:	0852      	lsrs	r2, r2, #1
 800793a:	4611      	mov	r1, r2
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	eb13 0b01 	adds.w	fp, r3, r1
 8007944:	eb44 0c02 	adc.w	ip, r4, r2
 8007948:	4658      	mov	r0, fp
 800794a:	4661      	mov	r1, ip
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f04f 0400 	mov.w	r4, #0
 8007954:	461a      	mov	r2, r3
 8007956:	4623      	mov	r3, r4
 8007958:	f7f8 fd12 	bl	8000380 <__aeabi_uldivmod>
 800795c:	4603      	mov	r3, r0
 800795e:	460c      	mov	r4, r1
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007962:	e003      	b.n	800796c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800796a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007972:	d309      	bcc.n	8007988 <UART_SetConfig+0x13c8>
 8007974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800797a:	d205      	bcs.n	8007988 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007982:	60da      	str	r2, [r3, #12]
 8007984:	f000 bf85 	b.w	8008892 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800798e:	f000 bf80 	b.w	8008892 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799a:	f040 83da 	bne.w	8008152 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800799e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	f200 83b3 	bhi.w	800810e <UART_SetConfig+0x1b4e>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0x13f0>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	08007afd 	.word	0x08007afd
 80079b4:	08007bb5 	.word	0x08007bb5
 80079b8:	0800810f 	.word	0x0800810f
 80079bc:	0800810f 	.word	0x0800810f
 80079c0:	08007c6d 	.word	0x08007c6d
 80079c4:	0800810f 	.word	0x0800810f
 80079c8:	0800810f 	.word	0x0800810f
 80079cc:	0800810f 	.word	0x0800810f
 80079d0:	08007d29 	.word	0x08007d29
 80079d4:	0800810f 	.word	0x0800810f
 80079d8:	0800810f 	.word	0x0800810f
 80079dc:	0800810f 	.word	0x0800810f
 80079e0:	0800810f 	.word	0x0800810f
 80079e4:	0800810f 	.word	0x0800810f
 80079e8:	0800810f 	.word	0x0800810f
 80079ec:	0800810f 	.word	0x0800810f
 80079f0:	08007de5 	.word	0x08007de5
 80079f4:	0800810f 	.word	0x0800810f
 80079f8:	0800810f 	.word	0x0800810f
 80079fc:	0800810f 	.word	0x0800810f
 8007a00:	0800810f 	.word	0x0800810f
 8007a04:	0800810f 	.word	0x0800810f
 8007a08:	0800810f 	.word	0x0800810f
 8007a0c:	0800810f 	.word	0x0800810f
 8007a10:	0800810f 	.word	0x0800810f
 8007a14:	0800810f 	.word	0x0800810f
 8007a18:	0800810f 	.word	0x0800810f
 8007a1c:	0800810f 	.word	0x0800810f
 8007a20:	0800810f 	.word	0x0800810f
 8007a24:	0800810f 	.word	0x0800810f
 8007a28:	0800810f 	.word	0x0800810f
 8007a2c:	0800810f 	.word	0x0800810f
 8007a30:	08007f57 	.word	0x08007f57
 8007a34:	0800810f 	.word	0x0800810f
 8007a38:	0800810f 	.word	0x0800810f
 8007a3c:	0800810f 	.word	0x0800810f
 8007a40:	0800810f 	.word	0x0800810f
 8007a44:	0800810f 	.word	0x0800810f
 8007a48:	0800810f 	.word	0x0800810f
 8007a4c:	0800810f 	.word	0x0800810f
 8007a50:	0800810f 	.word	0x0800810f
 8007a54:	0800810f 	.word	0x0800810f
 8007a58:	0800810f 	.word	0x0800810f
 8007a5c:	0800810f 	.word	0x0800810f
 8007a60:	0800810f 	.word	0x0800810f
 8007a64:	0800810f 	.word	0x0800810f
 8007a68:	0800810f 	.word	0x0800810f
 8007a6c:	0800810f 	.word	0x0800810f
 8007a70:	0800810f 	.word	0x0800810f
 8007a74:	0800810f 	.word	0x0800810f
 8007a78:	0800810f 	.word	0x0800810f
 8007a7c:	0800810f 	.word	0x0800810f
 8007a80:	0800810f 	.word	0x0800810f
 8007a84:	0800810f 	.word	0x0800810f
 8007a88:	0800810f 	.word	0x0800810f
 8007a8c:	0800810f 	.word	0x0800810f
 8007a90:	0800810f 	.word	0x0800810f
 8007a94:	0800810f 	.word	0x0800810f
 8007a98:	0800810f 	.word	0x0800810f
 8007a9c:	0800810f 	.word	0x0800810f
 8007aa0:	0800810f 	.word	0x0800810f
 8007aa4:	0800810f 	.word	0x0800810f
 8007aa8:	0800810f 	.word	0x0800810f
 8007aac:	0800810f 	.word	0x0800810f
 8007ab0:	0800804d 	.word	0x0800804d
 8007ab4:	f3af 8000 	nop.w
 8007ab8:	05161500 	.word	0x05161500
 8007abc:	00000000 	.word	0x00000000
 8007ac0:	0a2c2a00 	.word	0x0a2c2a00
 8007ac4:	00000000 	.word	0x00000000
 8007ac8:	003d0900 	.word	0x003d0900
 8007acc:	3d090000 	.word	0x3d090000
 8007ad0:	007a1200 	.word	0x007a1200
 8007ad4:	00f42400 	.word	0x00f42400
 8007ad8:	01e84800 	.word	0x01e84800
 8007adc:	03d09000 	.word	0x03d09000
 8007ae0:	061a8000 	.word	0x061a8000
 8007ae4:	07a12000 	.word	0x07a12000
 8007ae8:	0f424000 	.word	0x0f424000
 8007aec:	1e848000 	.word	0x1e848000
 8007af0:	000aaa00 	.word	0x000aaa00
 8007af4:	000ccc00 	.word	0x000ccc00
 8007af8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007afc:	f7fc ff50 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 8007b00:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d044      	beq.n	8007b94 <UART_SetConfig+0x15d4>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d03e      	beq.n	8007b90 <UART_SetConfig+0x15d0>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d038      	beq.n	8007b8c <UART_SetConfig+0x15cc>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d032      	beq.n	8007b88 <UART_SetConfig+0x15c8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d02c      	beq.n	8007b84 <UART_SetConfig+0x15c4>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b05      	cmp	r3, #5
 8007b30:	d026      	beq.n	8007b80 <UART_SetConfig+0x15c0>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b06      	cmp	r3, #6
 8007b38:	d020      	beq.n	8007b7c <UART_SetConfig+0x15bc>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b07      	cmp	r3, #7
 8007b40:	d01a      	beq.n	8007b78 <UART_SetConfig+0x15b8>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d014      	beq.n	8007b74 <UART_SetConfig+0x15b4>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d00e      	beq.n	8007b70 <UART_SetConfig+0x15b0>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b0a      	cmp	r3, #10
 8007b58:	d008      	beq.n	8007b6c <UART_SetConfig+0x15ac>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b0b      	cmp	r3, #11
 8007b60:	d102      	bne.n	8007b68 <UART_SetConfig+0x15a8>
 8007b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b66:	e016      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e014      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	e012      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b70:	2340      	movs	r3, #64	; 0x40
 8007b72:	e010      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b74:	2320      	movs	r3, #32
 8007b76:	e00e      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	e00c      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	e00a      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b80:	230a      	movs	r3, #10
 8007b82:	e008      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b84:	2308      	movs	r3, #8
 8007b86:	e006      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b88:	2306      	movs	r3, #6
 8007b8a:	e004      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	e002      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e000      	b.n	8007b96 <UART_SetConfig+0x15d6>
 8007b94:	2301      	movs	r3, #1
 8007b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9c:	005a      	lsls	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	441a      	add	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb2:	e2b0      	b.n	8008116 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb4:	f7fc ff0a 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8007bb8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d044      	beq.n	8007c4c <UART_SetConfig+0x168c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d03e      	beq.n	8007c48 <UART_SetConfig+0x1688>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d038      	beq.n	8007c44 <UART_SetConfig+0x1684>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d032      	beq.n	8007c40 <UART_SetConfig+0x1680>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d02c      	beq.n	8007c3c <UART_SetConfig+0x167c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d026      	beq.n	8007c38 <UART_SetConfig+0x1678>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	d020      	beq.n	8007c34 <UART_SetConfig+0x1674>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b07      	cmp	r3, #7
 8007bf8:	d01a      	beq.n	8007c30 <UART_SetConfig+0x1670>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	d014      	beq.n	8007c2c <UART_SetConfig+0x166c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	d00e      	beq.n	8007c28 <UART_SetConfig+0x1668>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b0a      	cmp	r3, #10
 8007c10:	d008      	beq.n	8007c24 <UART_SetConfig+0x1664>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b0b      	cmp	r3, #11
 8007c18:	d102      	bne.n	8007c20 <UART_SetConfig+0x1660>
 8007c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c1e:	e016      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e014      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c24:	2380      	movs	r3, #128	; 0x80
 8007c26:	e012      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	e010      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	e00e      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c30:	2310      	movs	r3, #16
 8007c32:	e00c      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c34:	230c      	movs	r3, #12
 8007c36:	e00a      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c38:	230a      	movs	r3, #10
 8007c3a:	e008      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c3c:	2308      	movs	r3, #8
 8007c3e:	e006      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c40:	2306      	movs	r3, #6
 8007c42:	e004      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c44:	2304      	movs	r3, #4
 8007c46:	e002      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e000      	b.n	8007c4e <UART_SetConfig+0x168e>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c54:	005a      	lsls	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	441a      	add	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c6a:	e254      	b.n	8008116 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6c:	f107 0318 	add.w	r3, r7, #24
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fdf7 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d044      	beq.n	8007d0a <UART_SetConfig+0x174a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d03e      	beq.n	8007d06 <UART_SetConfig+0x1746>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d038      	beq.n	8007d02 <UART_SetConfig+0x1742>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d032      	beq.n	8007cfe <UART_SetConfig+0x173e>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d02c      	beq.n	8007cfa <UART_SetConfig+0x173a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	d026      	beq.n	8007cf6 <UART_SetConfig+0x1736>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	2b06      	cmp	r3, #6
 8007cae:	d020      	beq.n	8007cf2 <UART_SetConfig+0x1732>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2b07      	cmp	r3, #7
 8007cb6:	d01a      	beq.n	8007cee <UART_SetConfig+0x172e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d014      	beq.n	8007cea <UART_SetConfig+0x172a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	2b09      	cmp	r3, #9
 8007cc6:	d00e      	beq.n	8007ce6 <UART_SetConfig+0x1726>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	2b0a      	cmp	r3, #10
 8007cce:	d008      	beq.n	8007ce2 <UART_SetConfig+0x1722>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	d102      	bne.n	8007cde <UART_SetConfig+0x171e>
 8007cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cdc:	e016      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e014      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	e012      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	e010      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cea:	2320      	movs	r3, #32
 8007cec:	e00e      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cee:	2310      	movs	r3, #16
 8007cf0:	e00c      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cf2:	230c      	movs	r3, #12
 8007cf4:	e00a      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	e008      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	e006      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007cfe:	2306      	movs	r3, #6
 8007d00:	e004      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007d02:	2304      	movs	r3, #4
 8007d04:	e002      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e000      	b.n	8007d0c <UART_SetConfig+0x174c>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d10:	005a      	lsls	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d26:	e1f6      	b.n	8008116 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d28:	f107 030c 	add.w	r3, r7, #12
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fd fee5 	bl	8005afc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d044      	beq.n	8007dc6 <UART_SetConfig+0x1806>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d03e      	beq.n	8007dc2 <UART_SetConfig+0x1802>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d038      	beq.n	8007dbe <UART_SetConfig+0x17fe>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d032      	beq.n	8007dba <UART_SetConfig+0x17fa>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d02c      	beq.n	8007db6 <UART_SetConfig+0x17f6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	d026      	beq.n	8007db2 <UART_SetConfig+0x17f2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	2b06      	cmp	r3, #6
 8007d6a:	d020      	beq.n	8007dae <UART_SetConfig+0x17ee>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b07      	cmp	r3, #7
 8007d72:	d01a      	beq.n	8007daa <UART_SetConfig+0x17ea>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d014      	beq.n	8007da6 <UART_SetConfig+0x17e6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d00e      	beq.n	8007da2 <UART_SetConfig+0x17e2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	2b0a      	cmp	r3, #10
 8007d8a:	d008      	beq.n	8007d9e <UART_SetConfig+0x17de>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d102      	bne.n	8007d9a <UART_SetConfig+0x17da>
 8007d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d98:	e016      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e014      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007d9e:	2380      	movs	r3, #128	; 0x80
 8007da0:	e012      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	e010      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007da6:	2320      	movs	r3, #32
 8007da8:	e00e      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007daa:	2310      	movs	r3, #16
 8007dac:	e00c      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007dae:	230c      	movs	r3, #12
 8007db0:	e00a      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007db2:	230a      	movs	r3, #10
 8007db4:	e008      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007db6:	2308      	movs	r3, #8
 8007db8:	e006      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007dba:	2306      	movs	r3, #6
 8007dbc:	e004      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007dbe:	2304      	movs	r3, #4
 8007dc0:	e002      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e000      	b.n	8007dc8 <UART_SetConfig+0x1808>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dcc:	005a      	lsls	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007de2:	e198      	b.n	8008116 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007de4:	4b87      	ldr	r3, [pc, #540]	; (8008004 <UART_SetConfig+0x1a44>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d05e      	beq.n	8007eae <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df0:	4b84      	ldr	r3, [pc, #528]	; (8008004 <UART_SetConfig+0x1a44>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	4a83      	ldr	r2, [pc, #524]	; (8008008 <UART_SetConfig+0x1a48>)
 8007dfc:	40da      	lsrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d044      	beq.n	8007e90 <UART_SetConfig+0x18d0>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d03e      	beq.n	8007e8c <UART_SetConfig+0x18cc>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d038      	beq.n	8007e88 <UART_SetConfig+0x18c8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d032      	beq.n	8007e84 <UART_SetConfig+0x18c4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d02c      	beq.n	8007e80 <UART_SetConfig+0x18c0>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d026      	beq.n	8007e7c <UART_SetConfig+0x18bc>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b06      	cmp	r3, #6
 8007e34:	d020      	beq.n	8007e78 <UART_SetConfig+0x18b8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	d01a      	beq.n	8007e74 <UART_SetConfig+0x18b4>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b08      	cmp	r3, #8
 8007e44:	d014      	beq.n	8007e70 <UART_SetConfig+0x18b0>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b09      	cmp	r3, #9
 8007e4c:	d00e      	beq.n	8007e6c <UART_SetConfig+0x18ac>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b0a      	cmp	r3, #10
 8007e54:	d008      	beq.n	8007e68 <UART_SetConfig+0x18a8>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b0b      	cmp	r3, #11
 8007e5c:	d102      	bne.n	8007e64 <UART_SetConfig+0x18a4>
 8007e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e62:	e016      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e014      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e68:	2380      	movs	r3, #128	; 0x80
 8007e6a:	e012      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	e010      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e70:	2320      	movs	r3, #32
 8007e72:	e00e      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e74:	2310      	movs	r3, #16
 8007e76:	e00c      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	e00a      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e7c:	230a      	movs	r3, #10
 8007e7e:	e008      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e80:	2308      	movs	r3, #8
 8007e82:	e006      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e84:	2306      	movs	r3, #6
 8007e86:	e004      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e88:	2304      	movs	r3, #4
 8007e8a:	e002      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e000      	b.n	8007e92 <UART_SetConfig+0x18d2>
 8007e90:	2301      	movs	r3, #1
 8007e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e96:	005a      	lsls	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	085b      	lsrs	r3, r3, #1
 8007e9e:	441a      	add	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007eac:	e133      	b.n	8008116 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d043      	beq.n	8007f3e <UART_SetConfig+0x197e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d03d      	beq.n	8007f3a <UART_SetConfig+0x197a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d037      	beq.n	8007f36 <UART_SetConfig+0x1976>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d031      	beq.n	8007f32 <UART_SetConfig+0x1972>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d02b      	beq.n	8007f2e <UART_SetConfig+0x196e>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b05      	cmp	r3, #5
 8007edc:	d025      	beq.n	8007f2a <UART_SetConfig+0x196a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b06      	cmp	r3, #6
 8007ee4:	d01f      	beq.n	8007f26 <UART_SetConfig+0x1966>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	2b07      	cmp	r3, #7
 8007eec:	d019      	beq.n	8007f22 <UART_SetConfig+0x1962>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d013      	beq.n	8007f1e <UART_SetConfig+0x195e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d00d      	beq.n	8007f1a <UART_SetConfig+0x195a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	2b0a      	cmp	r3, #10
 8007f04:	d007      	beq.n	8007f16 <UART_SetConfig+0x1956>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	2b0b      	cmp	r3, #11
 8007f0c:	d101      	bne.n	8007f12 <UART_SetConfig+0x1952>
 8007f0e:	4b3f      	ldr	r3, [pc, #252]	; (800800c <UART_SetConfig+0x1a4c>)
 8007f10:	e016      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f12:	4b3f      	ldr	r3, [pc, #252]	; (8008010 <UART_SetConfig+0x1a50>)
 8007f14:	e014      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f16:	4b3f      	ldr	r3, [pc, #252]	; (8008014 <UART_SetConfig+0x1a54>)
 8007f18:	e012      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f1a:	4b3f      	ldr	r3, [pc, #252]	; (8008018 <UART_SetConfig+0x1a58>)
 8007f1c:	e010      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f1e:	4b3f      	ldr	r3, [pc, #252]	; (800801c <UART_SetConfig+0x1a5c>)
 8007f20:	e00e      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f22:	4b3f      	ldr	r3, [pc, #252]	; (8008020 <UART_SetConfig+0x1a60>)
 8007f24:	e00c      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f26:	4b3f      	ldr	r3, [pc, #252]	; (8008024 <UART_SetConfig+0x1a64>)
 8007f28:	e00a      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f2a:	4b3f      	ldr	r3, [pc, #252]	; (8008028 <UART_SetConfig+0x1a68>)
 8007f2c:	e008      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f2e:	4b3f      	ldr	r3, [pc, #252]	; (800802c <UART_SetConfig+0x1a6c>)
 8007f30:	e006      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f32:	4b3f      	ldr	r3, [pc, #252]	; (8008030 <UART_SetConfig+0x1a70>)
 8007f34:	e004      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f36:	4b3f      	ldr	r3, [pc, #252]	; (8008034 <UART_SetConfig+0x1a74>)
 8007f38:	e002      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f3a:	4b33      	ldr	r3, [pc, #204]	; (8008008 <UART_SetConfig+0x1a48>)
 8007f3c:	e000      	b.n	8007f40 <UART_SetConfig+0x1980>
 8007f3e:	4b34      	ldr	r3, [pc, #208]	; (8008010 <UART_SetConfig+0x1a50>)
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6852      	ldr	r2, [r2, #4]
 8007f44:	0852      	lsrs	r2, r2, #1
 8007f46:	441a      	add	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f54:	e0df      	b.n	8008116 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d045      	beq.n	8007fea <UART_SetConfig+0x1a2a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d03f      	beq.n	8007fe6 <UART_SetConfig+0x1a26>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d039      	beq.n	8007fe2 <UART_SetConfig+0x1a22>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d033      	beq.n	8007fde <UART_SetConfig+0x1a1e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d02d      	beq.n	8007fda <UART_SetConfig+0x1a1a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d027      	beq.n	8007fd6 <UART_SetConfig+0x1a16>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b06      	cmp	r3, #6
 8007f8c:	d021      	beq.n	8007fd2 <UART_SetConfig+0x1a12>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	2b07      	cmp	r3, #7
 8007f94:	d01b      	beq.n	8007fce <UART_SetConfig+0x1a0e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d015      	beq.n	8007fca <UART_SetConfig+0x1a0a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2b09      	cmp	r3, #9
 8007fa4:	d00f      	beq.n	8007fc6 <UART_SetConfig+0x1a06>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	2b0a      	cmp	r3, #10
 8007fac:	d008      	beq.n	8007fc0 <UART_SetConfig+0x1a00>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	2b0b      	cmp	r3, #11
 8007fb4:	d102      	bne.n	8007fbc <UART_SetConfig+0x19fc>
 8007fb6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007fba:	e017      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fbc:	4b18      	ldr	r3, [pc, #96]	; (8008020 <UART_SetConfig+0x1a60>)
 8007fbe:	e015      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fc0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007fc4:	e012      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <UART_SetConfig+0x1a78>)
 8007fc8:	e010      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fca:	4b1c      	ldr	r3, [pc, #112]	; (800803c <UART_SetConfig+0x1a7c>)
 8007fcc:	e00e      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <UART_SetConfig+0x1a4c>)
 8007fd0:	e00c      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fd2:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <UART_SetConfig+0x1a80>)
 8007fd4:	e00a      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <UART_SetConfig+0x1a84>)
 8007fd8:	e008      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fda:	4b0e      	ldr	r3, [pc, #56]	; (8008014 <UART_SetConfig+0x1a54>)
 8007fdc:	e006      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fde:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <UART_SetConfig+0x1a88>)
 8007fe0:	e004      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <UART_SetConfig+0x1a58>)
 8007fe4:	e002      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <UART_SetConfig+0x1a5c>)
 8007fe8:	e000      	b.n	8007fec <UART_SetConfig+0x1a2c>
 8007fea:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <UART_SetConfig+0x1a60>)
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6852      	ldr	r2, [r2, #4]
 8007ff0:	0852      	lsrs	r2, r2, #1
 8007ff2:	441a      	add	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008000:	e089      	b.n	8008116 <UART_SetConfig+0x1b56>
 8008002:	bf00      	nop
 8008004:	58024400 	.word	0x58024400
 8008008:	03d09000 	.word	0x03d09000
 800800c:	0007a120 	.word	0x0007a120
 8008010:	07a12000 	.word	0x07a12000
 8008014:	000f4240 	.word	0x000f4240
 8008018:	001e8480 	.word	0x001e8480
 800801c:	003d0900 	.word	0x003d0900
 8008020:	007a1200 	.word	0x007a1200
 8008024:	00a2c2aa 	.word	0x00a2c2aa
 8008028:	00c35000 	.word	0x00c35000
 800802c:	00f42400 	.word	0x00f42400
 8008030:	01458554 	.word	0x01458554
 8008034:	01e84800 	.word	0x01e84800
 8008038:	0001e848 	.word	0x0001e848
 800803c:	0003d090 	.word	0x0003d090
 8008040:	000a2c2a 	.word	0x000a2c2a
 8008044:	000c3500 	.word	0x000c3500
 8008048:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b00      	cmp	r3, #0
 8008052:	d04f      	beq.n	80080f4 <UART_SetConfig+0x1b34>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b01      	cmp	r3, #1
 800805a:	d048      	beq.n	80080ee <UART_SetConfig+0x1b2e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b02      	cmp	r3, #2
 8008062:	d041      	beq.n	80080e8 <UART_SetConfig+0x1b28>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2b03      	cmp	r3, #3
 800806a:	d03a      	beq.n	80080e2 <UART_SetConfig+0x1b22>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b04      	cmp	r3, #4
 8008072:	d033      	beq.n	80080dc <UART_SetConfig+0x1b1c>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b05      	cmp	r3, #5
 800807a:	d02c      	beq.n	80080d6 <UART_SetConfig+0x1b16>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b06      	cmp	r3, #6
 8008082:	d025      	beq.n	80080d0 <UART_SetConfig+0x1b10>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b07      	cmp	r3, #7
 800808a:	d01e      	beq.n	80080ca <UART_SetConfig+0x1b0a>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b08      	cmp	r3, #8
 8008092:	d017      	beq.n	80080c4 <UART_SetConfig+0x1b04>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b09      	cmp	r3, #9
 800809a:	d010      	beq.n	80080be <UART_SetConfig+0x1afe>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2b0a      	cmp	r3, #10
 80080a2:	d009      	beq.n	80080b8 <UART_SetConfig+0x1af8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b0b      	cmp	r3, #11
 80080aa:	d102      	bne.n	80080b2 <UART_SetConfig+0x1af2>
 80080ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080b0:	e022      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080b6:	e01f      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080bc:	e01c      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c2:	e019      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080c8:	e016      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ce:	e013      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080d0:	f241 5354 	movw	r3, #5460	; 0x1554
 80080d4:	e010      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080d6:	f641 1398 	movw	r3, #6552	; 0x1998
 80080da:	e00d      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080e0:	e00a      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080e2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80080e6:	e007      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080ec:	e004      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f2:	e001      	b.n	80080f8 <UART_SetConfig+0x1b38>
 80080f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6852      	ldr	r2, [r2, #4]
 80080fc:	0852      	lsrs	r2, r2, #1
 80080fe:	441a      	add	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	fbb2 f3f3 	udiv	r3, r2, r3
 8008108:	b29b      	uxth	r3, r3
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800810c:	e003      	b.n	8008116 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	2b0f      	cmp	r3, #15
 800811a:	d916      	bls.n	800814a <UART_SetConfig+0x1b8a>
 800811c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008122:	d212      	bcs.n	800814a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	b29b      	uxth	r3, r3
 8008128:	f023 030f 	bic.w	r3, r3, #15
 800812c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	b29b      	uxth	r3, r3
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	b29a      	uxth	r2, r3
 800813a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800813c:	4313      	orrs	r3, r2
 800813e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008146:	60da      	str	r2, [r3, #12]
 8008148:	e3a3      	b.n	8008892 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008150:	e39f      	b.n	8008892 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008152:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	f200 8388 	bhi.w	800886c <UART_SetConfig+0x22ac>
 800815c:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <UART_SetConfig+0x1ba4>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	08008269 	.word	0x08008269
 8008168:	0800831f 	.word	0x0800831f
 800816c:	0800886d 	.word	0x0800886d
 8008170:	0800886d 	.word	0x0800886d
 8008174:	080083d5 	.word	0x080083d5
 8008178:	0800886d 	.word	0x0800886d
 800817c:	0800886d 	.word	0x0800886d
 8008180:	0800886d 	.word	0x0800886d
 8008184:	0800848f 	.word	0x0800848f
 8008188:	0800886d 	.word	0x0800886d
 800818c:	0800886d 	.word	0x0800886d
 8008190:	0800886d 	.word	0x0800886d
 8008194:	0800886d 	.word	0x0800886d
 8008198:	0800886d 	.word	0x0800886d
 800819c:	0800886d 	.word	0x0800886d
 80081a0:	0800886d 	.word	0x0800886d
 80081a4:	08008549 	.word	0x08008549
 80081a8:	0800886d 	.word	0x0800886d
 80081ac:	0800886d 	.word	0x0800886d
 80081b0:	0800886d 	.word	0x0800886d
 80081b4:	0800886d 	.word	0x0800886d
 80081b8:	0800886d 	.word	0x0800886d
 80081bc:	0800886d 	.word	0x0800886d
 80081c0:	0800886d 	.word	0x0800886d
 80081c4:	0800886d 	.word	0x0800886d
 80081c8:	0800886d 	.word	0x0800886d
 80081cc:	0800886d 	.word	0x0800886d
 80081d0:	0800886d 	.word	0x0800886d
 80081d4:	0800886d 	.word	0x0800886d
 80081d8:	0800886d 	.word	0x0800886d
 80081dc:	0800886d 	.word	0x0800886d
 80081e0:	0800886d 	.word	0x0800886d
 80081e4:	080086b9 	.word	0x080086b9
 80081e8:	0800886d 	.word	0x0800886d
 80081ec:	0800886d 	.word	0x0800886d
 80081f0:	0800886d 	.word	0x0800886d
 80081f4:	0800886d 	.word	0x0800886d
 80081f8:	0800886d 	.word	0x0800886d
 80081fc:	0800886d 	.word	0x0800886d
 8008200:	0800886d 	.word	0x0800886d
 8008204:	0800886d 	.word	0x0800886d
 8008208:	0800886d 	.word	0x0800886d
 800820c:	0800886d 	.word	0x0800886d
 8008210:	0800886d 	.word	0x0800886d
 8008214:	0800886d 	.word	0x0800886d
 8008218:	0800886d 	.word	0x0800886d
 800821c:	0800886d 	.word	0x0800886d
 8008220:	0800886d 	.word	0x0800886d
 8008224:	0800886d 	.word	0x0800886d
 8008228:	0800886d 	.word	0x0800886d
 800822c:	0800886d 	.word	0x0800886d
 8008230:	0800886d 	.word	0x0800886d
 8008234:	0800886d 	.word	0x0800886d
 8008238:	0800886d 	.word	0x0800886d
 800823c:	0800886d 	.word	0x0800886d
 8008240:	0800886d 	.word	0x0800886d
 8008244:	0800886d 	.word	0x0800886d
 8008248:	0800886d 	.word	0x0800886d
 800824c:	0800886d 	.word	0x0800886d
 8008250:	0800886d 	.word	0x0800886d
 8008254:	0800886d 	.word	0x0800886d
 8008258:	0800886d 	.word	0x0800886d
 800825c:	0800886d 	.word	0x0800886d
 8008260:	0800886d 	.word	0x0800886d
 8008264:	080087ad 	.word	0x080087ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008268:	f7fc fb9a 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 800826c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b00      	cmp	r3, #0
 8008274:	d044      	beq.n	8008300 <UART_SetConfig+0x1d40>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b01      	cmp	r3, #1
 800827c:	d03e      	beq.n	80082fc <UART_SetConfig+0x1d3c>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b02      	cmp	r3, #2
 8008284:	d038      	beq.n	80082f8 <UART_SetConfig+0x1d38>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b03      	cmp	r3, #3
 800828c:	d032      	beq.n	80082f4 <UART_SetConfig+0x1d34>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b04      	cmp	r3, #4
 8008294:	d02c      	beq.n	80082f0 <UART_SetConfig+0x1d30>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b05      	cmp	r3, #5
 800829c:	d026      	beq.n	80082ec <UART_SetConfig+0x1d2c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b06      	cmp	r3, #6
 80082a4:	d020      	beq.n	80082e8 <UART_SetConfig+0x1d28>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b07      	cmp	r3, #7
 80082ac:	d01a      	beq.n	80082e4 <UART_SetConfig+0x1d24>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d014      	beq.n	80082e0 <UART_SetConfig+0x1d20>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d00e      	beq.n	80082dc <UART_SetConfig+0x1d1c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b0a      	cmp	r3, #10
 80082c4:	d008      	beq.n	80082d8 <UART_SetConfig+0x1d18>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	2b0b      	cmp	r3, #11
 80082cc:	d102      	bne.n	80082d4 <UART_SetConfig+0x1d14>
 80082ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082d2:	e016      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e014      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082d8:	2380      	movs	r3, #128	; 0x80
 80082da:	e012      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	e010      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082e0:	2320      	movs	r3, #32
 80082e2:	e00e      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082e4:	2310      	movs	r3, #16
 80082e6:	e00c      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082e8:	230c      	movs	r3, #12
 80082ea:	e00a      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082ec:	230a      	movs	r3, #10
 80082ee:	e008      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082f0:	2308      	movs	r3, #8
 80082f2:	e006      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082f4:	2306      	movs	r3, #6
 80082f6:	e004      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082f8:	2304      	movs	r3, #4
 80082fa:	e002      	b.n	8008302 <UART_SetConfig+0x1d42>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e000      	b.n	8008302 <UART_SetConfig+0x1d42>
 8008300:	2301      	movs	r3, #1
 8008302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008304:	fbb2 f2f3 	udiv	r2, r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	085b      	lsrs	r3, r3, #1
 800830e:	441a      	add	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	fbb2 f3f3 	udiv	r3, r2, r3
 8008318:	b29b      	uxth	r3, r3
 800831a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800831c:	e2aa      	b.n	8008874 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800831e:	f7fc fb55 	bl	80049cc <HAL_RCC_GetPCLK2Freq>
 8008322:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d044      	beq.n	80083b6 <UART_SetConfig+0x1df6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b01      	cmp	r3, #1
 8008332:	d03e      	beq.n	80083b2 <UART_SetConfig+0x1df2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b02      	cmp	r3, #2
 800833a:	d038      	beq.n	80083ae <UART_SetConfig+0x1dee>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b03      	cmp	r3, #3
 8008342:	d032      	beq.n	80083aa <UART_SetConfig+0x1dea>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b04      	cmp	r3, #4
 800834a:	d02c      	beq.n	80083a6 <UART_SetConfig+0x1de6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b05      	cmp	r3, #5
 8008352:	d026      	beq.n	80083a2 <UART_SetConfig+0x1de2>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b06      	cmp	r3, #6
 800835a:	d020      	beq.n	800839e <UART_SetConfig+0x1dde>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b07      	cmp	r3, #7
 8008362:	d01a      	beq.n	800839a <UART_SetConfig+0x1dda>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b08      	cmp	r3, #8
 800836a:	d014      	beq.n	8008396 <UART_SetConfig+0x1dd6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b09      	cmp	r3, #9
 8008372:	d00e      	beq.n	8008392 <UART_SetConfig+0x1dd2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b0a      	cmp	r3, #10
 800837a:	d008      	beq.n	800838e <UART_SetConfig+0x1dce>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b0b      	cmp	r3, #11
 8008382:	d102      	bne.n	800838a <UART_SetConfig+0x1dca>
 8008384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008388:	e016      	b.n	80083b8 <UART_SetConfig+0x1df8>
 800838a:	2301      	movs	r3, #1
 800838c:	e014      	b.n	80083b8 <UART_SetConfig+0x1df8>
 800838e:	2380      	movs	r3, #128	; 0x80
 8008390:	e012      	b.n	80083b8 <UART_SetConfig+0x1df8>
 8008392:	2340      	movs	r3, #64	; 0x40
 8008394:	e010      	b.n	80083b8 <UART_SetConfig+0x1df8>
 8008396:	2320      	movs	r3, #32
 8008398:	e00e      	b.n	80083b8 <UART_SetConfig+0x1df8>
 800839a:	2310      	movs	r3, #16
 800839c:	e00c      	b.n	80083b8 <UART_SetConfig+0x1df8>
 800839e:	230c      	movs	r3, #12
 80083a0:	e00a      	b.n	80083b8 <UART_SetConfig+0x1df8>
 80083a2:	230a      	movs	r3, #10
 80083a4:	e008      	b.n	80083b8 <UART_SetConfig+0x1df8>
 80083a6:	2308      	movs	r3, #8
 80083a8:	e006      	b.n	80083b8 <UART_SetConfig+0x1df8>
 80083aa:	2306      	movs	r3, #6
 80083ac:	e004      	b.n	80083b8 <UART_SetConfig+0x1df8>
 80083ae:	2304      	movs	r3, #4
 80083b0:	e002      	b.n	80083b8 <UART_SetConfig+0x1df8>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e000      	b.n	80083b8 <UART_SetConfig+0x1df8>
 80083b6:	2301      	movs	r3, #1
 80083b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	085b      	lsrs	r3, r3, #1
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083d2:	e24f      	b.n	8008874 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d4:	f107 0318 	add.w	r3, r7, #24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fa43 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d044      	beq.n	8008472 <UART_SetConfig+0x1eb2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d03e      	beq.n	800846e <UART_SetConfig+0x1eae>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d038      	beq.n	800846a <UART_SetConfig+0x1eaa>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d032      	beq.n	8008466 <UART_SetConfig+0x1ea6>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b04      	cmp	r3, #4
 8008406:	d02c      	beq.n	8008462 <UART_SetConfig+0x1ea2>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b05      	cmp	r3, #5
 800840e:	d026      	beq.n	800845e <UART_SetConfig+0x1e9e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	2b06      	cmp	r3, #6
 8008416:	d020      	beq.n	800845a <UART_SetConfig+0x1e9a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b07      	cmp	r3, #7
 800841e:	d01a      	beq.n	8008456 <UART_SetConfig+0x1e96>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2b08      	cmp	r3, #8
 8008426:	d014      	beq.n	8008452 <UART_SetConfig+0x1e92>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b09      	cmp	r3, #9
 800842e:	d00e      	beq.n	800844e <UART_SetConfig+0x1e8e>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b0a      	cmp	r3, #10
 8008436:	d008      	beq.n	800844a <UART_SetConfig+0x1e8a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	2b0b      	cmp	r3, #11
 800843e:	d102      	bne.n	8008446 <UART_SetConfig+0x1e86>
 8008440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008444:	e016      	b.n	8008474 <UART_SetConfig+0x1eb4>
 8008446:	2301      	movs	r3, #1
 8008448:	e014      	b.n	8008474 <UART_SetConfig+0x1eb4>
 800844a:	2380      	movs	r3, #128	; 0x80
 800844c:	e012      	b.n	8008474 <UART_SetConfig+0x1eb4>
 800844e:	2340      	movs	r3, #64	; 0x40
 8008450:	e010      	b.n	8008474 <UART_SetConfig+0x1eb4>
 8008452:	2320      	movs	r3, #32
 8008454:	e00e      	b.n	8008474 <UART_SetConfig+0x1eb4>
 8008456:	2310      	movs	r3, #16
 8008458:	e00c      	b.n	8008474 <UART_SetConfig+0x1eb4>
 800845a:	230c      	movs	r3, #12
 800845c:	e00a      	b.n	8008474 <UART_SetConfig+0x1eb4>
 800845e:	230a      	movs	r3, #10
 8008460:	e008      	b.n	8008474 <UART_SetConfig+0x1eb4>
 8008462:	2308      	movs	r3, #8
 8008464:	e006      	b.n	8008474 <UART_SetConfig+0x1eb4>
 8008466:	2306      	movs	r3, #6
 8008468:	e004      	b.n	8008474 <UART_SetConfig+0x1eb4>
 800846a:	2304      	movs	r3, #4
 800846c:	e002      	b.n	8008474 <UART_SetConfig+0x1eb4>
 800846e:	2302      	movs	r3, #2
 8008470:	e000      	b.n	8008474 <UART_SetConfig+0x1eb4>
 8008472:	2301      	movs	r3, #1
 8008474:	fbb2 f2f3 	udiv	r2, r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	441a      	add	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	fbb2 f3f3 	udiv	r3, r2, r3
 8008488:	b29b      	uxth	r3, r3
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800848c:	e1f2      	b.n	8008874 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f7fd fb32 	bl	8005afc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d044      	beq.n	800852c <UART_SetConfig+0x1f6c>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d03e      	beq.n	8008528 <UART_SetConfig+0x1f68>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d038      	beq.n	8008524 <UART_SetConfig+0x1f64>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d032      	beq.n	8008520 <UART_SetConfig+0x1f60>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d02c      	beq.n	800851c <UART_SetConfig+0x1f5c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	d026      	beq.n	8008518 <UART_SetConfig+0x1f58>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b06      	cmp	r3, #6
 80084d0:	d020      	beq.n	8008514 <UART_SetConfig+0x1f54>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b07      	cmp	r3, #7
 80084d8:	d01a      	beq.n	8008510 <UART_SetConfig+0x1f50>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d014      	beq.n	800850c <UART_SetConfig+0x1f4c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	d00e      	beq.n	8008508 <UART_SetConfig+0x1f48>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b0a      	cmp	r3, #10
 80084f0:	d008      	beq.n	8008504 <UART_SetConfig+0x1f44>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b0b      	cmp	r3, #11
 80084f8:	d102      	bne.n	8008500 <UART_SetConfig+0x1f40>
 80084fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084fe:	e016      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008500:	2301      	movs	r3, #1
 8008502:	e014      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	e012      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	e010      	b.n	800852e <UART_SetConfig+0x1f6e>
 800850c:	2320      	movs	r3, #32
 800850e:	e00e      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008510:	2310      	movs	r3, #16
 8008512:	e00c      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008514:	230c      	movs	r3, #12
 8008516:	e00a      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008518:	230a      	movs	r3, #10
 800851a:	e008      	b.n	800852e <UART_SetConfig+0x1f6e>
 800851c:	2308      	movs	r3, #8
 800851e:	e006      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008520:	2306      	movs	r3, #6
 8008522:	e004      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008524:	2304      	movs	r3, #4
 8008526:	e002      	b.n	800852e <UART_SetConfig+0x1f6e>
 8008528:	2302      	movs	r3, #2
 800852a:	e000      	b.n	800852e <UART_SetConfig+0x1f6e>
 800852c:	2301      	movs	r3, #1
 800852e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	085b      	lsrs	r3, r3, #1
 8008538:	441a      	add	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008542:	b29b      	uxth	r3, r3
 8008544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008546:	e195      	b.n	8008874 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008548:	4b87      	ldr	r3, [pc, #540]	; (8008768 <UART_SetConfig+0x21a8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d05d      	beq.n	8008610 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008554:	4b84      	ldr	r3, [pc, #528]	; (8008768 <UART_SetConfig+0x21a8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	08db      	lsrs	r3, r3, #3
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	4a83      	ldr	r2, [pc, #524]	; (800876c <UART_SetConfig+0x21ac>)
 8008560:	40da      	lsrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d044      	beq.n	80085f4 <UART_SetConfig+0x2034>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b01      	cmp	r3, #1
 8008570:	d03e      	beq.n	80085f0 <UART_SetConfig+0x2030>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b02      	cmp	r3, #2
 8008578:	d038      	beq.n	80085ec <UART_SetConfig+0x202c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b03      	cmp	r3, #3
 8008580:	d032      	beq.n	80085e8 <UART_SetConfig+0x2028>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b04      	cmp	r3, #4
 8008588:	d02c      	beq.n	80085e4 <UART_SetConfig+0x2024>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b05      	cmp	r3, #5
 8008590:	d026      	beq.n	80085e0 <UART_SetConfig+0x2020>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b06      	cmp	r3, #6
 8008598:	d020      	beq.n	80085dc <UART_SetConfig+0x201c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b07      	cmp	r3, #7
 80085a0:	d01a      	beq.n	80085d8 <UART_SetConfig+0x2018>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b08      	cmp	r3, #8
 80085a8:	d014      	beq.n	80085d4 <UART_SetConfig+0x2014>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b09      	cmp	r3, #9
 80085b0:	d00e      	beq.n	80085d0 <UART_SetConfig+0x2010>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b0a      	cmp	r3, #10
 80085b8:	d008      	beq.n	80085cc <UART_SetConfig+0x200c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b0b      	cmp	r3, #11
 80085c0:	d102      	bne.n	80085c8 <UART_SetConfig+0x2008>
 80085c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085c6:	e016      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e014      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	e012      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	e010      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085d4:	2320      	movs	r3, #32
 80085d6:	e00e      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085d8:	2310      	movs	r3, #16
 80085da:	e00c      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085dc:	230c      	movs	r3, #12
 80085de:	e00a      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085e0:	230a      	movs	r3, #10
 80085e2:	e008      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085e4:	2308      	movs	r3, #8
 80085e6:	e006      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085e8:	2306      	movs	r3, #6
 80085ea:	e004      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085ec:	2304      	movs	r3, #4
 80085ee:	e002      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e000      	b.n	80085f6 <UART_SetConfig+0x2036>
 80085f4:	2301      	movs	r3, #1
 80085f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	441a      	add	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	fbb2 f3f3 	udiv	r3, r2, r3
 800860a:	b29b      	uxth	r3, r3
 800860c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800860e:	e131      	b.n	8008874 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d043      	beq.n	80086a0 <UART_SetConfig+0x20e0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b01      	cmp	r3, #1
 800861e:	d03d      	beq.n	800869c <UART_SetConfig+0x20dc>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	2b02      	cmp	r3, #2
 8008626:	d037      	beq.n	8008698 <UART_SetConfig+0x20d8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b03      	cmp	r3, #3
 800862e:	d031      	beq.n	8008694 <UART_SetConfig+0x20d4>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b04      	cmp	r3, #4
 8008636:	d02b      	beq.n	8008690 <UART_SetConfig+0x20d0>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b05      	cmp	r3, #5
 800863e:	d025      	beq.n	800868c <UART_SetConfig+0x20cc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b06      	cmp	r3, #6
 8008646:	d01f      	beq.n	8008688 <UART_SetConfig+0x20c8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b07      	cmp	r3, #7
 800864e:	d019      	beq.n	8008684 <UART_SetConfig+0x20c4>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b08      	cmp	r3, #8
 8008656:	d013      	beq.n	8008680 <UART_SetConfig+0x20c0>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b09      	cmp	r3, #9
 800865e:	d00d      	beq.n	800867c <UART_SetConfig+0x20bc>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b0a      	cmp	r3, #10
 8008666:	d007      	beq.n	8008678 <UART_SetConfig+0x20b8>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b0b      	cmp	r3, #11
 800866e:	d101      	bne.n	8008674 <UART_SetConfig+0x20b4>
 8008670:	4b3f      	ldr	r3, [pc, #252]	; (8008770 <UART_SetConfig+0x21b0>)
 8008672:	e016      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008674:	4b3d      	ldr	r3, [pc, #244]	; (800876c <UART_SetConfig+0x21ac>)
 8008676:	e014      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008678:	4b3e      	ldr	r3, [pc, #248]	; (8008774 <UART_SetConfig+0x21b4>)
 800867a:	e012      	b.n	80086a2 <UART_SetConfig+0x20e2>
 800867c:	4b3e      	ldr	r3, [pc, #248]	; (8008778 <UART_SetConfig+0x21b8>)
 800867e:	e010      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008680:	4b3e      	ldr	r3, [pc, #248]	; (800877c <UART_SetConfig+0x21bc>)
 8008682:	e00e      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008684:	4b3e      	ldr	r3, [pc, #248]	; (8008780 <UART_SetConfig+0x21c0>)
 8008686:	e00c      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008688:	4b3e      	ldr	r3, [pc, #248]	; (8008784 <UART_SetConfig+0x21c4>)
 800868a:	e00a      	b.n	80086a2 <UART_SetConfig+0x20e2>
 800868c:	4b3e      	ldr	r3, [pc, #248]	; (8008788 <UART_SetConfig+0x21c8>)
 800868e:	e008      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008690:	4b3e      	ldr	r3, [pc, #248]	; (800878c <UART_SetConfig+0x21cc>)
 8008692:	e006      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008694:	4b3e      	ldr	r3, [pc, #248]	; (8008790 <UART_SetConfig+0x21d0>)
 8008696:	e004      	b.n	80086a2 <UART_SetConfig+0x20e2>
 8008698:	4b3e      	ldr	r3, [pc, #248]	; (8008794 <UART_SetConfig+0x21d4>)
 800869a:	e002      	b.n	80086a2 <UART_SetConfig+0x20e2>
 800869c:	4b3e      	ldr	r3, [pc, #248]	; (8008798 <UART_SetConfig+0x21d8>)
 800869e:	e000      	b.n	80086a2 <UART_SetConfig+0x20e2>
 80086a0:	4b32      	ldr	r3, [pc, #200]	; (800876c <UART_SetConfig+0x21ac>)
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6852      	ldr	r2, [r2, #4]
 80086a6:	0852      	lsrs	r2, r2, #1
 80086a8:	441a      	add	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086b6:	e0dd      	b.n	8008874 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d046      	beq.n	800874e <UART_SetConfig+0x218e>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d040      	beq.n	800874a <UART_SetConfig+0x218a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d03a      	beq.n	8008746 <UART_SetConfig+0x2186>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d034      	beq.n	8008742 <UART_SetConfig+0x2182>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d02e      	beq.n	800873e <UART_SetConfig+0x217e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b05      	cmp	r3, #5
 80086e6:	d028      	beq.n	800873a <UART_SetConfig+0x217a>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	d022      	beq.n	8008736 <UART_SetConfig+0x2176>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b07      	cmp	r3, #7
 80086f6:	d01c      	beq.n	8008732 <UART_SetConfig+0x2172>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d016      	beq.n	800872e <UART_SetConfig+0x216e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	2b09      	cmp	r3, #9
 8008706:	d00f      	beq.n	8008728 <UART_SetConfig+0x2168>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b0a      	cmp	r3, #10
 800870e:	d008      	beq.n	8008722 <UART_SetConfig+0x2162>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b0b      	cmp	r3, #11
 8008716:	d102      	bne.n	800871e <UART_SetConfig+0x215e>
 8008718:	f643 5309 	movw	r3, #15625	; 0x3d09
 800871c:	e018      	b.n	8008750 <UART_SetConfig+0x2190>
 800871e:	4b18      	ldr	r3, [pc, #96]	; (8008780 <UART_SetConfig+0x21c0>)
 8008720:	e016      	b.n	8008750 <UART_SetConfig+0x2190>
 8008722:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008726:	e013      	b.n	8008750 <UART_SetConfig+0x2190>
 8008728:	f24f 4324 	movw	r3, #62500	; 0xf424
 800872c:	e010      	b.n	8008750 <UART_SetConfig+0x2190>
 800872e:	4b1b      	ldr	r3, [pc, #108]	; (800879c <UART_SetConfig+0x21dc>)
 8008730:	e00e      	b.n	8008750 <UART_SetConfig+0x2190>
 8008732:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <UART_SetConfig+0x21b0>)
 8008734:	e00c      	b.n	8008750 <UART_SetConfig+0x2190>
 8008736:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <UART_SetConfig+0x21e0>)
 8008738:	e00a      	b.n	8008750 <UART_SetConfig+0x2190>
 800873a:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <UART_SetConfig+0x21e4>)
 800873c:	e008      	b.n	8008750 <UART_SetConfig+0x2190>
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <UART_SetConfig+0x21b4>)
 8008740:	e006      	b.n	8008750 <UART_SetConfig+0x2190>
 8008742:	4b19      	ldr	r3, [pc, #100]	; (80087a8 <UART_SetConfig+0x21e8>)
 8008744:	e004      	b.n	8008750 <UART_SetConfig+0x2190>
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <UART_SetConfig+0x21b8>)
 8008748:	e002      	b.n	8008750 <UART_SetConfig+0x2190>
 800874a:	4b0c      	ldr	r3, [pc, #48]	; (800877c <UART_SetConfig+0x21bc>)
 800874c:	e000      	b.n	8008750 <UART_SetConfig+0x2190>
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <UART_SetConfig+0x21c0>)
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6852      	ldr	r2, [r2, #4]
 8008754:	0852      	lsrs	r2, r2, #1
 8008756:	441a      	add	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	b29b      	uxth	r3, r3
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008764:	e086      	b.n	8008874 <UART_SetConfig+0x22b4>
 8008766:	bf00      	nop
 8008768:	58024400 	.word	0x58024400
 800876c:	03d09000 	.word	0x03d09000
 8008770:	0003d090 	.word	0x0003d090
 8008774:	0007a120 	.word	0x0007a120
 8008778:	000f4240 	.word	0x000f4240
 800877c:	001e8480 	.word	0x001e8480
 8008780:	003d0900 	.word	0x003d0900
 8008784:	00516155 	.word	0x00516155
 8008788:	0061a800 	.word	0x0061a800
 800878c:	007a1200 	.word	0x007a1200
 8008790:	00a2c2aa 	.word	0x00a2c2aa
 8008794:	00f42400 	.word	0x00f42400
 8008798:	01e84800 	.word	0x01e84800
 800879c:	0001e848 	.word	0x0001e848
 80087a0:	00051615 	.word	0x00051615
 80087a4:	00061a80 	.word	0x00061a80
 80087a8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d04e      	beq.n	8008852 <UART_SetConfig+0x2292>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d047      	beq.n	800884c <UART_SetConfig+0x228c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d040      	beq.n	8008846 <UART_SetConfig+0x2286>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d039      	beq.n	8008840 <UART_SetConfig+0x2280>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d032      	beq.n	800883a <UART_SetConfig+0x227a>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	2b05      	cmp	r3, #5
 80087da:	d02b      	beq.n	8008834 <UART_SetConfig+0x2274>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b06      	cmp	r3, #6
 80087e2:	d024      	beq.n	800882e <UART_SetConfig+0x226e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b07      	cmp	r3, #7
 80087ea:	d01d      	beq.n	8008828 <UART_SetConfig+0x2268>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d016      	beq.n	8008822 <UART_SetConfig+0x2262>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d00f      	beq.n	800881c <UART_SetConfig+0x225c>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b0a      	cmp	r3, #10
 8008802:	d008      	beq.n	8008816 <UART_SetConfig+0x2256>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2b0b      	cmp	r3, #11
 800880a:	d101      	bne.n	8008810 <UART_SetConfig+0x2250>
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	e022      	b.n	8008856 <UART_SetConfig+0x2296>
 8008810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008814:	e01f      	b.n	8008856 <UART_SetConfig+0x2296>
 8008816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881a:	e01c      	b.n	8008856 <UART_SetConfig+0x2296>
 800881c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008820:	e019      	b.n	8008856 <UART_SetConfig+0x2296>
 8008822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008826:	e016      	b.n	8008856 <UART_SetConfig+0x2296>
 8008828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800882c:	e013      	b.n	8008856 <UART_SetConfig+0x2296>
 800882e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008832:	e010      	b.n	8008856 <UART_SetConfig+0x2296>
 8008834:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008838:	e00d      	b.n	8008856 <UART_SetConfig+0x2296>
 800883a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800883e:	e00a      	b.n	8008856 <UART_SetConfig+0x2296>
 8008840:	f241 5355 	movw	r3, #5461	; 0x1555
 8008844:	e007      	b.n	8008856 <UART_SetConfig+0x2296>
 8008846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800884a:	e004      	b.n	8008856 <UART_SetConfig+0x2296>
 800884c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008850:	e001      	b.n	8008856 <UART_SetConfig+0x2296>
 8008852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6852      	ldr	r2, [r2, #4]
 800885a:	0852      	lsrs	r2, r2, #1
 800885c:	441a      	add	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800886a:	e003      	b.n	8008874 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	2b0f      	cmp	r3, #15
 8008878:	d908      	bls.n	800888c <UART_SetConfig+0x22cc>
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008880:	d204      	bcs.n	800888c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008888:	60da      	str	r2, [r3, #12]
 800888a:	e002      	b.n	8008892 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80088ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3740      	adds	r7, #64	; 0x40
 80088b6:	46bd      	mov	sp, r7
 80088b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080088bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01a      	beq.n	80089d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ba:	d10a      	bne.n	80089d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	605a      	str	r2, [r3, #4]
  }
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008a10:	f7f8 fe4e 	bl	80016b0 <HAL_GetTick>
 8008a14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d10e      	bne.n	8008a42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f82c 	bl	8008a90 <UART_WaitOnFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e022      	b.n	8008a88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d10e      	bne.n	8008a6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f816 	bl	8008a90 <UART_WaitOnFlagUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e00c      	b.n	8008a88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa0:	e062      	b.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d05e      	beq.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aaa:	f7f8 fe01 	bl	80016b0 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d302      	bcc.n	8008ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d11d      	bne.n	8008afc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ace:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0201 	bic.w	r2, r2, #1
 8008ade:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e045      	b.n	8008b88 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d02e      	beq.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b18:	d126      	bne.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b22:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 0201 	bic.w	r2, r2, #1
 8008b42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e00f      	b.n	8008b88 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69da      	ldr	r2, [r3, #28]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4013      	ands	r3, r2
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	bf0c      	ite	eq
 8008b78:	2301      	moveq	r3, #1
 8008b7a:	2300      	movne	r3, #0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d08d      	beq.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d101      	bne.n	8008ba6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e027      	b.n	8008bf6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2224      	movs	r2, #36	; 0x24
 8008bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0201 	bic.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d101      	bne.n	8008c1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c16:	2302      	movs	r3, #2
 8008c18:	e02d      	b.n	8008c76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2224      	movs	r2, #36	; 0x24
 8008c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0201 	bic.w	r2, r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f850 	bl	8008cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e02d      	b.n	8008cf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2224      	movs	r2, #36	; 0x24
 8008ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0201 	bic.w	r2, r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f812 	bl	8008cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b089      	sub	sp, #36	; 0x24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008d04:	4a2f      	ldr	r2, [pc, #188]	; (8008dc4 <UARTEx_SetNbDataToProcess+0xc8>)
 8008d06:	f107 0314 	add.w	r3, r7, #20
 8008d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d0e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008d12:	4a2d      	ldr	r2, [pc, #180]	; (8008dc8 <UARTEx_SetNbDataToProcess+0xcc>)
 8008d14:	f107 030c 	add.w	r3, r7, #12
 8008d18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d1c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d38:	e03d      	b.n	8008db6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	0e5b      	lsrs	r3, r3, #25
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	0f5b      	lsrs	r3, r3, #29
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d62:	7fbb      	ldrb	r3, [r7, #30]
 8008d64:	7f3a      	ldrb	r2, [r7, #28]
 8008d66:	f107 0120 	add.w	r1, r7, #32
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d70:	fb02 f303 	mul.w	r3, r2, r3
 8008d74:	7f3a      	ldrb	r2, [r7, #28]
 8008d76:	f107 0120 	add.w	r1, r7, #32
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d8c:	7ffb      	ldrb	r3, [r7, #31]
 8008d8e:	7f7a      	ldrb	r2, [r7, #29]
 8008d90:	f107 0120 	add.w	r1, r7, #32
 8008d94:	440a      	add	r2, r1
 8008d96:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	7f7a      	ldrb	r2, [r7, #29]
 8008da0:	f107 0120 	add.w	r1, r7, #32
 8008da4:	440a      	add	r2, r1
 8008da6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008daa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008db6:	bf00      	nop
 8008db8:	3724      	adds	r7, #36	; 0x24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	08019c08 	.word	0x08019c08
 8008dc8:	08019c10 	.word	0x08019c10

08008dcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dcc:	b084      	sub	sp, #16
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	f107 001c 	add.w	r0, r7, #28
 8008dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d120      	bne.n	8008e26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <USB_CoreInit+0xc0>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d105      	bne.n	8008e1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa4c 	bl	80092b8 <USB_CoreReset>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	e01a      	b.n	8008e5c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa40 	bl	80092b8 <USB_CoreReset>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e4e:	e005      	b.n	8008e5c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d10b      	bne.n	8008e7a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f043 0206 	orr.w	r2, r3, #6
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f043 0220 	orr.w	r2, r3, #32
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e86:	b004      	add	sp, #16
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	ffbdffbf 	.word	0xffbdffbf

08008e90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f023 0201 	bic.w	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d106      	bne.n	8008ede <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	60da      	str	r2, [r3, #12]
 8008edc:	e00b      	b.n	8008ef6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d106      	bne.n	8008ef2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]
 8008ef0:	e001      	b.n	8008ef6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e003      	b.n	8008efe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008ef6:	2032      	movs	r0, #50	; 0x32
 8008ef8:	f7f8 fbe6 	bl	80016c8 <HAL_Delay>

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f08:	b084      	sub	sp, #16
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f22:	2300      	movs	r3, #0
 8008f24:	613b      	str	r3, [r7, #16]
 8008f26:	e009      	b.n	8008f3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	3340      	adds	r3, #64	; 0x40
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b0e      	cmp	r3, #14
 8008f40:	d9f2      	bls.n	8008f28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d11c      	bne.n	8008f82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f56:	f043 0302 	orr.w	r3, r3, #2
 8008f5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	e005      	b.n	8008f8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f94:	461a      	mov	r2, r3
 8008f96:	2300      	movs	r3, #0
 8008f98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa8:	461a      	mov	r2, r3
 8008faa:	680b      	ldr	r3, [r1, #0]
 8008fac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d10c      	bne.n	8008fce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008fba:	2100      	movs	r1, #0
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f949 	bl	8009254 <USB_SetDevSpeed>
 8008fc2:	e008      	b.n	8008fd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f944 	bl	8009254 <USB_SetDevSpeed>
 8008fcc:	e003      	b.n	8008fd6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008fce:	2103      	movs	r1, #3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f93f 	bl	8009254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fd6:	2110      	movs	r1, #16
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f8f3 	bl	80091c4 <USB_FlushTxFifo>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f911 	bl	8009210 <USB_FlushRxFifo>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	461a      	mov	r2, r3
 8009000:	2300      	movs	r3, #0
 8009002:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900a:	461a      	mov	r2, r3
 800900c:	2300      	movs	r3, #0
 800900e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009016:	461a      	mov	r2, r3
 8009018:	2300      	movs	r3, #0
 800901a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800901c:	2300      	movs	r3, #0
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	e043      	b.n	80090aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009038:	d118      	bne.n	800906c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904c:	461a      	mov	r2, r3
 800904e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	e013      	b.n	800907e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009062:	461a      	mov	r2, r3
 8009064:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	e008      	b.n	800907e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009078:	461a      	mov	r2, r3
 800907a:	2300      	movs	r3, #0
 800907c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908a:	461a      	mov	r2, r3
 800908c:	2300      	movs	r3, #0
 800908e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909c:	461a      	mov	r2, r3
 800909e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	3301      	adds	r3, #1
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d3b7      	bcc.n	8009022 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	613b      	str	r3, [r7, #16]
 80090b6:	e043      	b.n	8009140 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ce:	d118      	bne.n	8009102 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e2:	461a      	mov	r2, r3
 80090e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	e013      	b.n	8009114 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f8:	461a      	mov	r2, r3
 80090fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	e008      	b.n	8009114 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910e:	461a      	mov	r2, r3
 8009110:	2300      	movs	r3, #0
 8009112:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009120:	461a      	mov	r2, r3
 8009122:	2300      	movs	r3, #0
 8009124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	461a      	mov	r2, r3
 8009134:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009138:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	3301      	adds	r3, #1
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	429a      	cmp	r2, r3
 8009146:	d3b7      	bcc.n	80090b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800915a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009168:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	2b00      	cmp	r3, #0
 800916e:	d105      	bne.n	800917c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f043 0210 	orr.w	r2, r3, #16
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <USB_DevInit+0x2b4>)
 8009182:	4313      	orrs	r3, r2
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f043 0208 	orr.w	r2, r3, #8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800919a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d105      	bne.n	80091ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699a      	ldr	r2, [r3, #24]
 80091a4:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <USB_DevInit+0x2b8>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091b8:	b004      	add	sp, #16
 80091ba:	4770      	bx	lr
 80091bc:	803c3800 	.word	0x803c3800
 80091c0:	40000004 	.word	0x40000004

080091c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	019b      	lsls	r3, r3, #6
 80091d6:	f043 0220 	orr.w	r2, r3, #32
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3301      	adds	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4a09      	ldr	r2, [pc, #36]	; (800920c <USB_FlushTxFifo+0x48>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d901      	bls.n	80091f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e006      	b.n	80091fe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d0f0      	beq.n	80091de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	00030d40 	.word	0x00030d40

08009210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2210      	movs	r2, #16
 8009220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4a09      	ldr	r2, [pc, #36]	; (8009250 <USB_FlushRxFifo+0x40>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d901      	bls.n	8009234 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b10      	cmp	r3, #16
 800923e:	d0f0      	beq.n	8009222 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	00030d40 	.word	0x00030d40

08009254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009274:	4313      	orrs	r3, r2
 8009276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092a0:	f043 0302 	orr.w	r3, r3, #2
 80092a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80092a6:	2003      	movs	r0, #3
 80092a8:	f7f8 fa0e 	bl	80016c8 <HAL_Delay>

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3301      	adds	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4a13      	ldr	r2, [pc, #76]	; (800931c <USB_CoreReset+0x64>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d901      	bls.n	80092d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e01b      	b.n	800930e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	daf2      	bge.n	80092c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f043 0201 	orr.w	r2, r3, #1
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4a09      	ldr	r2, [pc, #36]	; (800931c <USB_CoreReset+0x64>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e006      	b.n	800930e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b01      	cmp	r3, #1
 800930a:	d0f0      	beq.n	80092ee <USB_CoreReset+0x36>

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	00030d40 	.word	0x00030d40

08009320 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8009326:	4b8c      	ldr	r3, [pc, #560]	; (8009558 <MX_LWIP_Init+0x238>)
 8009328:	22a9      	movs	r2, #169	; 0xa9
 800932a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800932c:	4b8a      	ldr	r3, [pc, #552]	; (8009558 <MX_LWIP_Init+0x238>)
 800932e:	22fe      	movs	r2, #254	; 0xfe
 8009330:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009332:	4b89      	ldr	r3, [pc, #548]	; (8009558 <MX_LWIP_Init+0x238>)
 8009334:	2200      	movs	r2, #0
 8009336:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8009338:	4b87      	ldr	r3, [pc, #540]	; (8009558 <MX_LWIP_Init+0x238>)
 800933a:	2214      	movs	r2, #20
 800933c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800933e:	4b87      	ldr	r3, [pc, #540]	; (800955c <MX_LWIP_Init+0x23c>)
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009344:	4b85      	ldr	r3, [pc, #532]	; (800955c <MX_LWIP_Init+0x23c>)
 8009346:	22ff      	movs	r2, #255	; 0xff
 8009348:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800934a:	4b84      	ldr	r3, [pc, #528]	; (800955c <MX_LWIP_Init+0x23c>)
 800934c:	2200      	movs	r2, #0
 800934e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009350:	4b82      	ldr	r3, [pc, #520]	; (800955c <MX_LWIP_Init+0x23c>)
 8009352:	2200      	movs	r2, #0
 8009354:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009356:	4b82      	ldr	r3, [pc, #520]	; (8009560 <MX_LWIP_Init+0x240>)
 8009358:	2200      	movs	r2, #0
 800935a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800935c:	4b80      	ldr	r3, [pc, #512]	; (8009560 <MX_LWIP_Init+0x240>)
 800935e:	2200      	movs	r2, #0
 8009360:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009362:	4b7f      	ldr	r3, [pc, #508]	; (8009560 <MX_LWIP_Init+0x240>)
 8009364:	2200      	movs	r2, #0
 8009366:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009368:	4b7d      	ldr	r3, [pc, #500]	; (8009560 <MX_LWIP_Init+0x240>)
 800936a:	2200      	movs	r2, #0
 800936c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800936e:	2100      	movs	r1, #0
 8009370:	2000      	movs	r0, #0
 8009372:	f005 fded 	bl	800ef50 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009376:	4b78      	ldr	r3, [pc, #480]	; (8009558 <MX_LWIP_Init+0x238>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	061a      	lsls	r2, r3, #24
 800937c:	4b76      	ldr	r3, [pc, #472]	; (8009558 <MX_LWIP_Init+0x238>)
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	041b      	lsls	r3, r3, #16
 8009382:	431a      	orrs	r2, r3
 8009384:	4b74      	ldr	r3, [pc, #464]	; (8009558 <MX_LWIP_Init+0x238>)
 8009386:	789b      	ldrb	r3, [r3, #2]
 8009388:	021b      	lsls	r3, r3, #8
 800938a:	4313      	orrs	r3, r2
 800938c:	4a72      	ldr	r2, [pc, #456]	; (8009558 <MX_LWIP_Init+0x238>)
 800938e:	78d2      	ldrb	r2, [r2, #3]
 8009390:	4313      	orrs	r3, r2
 8009392:	061a      	lsls	r2, r3, #24
 8009394:	4b70      	ldr	r3, [pc, #448]	; (8009558 <MX_LWIP_Init+0x238>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	0619      	lsls	r1, r3, #24
 800939a:	4b6f      	ldr	r3, [pc, #444]	; (8009558 <MX_LWIP_Init+0x238>)
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	4319      	orrs	r1, r3
 80093a2:	4b6d      	ldr	r3, [pc, #436]	; (8009558 <MX_LWIP_Init+0x238>)
 80093a4:	789b      	ldrb	r3, [r3, #2]
 80093a6:	021b      	lsls	r3, r3, #8
 80093a8:	430b      	orrs	r3, r1
 80093aa:	496b      	ldr	r1, [pc, #428]	; (8009558 <MX_LWIP_Init+0x238>)
 80093ac:	78c9      	ldrb	r1, [r1, #3]
 80093ae:	430b      	orrs	r3, r1
 80093b0:	021b      	lsls	r3, r3, #8
 80093b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093b6:	431a      	orrs	r2, r3
 80093b8:	4b67      	ldr	r3, [pc, #412]	; (8009558 <MX_LWIP_Init+0x238>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	0619      	lsls	r1, r3, #24
 80093be:	4b66      	ldr	r3, [pc, #408]	; (8009558 <MX_LWIP_Init+0x238>)
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	041b      	lsls	r3, r3, #16
 80093c4:	4319      	orrs	r1, r3
 80093c6:	4b64      	ldr	r3, [pc, #400]	; (8009558 <MX_LWIP_Init+0x238>)
 80093c8:	789b      	ldrb	r3, [r3, #2]
 80093ca:	021b      	lsls	r3, r3, #8
 80093cc:	430b      	orrs	r3, r1
 80093ce:	4962      	ldr	r1, [pc, #392]	; (8009558 <MX_LWIP_Init+0x238>)
 80093d0:	78c9      	ldrb	r1, [r1, #3]
 80093d2:	430b      	orrs	r3, r1
 80093d4:	0a1b      	lsrs	r3, r3, #8
 80093d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80093da:	431a      	orrs	r2, r3
 80093dc:	4b5e      	ldr	r3, [pc, #376]	; (8009558 <MX_LWIP_Init+0x238>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	0619      	lsls	r1, r3, #24
 80093e2:	4b5d      	ldr	r3, [pc, #372]	; (8009558 <MX_LWIP_Init+0x238>)
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	4319      	orrs	r1, r3
 80093ea:	4b5b      	ldr	r3, [pc, #364]	; (8009558 <MX_LWIP_Init+0x238>)
 80093ec:	789b      	ldrb	r3, [r3, #2]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	430b      	orrs	r3, r1
 80093f2:	4959      	ldr	r1, [pc, #356]	; (8009558 <MX_LWIP_Init+0x238>)
 80093f4:	78c9      	ldrb	r1, [r1, #3]
 80093f6:	430b      	orrs	r3, r1
 80093f8:	0e1b      	lsrs	r3, r3, #24
 80093fa:	4313      	orrs	r3, r2
 80093fc:	4a59      	ldr	r2, [pc, #356]	; (8009564 <MX_LWIP_Init+0x244>)
 80093fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009400:	4b56      	ldr	r3, [pc, #344]	; (800955c <MX_LWIP_Init+0x23c>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	061a      	lsls	r2, r3, #24
 8009406:	4b55      	ldr	r3, [pc, #340]	; (800955c <MX_LWIP_Init+0x23c>)
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	431a      	orrs	r2, r3
 800940e:	4b53      	ldr	r3, [pc, #332]	; (800955c <MX_LWIP_Init+0x23c>)
 8009410:	789b      	ldrb	r3, [r3, #2]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	4313      	orrs	r3, r2
 8009416:	4a51      	ldr	r2, [pc, #324]	; (800955c <MX_LWIP_Init+0x23c>)
 8009418:	78d2      	ldrb	r2, [r2, #3]
 800941a:	4313      	orrs	r3, r2
 800941c:	061a      	lsls	r2, r3, #24
 800941e:	4b4f      	ldr	r3, [pc, #316]	; (800955c <MX_LWIP_Init+0x23c>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	0619      	lsls	r1, r3, #24
 8009424:	4b4d      	ldr	r3, [pc, #308]	; (800955c <MX_LWIP_Init+0x23c>)
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	4319      	orrs	r1, r3
 800942c:	4b4b      	ldr	r3, [pc, #300]	; (800955c <MX_LWIP_Init+0x23c>)
 800942e:	789b      	ldrb	r3, [r3, #2]
 8009430:	021b      	lsls	r3, r3, #8
 8009432:	430b      	orrs	r3, r1
 8009434:	4949      	ldr	r1, [pc, #292]	; (800955c <MX_LWIP_Init+0x23c>)
 8009436:	78c9      	ldrb	r1, [r1, #3]
 8009438:	430b      	orrs	r3, r1
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009440:	431a      	orrs	r2, r3
 8009442:	4b46      	ldr	r3, [pc, #280]	; (800955c <MX_LWIP_Init+0x23c>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	0619      	lsls	r1, r3, #24
 8009448:	4b44      	ldr	r3, [pc, #272]	; (800955c <MX_LWIP_Init+0x23c>)
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	041b      	lsls	r3, r3, #16
 800944e:	4319      	orrs	r1, r3
 8009450:	4b42      	ldr	r3, [pc, #264]	; (800955c <MX_LWIP_Init+0x23c>)
 8009452:	789b      	ldrb	r3, [r3, #2]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	430b      	orrs	r3, r1
 8009458:	4940      	ldr	r1, [pc, #256]	; (800955c <MX_LWIP_Init+0x23c>)
 800945a:	78c9      	ldrb	r1, [r1, #3]
 800945c:	430b      	orrs	r3, r1
 800945e:	0a1b      	lsrs	r3, r3, #8
 8009460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009464:	431a      	orrs	r2, r3
 8009466:	4b3d      	ldr	r3, [pc, #244]	; (800955c <MX_LWIP_Init+0x23c>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	0619      	lsls	r1, r3, #24
 800946c:	4b3b      	ldr	r3, [pc, #236]	; (800955c <MX_LWIP_Init+0x23c>)
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	041b      	lsls	r3, r3, #16
 8009472:	4319      	orrs	r1, r3
 8009474:	4b39      	ldr	r3, [pc, #228]	; (800955c <MX_LWIP_Init+0x23c>)
 8009476:	789b      	ldrb	r3, [r3, #2]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	430b      	orrs	r3, r1
 800947c:	4937      	ldr	r1, [pc, #220]	; (800955c <MX_LWIP_Init+0x23c>)
 800947e:	78c9      	ldrb	r1, [r1, #3]
 8009480:	430b      	orrs	r3, r1
 8009482:	0e1b      	lsrs	r3, r3, #24
 8009484:	4313      	orrs	r3, r2
 8009486:	4a38      	ldr	r2, [pc, #224]	; (8009568 <MX_LWIP_Init+0x248>)
 8009488:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800948a:	4b35      	ldr	r3, [pc, #212]	; (8009560 <MX_LWIP_Init+0x240>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	061a      	lsls	r2, r3, #24
 8009490:	4b33      	ldr	r3, [pc, #204]	; (8009560 <MX_LWIP_Init+0x240>)
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	431a      	orrs	r2, r3
 8009498:	4b31      	ldr	r3, [pc, #196]	; (8009560 <MX_LWIP_Init+0x240>)
 800949a:	789b      	ldrb	r3, [r3, #2]
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	4313      	orrs	r3, r2
 80094a0:	4a2f      	ldr	r2, [pc, #188]	; (8009560 <MX_LWIP_Init+0x240>)
 80094a2:	78d2      	ldrb	r2, [r2, #3]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	061a      	lsls	r2, r3, #24
 80094a8:	4b2d      	ldr	r3, [pc, #180]	; (8009560 <MX_LWIP_Init+0x240>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	0619      	lsls	r1, r3, #24
 80094ae:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <MX_LWIP_Init+0x240>)
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	4319      	orrs	r1, r3
 80094b6:	4b2a      	ldr	r3, [pc, #168]	; (8009560 <MX_LWIP_Init+0x240>)
 80094b8:	789b      	ldrb	r3, [r3, #2]
 80094ba:	021b      	lsls	r3, r3, #8
 80094bc:	430b      	orrs	r3, r1
 80094be:	4928      	ldr	r1, [pc, #160]	; (8009560 <MX_LWIP_Init+0x240>)
 80094c0:	78c9      	ldrb	r1, [r1, #3]
 80094c2:	430b      	orrs	r3, r1
 80094c4:	021b      	lsls	r3, r3, #8
 80094c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094ca:	431a      	orrs	r2, r3
 80094cc:	4b24      	ldr	r3, [pc, #144]	; (8009560 <MX_LWIP_Init+0x240>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	0619      	lsls	r1, r3, #24
 80094d2:	4b23      	ldr	r3, [pc, #140]	; (8009560 <MX_LWIP_Init+0x240>)
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	4319      	orrs	r1, r3
 80094da:	4b21      	ldr	r3, [pc, #132]	; (8009560 <MX_LWIP_Init+0x240>)
 80094dc:	789b      	ldrb	r3, [r3, #2]
 80094de:	021b      	lsls	r3, r3, #8
 80094e0:	430b      	orrs	r3, r1
 80094e2:	491f      	ldr	r1, [pc, #124]	; (8009560 <MX_LWIP_Init+0x240>)
 80094e4:	78c9      	ldrb	r1, [r1, #3]
 80094e6:	430b      	orrs	r3, r1
 80094e8:	0a1b      	lsrs	r3, r3, #8
 80094ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094ee:	431a      	orrs	r2, r3
 80094f0:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <MX_LWIP_Init+0x240>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	0619      	lsls	r1, r3, #24
 80094f6:	4b1a      	ldr	r3, [pc, #104]	; (8009560 <MX_LWIP_Init+0x240>)
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	041b      	lsls	r3, r3, #16
 80094fc:	4319      	orrs	r1, r3
 80094fe:	4b18      	ldr	r3, [pc, #96]	; (8009560 <MX_LWIP_Init+0x240>)
 8009500:	789b      	ldrb	r3, [r3, #2]
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	430b      	orrs	r3, r1
 8009506:	4916      	ldr	r1, [pc, #88]	; (8009560 <MX_LWIP_Init+0x240>)
 8009508:	78c9      	ldrb	r1, [r1, #3]
 800950a:	430b      	orrs	r3, r1
 800950c:	0e1b      	lsrs	r3, r3, #24
 800950e:	4313      	orrs	r3, r2
 8009510:	4a16      	ldr	r2, [pc, #88]	; (800956c <MX_LWIP_Init+0x24c>)
 8009512:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009514:	4b16      	ldr	r3, [pc, #88]	; (8009570 <MX_LWIP_Init+0x250>)
 8009516:	9302      	str	r3, [sp, #8]
 8009518:	4b16      	ldr	r3, [pc, #88]	; (8009574 <MX_LWIP_Init+0x254>)
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	2300      	movs	r3, #0
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	4b12      	ldr	r3, [pc, #72]	; (800956c <MX_LWIP_Init+0x24c>)
 8009522:	4a11      	ldr	r2, [pc, #68]	; (8009568 <MX_LWIP_Init+0x248>)
 8009524:	490f      	ldr	r1, [pc, #60]	; (8009564 <MX_LWIP_Init+0x244>)
 8009526:	4814      	ldr	r0, [pc, #80]	; (8009578 <MX_LWIP_Init+0x258>)
 8009528:	f006 fa10 	bl	800f94c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800952c:	4812      	ldr	r0, [pc, #72]	; (8009578 <MX_LWIP_Init+0x258>)
 800952e:	f006 faed 	bl	800fb0c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009532:	4b11      	ldr	r3, [pc, #68]	; (8009578 <MX_LWIP_Init+0x258>)
 8009534:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009538:	089b      	lsrs	r3, r3, #2
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009544:	480c      	ldr	r0, [pc, #48]	; (8009578 <MX_LWIP_Init+0x258>)
 8009546:	f006 faf1 	bl	800fb2c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800954a:	e002      	b.n	8009552 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800954c:	480a      	ldr	r0, [pc, #40]	; (8009578 <MX_LWIP_Init+0x258>)
 800954e:	f006 fb31 	bl	800fbb4 <netif_set_down>
}
 8009552:	bf00      	nop
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20004710 	.word	0x20004710
 800955c:	2000470c 	.word	0x2000470c
 8009560:	200046d4 	.word	0x200046d4
 8009564:	20004708 	.word	0x20004708
 8009568:	20004714 	.word	0x20004714
 800956c:	20004718 	.word	0x20004718
 8009570:	0800ee4d 	.word	0x0800ee4d
 8009574:	08009bd1 	.word	0x08009bd1
 8009578:	200046d8 	.word	0x200046d8

0800957c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800958e:	2320      	movs	r3, #32
 8009590:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009592:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8009596:	e00b      	b.n	80095b0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009598:	4a0c      	ldr	r2, [pc, #48]	; (80095cc <SCB_InvalidateDCache_by_Addr+0x50>)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4413      	add	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dcf0      	bgt.n	8009598 <SCB_InvalidateDCache_by_Addr+0x1c>
 80095b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80095ba:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80095be:	bf00      	nop
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	e000ed00 	.word	0xe000ed00

080095d0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	; 0x38
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	605a      	str	r2, [r3, #4]
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	60da      	str	r2, [r3, #12]
 80095e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a59      	ldr	r2, [pc, #356]	; (8009754 <HAL_ETH_MspInit+0x184>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	f040 80ab 	bne.w	800974a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80095f4:	4b58      	ldr	r3, [pc, #352]	; (8009758 <HAL_ETH_MspInit+0x188>)
 80095f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80095fa:	4a57      	ldr	r2, [pc, #348]	; (8009758 <HAL_ETH_MspInit+0x188>)
 80095fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009600:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009604:	4b54      	ldr	r3, [pc, #336]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800960a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800960e:	623b      	str	r3, [r7, #32]
 8009610:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009618:	4a4f      	ldr	r2, [pc, #316]	; (8009758 <HAL_ETH_MspInit+0x188>)
 800961a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800961e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009622:	4b4d      	ldr	r3, [pc, #308]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009630:	4b49      	ldr	r3, [pc, #292]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009632:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009636:	4a48      	ldr	r2, [pc, #288]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800963c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009640:	4b45      	ldr	r3, [pc, #276]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800964a:	61bb      	str	r3, [r7, #24]
 800964c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800964e:	4b42      	ldr	r3, [pc, #264]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009654:	4a40      	ldr	r2, [pc, #256]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009656:	f043 0304 	orr.w	r3, r3, #4
 800965a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800965e:	4b3e      	ldr	r3, [pc, #248]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800966c:	4b3a      	ldr	r3, [pc, #232]	; (8009758 <HAL_ETH_MspInit+0x188>)
 800966e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009672:	4a39      	ldr	r2, [pc, #228]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009674:	f043 0301 	orr.w	r3, r3, #1
 8009678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800967c:	4b36      	ldr	r3, [pc, #216]	; (8009758 <HAL_ETH_MspInit+0x188>)
 800967e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800968a:	4b33      	ldr	r3, [pc, #204]	; (8009758 <HAL_ETH_MspInit+0x188>)
 800968c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009690:	4a31      	ldr	r2, [pc, #196]	; (8009758 <HAL_ETH_MspInit+0x188>)
 8009692:	f043 0302 	orr.w	r3, r3, #2
 8009696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <HAL_ETH_MspInit+0x188>)
 800969c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80096a8:	4b2b      	ldr	r3, [pc, #172]	; (8009758 <HAL_ETH_MspInit+0x188>)
 80096aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096ae:	4a2a      	ldr	r2, [pc, #168]	; (8009758 <HAL_ETH_MspInit+0x188>)
 80096b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096b8:	4b27      	ldr	r3, [pc, #156]	; (8009758 <HAL_ETH_MspInit+0x188>)
 80096ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	60bb      	str	r3, [r7, #8]
 80096c4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80096c6:	2332      	movs	r3, #50	; 0x32
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ca:	2302      	movs	r3, #2
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096d2:	2300      	movs	r3, #0
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096d6:	230b      	movs	r3, #11
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096de:	4619      	mov	r1, r3
 80096e0:	481e      	ldr	r0, [pc, #120]	; (800975c <HAL_ETH_MspInit+0x18c>)
 80096e2:	f7f9 fe69 	bl	80033b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80096e6:	2386      	movs	r3, #134	; 0x86
 80096e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ea:	2302      	movs	r3, #2
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096f2:	2300      	movs	r3, #0
 80096f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096f6:	230b      	movs	r3, #11
 80096f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096fe:	4619      	mov	r1, r3
 8009700:	4817      	ldr	r0, [pc, #92]	; (8009760 <HAL_ETH_MspInit+0x190>)
 8009702:	f7f9 fe59 	bl	80033b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800970a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800970c:	2302      	movs	r3, #2
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009710:	2300      	movs	r3, #0
 8009712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009714:	2300      	movs	r3, #0
 8009716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009718:	230b      	movs	r3, #11
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800971c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009720:	4619      	mov	r1, r3
 8009722:	4810      	ldr	r0, [pc, #64]	; (8009764 <HAL_ETH_MspInit+0x194>)
 8009724:	f7f9 fe48 	bl	80033b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009728:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972e:	2302      	movs	r3, #2
 8009730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009732:	2300      	movs	r3, #0
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009736:	2300      	movs	r3, #0
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800973a:	230b      	movs	r3, #11
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800973e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009742:	4619      	mov	r1, r3
 8009744:	4808      	ldr	r0, [pc, #32]	; (8009768 <HAL_ETH_MspInit+0x198>)
 8009746:	f7f9 fe37 	bl	80033b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800974a:	bf00      	nop
 800974c:	3738      	adds	r7, #56	; 0x38
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40028000 	.word	0x40028000
 8009758:	58024400 	.word	0x58024400
 800975c:	58020800 	.word	0x58020800
 8009760:	58020000 	.word	0x58020000
 8009764:	58020400 	.word	0x58020400
 8009768:	58021800 	.word	0x58021800

0800976c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800976c:	b5b0      	push	{r4, r5, r7, lr}
 800976e:	b0ac      	sub	sp, #176	; 0xb0
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009780:	4b90      	ldr	r3, [pc, #576]	; (80099c4 <low_level_init+0x258>)
 8009782:	4a91      	ldr	r2, [pc, #580]	; (80099c8 <low_level_init+0x25c>)
 8009784:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009786:	2300      	movs	r3, #0
 8009788:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800978c:	2380      	movs	r3, #128	; 0x80
 800978e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009792:	23e1      	movs	r3, #225	; 0xe1
 8009794:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009798:	2300      	movs	r3, #0
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800979e:	2300      	movs	r3, #0
 80097a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80097aa:	4a86      	ldr	r2, [pc, #536]	; (80099c4 <low_level_init+0x258>)
 80097ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80097b2:	4b84      	ldr	r3, [pc, #528]	; (80099c4 <low_level_init+0x258>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80097b8:	4b82      	ldr	r3, [pc, #520]	; (80099c4 <low_level_init+0x258>)
 80097ba:	4a84      	ldr	r2, [pc, #528]	; (80099cc <low_level_init+0x260>)
 80097bc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80097be:	4b81      	ldr	r3, [pc, #516]	; (80099c4 <low_level_init+0x258>)
 80097c0:	4a83      	ldr	r2, [pc, #524]	; (80099d0 <low_level_init+0x264>)
 80097c2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80097c4:	4b7f      	ldr	r3, [pc, #508]	; (80099c4 <low_level_init+0x258>)
 80097c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80097ca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80097cc:	487d      	ldr	r0, [pc, #500]	; (80099c4 <low_level_init+0x258>)
 80097ce:	f7f8 f915 	bl	80019fc <HAL_ETH_Init>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80097d8:	2234      	movs	r2, #52	; 0x34
 80097da:	2100      	movs	r1, #0
 80097dc:	487d      	ldr	r0, [pc, #500]	; (80099d4 <low_level_init+0x268>)
 80097de:	f00f faef 	bl	8018dc0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80097e2:	4b7c      	ldr	r3, [pc, #496]	; (80099d4 <low_level_init+0x268>)
 80097e4:	2221      	movs	r2, #33	; 0x21
 80097e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80097e8:	4b7a      	ldr	r3, [pc, #488]	; (80099d4 <low_level_init+0x268>)
 80097ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80097ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80097f0:	4b78      	ldr	r3, [pc, #480]	; (80099d4 <low_level_init+0x268>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80097f6:	4878      	ldr	r0, [pc, #480]	; (80099d8 <low_level_init+0x26c>)
 80097f8:	f005 ff62 	bl	800f6c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2206      	movs	r2, #6
 8009800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009804:	4b6f      	ldr	r3, [pc, #444]	; (80099c4 <low_level_init+0x258>)
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	781a      	ldrb	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009810:	4b6c      	ldr	r3, [pc, #432]	; (80099c4 <low_level_init+0x258>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	785a      	ldrb	r2, [r3, #1]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800981c:	4b69      	ldr	r3, [pc, #420]	; (80099c4 <low_level_init+0x258>)
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	789a      	ldrb	r2, [r3, #2]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009828:	4b66      	ldr	r3, [pc, #408]	; (80099c4 <low_level_init+0x258>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	78da      	ldrb	r2, [r3, #3]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009834:	4b63      	ldr	r3, [pc, #396]	; (80099c4 <low_level_init+0x258>)
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	791a      	ldrb	r2, [r3, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009840:	4b60      	ldr	r3, [pc, #384]	; (80099c4 <low_level_init+0x258>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	795a      	ldrb	r2, [r3, #5]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009852:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800985a:	f043 030a 	orr.w	r3, r3, #10
 800985e:	b2da      	uxtb	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009866:	2300      	movs	r3, #0
 8009868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800986c:	e012      	b.n	8009894 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800986e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009872:	4613      	mov	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4413      	add	r3, r2
 8009878:	025b      	lsls	r3, r3, #9
 800987a:	4a58      	ldr	r2, [pc, #352]	; (80099dc <low_level_init+0x270>)
 800987c:	441a      	add	r2, r3
 800987e:	2300      	movs	r3, #0
 8009880:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009884:	484f      	ldr	r0, [pc, #316]	; (80099c4 <low_level_init+0x258>)
 8009886:	f7f8 f993 	bl	8001bb0 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800988a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009898:	2b03      	cmp	r3, #3
 800989a:	d9e8      	bls.n	800986e <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800989c:	2300      	movs	r3, #0
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a0:	2300      	movs	r3, #0
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80098a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098a8:	2101      	movs	r1, #1
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fb68 	bl	8009f80 <osSemaphoreCreate>
 80098b0:	4602      	mov	r2, r0
 80098b2:	4b4b      	ldr	r3, [pc, #300]	; (80099e0 <low_level_init+0x274>)
 80098b4:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80098b6:	4b4b      	ldr	r3, [pc, #300]	; (80099e4 <low_level_init+0x278>)
 80098b8:	f107 040c 	add.w	r4, r7, #12
 80098bc:	461d      	mov	r5, r3
 80098be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80098ca:	f107 030c 	add.w	r3, r7, #12
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fa59 	bl	8009d88 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80098d6:	4944      	ldr	r1, [pc, #272]	; (80099e8 <low_level_init+0x27c>)
 80098d8:	4844      	ldr	r0, [pc, #272]	; (80099ec <low_level_init+0x280>)
 80098da:	f7f7 fd38 	bl	800134e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80098de:	4843      	ldr	r0, [pc, #268]	; (80099ec <low_level_init+0x280>)
 80098e0:	f7f7 fd67 	bl	80013b2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80098e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d164      	bne.n	80099b6 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80098ec:	483f      	ldr	r0, [pc, #252]	; (80099ec <low_level_init+0x280>)
 80098ee:	f7f7 fe08 	bl	8001502 <LAN8742_GetLinkState>
 80098f2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80098f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	dc06      	bgt.n	800990c <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f006 f99d 	bl	800fc3e <netif_set_link_down>
      netif_set_down(netif);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f006 f955 	bl	800fbb4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800990a:	e056      	b.n	80099ba <low_level_init+0x24e>
      switch (PHYLinkState)
 800990c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009910:	3b02      	subs	r3, #2
 8009912:	2b03      	cmp	r3, #3
 8009914:	d82a      	bhi.n	800996c <low_level_init+0x200>
 8009916:	a201      	add	r2, pc, #4	; (adr r2, 800991c <low_level_init+0x1b0>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	0800992d 	.word	0x0800992d
 8009920:	0800993f 	.word	0x0800993f
 8009924:	0800994f 	.word	0x0800994f
 8009928:	0800995f 	.word	0x0800995f
        duplex = ETH_FULLDUPLEX_MODE;
 800992c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800993c:	e01f      	b.n	800997e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800993e:	2300      	movs	r3, #0
 8009940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800994c:	e017      	b.n	800997e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800994e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009956:	2300      	movs	r3, #0
 8009958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800995c:	e00f      	b.n	800997e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800995e:	2300      	movs	r3, #0
 8009960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009964:	2300      	movs	r3, #0
 8009966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800996a:	e008      	b.n	800997e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800996c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009974:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800997c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800997e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009982:	4619      	mov	r1, r3
 8009984:	480f      	ldr	r0, [pc, #60]	; (80099c4 <low_level_init+0x258>)
 8009986:	f7f8 fd41 	bl	800240c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800998a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800998e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8009990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009994:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800999a:	4619      	mov	r1, r3
 800999c:	4809      	ldr	r0, [pc, #36]	; (80099c4 <low_level_init+0x258>)
 800999e:	f7f8 ff09 	bl	80027b4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80099a2:	4808      	ldr	r0, [pc, #32]	; (80099c4 <low_level_init+0x258>)
 80099a4:	f7f8 f945 	bl	8001c32 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f006 f8bf 	bl	800fb2c <netif_set_up>
    netif_set_link_up(netif);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f006 f922 	bl	800fbf8 <netif_set_link_up>
}
 80099b4:	e001      	b.n	80099ba <low_level_init+0x24e>
    Error_Handler();
 80099b6:	f7f7 fa3f 	bl	8000e38 <Error_Handler>
}
 80099ba:	bf00      	nop
 80099bc:	37b0      	adds	r7, #176	; 0xb0
 80099be:	46bd      	mov	sp, r7
 80099c0:	bdb0      	pop	{r4, r5, r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20004808 	.word	0x20004808
 80099c8:	40028000 	.word	0x40028000
 80099cc:	30040060 	.word	0x30040060
 80099d0:	30040000 	.word	0x30040000
 80099d4:	20004878 	.word	0x20004878
 80099d8:	0801c5c0 	.word	0x0801c5c0
 80099dc:	30040200 	.word	0x30040200
 80099e0:	2000030c 	.word	0x2000030c
 80099e4:	08019c20 	.word	0x08019c20
 80099e8:	20000010 	.word	0x20000010
 80099ec:	200047e8 	.word	0x200047e8

080099f0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b092      	sub	sp, #72	; 0x48
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	647b      	str	r3, [r7, #68]	; 0x44
 80099fe:	2300      	movs	r3, #0
 8009a00:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	2230      	movs	r2, #48	; 0x30
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f00f f9d5 	bl	8018dc0 <memset>
  
  for(q = p; q != NULL; q = q->next)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a1a:	e04f      	b.n	8009abc <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8009a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d902      	bls.n	8009a28 <low_level_output+0x38>
      return ERR_IF;
 8009a22:	f06f 030b 	mvn.w	r3, #11
 8009a26:	e05a      	b.n	8009ade <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2a:	6859      	ldr	r1, [r3, #4]
 8009a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a2e:	4613      	mov	r3, r2
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3b40      	subs	r3, #64	; 0x40
 8009a3e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a42:	895b      	ldrh	r3, [r3, #10]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a48:	4613      	mov	r3, r2
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a54:	4413      	add	r3, r2
 8009a56:	3b3c      	subs	r3, #60	; 0x3c
 8009a58:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	895b      	ldrh	r3, [r3, #10]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a62:	4413      	add	r3, r2
 8009a64:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 8009a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d012      	beq.n	8009a92 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a6e:	1e5a      	subs	r2, r3, #1
 8009a70:	f107 0008 	add.w	r0, r7, #8
 8009a74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a76:	460b      	mov	r3, r1
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	440b      	add	r3, r1
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	18c1      	adds	r1, r0, r3
 8009a80:	4613      	mov	r3, r2
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a8c:	4413      	add	r3, r2
 8009a8e:	3b38      	subs	r3, #56	; 0x38
 8009a90:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8009a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 8009a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3b38      	subs	r3, #56	; 0x38
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8009ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1ac      	bne.n	8009a1c <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 8009ac2:	4a09      	ldr	r2, [pc, #36]	; (8009ae8 <low_level_output+0xf8>)
 8009ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ac6:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009ac8:	4a07      	ldr	r2, [pc, #28]	; (8009ae8 <low_level_output+0xf8>)
 8009aca:	f107 0308 	add.w	r3, r7, #8
 8009ace:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009ad0:	2214      	movs	r2, #20
 8009ad2:	4905      	ldr	r1, [pc, #20]	; (8009ae8 <low_level_output+0xf8>)
 8009ad4:	4805      	ldr	r0, [pc, #20]	; (8009aec <low_level_output+0xfc>)
 8009ad6:	f7f8 f942 	bl	8001d5e <HAL_ETH_Transmit>
  
  return errval;
 8009ada:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3748      	adds	r7, #72	; 0x48
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20004878 	.word	0x20004878
 8009aec:	20004808 	.word	0x20004808

08009af0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08a      	sub	sp, #40	; 0x28
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	4619      	mov	r1, r3
 8009b06:	4817      	ldr	r0, [pc, #92]	; (8009b64 <low_level_input+0x74>)
 8009b08:	f7f8 fa93 	bl	8002032 <HAL_ETH_GetRxDataBuffer>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d122      	bne.n	8009b58 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009b12:	f107 0308 	add.w	r3, r7, #8
 8009b16:	4619      	mov	r1, r3
 8009b18:	4812      	ldr	r0, [pc, #72]	; (8009b64 <low_level_input+0x74>)
 8009b1a:	f7f8 fb28 	bl	800216e <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009b1e:	4811      	ldr	r0, [pc, #68]	; (8009b64 <low_level_input+0x74>)
 8009b20:	f7f8 fb58 	bl	80021d4 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fd26 	bl	800957c <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009b30:	480d      	ldr	r0, [pc, #52]	; (8009b68 <low_level_input+0x78>)
 8009b32:	f005 fe41 	bl	800f7b8 <memp_malloc_pool>
 8009b36:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	4a0c      	ldr	r2, [pc, #48]	; (8009b6c <low_level_input+0x7c>)
 8009b3c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	b299      	uxth	r1, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009b48:	9201      	str	r2, [sp, #4]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	2004      	movs	r0, #4
 8009b52:	f006 fa83 	bl	801005c <pbuf_alloced_custom>
 8009b56:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 8009b58:	69fb      	ldr	r3, [r7, #28]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20004808 	.word	0x20004808
 8009b68:	0801c5c0 	.word	0x0801c5c0
 8009b6c:	08009c2d 	.word	0x08009c2d

08009b70 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009b7c:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <ethernetif_input+0x58>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f04f 31ff 	mov.w	r1, #4294967295
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fa2f 	bl	8009fe8 <osSemaphoreWait>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f5      	bne.n	8009b7c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009b90:	480e      	ldr	r0, [pc, #56]	; (8009bcc <ethernetif_input+0x5c>)
 8009b92:	f00f f877 	bl	8018c84 <sys_mutex_lock>
        p = low_level_input( netif );
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff ffaa 	bl	8009af0 <low_level_input>
 8009b9c:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	68f9      	ldr	r1, [r7, #12]
 8009baa:	68b8      	ldr	r0, [r7, #8]
 8009bac:	4798      	blx	r3
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 8009bb4:	68b8      	ldr	r0, [r7, #8]
 8009bb6:	f006 fc2f 	bl	8010418 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009bba:	4804      	ldr	r0, [pc, #16]	; (8009bcc <ethernetif_input+0x5c>)
 8009bbc:	f00f f871 	bl	8018ca2 <sys_mutex_unlock>
      } while(p!=NULL);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e4      	bne.n	8009b90 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009bc6:	e7d9      	b.n	8009b7c <ethernetif_input+0xc>
 8009bc8:	2000030c 	.word	0x2000030c
 8009bcc:	200048f0 	.word	0x200048f0

08009bd0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <ethernetif_init+0x1c>
 8009bde:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <ethernetif_init+0x48>)
 8009be0:	f240 223b 	movw	r2, #571	; 0x23b
 8009be4:	490d      	ldr	r1, [pc, #52]	; (8009c1c <ethernetif_init+0x4c>)
 8009be6:	480e      	ldr	r0, [pc, #56]	; (8009c20 <ethernetif_init+0x50>)
 8009be8:	f00f f8f2 	bl	8018dd0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2273      	movs	r2, #115	; 0x73
 8009bf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2274      	movs	r2, #116	; 0x74
 8009bf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <ethernetif_init+0x54>)
 8009c00:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a08      	ldr	r2, [pc, #32]	; (8009c28 <ethernetif_init+0x58>)
 8009c06:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fdaf 	bl	800976c <low_level_init>

  return ERR_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	08019c3c 	.word	0x08019c3c
 8009c1c:	08019c58 	.word	0x08019c58
 8009c20:	08019c68 	.word	0x08019c68
 8009c24:	08016d81 	.word	0x08016d81
 8009c28:	080099f1 	.word	0x080099f1

08009c2c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	891b      	ldrh	r3, [r3, #8]
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f7ff fc9a 	bl	800957c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	4803      	ldr	r0, [pc, #12]	; (8009c58 <pbuf_free_custom+0x2c>)
 8009c4c:	f005 fe28 	bl	800f8a0 <memp_free_pool>
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	0801c5c0 	.word	0x0801c5c0

08009c5c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c60:	f7f7 fd26 	bl	80016b0 <HAL_GetTick>
 8009c64:	4603      	mov	r3, r0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009c70:	4802      	ldr	r0, [pc, #8]	; (8009c7c <ETH_PHY_IO_Init+0x10>)
 8009c72:	f7f8 fdb9 	bl	80027e8 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20004808 	.word	0x20004808

08009c80 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
  return 0;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	4807      	ldr	r0, [pc, #28]	; (8009cc0 <ETH_PHY_IO_ReadReg+0x30>)
 8009ca4:	f7f8 fb0a 	bl	80022bc <HAL_ETH_ReadPHYRegister>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009cae:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb2:	e000      	b.n	8009cb6 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20004808 	.word	0x20004808

08009cc4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	68f9      	ldr	r1, [r7, #12]
 8009cd6:	4807      	ldr	r0, [pc, #28]	; (8009cf4 <ETH_PHY_IO_WriteReg+0x30>)
 8009cd8:	f7f8 fb44 	bl	8002364 <HAL_ETH_WritePHYRegister>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	e000      	b.n	8009cea <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20004808 	.word	0x20004808

08009cf8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009cfc:	f7f7 fcd8 	bl	80016b0 <HAL_GetTick>
 8009d00:	4603      	mov	r3, r0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d18:	2b84      	cmp	r3, #132	; 0x84
 8009d1a:	d005      	beq.n	8009d28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	3303      	adds	r3, #3
 8009d26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d28:	68fb      	ldr	r3, [r7, #12]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d3c:	f3ef 8305 	mrs	r3, IPSR
 8009d40:	607b      	str	r3, [r7, #4]
  return(result);
 8009d42:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bf14      	ite	ne
 8009d48:	2301      	movne	r3, #1
 8009d4a:	2300      	moveq	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d5e:	f001 fd07 	bl	800b770 <vTaskStartScheduler>
  
  return osOK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009d6c:	f7ff ffe3 	bl	8009d36 <inHandlerMode>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009d76:	f001 fe13 	bl	800b9a0 <xTaskGetTickCountFromISR>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	e002      	b.n	8009d84 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009d7e:	f001 fdff 	bl	800b980 <xTaskGetTickCount>
 8009d82:	4603      	mov	r3, r0
  }
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8a:	b089      	sub	sp, #36	; 0x24
 8009d8c:	af04      	add	r7, sp, #16
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d020      	beq.n	8009ddc <osThreadCreate+0x54>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d01c      	beq.n	8009ddc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685c      	ldr	r4, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681d      	ldr	r5, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691e      	ldr	r6, [r3, #16]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff ffa6 	bl	8009d06 <makeFreeRtosPriority>
 8009dba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc4:	9202      	str	r2, [sp, #8]
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	9100      	str	r1, [sp, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f001 fb09 	bl	800b3e8 <xTaskCreateStatic>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	e01c      	b.n	8009e16 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685c      	ldr	r4, [r3, #4]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009de8:	b29e      	uxth	r6, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff ff88 	bl	8009d06 <makeFreeRtosPriority>
 8009df6:	4602      	mov	r2, r0
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	9200      	str	r2, [sp, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	4632      	mov	r2, r6
 8009e04:	4629      	mov	r1, r5
 8009e06:	4620      	mov	r0, r4
 8009e08:	f001 fb48 	bl	800b49c <xTaskCreate>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d001      	beq.n	8009e16 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e000      	b.n	8009e18 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e16:	68fb      	ldr	r3, [r7, #12]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <osDelay+0x16>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	e000      	b.n	8009e38 <osDelay+0x18>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 fc65 	bl	800b708 <vTaskDelay>
  
  return osOK;
 8009e3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d007      	beq.n	8009e68 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	2001      	movs	r0, #1
 8009e60:	f000 fc7f 	bl	800a762 <xQueueCreateMutexStatic>
 8009e64:	4603      	mov	r3, r0
 8009e66:	e003      	b.n	8009e70 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009e68:	2001      	movs	r0, #1
 8009e6a:	f000 fc62 	bl	800a732 <xQueueCreateMutex>
 8009e6e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009e82:	2300      	movs	r3, #0
 8009e84:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <osMutexWait+0x18>
    return osErrorParameter;
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	e03a      	b.n	8009f06 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d103      	bne.n	8009ea4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	e009      	b.n	8009eb8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <osMutexWait+0x40>
      ticks = 1;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009eb8:	f7ff ff3d 	bl	8009d36 <inHandlerMode>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d017      	beq.n	8009ef2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ec2:	f107 0308 	add.w	r3, r7, #8
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 f860 	bl	800af90 <xQueueReceiveFromISR>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d001      	beq.n	8009eda <osMutexWait+0x62>
      return osErrorOS;
 8009ed6:	23ff      	movs	r3, #255	; 0xff
 8009ed8:	e015      	b.n	8009f06 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <osMutexWait+0x8c>
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <osMutexWait+0x98>)
 8009ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	e008      	b.n	8009f04 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 ff43 	bl	800ad80 <xQueueSemaphoreTake>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d001      	beq.n	8009f04 <osMutexWait+0x8c>
    return osErrorOS;
 8009f00:	23ff      	movs	r3, #255	; 0xff
 8009f02:	e000      	b.n	8009f06 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	e000ed04 	.word	0xe000ed04

08009f14 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009f24:	f7ff ff07 	bl	8009d36 <inHandlerMode>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d016      	beq.n	8009f5c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fdbd 	bl	800aab4 <xQueueGiveFromISR>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d001      	beq.n	8009f44 <osMutexRelease+0x30>
      return osErrorOS;
 8009f40:	23ff      	movs	r3, #255	; 0xff
 8009f42:	e017      	b.n	8009f74 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d013      	beq.n	8009f72 <osMutexRelease+0x5e>
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <osMutexRelease+0x68>)
 8009f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	e00a      	b.n	8009f72 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2100      	movs	r1, #0
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fc18 	bl	800a798 <xQueueGenericSend>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d001      	beq.n	8009f72 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009f6e:	23ff      	movs	r3, #255	; 0xff
 8009f70:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af02      	add	r7, sp, #8
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d010      	beq.n	8009fb4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d10b      	bne.n	8009fb0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f000 fad8 	bl	800a55c <xQueueGenericCreateStatic>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e016      	b.n	8009fde <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e014      	b.n	8009fde <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d110      	bne.n	8009fdc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009fba:	2203      	movs	r2, #3
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	f000 fb3f 	bl	800a642 <xQueueGenericCreate>
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <osSemaphoreCreate+0x58>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fbe0 	bl	800a798 <xQueueGenericSend>
      return sema;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	e000      	b.n	8009fde <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009fdc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009ffc:	2380      	movs	r3, #128	; 0x80
 8009ffe:	e03a      	b.n	800a076 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00a:	d103      	bne.n	800a014 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	e009      	b.n	800a028 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d006      	beq.n	800a028 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <osSemaphoreWait+0x40>
      ticks = 1;
 800a024:	2301      	movs	r3, #1
 800a026:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a028:	f7ff fe85 	bl	8009d36 <inHandlerMode>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d017      	beq.n	800a062 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a032:	f107 0308 	add.w	r3, r7, #8
 800a036:	461a      	mov	r2, r3
 800a038:	2100      	movs	r1, #0
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 ffa8 	bl	800af90 <xQueueReceiveFromISR>
 800a040:	4603      	mov	r3, r0
 800a042:	2b01      	cmp	r3, #1
 800a044:	d001      	beq.n	800a04a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a046:	23ff      	movs	r3, #255	; 0xff
 800a048:	e015      	b.n	800a076 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d011      	beq.n	800a074 <osSemaphoreWait+0x8c>
 800a050:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <osSemaphoreWait+0x98>)
 800a052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	e008      	b.n	800a074 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fe8b 	bl	800ad80 <xQueueSemaphoreTake>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d001      	beq.n	800a074 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a070:	23ff      	movs	r3, #255	; 0xff
 800a072:	e000      	b.n	800a076 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a090:	2300      	movs	r3, #0
 800a092:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a094:	f7ff fe4f 	bl	8009d36 <inHandlerMode>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d016      	beq.n	800a0cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fd05 	bl	800aab4 <xQueueGiveFromISR>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d001      	beq.n	800a0b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a0b0:	23ff      	movs	r3, #255	; 0xff
 800a0b2:	e017      	b.n	800a0e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d013      	beq.n	800a0e2 <osSemaphoreRelease+0x5e>
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <osSemaphoreRelease+0x68>)
 800a0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	e00a      	b.n	800a0e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fb60 	bl	800a798 <xQueueGenericSend>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d001      	beq.n	800a0e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a0de:	23ff      	movs	r3, #255	; 0xff
 800a0e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	e000ed04 	.word	0xe000ed04

0800a0f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a0f8:	f7ff fe1d 	bl	8009d36 <inHandlerMode>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a102:	2382      	movs	r3, #130	; 0x82
 800a104:	e003      	b.n	800a10e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fff9 	bl	800b0fe <vQueueDelete>

  return osOK; 
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a116:	b590      	push	{r4, r7, lr}
 800a118:	b085      	sub	sp, #20
 800a11a:	af02      	add	r7, sp, #8
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d012      	beq.n	800a14e <osMessageCreate+0x38>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00e      	beq.n	800a14e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6859      	ldr	r1, [r3, #4]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68dc      	ldr	r4, [r3, #12]
 800a140:	2300      	movs	r3, #0
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	4623      	mov	r3, r4
 800a146:	f000 fa09 	bl	800a55c <xQueueGenericCreateStatic>
 800a14a:	4603      	mov	r3, r0
 800a14c:	e008      	b.n	800a160 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	4619      	mov	r1, r3
 800a15a:	f000 fa72 	bl	800a642 <xQueueGenericCreate>
 800a15e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	bd90      	pop	{r4, r7, pc}

0800a168 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <osMessagePut+0x1e>
    ticks = 1;
 800a182:	2301      	movs	r3, #1
 800a184:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a186:	f7ff fdd6 	bl	8009d36 <inHandlerMode>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d018      	beq.n	800a1c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a190:	f107 0210 	add.w	r2, r7, #16
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	2300      	movs	r3, #0
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 fbf6 	bl	800a98c <xQueueGenericSendFromISR>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d001      	beq.n	800a1aa <osMessagePut+0x42>
      return osErrorOS;
 800a1a6:	23ff      	movs	r3, #255	; 0xff
 800a1a8:	e018      	b.n	800a1dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d014      	beq.n	800a1da <osMessagePut+0x72>
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <osMessagePut+0x7c>)
 800a1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	e00b      	b.n	800a1da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a1c2:	f107 0108 	add.w	r1, r7, #8
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 fae4 	bl	800a798 <xQueueGenericSend>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d001      	beq.n	800a1da <osMessagePut+0x72>
      return osErrorOS;
 800a1d6:	23ff      	movs	r3, #255	; 0xff
 800a1d8:	e000      	b.n	800a1dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b08b      	sub	sp, #44	; 0x2c
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a202:	2380      	movs	r3, #128	; 0x80
 800a204:	617b      	str	r3, [r7, #20]
    return event;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	461c      	mov	r4, r3
 800a20a:	f107 0314 	add.w	r3, r7, #20
 800a20e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a216:	e054      	b.n	800a2c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a218:	2300      	movs	r3, #0
 800a21a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d103      	bne.n	800a230 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a228:	f04f 33ff 	mov.w	r3, #4294967295
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
 800a22e:	e009      	b.n	800a244 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d006      	beq.n	800a244 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <osMessageGet+0x5c>
      ticks = 1;
 800a240:	2301      	movs	r3, #1
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a244:	f7ff fd77 	bl	8009d36 <inHandlerMode>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01c      	beq.n	800a288 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a24e:	f107 0220 	add.w	r2, r7, #32
 800a252:	f107 0314 	add.w	r3, r7, #20
 800a256:	3304      	adds	r3, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	68b8      	ldr	r0, [r7, #8]
 800a25c:	f000 fe98 	bl	800af90 <xQueueReceiveFromISR>
 800a260:	4603      	mov	r3, r0
 800a262:	2b01      	cmp	r3, #1
 800a264:	d102      	bne.n	800a26c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a266:	2310      	movs	r3, #16
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	e001      	b.n	800a270 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01d      	beq.n	800a2b2 <osMessageGet+0xca>
 800a276:	4b15      	ldr	r3, [pc, #84]	; (800a2cc <osMessageGet+0xe4>)
 800a278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	e014      	b.n	800a2b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a288:	f107 0314 	add.w	r3, r7, #20
 800a28c:	3304      	adds	r3, #4
 800a28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a290:	4619      	mov	r1, r3
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	f000 fc98 	bl	800abc8 <xQueueReceive>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d102      	bne.n	800a2a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a29e:	2310      	movs	r3, #16
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	e006      	b.n	800a2b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <osMessageGet+0xc6>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e000      	b.n	800a2b0 <osMessageGet+0xc8>
 800a2ae:	2340      	movs	r3, #64	; 0x40
 800a2b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	461c      	mov	r4, r3
 800a2b6:	f107 0314 	add.w	r3, r7, #20
 800a2ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	372c      	adds	r7, #44	; 0x2c
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd90      	pop	{r4, r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a2d8:	f7ff fd2d 	bl	8009d36 <inHandlerMode>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 feee 	bl	800b0c4 <uxQueueMessagesWaitingFromISR>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	e003      	b.n	800a2f4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fecc 	bl	800b08a <uxQueueMessagesWaiting>
 800a2f2:	4603      	mov	r3, r0
  }
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a304:	f7ff fd17 	bl	8009d36 <inHandlerMode>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <osMessageDelete+0x16>
    return osErrorISR;
 800a30e:	2382      	movs	r3, #130	; 0x82
 800a310:	e003      	b.n	800a31a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fef3 	bl	800b0fe <vQueueDelete>

  return osOK; 
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f103 0208 	add.w	r2, r3, #8
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f103 0208 	add.w	r2, r3, #8
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f103 0208 	add.w	r2, r3, #8
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	601a      	str	r2, [r3, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3da:	d103      	bne.n	800a3e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	e00c      	b.n	800a3fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	e002      	b.n	800a3f2 <vListInsert+0x2e>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d2f6      	bcs.n	800a3ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
}
 800a42a:	bf00      	nop
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a436:	b480      	push	{r7}
 800a438:	b085      	sub	sp, #20
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6892      	ldr	r2, [r2, #8]
 800a44c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	6852      	ldr	r2, [r2, #4]
 800a456:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d103      	bne.n	800a46a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	1e5a      	subs	r2, r3, #1
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	e7fe      	b.n	800a4b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a4b4:	f002 f8ca 	bl	800c64c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	68f9      	ldr	r1, [r7, #12]
 800a4c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4c4:	fb01 f303 	mul.w	r3, r1, r3
 800a4c8:	441a      	add	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	68f9      	ldr	r1, [r7, #12]
 800a4e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4ea:	fb01 f303 	mul.w	r3, r1, r3
 800a4ee:	441a      	add	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	22ff      	movs	r2, #255	; 0xff
 800a4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	22ff      	movs	r2, #255	; 0xff
 800a500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d114      	bne.n	800a534 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d01a      	beq.n	800a548 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3310      	adds	r3, #16
 800a516:	4618      	mov	r0, r3
 800a518:	f001 fb8a 	bl	800bc30 <xTaskRemoveFromEventList>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d012      	beq.n	800a548 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <xQueueGenericReset+0xcc>)
 800a524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	e009      	b.n	800a548 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3310      	adds	r3, #16
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff fef2 	bl	800a322 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff feed 	bl	800a322 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a548:	f002 f8ae 	bl	800c6a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a54c:	2301      	movs	r3, #1
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08e      	sub	sp, #56	; 0x38
 800a560:	af02      	add	r7, sp, #8
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d109      	bne.n	800a584 <xQueueGenericCreateStatic+0x28>
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	62bb      	str	r3, [r7, #40]	; 0x28
 800a582:	e7fe      	b.n	800a582 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d109      	bne.n	800a59e <xQueueGenericCreateStatic+0x42>
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
 800a59c:	e7fe      	b.n	800a59c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <xQueueGenericCreateStatic+0x4e>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <xQueueGenericCreateStatic+0x52>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e000      	b.n	800a5b0 <xQueueGenericCreateStatic+0x54>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <xQueueGenericCreateStatic+0x6c>
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	623b      	str	r3, [r7, #32]
 800a5c6:	e7fe      	b.n	800a5c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d102      	bne.n	800a5d4 <xQueueGenericCreateStatic+0x78>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <xQueueGenericCreateStatic+0x7c>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e000      	b.n	800a5da <xQueueGenericCreateStatic+0x7e>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d109      	bne.n	800a5f2 <xQueueGenericCreateStatic+0x96>
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	61fb      	str	r3, [r7, #28]
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5f2:	2348      	movs	r3, #72	; 0x48
 800a5f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b48      	cmp	r3, #72	; 0x48
 800a5fa:	d009      	beq.n	800a610 <xQueueGenericCreateStatic+0xb4>
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	61bb      	str	r3, [r7, #24]
 800a60e:	e7fe      	b.n	800a60e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a610:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00d      	beq.n	800a638 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a624:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f844 	bl	800a6c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3730      	adds	r7, #48	; 0x30
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a642:	b580      	push	{r7, lr}
 800a644:	b08a      	sub	sp, #40	; 0x28
 800a646:	af02      	add	r7, sp, #8
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	4613      	mov	r3, r2
 800a64e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d109      	bne.n	800a66a <xQueueGenericCreate+0x28>
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	e7fe      	b.n	800a668 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a670:	2300      	movs	r3, #0
 800a672:	61fb      	str	r3, [r7, #28]
 800a674:	e004      	b.n	800a680 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	fb02 f303 	mul.w	r3, r2, r3
 800a67e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	3348      	adds	r3, #72	; 0x48
 800a684:	4618      	mov	r0, r3
 800a686:	f002 f8fb 	bl	800c880 <pvPortMalloc>
 800a68a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d011      	beq.n	800a6b6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	3348      	adds	r3, #72	; 0x48
 800a69a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6a4:	79fa      	ldrb	r2, [r7, #7]
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f805 	bl	800a6c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	69b8      	ldr	r0, [r7, #24]
 800a6f2:	f7ff fecb 	bl	800a48c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00e      	beq.n	800a72a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a71e:	2300      	movs	r3, #0
 800a720:	2200      	movs	r2, #0
 800a722:	2100      	movs	r1, #0
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f837 	bl	800a798 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	4603      	mov	r3, r0
 800a73a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a73c:	2301      	movs	r3, #1
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	2300      	movs	r3, #0
 800a742:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	461a      	mov	r2, r3
 800a748:	6939      	ldr	r1, [r7, #16]
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f7ff ff79 	bl	800a642 <xQueueGenericCreate>
 800a750:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff ffd3 	bl	800a6fe <prvInitialiseMutex>

		return xNewQueue;
 800a758:	68fb      	ldr	r3, [r7, #12]
	}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a762:	b580      	push	{r7, lr}
 800a764:	b088      	sub	sp, #32
 800a766:	af02      	add	r7, sp, #8
 800a768:	4603      	mov	r3, r0
 800a76a:	6039      	str	r1, [r7, #0]
 800a76c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a76e:	2301      	movs	r3, #1
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	2300      	movs	r3, #0
 800a774:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a776:	79fb      	ldrb	r3, [r7, #7]
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	6939      	ldr	r1, [r7, #16]
 800a780:	6978      	ldr	r0, [r7, #20]
 800a782:	f7ff feeb 	bl	800a55c <xQueueGenericCreateStatic>
 800a786:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7ff ffb8 	bl	800a6fe <prvInitialiseMutex>

		return xNewQueue;
 800a78e:	68fb      	ldr	r3, [r7, #12]
	}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	; 0x38
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d109      	bne.n	800a7c8 <xQueueGenericSend+0x30>
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7c6:	e7fe      	b.n	800a7c6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d103      	bne.n	800a7d6 <xQueueGenericSend+0x3e>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <xQueueGenericSend+0x42>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <xQueueGenericSend+0x44>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d109      	bne.n	800a7f4 <xQueueGenericSend+0x5c>
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f2:	e7fe      	b.n	800a7f2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d103      	bne.n	800a802 <xQueueGenericSend+0x6a>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <xQueueGenericSend+0x6e>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <xQueueGenericSend+0x70>
 800a806:	2300      	movs	r3, #0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d109      	bne.n	800a820 <xQueueGenericSend+0x88>
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	623b      	str	r3, [r7, #32]
 800a81e:	e7fe      	b.n	800a81e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a820:	f001 fbbc 	bl	800bf9c <xTaskGetSchedulerState>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <xQueueGenericSend+0x98>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <xQueueGenericSend+0x9c>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <xQueueGenericSend+0x9e>
 800a834:	2300      	movs	r3, #0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d109      	bne.n	800a84e <xQueueGenericSend+0xb6>
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e7fe      	b.n	800a84c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a84e:	f001 fefd 	bl	800c64c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <xQueueGenericSend+0xcc>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d129      	bne.n	800a8b8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86a:	f000 fc82 	bl	800b172 <prvCopyDataToQueue>
 800a86e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	2b00      	cmp	r3, #0
 800a876:	d010      	beq.n	800a89a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	3324      	adds	r3, #36	; 0x24
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 f9d7 	bl	800bc30 <xTaskRemoveFromEventList>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d013      	beq.n	800a8b0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a888:	4b3f      	ldr	r3, [pc, #252]	; (800a988 <xQueueGenericSend+0x1f0>)
 800a88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	e00a      	b.n	800a8b0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d007      	beq.n	800a8b0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8a0:	4b39      	ldr	r3, [pc, #228]	; (800a988 <xQueueGenericSend+0x1f0>)
 800a8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a6:	601a      	str	r2, [r3, #0]
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8b0:	f001 fefa 	bl	800c6a8 <vPortExitCritical>
				return pdPASS;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e063      	b.n	800a980 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8be:	f001 fef3 	bl	800c6a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e05c      	b.n	800a980 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8cc:	f107 0314 	add.w	r3, r7, #20
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 fa0f 	bl	800bcf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8da:	f001 fee5 	bl	800c6a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8de:	f000 ffa5 	bl	800b82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8e2:	f001 feb3 	bl	800c64c <vPortEnterCritical>
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ec:	b25b      	sxtb	r3, r3
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d103      	bne.n	800a8fc <xQueueGenericSend+0x164>
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a902:	b25b      	sxtb	r3, r3
 800a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a908:	d103      	bne.n	800a912 <xQueueGenericSend+0x17a>
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a912:	f001 fec9 	bl	800c6a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a916:	1d3a      	adds	r2, r7, #4
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 f9fe 	bl	800bd20 <xTaskCheckForTimeOut>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d124      	bne.n	800a974 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a92a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a92c:	f000 fd19 	bl	800b362 <prvIsQueueFull>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d018      	beq.n	800a968 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	3310      	adds	r3, #16
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4611      	mov	r1, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 f952 	bl	800bbe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a946:	f000 fca4 	bl	800b292 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a94a:	f000 ff7d 	bl	800b848 <xTaskResumeAll>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	f47f af7c 	bne.w	800a84e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <xQueueGenericSend+0x1f0>)
 800a958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	e772      	b.n	800a84e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a96a:	f000 fc92 	bl	800b292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a96e:	f000 ff6b 	bl	800b848 <xTaskResumeAll>
 800a972:	e76c      	b.n	800a84e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a976:	f000 fc8c 	bl	800b292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a97a:	f000 ff65 	bl	800b848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a97e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a980:	4618      	mov	r0, r3
 800a982:	3738      	adds	r7, #56	; 0x38
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d109      	bne.n	800a9b8 <xQueueGenericSendFromISR+0x2c>
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9b6:	e7fe      	b.n	800a9b6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d103      	bne.n	800a9c6 <xQueueGenericSendFromISR+0x3a>
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <xQueueGenericSendFromISR+0x3e>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <xQueueGenericSendFromISR+0x40>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <xQueueGenericSendFromISR+0x58>
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	623b      	str	r3, [r7, #32]
 800a9e2:	e7fe      	b.n	800a9e2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d103      	bne.n	800a9f2 <xQueueGenericSendFromISR+0x66>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d101      	bne.n	800a9f6 <xQueueGenericSendFromISR+0x6a>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <xQueueGenericSendFromISR+0x6c>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <xQueueGenericSendFromISR+0x84>
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	61fb      	str	r3, [r7, #28]
 800aa0e:	e7fe      	b.n	800aa0e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa10:	f001 fef8 	bl	800c804 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa14:	f3ef 8211 	mrs	r2, BASEPRI
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	61ba      	str	r2, [r7, #24]
 800aa2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d302      	bcc.n	800aa42 <xQueueGenericSendFromISR+0xb6>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d12c      	bne.n	800aa9c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa52:	f000 fb8e 	bl	800b172 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa56:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d112      	bne.n	800aa86 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d016      	beq.n	800aa96 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	3324      	adds	r3, #36	; 0x24
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 f8df 	bl	800bc30 <xTaskRemoveFromEventList>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	e007      	b.n	800aa96 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	b25a      	sxtb	r2, r3
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa96:	2301      	movs	r3, #1
 800aa98:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa9a:	e001      	b.n	800aaa0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3738      	adds	r7, #56	; 0x38
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08e      	sub	sp, #56	; 0x38
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d109      	bne.n	800aadc <xQueueGiveFromISR+0x28>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	623b      	str	r3, [r7, #32]
 800aada:	e7fe      	b.n	800aada <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d009      	beq.n	800aaf8 <xQueueGiveFromISR+0x44>
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	e7fe      	b.n	800aaf6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d103      	bne.n	800ab08 <xQueueGiveFromISR+0x54>
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <xQueueGiveFromISR+0x58>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e000      	b.n	800ab0e <xQueueGiveFromISR+0x5a>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <xQueueGiveFromISR+0x72>
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	61bb      	str	r3, [r7, #24]
 800ab24:	e7fe      	b.n	800ab24 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab26:	f001 fe6d 	bl	800c804 <vPortValidateInterruptPriority>
	__asm volatile
 800ab2a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	617a      	str	r2, [r7, #20]
 800ab40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ab42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d22b      	bcs.n	800abae <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab70:	d112      	bne.n	800ab98 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d016      	beq.n	800aba8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	3324      	adds	r3, #36	; 0x24
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 f856 	bl	800bc30 <xTaskRemoveFromEventList>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00e      	beq.n	800aba8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	e007      	b.n	800aba8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	b25a      	sxtb	r2, r3
 800aba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	637b      	str	r3, [r7, #52]	; 0x34
 800abac:	e001      	b.n	800abb2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	637b      	str	r3, [r7, #52]	; 0x34
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3738      	adds	r7, #56	; 0x38
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08c      	sub	sp, #48	; 0x30
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d109      	bne.n	800abf6 <xQueueReceive+0x2e>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	623b      	str	r3, [r7, #32]
 800abf4:	e7fe      	b.n	800abf4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <xQueueReceive+0x3c>
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <xQueueReceive+0x40>
 800ac04:	2301      	movs	r3, #1
 800ac06:	e000      	b.n	800ac0a <xQueueReceive+0x42>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d109      	bne.n	800ac22 <xQueueReceive+0x5a>
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	e7fe      	b.n	800ac20 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac22:	f001 f9bb 	bl	800bf9c <xTaskGetSchedulerState>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <xQueueReceive+0x6a>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <xQueueReceive+0x6e>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xQueueReceive+0x70>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d109      	bne.n	800ac50 <xQueueReceive+0x88>
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	61bb      	str	r3, [r7, #24]
 800ac4e:	e7fe      	b.n	800ac4e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac50:	f001 fcfc 	bl	800c64c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01f      	beq.n	800aca0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac60:	68b9      	ldr	r1, [r7, #8]
 800ac62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac64:	f000 faef 	bl	800b246 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	1e5a      	subs	r2, r3, #1
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00f      	beq.n	800ac98 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	3310      	adds	r3, #16
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 ffd7 	bl	800bc30 <xTaskRemoveFromEventList>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d007      	beq.n	800ac98 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac88:	4b3c      	ldr	r3, [pc, #240]	; (800ad7c <xQueueReceive+0x1b4>)
 800ac8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac98:	f001 fd06 	bl	800c6a8 <vPortExitCritical>
				return pdPASS;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e069      	b.n	800ad74 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d103      	bne.n	800acae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aca6:	f001 fcff 	bl	800c6a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acaa:	2300      	movs	r3, #0
 800acac:	e062      	b.n	800ad74 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d106      	bne.n	800acc2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acb4:	f107 0310 	add.w	r3, r7, #16
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 f81b 	bl	800bcf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acbe:	2301      	movs	r3, #1
 800acc0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acc2:	f001 fcf1 	bl	800c6a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acc6:	f000 fdb1 	bl	800b82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acca:	f001 fcbf 	bl	800c64c <vPortEnterCritical>
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd4:	b25b      	sxtb	r3, r3
 800acd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acda:	d103      	bne.n	800ace4 <xQueueReceive+0x11c>
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acea:	b25b      	sxtb	r3, r3
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf0:	d103      	bne.n	800acfa <xQueueReceive+0x132>
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acfa:	f001 fcd5 	bl	800c6a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acfe:	1d3a      	adds	r2, r7, #4
 800ad00:	f107 0310 	add.w	r3, r7, #16
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f001 f80a 	bl	800bd20 <xTaskCheckForTimeOut>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d123      	bne.n	800ad5a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad14:	f000 fb0f 	bl	800b336 <prvIsQueueEmpty>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d017      	beq.n	800ad4e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	3324      	adds	r3, #36	; 0x24
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 ff5e 	bl	800bbe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2e:	f000 fab0 	bl	800b292 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad32:	f000 fd89 	bl	800b848 <xTaskResumeAll>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d189      	bne.n	800ac50 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <xQueueReceive+0x1b4>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	e780      	b.n	800ac50 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad50:	f000 fa9f 	bl	800b292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad54:	f000 fd78 	bl	800b848 <xTaskResumeAll>
 800ad58:	e77a      	b.n	800ac50 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad5c:	f000 fa99 	bl	800b292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad60:	f000 fd72 	bl	800b848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad66:	f000 fae6 	bl	800b336 <prvIsQueueEmpty>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f43f af6f 	beq.w	800ac50 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3730      	adds	r7, #48	; 0x30
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	e000ed04 	.word	0xe000ed04

0800ad80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08e      	sub	sp, #56	; 0x38
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <xQueueSemaphoreTake+0x30>
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	623b      	str	r3, [r7, #32]
 800adae:	e7fe      	b.n	800adae <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d009      	beq.n	800adcc <xQueueSemaphoreTake+0x4c>
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	e7fe      	b.n	800adca <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adcc:	f001 f8e6 	bl	800bf9c <xTaskGetSchedulerState>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <xQueueSemaphoreTake+0x5c>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <xQueueSemaphoreTake+0x60>
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <xQueueSemaphoreTake+0x62>
 800ade0:	2300      	movs	r3, #0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <xQueueSemaphoreTake+0x7a>
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	61bb      	str	r3, [r7, #24]
 800adf8:	e7fe      	b.n	800adf8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adfa:	f001 fc27 	bl	800c64c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d024      	beq.n	800ae54 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d104      	bne.n	800ae24 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae1a:	f001 fa79 	bl	800c310 <pvTaskIncrementMutexHeldCount>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00f      	beq.n	800ae4c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	3310      	adds	r3, #16
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fefd 	bl	800bc30 <xTaskRemoveFromEventList>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae3c:	4b53      	ldr	r3, [pc, #332]	; (800af8c <xQueueSemaphoreTake+0x20c>)
 800ae3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae4c:	f001 fc2c 	bl	800c6a8 <vPortExitCritical>
				return pdPASS;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e096      	b.n	800af82 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d110      	bne.n	800ae7c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <xQueueSemaphoreTake+0xf4>
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e7fe      	b.n	800ae72 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae74:	f001 fc18 	bl	800c6a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e082      	b.n	800af82 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae82:	f107 030c 	add.w	r3, r7, #12
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 ff34 	bl	800bcf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae90:	f001 fc0a 	bl	800c6a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae94:	f000 fcca 	bl	800b82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae98:	f001 fbd8 	bl	800c64c <vPortEnterCritical>
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aea2:	b25b      	sxtb	r3, r3
 800aea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea8:	d103      	bne.n	800aeb2 <xQueueSemaphoreTake+0x132>
 800aeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb8:	b25b      	sxtb	r3, r3
 800aeba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebe:	d103      	bne.n	800aec8 <xQueueSemaphoreTake+0x148>
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aec8:	f001 fbee 	bl	800c6a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aecc:	463a      	mov	r2, r7
 800aece:	f107 030c 	add.w	r3, r7, #12
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 ff23 	bl	800bd20 <xTaskCheckForTimeOut>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d132      	bne.n	800af46 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aee2:	f000 fa28 	bl	800b336 <prvIsQueueEmpty>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d026      	beq.n	800af3a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d109      	bne.n	800af08 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800aef4:	f001 fbaa 	bl	800c64c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 f86b 	bl	800bfd8 <xTaskPriorityInherit>
 800af02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af04:	f001 fbd0 	bl	800c6a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	3324      	adds	r3, #36	; 0x24
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fe69 	bl	800bbe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af18:	f000 f9bb 	bl	800b292 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af1c:	f000 fc94 	bl	800b848 <xTaskResumeAll>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	f47f af69 	bne.w	800adfa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800af28:	4b18      	ldr	r3, [pc, #96]	; (800af8c <xQueueSemaphoreTake+0x20c>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	e75f      	b.n	800adfa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af3c:	f000 f9a9 	bl	800b292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af40:	f000 fc82 	bl	800b848 <xTaskResumeAll>
 800af44:	e759      	b.n	800adfa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af48:	f000 f9a3 	bl	800b292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af4c:	f000 fc7c 	bl	800b848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af52:	f000 f9f0 	bl	800b336 <prvIsQueueEmpty>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f43f af4e 	beq.w	800adfa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00d      	beq.n	800af80 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800af64:	f001 fb72 	bl	800c64c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af6a:	f000 f8ea 	bl	800b142 <prvGetDisinheritPriorityAfterTimeout>
 800af6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af76:	4618      	mov	r0, r3
 800af78:	f001 f932 	bl	800c1e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af7c:	f001 fb94 	bl	800c6a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af82:	4618      	mov	r0, r3
 800af84:	3738      	adds	r7, #56	; 0x38
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08e      	sub	sp, #56	; 0x38
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d109      	bne.n	800afba <xQueueReceiveFromISR+0x2a>
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	623b      	str	r3, [r7, #32]
 800afb8:	e7fe      	b.n	800afb8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d103      	bne.n	800afc8 <xQueueReceiveFromISR+0x38>
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <xQueueReceiveFromISR+0x3c>
 800afc8:	2301      	movs	r3, #1
 800afca:	e000      	b.n	800afce <xQueueReceiveFromISR+0x3e>
 800afcc:	2300      	movs	r3, #0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <xQueueReceiveFromISR+0x56>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e7fe      	b.n	800afe4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afe6:	f001 fc0d 	bl	800c804 <vPortValidateInterruptPriority>
	__asm volatile
 800afea:	f3ef 8211 	mrs	r2, BASEPRI
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	61ba      	str	r2, [r7, #24]
 800b000:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b002:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d02f      	beq.n	800b072 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b020:	f000 f911 	bl	800b246 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	1e5a      	subs	r2, r3, #1
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b02c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b034:	d112      	bne.n	800b05c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d016      	beq.n	800b06c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	3310      	adds	r3, #16
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fdf4 	bl	800bc30 <xTaskRemoveFromEventList>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00e      	beq.n	800b06c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	e007      	b.n	800b06c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b060:	3301      	adds	r3, #1
 800b062:	b2db      	uxtb	r3, r3
 800b064:	b25a      	sxtb	r2, r3
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b06c:	2301      	movs	r3, #1
 800b06e:	637b      	str	r3, [r7, #52]	; 0x34
 800b070:	e001      	b.n	800b076 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b072:	2300      	movs	r3, #0
 800b074:	637b      	str	r3, [r7, #52]	; 0x34
 800b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b078:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b082:	4618      	mov	r0, r3
 800b084:	3738      	adds	r7, #56	; 0x38
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	60bb      	str	r3, [r7, #8]
 800b0aa:	e7fe      	b.n	800b0aa <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800b0ac:	f001 face 	bl	800c64c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b0b6:	f001 faf7 	bl	800c6a8 <vPortExitCritical>

	return uxReturn;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d109      	bne.n	800b0ea <uxQueueMessagesWaitingFromISR+0x26>
 800b0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	e7fe      	b.n	800b0e8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b0f0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d109      	bne.n	800b124 <vQueueDelete+0x26>
 800b110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	60bb      	str	r3, [r7, #8]
 800b122:	e7fe      	b.n	800b122 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 f935 	bl	800b394 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b130:	2b00      	cmp	r3, #0
 800b132:	d102      	bne.n	800b13a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f001 fc65 	bl	800ca04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b13a:	bf00      	nop
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d006      	beq.n	800b160 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f1c3 0307 	rsb	r3, r3, #7
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e001      	b.n	800b164 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b164:	68fb      	ldr	r3, [r7, #12]
	}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b086      	sub	sp, #24
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b186:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10d      	bne.n	800b1ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d14d      	bne.n	800b234 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 ff9b 	bl	800c0d8 <xTaskPriorityDisinherit>
 800b1a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	609a      	str	r2, [r3, #8]
 800b1aa:	e043      	b.n	800b234 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d119      	bne.n	800b1e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6858      	ldr	r0, [r3, #4]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	f00d fdf4 	bl	8018daa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	441a      	add	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d32b      	bcc.n	800b234 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	605a      	str	r2, [r3, #4]
 800b1e4:	e026      	b.n	800b234 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68d8      	ldr	r0, [r3, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	68b9      	ldr	r1, [r7, #8]
 800b1f2:	f00d fdda 	bl	8018daa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fe:	425b      	negs	r3, r3
 800b200:	441a      	add	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d207      	bcs.n	800b222 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689a      	ldr	r2, [r3, #8]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	425b      	negs	r3, r3
 800b21c:	441a      	add	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d105      	bne.n	800b234 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3b01      	subs	r3, #1
 800b232:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b23c:	697b      	ldr	r3, [r7, #20]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	2b00      	cmp	r3, #0
 800b256:	d018      	beq.n	800b28a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b260:	441a      	add	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68da      	ldr	r2, [r3, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d303      	bcc.n	800b27a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68d9      	ldr	r1, [r3, #12]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	461a      	mov	r2, r3
 800b284:	6838      	ldr	r0, [r7, #0]
 800b286:	f00d fd90 	bl	8018daa <memcpy>
	}
}
 800b28a:	bf00      	nop
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b29a:	f001 f9d7 	bl	800c64c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2a6:	e011      	b.n	800b2cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d012      	beq.n	800b2d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3324      	adds	r3, #36	; 0x24
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fcbb 	bl	800bc30 <xTaskRemoveFromEventList>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2c0:	f000 fd8e 	bl	800bde0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dce9      	bgt.n	800b2a8 <prvUnlockQueue+0x16>
 800b2d4:	e000      	b.n	800b2d8 <prvUnlockQueue+0x46>
					break;
 800b2d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	22ff      	movs	r2, #255	; 0xff
 800b2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2e0:	f001 f9e2 	bl	800c6a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2e4:	f001 f9b2 	bl	800c64c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2f0:	e011      	b.n	800b316 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d012      	beq.n	800b320 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3310      	adds	r3, #16
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 fc96 	bl	800bc30 <xTaskRemoveFromEventList>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b30a:	f000 fd69 	bl	800bde0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
 800b310:	3b01      	subs	r3, #1
 800b312:	b2db      	uxtb	r3, r3
 800b314:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dce9      	bgt.n	800b2f2 <prvUnlockQueue+0x60>
 800b31e:	e000      	b.n	800b322 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b320:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	22ff      	movs	r2, #255	; 0xff
 800b326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b32a:	f001 f9bd 	bl	800c6a8 <vPortExitCritical>
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b33e:	f001 f985 	bl	800c64c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	d102      	bne.n	800b350 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b34a:	2301      	movs	r3, #1
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	e001      	b.n	800b354 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b350:	2300      	movs	r3, #0
 800b352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b354:	f001 f9a8 	bl	800c6a8 <vPortExitCritical>

	return xReturn;
 800b358:	68fb      	ldr	r3, [r7, #12]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b36a:	f001 f96f 	bl	800c64c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b376:	429a      	cmp	r2, r3
 800b378:	d102      	bne.n	800b380 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b37a:	2301      	movs	r3, #1
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	e001      	b.n	800b384 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b384:	f001 f990 	bl	800c6a8 <vPortExitCritical>

	return xReturn;
 800b388:	68fb      	ldr	r3, [r7, #12]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e016      	b.n	800b3d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b3a2:	4a10      	ldr	r2, [pc, #64]	; (800b3e4 <vQueueUnregisterQueue+0x50>)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d10b      	bne.n	800b3ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b3b2:	4a0c      	ldr	r2, [pc, #48]	; (800b3e4 <vQueueUnregisterQueue+0x50>)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b3bc:	4a09      	ldr	r2, [pc, #36]	; (800b3e4 <vQueueUnregisterQueue+0x50>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	00db      	lsls	r3, r3, #3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	605a      	str	r2, [r3, #4]
				break;
 800b3c8:	e005      	b.n	800b3d6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b07      	cmp	r3, #7
 800b3d4:	d9e5      	bls.n	800b3a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	200048ac 	.word	0x200048ac

0800b3e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08e      	sub	sp, #56	; 0x38
 800b3ec:	af04      	add	r7, sp, #16
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <xTaskCreateStatic+0x28>
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	623b      	str	r3, [r7, #32]
 800b40e:	e7fe      	b.n	800b40e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	2b00      	cmp	r3, #0
 800b414:	d109      	bne.n	800b42a <xTaskCreateStatic+0x42>
 800b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	e7fe      	b.n	800b428 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b42a:	2354      	movs	r3, #84	; 0x54
 800b42c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2b54      	cmp	r3, #84	; 0x54
 800b432:	d009      	beq.n	800b448 <xTaskCreateStatic+0x60>
 800b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	61bb      	str	r3, [r7, #24]
 800b446:	e7fe      	b.n	800b446 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b448:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01e      	beq.n	800b48e <xTaskCreateStatic+0xa6>
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01b      	beq.n	800b48e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b45e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	2202      	movs	r2, #2
 800b464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b468:	2300      	movs	r3, #0
 800b46a:	9303      	str	r3, [sp, #12]
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	9302      	str	r3, [sp, #8]
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f850 	bl	800b526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b488:	f000 f8d4 	bl	800b634 <prvAddNewTaskToReadyList>
 800b48c:	e001      	b.n	800b492 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b492:	697b      	ldr	r3, [r7, #20]
	}
 800b494:	4618      	mov	r0, r3
 800b496:	3728      	adds	r7, #40	; 0x28
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08c      	sub	sp, #48	; 0x30
 800b4a0:	af04      	add	r7, sp, #16
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b4ac:	88fb      	ldrh	r3, [r7, #6]
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f001 f9e5 	bl	800c880 <pvPortMalloc>
 800b4b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00e      	beq.n	800b4dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4be:	2054      	movs	r0, #84	; 0x54
 800b4c0:	f001 f9de 	bl	800c880 <pvPortMalloc>
 800b4c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	631a      	str	r2, [r3, #48]	; 0x30
 800b4d2:	e005      	b.n	800b4e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4d4:	6978      	ldr	r0, [r7, #20]
 800b4d6:	f001 fa95 	bl	800ca04 <vPortFree>
 800b4da:	e001      	b.n	800b4e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d017      	beq.n	800b516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9303      	str	r3, [sp, #12]
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	9302      	str	r3, [sp, #8]
 800b4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 f80e 	bl	800b526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b50a:	69f8      	ldr	r0, [r7, #28]
 800b50c:	f000 f892 	bl	800b634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b510:	2301      	movs	r3, #1
 800b512:	61bb      	str	r3, [r7, #24]
 800b514:	e002      	b.n	800b51c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b516:	f04f 33ff 	mov.w	r3, #4294967295
 800b51a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b51c:	69bb      	ldr	r3, [r7, #24]
	}
 800b51e:	4618      	mov	r0, r3
 800b520:	3720      	adds	r7, #32
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b088      	sub	sp, #32
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	60b9      	str	r1, [r7, #8]
 800b530:	607a      	str	r2, [r7, #4]
 800b532:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b538:	6879      	ldr	r1, [r7, #4]
 800b53a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b53e:	440b      	add	r3, r1
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	f023 0307 	bic.w	r3, r3, #7
 800b54c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	f003 0307 	and.w	r3, r3, #7
 800b554:	2b00      	cmp	r3, #0
 800b556:	d009      	beq.n	800b56c <prvInitialiseNewTask+0x46>
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	e7fe      	b.n	800b56a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d01f      	beq.n	800b5b2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b572:	2300      	movs	r3, #0
 800b574:	61fb      	str	r3, [r7, #28]
 800b576:	e012      	b.n	800b59e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	4413      	add	r3, r2
 800b57e:	7819      	ldrb	r1, [r3, #0]
 800b580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	4413      	add	r3, r2
 800b586:	3334      	adds	r3, #52	; 0x34
 800b588:	460a      	mov	r2, r1
 800b58a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	4413      	add	r3, r2
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d006      	beq.n	800b5a6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	3301      	adds	r3, #1
 800b59c:	61fb      	str	r3, [r7, #28]
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	2b0f      	cmp	r3, #15
 800b5a2:	d9e9      	bls.n	800b578 <prvInitialiseNewTask+0x52>
 800b5a4:	e000      	b.n	800b5a8 <prvInitialiseNewTask+0x82>
			{
				break;
 800b5a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5b0:	e003      	b.n	800b5ba <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	2b06      	cmp	r3, #6
 800b5be:	d901      	bls.n	800b5c4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5c0:	2306      	movs	r3, #6
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fec1 	bl	800a362 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	3318      	adds	r3, #24
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fe febc 	bl	800a362 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	f1c3 0207 	rsb	r2, r3, #7
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	2200      	movs	r2, #0
 800b604:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	68f9      	ldr	r1, [r7, #12]
 800b612:	69b8      	ldr	r0, [r7, #24]
 800b614:	f000 fef6 	bl	800c404 <pxPortInitialiseStack>
 800b618:	4602      	mov	r2, r0
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b62a:	bf00      	nop
 800b62c:	3720      	adds	r7, #32
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b63c:	f001 f806 	bl	800c64c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b640:	4b2a      	ldr	r3, [pc, #168]	; (800b6ec <prvAddNewTaskToReadyList+0xb8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3301      	adds	r3, #1
 800b646:	4a29      	ldr	r2, [pc, #164]	; (800b6ec <prvAddNewTaskToReadyList+0xb8>)
 800b648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b64a:	4b29      	ldr	r3, [pc, #164]	; (800b6f0 <prvAddNewTaskToReadyList+0xbc>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d109      	bne.n	800b666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b652:	4a27      	ldr	r2, [pc, #156]	; (800b6f0 <prvAddNewTaskToReadyList+0xbc>)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b658:	4b24      	ldr	r3, [pc, #144]	; (800b6ec <prvAddNewTaskToReadyList+0xb8>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d110      	bne.n	800b682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b660:	f000 fbe2 	bl	800be28 <prvInitialiseTaskLists>
 800b664:	e00d      	b.n	800b682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b666:	4b23      	ldr	r3, [pc, #140]	; (800b6f4 <prvAddNewTaskToReadyList+0xc0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d109      	bne.n	800b682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b66e:	4b20      	ldr	r3, [pc, #128]	; (800b6f0 <prvAddNewTaskToReadyList+0xbc>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b678:	429a      	cmp	r2, r3
 800b67a:	d802      	bhi.n	800b682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b67c:	4a1c      	ldr	r2, [pc, #112]	; (800b6f0 <prvAddNewTaskToReadyList+0xbc>)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b682:	4b1d      	ldr	r3, [pc, #116]	; (800b6f8 <prvAddNewTaskToReadyList+0xc4>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3301      	adds	r3, #1
 800b688:	4a1b      	ldr	r2, [pc, #108]	; (800b6f8 <prvAddNewTaskToReadyList+0xc4>)
 800b68a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	2201      	movs	r2, #1
 800b692:	409a      	lsls	r2, r3
 800b694:	4b19      	ldr	r3, [pc, #100]	; (800b6fc <prvAddNewTaskToReadyList+0xc8>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4313      	orrs	r3, r2
 800b69a:	4a18      	ldr	r2, [pc, #96]	; (800b6fc <prvAddNewTaskToReadyList+0xc8>)
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a15      	ldr	r2, [pc, #84]	; (800b700 <prvAddNewTaskToReadyList+0xcc>)
 800b6ac:	441a      	add	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f7fe fe61 	bl	800a37c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6ba:	f000 fff5 	bl	800c6a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6be:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <prvAddNewTaskToReadyList+0xc0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00e      	beq.n	800b6e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6c6:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <prvAddNewTaskToReadyList+0xbc>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d207      	bcs.n	800b6e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <prvAddNewTaskToReadyList+0xd0>)
 800b6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20000414 	.word	0x20000414
 800b6f0:	20000314 	.word	0x20000314
 800b6f4:	20000420 	.word	0x20000420
 800b6f8:	20000430 	.word	0x20000430
 800b6fc:	2000041c 	.word	0x2000041c
 800b700:	20000318 	.word	0x20000318
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d016      	beq.n	800b748 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b71a:	4b13      	ldr	r3, [pc, #76]	; (800b768 <vTaskDelay+0x60>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <vTaskDelay+0x2e>
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	60bb      	str	r3, [r7, #8]
 800b734:	e7fe      	b.n	800b734 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b736:	f000 f879 	bl	800b82c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fdfb 	bl	800c338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b742:	f000 f881 	bl	800b848 <xTaskResumeAll>
 800b746:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d107      	bne.n	800b75e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b74e:	4b07      	ldr	r3, [pc, #28]	; (800b76c <vTaskDelay+0x64>)
 800b750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	2000043c 	.word	0x2000043c
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	; 0x28
 800b774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b77e:	463a      	mov	r2, r7
 800b780:	1d39      	adds	r1, r7, #4
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4618      	mov	r0, r3
 800b788:	f7f4 ffea 	bl	8000760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	9202      	str	r2, [sp, #8]
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	2300      	movs	r3, #0
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	2300      	movs	r3, #0
 800b79c:	460a      	mov	r2, r1
 800b79e:	491d      	ldr	r1, [pc, #116]	; (800b814 <vTaskStartScheduler+0xa4>)
 800b7a0:	481d      	ldr	r0, [pc, #116]	; (800b818 <vTaskStartScheduler+0xa8>)
 800b7a2:	f7ff fe21 	bl	800b3e8 <xTaskCreateStatic>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <vTaskStartScheduler+0xac>)
 800b7aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7ac:	4b1b      	ldr	r3, [pc, #108]	; (800b81c <vTaskStartScheduler+0xac>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	e001      	b.n	800b7be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d115      	bne.n	800b7f0 <vTaskStartScheduler+0x80>
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7d6:	4b12      	ldr	r3, [pc, #72]	; (800b820 <vTaskStartScheduler+0xb0>)
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7de:	4b11      	ldr	r3, [pc, #68]	; (800b824 <vTaskStartScheduler+0xb4>)
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7e4:	4b10      	ldr	r3, [pc, #64]	; (800b828 <vTaskStartScheduler+0xb8>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7ea:	f000 fe91 	bl	800c510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7ee:	e00d      	b.n	800b80c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f6:	d109      	bne.n	800b80c <vTaskStartScheduler+0x9c>
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	e7fe      	b.n	800b80a <vTaskStartScheduler+0x9a>
}
 800b80c:	bf00      	nop
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	08019c90 	.word	0x08019c90
 800b818:	0800bdf9 	.word	0x0800bdf9
 800b81c:	20000438 	.word	0x20000438
 800b820:	20000434 	.word	0x20000434
 800b824:	20000420 	.word	0x20000420
 800b828:	20000418 	.word	0x20000418

0800b82c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <vTaskSuspendAll+0x18>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	4a03      	ldr	r2, [pc, #12]	; (800b844 <vTaskSuspendAll+0x18>)
 800b838:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b83a:	bf00      	nop
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	2000043c 	.word	0x2000043c

0800b848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b852:	2300      	movs	r3, #0
 800b854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b856:	4b41      	ldr	r3, [pc, #260]	; (800b95c <xTaskResumeAll+0x114>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d109      	bne.n	800b872 <xTaskResumeAll+0x2a>
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	e7fe      	b.n	800b870 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b872:	f000 feeb 	bl	800c64c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b876:	4b39      	ldr	r3, [pc, #228]	; (800b95c <xTaskResumeAll+0x114>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	4a37      	ldr	r2, [pc, #220]	; (800b95c <xTaskResumeAll+0x114>)
 800b87e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b880:	4b36      	ldr	r3, [pc, #216]	; (800b95c <xTaskResumeAll+0x114>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d161      	bne.n	800b94c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b888:	4b35      	ldr	r3, [pc, #212]	; (800b960 <xTaskResumeAll+0x118>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d05d      	beq.n	800b94c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b890:	e02e      	b.n	800b8f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b892:	4b34      	ldr	r3, [pc, #208]	; (800b964 <xTaskResumeAll+0x11c>)
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3318      	adds	r3, #24
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe fdc9 	bl	800a436 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fdc4 	bl	800a436 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	409a      	lsls	r2, r3
 800b8b6:	4b2c      	ldr	r3, [pc, #176]	; (800b968 <xTaskResumeAll+0x120>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	4a2a      	ldr	r2, [pc, #168]	; (800b968 <xTaskResumeAll+0x120>)
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4a27      	ldr	r2, [pc, #156]	; (800b96c <xTaskResumeAll+0x124>)
 800b8ce:	441a      	add	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fe fd50 	bl	800a37c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e0:	4b23      	ldr	r3, [pc, #140]	; (800b970 <xTaskResumeAll+0x128>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d302      	bcc.n	800b8f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b8ea:	4b22      	ldr	r3, [pc, #136]	; (800b974 <xTaskResumeAll+0x12c>)
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8f0:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <xTaskResumeAll+0x11c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1cc      	bne.n	800b892 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8fe:	f000 fb2d 	bl	800bf5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b902:	4b1d      	ldr	r3, [pc, #116]	; (800b978 <xTaskResumeAll+0x130>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d010      	beq.n	800b930 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b90e:	f000 f859 	bl	800b9c4 <xTaskIncrementTick>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b918:	4b16      	ldr	r3, [pc, #88]	; (800b974 <xTaskResumeAll+0x12c>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3b01      	subs	r3, #1
 800b922:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1f1      	bne.n	800b90e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b92a:	4b13      	ldr	r3, [pc, #76]	; (800b978 <xTaskResumeAll+0x130>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b930:	4b10      	ldr	r3, [pc, #64]	; (800b974 <xTaskResumeAll+0x12c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d009      	beq.n	800b94c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b938:	2301      	movs	r3, #1
 800b93a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <xTaskResumeAll+0x134>)
 800b93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b94c:	f000 feac 	bl	800c6a8 <vPortExitCritical>

	return xAlreadyYielded;
 800b950:	68bb      	ldr	r3, [r7, #8]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	2000043c 	.word	0x2000043c
 800b960:	20000414 	.word	0x20000414
 800b964:	200003d4 	.word	0x200003d4
 800b968:	2000041c 	.word	0x2000041c
 800b96c:	20000318 	.word	0x20000318
 800b970:	20000314 	.word	0x20000314
 800b974:	20000428 	.word	0x20000428
 800b978:	20000424 	.word	0x20000424
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b986:	4b05      	ldr	r3, [pc, #20]	; (800b99c <xTaskGetTickCount+0x1c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b98c:	687b      	ldr	r3, [r7, #4]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	20000418 	.word	0x20000418

0800b9a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9a6:	f000 ff2d 	bl	800c804 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b9ae:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <xTaskGetTickCountFromISR+0x20>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9b4:	683b      	ldr	r3, [r7, #0]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000418 	.word	0x20000418

0800b9c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ce:	4b4e      	ldr	r3, [pc, #312]	; (800bb08 <xTaskIncrementTick+0x144>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f040 8087 	bne.w	800bae6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9d8:	4b4c      	ldr	r3, [pc, #304]	; (800bb0c <xTaskIncrementTick+0x148>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9e0:	4a4a      	ldr	r2, [pc, #296]	; (800bb0c <xTaskIncrementTick+0x148>)
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d11f      	bne.n	800ba2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9ec:	4b48      	ldr	r3, [pc, #288]	; (800bb10 <xTaskIncrementTick+0x14c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <xTaskIncrementTick+0x46>
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	e7fe      	b.n	800ba08 <xTaskIncrementTick+0x44>
 800ba0a:	4b41      	ldr	r3, [pc, #260]	; (800bb10 <xTaskIncrementTick+0x14c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	4b40      	ldr	r3, [pc, #256]	; (800bb14 <xTaskIncrementTick+0x150>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a3e      	ldr	r2, [pc, #248]	; (800bb10 <xTaskIncrementTick+0x14c>)
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	4a3e      	ldr	r2, [pc, #248]	; (800bb14 <xTaskIncrementTick+0x150>)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	4b3e      	ldr	r3, [pc, #248]	; (800bb18 <xTaskIncrementTick+0x154>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3301      	adds	r3, #1
 800ba24:	4a3c      	ldr	r2, [pc, #240]	; (800bb18 <xTaskIncrementTick+0x154>)
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	f000 fa98 	bl	800bf5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba2c:	4b3b      	ldr	r3, [pc, #236]	; (800bb1c <xTaskIncrementTick+0x158>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d348      	bcc.n	800bac8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba36:	4b36      	ldr	r3, [pc, #216]	; (800bb10 <xTaskIncrementTick+0x14c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d104      	bne.n	800ba4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba40:	4b36      	ldr	r3, [pc, #216]	; (800bb1c <xTaskIncrementTick+0x158>)
 800ba42:	f04f 32ff 	mov.w	r2, #4294967295
 800ba46:	601a      	str	r2, [r3, #0]
					break;
 800ba48:	e03e      	b.n	800bac8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba4a:	4b31      	ldr	r3, [pc, #196]	; (800bb10 <xTaskIncrementTick+0x14c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d203      	bcs.n	800ba6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba62:	4a2e      	ldr	r2, [pc, #184]	; (800bb1c <xTaskIncrementTick+0x158>)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba68:	e02e      	b.n	800bac8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe fce1 	bl	800a436 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d004      	beq.n	800ba86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	3318      	adds	r3, #24
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fcd8 	bl	800a436 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	409a      	lsls	r2, r3
 800ba8e:	4b24      	ldr	r3, [pc, #144]	; (800bb20 <xTaskIncrementTick+0x15c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	4a22      	ldr	r2, [pc, #136]	; (800bb20 <xTaskIncrementTick+0x15c>)
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4a1f      	ldr	r2, [pc, #124]	; (800bb24 <xTaskIncrementTick+0x160>)
 800baa6:	441a      	add	r2, r3
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fe fc64 	bl	800a37c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab8:	4b1b      	ldr	r3, [pc, #108]	; (800bb28 <xTaskIncrementTick+0x164>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babe:	429a      	cmp	r2, r3
 800bac0:	d3b9      	bcc.n	800ba36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bac6:	e7b6      	b.n	800ba36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bac8:	4b17      	ldr	r3, [pc, #92]	; (800bb28 <xTaskIncrementTick+0x164>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	4915      	ldr	r1, [pc, #84]	; (800bb24 <xTaskIncrementTick+0x160>)
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	440b      	add	r3, r1
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d907      	bls.n	800baf0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bae0:	2301      	movs	r3, #1
 800bae2:	617b      	str	r3, [r7, #20]
 800bae4:	e004      	b.n	800baf0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bae6:	4b11      	ldr	r3, [pc, #68]	; (800bb2c <xTaskIncrementTick+0x168>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3301      	adds	r3, #1
 800baec:	4a0f      	ldr	r2, [pc, #60]	; (800bb2c <xTaskIncrementTick+0x168>)
 800baee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800baf0:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <xTaskIncrementTick+0x16c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800baf8:	2301      	movs	r3, #1
 800bafa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bafc:	697b      	ldr	r3, [r7, #20]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000043c 	.word	0x2000043c
 800bb0c:	20000418 	.word	0x20000418
 800bb10:	200003cc 	.word	0x200003cc
 800bb14:	200003d0 	.word	0x200003d0
 800bb18:	2000042c 	.word	0x2000042c
 800bb1c:	20000434 	.word	0x20000434
 800bb20:	2000041c 	.word	0x2000041c
 800bb24:	20000318 	.word	0x20000318
 800bb28:	20000314 	.word	0x20000314
 800bb2c:	20000424 	.word	0x20000424
 800bb30:	20000428 	.word	0x20000428

0800bb34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb3a:	4b26      	ldr	r3, [pc, #152]	; (800bbd4 <vTaskSwitchContext+0xa0>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb42:	4b25      	ldr	r3, [pc, #148]	; (800bbd8 <vTaskSwitchContext+0xa4>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb48:	e03e      	b.n	800bbc8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800bb4a:	4b23      	ldr	r3, [pc, #140]	; (800bbd8 <vTaskSwitchContext+0xa4>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb50:	4b22      	ldr	r3, [pc, #136]	; (800bbdc <vTaskSwitchContext+0xa8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	fab3 f383 	clz	r3, r3
 800bb5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb5e:	7afb      	ldrb	r3, [r7, #11]
 800bb60:	f1c3 031f 	rsb	r3, r3, #31
 800bb64:	617b      	str	r3, [r7, #20]
 800bb66:	491e      	ldr	r1, [pc, #120]	; (800bbe0 <vTaskSwitchContext+0xac>)
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	440b      	add	r3, r1
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <vTaskSwitchContext+0x5a>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	607b      	str	r3, [r7, #4]
 800bb8c:	e7fe      	b.n	800bb8c <vTaskSwitchContext+0x58>
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4a11      	ldr	r2, [pc, #68]	; (800bbe0 <vTaskSwitchContext+0xac>)
 800bb9a:	4413      	add	r3, r2
 800bb9c:	613b      	str	r3, [r7, #16]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	605a      	str	r2, [r3, #4]
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d104      	bne.n	800bbbe <vTaskSwitchContext+0x8a>
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	605a      	str	r2, [r3, #4]
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	4a07      	ldr	r2, [pc, #28]	; (800bbe4 <vTaskSwitchContext+0xb0>)
 800bbc6:	6013      	str	r3, [r2, #0]
}
 800bbc8:	bf00      	nop
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	2000043c 	.word	0x2000043c
 800bbd8:	20000428 	.word	0x20000428
 800bbdc:	2000041c 	.word	0x2000041c
 800bbe0:	20000318 	.word	0x20000318
 800bbe4:	20000314 	.word	0x20000314

0800bbe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d109      	bne.n	800bc0c <vTaskPlaceOnEventList+0x24>
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	e7fe      	b.n	800bc0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <vTaskPlaceOnEventList+0x44>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3318      	adds	r3, #24
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7fe fbd5 	bl	800a3c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	6838      	ldr	r0, [r7, #0]
 800bc1e:	f000 fb8b 	bl	800c338 <prvAddCurrentTaskToDelayedList>
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000314 	.word	0x20000314

0800bc30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <xTaskRemoveFromEventList+0x2a>
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	e7fe      	b.n	800bc58 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	3318      	adds	r3, #24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe fbe9 	bl	800a436 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc64:	4b1d      	ldr	r3, [pc, #116]	; (800bcdc <xTaskRemoveFromEventList+0xac>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d11c      	bne.n	800bca6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fe fbe0 	bl	800a436 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	409a      	lsls	r2, r3
 800bc7e:	4b18      	ldr	r3, [pc, #96]	; (800bce0 <xTaskRemoveFromEventList+0xb0>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	4a16      	ldr	r2, [pc, #88]	; (800bce0 <xTaskRemoveFromEventList+0xb0>)
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4a13      	ldr	r2, [pc, #76]	; (800bce4 <xTaskRemoveFromEventList+0xb4>)
 800bc96:	441a      	add	r2, r3
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	f7fe fb6c 	bl	800a37c <vListInsertEnd>
 800bca4:	e005      	b.n	800bcb2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	3318      	adds	r3, #24
 800bcaa:	4619      	mov	r1, r3
 800bcac:	480e      	ldr	r0, [pc, #56]	; (800bce8 <xTaskRemoveFromEventList+0xb8>)
 800bcae:	f7fe fb65 	bl	800a37c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <xTaskRemoveFromEventList+0xbc>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d905      	bls.n	800bccc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <xTaskRemoveFromEventList+0xc0>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	e001      	b.n	800bcd0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bccc:	2300      	movs	r3, #0
 800bcce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcd0:	697b      	ldr	r3, [r7, #20]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	2000043c 	.word	0x2000043c
 800bce0:	2000041c 	.word	0x2000041c
 800bce4:	20000318 	.word	0x20000318
 800bce8:	200003d4 	.word	0x200003d4
 800bcec:	20000314 	.word	0x20000314
 800bcf0:	20000428 	.word	0x20000428

0800bcf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcfc:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <vTaskInternalSetTimeOutState+0x24>)
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <vTaskInternalSetTimeOutState+0x28>)
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	605a      	str	r2, [r3, #4]
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	2000042c 	.word	0x2000042c
 800bd1c:	20000418 	.word	0x20000418

0800bd20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d109      	bne.n	800bd44 <xTaskCheckForTimeOut+0x24>
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	613b      	str	r3, [r7, #16]
 800bd42:	e7fe      	b.n	800bd42 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d109      	bne.n	800bd5e <xTaskCheckForTimeOut+0x3e>
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	e7fe      	b.n	800bd5c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bd5e:	f000 fc75 	bl	800c64c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd62:	4b1d      	ldr	r3, [pc, #116]	; (800bdd8 <xTaskCheckForTimeOut+0xb8>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7a:	d102      	bne.n	800bd82 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	61fb      	str	r3, [r7, #28]
 800bd80:	e023      	b.n	800bdca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	4b15      	ldr	r3, [pc, #84]	; (800bddc <xTaskCheckForTimeOut+0xbc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d007      	beq.n	800bd9e <xTaskCheckForTimeOut+0x7e>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d302      	bcc.n	800bd9e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	61fb      	str	r3, [r7, #28]
 800bd9c:	e015      	b.n	800bdca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d20b      	bcs.n	800bdc0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	1ad2      	subs	r2, r2, r3
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff ff9d 	bl	800bcf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	61fb      	str	r3, [r7, #28]
 800bdbe:	e004      	b.n	800bdca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdca:	f000 fc6d 	bl	800c6a8 <vPortExitCritical>

	return xReturn;
 800bdce:	69fb      	ldr	r3, [r7, #28]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20000418 	.word	0x20000418
 800bddc:	2000042c 	.word	0x2000042c

0800bde0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bde4:	4b03      	ldr	r3, [pc, #12]	; (800bdf4 <vTaskMissedYield+0x14>)
 800bde6:	2201      	movs	r2, #1
 800bde8:	601a      	str	r2, [r3, #0]
}
 800bdea:	bf00      	nop
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	20000428 	.word	0x20000428

0800bdf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be00:	f000 f852 	bl	800bea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be04:	4b06      	ldr	r3, [pc, #24]	; (800be20 <prvIdleTask+0x28>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d9f9      	bls.n	800be00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <prvIdleTask+0x2c>)
 800be0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be1c:	e7f0      	b.n	800be00 <prvIdleTask+0x8>
 800be1e:	bf00      	nop
 800be20:	20000318 	.word	0x20000318
 800be24:	e000ed04 	.word	0xe000ed04

0800be28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be2e:	2300      	movs	r3, #0
 800be30:	607b      	str	r3, [r7, #4]
 800be32:	e00c      	b.n	800be4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4a12      	ldr	r2, [pc, #72]	; (800be88 <prvInitialiseTaskLists+0x60>)
 800be40:	4413      	add	r3, r2
 800be42:	4618      	mov	r0, r3
 800be44:	f7fe fa6d 	bl	800a322 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3301      	adds	r3, #1
 800be4c:	607b      	str	r3, [r7, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b06      	cmp	r3, #6
 800be52:	d9ef      	bls.n	800be34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be54:	480d      	ldr	r0, [pc, #52]	; (800be8c <prvInitialiseTaskLists+0x64>)
 800be56:	f7fe fa64 	bl	800a322 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be5a:	480d      	ldr	r0, [pc, #52]	; (800be90 <prvInitialiseTaskLists+0x68>)
 800be5c:	f7fe fa61 	bl	800a322 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be60:	480c      	ldr	r0, [pc, #48]	; (800be94 <prvInitialiseTaskLists+0x6c>)
 800be62:	f7fe fa5e 	bl	800a322 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be66:	480c      	ldr	r0, [pc, #48]	; (800be98 <prvInitialiseTaskLists+0x70>)
 800be68:	f7fe fa5b 	bl	800a322 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be6c:	480b      	ldr	r0, [pc, #44]	; (800be9c <prvInitialiseTaskLists+0x74>)
 800be6e:	f7fe fa58 	bl	800a322 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be72:	4b0b      	ldr	r3, [pc, #44]	; (800bea0 <prvInitialiseTaskLists+0x78>)
 800be74:	4a05      	ldr	r2, [pc, #20]	; (800be8c <prvInitialiseTaskLists+0x64>)
 800be76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be78:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <prvInitialiseTaskLists+0x7c>)
 800be7a:	4a05      	ldr	r2, [pc, #20]	; (800be90 <prvInitialiseTaskLists+0x68>)
 800be7c:	601a      	str	r2, [r3, #0]
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000318 	.word	0x20000318
 800be8c:	200003a4 	.word	0x200003a4
 800be90:	200003b8 	.word	0x200003b8
 800be94:	200003d4 	.word	0x200003d4
 800be98:	200003e8 	.word	0x200003e8
 800be9c:	20000400 	.word	0x20000400
 800bea0:	200003cc 	.word	0x200003cc
 800bea4:	200003d0 	.word	0x200003d0

0800bea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beae:	e019      	b.n	800bee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800beb0:	f000 fbcc 	bl	800c64c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beb4:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <prvCheckTasksWaitingTermination+0x4c>)
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3304      	adds	r3, #4
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fab8 	bl	800a436 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bec6:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <prvCheckTasksWaitingTermination+0x50>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3b01      	subs	r3, #1
 800becc:	4a0a      	ldr	r2, [pc, #40]	; (800bef8 <prvCheckTasksWaitingTermination+0x50>)
 800bece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bed0:	4b0a      	ldr	r3, [pc, #40]	; (800befc <prvCheckTasksWaitingTermination+0x54>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	4a09      	ldr	r2, [pc, #36]	; (800befc <prvCheckTasksWaitingTermination+0x54>)
 800bed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800beda:	f000 fbe5 	bl	800c6a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f80e 	bl	800bf00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <prvCheckTasksWaitingTermination+0x54>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e1      	bne.n	800beb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	200003e8 	.word	0x200003e8
 800bef8:	20000414 	.word	0x20000414
 800befc:	200003fc 	.word	0x200003fc

0800bf00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d108      	bne.n	800bf24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 fd74 	bl	800ca04 <vPortFree>
				vPortFree( pxTCB );
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fd71 	bl	800ca04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf22:	e017      	b.n	800bf54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d103      	bne.n	800bf36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fd68 	bl	800ca04 <vPortFree>
	}
 800bf34:	e00e      	b.n	800bf54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d009      	beq.n	800bf54 <prvDeleteTCB+0x54>
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e7fe      	b.n	800bf52 <prvDeleteTCB+0x52>
	}
 800bf54:	bf00      	nop
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf62:	4b0c      	ldr	r3, [pc, #48]	; (800bf94 <prvResetNextTaskUnblockTime+0x38>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <prvResetNextTaskUnblockTime+0x3c>)
 800bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf74:	e008      	b.n	800bf88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf76:	4b07      	ldr	r3, [pc, #28]	; (800bf94 <prvResetNextTaskUnblockTime+0x38>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	4a04      	ldr	r2, [pc, #16]	; (800bf98 <prvResetNextTaskUnblockTime+0x3c>)
 800bf86:	6013      	str	r3, [r2, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	200003cc 	.word	0x200003cc
 800bf98:	20000434 	.word	0x20000434

0800bf9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfa2:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <xTaskGetSchedulerState+0x34>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d102      	bne.n	800bfb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	607b      	str	r3, [r7, #4]
 800bfae:	e008      	b.n	800bfc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <xTaskGetSchedulerState+0x38>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d102      	bne.n	800bfbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfb8:	2302      	movs	r3, #2
 800bfba:	607b      	str	r3, [r7, #4]
 800bfbc:	e001      	b.n	800bfc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfc2:	687b      	ldr	r3, [r7, #4]
	}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	20000420 	.word	0x20000420
 800bfd4:	2000043c 	.word	0x2000043c

0800bfd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d069      	beq.n	800c0c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff2:	4b36      	ldr	r3, [pc, #216]	; (800c0cc <xTaskPriorityInherit+0xf4>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d259      	bcs.n	800c0b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	db06      	blt.n	800c012 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c004:	4b31      	ldr	r3, [pc, #196]	; (800c0cc <xTaskPriorityInherit+0xf4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	f1c3 0207 	rsb	r2, r3, #7
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	6959      	ldr	r1, [r3, #20]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01a:	4613      	mov	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4a2b      	ldr	r2, [pc, #172]	; (800c0d0 <xTaskPriorityInherit+0xf8>)
 800c024:	4413      	add	r3, r2
 800c026:	4299      	cmp	r1, r3
 800c028:	d13a      	bne.n	800c0a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	3304      	adds	r3, #4
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fa01 	bl	800a436 <uxListRemove>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d115      	bne.n	800c066 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03e:	4924      	ldr	r1, [pc, #144]	; (800c0d0 <xTaskPriorityInherit+0xf8>)
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <xTaskPriorityInherit+0x8e>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	2201      	movs	r2, #1
 800c056:	fa02 f303 	lsl.w	r3, r2, r3
 800c05a:	43da      	mvns	r2, r3
 800c05c:	4b1d      	ldr	r3, [pc, #116]	; (800c0d4 <xTaskPriorityInherit+0xfc>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4013      	ands	r3, r2
 800c062:	4a1c      	ldr	r2, [pc, #112]	; (800c0d4 <xTaskPriorityInherit+0xfc>)
 800c064:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c066:	4b19      	ldr	r3, [pc, #100]	; (800c0cc <xTaskPriorityInherit+0xf4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	2201      	movs	r2, #1
 800c076:	409a      	lsls	r2, r3
 800c078:	4b16      	ldr	r3, [pc, #88]	; (800c0d4 <xTaskPriorityInherit+0xfc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	4a15      	ldr	r2, [pc, #84]	; (800c0d4 <xTaskPriorityInherit+0xfc>)
 800c080:	6013      	str	r3, [r2, #0]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4a10      	ldr	r2, [pc, #64]	; (800c0d0 <xTaskPriorityInherit+0xf8>)
 800c090:	441a      	add	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	3304      	adds	r3, #4
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f7fe f96f 	bl	800a37c <vListInsertEnd>
 800c09e:	e004      	b.n	800c0aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0a0:	4b0a      	ldr	r3, [pc, #40]	; (800c0cc <xTaskPriorityInherit+0xf4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	e008      	b.n	800c0c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0b4:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <xTaskPriorityInherit+0xf4>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d201      	bcs.n	800c0c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
	}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	20000314 	.word	0x20000314
 800c0d0:	20000318 	.word	0x20000318
 800c0d4:	2000041c 	.word	0x2000041c

0800c0d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d06c      	beq.n	800c1c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0ee:	4b39      	ldr	r3, [pc, #228]	; (800c1d4 <xTaskPriorityDisinherit+0xfc>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d009      	beq.n	800c10c <xTaskPriorityDisinherit+0x34>
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	e7fe      	b.n	800c10a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c110:	2b00      	cmp	r3, #0
 800c112:	d109      	bne.n	800c128 <xTaskPriorityDisinherit+0x50>
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	60bb      	str	r3, [r7, #8]
 800c126:	e7fe      	b.n	800c126 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c12c:	1e5a      	subs	r2, r3, #1
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d044      	beq.n	800c1c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c142:	2b00      	cmp	r3, #0
 800c144:	d140      	bne.n	800c1c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	3304      	adds	r3, #4
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe f973 	bl	800a436 <uxListRemove>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d115      	bne.n	800c182 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15a:	491f      	ldr	r1, [pc, #124]	; (800c1d8 <xTaskPriorityDisinherit+0x100>)
 800c15c:	4613      	mov	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	440b      	add	r3, r1
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10a      	bne.n	800c182 <xTaskPriorityDisinherit+0xaa>
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	2201      	movs	r2, #1
 800c172:	fa02 f303 	lsl.w	r3, r2, r3
 800c176:	43da      	mvns	r2, r3
 800c178:	4b18      	ldr	r3, [pc, #96]	; (800c1dc <xTaskPriorityDisinherit+0x104>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4013      	ands	r3, r2
 800c17e:	4a17      	ldr	r2, [pc, #92]	; (800c1dc <xTaskPriorityDisinherit+0x104>)
 800c180:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	f1c3 0207 	rsb	r2, r3, #7
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	2201      	movs	r2, #1
 800c19c:	409a      	lsls	r2, r3
 800c19e:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <xTaskPriorityDisinherit+0x104>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	4a0d      	ldr	r2, [pc, #52]	; (800c1dc <xTaskPriorityDisinherit+0x104>)
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4a08      	ldr	r2, [pc, #32]	; (800c1d8 <xTaskPriorityDisinherit+0x100>)
 800c1b6:	441a      	add	r2, r3
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4610      	mov	r0, r2
 800c1c0:	f7fe f8dc 	bl	800a37c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1c8:	697b      	ldr	r3, [r7, #20]
	}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000314 	.word	0x20000314
 800c1d8:	20000318 	.word	0x20000318
 800c1dc:	2000041c 	.word	0x2000041c

0800c1e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 8081 	beq.w	800c2fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e7fe      	b.n	800c214 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d902      	bls.n	800c226 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	61fb      	str	r3, [r7, #28]
 800c224:	e002      	b.n	800c22c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c22a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c230:	69fa      	ldr	r2, [r7, #28]
 800c232:	429a      	cmp	r2, r3
 800c234:	d062      	beq.n	800c2fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d15d      	bne.n	800c2fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c240:	4b30      	ldr	r3, [pc, #192]	; (800c304 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	429a      	cmp	r2, r3
 800c248:	d109      	bne.n	800c25e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	60bb      	str	r3, [r7, #8]
 800c25c:	e7fe      	b.n	800c25c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c262:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	69fa      	ldr	r2, [r7, #28]
 800c268:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	db04      	blt.n	800c27c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	f1c3 0207 	rsb	r2, r3, #7
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	6959      	ldr	r1, [r3, #20]
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	4613      	mov	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4a1f      	ldr	r2, [pc, #124]	; (800c308 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c28c:	4413      	add	r3, r2
 800c28e:	4299      	cmp	r1, r3
 800c290:	d134      	bne.n	800c2fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	3304      	adds	r3, #4
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe f8cd 	bl	800a436 <uxListRemove>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d115      	bne.n	800c2ce <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a6:	4918      	ldr	r1, [pc, #96]	; (800c308 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	440b      	add	r3, r1
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10a      	bne.n	800c2ce <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	2201      	movs	r2, #1
 800c2be:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c2:	43da      	mvns	r2, r3
 800c2c4:	4b11      	ldr	r3, [pc, #68]	; (800c30c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	4a10      	ldr	r2, [pc, #64]	; (800c30c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	409a      	lsls	r2, r3
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	4a0b      	ldr	r2, [pc, #44]	; (800c30c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4a06      	ldr	r2, [pc, #24]	; (800c308 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c2ee:	441a      	add	r2, r3
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	f7fe f840 	bl	800a37c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2fc:	bf00      	nop
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20000314 	.word	0x20000314
 800c308:	20000318 	.word	0x20000318
 800c30c:	2000041c 	.word	0x2000041c

0800c310 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c314:	4b07      	ldr	r3, [pc, #28]	; (800c334 <pvTaskIncrementMutexHeldCount+0x24>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c31c:	4b05      	ldr	r3, [pc, #20]	; (800c334 <pvTaskIncrementMutexHeldCount+0x24>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c322:	3201      	adds	r2, #1
 800c324:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c326:	4b03      	ldr	r3, [pc, #12]	; (800c334 <pvTaskIncrementMutexHeldCount+0x24>)
 800c328:	681b      	ldr	r3, [r3, #0]
	}
 800c32a:	4618      	mov	r0, r3
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	20000314 	.word	0x20000314

0800c338 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c342:	4b29      	ldr	r3, [pc, #164]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c348:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3304      	adds	r3, #4
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe f871 	bl	800a436 <uxListRemove>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10b      	bne.n	800c372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c35a:	4b24      	ldr	r3, [pc, #144]	; (800c3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	2201      	movs	r2, #1
 800c362:	fa02 f303 	lsl.w	r3, r2, r3
 800c366:	43da      	mvns	r2, r3
 800c368:	4b21      	ldr	r3, [pc, #132]	; (800c3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4013      	ands	r3, r2
 800c36e:	4a20      	ldr	r2, [pc, #128]	; (800c3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c378:	d10a      	bne.n	800c390 <prvAddCurrentTaskToDelayedList+0x58>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d007      	beq.n	800c390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c380:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3304      	adds	r3, #4
 800c386:	4619      	mov	r1, r3
 800c388:	481a      	ldr	r0, [pc, #104]	; (800c3f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c38a:	f7fd fff7 	bl	800a37c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c38e:	e026      	b.n	800c3de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4413      	add	r3, r2
 800c396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c398:	4b14      	ldr	r3, [pc, #80]	; (800c3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d209      	bcs.n	800c3bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3a8:	4b13      	ldr	r3, [pc, #76]	; (800c3f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	4b0f      	ldr	r3, [pc, #60]	; (800c3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3304      	adds	r3, #4
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	f7fe f805 	bl	800a3c4 <vListInsert>
}
 800c3ba:	e010      	b.n	800c3de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3bc:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	f7fd fffb 	bl	800a3c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d202      	bcs.n	800c3de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c3d8:	4a09      	ldr	r2, [pc, #36]	; (800c400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	6013      	str	r3, [r2, #0]
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000418 	.word	0x20000418
 800c3ec:	20000314 	.word	0x20000314
 800c3f0:	2000041c 	.word	0x2000041c
 800c3f4:	20000400 	.word	0x20000400
 800c3f8:	200003d0 	.word	0x200003d0
 800c3fc:	200003cc 	.word	0x200003cc
 800c400:	20000434 	.word	0x20000434

0800c404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3b04      	subs	r3, #4
 800c414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c41c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3b04      	subs	r3, #4
 800c422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f023 0201 	bic.w	r2, r3, #1
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3b04      	subs	r3, #4
 800c432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c434:	4a0c      	ldr	r2, [pc, #48]	; (800c468 <pxPortInitialiseStack+0x64>)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b14      	subs	r3, #20
 800c43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3b04      	subs	r3, #4
 800c44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f06f 0202 	mvn.w	r2, #2
 800c452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3b20      	subs	r3, #32
 800c458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c45a:	68fb      	ldr	r3, [r7, #12]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	0800c46d 	.word	0x0800c46d

0800c46c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c476:	4b11      	ldr	r3, [pc, #68]	; (800c4bc <prvTaskExitError+0x50>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47e:	d009      	beq.n	800c494 <prvTaskExitError+0x28>
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	e7fe      	b.n	800c492 <prvTaskExitError+0x26>
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4a6:	bf00      	nop
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0fc      	beq.n	800c4a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4ae:	bf00      	nop
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20000024 	.word	0x20000024

0800c4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4c0:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <pxCurrentTCBConst2>)
 800c4c2:	6819      	ldr	r1, [r3, #0]
 800c4c4:	6808      	ldr	r0, [r1, #0]
 800c4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ca:	f380 8809 	msr	PSP, r0
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f04f 0000 	mov.w	r0, #0
 800c4d6:	f380 8811 	msr	BASEPRI, r0
 800c4da:	4770      	bx	lr
 800c4dc:	f3af 8000 	nop.w

0800c4e0 <pxCurrentTCBConst2>:
 800c4e0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop

0800c4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4e8:	4808      	ldr	r0, [pc, #32]	; (800c50c <prvPortStartFirstTask+0x24>)
 800c4ea:	6800      	ldr	r0, [r0, #0]
 800c4ec:	6800      	ldr	r0, [r0, #0]
 800c4ee:	f380 8808 	msr	MSP, r0
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8814 	msr	CONTROL, r0
 800c4fa:	b662      	cpsie	i
 800c4fc:	b661      	cpsie	f
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	df00      	svc	0
 800c508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c50a:	bf00      	nop
 800c50c:	e000ed08 	.word	0xe000ed08

0800c510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c516:	4b44      	ldr	r3, [pc, #272]	; (800c628 <xPortStartScheduler+0x118>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a44      	ldr	r2, [pc, #272]	; (800c62c <xPortStartScheduler+0x11c>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d109      	bne.n	800c534 <xPortStartScheduler+0x24>
 800c520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c524:	f383 8811 	msr	BASEPRI, r3
 800c528:	f3bf 8f6f 	isb	sy
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	613b      	str	r3, [r7, #16]
 800c532:	e7fe      	b.n	800c532 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c534:	4b3c      	ldr	r3, [pc, #240]	; (800c628 <xPortStartScheduler+0x118>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a3d      	ldr	r2, [pc, #244]	; (800c630 <xPortStartScheduler+0x120>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d109      	bne.n	800c552 <xPortStartScheduler+0x42>
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e7fe      	b.n	800c550 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c552:	4b38      	ldr	r3, [pc, #224]	; (800c634 <xPortStartScheduler+0x124>)
 800c554:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	22ff      	movs	r2, #255	; 0xff
 800c562:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c56c:	78fb      	ldrb	r3, [r7, #3]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c574:	b2da      	uxtb	r2, r3
 800c576:	4b30      	ldr	r3, [pc, #192]	; (800c638 <xPortStartScheduler+0x128>)
 800c578:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c57a:	4b30      	ldr	r3, [pc, #192]	; (800c63c <xPortStartScheduler+0x12c>)
 800c57c:	2207      	movs	r2, #7
 800c57e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c580:	e009      	b.n	800c596 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c582:	4b2e      	ldr	r3, [pc, #184]	; (800c63c <xPortStartScheduler+0x12c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3b01      	subs	r3, #1
 800c588:	4a2c      	ldr	r2, [pc, #176]	; (800c63c <xPortStartScheduler+0x12c>)
 800c58a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	005b      	lsls	r3, r3, #1
 800c592:	b2db      	uxtb	r3, r3
 800c594:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c596:	78fb      	ldrb	r3, [r7, #3]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c59e:	2b80      	cmp	r3, #128	; 0x80
 800c5a0:	d0ef      	beq.n	800c582 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5a2:	4b26      	ldr	r3, [pc, #152]	; (800c63c <xPortStartScheduler+0x12c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f1c3 0307 	rsb	r3, r3, #7
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	d009      	beq.n	800c5c2 <xPortStartScheduler+0xb2>
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	60bb      	str	r3, [r7, #8]
 800c5c0:	e7fe      	b.n	800c5c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5c2:	4b1e      	ldr	r3, [pc, #120]	; (800c63c <xPortStartScheduler+0x12c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	4a1c      	ldr	r2, [pc, #112]	; (800c63c <xPortStartScheduler+0x12c>)
 800c5ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5cc:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <xPortStartScheduler+0x12c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5d4:	4a19      	ldr	r2, [pc, #100]	; (800c63c <xPortStartScheduler+0x12c>)
 800c5d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5e0:	4b17      	ldr	r3, [pc, #92]	; (800c640 <xPortStartScheduler+0x130>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a16      	ldr	r2, [pc, #88]	; (800c640 <xPortStartScheduler+0x130>)
 800c5e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5ec:	4b14      	ldr	r3, [pc, #80]	; (800c640 <xPortStartScheduler+0x130>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a13      	ldr	r2, [pc, #76]	; (800c640 <xPortStartScheduler+0x130>)
 800c5f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5f8:	f000 f8d6 	bl	800c7a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5fc:	4b11      	ldr	r3, [pc, #68]	; (800c644 <xPortStartScheduler+0x134>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c602:	f000 f8f5 	bl	800c7f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c606:	4b10      	ldr	r3, [pc, #64]	; (800c648 <xPortStartScheduler+0x138>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a0f      	ldr	r2, [pc, #60]	; (800c648 <xPortStartScheduler+0x138>)
 800c60c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c610:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c612:	f7ff ff69 	bl	800c4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c616:	f7ff fa8d 	bl	800bb34 <vTaskSwitchContext>
	prvTaskExitError();
 800c61a:	f7ff ff27 	bl	800c46c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	e000ed00 	.word	0xe000ed00
 800c62c:	410fc271 	.word	0x410fc271
 800c630:	410fc270 	.word	0x410fc270
 800c634:	e000e400 	.word	0xe000e400
 800c638:	20000440 	.word	0x20000440
 800c63c:	20000444 	.word	0x20000444
 800c640:	e000ed20 	.word	0xe000ed20
 800c644:	20000024 	.word	0x20000024
 800c648:	e000ef34 	.word	0xe000ef34

0800c64c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c664:	4b0e      	ldr	r3, [pc, #56]	; (800c6a0 <vPortEnterCritical+0x54>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3301      	adds	r3, #1
 800c66a:	4a0d      	ldr	r2, [pc, #52]	; (800c6a0 <vPortEnterCritical+0x54>)
 800c66c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c66e:	4b0c      	ldr	r3, [pc, #48]	; (800c6a0 <vPortEnterCritical+0x54>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d10e      	bne.n	800c694 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c676:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <vPortEnterCritical+0x58>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d009      	beq.n	800c694 <vPortEnterCritical+0x48>
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	603b      	str	r3, [r7, #0]
 800c692:	e7fe      	b.n	800c692 <vPortEnterCritical+0x46>
	}
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	20000024 	.word	0x20000024
 800c6a4:	e000ed04 	.word	0xe000ed04

0800c6a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6ae:	4b11      	ldr	r3, [pc, #68]	; (800c6f4 <vPortExitCritical+0x4c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d109      	bne.n	800c6ca <vPortExitCritical+0x22>
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	607b      	str	r3, [r7, #4]
 800c6c8:	e7fe      	b.n	800c6c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c6ca:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <vPortExitCritical+0x4c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	4a08      	ldr	r2, [pc, #32]	; (800c6f4 <vPortExitCritical+0x4c>)
 800c6d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6d4:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <vPortExitCritical+0x4c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d104      	bne.n	800c6e6 <vPortExitCritical+0x3e>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	20000024 	.word	0x20000024
	...

0800c700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c700:	f3ef 8009 	mrs	r0, PSP
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4b15      	ldr	r3, [pc, #84]	; (800c760 <pxCurrentTCBConst>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	f01e 0f10 	tst.w	lr, #16
 800c710:	bf08      	it	eq
 800c712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71a:	6010      	str	r0, [r2, #0]
 800c71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c720:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c724:	f380 8811 	msr	BASEPRI, r0
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f7ff fa00 	bl	800bb34 <vTaskSwitchContext>
 800c734:	f04f 0000 	mov.w	r0, #0
 800c738:	f380 8811 	msr	BASEPRI, r0
 800c73c:	bc09      	pop	{r0, r3}
 800c73e:	6819      	ldr	r1, [r3, #0]
 800c740:	6808      	ldr	r0, [r1, #0]
 800c742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c746:	f01e 0f10 	tst.w	lr, #16
 800c74a:	bf08      	it	eq
 800c74c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c750:	f380 8809 	msr	PSP, r0
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	f3af 8000 	nop.w

0800c760 <pxCurrentTCBConst>:
 800c760:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop

0800c768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c780:	f7ff f920 	bl	800b9c4 <xTaskIncrementTick>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <SysTick_Handler+0x3c>)
 800c78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	2300      	movs	r3, #0
 800c794:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	e000ed04 	.word	0xe000ed04

0800c7a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7ac:	4b0b      	ldr	r3, [pc, #44]	; (800c7dc <vPortSetupTimerInterrupt+0x34>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <vPortSetupTimerInterrupt+0x38>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7b8:	4b0a      	ldr	r3, [pc, #40]	; (800c7e4 <vPortSetupTimerInterrupt+0x3c>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a0a      	ldr	r2, [pc, #40]	; (800c7e8 <vPortSetupTimerInterrupt+0x40>)
 800c7be:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c2:	099b      	lsrs	r3, r3, #6
 800c7c4:	4a09      	ldr	r2, [pc, #36]	; (800c7ec <vPortSetupTimerInterrupt+0x44>)
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7ca:	4b04      	ldr	r3, [pc, #16]	; (800c7dc <vPortSetupTimerInterrupt+0x34>)
 800c7cc:	2207      	movs	r2, #7
 800c7ce:	601a      	str	r2, [r3, #0]
}
 800c7d0:	bf00      	nop
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	e000e010 	.word	0xe000e010
 800c7e0:	e000e018 	.word	0xe000e018
 800c7e4:	20000000 	.word	0x20000000
 800c7e8:	10624dd3 	.word	0x10624dd3
 800c7ec:	e000e014 	.word	0xe000e014

0800c7f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c800 <vPortEnableVFP+0x10>
 800c7f4:	6801      	ldr	r1, [r0, #0]
 800c7f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7fa:	6001      	str	r1, [r0, #0]
 800c7fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7fe:	bf00      	nop
 800c800:	e000ed88 	.word	0xe000ed88

0800c804 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c80a:	f3ef 8305 	mrs	r3, IPSR
 800c80e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b0f      	cmp	r3, #15
 800c814:	d913      	bls.n	800c83e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c816:	4a16      	ldr	r2, [pc, #88]	; (800c870 <vPortValidateInterruptPriority+0x6c>)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c820:	4b14      	ldr	r3, [pc, #80]	; (800c874 <vPortValidateInterruptPriority+0x70>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	7afa      	ldrb	r2, [r7, #11]
 800c826:	429a      	cmp	r2, r3
 800c828:	d209      	bcs.n	800c83e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	607b      	str	r3, [r7, #4]
 800c83c:	e7fe      	b.n	800c83c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c83e:	4b0e      	ldr	r3, [pc, #56]	; (800c878 <vPortValidateInterruptPriority+0x74>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c846:	4b0d      	ldr	r3, [pc, #52]	; (800c87c <vPortValidateInterruptPriority+0x78>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d909      	bls.n	800c862 <vPortValidateInterruptPriority+0x5e>
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	e7fe      	b.n	800c860 <vPortValidateInterruptPriority+0x5c>
	}
 800c862:	bf00      	nop
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	e000e3f0 	.word	0xe000e3f0
 800c874:	20000440 	.word	0x20000440
 800c878:	e000ed0c 	.word	0xe000ed0c
 800c87c:	20000444 	.word	0x20000444

0800c880 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08a      	sub	sp, #40	; 0x28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c88c:	f7fe ffce 	bl	800b82c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c890:	4b57      	ldr	r3, [pc, #348]	; (800c9f0 <pvPortMalloc+0x170>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c898:	f000 f90c 	bl	800cab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c89c:	4b55      	ldr	r3, [pc, #340]	; (800c9f4 <pvPortMalloc+0x174>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f040 808c 	bne.w	800c9c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d01c      	beq.n	800c8ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f003 0307 	and.w	r3, r3, #7
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d013      	beq.n	800c8ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f023 0307 	bic.w	r3, r3, #7
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d009      	beq.n	800c8ea <pvPortMalloc+0x6a>
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	e7fe      	b.n	800c8e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d068      	beq.n	800c9c2 <pvPortMalloc+0x142>
 800c8f0:	4b41      	ldr	r3, [pc, #260]	; (800c9f8 <pvPortMalloc+0x178>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d863      	bhi.n	800c9c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8fa:	4b40      	ldr	r3, [pc, #256]	; (800c9fc <pvPortMalloc+0x17c>)
 800c8fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8fe:	4b3f      	ldr	r3, [pc, #252]	; (800c9fc <pvPortMalloc+0x17c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c904:	e004      	b.n	800c910 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	429a      	cmp	r2, r3
 800c918:	d903      	bls.n	800c922 <pvPortMalloc+0xa2>
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1f1      	bne.n	800c906 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c922:	4b33      	ldr	r3, [pc, #204]	; (800c9f0 <pvPortMalloc+0x170>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c928:	429a      	cmp	r2, r3
 800c92a:	d04a      	beq.n	800c9c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c92c:	6a3b      	ldr	r3, [r7, #32]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2208      	movs	r2, #8
 800c932:	4413      	add	r3, r2
 800c934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	6a3b      	ldr	r3, [r7, #32]
 800c93c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	1ad2      	subs	r2, r2, r3
 800c946:	2308      	movs	r3, #8
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d91e      	bls.n	800c98c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4413      	add	r3, r2
 800c954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d009      	beq.n	800c974 <pvPortMalloc+0xf4>
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	613b      	str	r3, [r7, #16]
 800c972:	e7fe      	b.n	800c972 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	1ad2      	subs	r2, r2, r3
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c986:	69b8      	ldr	r0, [r7, #24]
 800c988:	f000 f8f6 	bl	800cb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c98c:	4b1a      	ldr	r3, [pc, #104]	; (800c9f8 <pvPortMalloc+0x178>)
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	4a18      	ldr	r2, [pc, #96]	; (800c9f8 <pvPortMalloc+0x178>)
 800c998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c99a:	4b17      	ldr	r3, [pc, #92]	; (800c9f8 <pvPortMalloc+0x178>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4b18      	ldr	r3, [pc, #96]	; (800ca00 <pvPortMalloc+0x180>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d203      	bcs.n	800c9ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9a6:	4b14      	ldr	r3, [pc, #80]	; (800c9f8 <pvPortMalloc+0x178>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a15      	ldr	r2, [pc, #84]	; (800ca00 <pvPortMalloc+0x180>)
 800c9ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4b10      	ldr	r3, [pc, #64]	; (800c9f4 <pvPortMalloc+0x174>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	2200      	movs	r2, #0
 800c9c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9c2:	f7fe ff41 	bl	800b848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f003 0307 	and.w	r3, r3, #7
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d009      	beq.n	800c9e4 <pvPortMalloc+0x164>
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	60fb      	str	r3, [r7, #12]
 800c9e2:	e7fe      	b.n	800c9e2 <pvPortMalloc+0x162>
	return pvReturn;
 800c9e4:	69fb      	ldr	r3, [r7, #28]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3728      	adds	r7, #40	; 0x28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20004050 	.word	0x20004050
 800c9f4:	2000405c 	.word	0x2000405c
 800c9f8:	20004054 	.word	0x20004054
 800c9fc:	20004048 	.word	0x20004048
 800ca00:	20004058 	.word	0x20004058

0800ca04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d046      	beq.n	800caa4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca16:	2308      	movs	r3, #8
 800ca18:	425b      	negs	r3, r3
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	685a      	ldr	r2, [r3, #4]
 800ca28:	4b20      	ldr	r3, [pc, #128]	; (800caac <vPortFree+0xa8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d109      	bne.n	800ca46 <vPortFree+0x42>
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	e7fe      	b.n	800ca44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d009      	beq.n	800ca62 <vPortFree+0x5e>
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	60bb      	str	r3, [r7, #8]
 800ca60:	e7fe      	b.n	800ca60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	4b11      	ldr	r3, [pc, #68]	; (800caac <vPortFree+0xa8>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d019      	beq.n	800caa4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d115      	bne.n	800caa4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b0b      	ldr	r3, [pc, #44]	; (800caac <vPortFree+0xa8>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	43db      	mvns	r3, r3
 800ca82:	401a      	ands	r2, r3
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca88:	f7fe fed0 	bl	800b82c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <vPortFree+0xac>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4413      	add	r3, r2
 800ca96:	4a06      	ldr	r2, [pc, #24]	; (800cab0 <vPortFree+0xac>)
 800ca98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca9a:	6938      	ldr	r0, [r7, #16]
 800ca9c:	f000 f86c 	bl	800cb78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800caa0:	f7fe fed2 	bl	800b848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800caa4:	bf00      	nop
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	2000405c 	.word	0x2000405c
 800cab0:	20004054 	.word	0x20004054

0800cab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cabe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cac0:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <prvHeapInit+0xac>)
 800cac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00c      	beq.n	800cae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3307      	adds	r3, #7
 800cad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 0307 	bic.w	r3, r3, #7
 800cada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	4a1f      	ldr	r2, [pc, #124]	; (800cb60 <prvHeapInit+0xac>)
 800cae4:	4413      	add	r3, r2
 800cae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800caec:	4a1d      	ldr	r2, [pc, #116]	; (800cb64 <prvHeapInit+0xb0>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <prvHeapInit+0xb0>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4413      	add	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb00:	2208      	movs	r2, #8
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	1a9b      	subs	r3, r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4a15      	ldr	r2, [pc, #84]	; (800cb68 <prvHeapInit+0xb4>)
 800cb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <prvHeapInit+0xb4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb1e:	4b12      	ldr	r3, [pc, #72]	; (800cb68 <prvHeapInit+0xb4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb34:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <prvHeapInit+0xb4>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <prvHeapInit+0xb8>)
 800cb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4a09      	ldr	r2, [pc, #36]	; (800cb70 <prvHeapInit+0xbc>)
 800cb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <prvHeapInit+0xc0>)
 800cb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	20000448 	.word	0x20000448
 800cb64:	20004048 	.word	0x20004048
 800cb68:	20004050 	.word	0x20004050
 800cb6c:	20004058 	.word	0x20004058
 800cb70:	20004054 	.word	0x20004054
 800cb74:	2000405c 	.word	0x2000405c

0800cb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb80:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <prvInsertBlockIntoFreeList+0xac>)
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	e002      	b.n	800cb8c <prvInsertBlockIntoFreeList+0x14>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d8f7      	bhi.n	800cb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d108      	bne.n	800cbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d118      	bne.n	800cc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d00d      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	e008      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbf6:	4b0c      	ldr	r3, [pc, #48]	; (800cc28 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	e003      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d002      	beq.n	800cc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc16:	bf00      	nop
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	20004048 	.word	0x20004048
 800cc28:	20004050 	.word	0x20004050

0800cc2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	330c      	adds	r3, #12
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f002 f96f 	bl	800ef24 <tcpip_send_msg_wait_sem>
 800cc46:	4603      	mov	r3, r0
 800cc48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d103      	bne.n	800cc5a <netconn_apimsg+0x2e>
    return apimsg->err;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc58:	e001      	b.n	800cc5e <netconn_apimsg+0x32>
  }
  return err;
 800cc5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08a      	sub	sp, #40	; 0x28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	603a      	str	r2, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
 800cc74:	460b      	mov	r3, r1
 800cc76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 ff83 	bl	800db88 <netconn_alloc>
 800cc82:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d054      	beq.n	800cd34 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cc8a:	79bb      	ldrb	r3, [r7, #6]
 800cc8c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cc92:	f107 030c 	add.w	r3, r7, #12
 800cc96:	4619      	mov	r1, r3
 800cc98:	4829      	ldr	r0, [pc, #164]	; (800cd40 <netconn_new_with_proto_and_callback+0xd8>)
 800cc9a:	f7ff ffc7 	bl	800cc2c <netconn_apimsg>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800cca4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d043      	beq.n	800cd34 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <netconn_new_with_proto_and_callback+0x58>
 800ccb4:	4b23      	ldr	r3, [pc, #140]	; (800cd44 <netconn_new_with_proto_and_callback+0xdc>)
 800ccb6:	2289      	movs	r2, #137	; 0x89
 800ccb8:	4923      	ldr	r1, [pc, #140]	; (800cd48 <netconn_new_with_proto_and_callback+0xe0>)
 800ccba:	4824      	ldr	r0, [pc, #144]	; (800cd4c <netconn_new_with_proto_and_callback+0xe4>)
 800ccbc:	f00c f888 	bl	8018dd0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	3310      	adds	r3, #16
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f00b ff03 	bl	8018ad0 <sys_mbox_valid>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d105      	bne.n	800ccdc <netconn_new_with_proto_and_callback+0x74>
 800ccd0:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <netconn_new_with_proto_and_callback+0xdc>)
 800ccd2:	228a      	movs	r2, #138	; 0x8a
 800ccd4:	491e      	ldr	r1, [pc, #120]	; (800cd50 <netconn_new_with_proto_and_callback+0xe8>)
 800ccd6:	481d      	ldr	r0, [pc, #116]	; (800cd4c <netconn_new_with_proto_and_callback+0xe4>)
 800ccd8:	f00c f87a 	bl	8018dd0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	3314      	adds	r3, #20
 800cce0:	4618      	mov	r0, r3
 800cce2:	f00b fef5 	bl	8018ad0 <sys_mbox_valid>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d005      	beq.n	800ccf8 <netconn_new_with_proto_and_callback+0x90>
 800ccec:	4b15      	ldr	r3, [pc, #84]	; (800cd44 <netconn_new_with_proto_and_callback+0xdc>)
 800ccee:	228c      	movs	r2, #140	; 0x8c
 800ccf0:	4918      	ldr	r1, [pc, #96]	; (800cd54 <netconn_new_with_proto_and_callback+0xec>)
 800ccf2:	4816      	ldr	r0, [pc, #88]	; (800cd4c <netconn_new_with_proto_and_callback+0xe4>)
 800ccf4:	f00c f86c 	bl	8018dd0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfa:	330c      	adds	r3, #12
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f00b ff78 	bl	8018bf2 <sys_sem_valid>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d105      	bne.n	800cd14 <netconn_new_with_proto_and_callback+0xac>
 800cd08:	4b0e      	ldr	r3, [pc, #56]	; (800cd44 <netconn_new_with_proto_and_callback+0xdc>)
 800cd0a:	228f      	movs	r2, #143	; 0x8f
 800cd0c:	4912      	ldr	r1, [pc, #72]	; (800cd58 <netconn_new_with_proto_and_callback+0xf0>)
 800cd0e:	480f      	ldr	r0, [pc, #60]	; (800cd4c <netconn_new_with_proto_and_callback+0xe4>)
 800cd10:	f00c f85e 	bl	8018dd0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	330c      	adds	r3, #12
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f00b ff5d 	bl	8018bd8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	3310      	adds	r3, #16
 800cd22:	4618      	mov	r0, r3
 800cd24:	f00b fe38 	bl	8018998 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cd28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd2a:	2007      	movs	r0, #7
 800cd2c:	f002 fddc 	bl	800f8e8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cd30:	2300      	movs	r3, #0
 800cd32:	e000      	b.n	800cd36 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3728      	adds	r7, #40	; 0x28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	0800db31 	.word	0x0800db31
 800cd44:	08019c98 	.word	0x08019c98
 800cd48:	08019cf0 	.word	0x08019cf0
 800cd4c:	08019d14 	.word	0x08019d14
 800cd50:	08019d3c 	.word	0x08019d3c
 800cd54:	08019d54 	.word	0x08019d54
 800cd58:	08019d78 	.word	0x08019d78

0800cd5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <netconn_delete+0x12>
    return ERR_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e016      	b.n	800cd9c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cd72:	2329      	movs	r3, #41	; 0x29
 800cd74:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800cd76:	f107 0308 	add.w	r3, r7, #8
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4809      	ldr	r0, [pc, #36]	; (800cda4 <netconn_delete+0x48>)
 800cd7e:	f7ff ff55 	bl	800cc2c <netconn_apimsg>
 800cd82:	4603      	mov	r3, r0
 800cd84:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800cd86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <netconn_delete+0x38>
    return err;
 800cd8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd92:	e003      	b.n	800cd9c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 ff67 	bl	800dc68 <netconn_free>

  return ERR_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	0800e0ed 	.word	0x0800e0ed

0800cda8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	; 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d108      	bne.n	800cdce <netconn_bind+0x26>
 800cdbc:	4b11      	ldr	r3, [pc, #68]	; (800ce04 <netconn_bind+0x5c>)
 800cdbe:	22ff      	movs	r2, #255	; 0xff
 800cdc0:	4911      	ldr	r1, [pc, #68]	; (800ce08 <netconn_bind+0x60>)
 800cdc2:	4812      	ldr	r0, [pc, #72]	; (800ce0c <netconn_bind+0x64>)
 800cdc4:	f00c f804 	bl	8018dd0 <iprintf>
 800cdc8:	f06f 030f 	mvn.w	r3, #15
 800cdcc:	e015      	b.n	800cdfa <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800cdd4:	4b0e      	ldr	r3, [pc, #56]	; (800ce10 <netconn_bind+0x68>)
 800cdd6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800cde0:	88fb      	ldrh	r3, [r7, #6]
 800cde2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800cde4:	f107 0310 	add.w	r3, r7, #16
 800cde8:	4619      	mov	r1, r3
 800cdea:	480a      	ldr	r0, [pc, #40]	; (800ce14 <netconn_bind+0x6c>)
 800cdec:	f7ff ff1e 	bl	800cc2c <netconn_apimsg>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800cdf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3728      	adds	r7, #40	; 0x28
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	08019c98 	.word	0x08019c98
 800ce08:	08019df4 	.word	0x08019df4
 800ce0c:	08019d14 	.word	0x08019d14
 800ce10:	0801c6dc 	.word	0x0801c6dc
 800ce14:	0800e2f1 	.word	0x0800e2f1

0800ce18 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d109      	bne.n	800ce3e <netconn_listen_with_backlog+0x26>
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <netconn_listen_with_backlog+0x48>)
 800ce2c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce30:	490c      	ldr	r1, [pc, #48]	; (800ce64 <netconn_listen_with_backlog+0x4c>)
 800ce32:	480d      	ldr	r0, [pc, #52]	; (800ce68 <netconn_listen_with_backlog+0x50>)
 800ce34:	f00b ffcc 	bl	8018dd0 <iprintf>
 800ce38:	f06f 030f 	mvn.w	r3, #15
 800ce3c:	e00b      	b.n	800ce56 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ce42:	f107 0308 	add.w	r3, r7, #8
 800ce46:	4619      	mov	r1, r3
 800ce48:	4808      	ldr	r0, [pc, #32]	; (800ce6c <netconn_listen_with_backlog+0x54>)
 800ce4a:	f7ff feef 	bl	800cc2c <netconn_apimsg>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800ce52:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3720      	adds	r7, #32
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	08019c98 	.word	0x08019c98
 800ce64:	08019e54 	.word	0x08019e54
 800ce68:	08019d14 	.word	0x08019d14
 800ce6c:	0800e3b1 	.word	0x0800e3b1

0800ce70 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d109      	bne.n	800ce94 <netconn_accept+0x24>
 800ce80:	4b34      	ldr	r3, [pc, #208]	; (800cf54 <netconn_accept+0xe4>)
 800ce82:	f240 128d 	movw	r2, #397	; 0x18d
 800ce86:	4934      	ldr	r1, [pc, #208]	; (800cf58 <netconn_accept+0xe8>)
 800ce88:	4834      	ldr	r0, [pc, #208]	; (800cf5c <netconn_accept+0xec>)
 800ce8a:	f00b ffa1 	bl	8018dd0 <iprintf>
 800ce8e:	f06f 030f 	mvn.w	r3, #15
 800ce92:	e05b      	b.n	800cf4c <netconn_accept+0xdc>
  *new_conn = NULL;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d109      	bne.n	800ceb4 <netconn_accept+0x44>
 800cea0:	4b2c      	ldr	r3, [pc, #176]	; (800cf54 <netconn_accept+0xe4>)
 800cea2:	f240 128f 	movw	r2, #399	; 0x18f
 800cea6:	492e      	ldr	r1, [pc, #184]	; (800cf60 <netconn_accept+0xf0>)
 800cea8:	482c      	ldr	r0, [pc, #176]	; (800cf5c <netconn_accept+0xec>)
 800ceaa:	f00b ff91 	bl	8018dd0 <iprintf>
 800ceae:	f06f 030f 	mvn.w	r3, #15
 800ceb2:	e04b      	b.n	800cf4c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ceba:	f113 0f0c 	cmn.w	r3, #12
 800cebe:	da03      	bge.n	800cec8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cec6:	e041      	b.n	800cf4c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3314      	adds	r3, #20
 800cecc:	4618      	mov	r0, r3
 800cece:	f00b fdff 	bl	8018ad0 <sys_mbox_valid>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <netconn_accept+0x6e>
    return ERR_CLSD;
 800ced8:	f06f 030e 	mvn.w	r3, #14
 800cedc:	e036      	b.n	800cf4c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	3314      	adds	r3, #20
 800cee2:	f107 010c 	add.w	r1, r7, #12
 800cee6:	2200      	movs	r2, #0
 800cee8:	4618      	mov	r0, r3
 800ceea:	f00b fd96 	bl	8018a1a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <netconn_accept+0x96>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefe:	2200      	movs	r2, #0
 800cf00:	2101      	movs	r1, #1
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	4a16      	ldr	r2, [pc, #88]	; (800cf64 <netconn_accept+0xf4>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d102      	bne.n	800cf14 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800cf0e:	f06f 030c 	mvn.w	r3, #12
 800cf12:	e01b      	b.n	800cf4c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d114      	bne.n	800cf44 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00e      	beq.n	800cf3e <netconn_accept+0xce>
 800cf20:	f00b fef2 	bl	8018d08 <sys_arch_protect>
 800cf24:	6138      	str	r0, [r7, #16]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cf2c:	f113 0f0c 	cmn.w	r3, #12
 800cf30:	db02      	blt.n	800cf38 <netconn_accept+0xc8>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	22f1      	movs	r2, #241	; 0xf1
 800cf36:	721a      	strb	r2, [r3, #8]
 800cf38:	6938      	ldr	r0, [r7, #16]
 800cf3a:	f00b fef3 	bl	8018d24 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800cf3e:	f06f 030e 	mvn.w	r3, #14
 800cf42:	e003      	b.n	800cf4c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cf4a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3718      	adds	r7, #24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	08019c98 	.word	0x08019c98
 800cf58:	08019e74 	.word	0x08019e74
 800cf5c:	08019d14 	.word	0x08019d14
 800cf60:	08019e94 	.word	0x08019e94
 800cf64:	200048ec 	.word	0x200048ec

0800cf68 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d109      	bne.n	800cf90 <netconn_recv_data+0x28>
 800cf7c:	4b5c      	ldr	r3, [pc, #368]	; (800d0f0 <netconn_recv_data+0x188>)
 800cf7e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800cf82:	495c      	ldr	r1, [pc, #368]	; (800d0f4 <netconn_recv_data+0x18c>)
 800cf84:	485c      	ldr	r0, [pc, #368]	; (800d0f8 <netconn_recv_data+0x190>)
 800cf86:	f00b ff23 	bl	8018dd0 <iprintf>
 800cf8a:	f06f 030f 	mvn.w	r3, #15
 800cf8e:	e0aa      	b.n	800d0e6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d109      	bne.n	800cfb0 <netconn_recv_data+0x48>
 800cf9c:	4b54      	ldr	r3, [pc, #336]	; (800d0f0 <netconn_recv_data+0x188>)
 800cf9e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800cfa2:	4956      	ldr	r1, [pc, #344]	; (800d0fc <netconn_recv_data+0x194>)
 800cfa4:	4854      	ldr	r0, [pc, #336]	; (800d0f8 <netconn_recv_data+0x190>)
 800cfa6:	f00b ff13 	bl	8018dd0 <iprintf>
 800cfaa:	f06f 030f 	mvn.w	r3, #15
 800cfae:	e09a      	b.n	800d0e6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfb8:	2b10      	cmp	r3, #16
 800cfba:	d115      	bne.n	800cfe8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3310      	adds	r3, #16
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f00b fd85 	bl	8018ad0 <sys_mbox_valid>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10d      	bne.n	800cfe8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	3314      	adds	r3, #20
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f00b fd7d 	bl	8018ad0 <sys_mbox_valid>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <netconn_recv_data+0x7a>
 800cfdc:	f06f 030a 	mvn.w	r3, #10
 800cfe0:	e081      	b.n	800d0e6 <netconn_recv_data+0x17e>
 800cfe2:	f06f 030e 	mvn.w	r3, #14
 800cfe6:	e07e      	b.n	800d0e6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3310      	adds	r3, #16
 800cfec:	4618      	mov	r0, r3
 800cfee:	f00b fd6f 	bl	8018ad0 <sys_mbox_valid>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d109      	bne.n	800d00c <netconn_recv_data+0xa4>
 800cff8:	4b3d      	ldr	r3, [pc, #244]	; (800d0f0 <netconn_recv_data+0x188>)
 800cffa:	f240 12f5 	movw	r2, #501	; 0x1f5
 800cffe:	4940      	ldr	r1, [pc, #256]	; (800d100 <netconn_recv_data+0x198>)
 800d000:	483d      	ldr	r0, [pc, #244]	; (800d0f8 <netconn_recv_data+0x190>)
 800d002:	f00b fee5 	bl	8018dd0 <iprintf>
 800d006:	f06f 030a 	mvn.w	r3, #10
 800d00a:	e06c      	b.n	800d0e6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d012:	f113 0f0c 	cmn.w	r3, #12
 800d016:	da03      	bge.n	800d020 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d01e:	e062      	b.n	800d0e6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3310      	adds	r3, #16
 800d024:	f107 0120 	add.w	r1, r7, #32
 800d028:	2200      	movs	r2, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f00b fcf5 	bl	8018a1a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d038:	2b10      	cmp	r3, #16
 800d03a:	d138      	bne.n	800d0ae <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	891b      	ldrh	r3, [r3, #8]
 800d04a:	617b      	str	r3, [r7, #20]
 800d04c:	e001      	b.n	800d052 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d04e:	2301      	movs	r3, #1
 800d050:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d052:	f107 030c 	add.w	r3, r7, #12
 800d056:	4619      	mov	r1, r3
 800d058:	482a      	ldr	r0, [pc, #168]	; (800d104 <netconn_recv_data+0x19c>)
 800d05a:	f7ff fde7 	bl	800cc2c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d120      	bne.n	800d0a6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <netconn_recv_data+0x110>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	2200      	movs	r2, #0
 800d072:	2101      	movs	r1, #1
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10b      	bne.n	800d098 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d003      	beq.n	800d092 <netconn_recv_data+0x12a>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d090:	e029      	b.n	800d0e6 <netconn_recv_data+0x17e>
 800d092:	f06f 030d 	mvn.w	r3, #13
 800d096:	e026      	b.n	800d0e6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d098:	2101      	movs	r1, #1
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f926 	bl	800d2ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d0a0:	f06f 030e 	mvn.w	r3, #14
 800d0a4:	e01f      	b.n	800d0e6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	891b      	ldrh	r3, [r3, #8]
 800d0aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d0ac:	e00d      	b.n	800d0ca <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d106      	bne.n	800d0c2 <netconn_recv_data+0x15a>
 800d0b4:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <netconn_recv_data+0x188>)
 800d0b6:	f240 223e 	movw	r2, #574	; 0x23e
 800d0ba:	4913      	ldr	r1, [pc, #76]	; (800d108 <netconn_recv_data+0x1a0>)
 800d0bc:	480e      	ldr	r0, [pc, #56]	; (800d0f8 <netconn_recv_data+0x190>)
 800d0be:	f00b fe87 	bl	8018dd0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	891b      	ldrh	r3, [r3, #8]
 800d0c8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d005      	beq.n	800d0de <netconn_recv_data+0x176>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0d8:	2101      	movs	r1, #1
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d0de:	6a3a      	ldr	r2, [r7, #32]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3728      	adds	r7, #40	; 0x28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	08019c98 	.word	0x08019c98
 800d0f4:	08019eb4 	.word	0x08019eb4
 800d0f8:	08019d14 	.word	0x08019d14
 800d0fc:	08019ed4 	.word	0x08019ed4
 800d100:	08019ef0 	.word	0x08019ef0
 800d104:	0800e535 	.word	0x0800e535
 800d108:	08019f10 	.word	0x08019f10

0800d10c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <netconn_recv+0x28>
 800d120:	4b31      	ldr	r3, [pc, #196]	; (800d1e8 <netconn_recv+0xdc>)
 800d122:	f44f 721d 	mov.w	r2, #628	; 0x274
 800d126:	4931      	ldr	r1, [pc, #196]	; (800d1ec <netconn_recv+0xe0>)
 800d128:	4831      	ldr	r0, [pc, #196]	; (800d1f0 <netconn_recv+0xe4>)
 800d12a:	f00b fe51 	bl	8018dd0 <iprintf>
 800d12e:	f06f 030f 	mvn.w	r3, #15
 800d132:	e054      	b.n	800d1de <netconn_recv+0xd2>
  *new_buf = NULL;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d109      	bne.n	800d154 <netconn_recv+0x48>
 800d140:	4b29      	ldr	r3, [pc, #164]	; (800d1e8 <netconn_recv+0xdc>)
 800d142:	f240 2276 	movw	r2, #630	; 0x276
 800d146:	492b      	ldr	r1, [pc, #172]	; (800d1f4 <netconn_recv+0xe8>)
 800d148:	4829      	ldr	r0, [pc, #164]	; (800d1f0 <netconn_recv+0xe4>)
 800d14a:	f00b fe41 	bl	8018dd0 <iprintf>
 800d14e:	f06f 030f 	mvn.w	r3, #15
 800d152:	e044      	b.n	800d1de <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d15c:	2b10      	cmp	r3, #16
 800d15e:	d139      	bne.n	800d1d4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d164:	2006      	movs	r0, #6
 800d166:	f002 fb49 	bl	800f7fc <memp_malloc>
 800d16a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d102      	bne.n	800d178 <netconn_recv+0x6c>
      return ERR_MEM;
 800d172:	f04f 33ff 	mov.w	r3, #4294967295
 800d176:	e032      	b.n	800d1de <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d178:	f107 030c 	add.w	r3, r7, #12
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff fef2 	bl	800cf68 <netconn_recv_data>
 800d184:	4603      	mov	r3, r0
 800d186:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d006      	beq.n	800d19e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d190:	6979      	ldr	r1, [r7, #20]
 800d192:	2006      	movs	r0, #6
 800d194:	f002 fba8 	bl	800f8e8 <memp_free>
      return err;
 800d198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d19c:	e01f      	b.n	800d1de <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <netconn_recv+0xa6>
 800d1a4:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <netconn_recv+0xdc>)
 800d1a6:	f240 228a 	movw	r2, #650	; 0x28a
 800d1aa:	4913      	ldr	r1, [pc, #76]	; (800d1f8 <netconn_recv+0xec>)
 800d1ac:	4810      	ldr	r0, [pc, #64]	; (800d1f0 <netconn_recv+0xe4>)
 800d1ae:	f00b fe0f 	bl	8018dd0 <iprintf>

    buf->p = p;
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e004      	b.n	800d1de <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff fec6 	bl	800cf68 <netconn_recv_data>
 800d1dc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	08019c98 	.word	0x08019c98
 800d1ec:	08019eb4 	.word	0x08019eb4
 800d1f0:	08019d14 	.word	0x08019d14
 800d1f4:	08019ed4 	.word	0x08019ed4
 800d1f8:	08019f1c 	.word	0x08019f1c

0800d1fc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08a      	sub	sp, #40	; 0x28
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d109      	bne.n	800d224 <netconn_write_partly+0x28>
 800d210:	4b31      	ldr	r3, [pc, #196]	; (800d2d8 <netconn_write_partly+0xdc>)
 800d212:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d216:	4931      	ldr	r1, [pc, #196]	; (800d2dc <netconn_write_partly+0xe0>)
 800d218:	4831      	ldr	r0, [pc, #196]	; (800d2e0 <netconn_write_partly+0xe4>)
 800d21a:	f00b fdd9 	bl	8018dd0 <iprintf>
 800d21e:	f06f 030f 	mvn.w	r3, #15
 800d222:	e054      	b.n	800d2ce <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d22c:	2b10      	cmp	r3, #16
 800d22e:	d009      	beq.n	800d244 <netconn_write_partly+0x48>
 800d230:	4b29      	ldr	r3, [pc, #164]	; (800d2d8 <netconn_write_partly+0xdc>)
 800d232:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d236:	492b      	ldr	r1, [pc, #172]	; (800d2e4 <netconn_write_partly+0xe8>)
 800d238:	4829      	ldr	r0, [pc, #164]	; (800d2e0 <netconn_write_partly+0xe4>)
 800d23a:	f00b fdc9 	bl	8018dd0 <iprintf>
 800d23e:	f06f 0305 	mvn.w	r3, #5
 800d242:	e044      	b.n	800d2ce <netconn_write_partly+0xd2>
  if (size == 0) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <netconn_write_partly+0x52>
    return ERR_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e03f      	b.n	800d2ce <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	7f1b      	ldrb	r3, [r3, #28]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b00      	cmp	r3, #0
 800d258:	d104      	bne.n	800d264 <netconn_write_partly+0x68>
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	f003 0304 	and.w	r3, r3, #4
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <netconn_write_partly+0x6c>
 800d264:	2301      	movs	r3, #1
 800d266:	e000      	b.n	800d26a <netconn_write_partly+0x6e>
 800d268:	2300      	movs	r3, #0
 800d26a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d26e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d272:	2b00      	cmp	r3, #0
 800d274:	d005      	beq.n	800d282 <netconn_write_partly+0x86>
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d27c:	f06f 0305 	mvn.w	r3, #5
 800d280:	e025      	b.n	800d2ce <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d294:	f107 0310 	add.w	r3, r7, #16
 800d298:	4619      	mov	r1, r3
 800d29a:	4813      	ldr	r0, [pc, #76]	; (800d2e8 <netconn_write_partly+0xec>)
 800d29c:	f7ff fcc6 	bl	800cc2c <netconn_apimsg>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d2a6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10d      	bne.n	800d2ca <netconn_write_partly+0xce>
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00a      	beq.n	800d2ca <netconn_write_partly+0xce>
    if (dontblock) {
 800d2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d2bc:	69fa      	ldr	r2, [r7, #28]
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	601a      	str	r2, [r3, #0]
 800d2c2:	e002      	b.n	800d2ca <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d2ca:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3728      	adds	r7, #40	; 0x28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	08019c98 	.word	0x08019c98
 800d2dc:	08019f44 	.word	0x08019f44
 800d2e0:	08019d14 	.word	0x08019d14
 800d2e4:	08019f60 	.word	0x08019f60
 800d2e8:	0800e915 	.word	0x0800e915

0800d2ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d109      	bne.n	800d312 <netconn_close_shutdown+0x26>
 800d2fe:	4b0f      	ldr	r3, [pc, #60]	; (800d33c <netconn_close_shutdown+0x50>)
 800d300:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d304:	490e      	ldr	r1, [pc, #56]	; (800d340 <netconn_close_shutdown+0x54>)
 800d306:	480f      	ldr	r0, [pc, #60]	; (800d344 <netconn_close_shutdown+0x58>)
 800d308:	f00b fd62 	bl	8018dd0 <iprintf>
 800d30c:	f06f 030f 	mvn.w	r3, #15
 800d310:	e00f      	b.n	800d332 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d316:	78fb      	ldrb	r3, [r7, #3]
 800d318:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d31a:	2329      	movs	r3, #41	; 0x29
 800d31c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d31e:	f107 0308 	add.w	r3, r7, #8
 800d322:	4619      	mov	r1, r3
 800d324:	4808      	ldr	r0, [pc, #32]	; (800d348 <netconn_close_shutdown+0x5c>)
 800d326:	f7ff fc81 	bl	800cc2c <netconn_apimsg>
 800d32a:	4603      	mov	r3, r0
 800d32c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d32e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	08019c98 	.word	0x08019c98
 800d340:	08019f84 	.word	0x08019f84
 800d344:	08019d14 	.word	0x08019d14
 800d348:	0800ea75 	.word	0x0800ea75

0800d34c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800d354:	2103      	movs	r1, #3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff ffc8 	bl	800d2ec <netconn_close_shutdown>
 800d35c:	4603      	mov	r3, r0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d105      	bne.n	800d388 <recv_udp+0x20>
 800d37c:	4b34      	ldr	r3, [pc, #208]	; (800d450 <recv_udp+0xe8>)
 800d37e:	22b1      	movs	r2, #177	; 0xb1
 800d380:	4934      	ldr	r1, [pc, #208]	; (800d454 <recv_udp+0xec>)
 800d382:	4835      	ldr	r0, [pc, #212]	; (800d458 <recv_udp+0xf0>)
 800d384:	f00b fd24 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d105      	bne.n	800d39a <recv_udp+0x32>
 800d38e:	4b30      	ldr	r3, [pc, #192]	; (800d450 <recv_udp+0xe8>)
 800d390:	22b2      	movs	r2, #178	; 0xb2
 800d392:	4932      	ldr	r1, [pc, #200]	; (800d45c <recv_udp+0xf4>)
 800d394:	4830      	ldr	r0, [pc, #192]	; (800d458 <recv_udp+0xf0>)
 800d396:	f00b fd1b 	bl	8018dd0 <iprintf>
  conn = (struct netconn *)arg;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d103      	bne.n	800d3ac <recv_udp+0x44>
    pbuf_free(p);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f003 f837 	bl	8010418 <pbuf_free>
    return;
 800d3aa:	e04d      	b.n	800d448 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	68ba      	ldr	r2, [r7, #8]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d005      	beq.n	800d3c2 <recv_udp+0x5a>
 800d3b6:	4b26      	ldr	r3, [pc, #152]	; (800d450 <recv_udp+0xe8>)
 800d3b8:	22ba      	movs	r2, #186	; 0xba
 800d3ba:	4929      	ldr	r1, [pc, #164]	; (800d460 <recv_udp+0xf8>)
 800d3bc:	4826      	ldr	r0, [pc, #152]	; (800d458 <recv_udp+0xf0>)
 800d3be:	f00b fd07 	bl	8018dd0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	3310      	adds	r3, #16
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f00b fb82 	bl	8018ad0 <sys_mbox_valid>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d103      	bne.n	800d3da <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f003 f820 	bl	8010418 <pbuf_free>
    return;
 800d3d8:	e036      	b.n	800d448 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d3da:	2006      	movs	r0, #6
 800d3dc:	f002 fa0e 	bl	800f7fc <memp_malloc>
 800d3e0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d103      	bne.n	800d3f0 <recv_udp+0x88>
    pbuf_free(p);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f003 f815 	bl	8010418 <pbuf_free>
    return;
 800d3ee:	e02b      	b.n	800d448 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <recv_udp+0xa0>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	e000      	b.n	800d40a <recv_udp+0xa2>
 800d408:	2300      	movs	r3, #0
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d412:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	891b      	ldrh	r3, [r3, #8]
 800d418:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	3310      	adds	r3, #16
 800d41e:	69b9      	ldr	r1, [r7, #24]
 800d420:	4618      	mov	r0, r3
 800d422:	f00b fae0 	bl	80189e6 <sys_mbox_trypost>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d003      	beq.n	800d434 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d42c:	69b8      	ldr	r0, [r7, #24]
 800d42e:	f001 fbc9 	bl	800ebc4 <netbuf_delete>
    return;
 800d432:	e009      	b.n	800d448 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <recv_udp+0xe0>
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d440:	8afa      	ldrh	r2, [r7, #22]
 800d442:	2100      	movs	r1, #0
 800d444:	69f8      	ldr	r0, [r7, #28]
 800d446:	4798      	blx	r3
  }
}
 800d448:	3720      	adds	r7, #32
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	08019fa0 	.word	0x08019fa0
 800d454:	08019ff8 	.word	0x08019ff8
 800d458:	0801a01c 	.word	0x0801a01c
 800d45c:	0801a044 	.word	0x0801a044
 800d460:	0801a064 	.word	0x0801a064

0800d464 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d105      	bne.n	800d484 <recv_tcp+0x20>
 800d478:	4b39      	ldr	r3, [pc, #228]	; (800d560 <recv_tcp+0xfc>)
 800d47a:	22f9      	movs	r2, #249	; 0xf9
 800d47c:	4939      	ldr	r1, [pc, #228]	; (800d564 <recv_tcp+0x100>)
 800d47e:	483a      	ldr	r0, [pc, #232]	; (800d568 <recv_tcp+0x104>)
 800d480:	f00b fca6 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d105      	bne.n	800d496 <recv_tcp+0x32>
 800d48a:	4b35      	ldr	r3, [pc, #212]	; (800d560 <recv_tcp+0xfc>)
 800d48c:	22fa      	movs	r2, #250	; 0xfa
 800d48e:	4937      	ldr	r1, [pc, #220]	; (800d56c <recv_tcp+0x108>)
 800d490:	4835      	ldr	r0, [pc, #212]	; (800d568 <recv_tcp+0x104>)
 800d492:	f00b fc9d 	bl	8018dd0 <iprintf>
  conn = (struct netconn *)arg;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d102      	bne.n	800d4a6 <recv_tcp+0x42>
    return ERR_VAL;
 800d4a0:	f06f 0305 	mvn.w	r3, #5
 800d4a4:	e057      	b.n	800d556 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d006      	beq.n	800d4be <recv_tcp+0x5a>
 800d4b0:	4b2b      	ldr	r3, [pc, #172]	; (800d560 <recv_tcp+0xfc>)
 800d4b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4b6:	492e      	ldr	r1, [pc, #184]	; (800d570 <recv_tcp+0x10c>)
 800d4b8:	482b      	ldr	r0, [pc, #172]	; (800d568 <recv_tcp+0x104>)
 800d4ba:	f00b fc89 	bl	8018dd0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	3310      	adds	r3, #16
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f00b fb04 	bl	8018ad0 <sys_mbox_valid>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10d      	bne.n	800d4ea <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d008      	beq.n	800d4e6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	891b      	ldrh	r3, [r3, #8]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	68b8      	ldr	r0, [r7, #8]
 800d4dc:	f003 fe76 	bl	80111cc <tcp_recved>
      pbuf_free(p);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f002 ff99 	bl	8010418 <pbuf_free>
    }
    return ERR_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e035      	b.n	800d556 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800d4ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d011      	beq.n	800d516 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00e      	beq.n	800d516 <recv_tcp+0xb2>
 800d4f8:	f00b fc06 	bl	8018d08 <sys_arch_protect>
 800d4fc:	6178      	str	r0, [r7, #20]
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d504:	f113 0f0c 	cmn.w	r3, #12
 800d508:	db02      	blt.n	800d510 <recv_tcp+0xac>
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	78fa      	ldrb	r2, [r7, #3]
 800d50e:	721a      	strb	r2, [r3, #8]
 800d510:	6978      	ldr	r0, [r7, #20]
 800d512:	f00b fc07 	bl	8018d24 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <recv_tcp+0xc0>
    len = p->tot_len;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	891b      	ldrh	r3, [r3, #8]
 800d520:	83fb      	strh	r3, [r7, #30]
 800d522:	e001      	b.n	800d528 <recv_tcp+0xc4>
  } else {
    len = 0;
 800d524:	2300      	movs	r3, #0
 800d526:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	3310      	adds	r3, #16
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	4618      	mov	r0, r3
 800d530:	f00b fa59 	bl	80189e6 <sys_mbox_trypost>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d002      	beq.n	800d540 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d53a:	f04f 33ff 	mov.w	r3, #4294967295
 800d53e:	e00a      	b.n	800d556 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d544:	2b00      	cmp	r3, #0
 800d546:	d005      	beq.n	800d554 <recv_tcp+0xf0>
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54c:	8bfa      	ldrh	r2, [r7, #30]
 800d54e:	2100      	movs	r1, #0
 800d550:	69b8      	ldr	r0, [r7, #24]
 800d552:	4798      	blx	r3
  }

  return ERR_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	08019fa0 	.word	0x08019fa0
 800d564:	0801a084 	.word	0x0801a084
 800d568:	0801a01c 	.word	0x0801a01c
 800d56c:	0801a0a8 	.word	0x0801a0a8
 800d570:	0801a0c8 	.word	0x0801a0c8

0800d574 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d106      	bne.n	800d596 <poll_tcp+0x22>
 800d588:	4b29      	ldr	r3, [pc, #164]	; (800d630 <poll_tcp+0xbc>)
 800d58a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d58e:	4929      	ldr	r1, [pc, #164]	; (800d634 <poll_tcp+0xc0>)
 800d590:	4829      	ldr	r0, [pc, #164]	; (800d638 <poll_tcp+0xc4>)
 800d592:	f00b fc1d 	bl	8018dd0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	785b      	ldrb	r3, [r3, #1]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d104      	bne.n	800d5a8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d59e:	2101      	movs	r1, #1
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f001 f813 	bl	800e5cc <lwip_netconn_do_writemore>
 800d5a6:	e016      	b.n	800d5d6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	785b      	ldrb	r3, [r3, #1]
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d112      	bne.n	800d5d6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <poll_tcp+0x5a>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	7a5b      	ldrb	r3, [r3, #9]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d005      	beq.n	800d5ce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	7a5a      	ldrb	r2, [r3, #9]
 800d5c8:	3a01      	subs	r2, #1
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fc13 	bl	800ddfc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	7f1b      	ldrb	r3, [r3, #28]
 800d5da:	f003 0310 	and.w	r3, r3, #16
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d021      	beq.n	800d626 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01d      	beq.n	800d626 <poll_tcp+0xb2>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5f2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d5f6:	d316      	bcc.n	800d626 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d600:	2b04      	cmp	r3, #4
 800d602:	d810      	bhi.n	800d626 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	7f1b      	ldrb	r3, [r3, #28]
 800d608:	f023 0310 	bic.w	r3, r3, #16
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <poll_tcp+0xb2>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d61e:	2200      	movs	r2, #0
 800d620:	2102      	movs	r1, #2
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	08019fa0 	.word	0x08019fa0
 800d634:	0801a0e8 	.word	0x0801a0e8
 800d638:	0801a01c 	.word	0x0801a01c

0800d63c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	4613      	mov	r3, r2
 800d648:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <sent_tcp+0x26>
 800d654:	4b20      	ldr	r3, [pc, #128]	; (800d6d8 <sent_tcp+0x9c>)
 800d656:	f240 1261 	movw	r2, #353	; 0x161
 800d65a:	4920      	ldr	r1, [pc, #128]	; (800d6dc <sent_tcp+0xa0>)
 800d65c:	4820      	ldr	r0, [pc, #128]	; (800d6e0 <sent_tcp+0xa4>)
 800d65e:	f00b fbb7 	bl	8018dd0 <iprintf>

  if (conn) {
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d032      	beq.n	800d6ce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	785b      	ldrb	r3, [r3, #1]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d104      	bne.n	800d67a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d670:	2101      	movs	r1, #1
 800d672:	6978      	ldr	r0, [r7, #20]
 800d674:	f000 ffaa 	bl	800e5cc <lwip_netconn_do_writemore>
 800d678:	e007      	b.n	800d68a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	785b      	ldrb	r3, [r3, #1]
 800d67e:	2b04      	cmp	r3, #4
 800d680:	d103      	bne.n	800d68a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d682:	2101      	movs	r1, #1
 800d684:	6978      	ldr	r0, [r7, #20]
 800d686:	f000 fbb9 	bl	800ddfc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d01d      	beq.n	800d6ce <sent_tcp+0x92>
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d69a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d69e:	d316      	bcc.n	800d6ce <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d6a8:	2b04      	cmp	r3, #4
 800d6aa:	d810      	bhi.n	800d6ce <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	7f1b      	ldrb	r3, [r3, #28]
 800d6b0:	f023 0310 	bic.w	r3, r3, #16
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d005      	beq.n	800d6ce <sent_tcp+0x92>
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c6:	88fa      	ldrh	r2, [r7, #6]
 800d6c8:	2102      	movs	r1, #2
 800d6ca:	6978      	ldr	r0, [r7, #20]
 800d6cc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	08019fa0 	.word	0x08019fa0
 800d6dc:	0801a0e8 	.word	0x0801a0e8
 800d6e0:	0801a01c 	.word	0x0801a01c

0800d6e4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08a      	sub	sp, #40	; 0x28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <err_tcp+0x24>
 800d6fa:	4b6c      	ldr	r3, [pc, #432]	; (800d8ac <err_tcp+0x1c8>)
 800d6fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d700:	496b      	ldr	r1, [pc, #428]	; (800d8b0 <err_tcp+0x1cc>)
 800d702:	486c      	ldr	r0, [pc, #432]	; (800d8b4 <err_tcp+0x1d0>)
 800d704:	f00b fb64 	bl	8018dd0 <iprintf>

  conn->pcb.tcp = NULL;
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	2200      	movs	r2, #0
 800d70c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	785b      	ldrb	r3, [r3, #1]
 800d712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	2200      	movs	r2, #0
 800d71a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800d71c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d720:	2b04      	cmp	r3, #4
 800d722:	d114      	bne.n	800d74e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d018      	beq.n	800d760 <err_tcp+0x7c>
 800d72e:	f00b faeb 	bl	8018d08 <sys_arch_protect>
 800d732:	61b8      	str	r0, [r7, #24]
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d73a:	f113 0f0c 	cmn.w	r3, #12
 800d73e:	db02      	blt.n	800d746 <err_tcp+0x62>
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	2200      	movs	r2, #0
 800d744:	721a      	strb	r2, [r3, #8]
 800d746:	69b8      	ldr	r0, [r7, #24]
 800d748:	f00b faec 	bl	8018d24 <sys_arch_unprotect>
 800d74c:	e008      	b.n	800d760 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800d74e:	f00b fadb 	bl	8018d08 <sys_arch_protect>
 800d752:	61f8      	str	r0, [r7, #28]
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	721a      	strb	r2, [r3, #8]
 800d75a:	69f8      	ldr	r0, [r7, #28]
 800d75c:	f00b fae2 	bl	8018d24 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d764:	2b00      	cmp	r3, #0
 800d766:	d005      	beq.n	800d774 <err_tcp+0x90>
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76c:	2200      	movs	r2, #0
 800d76e:	2104      	movs	r1, #4
 800d770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d772:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <err_tcp+0xa4>
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d780:	2200      	movs	r2, #0
 800d782:	2100      	movs	r1, #0
 800d784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d786:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d005      	beq.n	800d79c <err_tcp+0xb8>
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d794:	2200      	movs	r2, #0
 800d796:	2102      	movs	r1, #2
 800d798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d79a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	3310      	adds	r3, #16
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f00b f995 	bl	8018ad0 <sys_mbox_valid>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	3310      	adds	r3, #16
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f00b f917 	bl	80189e6 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	3314      	adds	r3, #20
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f00b f987 	bl	8018ad0 <sys_mbox_valid>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	3314      	adds	r3, #20
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f00b f909 	bl	80189e6 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d7d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d007      	beq.n	800d7ec <err_tcp+0x108>
 800d7dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7e0:	2b04      	cmp	r3, #4
 800d7e2:	d003      	beq.n	800d7ec <err_tcp+0x108>
 800d7e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7e8:	2b03      	cmp	r3, #3
 800d7ea:	d14d      	bne.n	800d888 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	7f1b      	ldrb	r3, [r3, #28]
 800d7f0:	f003 0304 	and.w	r3, r3, #4
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	bf14      	ite	ne
 800d7f8:	2301      	movne	r3, #1
 800d7fa:	2300      	moveq	r3, #0
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	7f1b      	ldrb	r3, [r3, #28]
 800d804:	f023 0304 	bic.w	r3, r3, #4
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d145      	bne.n	800d8a0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d106      	bne.n	800d82a <err_tcp+0x146>
 800d81c:	4b23      	ldr	r3, [pc, #140]	; (800d8ac <err_tcp+0x1c8>)
 800d81e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d822:	4925      	ldr	r1, [pc, #148]	; (800d8b8 <err_tcp+0x1d4>)
 800d824:	4823      	ldr	r0, [pc, #140]	; (800d8b4 <err_tcp+0x1d0>)
 800d826:	f00b fad3 	bl	8018dd0 <iprintf>
      conn->current_msg->err = err;
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	78fa      	ldrb	r2, [r7, #3]
 800d830:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	330c      	adds	r3, #12
 800d83a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d83c:	6938      	ldr	r0, [r7, #16]
 800d83e:	f00b f9d8 	bl	8018bf2 <sys_sem_valid>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <err_tcp+0x172>
 800d848:	4b18      	ldr	r3, [pc, #96]	; (800d8ac <err_tcp+0x1c8>)
 800d84a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d84e:	491b      	ldr	r1, [pc, #108]	; (800d8bc <err_tcp+0x1d8>)
 800d850:	4818      	ldr	r0, [pc, #96]	; (800d8b4 <err_tcp+0x1d0>)
 800d852:	f00b fabd 	bl	8018dd0 <iprintf>
      conn->current_msg = NULL;
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	2200      	movs	r2, #0
 800d85a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00e      	beq.n	800d880 <err_tcp+0x19c>
 800d862:	f00b fa51 	bl	8018d08 <sys_arch_protect>
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d86e:	f113 0f0c 	cmn.w	r3, #12
 800d872:	db02      	blt.n	800d87a <err_tcp+0x196>
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	78fa      	ldrb	r2, [r7, #3]
 800d878:	721a      	strb	r2, [r3, #8]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f00b fa52 	bl	8018d24 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800d880:	6938      	ldr	r0, [r7, #16]
 800d882:	f00b f99c 	bl	8018bbe <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d886:	e00b      	b.n	800d8a0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d008      	beq.n	800d8a2 <err_tcp+0x1be>
 800d890:	4b06      	ldr	r3, [pc, #24]	; (800d8ac <err_tcp+0x1c8>)
 800d892:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d896:	490a      	ldr	r1, [pc, #40]	; (800d8c0 <err_tcp+0x1dc>)
 800d898:	4806      	ldr	r0, [pc, #24]	; (800d8b4 <err_tcp+0x1d0>)
 800d89a:	f00b fa99 	bl	8018dd0 <iprintf>
  }
}
 800d89e:	e000      	b.n	800d8a2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800d8a0:	bf00      	nop
}
 800d8a2:	bf00      	nop
 800d8a4:	3728      	adds	r7, #40	; 0x28
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	08019fa0 	.word	0x08019fa0
 800d8b0:	0801a0e8 	.word	0x0801a0e8
 800d8b4:	0801a01c 	.word	0x0801a01c
 800d8b8:	0801a0f8 	.word	0x0801a0f8
 800d8bc:	0801a114 	.word	0x0801a114
 800d8c0:	0801a130 	.word	0x0801a130

0800d8c4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f004 fa5b 	bl	8011d90 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d8da:	490a      	ldr	r1, [pc, #40]	; (800d904 <setup_tcp+0x40>)
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f004 fa69 	bl	8011db4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d8e2:	4909      	ldr	r1, [pc, #36]	; (800d908 <setup_tcp+0x44>)
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f004 fa87 	bl	8011df8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	4907      	ldr	r1, [pc, #28]	; (800d90c <setup_tcp+0x48>)
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f004 fadc 	bl	8011eac <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d8f4:	4906      	ldr	r1, [pc, #24]	; (800d910 <setup_tcp+0x4c>)
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f004 fa9e 	bl	8011e38 <tcp_err>
}
 800d8fc:	bf00      	nop
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	0800d465 	.word	0x0800d465
 800d908:	0800d63d 	.word	0x0800d63d
 800d90c:	0800d575 	.word	0x0800d575
 800d910:	0800d6e5 	.word	0x0800d6e5

0800d914 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b088      	sub	sp, #32
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	4613      	mov	r3, r2
 800d920:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <accept_function+0x1e>
    return ERR_VAL;
 800d92c:	f06f 0305 	mvn.w	r3, #5
 800d930:	e08d      	b.n	800da4e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	3314      	adds	r3, #20
 800d936:	4618      	mov	r0, r3
 800d938:	f00b f8ca 	bl	8018ad0 <sys_mbox_valid>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d102      	bne.n	800d948 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d942:	f06f 0305 	mvn.w	r3, #5
 800d946:	e082      	b.n	800da4e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d115      	bne.n	800d97a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	3314      	adds	r3, #20
 800d952:	4941      	ldr	r1, [pc, #260]	; (800da58 <accept_function+0x144>)
 800d954:	4618      	mov	r0, r3
 800d956:	f00b f846 	bl	80189e6 <sys_mbox_trypost>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d964:	2b00      	cmp	r3, #0
 800d966:	d005      	beq.n	800d974 <accept_function+0x60>
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d96c:	2200      	movs	r2, #0
 800d96e:	2100      	movs	r1, #0
 800d970:	69f8      	ldr	r0, [r7, #28]
 800d972:	4798      	blx	r3
    }
    return ERR_VAL;
 800d974:	f06f 0305 	mvn.w	r3, #5
 800d978:	e069      	b.n	800da4e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	781a      	ldrb	r2, [r3, #0]
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d982:	4619      	mov	r1, r3
 800d984:	4610      	mov	r0, r2
 800d986:	f000 f8ff 	bl	800db88 <netconn_alloc>
 800d98a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d115      	bne.n	800d9be <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	3314      	adds	r3, #20
 800d996:	4930      	ldr	r1, [pc, #192]	; (800da58 <accept_function+0x144>)
 800d998:	4618      	mov	r0, r3
 800d99a:	f00b f824 	bl	80189e6 <sys_mbox_trypost>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d109      	bne.n	800d9b8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <accept_function+0xa4>
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	69f8      	ldr	r0, [r7, #28]
 800d9b6:	4798      	blx	r3
    }
    return ERR_MEM;
 800d9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9bc:	e047      	b.n	800da4e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d9c4:	69b8      	ldr	r0, [r7, #24]
 800d9c6:	f7ff ff7d 	bl	800d8c4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	79fa      	ldrb	r2, [r7, #7]
 800d9ce:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	3314      	adds	r3, #20
 800d9d4:	69b9      	ldr	r1, [r7, #24]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f00b f805 	bl	80189e6 <sys_mbox_trypost>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d02a      	beq.n	800da38 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	6978      	ldr	r0, [r7, #20]
 800d9ec:	f004 f9d0 	bl	8011d90 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	6978      	ldr	r0, [r7, #20]
 800d9f4:	f004 f9de 	bl	8011db4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	6978      	ldr	r0, [r7, #20]
 800d9fc:	f004 f9fc 	bl	8011df8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800da00:	2200      	movs	r2, #0
 800da02:	2100      	movs	r1, #0
 800da04:	6978      	ldr	r0, [r7, #20]
 800da06:	f004 fa51 	bl	8011eac <tcp_poll>
    tcp_err(pcb, NULL);
 800da0a:	2100      	movs	r1, #0
 800da0c:	6978      	ldr	r0, [r7, #20]
 800da0e:	f004 fa13 	bl	8011e38 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	2200      	movs	r2, #0
 800da16:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	3310      	adds	r3, #16
 800da1c:	4618      	mov	r0, r3
 800da1e:	f00a ffbb 	bl	8018998 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	3310      	adds	r3, #16
 800da26:	4618      	mov	r0, r3
 800da28:	f00b f863 	bl	8018af2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800da2c:	69b8      	ldr	r0, [r7, #24]
 800da2e:	f000 f91b 	bl	800dc68 <netconn_free>
    return ERR_MEM;
 800da32:	f04f 33ff 	mov.w	r3, #4294967295
 800da36:	e00a      	b.n	800da4e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d005      	beq.n	800da4c <accept_function+0x138>
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da44:	2200      	movs	r2, #0
 800da46:	2100      	movs	r1, #0
 800da48:	69f8      	ldr	r0, [r7, #28]
 800da4a:	4798      	blx	r3
  }

  return ERR_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3720      	adds	r7, #32
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	200048ec 	.word	0x200048ec

0800da5c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800da64:	2300      	movs	r3, #0
 800da66:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d006      	beq.n	800da80 <pcb_new+0x24>
 800da72:	4b2b      	ldr	r3, [pc, #172]	; (800db20 <pcb_new+0xc4>)
 800da74:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800da78:	492a      	ldr	r1, [pc, #168]	; (800db24 <pcb_new+0xc8>)
 800da7a:	482b      	ldr	r0, [pc, #172]	; (800db28 <pcb_new+0xcc>)
 800da7c:	f00b f9a8 	bl	8018dd0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da8a:	2b10      	cmp	r3, #16
 800da8c:	d022      	beq.n	800dad4 <pcb_new+0x78>
 800da8e:	2b20      	cmp	r3, #32
 800da90:	d133      	bne.n	800dafa <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681c      	ldr	r4, [r3, #0]
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	4618      	mov	r0, r3
 800da9a:	f008 fd16 	bl	80164ca <udp_new_ip_type>
 800da9e:	4603      	mov	r3, r0
 800daa0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d02a      	beq.n	800db02 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b22      	cmp	r3, #34	; 0x22
 800dab4:	d104      	bne.n	800dac0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6858      	ldr	r0, [r3, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	461a      	mov	r2, r3
 800dacc:	4917      	ldr	r1, [pc, #92]	; (800db2c <pcb_new+0xd0>)
 800dace:	f008 fca1 	bl	8016414 <udp_recv>
    }
    break;
 800dad2:	e016      	b.n	800db02 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681c      	ldr	r4, [r3, #0]
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	4618      	mov	r0, r3
 800dadc:	f004 f94a 	bl	8011d74 <tcp_new_ip_type>
 800dae0:	4603      	mov	r3, r0
 800dae2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00b      	beq.n	800db06 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff fee6 	bl	800d8c4 <setup_tcp>
    }
    break;
 800daf8:	e005      	b.n	800db06 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	22fa      	movs	r2, #250	; 0xfa
 800dafe:	711a      	strb	r2, [r3, #4]
    return;
 800db00:	e00a      	b.n	800db18 <pcb_new+0xbc>
    break;
 800db02:	bf00      	nop
 800db04:	e000      	b.n	800db08 <pcb_new+0xac>
    break;
 800db06:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	22ff      	movs	r2, #255	; 0xff
 800db16:	711a      	strb	r2, [r3, #4]
  }
}
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd90      	pop	{r4, r7, pc}
 800db1e:	bf00      	nop
 800db20:	08019fa0 	.word	0x08019fa0
 800db24:	0801a14c 	.word	0x0801a14c
 800db28:	0801a01c 	.word	0x0801a01c
 800db2c:	0800d369 	.word	0x0800d369

0800db30 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f7ff ff85 	bl	800da5c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d012      	beq.n	800db80 <lwip_netconn_do_newconn+0x50>
 800db5a:	f00b f8d5 	bl	8018d08 <sys_arch_protect>
 800db5e:	60b8      	str	r0, [r7, #8]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800db68:	f113 0f0c 	cmn.w	r3, #12
 800db6c:	db05      	blt.n	800db7a <lwip_netconn_do_newconn+0x4a>
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800db78:	721a      	strb	r2, [r3, #8]
 800db7a:	68b8      	ldr	r0, [r7, #8]
 800db7c:	f00b f8d2 	bl	8018d24 <sys_arch_unprotect>
}
 800db80:	bf00      	nop
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	4603      	mov	r3, r0
 800db90:	6039      	str	r1, [r7, #0]
 800db92:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800db94:	2007      	movs	r0, #7
 800db96:	f001 fe31 	bl	800f7fc <memp_malloc>
 800db9a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <netconn_alloc+0x1e>
    return NULL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	e055      	b.n	800dc52 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	79fa      	ldrb	r2, [r7, #7]
 800dbb0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbbe:	2b10      	cmp	r3, #16
 800dbc0:	d004      	beq.n	800dbcc <netconn_alloc+0x44>
 800dbc2:	2b20      	cmp	r3, #32
 800dbc4:	d105      	bne.n	800dbd2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800dbc6:	2306      	movs	r3, #6
 800dbc8:	60fb      	str	r3, [r7, #12]
    break;
 800dbca:	e00a      	b.n	800dbe2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800dbcc:	2306      	movs	r3, #6
 800dbce:	60fb      	str	r3, [r7, #12]
    break;
 800dbd0:	e007      	b.n	800dbe2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800dbd2:	4b22      	ldr	r3, [pc, #136]	; (800dc5c <netconn_alloc+0xd4>)
 800dbd4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dbd8:	4921      	ldr	r1, [pc, #132]	; (800dc60 <netconn_alloc+0xd8>)
 800dbda:	4822      	ldr	r0, [pc, #136]	; (800dc64 <netconn_alloc+0xdc>)
 800dbdc:	f00b f8f8 	bl	8018dd0 <iprintf>
    goto free_and_return;
 800dbe0:	e032      	b.n	800dc48 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	3310      	adds	r3, #16
 800dbe6:	68f9      	ldr	r1, [r7, #12]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f00a feb3 	bl	8018954 <sys_mbox_new>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d128      	bne.n	800dc46 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	330c      	adds	r3, #12
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f00a ff86 	bl	8018b0c <sys_sem_new>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d005      	beq.n	800dc12 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	3310      	adds	r3, #16
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f00a fec4 	bl	8018998 <sys_mbox_free>
    goto free_and_return;
 800dc10:	e01a      	b.n	800dc48 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	3314      	adds	r3, #20
 800dc16:	4618      	mov	r0, r3
 800dc18:	f00a ff6b 	bl	8018af2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	f04f 32ff 	mov.w	r2, #4294967295
 800dc28:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2200      	movs	r2, #0
 800dc34:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	771a      	strb	r2, [r3, #28]
  return conn;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	e005      	b.n	800dc52 <netconn_alloc+0xca>
    goto free_and_return;
 800dc46:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800dc48:	68b9      	ldr	r1, [r7, #8]
 800dc4a:	2007      	movs	r0, #7
 800dc4c:	f001 fe4c 	bl	800f8e8 <memp_free>
  return NULL;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	08019fa0 	.word	0x08019fa0
 800dc60:	0801a16c 	.word	0x0801a16c
 800dc64:	0801a01c 	.word	0x0801a01c

0800dc68 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d006      	beq.n	800dc86 <netconn_free+0x1e>
 800dc78:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <netconn_free+0x80>)
 800dc7a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800dc7e:	491b      	ldr	r1, [pc, #108]	; (800dcec <netconn_free+0x84>)
 800dc80:	481b      	ldr	r0, [pc, #108]	; (800dcf0 <netconn_free+0x88>)
 800dc82:	f00b f8a5 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	3310      	adds	r3, #16
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f00a ff20 	bl	8018ad0 <sys_mbox_valid>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <netconn_free+0x3c>
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <netconn_free+0x80>)
 800dc98:	f240 22e2 	movw	r2, #738	; 0x2e2
 800dc9c:	4915      	ldr	r1, [pc, #84]	; (800dcf4 <netconn_free+0x8c>)
 800dc9e:	4814      	ldr	r0, [pc, #80]	; (800dcf0 <netconn_free+0x88>)
 800dca0:	f00b f896 	bl	8018dd0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	3314      	adds	r3, #20
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f00a ff11 	bl	8018ad0 <sys_mbox_valid>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d006      	beq.n	800dcc2 <netconn_free+0x5a>
 800dcb4:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <netconn_free+0x80>)
 800dcb6:	f240 22e5 	movw	r2, #741	; 0x2e5
 800dcba:	490f      	ldr	r1, [pc, #60]	; (800dcf8 <netconn_free+0x90>)
 800dcbc:	480c      	ldr	r0, [pc, #48]	; (800dcf0 <netconn_free+0x88>)
 800dcbe:	f00b f887 	bl	8018dd0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	330c      	adds	r3, #12
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f00a ff86 	bl	8018bd8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	330c      	adds	r3, #12
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f00a ff9f 	bl	8018c14 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	2007      	movs	r0, #7
 800dcda:	f001 fe05 	bl	800f8e8 <memp_free>
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	08019fa0 	.word	0x08019fa0
 800dcec:	0801a194 	.word	0x0801a194
 800dcf0:	0801a01c 	.word	0x0801a01c
 800dcf4:	0801a1c4 	.word	0x0801a1c4
 800dcf8:	0801a200 	.word	0x0801a200

0800dcfc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3310      	adds	r3, #16
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f00a fee1 	bl	8018ad0 <sys_mbox_valid>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d035      	beq.n	800dd80 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd14:	e01e      	b.n	800dd54 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd1e:	2b10      	cmp	r3, #16
 800dd20:	d114      	bne.n	800dd4c <netconn_drain+0x50>
        if (mem != NULL) {
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d015      	beq.n	800dd54 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685a      	ldr	r2, [r3, #4]
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	891b      	ldrh	r3, [r3, #8]
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	4610      	mov	r0, r2
 800dd40:	f003 fa44 	bl	80111cc <tcp_recved>
          }
          pbuf_free(p);
 800dd44:	6978      	ldr	r0, [r7, #20]
 800dd46:	f002 fb67 	bl	8010418 <pbuf_free>
 800dd4a:	e003      	b.n	800dd54 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 ff38 	bl	800ebc4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	3310      	adds	r3, #16
 800dd58:	f107 020c 	add.w	r2, r7, #12
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f00a fe9a 	bl	8018a98 <sys_arch_mbox_tryfetch>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6a:	d1d4      	bne.n	800dd16 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3310      	adds	r3, #16
 800dd70:	4618      	mov	r0, r3
 800dd72:	f00a fe11 	bl	8018998 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3310      	adds	r3, #16
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f00a feb9 	bl	8018af2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	3314      	adds	r3, #20
 800dd84:	4618      	mov	r0, r3
 800dd86:	f00a fea3 	bl	8018ad0 <sys_mbox_valid>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d02e      	beq.n	800ddee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd90:	e017      	b.n	800ddc2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4a18      	ldr	r2, [pc, #96]	; (800ddf8 <netconn_drain+0xfc>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d013      	beq.n	800ddc2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800dd9e:	6938      	ldr	r0, [r7, #16]
 800dda0:	f7ff ffac 	bl	800dcfc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d007      	beq.n	800ddbc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f003 f877 	bl	8010ea4 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800ddbc:	6938      	ldr	r0, [r7, #16]
 800ddbe:	f7ff ff53 	bl	800dc68 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	3314      	adds	r3, #20
 800ddc6:	f107 020c 	add.w	r2, r7, #12
 800ddca:	4611      	mov	r1, r2
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f00a fe63 	bl	8018a98 <sys_arch_mbox_tryfetch>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd8:	d1db      	bne.n	800dd92 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	3314      	adds	r3, #20
 800ddde:	4618      	mov	r0, r3
 800dde0:	f00a fdda 	bl	8018998 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3314      	adds	r3, #20
 800dde8:	4618      	mov	r0, r3
 800ddea:	f00a fe82 	bl	8018af2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ddee:	bf00      	nop
 800ddf0:	3718      	adds	r7, #24
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	200048ec 	.word	0x200048ec

0800ddfc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b088      	sub	sp, #32
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	460b      	mov	r3, r1
 800de06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <lwip_netconn_do_close_internal+0x24>
 800de12:	4baa      	ldr	r3, [pc, #680]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800de14:	f240 3243 	movw	r2, #835	; 0x343
 800de18:	49a9      	ldr	r1, [pc, #676]	; (800e0c0 <lwip_netconn_do_close_internal+0x2c4>)
 800de1a:	48aa      	ldr	r0, [pc, #680]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800de1c:	f00a ffd8 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de28:	2b10      	cmp	r3, #16
 800de2a:	d006      	beq.n	800de3a <lwip_netconn_do_close_internal+0x3e>
 800de2c:	4ba3      	ldr	r3, [pc, #652]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800de2e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800de32:	49a5      	ldr	r1, [pc, #660]	; (800e0c8 <lwip_netconn_do_close_internal+0x2cc>)
 800de34:	48a3      	ldr	r0, [pc, #652]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800de36:	f00a ffcb 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	785b      	ldrb	r3, [r3, #1]
 800de3e:	2b04      	cmp	r3, #4
 800de40:	d006      	beq.n	800de50 <lwip_netconn_do_close_internal+0x54>
 800de42:	4b9e      	ldr	r3, [pc, #632]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800de44:	f240 3245 	movw	r2, #837	; 0x345
 800de48:	49a0      	ldr	r1, [pc, #640]	; (800e0cc <lwip_netconn_do_close_internal+0x2d0>)
 800de4a:	489e      	ldr	r0, [pc, #632]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800de4c:	f00a ffc0 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d106      	bne.n	800de66 <lwip_netconn_do_close_internal+0x6a>
 800de58:	4b98      	ldr	r3, [pc, #608]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800de5a:	f240 3246 	movw	r2, #838	; 0x346
 800de5e:	499c      	ldr	r1, [pc, #624]	; (800e0d0 <lwip_netconn_do_close_internal+0x2d4>)
 800de60:	4898      	ldr	r0, [pc, #608]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800de62:	f00a ffb5 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <lwip_netconn_do_close_internal+0x80>
 800de6e:	4b93      	ldr	r3, [pc, #588]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800de70:	f240 3247 	movw	r2, #839	; 0x347
 800de74:	4997      	ldr	r1, [pc, #604]	; (800e0d4 <lwip_netconn_do_close_internal+0x2d8>)
 800de76:	4893      	ldr	r0, [pc, #588]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800de78:	f00a ffaa 	bl	8018dd0 <iprintf>

  tpcb = conn->pcb.tcp;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de86:	7a1b      	ldrb	r3, [r3, #8]
 800de88:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800de8a:	7dfb      	ldrb	r3, [r7, #23]
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	f003 0302 	and.w	r3, r3, #2
 800de98:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d102      	bne.n	800dea6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800dea0:	2301      	movs	r3, #1
 800dea2:	77bb      	strb	r3, [r7, #30]
 800dea4:	e01f      	b.n	800dee6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800dea6:	7dbb      	ldrb	r3, [r7, #22]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00e      	beq.n	800deca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800deb0:	2b05      	cmp	r3, #5
 800deb2:	d007      	beq.n	800dec4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800deb8:	2b06      	cmp	r3, #6
 800deba:	d003      	beq.n	800dec4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800dec0:	2b08      	cmp	r3, #8
 800dec2:	d102      	bne.n	800deca <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800dec4:	2301      	movs	r3, #1
 800dec6:	77bb      	strb	r3, [r7, #30]
 800dec8:	e00d      	b.n	800dee6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800deca:	7d7b      	ldrb	r3, [r7, #21]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d008      	beq.n	800dee2 <lwip_netconn_do_close_internal+0xe6>
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	7e9b      	ldrb	r3, [r3, #26]
 800ded4:	f003 0310 	and.w	r3, r3, #16
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800dedc:	2301      	movs	r3, #1
 800dede:	77bb      	strb	r3, [r7, #30]
 800dee0:	e001      	b.n	800dee6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800dee2:	2300      	movs	r3, #0
 800dee4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800dee6:	7fbb      	ldrb	r3, [r7, #30]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d003      	beq.n	800def4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800deec:	2100      	movs	r1, #0
 800deee:	69b8      	ldr	r0, [r7, #24]
 800def0:	f003 ff4e 	bl	8011d90 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	7d1b      	ldrb	r3, [r3, #20]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d104      	bne.n	800df06 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800defc:	2100      	movs	r1, #0
 800defe:	69b8      	ldr	r0, [r7, #24]
 800df00:	f003 ffbc 	bl	8011e7c <tcp_accept>
 800df04:	e01d      	b.n	800df42 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800df06:	7dbb      	ldrb	r3, [r7, #22]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d007      	beq.n	800df1c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800df0c:	2100      	movs	r1, #0
 800df0e:	69b8      	ldr	r0, [r7, #24]
 800df10:	f003 ff50 	bl	8011db4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800df14:	2100      	movs	r1, #0
 800df16:	69b8      	ldr	r0, [r7, #24]
 800df18:	f003 ffb0 	bl	8011e7c <tcp_accept>
    }
    if (shut_tx) {
 800df1c:	7d7b      	ldrb	r3, [r7, #21]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800df22:	2100      	movs	r1, #0
 800df24:	69b8      	ldr	r0, [r7, #24]
 800df26:	f003 ff67 	bl	8011df8 <tcp_sent>
    }
    if (close) {
 800df2a:	7fbb      	ldrb	r3, [r7, #30]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d008      	beq.n	800df42 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800df30:	2200      	movs	r2, #0
 800df32:	2100      	movs	r1, #0
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f003 ffb9 	bl	8011eac <tcp_poll>
      tcp_err(tpcb, NULL);
 800df3a:	2100      	movs	r1, #0
 800df3c:	69b8      	ldr	r0, [r7, #24]
 800df3e:	f003 ff7b 	bl	8011e38 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800df42:	7fbb      	ldrb	r3, [r7, #30]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d005      	beq.n	800df54 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800df48:	69b8      	ldr	r0, [r7, #24]
 800df4a:	f002 fe99 	bl	8010c80 <tcp_close>
 800df4e:	4603      	mov	r3, r0
 800df50:	77fb      	strb	r3, [r7, #31]
 800df52:	e007      	b.n	800df64 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800df54:	7dbb      	ldrb	r3, [r7, #22]
 800df56:	7d7a      	ldrb	r2, [r7, #21]
 800df58:	4619      	mov	r1, r3
 800df5a:	69b8      	ldr	r0, [r7, #24]
 800df5c:	f002 fea8 	bl	8010cb0 <tcp_shutdown>
 800df60:	4603      	mov	r3, r0
 800df62:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800df64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d102      	bne.n	800df72 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800df6c:	2301      	movs	r3, #1
 800df6e:	777b      	strb	r3, [r7, #29]
 800df70:	e016      	b.n	800dfa0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800df72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7a:	d10f      	bne.n	800df9c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df80:	7a5b      	ldrb	r3, [r3, #9]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10c      	bne.n	800dfa0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800df86:	2301      	movs	r3, #1
 800df88:	777b      	strb	r3, [r7, #29]
        if (close) {
 800df8a:	7fbb      	ldrb	r3, [r7, #30]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d007      	beq.n	800dfa0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800df90:	69b8      	ldr	r0, [r7, #24]
 800df92:	f002 ff87 	bl	8010ea4 <tcp_abort>
          err = ERR_OK;
 800df96:	2300      	movs	r3, #0
 800df98:	77fb      	strb	r3, [r7, #31]
 800df9a:	e001      	b.n	800dfa0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800df9c:	2301      	movs	r3, #1
 800df9e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800dfa0:	7f7b      	ldrb	r3, [r7, #29]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d056      	beq.n	800e054 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	330c      	adds	r3, #12
 800dfae:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb4:	7ffa      	ldrb	r2, [r7, #31]
 800dfb6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dfc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d129      	bne.n	800e020 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800dfcc:	7fbb      	ldrb	r3, [r7, #30]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00c      	beq.n	800dfec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d005      	beq.n	800dfec <lwip_netconn_do_close_internal+0x1f0>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2104      	movs	r1, #4
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	4798      	blx	r3
      }
      if (shut_rx) {
 800dfec:	7dbb      	ldrb	r3, [r7, #22]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d009      	beq.n	800e006 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d005      	beq.n	800e006 <lwip_netconn_do_close_internal+0x20a>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffe:	2200      	movs	r2, #0
 800e000:	2100      	movs	r1, #0
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	4798      	blx	r3
      }
      if (shut_tx) {
 800e006:	7d7b      	ldrb	r3, [r7, #21]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d009      	beq.n	800e020 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e010:	2b00      	cmp	r3, #0
 800e012:	d005      	beq.n	800e020 <lwip_netconn_do_close_internal+0x224>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e018:	2200      	movs	r2, #0
 800e01a:	2102      	movs	r1, #2
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00e      	beq.n	800e044 <lwip_netconn_do_close_internal+0x248>
 800e026:	f00a fe6f 	bl	8018d08 <sys_arch_protect>
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e032:	f113 0f0c 	cmn.w	r3, #12
 800e036:	db02      	blt.n	800e03e <lwip_netconn_do_close_internal+0x242>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7ffa      	ldrb	r2, [r7, #31]
 800e03c:	721a      	strb	r2, [r3, #8]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f00a fe70 	bl	8018d24 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e044:	78fb      	ldrb	r3, [r7, #3]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e04a:	6938      	ldr	r0, [r7, #16]
 800e04c:	f00a fdb7 	bl	8018bbe <sys_sem_signal>
    }
    return ERR_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	e02e      	b.n	800e0b2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800e054:	7f7b      	ldrb	r3, [r7, #29]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d11e      	bne.n	800e098 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	7d1b      	ldrb	r3, [r3, #20]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d106      	bne.n	800e070 <lwip_netconn_do_close_internal+0x274>
 800e062:	4b16      	ldr	r3, [pc, #88]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800e064:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e068:	491b      	ldr	r1, [pc, #108]	; (800e0d8 <lwip_netconn_do_close_internal+0x2dc>)
 800e06a:	4816      	ldr	r0, [pc, #88]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800e06c:	f00a feb0 	bl	8018dd0 <iprintf>
    if (shut_tx) {
 800e070:	7d7b      	ldrb	r3, [r7, #21]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d003      	beq.n	800e07e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800e076:	4919      	ldr	r1, [pc, #100]	; (800e0dc <lwip_netconn_do_close_internal+0x2e0>)
 800e078:	69b8      	ldr	r0, [r7, #24]
 800e07a:	f003 febd 	bl	8011df8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e07e:	2201      	movs	r2, #1
 800e080:	4917      	ldr	r1, [pc, #92]	; (800e0e0 <lwip_netconn_do_close_internal+0x2e4>)
 800e082:	69b8      	ldr	r0, [r7, #24]
 800e084:	f003 ff12 	bl	8011eac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e088:	4916      	ldr	r1, [pc, #88]	; (800e0e4 <lwip_netconn_do_close_internal+0x2e8>)
 800e08a:	69b8      	ldr	r0, [r7, #24]
 800e08c:	f003 fed4 	bl	8011e38 <tcp_err>
    tcp_arg(tpcb, conn);
 800e090:	6879      	ldr	r1, [r7, #4]
 800e092:	69b8      	ldr	r0, [r7, #24]
 800e094:	f003 fe7c 	bl	8011d90 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e098:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d106      	bne.n	800e0ae <lwip_netconn_do_close_internal+0x2b2>
 800e0a0:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <lwip_netconn_do_close_internal+0x2c0>)
 800e0a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e0a6:	4910      	ldr	r1, [pc, #64]	; (800e0e8 <lwip_netconn_do_close_internal+0x2ec>)
 800e0a8:	4806      	ldr	r0, [pc, #24]	; (800e0c4 <lwip_netconn_do_close_internal+0x2c8>)
 800e0aa:	f00a fe91 	bl	8018dd0 <iprintf>
  return err;
 800e0ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3720      	adds	r7, #32
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	08019fa0 	.word	0x08019fa0
 800e0c0:	0801a23c 	.word	0x0801a23c
 800e0c4:	0801a01c 	.word	0x0801a01c
 800e0c8:	0801a24c 	.word	0x0801a24c
 800e0cc:	0801a26c 	.word	0x0801a26c
 800e0d0:	0801a290 	.word	0x0801a290
 800e0d4:	0801a0f8 	.word	0x0801a0f8
 800e0d8:	0801a2a4 	.word	0x0801a2a4
 800e0dc:	0800d63d 	.word	0x0800d63d
 800e0e0:	0800d575 	.word	0x0800d575
 800e0e4:	0800d6e5 	.word	0x0800d6e5
 800e0e8:	0801a2c8 	.word	0x0801a2c8

0800e0ec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	785b      	ldrb	r3, [r3, #1]
 800e0fe:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e100:	7cfb      	ldrb	r3, [r7, #19]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00d      	beq.n	800e122 <lwip_netconn_do_delconn+0x36>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e110:	2b10      	cmp	r3, #16
 800e112:	d006      	beq.n	800e122 <lwip_netconn_do_delconn+0x36>
 800e114:	4b6f      	ldr	r3, [pc, #444]	; (800e2d4 <lwip_netconn_do_delconn+0x1e8>)
 800e116:	f240 4201 	movw	r2, #1025	; 0x401
 800e11a:	496f      	ldr	r1, [pc, #444]	; (800e2d8 <lwip_netconn_do_delconn+0x1ec>)
 800e11c:	486f      	ldr	r0, [pc, #444]	; (800e2dc <lwip_netconn_do_delconn+0x1f0>)
 800e11e:	f00a fe57 	bl	8018dd0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e122:	7cfb      	ldrb	r3, [r7, #19]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <lwip_netconn_do_delconn+0x48>
 800e128:	7cfb      	ldrb	r3, [r7, #19]
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d002      	beq.n	800e134 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e12e:	7cfb      	ldrb	r3, [r7, #19]
 800e130:	2b03      	cmp	r3, #3
 800e132:	d109      	bne.n	800e148 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e134:	7cfb      	ldrb	r3, [r7, #19]
 800e136:	2b03      	cmp	r3, #3
 800e138:	d10a      	bne.n	800e150 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	7f1b      	ldrb	r3, [r3, #28]
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b00      	cmp	r3, #0
 800e146:	d103      	bne.n	800e150 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	22fb      	movs	r2, #251	; 0xfb
 800e14c:	711a      	strb	r2, [r3, #4]
 800e14e:	e09c      	b.n	800e28a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e150:	7cfb      	ldrb	r3, [r7, #19]
 800e152:	2b03      	cmp	r3, #3
 800e154:	d10d      	bne.n	800e172 <lwip_netconn_do_delconn+0x86>
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	7f1b      	ldrb	r3, [r3, #28]
 800e15c:	f003 0304 	and.w	r3, r3, #4
 800e160:	2b00      	cmp	r3, #0
 800e162:	d106      	bne.n	800e172 <lwip_netconn_do_delconn+0x86>
 800e164:	4b5b      	ldr	r3, [pc, #364]	; (800e2d4 <lwip_netconn_do_delconn+0x1e8>)
 800e166:	f240 421f 	movw	r2, #1055	; 0x41f
 800e16a:	495d      	ldr	r1, [pc, #372]	; (800e2e0 <lwip_netconn_do_delconn+0x1f4>)
 800e16c:	485b      	ldr	r0, [pc, #364]	; (800e2dc <lwip_netconn_do_delconn+0x1f0>)
 800e16e:	f00a fe2f 	bl	8018dd0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2200      	movs	r2, #0
 800e176:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fdbd 	bl	800dcfc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d064      	beq.n	800e256 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e196:	2b10      	cmp	r3, #16
 800e198:	d00e      	beq.n	800e1b8 <lwip_netconn_do_delconn+0xcc>
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	d000      	beq.n	800e1a0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800e19e:	e056      	b.n	800e24e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f008 f941 	bl	8016438 <udp_remove>
        break;
 800e1b6:	e04a      	b.n	800e24e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d104      	bne.n	800e1cc <lwip_netconn_do_delconn+0xe0>
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6a1b      	ldr	r3, [r3, #32]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d006      	beq.n	800e1da <lwip_netconn_do_delconn+0xee>
 800e1cc:	4b41      	ldr	r3, [pc, #260]	; (800e2d4 <lwip_netconn_do_delconn+0x1e8>)
 800e1ce:	f240 4235 	movw	r2, #1077	; 0x435
 800e1d2:	4944      	ldr	r1, [pc, #272]	; (800e2e4 <lwip_netconn_do_delconn+0x1f8>)
 800e1d4:	4841      	ldr	r0, [pc, #260]	; (800e2dc <lwip_netconn_do_delconn+0x1f0>)
 800e1d6:	f00a fdfb 	bl	8018dd0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2204      	movs	r2, #4
 800e1e0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	697a      	ldr	r2, [r7, #20]
 800e1ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7ff fe00 	bl	800ddfc <lwip_netconn_do_close_internal>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d064      	beq.n	800e2cc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	785b      	ldrb	r3, [r3, #1]
 800e208:	2b04      	cmp	r3, #4
 800e20a:	d006      	beq.n	800e21a <lwip_netconn_do_delconn+0x12e>
 800e20c:	4b31      	ldr	r3, [pc, #196]	; (800e2d4 <lwip_netconn_do_delconn+0x1e8>)
 800e20e:	f240 423b 	movw	r2, #1083	; 0x43b
 800e212:	4935      	ldr	r1, [pc, #212]	; (800e2e8 <lwip_netconn_do_delconn+0x1fc>)
 800e214:	4831      	ldr	r0, [pc, #196]	; (800e2dc <lwip_netconn_do_delconn+0x1f0>)
 800e216:	f00a fddb 	bl	8018dd0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e21a:	4834      	ldr	r0, [pc, #208]	; (800e2ec <lwip_netconn_do_delconn+0x200>)
 800e21c:	f00a fd41 	bl	8018ca2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	330c      	adds	r3, #12
 800e226:	2100      	movs	r1, #0
 800e228:	4618      	mov	r0, r3
 800e22a:	f00a fc97 	bl	8018b5c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e22e:	482f      	ldr	r0, [pc, #188]	; (800e2ec <lwip_netconn_do_delconn+0x200>)
 800e230:	f00a fd28 	bl	8018c84 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	785b      	ldrb	r3, [r3, #1]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d046      	beq.n	800e2cc <lwip_netconn_do_delconn+0x1e0>
 800e23e:	4b25      	ldr	r3, [pc, #148]	; (800e2d4 <lwip_netconn_do_delconn+0x1e8>)
 800e240:	f240 423f 	movw	r2, #1087	; 0x43f
 800e244:	4928      	ldr	r1, [pc, #160]	; (800e2e8 <lwip_netconn_do_delconn+0x1fc>)
 800e246:	4825      	ldr	r0, [pc, #148]	; (800e2dc <lwip_netconn_do_delconn+0x1f0>)
 800e248:	f00a fdc2 	bl	8018dd0 <iprintf>
        return;
 800e24c:	e03e      	b.n	800e2cc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2200      	movs	r2, #0
 800e254:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d007      	beq.n	800e270 <lwip_netconn_do_delconn+0x184>
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	6810      	ldr	r0, [r2, #0]
 800e26a:	2200      	movs	r2, #0
 800e26c:	2100      	movs	r1, #0
 800e26e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e276:	2b00      	cmp	r3, #0
 800e278:	d007      	beq.n	800e28a <lwip_netconn_do_delconn+0x19e>
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e280:	697a      	ldr	r2, [r7, #20]
 800e282:	6810      	ldr	r0, [r2, #0]
 800e284:	2200      	movs	r2, #0
 800e286:	2102      	movs	r1, #2
 800e288:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	330c      	adds	r3, #12
 800e290:	4618      	mov	r0, r3
 800e292:	f00a fcae 	bl	8018bf2 <sys_sem_valid>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d018      	beq.n	800e2ce <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d014      	beq.n	800e2ce <lwip_netconn_do_delconn+0x1e2>
 800e2a4:	f00a fd30 	bl	8018d08 <sys_arch_protect>
 800e2a8:	60f8      	str	r0, [r7, #12]
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e2b2:	f113 0f0c 	cmn.w	r3, #12
 800e2b6:	db05      	blt.n	800e2c4 <lwip_netconn_do_delconn+0x1d8>
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e2c2:	721a      	strb	r2, [r3, #8]
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f00a fd2d 	bl	8018d24 <sys_arch_unprotect>
 800e2ca:	e000      	b.n	800e2ce <lwip_netconn_do_delconn+0x1e2>
        return;
 800e2cc:	bf00      	nop
  }
}
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	08019fa0 	.word	0x08019fa0
 800e2d8:	0801a2d8 	.word	0x0801a2d8
 800e2dc:	0801a01c 	.word	0x0801a01c
 800e2e0:	0801a2ec 	.word	0x0801a2ec
 800e2e4:	0801a30c 	.word	0x0801a30c
 800e2e8:	0801a328 	.word	0x0801a328
 800e2ec:	200048f0 	.word	0x200048f0

0800e2f0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e304:	f113 0f0c 	cmn.w	r3, #12
 800e308:	da06      	bge.n	800e318 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	711a      	strb	r2, [r3, #4]
 800e316:	e030      	b.n	800e37a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	22fa      	movs	r2, #250	; 0xfa
 800e31c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d027      	beq.n	800e378 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e332:	2b10      	cmp	r3, #16
 800e334:	d011      	beq.n	800e35a <lwip_netconn_do_bind+0x6a>
 800e336:	2b20      	cmp	r3, #32
 800e338:	d000      	beq.n	800e33c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800e33a:	e01e      	b.n	800e37a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6858      	ldr	r0, [r3, #4]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6899      	ldr	r1, [r3, #8]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	899b      	ldrh	r3, [r3, #12]
 800e34a:	461a      	mov	r2, r3
 800e34c:	f007 fff2 	bl	8016334 <udp_bind>
 800e350:	4603      	mov	r3, r0
 800e352:	461a      	mov	r2, r3
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	711a      	strb	r2, [r3, #4]
        break;
 800e358:	e00f      	b.n	800e37a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6858      	ldr	r0, [r3, #4]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6899      	ldr	r1, [r3, #8]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	899b      	ldrh	r3, [r3, #12]
 800e368:	461a      	mov	r2, r3
 800e36a:	f002 fda7 	bl	8010ebc <tcp_bind>
 800e36e:	4603      	mov	r3, r0
 800e370:	461a      	mov	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	711a      	strb	r2, [r3, #4]
        break;
 800e376:	e000      	b.n	800e37a <lwip_netconn_do_bind+0x8a>
      }
    }
 800e378:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d012      	beq.n	800e3a8 <lwip_netconn_do_bind+0xb8>
 800e382:	f00a fcc1 	bl	8018d08 <sys_arch_protect>
 800e386:	60b8      	str	r0, [r7, #8]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e390:	f113 0f0c 	cmn.w	r3, #12
 800e394:	db05      	blt.n	800e3a2 <lwip_netconn_do_bind+0xb2>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e3a0:	721a      	strb	r2, [r3, #8]
 800e3a2:	68b8      	ldr	r0, [r7, #8]
 800e3a4:	f00a fcbe 	bl	8018d24 <sys_arch_unprotect>
}
 800e3a8:	bf00      	nop
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e3c4:	f113 0f0c 	cmn.w	r3, #12
 800e3c8:	da06      	bge.n	800e3d8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	711a      	strb	r2, [r3, #4]
 800e3d6:	e090      	b.n	800e4fa <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	22f5      	movs	r2, #245	; 0xf5
 800e3dc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f000 8088 	beq.w	800e4fa <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3f4:	2b10      	cmp	r3, #16
 800e3f6:	d17d      	bne.n	800e4f4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	785b      	ldrb	r3, [r3, #1]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d16f      	bne.n	800e4e2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	7d1b      	ldrb	r3, [r3, #20]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	22fa      	movs	r2, #250	; 0xfa
 800e412:	711a      	strb	r2, [r3, #4]
 800e414:	e071      	b.n	800e4fa <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800e416:	23ff      	movs	r3, #255	; 0xff
 800e418:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	f107 020f 	add.w	r2, r7, #15
 800e424:	7ef9      	ldrb	r1, [r7, #27]
 800e426:	4618      	mov	r0, r3
 800e428:	f002 fdea 	bl	8011000 <tcp_listen_with_backlog_and_err>
 800e42c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800e434:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	711a      	strb	r2, [r3, #4]
 800e43c:	e05d      	b.n	800e4fa <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3310      	adds	r3, #16
 800e444:	4618      	mov	r0, r3
 800e446:	f00a fb43 	bl	8018ad0 <sys_mbox_valid>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00b      	beq.n	800e468 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3310      	adds	r3, #16
 800e456:	4618      	mov	r0, r3
 800e458:	f00a fa9e 	bl	8018998 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3310      	adds	r3, #16
 800e462:	4618      	mov	r0, r3
 800e464:	f00a fb45 	bl	8018af2 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	2200      	movs	r2, #0
 800e46c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3314      	adds	r3, #20
 800e474:	4618      	mov	r0, r3
 800e476:	f00a fb2b 	bl	8018ad0 <sys_mbox_valid>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3314      	adds	r3, #20
 800e486:	2106      	movs	r1, #6
 800e488:	4618      	mov	r0, r3
 800e48a:	f00a fa63 	bl	8018954 <sys_mbox_new>
 800e48e:	4603      	mov	r3, r0
 800e490:	461a      	mov	r2, r3
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d118      	bne.n	800e4d2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	697a      	ldr	r2, [r7, #20]
 800e4ae:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	685a      	ldr	r2, [r3, #4]
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f003 fc67 	bl	8011d90 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	4919      	ldr	r1, [pc, #100]	; (800e530 <lwip_netconn_do_listen+0x180>)
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f003 fcd6 	bl	8011e7c <tcp_accept>
 800e4d0:	e013      	b.n	800e4fa <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800e4d2:	6978      	ldr	r0, [r7, #20]
 800e4d4:	f002 fbd4 	bl	8010c80 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	605a      	str	r2, [r3, #4]
 800e4e0:	e00b      	b.n	800e4fa <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	785b      	ldrb	r3, [r3, #1]
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d106      	bne.n	800e4fa <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	711a      	strb	r2, [r3, #4]
 800e4f2:	e002      	b.n	800e4fa <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	22f0      	movs	r2, #240	; 0xf0
 800e4f8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d012      	beq.n	800e528 <lwip_netconn_do_listen+0x178>
 800e502:	f00a fc01 	bl	8018d08 <sys_arch_protect>
 800e506:	6138      	str	r0, [r7, #16]
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e510:	f113 0f0c 	cmn.w	r3, #12
 800e514:	db05      	blt.n	800e522 <lwip_netconn_do_listen+0x172>
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	69fa      	ldr	r2, [r7, #28]
 800e51c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e520:	721a      	strb	r2, [r3, #8]
 800e522:	6938      	ldr	r0, [r7, #16]
 800e524:	f00a fbfe 	bl	8018d24 <sys_arch_unprotect>
}
 800e528:	bf00      	nop
 800e52a:	3720      	adds	r7, #32
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	0800d915 	.word	0x0800d915

0800e534 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	2200      	movs	r2, #0
 800e544:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d022      	beq.n	800e596 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e55a:	2b10      	cmp	r3, #16
 800e55c:	d11b      	bne.n	800e596 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e56a:	d202      	bcs.n	800e572 <lwip_netconn_do_recv+0x3e>
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	e001      	b.n	800e576 <lwip_netconn_do_recv+0x42>
 800e572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e576:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	89fa      	ldrh	r2, [r7, #14]
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f002 fe22 	bl	80111cc <tcp_recved>
        remaining -= recved;
 800e588:	89fb      	ldrh	r3, [r7, #14]
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1e6      	bne.n	800e564 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d012      	beq.n	800e5c4 <lwip_netconn_do_recv+0x90>
 800e59e:	f00a fbb3 	bl	8018d08 <sys_arch_protect>
 800e5a2:	60b8      	str	r0, [r7, #8]
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e5ac:	f113 0f0c 	cmn.w	r3, #12
 800e5b0:	db05      	blt.n	800e5be <lwip_netconn_do_recv+0x8a>
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e5bc:	721a      	strb	r2, [r3, #8]
 800e5be:	68b8      	ldr	r0, [r7, #8]
 800e5c0:	f00a fbb0 	bl	8018d24 <sys_arch_unprotect>
}
 800e5c4:	bf00      	nop
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08a      	sub	sp, #40	; 0x28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d106      	bne.n	800e5f2 <lwip_netconn_do_writemore+0x26>
 800e5e4:	4ba3      	ldr	r3, [pc, #652]	; (800e874 <lwip_netconn_do_writemore+0x2a8>)
 800e5e6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800e5ea:	49a3      	ldr	r1, [pc, #652]	; (800e878 <lwip_netconn_do_writemore+0x2ac>)
 800e5ec:	48a3      	ldr	r0, [pc, #652]	; (800e87c <lwip_netconn_do_writemore+0x2b0>)
 800e5ee:	f00a fbef 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	785b      	ldrb	r3, [r3, #1]
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d006      	beq.n	800e608 <lwip_netconn_do_writemore+0x3c>
 800e5fa:	4b9e      	ldr	r3, [pc, #632]	; (800e874 <lwip_netconn_do_writemore+0x2a8>)
 800e5fc:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800e600:	499f      	ldr	r1, [pc, #636]	; (800e880 <lwip_netconn_do_writemore+0x2b4>)
 800e602:	489e      	ldr	r0, [pc, #632]	; (800e87c <lwip_netconn_do_writemore+0x2b0>)
 800e604:	f00a fbe4 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d106      	bne.n	800e61e <lwip_netconn_do_writemore+0x52>
 800e610:	4b98      	ldr	r3, [pc, #608]	; (800e874 <lwip_netconn_do_writemore+0x2a8>)
 800e612:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800e616:	499b      	ldr	r1, [pc, #620]	; (800e884 <lwip_netconn_do_writemore+0x2b8>)
 800e618:	4898      	ldr	r0, [pc, #608]	; (800e87c <lwip_netconn_do_writemore+0x2b0>)
 800e61a:	f00a fbd9 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <lwip_netconn_do_writemore+0x68>
 800e626:	4b93      	ldr	r3, [pc, #588]	; (800e874 <lwip_netconn_do_writemore+0x2a8>)
 800e628:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800e62c:	4996      	ldr	r1, [pc, #600]	; (800e888 <lwip_netconn_do_writemore+0x2bc>)
 800e62e:	4893      	ldr	r0, [pc, #588]	; (800e87c <lwip_netconn_do_writemore+0x2b0>)
 800e630:	f00a fbce 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a1a      	ldr	r2, [r3, #32]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d306      	bcc.n	800e650 <lwip_netconn_do_writemore+0x84>
 800e642:	4b8c      	ldr	r3, [pc, #560]	; (800e874 <lwip_netconn_do_writemore+0x2a8>)
 800e644:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800e648:	4990      	ldr	r1, [pc, #576]	; (800e88c <lwip_netconn_do_writemore+0x2c0>)
 800e64a:	488c      	ldr	r0, [pc, #560]	; (800e87c <lwip_netconn_do_writemore+0x2b0>)
 800e64c:	f00a fbc0 	bl	8018dd0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	7c1b      	ldrb	r3, [r3, #16]
 800e656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7f1b      	ldrb	r3, [r3, #28]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d105      	bne.n	800e672 <lwip_netconn_do_writemore+0xa6>
 800e666:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e66a:	f003 0304 	and.w	r3, r3, #4
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <lwip_netconn_do_writemore+0xaa>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <lwip_netconn_do_writemore+0xac>
 800e676:	2300      	movs	r3, #0
 800e678:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e680:	689a      	ldr	r2, [r3, #8]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a1b      	ldr	r3, [r3, #32]
 800e686:	4413      	add	r3, r2
 800e688:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68e:	68da      	ldr	r2, [r3, #12]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a1b      	ldr	r3, [r3, #32]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e69e:	d309      	bcc.n	800e6b4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800e6a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6a4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800e6a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e6aa:	f043 0302 	orr.w	r3, r3, #2
 800e6ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e6b2:	e001      	b.n	800e6b8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6c0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800e6c2:	8afa      	ldrh	r2, [r7, #22]
 800e6c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d212      	bcs.n	800e6f0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800e6ca:	8afb      	ldrh	r3, [r7, #22]
 800e6cc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800e6ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d006      	beq.n	800e6e4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800e6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d109      	bne.n	800e6f0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800e6dc:	23f9      	movs	r3, #249	; 0xf9
 800e6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800e6e2:	e02a      	b.n	800e73a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e6e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e6e8:	f043 0302 	orr.w	r3, r3, #2
 800e6ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a1a      	ldr	r2, [r3, #32]
 800e6f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6f6:	441a      	add	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d906      	bls.n	800e710 <lwip_netconn_do_writemore+0x144>
 800e702:	4b5c      	ldr	r3, [pc, #368]	; (800e874 <lwip_netconn_do_writemore+0x2a8>)
 800e704:	f240 6213 	movw	r2, #1555	; 0x613
 800e708:	4961      	ldr	r1, [pc, #388]	; (800e890 <lwip_netconn_do_writemore+0x2c4>)
 800e70a:	485c      	ldr	r0, [pc, #368]	; (800e87c <lwip_netconn_do_writemore+0x2b0>)
 800e70c:	f00a fb60 	bl	8018dd0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6858      	ldr	r0, [r3, #4]
 800e714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e718:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e71a:	69f9      	ldr	r1, [r7, #28]
 800e71c:	f006 f97a 	bl	8014a14 <tcp_write>
 800e720:	4603      	mov	r3, r0
 800e722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <lwip_netconn_do_writemore+0x16c>
 800e72e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e736:	d133      	bne.n	800e7a0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800e738:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800e73a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d017      	beq.n	800e772 <lwip_netconn_do_writemore+0x1a6>
 800e742:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d211      	bcs.n	800e772 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e752:	2b00      	cmp	r3, #0
 800e754:	d005      	beq.n	800e762 <lwip_netconn_do_writemore+0x196>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e75c:	2103      	movs	r1, #3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7f1b      	ldrb	r3, [r3, #28]
 800e766:	f043 0310 	orr.w	r3, r3, #16
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	771a      	strb	r2, [r3, #28]
 800e770:	e016      	b.n	800e7a0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e77a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e77e:	d305      	bcc.n	800e78c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e788:	2b04      	cmp	r3, #4
 800e78a:	d909      	bls.n	800e7a0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e790:	2b00      	cmp	r3, #0
 800e792:	d005      	beq.n	800e7a0 <lwip_netconn_do_writemore+0x1d4>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e79a:	2103      	movs	r1, #3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e7a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d134      	bne.n	800e812 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a1a      	ldr	r2, [r3, #32]
 800e7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ae:	441a      	add	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a1a      	ldr	r2, [r3, #32]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d003      	beq.n	800e7ca <lwip_netconn_do_writemore+0x1fe>
 800e7c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d007      	beq.n	800e7da <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	6a12      	ldr	r2, [r2, #32]
 800e7d2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f006 fdca 	bl	8015378 <tcp_output>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800e7e8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e7ec:	f113 0f0c 	cmn.w	r3, #12
 800e7f0:	db04      	blt.n	800e7fc <lwip_netconn_do_writemore+0x230>
 800e7f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e7f6:	f113 0f04 	cmn.w	r3, #4
 800e7fa:	d152      	bne.n	800e8a2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e7fc:	7d3b      	ldrb	r3, [r7, #20]
 800e7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e802:	2301      	movs	r3, #1
 800e804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80c:	2200      	movs	r2, #0
 800e80e:	60da      	str	r2, [r3, #12]
 800e810:	e047      	b.n	800e8a2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800e812:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81a:	d13b      	bne.n	800e894 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	f006 fda9 	bl	8015378 <tcp_output>
 800e826:	4603      	mov	r3, r0
 800e828:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800e82a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800e82e:	f113 0f0c 	cmn.w	r3, #12
 800e832:	db04      	blt.n	800e83e <lwip_netconn_do_writemore+0x272>
 800e834:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800e838:	f113 0f04 	cmn.w	r3, #4
 800e83c:	d10a      	bne.n	800e854 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e83e:	7d7b      	ldrb	r3, [r7, #21]
 800e840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e844:	2301      	movs	r3, #1
 800e846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84e:	2200      	movs	r2, #0
 800e850:	60da      	str	r2, [r3, #12]
 800e852:	e026      	b.n	800e8a2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800e854:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d022      	beq.n	800e8a2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800e85c:	23f9      	movs	r3, #249	; 0xf9
 800e85e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e862:	2301      	movs	r3, #1
 800e864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86c:	2200      	movs	r2, #0
 800e86e:	60da      	str	r2, [r3, #12]
 800e870:	e017      	b.n	800e8a2 <lwip_netconn_do_writemore+0x2d6>
 800e872:	bf00      	nop
 800e874:	08019fa0 	.word	0x08019fa0
 800e878:	0801a0e8 	.word	0x0801a0e8
 800e87c:	0801a01c 	.word	0x0801a01c
 800e880:	0801a3c8 	.word	0x0801a3c8
 800e884:	0801a0f8 	.word	0x0801a0f8
 800e888:	0801a3e8 	.word	0x0801a3e8
 800e88c:	0801a400 	.word	0x0801a400
 800e890:	0801a434 	.word	0x0801a434
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e894:	2301      	movs	r3, #1
 800e896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89e:	2200      	movs	r2, #0
 800e8a0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800e8a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d02c      	beq.n	800e904 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	330c      	adds	r3, #12
 800e8b2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8bc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00f      	beq.n	800e8f6 <lwip_netconn_do_writemore+0x32a>
 800e8d6:	f00a fa17 	bl	8018d08 <sys_arch_protect>
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e8e2:	f113 0f0c 	cmn.w	r3, #12
 800e8e6:	db03      	blt.n	800e8f0 <lwip_netconn_do_writemore+0x324>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8ee:	721a      	strb	r2, [r3, #8]
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f00a fa17 	bl	8018d24 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e8f6:	78fb      	ldrb	r3, [r7, #3]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d006      	beq.n	800e90a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e8fc:	6938      	ldr	r0, [r7, #16]
 800e8fe:	f00a f95e 	bl	8018bbe <sys_sem_signal>
 800e902:	e002      	b.n	800e90a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e904:	f04f 33ff 	mov.w	r3, #4294967295
 800e908:	e000      	b.n	800e90c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3728      	adds	r7, #40	; 0x28
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e928:	f113 0f0c 	cmn.w	r3, #12
 800e92c:	da06      	bge.n	800e93c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	711a      	strb	r2, [r3, #4]
 800e93a:	e072      	b.n	800ea22 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e946:	2b10      	cmp	r3, #16
 800e948:	d168      	bne.n	800ea1c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	785b      	ldrb	r3, [r3, #1]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d003      	beq.n	800e95c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	22fb      	movs	r2, #251	; 0xfb
 800e958:	711a      	strb	r2, [r3, #4]
 800e95a:	e062      	b.n	800ea22 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d056      	beq.n	800ea14 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2201      	movs	r2, #1
 800e96c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d104      	bne.n	800e982 <lwip_netconn_do_write+0x6e>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d006      	beq.n	800e990 <lwip_netconn_do_write+0x7c>
 800e982:	4b36      	ldr	r3, [pc, #216]	; (800ea5c <lwip_netconn_do_write+0x148>)
 800e984:	f240 6283 	movw	r2, #1667	; 0x683
 800e988:	4935      	ldr	r1, [pc, #212]	; (800ea60 <lwip_netconn_do_write+0x14c>)
 800e98a:	4836      	ldr	r0, [pc, #216]	; (800ea64 <lwip_netconn_do_write+0x150>)
 800e98c:	f00a fa20 	bl	8018dd0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <lwip_netconn_do_write+0x92>
 800e998:	4b30      	ldr	r3, [pc, #192]	; (800ea5c <lwip_netconn_do_write+0x148>)
 800e99a:	f240 6284 	movw	r2, #1668	; 0x684
 800e99e:	4932      	ldr	r1, [pc, #200]	; (800ea68 <lwip_netconn_do_write+0x154>)
 800e9a0:	4830      	ldr	r0, [pc, #192]	; (800ea64 <lwip_netconn_do_write+0x150>)
 800e9a2:	f00a fa15 	bl	8018dd0 <iprintf>
        msg->conn->current_msg = msg;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7ff fe05 	bl	800e5cc <lwip_netconn_do_writemore>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d044      	beq.n	800ea52 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	785b      	ldrb	r3, [r3, #1]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d006      	beq.n	800e9e0 <lwip_netconn_do_write+0xcc>
 800e9d2:	4b22      	ldr	r3, [pc, #136]	; (800ea5c <lwip_netconn_do_write+0x148>)
 800e9d4:	f240 6289 	movw	r2, #1673	; 0x689
 800e9d8:	4924      	ldr	r1, [pc, #144]	; (800ea6c <lwip_netconn_do_write+0x158>)
 800e9da:	4822      	ldr	r0, [pc, #136]	; (800ea64 <lwip_netconn_do_write+0x150>)
 800e9dc:	f00a f9f8 	bl	8018dd0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e9e0:	4823      	ldr	r0, [pc, #140]	; (800ea70 <lwip_netconn_do_write+0x15c>)
 800e9e2:	f00a f95e 	bl	8018ca2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	330c      	adds	r3, #12
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f00a f8b4 	bl	8018b5c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e9f4:	481e      	ldr	r0, [pc, #120]	; (800ea70 <lwip_netconn_do_write+0x15c>)
 800e9f6:	f00a f945 	bl	8018c84 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	785b      	ldrb	r3, [r3, #1]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d126      	bne.n	800ea52 <lwip_netconn_do_write+0x13e>
 800ea04:	4b15      	ldr	r3, [pc, #84]	; (800ea5c <lwip_netconn_do_write+0x148>)
 800ea06:	f240 628d 	movw	r2, #1677	; 0x68d
 800ea0a:	4918      	ldr	r1, [pc, #96]	; (800ea6c <lwip_netconn_do_write+0x158>)
 800ea0c:	4815      	ldr	r0, [pc, #84]	; (800ea64 <lwip_netconn_do_write+0x150>)
 800ea0e:	f00a f9df 	bl	8018dd0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ea12:	e01e      	b.n	800ea52 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	22f5      	movs	r2, #245	; 0xf5
 800ea18:	711a      	strb	r2, [r3, #4]
 800ea1a:	e002      	b.n	800ea22 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	22fa      	movs	r2, #250	; 0xfa
 800ea20:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d014      	beq.n	800ea54 <lwip_netconn_do_write+0x140>
 800ea2a:	f00a f96d 	bl	8018d08 <sys_arch_protect>
 800ea2e:	60b8      	str	r0, [r7, #8]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea38:	f113 0f0c 	cmn.w	r3, #12
 800ea3c:	db05      	blt.n	800ea4a <lwip_netconn_do_write+0x136>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ea48:	721a      	strb	r2, [r3, #8]
 800ea4a:	68b8      	ldr	r0, [r7, #8]
 800ea4c:	f00a f96a 	bl	8018d24 <sys_arch_unprotect>
 800ea50:	e000      	b.n	800ea54 <lwip_netconn_do_write+0x140>
        return;
 800ea52:	bf00      	nop
}
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	08019fa0 	.word	0x08019fa0
 800ea60:	0801a30c 	.word	0x0801a30c
 800ea64:	0801a01c 	.word	0x0801a01c
 800ea68:	0801a460 	.word	0x0801a460
 800ea6c:	0801a328 	.word	0x0801a328
 800ea70:	200048f0 	.word	0x200048f0

0800ea74 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	785b      	ldrb	r3, [r3, #1]
 800ea86:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d06e      	beq.n	800eb70 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ea9c:	2b10      	cmp	r3, #16
 800ea9e:	d167      	bne.n	800eb70 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800eaa4:	2b03      	cmp	r3, #3
 800eaa6:	d002      	beq.n	800eaae <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eaa8:	7cfb      	ldrb	r3, [r7, #19]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d060      	beq.n	800eb70 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800eaae:	7cfb      	ldrb	r3, [r7, #19]
 800eab0:	2b03      	cmp	r3, #3
 800eab2:	d103      	bne.n	800eabc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	22f5      	movs	r2, #245	; 0xf5
 800eab8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eaba:	e05c      	b.n	800eb76 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800eabc:	7cfb      	ldrb	r3, [r7, #19]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d103      	bne.n	800eaca <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	22fb      	movs	r2, #251	; 0xfb
 800eac6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eac8:	e055      	b.n	800eb76 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	7a1b      	ldrb	r3, [r3, #8]
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d004      	beq.n	800eae0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4618      	mov	r0, r3
 800eadc:	f7ff f90e 	bl	800dcfc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d104      	bne.n	800eaf4 <lwip_netconn_do_close+0x80>
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	6a1b      	ldr	r3, [r3, #32]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <lwip_netconn_do_close+0x8e>
 800eaf4:	4b2e      	ldr	r3, [pc, #184]	; (800ebb0 <lwip_netconn_do_close+0x13c>)
 800eaf6:	f240 721c 	movw	r2, #1820	; 0x71c
 800eafa:	492e      	ldr	r1, [pc, #184]	; (800ebb4 <lwip_netconn_do_close+0x140>)
 800eafc:	482e      	ldr	r0, [pc, #184]	; (800ebb8 <lwip_netconn_do_close+0x144>)
 800eafe:	f00a f967 	bl	8018dd0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2204      	movs	r2, #4
 800eb08:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	697a      	ldr	r2, [r7, #20]
 800eb10:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2100      	movs	r1, #0
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff f96f 	bl	800ddfc <lwip_netconn_do_close_internal>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d040      	beq.n	800eba6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	785b      	ldrb	r3, [r3, #1]
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d006      	beq.n	800eb3c <lwip_netconn_do_close+0xc8>
 800eb2e:	4b20      	ldr	r3, [pc, #128]	; (800ebb0 <lwip_netconn_do_close+0x13c>)
 800eb30:	f240 7221 	movw	r2, #1825	; 0x721
 800eb34:	4921      	ldr	r1, [pc, #132]	; (800ebbc <lwip_netconn_do_close+0x148>)
 800eb36:	4820      	ldr	r0, [pc, #128]	; (800ebb8 <lwip_netconn_do_close+0x144>)
 800eb38:	f00a f94a 	bl	8018dd0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800eb3c:	4820      	ldr	r0, [pc, #128]	; (800ebc0 <lwip_netconn_do_close+0x14c>)
 800eb3e:	f00a f8b0 	bl	8018ca2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	330c      	adds	r3, #12
 800eb48:	2100      	movs	r1, #0
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f00a f806 	bl	8018b5c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800eb50:	481b      	ldr	r0, [pc, #108]	; (800ebc0 <lwip_netconn_do_close+0x14c>)
 800eb52:	f00a f897 	bl	8018c84 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	785b      	ldrb	r3, [r3, #1]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d022      	beq.n	800eba6 <lwip_netconn_do_close+0x132>
 800eb60:	4b13      	ldr	r3, [pc, #76]	; (800ebb0 <lwip_netconn_do_close+0x13c>)
 800eb62:	f240 7225 	movw	r2, #1829	; 0x725
 800eb66:	4915      	ldr	r1, [pc, #84]	; (800ebbc <lwip_netconn_do_close+0x148>)
 800eb68:	4813      	ldr	r0, [pc, #76]	; (800ebb8 <lwip_netconn_do_close+0x144>)
 800eb6a:	f00a f931 	bl	8018dd0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800eb6e:	e01a      	b.n	800eba6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	22f5      	movs	r2, #245	; 0xf5
 800eb74:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d014      	beq.n	800eba8 <lwip_netconn_do_close+0x134>
 800eb7e:	f00a f8c3 	bl	8018d08 <sys_arch_protect>
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eb8c:	f113 0f0c 	cmn.w	r3, #12
 800eb90:	db05      	blt.n	800eb9e <lwip_netconn_do_close+0x12a>
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800eb9c:	721a      	strb	r2, [r3, #8]
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f00a f8c0 	bl	8018d24 <sys_arch_unprotect>
 800eba4:	e000      	b.n	800eba8 <lwip_netconn_do_close+0x134>
      return;
 800eba6:	bf00      	nop
}
 800eba8:	3718      	adds	r7, #24
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	08019fa0 	.word	0x08019fa0
 800ebb4:	0801a30c 	.word	0x0801a30c
 800ebb8:	0801a01c 	.word	0x0801a01c
 800ebbc:	0801a328 	.word	0x0801a328
 800ebc0:	200048f0 	.word	0x200048f0

0800ebc4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d013      	beq.n	800ebfa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00b      	beq.n	800ebf2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f001 fc1a 	bl	8010418 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	605a      	str	r2, [r3, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ebf2:	6879      	ldr	r1, [r7, #4]
 800ebf4:	2006      	movs	r0, #6
 800ebf6:	f000 fe77 	bl	800f8e8 <memp_free>
  }
}
 800ebfa:	bf00      	nop
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
	...

0800ec04 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d108      	bne.n	800ec28 <netbuf_data+0x24>
 800ec16:	4b1b      	ldr	r3, [pc, #108]	; (800ec84 <netbuf_data+0x80>)
 800ec18:	22c2      	movs	r2, #194	; 0xc2
 800ec1a:	491b      	ldr	r1, [pc, #108]	; (800ec88 <netbuf_data+0x84>)
 800ec1c:	481b      	ldr	r0, [pc, #108]	; (800ec8c <netbuf_data+0x88>)
 800ec1e:	f00a f8d7 	bl	8018dd0 <iprintf>
 800ec22:	f06f 030f 	mvn.w	r3, #15
 800ec26:	e029      	b.n	800ec7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d108      	bne.n	800ec40 <netbuf_data+0x3c>
 800ec2e:	4b15      	ldr	r3, [pc, #84]	; (800ec84 <netbuf_data+0x80>)
 800ec30:	22c3      	movs	r2, #195	; 0xc3
 800ec32:	4917      	ldr	r1, [pc, #92]	; (800ec90 <netbuf_data+0x8c>)
 800ec34:	4815      	ldr	r0, [pc, #84]	; (800ec8c <netbuf_data+0x88>)
 800ec36:	f00a f8cb 	bl	8018dd0 <iprintf>
 800ec3a:	f06f 030f 	mvn.w	r3, #15
 800ec3e:	e01d      	b.n	800ec7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d108      	bne.n	800ec58 <netbuf_data+0x54>
 800ec46:	4b0f      	ldr	r3, [pc, #60]	; (800ec84 <netbuf_data+0x80>)
 800ec48:	22c4      	movs	r2, #196	; 0xc4
 800ec4a:	4912      	ldr	r1, [pc, #72]	; (800ec94 <netbuf_data+0x90>)
 800ec4c:	480f      	ldr	r0, [pc, #60]	; (800ec8c <netbuf_data+0x88>)
 800ec4e:	f00a f8bf 	bl	8018dd0 <iprintf>
 800ec52:	f06f 030f 	mvn.w	r3, #15
 800ec56:	e011      	b.n	800ec7c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d102      	bne.n	800ec66 <netbuf_data+0x62>
    return ERR_BUF;
 800ec60:	f06f 0301 	mvn.w	r3, #1
 800ec64:	e00a      	b.n	800ec7c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	895a      	ldrh	r2, [r3, #10]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	0801a48c 	.word	0x0801a48c
 800ec88:	0801a5b4 	.word	0x0801a5b4
 800ec8c:	0801a4fc 	.word	0x0801a4fc
 800ec90:	0801a5d0 	.word	0x0801a5d0
 800ec94:	0801a5f0 	.word	0x0801a5f0

0800ec98 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d108      	bne.n	800ecb8 <netbuf_next+0x20>
 800eca6:	4b11      	ldr	r3, [pc, #68]	; (800ecec <netbuf_next+0x54>)
 800eca8:	22dc      	movs	r2, #220	; 0xdc
 800ecaa:	4911      	ldr	r1, [pc, #68]	; (800ecf0 <netbuf_next+0x58>)
 800ecac:	4811      	ldr	r0, [pc, #68]	; (800ecf4 <netbuf_next+0x5c>)
 800ecae:	f00a f88f 	bl	8018dd0 <iprintf>
 800ecb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb6:	e014      	b.n	800ece2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d102      	bne.n	800ecc8 <netbuf_next+0x30>
    return -1;
 800ecc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc6:	e00c      	b.n	800ece2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d101      	bne.n	800ece0 <netbuf_next+0x48>
    return 1;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e000      	b.n	800ece2 <netbuf_next+0x4a>
  }
  return 0;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	0801a48c 	.word	0x0801a48c
 800ecf0:	0801a60c 	.word	0x0801a60c
 800ecf4:	0801a4fc 	.word	0x0801a4fc

0800ecf8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800ed00:	4b29      	ldr	r3, [pc, #164]	; (800eda8 <tcpip_thread+0xb0>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d005      	beq.n	800ed14 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800ed08:	4b27      	ldr	r3, [pc, #156]	; (800eda8 <tcpip_thread+0xb0>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a27      	ldr	r2, [pc, #156]	; (800edac <tcpip_thread+0xb4>)
 800ed0e:	6812      	ldr	r2, [r2, #0]
 800ed10:	4610      	mov	r0, r2
 800ed12:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800ed14:	4826      	ldr	r0, [pc, #152]	; (800edb0 <tcpip_thread+0xb8>)
 800ed16:	f009 ffb5 	bl	8018c84 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800ed1a:	4825      	ldr	r0, [pc, #148]	; (800edb0 <tcpip_thread+0xb8>)
 800ed1c:	f009 ffc1 	bl	8018ca2 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800ed20:	f107 030c 	add.w	r3, r7, #12
 800ed24:	4619      	mov	r1, r3
 800ed26:	4823      	ldr	r0, [pc, #140]	; (800edb4 <tcpip_thread+0xbc>)
 800ed28:	f007 f97c 	bl	8016024 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ed2c:	4820      	ldr	r0, [pc, #128]	; (800edb0 <tcpip_thread+0xb8>)
 800ed2e:	f009 ffa9 	bl	8018c84 <sys_mutex_lock>
    if (msg == NULL) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d106      	bne.n	800ed46 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed38:	4b1f      	ldr	r3, [pc, #124]	; (800edb8 <tcpip_thread+0xc0>)
 800ed3a:	2269      	movs	r2, #105	; 0x69
 800ed3c:	491f      	ldr	r1, [pc, #124]	; (800edbc <tcpip_thread+0xc4>)
 800ed3e:	4820      	ldr	r0, [pc, #128]	; (800edc0 <tcpip_thread+0xc8>)
 800ed40:	f00a f846 	bl	8018dd0 <iprintf>
      continue;
 800ed44:	e02f      	b.n	800eda6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d011      	beq.n	800ed72 <tcpip_thread+0x7a>
 800ed4e:	2b04      	cmp	r3, #4
 800ed50:	d01b      	beq.n	800ed8a <tcpip_thread+0x92>
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d120      	bne.n	800ed98 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	6850      	ldr	r0, [r2, #4]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	6892      	ldr	r2, [r2, #8]
 800ed62:	4611      	mov	r1, r2
 800ed64:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4619      	mov	r1, r3
 800ed6a:	2009      	movs	r0, #9
 800ed6c:	f000 fdbc 	bl	800f8e8 <memp_free>
      break;
 800ed70:	e019      	b.n	800eda6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	6892      	ldr	r2, [r2, #8]
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	4619      	mov	r1, r3
 800ed82:	2008      	movs	r0, #8
 800ed84:	f000 fdb0 	bl	800f8e8 <memp_free>
      break;
 800ed88:	e00d      	b.n	800eda6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	6892      	ldr	r2, [r2, #8]
 800ed92:	4610      	mov	r0, r2
 800ed94:	4798      	blx	r3
      break;
 800ed96:	e006      	b.n	800eda6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed98:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <tcpip_thread+0xc0>)
 800ed9a:	229b      	movs	r2, #155	; 0x9b
 800ed9c:	4907      	ldr	r1, [pc, #28]	; (800edbc <tcpip_thread+0xc4>)
 800ed9e:	4808      	ldr	r0, [pc, #32]	; (800edc0 <tcpip_thread+0xc8>)
 800eda0:	f00a f816 	bl	8018dd0 <iprintf>
      break;
 800eda4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800eda6:	e7b8      	b.n	800ed1a <tcpip_thread+0x22>
 800eda8:	20004060 	.word	0x20004060
 800edac:	20004064 	.word	0x20004064
 800edb0:	200048f0 	.word	0x200048f0
 800edb4:	20004068 	.word	0x20004068
 800edb8:	0801a644 	.word	0x0801a644
 800edbc:	0801a698 	.word	0x0801a698
 800edc0:	0801a6b8 	.word	0x0801a6b8

0800edc4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800edd0:	481a      	ldr	r0, [pc, #104]	; (800ee3c <tcpip_inpkt+0x78>)
 800edd2:	f009 fe7d 	bl	8018ad0 <sys_mbox_valid>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d105      	bne.n	800ede8 <tcpip_inpkt+0x24>
 800eddc:	4b18      	ldr	r3, [pc, #96]	; (800ee40 <tcpip_inpkt+0x7c>)
 800edde:	22b5      	movs	r2, #181	; 0xb5
 800ede0:	4918      	ldr	r1, [pc, #96]	; (800ee44 <tcpip_inpkt+0x80>)
 800ede2:	4819      	ldr	r0, [pc, #100]	; (800ee48 <tcpip_inpkt+0x84>)
 800ede4:	f009 fff4 	bl	8018dd0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ede8:	2009      	movs	r0, #9
 800edea:	f000 fd07 	bl	800f7fc <memp_malloc>
 800edee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d102      	bne.n	800edfc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800edf6:	f04f 33ff 	mov.w	r3, #4294967295
 800edfa:	e01a      	b.n	800ee32 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2202      	movs	r2, #2
 800ee00:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800ee14:	6979      	ldr	r1, [r7, #20]
 800ee16:	4809      	ldr	r0, [pc, #36]	; (800ee3c <tcpip_inpkt+0x78>)
 800ee18:	f009 fde5 	bl	80189e6 <sys_mbox_trypost>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d006      	beq.n	800ee30 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee22:	6979      	ldr	r1, [r7, #20]
 800ee24:	2009      	movs	r0, #9
 800ee26:	f000 fd5f 	bl	800f8e8 <memp_free>
    return ERR_MEM;
 800ee2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2e:	e000      	b.n	800ee32 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ee30:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20004068 	.word	0x20004068
 800ee40:	0801a644 	.word	0x0801a644
 800ee44:	0801a6e0 	.word	0x0801a6e0
 800ee48:	0801a6b8 	.word	0x0801a6b8

0800ee4c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ee5c:	f003 0318 	and.w	r3, r3, #24
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d006      	beq.n	800ee72 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ee64:	4a08      	ldr	r2, [pc, #32]	; (800ee88 <tcpip_input+0x3c>)
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7ff ffab 	bl	800edc4 <tcpip_inpkt>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	e005      	b.n	800ee7e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800ee72:	4a06      	ldr	r2, [pc, #24]	; (800ee8c <tcpip_input+0x40>)
 800ee74:	6839      	ldr	r1, [r7, #0]
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7ff ffa4 	bl	800edc4 <tcpip_inpkt>
 800ee7c:	4603      	mov	r3, r0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	0801879d 	.word	0x0801879d
 800ee8c:	08017761 	.word	0x08017761

0800ee90 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800ee9e:	481d      	ldr	r0, [pc, #116]	; (800ef14 <tcpip_callback_with_block+0x84>)
 800eea0:	f009 fe16 	bl	8018ad0 <sys_mbox_valid>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d105      	bne.n	800eeb6 <tcpip_callback_with_block+0x26>
 800eeaa:	4b1b      	ldr	r3, [pc, #108]	; (800ef18 <tcpip_callback_with_block+0x88>)
 800eeac:	22ee      	movs	r2, #238	; 0xee
 800eeae:	491b      	ldr	r1, [pc, #108]	; (800ef1c <tcpip_callback_with_block+0x8c>)
 800eeb0:	481b      	ldr	r0, [pc, #108]	; (800ef20 <tcpip_callback_with_block+0x90>)
 800eeb2:	f009 ff8d 	bl	8018dd0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800eeb6:	2008      	movs	r0, #8
 800eeb8:	f000 fca0 	bl	800f7fc <memp_malloc>
 800eebc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d102      	bne.n	800eeca <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800eec4:	f04f 33ff 	mov.w	r3, #4294967295
 800eec8:	e01f      	b.n	800ef0a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2203      	movs	r2, #3
 800eece:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	609a      	str	r2, [r3, #8]
  if (block) {
 800eedc:	79fb      	ldrb	r3, [r7, #7]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d004      	beq.n	800eeec <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800eee2:	6979      	ldr	r1, [r7, #20]
 800eee4:	480b      	ldr	r0, [pc, #44]	; (800ef14 <tcpip_callback_with_block+0x84>)
 800eee6:	f009 fd69 	bl	80189bc <sys_mbox_post>
 800eeea:	e00d      	b.n	800ef08 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800eeec:	6979      	ldr	r1, [r7, #20]
 800eeee:	4809      	ldr	r0, [pc, #36]	; (800ef14 <tcpip_callback_with_block+0x84>)
 800eef0:	f009 fd79 	bl	80189e6 <sys_mbox_trypost>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d006      	beq.n	800ef08 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800eefa:	6979      	ldr	r1, [r7, #20]
 800eefc:	2008      	movs	r0, #8
 800eefe:	f000 fcf3 	bl	800f8e8 <memp_free>
      return ERR_MEM;
 800ef02:	f04f 33ff 	mov.w	r3, #4294967295
 800ef06:	e000      	b.n	800ef0a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3718      	adds	r7, #24
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	20004068 	.word	0x20004068
 800ef18:	0801a644 	.word	0x0801a644
 800ef1c:	0801a6e0 	.word	0x0801a6e0
 800ef20:	0801a6b8 	.word	0x0801a6b8

0800ef24 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ef30:	4806      	ldr	r0, [pc, #24]	; (800ef4c <tcpip_send_msg_wait_sem+0x28>)
 800ef32:	f009 fea7 	bl	8018c84 <sys_mutex_lock>
  fn(apimsg);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	68b8      	ldr	r0, [r7, #8]
 800ef3a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ef3c:	4803      	ldr	r0, [pc, #12]	; (800ef4c <tcpip_send_msg_wait_sem+0x28>)
 800ef3e:	f009 feb0 	bl	8018ca2 <sys_mutex_unlock>
  return ERR_OK;
 800ef42:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	200048f0 	.word	0x200048f0

0800ef50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af02      	add	r7, sp, #8
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ef5a:	f000 f86a 	bl	800f032 <lwip_init>

  tcpip_init_done = initfunc;
 800ef5e:	4a17      	ldr	r2, [pc, #92]	; (800efbc <tcpip_init+0x6c>)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ef64:	4a16      	ldr	r2, [pc, #88]	; (800efc0 <tcpip_init+0x70>)
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ef6a:	2106      	movs	r1, #6
 800ef6c:	4815      	ldr	r0, [pc, #84]	; (800efc4 <tcpip_init+0x74>)
 800ef6e:	f009 fcf1 	bl	8018954 <sys_mbox_new>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d006      	beq.n	800ef86 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ef78:	4b13      	ldr	r3, [pc, #76]	; (800efc8 <tcpip_init+0x78>)
 800ef7a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ef7e:	4913      	ldr	r1, [pc, #76]	; (800efcc <tcpip_init+0x7c>)
 800ef80:	4813      	ldr	r0, [pc, #76]	; (800efd0 <tcpip_init+0x80>)
 800ef82:	f009 ff25 	bl	8018dd0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ef86:	4813      	ldr	r0, [pc, #76]	; (800efd4 <tcpip_init+0x84>)
 800ef88:	f009 fe60 	bl	8018c4c <sys_mutex_new>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d006      	beq.n	800efa0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ef92:	4b0d      	ldr	r3, [pc, #52]	; (800efc8 <tcpip_init+0x78>)
 800ef94:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ef98:	490f      	ldr	r1, [pc, #60]	; (800efd8 <tcpip_init+0x88>)
 800ef9a:	480d      	ldr	r0, [pc, #52]	; (800efd0 <tcpip_init+0x80>)
 800ef9c:	f009 ff18 	bl	8018dd0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800efa0:	2300      	movs	r3, #0
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efa8:	2200      	movs	r2, #0
 800efaa:	490c      	ldr	r1, [pc, #48]	; (800efdc <tcpip_init+0x8c>)
 800efac:	480c      	ldr	r0, [pc, #48]	; (800efe0 <tcpip_init+0x90>)
 800efae:	f009 fe85 	bl	8018cbc <sys_thread_new>
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	20004060 	.word	0x20004060
 800efc0:	20004064 	.word	0x20004064
 800efc4:	20004068 	.word	0x20004068
 800efc8:	0801a644 	.word	0x0801a644
 800efcc:	0801a6f0 	.word	0x0801a6f0
 800efd0:	0801a6b8 	.word	0x0801a6b8
 800efd4:	200048f0 	.word	0x200048f0
 800efd8:	0801a714 	.word	0x0801a714
 800efdc:	0800ecf9 	.word	0x0800ecf9
 800efe0:	0801a738 	.word	0x0801a738

0800efe4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800efee:	88fb      	ldrh	r3, [r7, #6]
 800eff0:	ba5b      	rev16	r3, r3
 800eff2:	b29b      	uxth	r3, r3
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	061a      	lsls	r2, r3, #24
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	021b      	lsls	r3, r3, #8
 800f010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f014:	431a      	orrs	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	0a1b      	lsrs	r3, r3, #8
 800f01a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	0e1b      	lsrs	r3, r3, #24
 800f024:	4313      	orrs	r3, r2
}
 800f026:	4618      	mov	r0, r3
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b082      	sub	sp, #8
 800f036:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f03c:	f009 fdf8 	bl	8018c30 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f040:	f000 f8a6 	bl	800f190 <mem_init>
  memp_init();
 800f044:	f000 fb6c 	bl	800f720 <memp_init>
  pbuf_init();
  netif_init();
 800f048:	f000 fc78 	bl	800f93c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f04c:	f007 f810 	bl	8016070 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f050:	f001 fc58 	bl	8010904 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f054:	f006 fea2 	bl	8015d9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f058:	bf00      	nop
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f068:	4b40      	ldr	r3, [pc, #256]	; (800f16c <plug_holes+0x10c>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d206      	bcs.n	800f080 <plug_holes+0x20>
 800f072:	4b3f      	ldr	r3, [pc, #252]	; (800f170 <plug_holes+0x110>)
 800f074:	f240 125d 	movw	r2, #349	; 0x15d
 800f078:	493e      	ldr	r1, [pc, #248]	; (800f174 <plug_holes+0x114>)
 800f07a:	483f      	ldr	r0, [pc, #252]	; (800f178 <plug_holes+0x118>)
 800f07c:	f009 fea8 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f080:	4b3e      	ldr	r3, [pc, #248]	; (800f17c <plug_holes+0x11c>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d306      	bcc.n	800f098 <plug_holes+0x38>
 800f08a:	4b39      	ldr	r3, [pc, #228]	; (800f170 <plug_holes+0x110>)
 800f08c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f090:	493b      	ldr	r1, [pc, #236]	; (800f180 <plug_holes+0x120>)
 800f092:	4839      	ldr	r0, [pc, #228]	; (800f178 <plug_holes+0x118>)
 800f094:	f009 fe9c 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	791b      	ldrb	r3, [r3, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d006      	beq.n	800f0ae <plug_holes+0x4e>
 800f0a0:	4b33      	ldr	r3, [pc, #204]	; (800f170 <plug_holes+0x110>)
 800f0a2:	f240 125f 	movw	r2, #351	; 0x15f
 800f0a6:	4937      	ldr	r1, [pc, #220]	; (800f184 <plug_holes+0x124>)
 800f0a8:	4833      	ldr	r0, [pc, #204]	; (800f178 <plug_holes+0x118>)
 800f0aa:	f009 fe91 	bl	8018dd0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0b6:	d906      	bls.n	800f0c6 <plug_holes+0x66>
 800f0b8:	4b2d      	ldr	r3, [pc, #180]	; (800f170 <plug_holes+0x110>)
 800f0ba:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f0be:	4932      	ldr	r1, [pc, #200]	; (800f188 <plug_holes+0x128>)
 800f0c0:	482d      	ldr	r0, [pc, #180]	; (800f178 <plug_holes+0x118>)
 800f0c2:	f009 fe85 	bl	8018dd0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f0c6:	4b29      	ldr	r3, [pc, #164]	; (800f16c <plug_holes+0x10c>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	8812      	ldrh	r2, [r2, #0]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d01f      	beq.n	800f11a <plug_holes+0xba>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	791b      	ldrb	r3, [r3, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d11b      	bne.n	800f11a <plug_holes+0xba>
 800f0e2:	4b26      	ldr	r3, [pc, #152]	; (800f17c <plug_holes+0x11c>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d016      	beq.n	800f11a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f0ec:	4b27      	ldr	r3, [pc, #156]	; (800f18c <plug_holes+0x12c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d102      	bne.n	800f0fc <plug_holes+0x9c>
      lfree = mem;
 800f0f6:	4a25      	ldr	r2, [pc, #148]	; (800f18c <plug_holes+0x12c>)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	881a      	ldrh	r2, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a19      	ldr	r2, [pc, #100]	; (800f16c <plug_holes+0x10c>)
 800f108:	6812      	ldr	r2, [r2, #0]
 800f10a:	1a99      	subs	r1, r3, r2
 800f10c:	4b17      	ldr	r3, [pc, #92]	; (800f16c <plug_holes+0x10c>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	8812      	ldrh	r2, [r2, #0]
 800f114:	4413      	add	r3, r2
 800f116:	b28a      	uxth	r2, r1
 800f118:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f11a:	4b14      	ldr	r3, [pc, #80]	; (800f16c <plug_holes+0x10c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	8852      	ldrh	r2, [r2, #2]
 800f122:	4413      	add	r3, r2
 800f124:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d01a      	beq.n	800f164 <plug_holes+0x104>
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	791b      	ldrb	r3, [r3, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d116      	bne.n	800f164 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f136:	4b15      	ldr	r3, [pc, #84]	; (800f18c <plug_holes+0x12c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d102      	bne.n	800f146 <plug_holes+0xe6>
      lfree = pmem;
 800f140:	4a12      	ldr	r2, [pc, #72]	; (800f18c <plug_holes+0x12c>)
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	881a      	ldrh	r2, [r3, #0]
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	4a06      	ldr	r2, [pc, #24]	; (800f16c <plug_holes+0x10c>)
 800f152:	6812      	ldr	r2, [r2, #0]
 800f154:	1a99      	subs	r1, r3, r2
 800f156:	4b05      	ldr	r3, [pc, #20]	; (800f16c <plug_holes+0x10c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	8812      	ldrh	r2, [r2, #0]
 800f15e:	4413      	add	r3, r2
 800f160:	b28a      	uxth	r2, r1
 800f162:	805a      	strh	r2, [r3, #2]
  }
}
 800f164:	bf00      	nop
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	2000406c 	.word	0x2000406c
 800f170:	0801a748 	.word	0x0801a748
 800f174:	0801a79c 	.word	0x0801a79c
 800f178:	0801a7b4 	.word	0x0801a7b4
 800f17c:	20004070 	.word	0x20004070
 800f180:	0801a7dc 	.word	0x0801a7dc
 800f184:	0801a7f8 	.word	0x0801a7f8
 800f188:	0801a814 	.word	0x0801a814
 800f18c:	20004074 	.word	0x20004074

0800f190 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f196:	4b1c      	ldr	r3, [pc, #112]	; (800f208 <mem_init+0x78>)
 800f198:	4a1c      	ldr	r2, [pc, #112]	; (800f20c <mem_init+0x7c>)
 800f19a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f19c:	4b1a      	ldr	r3, [pc, #104]	; (800f208 <mem_init+0x78>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f1a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f1b6:	4b14      	ldr	r3, [pc, #80]	; (800f208 <mem_init+0x78>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800f1be:	4a14      	ldr	r2, [pc, #80]	; (800f210 <mem_init+0x80>)
 800f1c0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f1c2:	4b13      	ldr	r3, [pc, #76]	; (800f210 <mem_init+0x80>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f1ca:	4b11      	ldr	r3, [pc, #68]	; (800f210 <mem_init+0x80>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f1d2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f1d4:	4b0e      	ldr	r3, [pc, #56]	; (800f210 <mem_init+0x80>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f1dc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f1de:	4b0a      	ldr	r3, [pc, #40]	; (800f208 <mem_init+0x78>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4a0c      	ldr	r2, [pc, #48]	; (800f214 <mem_init+0x84>)
 800f1e4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f1e6:	480c      	ldr	r0, [pc, #48]	; (800f218 <mem_init+0x88>)
 800f1e8:	f009 fd30 	bl	8018c4c <sys_mutex_new>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d006      	beq.n	800f200 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f1f2:	4b0a      	ldr	r3, [pc, #40]	; (800f21c <mem_init+0x8c>)
 800f1f4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f1f8:	4909      	ldr	r1, [pc, #36]	; (800f220 <mem_init+0x90>)
 800f1fa:	480a      	ldr	r0, [pc, #40]	; (800f224 <mem_init+0x94>)
 800f1fc:	f009 fde8 	bl	8018dd0 <iprintf>
  }
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	2000406c 	.word	0x2000406c
 800f20c:	30044000 	.word	0x30044000
 800f210:	20004070 	.word	0x20004070
 800f214:	20004074 	.word	0x20004074
 800f218:	20004078 	.word	0x20004078
 800f21c:	0801a748 	.word	0x0801a748
 800f220:	0801a840 	.word	0x0801a840
 800f224:	0801a7b4 	.word	0x0801a7b4

0800f228 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d050      	beq.n	800f2d8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f003 0303 	and.w	r3, r3, #3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d006      	beq.n	800f24e <mem_free+0x26>
 800f240:	4b27      	ldr	r3, [pc, #156]	; (800f2e0 <mem_free+0xb8>)
 800f242:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f246:	4927      	ldr	r1, [pc, #156]	; (800f2e4 <mem_free+0xbc>)
 800f248:	4827      	ldr	r0, [pc, #156]	; (800f2e8 <mem_free+0xc0>)
 800f24a:	f009 fdc1 	bl	8018dd0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f24e:	4b27      	ldr	r3, [pc, #156]	; (800f2ec <mem_free+0xc4>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	429a      	cmp	r2, r3
 800f256:	d304      	bcc.n	800f262 <mem_free+0x3a>
 800f258:	4b25      	ldr	r3, [pc, #148]	; (800f2f0 <mem_free+0xc8>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d306      	bcc.n	800f270 <mem_free+0x48>
 800f262:	4b1f      	ldr	r3, [pc, #124]	; (800f2e0 <mem_free+0xb8>)
 800f264:	f240 12af 	movw	r2, #431	; 0x1af
 800f268:	4922      	ldr	r1, [pc, #136]	; (800f2f4 <mem_free+0xcc>)
 800f26a:	481f      	ldr	r0, [pc, #124]	; (800f2e8 <mem_free+0xc0>)
 800f26c:	f009 fdb0 	bl	8018dd0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f270:	4b1e      	ldr	r3, [pc, #120]	; (800f2ec <mem_free+0xc4>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	429a      	cmp	r2, r3
 800f278:	d304      	bcc.n	800f284 <mem_free+0x5c>
 800f27a:	4b1d      	ldr	r3, [pc, #116]	; (800f2f0 <mem_free+0xc8>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	d306      	bcc.n	800f292 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f284:	f009 fd40 	bl	8018d08 <sys_arch_protect>
 800f288:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f28a:	68b8      	ldr	r0, [r7, #8]
 800f28c:	f009 fd4a 	bl	8018d24 <sys_arch_unprotect>
    return;
 800f290:	e023      	b.n	800f2da <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f292:	4819      	ldr	r0, [pc, #100]	; (800f2f8 <mem_free+0xd0>)
 800f294:	f009 fcf6 	bl	8018c84 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	3b08      	subs	r3, #8
 800f29c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	791b      	ldrb	r3, [r3, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d106      	bne.n	800f2b4 <mem_free+0x8c>
 800f2a6:	4b0e      	ldr	r3, [pc, #56]	; (800f2e0 <mem_free+0xb8>)
 800f2a8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f2ac:	4913      	ldr	r1, [pc, #76]	; (800f2fc <mem_free+0xd4>)
 800f2ae:	480e      	ldr	r0, [pc, #56]	; (800f2e8 <mem_free+0xc0>)
 800f2b0:	f009 fd8e 	bl	8018dd0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f2ba:	4b11      	ldr	r3, [pc, #68]	; (800f300 <mem_free+0xd8>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d202      	bcs.n	800f2ca <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f2c4:	4a0e      	ldr	r2, [pc, #56]	; (800f300 <mem_free+0xd8>)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f7ff fec8 	bl	800f060 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f2d0:	4809      	ldr	r0, [pc, #36]	; (800f2f8 <mem_free+0xd0>)
 800f2d2:	f009 fce6 	bl	8018ca2 <sys_mutex_unlock>
 800f2d6:	e000      	b.n	800f2da <mem_free+0xb2>
    return;
 800f2d8:	bf00      	nop
}
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	0801a748 	.word	0x0801a748
 800f2e4:	0801a85c 	.word	0x0801a85c
 800f2e8:	0801a7b4 	.word	0x0801a7b4
 800f2ec:	2000406c 	.word	0x2000406c
 800f2f0:	20004070 	.word	0x20004070
 800f2f4:	0801a880 	.word	0x0801a880
 800f2f8:	20004078 	.word	0x20004078
 800f2fc:	0801a898 	.word	0x0801a898
 800f300:	20004074 	.word	0x20004074

0800f304 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b088      	sub	sp, #32
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800f310:	887b      	ldrh	r3, [r7, #2]
 800f312:	3303      	adds	r3, #3
 800f314:	b29b      	uxth	r3, r3
 800f316:	f023 0303 	bic.w	r3, r3, #3
 800f31a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800f31c:	887b      	ldrh	r3, [r7, #2]
 800f31e:	2b0b      	cmp	r3, #11
 800f320:	d801      	bhi.n	800f326 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f322:	230c      	movs	r3, #12
 800f324:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800f326:	887b      	ldrh	r3, [r7, #2]
 800f328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f32c:	d901      	bls.n	800f332 <mem_trim+0x2e>
    return NULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	e0bd      	b.n	800f4ae <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f332:	4b61      	ldr	r3, [pc, #388]	; (800f4b8 <mem_trim+0x1b4>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d304      	bcc.n	800f346 <mem_trim+0x42>
 800f33c:	4b5f      	ldr	r3, [pc, #380]	; (800f4bc <mem_trim+0x1b8>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	429a      	cmp	r2, r3
 800f344:	d306      	bcc.n	800f354 <mem_trim+0x50>
 800f346:	4b5e      	ldr	r3, [pc, #376]	; (800f4c0 <mem_trim+0x1bc>)
 800f348:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f34c:	495d      	ldr	r1, [pc, #372]	; (800f4c4 <mem_trim+0x1c0>)
 800f34e:	485e      	ldr	r0, [pc, #376]	; (800f4c8 <mem_trim+0x1c4>)
 800f350:	f009 fd3e 	bl	8018dd0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f354:	4b58      	ldr	r3, [pc, #352]	; (800f4b8 <mem_trim+0x1b4>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d304      	bcc.n	800f368 <mem_trim+0x64>
 800f35e:	4b57      	ldr	r3, [pc, #348]	; (800f4bc <mem_trim+0x1b8>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	429a      	cmp	r2, r3
 800f366:	d307      	bcc.n	800f378 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f368:	f009 fcce 	bl	8018d08 <sys_arch_protect>
 800f36c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f009 fcd8 	bl	8018d24 <sys_arch_unprotect>
    return rmem;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	e09a      	b.n	800f4ae <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3b08      	subs	r3, #8
 800f37c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	4a4d      	ldr	r2, [pc, #308]	; (800f4b8 <mem_trim+0x1b4>)
 800f382:	6812      	ldr	r2, [r2, #0]
 800f384:	1a9b      	subs	r3, r3, r2
 800f386:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	881a      	ldrh	r2, [r3, #0]
 800f38c:	8b7b      	ldrh	r3, [r7, #26]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	b29b      	uxth	r3, r3
 800f392:	3b08      	subs	r3, #8
 800f394:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f396:	887a      	ldrh	r2, [r7, #2]
 800f398:	8b3b      	ldrh	r3, [r7, #24]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d906      	bls.n	800f3ac <mem_trim+0xa8>
 800f39e:	4b48      	ldr	r3, [pc, #288]	; (800f4c0 <mem_trim+0x1bc>)
 800f3a0:	f240 2206 	movw	r2, #518	; 0x206
 800f3a4:	4949      	ldr	r1, [pc, #292]	; (800f4cc <mem_trim+0x1c8>)
 800f3a6:	4848      	ldr	r0, [pc, #288]	; (800f4c8 <mem_trim+0x1c4>)
 800f3a8:	f009 fd12 	bl	8018dd0 <iprintf>
  if (newsize > size) {
 800f3ac:	887a      	ldrh	r2, [r7, #2]
 800f3ae:	8b3b      	ldrh	r3, [r7, #24]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d901      	bls.n	800f3b8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	e07a      	b.n	800f4ae <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800f3b8:	887a      	ldrh	r2, [r7, #2]
 800f3ba:	8b3b      	ldrh	r3, [r7, #24]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d101      	bne.n	800f3c4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	e074      	b.n	800f4ae <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3c4:	4842      	ldr	r0, [pc, #264]	; (800f4d0 <mem_trim+0x1cc>)
 800f3c6:	f009 fc5d 	bl	8018c84 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800f3ca:	4b3b      	ldr	r3, [pc, #236]	; (800f4b8 <mem_trim+0x1b4>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	69fa      	ldr	r2, [r7, #28]
 800f3d0:	8812      	ldrh	r2, [r2, #0]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	791b      	ldrb	r3, [r3, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d131      	bne.n	800f442 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	881b      	ldrh	r3, [r3, #0]
 800f3e2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f3e4:	8b7a      	ldrh	r2, [r7, #26]
 800f3e6:	887b      	ldrh	r3, [r7, #2]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800f3f0:	4b38      	ldr	r3, [pc, #224]	; (800f4d4 <mem_trim+0x1d0>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	697a      	ldr	r2, [r7, #20]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d105      	bne.n	800f406 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800f3fa:	4b2f      	ldr	r3, [pc, #188]	; (800f4b8 <mem_trim+0x1b4>)
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	8a7b      	ldrh	r3, [r7, #18]
 800f400:	4413      	add	r3, r2
 800f402:	4a34      	ldr	r2, [pc, #208]	; (800f4d4 <mem_trim+0x1d0>)
 800f404:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f406:	4b2c      	ldr	r3, [pc, #176]	; (800f4b8 <mem_trim+0x1b4>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	8a7b      	ldrh	r3, [r7, #18]
 800f40c:	4413      	add	r3, r2
 800f40e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	2200      	movs	r2, #0
 800f414:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	8a3a      	ldrh	r2, [r7, #16]
 800f41a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	8b7a      	ldrh	r2, [r7, #26]
 800f420:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	8a7a      	ldrh	r2, [r7, #18]
 800f426:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	881b      	ldrh	r3, [r3, #0]
 800f42c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f430:	d039      	beq.n	800f4a6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f432:	4b21      	ldr	r3, [pc, #132]	; (800f4b8 <mem_trim+0x1b4>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	8812      	ldrh	r2, [r2, #0]
 800f43a:	4413      	add	r3, r2
 800f43c:	8a7a      	ldrh	r2, [r7, #18]
 800f43e:	805a      	strh	r2, [r3, #2]
 800f440:	e031      	b.n	800f4a6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f442:	887b      	ldrh	r3, [r7, #2]
 800f444:	f103 0214 	add.w	r2, r3, #20
 800f448:	8b3b      	ldrh	r3, [r7, #24]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d82b      	bhi.n	800f4a6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f44e:	8b7a      	ldrh	r2, [r7, #26]
 800f450:	887b      	ldrh	r3, [r7, #2]
 800f452:	4413      	add	r3, r2
 800f454:	b29b      	uxth	r3, r3
 800f456:	3308      	adds	r3, #8
 800f458:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f45a:	4b17      	ldr	r3, [pc, #92]	; (800f4b8 <mem_trim+0x1b4>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	8a7b      	ldrh	r3, [r7, #18]
 800f460:	4413      	add	r3, r2
 800f462:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800f464:	4b1b      	ldr	r3, [pc, #108]	; (800f4d4 <mem_trim+0x1d0>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d202      	bcs.n	800f474 <mem_trim+0x170>
      lfree = mem2;
 800f46e:	4a19      	ldr	r2, [pc, #100]	; (800f4d4 <mem_trim+0x1d0>)
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	2200      	movs	r2, #0
 800f478:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	881a      	ldrh	r2, [r3, #0]
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	8b7a      	ldrh	r2, [r7, #26]
 800f486:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	8a7a      	ldrh	r2, [r7, #18]
 800f48c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f496:	d006      	beq.n	800f4a6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f498:	4b07      	ldr	r3, [pc, #28]	; (800f4b8 <mem_trim+0x1b4>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	8812      	ldrh	r2, [r2, #0]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	8a7a      	ldrh	r2, [r7, #18]
 800f4a4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f4a6:	480a      	ldr	r0, [pc, #40]	; (800f4d0 <mem_trim+0x1cc>)
 800f4a8:	f009 fbfb 	bl	8018ca2 <sys_mutex_unlock>
  return rmem;
 800f4ac:	687b      	ldr	r3, [r7, #4]
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3720      	adds	r7, #32
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	2000406c 	.word	0x2000406c
 800f4bc:	20004070 	.word	0x20004070
 800f4c0:	0801a748 	.word	0x0801a748
 800f4c4:	0801a8ac 	.word	0x0801a8ac
 800f4c8:	0801a7b4 	.word	0x0801a7b4
 800f4cc:	0801a8c4 	.word	0x0801a8c4
 800f4d0:	20004078 	.word	0x20004078
 800f4d4:	20004074 	.word	0x20004074

0800f4d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b088      	sub	sp, #32
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	4603      	mov	r3, r0
 800f4e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800f4e2:	88fb      	ldrh	r3, [r7, #6]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <mem_malloc+0x14>
    return NULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	e0d1      	b.n	800f690 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800f4ec:	88fb      	ldrh	r3, [r7, #6]
 800f4ee:	3303      	adds	r3, #3
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	f023 0303 	bic.w	r3, r3, #3
 800f4f6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	2b0b      	cmp	r3, #11
 800f4fc:	d801      	bhi.n	800f502 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f4fe:	230c      	movs	r3, #12
 800f500:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800f502:	88fb      	ldrh	r3, [r7, #6]
 800f504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f508:	d901      	bls.n	800f50e <mem_malloc+0x36>
    return NULL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	e0c0      	b.n	800f690 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f50e:	4862      	ldr	r0, [pc, #392]	; (800f698 <mem_malloc+0x1c0>)
 800f510:	f009 fbb8 	bl	8018c84 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f514:	4b61      	ldr	r3, [pc, #388]	; (800f69c <mem_malloc+0x1c4>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	461a      	mov	r2, r3
 800f51a:	4b61      	ldr	r3, [pc, #388]	; (800f6a0 <mem_malloc+0x1c8>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	83fb      	strh	r3, [r7, #30]
 800f522:	e0aa      	b.n	800f67a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800f524:	4b5e      	ldr	r3, [pc, #376]	; (800f6a0 <mem_malloc+0x1c8>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	8bfb      	ldrh	r3, [r7, #30]
 800f52a:	4413      	add	r3, r2
 800f52c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	791b      	ldrb	r3, [r3, #4]
 800f532:	2b00      	cmp	r3, #0
 800f534:	f040 809b 	bne.w	800f66e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	461a      	mov	r2, r3
 800f53e:	8bfb      	ldrh	r3, [r7, #30]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	f1a3 0208 	sub.w	r2, r3, #8
 800f546:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800f548:	429a      	cmp	r2, r3
 800f54a:	f0c0 8090 	bcc.w	800f66e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	8bfb      	ldrh	r3, [r7, #30]
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	f1a3 0208 	sub.w	r2, r3, #8
 800f55c:	88fb      	ldrh	r3, [r7, #6]
 800f55e:	3314      	adds	r3, #20
 800f560:	429a      	cmp	r2, r3
 800f562:	d327      	bcc.n	800f5b4 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800f564:	8bfa      	ldrh	r2, [r7, #30]
 800f566:	88fb      	ldrh	r3, [r7, #6]
 800f568:	4413      	add	r3, r2
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	3308      	adds	r3, #8
 800f56e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800f570:	4b4b      	ldr	r3, [pc, #300]	; (800f6a0 <mem_malloc+0x1c8>)
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	8a7b      	ldrh	r3, [r7, #18]
 800f576:	4413      	add	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	881a      	ldrh	r2, [r3, #0]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	8bfa      	ldrh	r2, [r7, #30]
 800f58c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	8a7a      	ldrh	r2, [r7, #18]
 800f592:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2201      	movs	r2, #1
 800f598:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5a2:	d00a      	beq.n	800f5ba <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f5a4:	4b3e      	ldr	r3, [pc, #248]	; (800f6a0 <mem_malloc+0x1c8>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	8812      	ldrh	r2, [r2, #0]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	8a7a      	ldrh	r2, [r7, #18]
 800f5b0:	805a      	strh	r2, [r3, #2]
 800f5b2:	e002      	b.n	800f5ba <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f5ba:	4b38      	ldr	r3, [pc, #224]	; (800f69c <mem_malloc+0x1c4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d127      	bne.n	800f614 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800f5c4:	4b35      	ldr	r3, [pc, #212]	; (800f69c <mem_malloc+0x1c4>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f5ca:	e005      	b.n	800f5d8 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800f5cc:	4b34      	ldr	r3, [pc, #208]	; (800f6a0 <mem_malloc+0x1c8>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	69ba      	ldr	r2, [r7, #24]
 800f5d2:	8812      	ldrh	r2, [r2, #0]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	791b      	ldrb	r3, [r3, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d004      	beq.n	800f5ea <mem_malloc+0x112>
 800f5e0:	4b30      	ldr	r3, [pc, #192]	; (800f6a4 <mem_malloc+0x1cc>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	69ba      	ldr	r2, [r7, #24]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d1f0      	bne.n	800f5cc <mem_malloc+0xf4>
          }
          lfree = cur;
 800f5ea:	4a2c      	ldr	r2, [pc, #176]	; (800f69c <mem_malloc+0x1c4>)
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f5f0:	4b2a      	ldr	r3, [pc, #168]	; (800f69c <mem_malloc+0x1c4>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	4b2b      	ldr	r3, [pc, #172]	; (800f6a4 <mem_malloc+0x1cc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d00b      	beq.n	800f614 <mem_malloc+0x13c>
 800f5fc:	4b27      	ldr	r3, [pc, #156]	; (800f69c <mem_malloc+0x1c4>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	791b      	ldrb	r3, [r3, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d006      	beq.n	800f614 <mem_malloc+0x13c>
 800f606:	4b28      	ldr	r3, [pc, #160]	; (800f6a8 <mem_malloc+0x1d0>)
 800f608:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f60c:	4927      	ldr	r1, [pc, #156]	; (800f6ac <mem_malloc+0x1d4>)
 800f60e:	4828      	ldr	r0, [pc, #160]	; (800f6b0 <mem_malloc+0x1d8>)
 800f610:	f009 fbde 	bl	8018dd0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f614:	4820      	ldr	r0, [pc, #128]	; (800f698 <mem_malloc+0x1c0>)
 800f616:	f009 fb44 	bl	8018ca2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f61a:	88fa      	ldrh	r2, [r7, #6]
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	4413      	add	r3, r2
 800f620:	3308      	adds	r3, #8
 800f622:	4a20      	ldr	r2, [pc, #128]	; (800f6a4 <mem_malloc+0x1cc>)
 800f624:	6812      	ldr	r2, [r2, #0]
 800f626:	4293      	cmp	r3, r2
 800f628:	d906      	bls.n	800f638 <mem_malloc+0x160>
 800f62a:	4b1f      	ldr	r3, [pc, #124]	; (800f6a8 <mem_malloc+0x1d0>)
 800f62c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f630:	4920      	ldr	r1, [pc, #128]	; (800f6b4 <mem_malloc+0x1dc>)
 800f632:	481f      	ldr	r0, [pc, #124]	; (800f6b0 <mem_malloc+0x1d8>)
 800f634:	f009 fbcc 	bl	8018dd0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f003 0303 	and.w	r3, r3, #3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d006      	beq.n	800f650 <mem_malloc+0x178>
 800f642:	4b19      	ldr	r3, [pc, #100]	; (800f6a8 <mem_malloc+0x1d0>)
 800f644:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f648:	491b      	ldr	r1, [pc, #108]	; (800f6b8 <mem_malloc+0x1e0>)
 800f64a:	4819      	ldr	r0, [pc, #100]	; (800f6b0 <mem_malloc+0x1d8>)
 800f64c:	f009 fbc0 	bl	8018dd0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	f003 0303 	and.w	r3, r3, #3
 800f656:	2b00      	cmp	r3, #0
 800f658:	d006      	beq.n	800f668 <mem_malloc+0x190>
 800f65a:	4b13      	ldr	r3, [pc, #76]	; (800f6a8 <mem_malloc+0x1d0>)
 800f65c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f660:	4916      	ldr	r1, [pc, #88]	; (800f6bc <mem_malloc+0x1e4>)
 800f662:	4813      	ldr	r0, [pc, #76]	; (800f6b0 <mem_malloc+0x1d8>)
 800f664:	f009 fbb4 	bl	8018dd0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	3308      	adds	r3, #8
 800f66c:	e010      	b.n	800f690 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800f66e:	4b0c      	ldr	r3, [pc, #48]	; (800f6a0 <mem_malloc+0x1c8>)
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	8bfb      	ldrh	r3, [r7, #30]
 800f674:	4413      	add	r3, r2
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f67a:	8bfa      	ldrh	r2, [r7, #30]
 800f67c:	88fb      	ldrh	r3, [r7, #6]
 800f67e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f682:	429a      	cmp	r2, r3
 800f684:	f4ff af4e 	bcc.w	800f524 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f688:	4803      	ldr	r0, [pc, #12]	; (800f698 <mem_malloc+0x1c0>)
 800f68a:	f009 fb0a 	bl	8018ca2 <sys_mutex_unlock>
  return NULL;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3720      	adds	r7, #32
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	20004078 	.word	0x20004078
 800f69c:	20004074 	.word	0x20004074
 800f6a0:	2000406c 	.word	0x2000406c
 800f6a4:	20004070 	.word	0x20004070
 800f6a8:	0801a748 	.word	0x0801a748
 800f6ac:	0801a8e4 	.word	0x0801a8e4
 800f6b0:	0801a7b4 	.word	0x0801a7b4
 800f6b4:	0801a900 	.word	0x0801a900
 800f6b8:	0801a930 	.word	0x0801a930
 800f6bc:	0801a960 	.word	0x0801a960

0800f6c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b085      	sub	sp, #20
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	3303      	adds	r3, #3
 800f6d6:	f023 0303 	bic.w	r3, r3, #3
 800f6da:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	e011      	b.n	800f706 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	68ba      	ldr	r2, [r7, #8]
 800f6f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	3301      	adds	r3, #1
 800f704:	60fb      	str	r3, [r7, #12]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	885b      	ldrh	r3, [r3, #2]
 800f70a:	461a      	mov	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	4293      	cmp	r3, r2
 800f710:	dbe7      	blt.n	800f6e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f712:	bf00      	nop
 800f714:	3714      	adds	r7, #20
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
	...

0800f720 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f726:	2300      	movs	r3, #0
 800f728:	80fb      	strh	r3, [r7, #6]
 800f72a:	e009      	b.n	800f740 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f72c:	88fb      	ldrh	r3, [r7, #6]
 800f72e:	4a08      	ldr	r2, [pc, #32]	; (800f750 <memp_init+0x30>)
 800f730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff ffc3 	bl	800f6c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f73a:	88fb      	ldrh	r3, [r7, #6]
 800f73c:	3301      	adds	r3, #1
 800f73e:	80fb      	strh	r3, [r7, #6]
 800f740:	88fb      	ldrh	r3, [r7, #6]
 800f742:	2b0c      	cmp	r3, #12
 800f744:	d9f2      	bls.n	800f72c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	0801c668 	.word	0x0801c668

0800f754 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f75c:	f009 fad4 	bl	8018d08 <sys_arch_protect>
 800f760:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d015      	beq.n	800f79c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	68ba      	ldr	r2, [r7, #8]
 800f776:	6812      	ldr	r2, [r2, #0]
 800f778:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	f003 0303 	and.w	r3, r3, #3
 800f780:	2b00      	cmp	r3, #0
 800f782:	d006      	beq.n	800f792 <do_memp_malloc_pool+0x3e>
 800f784:	4b09      	ldr	r3, [pc, #36]	; (800f7ac <do_memp_malloc_pool+0x58>)
 800f786:	f240 1249 	movw	r2, #329	; 0x149
 800f78a:	4909      	ldr	r1, [pc, #36]	; (800f7b0 <do_memp_malloc_pool+0x5c>)
 800f78c:	4809      	ldr	r0, [pc, #36]	; (800f7b4 <do_memp_malloc_pool+0x60>)
 800f78e:	f009 fb1f 	bl	8018dd0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f009 fac6 	bl	8018d24 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	e003      	b.n	800f7a4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f009 fac1 	bl	8018d24 <sys_arch_unprotect>
  return NULL;
 800f7a2:	2300      	movs	r3, #0
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3710      	adds	r7, #16
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	0801a984 	.word	0x0801a984
 800f7b0:	0801a9d8 	.word	0x0801a9d8
 800f7b4:	0801a9fc 	.word	0x0801a9fc

0800f7b8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d106      	bne.n	800f7d4 <memp_malloc_pool+0x1c>
 800f7c6:	4b0a      	ldr	r3, [pc, #40]	; (800f7f0 <memp_malloc_pool+0x38>)
 800f7c8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f7cc:	4909      	ldr	r1, [pc, #36]	; (800f7f4 <memp_malloc_pool+0x3c>)
 800f7ce:	480a      	ldr	r0, [pc, #40]	; (800f7f8 <memp_malloc_pool+0x40>)
 800f7d0:	f009 fafe 	bl	8018dd0 <iprintf>
  if (desc == NULL) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d101      	bne.n	800f7de <memp_malloc_pool+0x26>
    return NULL;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e003      	b.n	800f7e6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f7ff ffb8 	bl	800f754 <do_memp_malloc_pool>
 800f7e4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	0801a984 	.word	0x0801a984
 800f7f4:	0801aa24 	.word	0x0801aa24
 800f7f8:	0801a9fc 	.word	0x0801a9fc

0800f7fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	4603      	mov	r3, r0
 800f804:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f806:	79fb      	ldrb	r3, [r7, #7]
 800f808:	2b0c      	cmp	r3, #12
 800f80a:	d908      	bls.n	800f81e <memp_malloc+0x22>
 800f80c:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <memp_malloc+0x3c>)
 800f80e:	f240 1287 	movw	r2, #391	; 0x187
 800f812:	490a      	ldr	r1, [pc, #40]	; (800f83c <memp_malloc+0x40>)
 800f814:	480a      	ldr	r0, [pc, #40]	; (800f840 <memp_malloc+0x44>)
 800f816:	f009 fadb 	bl	8018dd0 <iprintf>
 800f81a:	2300      	movs	r3, #0
 800f81c:	e008      	b.n	800f830 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f81e:	79fb      	ldrb	r3, [r7, #7]
 800f820:	4a08      	ldr	r2, [pc, #32]	; (800f844 <memp_malloc+0x48>)
 800f822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff ff94 	bl	800f754 <do_memp_malloc_pool>
 800f82c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f82e:	68fb      	ldr	r3, [r7, #12]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	0801a984 	.word	0x0801a984
 800f83c:	0801aa38 	.word	0x0801aa38
 800f840:	0801a9fc 	.word	0x0801a9fc
 800f844:	0801c668 	.word	0x0801c668

0800f848 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	f003 0303 	and.w	r3, r3, #3
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d006      	beq.n	800f86a <do_memp_free_pool+0x22>
 800f85c:	4b0d      	ldr	r3, [pc, #52]	; (800f894 <do_memp_free_pool+0x4c>)
 800f85e:	f240 129d 	movw	r2, #413	; 0x19d
 800f862:	490d      	ldr	r1, [pc, #52]	; (800f898 <do_memp_free_pool+0x50>)
 800f864:	480d      	ldr	r0, [pc, #52]	; (800f89c <do_memp_free_pool+0x54>)
 800f866:	f009 fab3 	bl	8018dd0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f86e:	f009 fa4b 	bl	8018d08 <sys_arch_protect>
 800f872:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	689b      	ldr	r3, [r3, #8]
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f886:	68b8      	ldr	r0, [r7, #8]
 800f888:	f009 fa4c 	bl	8018d24 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f88c:	bf00      	nop
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	0801a984 	.word	0x0801a984
 800f898:	0801aa58 	.word	0x0801aa58
 800f89c:	0801a9fc 	.word	0x0801a9fc

0800f8a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d106      	bne.n	800f8be <memp_free_pool+0x1e>
 800f8b0:	4b0a      	ldr	r3, [pc, #40]	; (800f8dc <memp_free_pool+0x3c>)
 800f8b2:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800f8b6:	490a      	ldr	r1, [pc, #40]	; (800f8e0 <memp_free_pool+0x40>)
 800f8b8:	480a      	ldr	r0, [pc, #40]	; (800f8e4 <memp_free_pool+0x44>)
 800f8ba:	f009 fa89 	bl	8018dd0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d007      	beq.n	800f8d4 <memp_free_pool+0x34>
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7ff ffbb 	bl	800f848 <do_memp_free_pool>
 800f8d2:	e000      	b.n	800f8d6 <memp_free_pool+0x36>
    return;
 800f8d4:	bf00      	nop
}
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	0801a984 	.word	0x0801a984
 800f8e0:	0801aa24 	.word	0x0801aa24
 800f8e4:	0801a9fc 	.word	0x0801a9fc

0800f8e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	6039      	str	r1, [r7, #0]
 800f8f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	2b0c      	cmp	r3, #12
 800f8f8:	d907      	bls.n	800f90a <memp_free+0x22>
 800f8fa:	4b0c      	ldr	r3, [pc, #48]	; (800f92c <memp_free+0x44>)
 800f8fc:	f240 12db 	movw	r2, #475	; 0x1db
 800f900:	490b      	ldr	r1, [pc, #44]	; (800f930 <memp_free+0x48>)
 800f902:	480c      	ldr	r0, [pc, #48]	; (800f934 <memp_free+0x4c>)
 800f904:	f009 fa64 	bl	8018dd0 <iprintf>
 800f908:	e00c      	b.n	800f924 <memp_free+0x3c>

  if (mem == NULL) {
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d008      	beq.n	800f922 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f910:	79fb      	ldrb	r3, [r7, #7]
 800f912:	4a09      	ldr	r2, [pc, #36]	; (800f938 <memp_free+0x50>)
 800f914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff ff94 	bl	800f848 <do_memp_free_pool>
 800f920:	e000      	b.n	800f924 <memp_free+0x3c>
    return;
 800f922:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	0801a984 	.word	0x0801a984
 800f930:	0801aa78 	.word	0x0801aa78
 800f934:	0801a9fc 	.word	0x0801a9fc
 800f938:	0801c668 	.word	0x0801c668

0800f93c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f93c:	b480      	push	{r7}
 800f93e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f940:	bf00      	nop
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
	...

0800f94c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d105      	bne.n	800f96c <netif_add+0x20>
 800f960:	4b1f      	ldr	r3, [pc, #124]	; (800f9e0 <netif_add+0x94>)
 800f962:	22fb      	movs	r2, #251	; 0xfb
 800f964:	491f      	ldr	r1, [pc, #124]	; (800f9e4 <netif_add+0x98>)
 800f966:	4820      	ldr	r0, [pc, #128]	; (800f9e8 <netif_add+0x9c>)
 800f968:	f009 fa32 	bl	8018dd0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2200      	movs	r2, #0
 800f970:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2200      	movs	r2, #0
 800f976:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2200      	movs	r2, #0
 800f97c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2200      	movs	r2, #0
 800f982:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2203      	movs	r2, #3
 800f98a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	69ba      	ldr	r2, [r7, #24]
 800f992:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800f994:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <netif_add+0xa0>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	1c5a      	adds	r2, r3, #1
 800f99a:	b2d1      	uxtb	r1, r2
 800f99c:	4a13      	ldr	r2, [pc, #76]	; (800f9ec <netif_add+0xa0>)
 800f99e:	7011      	strb	r1, [r2, #0]
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6a3a      	ldr	r2, [r7, #32]
 800f9aa:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f000 f81e 	bl	800f9f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	4798      	blx	r3
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <netif_add+0x7c>
    return NULL;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	e007      	b.n	800f9d8 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f9c8:	4b09      	ldr	r3, [pc, #36]	; (800f9f0 <netif_add+0xa4>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f9d0:	4a07      	ldr	r2, [pc, #28]	; (800f9f0 <netif_add+0xa4>)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	0801aa94 	.word	0x0801aa94
 800f9e4:	0801aae8 	.word	0x0801aae8
 800f9e8:	0801ab00 	.word	0x0801ab00
 800f9ec:	200040b0 	.word	0x200040b0
 800f9f0:	200079a0 	.word	0x200079a0

0800f9f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
 800fa00:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d003      	beq.n	800fa10 <netif_set_addr+0x1c>
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10c      	bne.n	800fa2a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800fa10:	68b9      	ldr	r1, [r7, #8]
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f000 f81a 	bl	800fa4c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800fa18:	6879      	ldr	r1, [r7, #4]
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 f862 	bl	800fae4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800fa20:	6839      	ldr	r1, [r7, #0]
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f000 f84a 	bl	800fabc <netif_set_gw>
 800fa28:	e00b      	b.n	800fa42 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800fa2a:	6879      	ldr	r1, [r7, #4]
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f000 f859 	bl	800fae4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800fa32:	6839      	ldr	r1, [r7, #0]
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f000 f841 	bl	800fabc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 f805 	bl	800fa4c <netif_set_ipaddr>
  }
}
 800fa42:	bf00      	nop
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
	...

0800fa4c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d003      	beq.n	800fa64 <netif_set_ipaddr+0x18>
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	60fb      	str	r3, [r7, #12]
 800fa62:	e002      	b.n	800fa6a <netif_set_ipaddr+0x1e>
 800fa64:	4b14      	ldr	r3, [pc, #80]	; (800fab8 <netif_set_ipaddr+0x6c>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	3304      	adds	r3, #4
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d01c      	beq.n	800fab0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	3304      	adds	r3, #4
 800fa7a:	f107 020c 	add.w	r2, r7, #12
 800fa7e:	4611      	mov	r1, r2
 800fa80:	4618      	mov	r0, r3
 800fa82:	f002 fb53 	bl	801212c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3304      	adds	r3, #4
 800fa8a:	f107 020c 	add.w	r2, r7, #12
 800fa8e:	4611      	mov	r1, r2
 800fa90:	4618      	mov	r0, r3
 800fa92:	f006 fd27 	bl	80164e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <netif_set_ipaddr+0x56>
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	e000      	b.n	800faa4 <netif_set_ipaddr+0x58>
 800faa2:	2300      	movs	r3, #0
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800faa8:	2101      	movs	r1, #1
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 f861 	bl	800fb72 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	0801c6dc 	.word	0x0801c6dc

0800fabc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <netif_set_gw+0x16>
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	e000      	b.n	800fad4 <netif_set_gw+0x18>
 800fad2:	2300      	movs	r3, #0
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d002      	beq.n	800fafa <netif_set_netmask+0x16>
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	e000      	b.n	800fafc <netif_set_netmask+0x18>
 800fafa:	2300      	movs	r3, #0
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800fb00:	bf00      	nop
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fb14:	4a04      	ldr	r2, [pc, #16]	; (800fb28 <netif_set_default+0x1c>)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	200079a4 	.word	0x200079a4

0800fb2c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb3a:	f003 0301 	and.w	r3, r3, #1
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d113      	bne.n	800fb6a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb48:	f043 0301 	orr.w	r3, r3, #1
 800fb4c:	b2da      	uxtb	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb5a:	f003 0304 	and.w	r3, r3, #4
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800fb62:	2103      	movs	r1, #3
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f804 	bl	800fb72 <netif_issue_reports>
    }
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb7e:	78fb      	ldrb	r3, [r7, #3]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d011      	beq.n	800fbac <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	3304      	adds	r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00c      	beq.n	800fbac <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb98:	f003 0308 	and.w	r3, r3, #8
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d005      	beq.n	800fbac <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	3304      	adds	r3, #4
 800fba4:	4619      	mov	r1, r3
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f007 fbd0 	bl	801734c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800fbac:	bf00      	nop
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbc2:	f003 0301 	and.w	r3, r3, #1
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d012      	beq.n	800fbf0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbd0:	f023 0301 	bic.w	r3, r3, #1
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbe2:	f003 0308 	and.w	r3, r3, #8
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f006 ff74 	bl	8016ad8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fbf0:	bf00      	nop
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc06:	f003 0304 	and.w	r3, r3, #4
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d113      	bne.n	800fc36 <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc14:	f043 0304 	orr.w	r3, r3, #4
 800fc18:	b2da      	uxtb	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc26:	f003 0301 	and.w	r3, r3, #1
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800fc2e:	2103      	movs	r1, #3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7ff ff9e 	bl	800fb72 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 800fc36:	bf00      	nop
 800fc38:	3708      	adds	r7, #8
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800fc3e:	b480      	push	{r7}
 800fc40:	b083      	sub	sp, #12
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc4c:	f003 0304 	and.w	r3, r3, #4
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d008      	beq.n	800fc66 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc5a:	f023 0304 	bic.w	r3, r3, #4
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 800fc66:	bf00      	nop
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
	...

0800fc74 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fc7a:	f009 f845 	bl	8018d08 <sys_arch_protect>
 800fc7e:	6038      	str	r0, [r7, #0]
 800fc80:	4b0f      	ldr	r3, [pc, #60]	; (800fcc0 <pbuf_free_ooseq+0x4c>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	701a      	strb	r2, [r3, #0]
 800fc86:	6838      	ldr	r0, [r7, #0]
 800fc88:	f009 f84c 	bl	8018d24 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc8c:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <pbuf_free_ooseq+0x50>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	607b      	str	r3, [r7, #4]
 800fc92:	e00f      	b.n	800fcb4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d008      	beq.n	800fcae <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca0:	4618      	mov	r0, r3
 800fca2:	f001 febe 	bl	8011a22 <tcp_segs_free>
      pcb->ooseq = NULL;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800fcac:	e005      	b.n	800fcba <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	607b      	str	r3, [r7, #4]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1ec      	bne.n	800fc94 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	200079a8 	.word	0x200079a8
 800fcc4:	200079b0 	.word	0x200079b0

0800fcc8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fcd0:	f7ff ffd0 	bl	800fc74 <pbuf_free_ooseq>
}
 800fcd4:	bf00      	nop
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fce2:	f009 f811 	bl	8018d08 <sys_arch_protect>
 800fce6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fce8:	4b10      	ldr	r3, [pc, #64]	; (800fd2c <pbuf_pool_is_empty+0x50>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fcee:	4b0f      	ldr	r3, [pc, #60]	; (800fd2c <pbuf_pool_is_empty+0x50>)
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f009 f815 	bl	8018d24 <sys_arch_unprotect>

  if (!queued) {
 800fcfa:	78fb      	ldrb	r3, [r7, #3]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d110      	bne.n	800fd22 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fd00:	2200      	movs	r2, #0
 800fd02:	2100      	movs	r1, #0
 800fd04:	480a      	ldr	r0, [pc, #40]	; (800fd30 <pbuf_pool_is_empty+0x54>)
 800fd06:	f7ff f8c3 	bl	800ee90 <tcpip_callback_with_block>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d008      	beq.n	800fd22 <pbuf_pool_is_empty+0x46>
 800fd10:	f008 fffa 	bl	8018d08 <sys_arch_protect>
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	4b05      	ldr	r3, [pc, #20]	; (800fd2c <pbuf_pool_is_empty+0x50>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	701a      	strb	r2, [r3, #0]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f009 f801 	bl	8018d24 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fd22:	bf00      	nop
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	200079a8 	.word	0x200079a8
 800fd30:	0800fcc9 	.word	0x0800fcc9

0800fd34 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b088      	sub	sp, #32
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	71fb      	strb	r3, [r7, #7]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	80bb      	strh	r3, [r7, #4]
 800fd42:	4613      	mov	r3, r2
 800fd44:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	2b04      	cmp	r3, #4
 800fd4a:	d81c      	bhi.n	800fd86 <pbuf_alloc+0x52>
 800fd4c:	a201      	add	r2, pc, #4	; (adr r2, 800fd54 <pbuf_alloc+0x20>)
 800fd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd52:	bf00      	nop
 800fd54:	0800fd69 	.word	0x0800fd69
 800fd58:	0800fd6f 	.word	0x0800fd6f
 800fd5c:	0800fd75 	.word	0x0800fd75
 800fd60:	0800fd7b 	.word	0x0800fd7b
 800fd64:	0800fd81 	.word	0x0800fd81
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fd68:	2336      	movs	r3, #54	; 0x36
 800fd6a:	82fb      	strh	r3, [r7, #22]
    break;
 800fd6c:	e014      	b.n	800fd98 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800fd6e:	2322      	movs	r3, #34	; 0x22
 800fd70:	82fb      	strh	r3, [r7, #22]
    break;
 800fd72:	e011      	b.n	800fd98 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fd74:	230e      	movs	r3, #14
 800fd76:	82fb      	strh	r3, [r7, #22]
    break;
 800fd78:	e00e      	b.n	800fd98 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	82fb      	strh	r3, [r7, #22]
    break;
 800fd7e:	e00b      	b.n	800fd98 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	82fb      	strh	r3, [r7, #22]
    break;
 800fd84:	e008      	b.n	800fd98 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800fd86:	4ba5      	ldr	r3, [pc, #660]	; (801001c <pbuf_alloc+0x2e8>)
 800fd88:	f44f 728b 	mov.w	r2, #278	; 0x116
 800fd8c:	49a4      	ldr	r1, [pc, #656]	; (8010020 <pbuf_alloc+0x2ec>)
 800fd8e:	48a5      	ldr	r0, [pc, #660]	; (8010024 <pbuf_alloc+0x2f0>)
 800fd90:	f009 f81e 	bl	8018dd0 <iprintf>
    return NULL;
 800fd94:	2300      	movs	r3, #0
 800fd96:	e15d      	b.n	8010054 <pbuf_alloc+0x320>
  }

  switch (type) {
 800fd98:	79bb      	ldrb	r3, [r7, #6]
 800fd9a:	2b03      	cmp	r3, #3
 800fd9c:	f200 8134 	bhi.w	8010008 <pbuf_alloc+0x2d4>
 800fda0:	a201      	add	r2, pc, #4	; (adr r2, 800fda8 <pbuf_alloc+0x74>)
 800fda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda6:	bf00      	nop
 800fda8:	0800ff49 	.word	0x0800ff49
 800fdac:	0800ffd5 	.word	0x0800ffd5
 800fdb0:	0800ffd5 	.word	0x0800ffd5
 800fdb4:	0800fdb9 	.word	0x0800fdb9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fdb8:	200c      	movs	r0, #12
 800fdba:	f7ff fd1f 	bl	800f7fc <memp_malloc>
 800fdbe:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d103      	bne.n	800fdce <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800fdc6:	f7ff ff89 	bl	800fcdc <pbuf_pool_is_empty>
      return NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	e142      	b.n	8010054 <pbuf_alloc+0x320>
    }
    p->type = type;
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	79ba      	ldrb	r2, [r7, #6]
 800fdd2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800fdda:	8afb      	ldrh	r3, [r7, #22]
 800fddc:	3310      	adds	r3, #16
 800fdde:	69fa      	ldr	r2, [r7, #28]
 800fde0:	4413      	add	r3, r2
 800fde2:	3303      	adds	r3, #3
 800fde4:	f023 0303 	bic.w	r3, r3, #3
 800fde8:	461a      	mov	r2, r3
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	f003 0303 	and.w	r3, r3, #3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d006      	beq.n	800fe08 <pbuf_alloc+0xd4>
 800fdfa:	4b88      	ldr	r3, [pc, #544]	; (801001c <pbuf_alloc+0x2e8>)
 800fdfc:	f240 1229 	movw	r2, #297	; 0x129
 800fe00:	4989      	ldr	r1, [pc, #548]	; (8010028 <pbuf_alloc+0x2f4>)
 800fe02:	4888      	ldr	r0, [pc, #544]	; (8010024 <pbuf_alloc+0x2f0>)
 800fe04:	f008 ffe4 	bl	8018dd0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	88ba      	ldrh	r2, [r7, #4]
 800fe0c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800fe0e:	8afb      	ldrh	r3, [r7, #22]
 800fe10:	3303      	adds	r3, #3
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800fe1a:	88bb      	ldrh	r3, [r7, #4]
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	bf28      	it	cs
 800fe20:	4613      	movcs	r3, r2
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	69fa      	ldr	r2, [r7, #28]
 800fe2e:	8952      	ldrh	r2, [r2, #10]
 800fe30:	441a      	add	r2, r3
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d906      	bls.n	800fe4a <pbuf_alloc+0x116>
 800fe3c:	4b77      	ldr	r3, [pc, #476]	; (801001c <pbuf_alloc+0x2e8>)
 800fe3e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800fe42:	497a      	ldr	r1, [pc, #488]	; (801002c <pbuf_alloc+0x2f8>)
 800fe44:	4877      	ldr	r0, [pc, #476]	; (8010024 <pbuf_alloc+0x2f0>)
 800fe46:	f008 ffc3 	bl	8018dd0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fe4a:	8afb      	ldrh	r3, [r7, #22]
 800fe4c:	3303      	adds	r3, #3
 800fe4e:	f023 0303 	bic.w	r3, r3, #3
 800fe52:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fe56:	d106      	bne.n	800fe66 <pbuf_alloc+0x132>
 800fe58:	4b70      	ldr	r3, [pc, #448]	; (801001c <pbuf_alloc+0x2e8>)
 800fe5a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fe5e:	4974      	ldr	r1, [pc, #464]	; (8010030 <pbuf_alloc+0x2fc>)
 800fe60:	4870      	ldr	r0, [pc, #448]	; (8010024 <pbuf_alloc+0x2f0>)
 800fe62:	f008 ffb5 	bl	8018dd0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800fe70:	88bb      	ldrh	r3, [r7, #4]
 800fe72:	69fa      	ldr	r2, [r7, #28]
 800fe74:	8952      	ldrh	r2, [r2, #10]
 800fe76:	1a9b      	subs	r3, r3, r2
 800fe78:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800fe7a:	e061      	b.n	800ff40 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fe7c:	200c      	movs	r0, #12
 800fe7e:	f7ff fcbd 	bl	800f7fc <memp_malloc>
 800fe82:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d106      	bne.n	800fe98 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800fe8a:	f7ff ff27 	bl	800fcdc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800fe8e:	69f8      	ldr	r0, [r7, #28]
 800fe90:	f000 fac2 	bl	8010418 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800fe94:	2300      	movs	r3, #0
 800fe96:	e0dd      	b.n	8010054 <pbuf_alloc+0x320>
      }
      q->type = type;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	79ba      	ldrb	r2, [r7, #6]
 800fe9c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2200      	movs	r2, #0
 800fea8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	68fa      	ldr	r2, [r7, #12]
 800feae:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800feb6:	4293      	cmp	r3, r2
 800feb8:	dd06      	ble.n	800fec8 <pbuf_alloc+0x194>
 800feba:	4b58      	ldr	r3, [pc, #352]	; (801001c <pbuf_alloc+0x2e8>)
 800febc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800fec0:	495c      	ldr	r1, [pc, #368]	; (8010034 <pbuf_alloc+0x300>)
 800fec2:	4858      	ldr	r0, [pc, #352]	; (8010024 <pbuf_alloc+0x2f0>)
 800fec4:	f008 ff84 	bl	8018dd0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	b29a      	uxth	r2, r3
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fed8:	bf28      	it	cs
 800feda:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800fede:	b29a      	uxth	r2, r3
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f103 0210 	add.w	r2, r3, #16
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	f003 0303 	and.w	r3, r3, #3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d006      	beq.n	800ff08 <pbuf_alloc+0x1d4>
 800fefa:	4b48      	ldr	r3, [pc, #288]	; (801001c <pbuf_alloc+0x2e8>)
 800fefc:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800ff00:	494d      	ldr	r1, [pc, #308]	; (8010038 <pbuf_alloc+0x304>)
 800ff02:	4848      	ldr	r0, [pc, #288]	; (8010024 <pbuf_alloc+0x2f0>)
 800ff04:	f008 ff64 	bl	8018dd0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	69fa      	ldr	r2, [r7, #28]
 800ff0e:	8952      	ldrh	r2, [r2, #10]
 800ff10:	441a      	add	r2, r3
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d906      	bls.n	800ff2a <pbuf_alloc+0x1f6>
 800ff1c:	4b3f      	ldr	r3, [pc, #252]	; (801001c <pbuf_alloc+0x2e8>)
 800ff1e:	f240 1255 	movw	r2, #341	; 0x155
 800ff22:	4942      	ldr	r1, [pc, #264]	; (801002c <pbuf_alloc+0x2f8>)
 800ff24:	483f      	ldr	r0, [pc, #252]	; (8010024 <pbuf_alloc+0x2f0>)
 800ff26:	f008 ff53 	bl	8018dd0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	895b      	ldrh	r3, [r3, #10]
 800ff34:	461a      	mov	r2, r3
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	1a9b      	subs	r3, r3, r2
 800ff3a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dc9a      	bgt.n	800fe7c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800ff46:	e07e      	b.n	8010046 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800ff48:	8afb      	ldrh	r3, [r7, #22]
 800ff4a:	3313      	adds	r3, #19
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	f023 0303 	bic.w	r3, r3, #3
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	88bb      	ldrh	r3, [r7, #4]
 800ff56:	3303      	adds	r3, #3
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	f023 0303 	bic.w	r3, r3, #3
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	4413      	add	r3, r2
 800ff62:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800ff64:	897a      	ldrh	r2, [r7, #10]
 800ff66:	88bb      	ldrh	r3, [r7, #4]
 800ff68:	3303      	adds	r3, #3
 800ff6a:	f023 0303 	bic.w	r3, r3, #3
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d201      	bcs.n	800ff76 <pbuf_alloc+0x242>
        return NULL;
 800ff72:	2300      	movs	r3, #0
 800ff74:	e06e      	b.n	8010054 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800ff76:	897b      	ldrh	r3, [r7, #10]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7ff faad 	bl	800f4d8 <mem_malloc>
 800ff7e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d101      	bne.n	800ff8a <pbuf_alloc+0x256>
      return NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	e064      	b.n	8010054 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800ff8a:	8afb      	ldrh	r3, [r7, #22]
 800ff8c:	3310      	adds	r3, #16
 800ff8e:	69fa      	ldr	r2, [r7, #28]
 800ff90:	4413      	add	r3, r2
 800ff92:	3303      	adds	r3, #3
 800ff94:	f023 0303 	bic.w	r3, r3, #3
 800ff98:	461a      	mov	r2, r3
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	88ba      	ldrh	r2, [r7, #4]
 800ffa2:	811a      	strh	r2, [r3, #8]
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	891a      	ldrh	r2, [r3, #8]
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	79ba      	ldrb	r2, [r7, #6]
 800ffb6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	f003 0303 	and.w	r3, r3, #3
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d03f      	beq.n	8010044 <pbuf_alloc+0x310>
 800ffc4:	4b15      	ldr	r3, [pc, #84]	; (801001c <pbuf_alloc+0x2e8>)
 800ffc6:	f240 1277 	movw	r2, #375	; 0x177
 800ffca:	491c      	ldr	r1, [pc, #112]	; (801003c <pbuf_alloc+0x308>)
 800ffcc:	4815      	ldr	r0, [pc, #84]	; (8010024 <pbuf_alloc+0x2f0>)
 800ffce:	f008 feff 	bl	8018dd0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ffd2:	e037      	b.n	8010044 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ffd4:	200b      	movs	r0, #11
 800ffd6:	f7ff fc11 	bl	800f7fc <memp_malloc>
 800ffda:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d101      	bne.n	800ffe6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	e036      	b.n	8010054 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	88ba      	ldrh	r2, [r7, #4]
 800fff0:	811a      	strh	r2, [r3, #8]
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	891a      	ldrh	r2, [r3, #8]
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	2200      	movs	r2, #0
 800fffe:	601a      	str	r2, [r3, #0]
    p->type = type;
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	79ba      	ldrb	r2, [r7, #6]
 8010004:	731a      	strb	r2, [r3, #12]
    break;
 8010006:	e01e      	b.n	8010046 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <pbuf_alloc+0x2e8>)
 801000a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801000e:	490c      	ldr	r1, [pc, #48]	; (8010040 <pbuf_alloc+0x30c>)
 8010010:	4804      	ldr	r0, [pc, #16]	; (8010024 <pbuf_alloc+0x2f0>)
 8010012:	f008 fedd 	bl	8018dd0 <iprintf>
    return NULL;
 8010016:	2300      	movs	r3, #0
 8010018:	e01c      	b.n	8010054 <pbuf_alloc+0x320>
 801001a:	bf00      	nop
 801001c:	0801ab28 	.word	0x0801ab28
 8010020:	0801ab7c 	.word	0x0801ab7c
 8010024:	0801ab98 	.word	0x0801ab98
 8010028:	0801abc0 	.word	0x0801abc0
 801002c:	0801abf0 	.word	0x0801abf0
 8010030:	0801ac24 	.word	0x0801ac24
 8010034:	0801ac58 	.word	0x0801ac58
 8010038:	0801ac6c 	.word	0x0801ac6c
 801003c:	0801ac9c 	.word	0x0801ac9c
 8010040:	0801acc8 	.word	0x0801acc8
    break;
 8010044:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	2201      	movs	r2, #1
 801004a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	2200      	movs	r2, #0
 8010050:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010052:	69fb      	ldr	r3, [r7, #28]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3720      	adds	r7, #32
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	603b      	str	r3, [r7, #0]
 8010064:	4603      	mov	r3, r0
 8010066:	71fb      	strb	r3, [r7, #7]
 8010068:	460b      	mov	r3, r1
 801006a:	80bb      	strh	r3, [r7, #4]
 801006c:	4613      	mov	r3, r2
 801006e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b04      	cmp	r3, #4
 8010074:	d81b      	bhi.n	80100ae <pbuf_alloced_custom+0x52>
 8010076:	a201      	add	r2, pc, #4	; (adr r2, 801007c <pbuf_alloced_custom+0x20>)
 8010078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007c:	08010091 	.word	0x08010091
 8010080:	08010097 	.word	0x08010097
 8010084:	0801009d 	.word	0x0801009d
 8010088:	080100a3 	.word	0x080100a3
 801008c:	080100a9 	.word	0x080100a9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010090:	2336      	movs	r3, #54	; 0x36
 8010092:	81fb      	strh	r3, [r7, #14]
    break;
 8010094:	e014      	b.n	80100c0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010096:	2322      	movs	r3, #34	; 0x22
 8010098:	81fb      	strh	r3, [r7, #14]
    break;
 801009a:	e011      	b.n	80100c0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801009c:	230e      	movs	r3, #14
 801009e:	81fb      	strh	r3, [r7, #14]
    break;
 80100a0:	e00e      	b.n	80100c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80100a2:	2300      	movs	r3, #0
 80100a4:	81fb      	strh	r3, [r7, #14]
    break;
 80100a6:	e00b      	b.n	80100c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	81fb      	strh	r3, [r7, #14]
    break;
 80100ac:	e008      	b.n	80100c0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80100ae:	4b1d      	ldr	r3, [pc, #116]	; (8010124 <pbuf_alloced_custom+0xc8>)
 80100b0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80100b4:	491c      	ldr	r1, [pc, #112]	; (8010128 <pbuf_alloced_custom+0xcc>)
 80100b6:	481d      	ldr	r0, [pc, #116]	; (801012c <pbuf_alloced_custom+0xd0>)
 80100b8:	f008 fe8a 	bl	8018dd0 <iprintf>
    return NULL;
 80100bc:	2300      	movs	r3, #0
 80100be:	e02d      	b.n	801011c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80100c0:	89fb      	ldrh	r3, [r7, #14]
 80100c2:	3303      	adds	r3, #3
 80100c4:	f023 0203 	bic.w	r2, r3, #3
 80100c8:	88bb      	ldrh	r3, [r7, #4]
 80100ca:	441a      	add	r2, r3
 80100cc:	8bbb      	ldrh	r3, [r7, #28]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d901      	bls.n	80100d6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	e022      	b.n	801011c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2200      	movs	r2, #0
 80100da:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d008      	beq.n	80100f4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80100e2:	89fb      	ldrh	r3, [r7, #14]
 80100e4:	3303      	adds	r3, #3
 80100e6:	f023 0303 	bic.w	r3, r3, #3
 80100ea:	69ba      	ldr	r2, [r7, #24]
 80100ec:	441a      	add	r2, r3
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	605a      	str	r2, [r3, #4]
 80100f2:	e002      	b.n	80100fa <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2200      	movs	r2, #0
 80100f8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2202      	movs	r2, #2
 80100fe:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	88ba      	ldrh	r2, [r7, #4]
 8010104:	811a      	strh	r2, [r3, #8]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	891a      	ldrh	r2, [r3, #8]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	79ba      	ldrb	r2, [r7, #6]
 8010112:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	2201      	movs	r2, #1
 8010118:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801011a:	683b      	ldr	r3, [r7, #0]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	0801ab28 	.word	0x0801ab28
 8010128:	0801ace4 	.word	0x0801ace4
 801012c:	0801ab98 	.word	0x0801ab98

08010130 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <pbuf_realloc+0x20>
 8010142:	4b4b      	ldr	r3, [pc, #300]	; (8010270 <pbuf_realloc+0x140>)
 8010144:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010148:	494a      	ldr	r1, [pc, #296]	; (8010274 <pbuf_realloc+0x144>)
 801014a:	484b      	ldr	r0, [pc, #300]	; (8010278 <pbuf_realloc+0x148>)
 801014c:	f008 fe40 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	7b1b      	ldrb	r3, [r3, #12]
 8010154:	2b03      	cmp	r3, #3
 8010156:	d012      	beq.n	801017e <pbuf_realloc+0x4e>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	7b1b      	ldrb	r3, [r3, #12]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d00e      	beq.n	801017e <pbuf_realloc+0x4e>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	7b1b      	ldrb	r3, [r3, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00a      	beq.n	801017e <pbuf_realloc+0x4e>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	7b1b      	ldrb	r3, [r3, #12]
 801016c:	2b02      	cmp	r3, #2
 801016e:	d006      	beq.n	801017e <pbuf_realloc+0x4e>
 8010170:	4b3f      	ldr	r3, [pc, #252]	; (8010270 <pbuf_realloc+0x140>)
 8010172:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010176:	4941      	ldr	r1, [pc, #260]	; (801027c <pbuf_realloc+0x14c>)
 8010178:	483f      	ldr	r0, [pc, #252]	; (8010278 <pbuf_realloc+0x148>)
 801017a:	f008 fe29 	bl	8018dd0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	891b      	ldrh	r3, [r3, #8]
 8010182:	887a      	ldrh	r2, [r7, #2]
 8010184:	429a      	cmp	r2, r3
 8010186:	d26f      	bcs.n	8010268 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010188:	887b      	ldrh	r3, [r7, #2]
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	8912      	ldrh	r2, [r2, #8]
 801018e:	1a9b      	subs	r3, r3, r2
 8010190:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010192:	887b      	ldrh	r3, [r7, #2]
 8010194:	827b      	strh	r3, [r7, #18]
  q = p;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801019a:	e025      	b.n	80101e8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	895b      	ldrh	r3, [r3, #10]
 80101a0:	8a7a      	ldrh	r2, [r7, #18]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80101ac:	4293      	cmp	r3, r2
 80101ae:	dd06      	ble.n	80101be <pbuf_realloc+0x8e>
 80101b0:	4b2f      	ldr	r3, [pc, #188]	; (8010270 <pbuf_realloc+0x140>)
 80101b2:	f240 220b 	movw	r2, #523	; 0x20b
 80101b6:	4932      	ldr	r1, [pc, #200]	; (8010280 <pbuf_realloc+0x150>)
 80101b8:	482f      	ldr	r0, [pc, #188]	; (8010278 <pbuf_realloc+0x148>)
 80101ba:	f008 fe09 	bl	8018dd0 <iprintf>
    q->tot_len += (u16_t)grow;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	891a      	ldrh	r2, [r3, #8]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	4413      	add	r3, r2
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d106      	bne.n	80101e8 <pbuf_realloc+0xb8>
 80101da:	4b25      	ldr	r3, [pc, #148]	; (8010270 <pbuf_realloc+0x140>)
 80101dc:	f240 220f 	movw	r2, #527	; 0x20f
 80101e0:	4928      	ldr	r1, [pc, #160]	; (8010284 <pbuf_realloc+0x154>)
 80101e2:	4825      	ldr	r0, [pc, #148]	; (8010278 <pbuf_realloc+0x148>)
 80101e4:	f008 fdf4 	bl	8018dd0 <iprintf>
  while (rem_len > q->len) {
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	895b      	ldrh	r3, [r3, #10]
 80101ec:	8a7a      	ldrh	r2, [r7, #18]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d8d4      	bhi.n	801019c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	7b1b      	ldrb	r3, [r3, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d122      	bne.n	8010240 <pbuf_realloc+0x110>
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	895b      	ldrh	r3, [r3, #10]
 80101fe:	8a7a      	ldrh	r2, [r7, #18]
 8010200:	429a      	cmp	r2, r3
 8010202:	d01d      	beq.n	8010240 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	7b5b      	ldrb	r3, [r3, #13]
 8010208:	f003 0302 	and.w	r3, r3, #2
 801020c:	2b00      	cmp	r3, #0
 801020e:	d117      	bne.n	8010240 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	461a      	mov	r2, r3
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	b29a      	uxth	r2, r3
 801021c:	8a7b      	ldrh	r3, [r7, #18]
 801021e:	4413      	add	r3, r2
 8010220:	b29b      	uxth	r3, r3
 8010222:	4619      	mov	r1, r3
 8010224:	6978      	ldr	r0, [r7, #20]
 8010226:	f7ff f86d 	bl	800f304 <mem_trim>
 801022a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d106      	bne.n	8010240 <pbuf_realloc+0x110>
 8010232:	4b0f      	ldr	r3, [pc, #60]	; (8010270 <pbuf_realloc+0x140>)
 8010234:	f240 221d 	movw	r2, #541	; 0x21d
 8010238:	4913      	ldr	r1, [pc, #76]	; (8010288 <pbuf_realloc+0x158>)
 801023a:	480f      	ldr	r0, [pc, #60]	; (8010278 <pbuf_realloc+0x148>)
 801023c:	f008 fdc8 	bl	8018dd0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	8a7a      	ldrh	r2, [r7, #18]
 8010244:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	895a      	ldrh	r2, [r3, #10]
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4618      	mov	r0, r3
 801025c:	f000 f8dc 	bl	8010418 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2200      	movs	r2, #0
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	e000      	b.n	801026a <pbuf_realloc+0x13a>
    return;
 8010268:	bf00      	nop

}
 801026a:	3718      	adds	r7, #24
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	0801ab28 	.word	0x0801ab28
 8010274:	0801ad08 	.word	0x0801ad08
 8010278:	0801ab98 	.word	0x0801ab98
 801027c:	0801ad20 	.word	0x0801ad20
 8010280:	0801ad3c 	.word	0x0801ad3c
 8010284:	0801ad50 	.word	0x0801ad50
 8010288:	0801ad68 	.word	0x0801ad68

0801028c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	460b      	mov	r3, r1
 8010296:	807b      	strh	r3, [r7, #2]
 8010298:	4613      	mov	r3, r2
 801029a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <pbuf_header_impl+0x24>
 80102a2:	4b46      	ldr	r3, [pc, #280]	; (80103bc <pbuf_header_impl+0x130>)
 80102a4:	f240 223f 	movw	r2, #575	; 0x23f
 80102a8:	4945      	ldr	r1, [pc, #276]	; (80103c0 <pbuf_header_impl+0x134>)
 80102aa:	4846      	ldr	r0, [pc, #280]	; (80103c4 <pbuf_header_impl+0x138>)
 80102ac:	f008 fd90 	bl	8018dd0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80102b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <pbuf_header_impl+0x32>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <pbuf_header_impl+0x36>
    return 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	e078      	b.n	80103b4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80102c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	da10      	bge.n	80102ec <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80102ca:	887b      	ldrh	r3, [r7, #2]
 80102cc:	425b      	negs	r3, r3
 80102ce:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	895b      	ldrh	r3, [r3, #10]
 80102d4:	89fa      	ldrh	r2, [r7, #14]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d90a      	bls.n	80102f0 <pbuf_header_impl+0x64>
 80102da:	4b38      	ldr	r3, [pc, #224]	; (80103bc <pbuf_header_impl+0x130>)
 80102dc:	f240 2247 	movw	r2, #583	; 0x247
 80102e0:	4939      	ldr	r1, [pc, #228]	; (80103c8 <pbuf_header_impl+0x13c>)
 80102e2:	4838      	ldr	r0, [pc, #224]	; (80103c4 <pbuf_header_impl+0x138>)
 80102e4:	f008 fd74 	bl	8018dd0 <iprintf>
 80102e8:	2301      	movs	r3, #1
 80102ea:	e063      	b.n	80103b4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80102ec:	887b      	ldrh	r3, [r7, #2]
 80102ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	7b1b      	ldrb	r3, [r3, #12]
 80102f4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80102fc:	89bb      	ldrh	r3, [r7, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d002      	beq.n	8010308 <pbuf_header_impl+0x7c>
 8010302:	89bb      	ldrh	r3, [r7, #12]
 8010304:	2b03      	cmp	r3, #3
 8010306:	d112      	bne.n	801032e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685a      	ldr	r2, [r3, #4]
 801030c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010310:	425b      	negs	r3, r3
 8010312:	441a      	add	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3310      	adds	r3, #16
 8010320:	429a      	cmp	r2, r3
 8010322:	d238      	bcs.n	8010396 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801032a:	2301      	movs	r3, #1
 801032c:	e042      	b.n	80103b4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801032e:	89bb      	ldrh	r3, [r7, #12]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d002      	beq.n	801033a <pbuf_header_impl+0xae>
 8010334:	89bb      	ldrh	r3, [r7, #12]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d124      	bne.n	8010384 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801033a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801033e:	2b00      	cmp	r3, #0
 8010340:	da0d      	bge.n	801035e <pbuf_header_impl+0xd2>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	895b      	ldrh	r3, [r3, #10]
 8010346:	89fa      	ldrh	r2, [r7, #14]
 8010348:	429a      	cmp	r2, r3
 801034a:	d808      	bhi.n	801035e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685a      	ldr	r2, [r3, #4]
 8010350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010354:	425b      	negs	r3, r3
 8010356:	441a      	add	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	605a      	str	r2, [r3, #4]
 801035c:	e011      	b.n	8010382 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801035e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010362:	2b00      	cmp	r3, #0
 8010364:	dd0b      	ble.n	801037e <pbuf_header_impl+0xf2>
 8010366:	787b      	ldrb	r3, [r7, #1]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d008      	beq.n	801037e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685a      	ldr	r2, [r3, #4]
 8010370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010374:	425b      	negs	r3, r3
 8010376:	441a      	add	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	605a      	str	r2, [r3, #4]
 801037c:	e001      	b.n	8010382 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801037e:	2301      	movs	r3, #1
 8010380:	e018      	b.n	80103b4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010382:	e008      	b.n	8010396 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010384:	4b0d      	ldr	r3, [pc, #52]	; (80103bc <pbuf_header_impl+0x130>)
 8010386:	f240 2277 	movw	r2, #631	; 0x277
 801038a:	4910      	ldr	r1, [pc, #64]	; (80103cc <pbuf_header_impl+0x140>)
 801038c:	480d      	ldr	r0, [pc, #52]	; (80103c4 <pbuf_header_impl+0x138>)
 801038e:	f008 fd1f 	bl	8018dd0 <iprintf>
    return 1;
 8010392:	2301      	movs	r3, #1
 8010394:	e00e      	b.n	80103b4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	895a      	ldrh	r2, [r3, #10]
 801039a:	887b      	ldrh	r3, [r7, #2]
 801039c:	4413      	add	r3, r2
 801039e:	b29a      	uxth	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	891a      	ldrh	r2, [r3, #8]
 80103a8:	887b      	ldrh	r3, [r7, #2]
 80103aa:	4413      	add	r3, r2
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	0801ab28 	.word	0x0801ab28
 80103c0:	0801ad84 	.word	0x0801ad84
 80103c4:	0801ab98 	.word	0x0801ab98
 80103c8:	0801ad90 	.word	0x0801ad90
 80103cc:	0801adb0 	.word	0x0801adb0

080103d0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	460b      	mov	r3, r1
 80103da:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80103dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103e0:	2200      	movs	r2, #0
 80103e2:	4619      	mov	r1, r3
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ff51 	bl	801028c <pbuf_header_impl>
 80103ea:	4603      	mov	r3, r0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	460b      	mov	r3, r1
 80103fe:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010404:	2201      	movs	r2, #1
 8010406:	4619      	mov	r1, r3
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7ff ff3f 	bl	801028c <pbuf_header_impl>
 801040e:	4603      	mov	r3, r0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b088      	sub	sp, #32
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d10b      	bne.n	801043e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d106      	bne.n	801043a <pbuf_free+0x22>
 801042c:	4b41      	ldr	r3, [pc, #260]	; (8010534 <pbuf_free+0x11c>)
 801042e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010432:	4941      	ldr	r1, [pc, #260]	; (8010538 <pbuf_free+0x120>)
 8010434:	4841      	ldr	r0, [pc, #260]	; (801053c <pbuf_free+0x124>)
 8010436:	f008 fccb 	bl	8018dd0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801043a:	2300      	movs	r3, #0
 801043c:	e076      	b.n	801052c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	7b1b      	ldrb	r3, [r3, #12]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d012      	beq.n	801046c <pbuf_free+0x54>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	7b1b      	ldrb	r3, [r3, #12]
 801044a:	2b01      	cmp	r3, #1
 801044c:	d00e      	beq.n	801046c <pbuf_free+0x54>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	7b1b      	ldrb	r3, [r3, #12]
 8010452:	2b02      	cmp	r3, #2
 8010454:	d00a      	beq.n	801046c <pbuf_free+0x54>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	7b1b      	ldrb	r3, [r3, #12]
 801045a:	2b03      	cmp	r3, #3
 801045c:	d006      	beq.n	801046c <pbuf_free+0x54>
 801045e:	4b35      	ldr	r3, [pc, #212]	; (8010534 <pbuf_free+0x11c>)
 8010460:	f240 22de 	movw	r2, #734	; 0x2de
 8010464:	4936      	ldr	r1, [pc, #216]	; (8010540 <pbuf_free+0x128>)
 8010466:	4835      	ldr	r0, [pc, #212]	; (801053c <pbuf_free+0x124>)
 8010468:	f008 fcb2 	bl	8018dd0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010470:	e058      	b.n	8010524 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010472:	f008 fc49 	bl	8018d08 <sys_arch_protect>
 8010476:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	89db      	ldrh	r3, [r3, #14]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d106      	bne.n	801048e <pbuf_free+0x76>
 8010480:	4b2c      	ldr	r3, [pc, #176]	; (8010534 <pbuf_free+0x11c>)
 8010482:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010486:	492f      	ldr	r1, [pc, #188]	; (8010544 <pbuf_free+0x12c>)
 8010488:	482c      	ldr	r0, [pc, #176]	; (801053c <pbuf_free+0x124>)
 801048a:	f008 fca1 	bl	8018dd0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	89db      	ldrh	r3, [r3, #14]
 8010492:	3b01      	subs	r3, #1
 8010494:	b29a      	uxth	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	81da      	strh	r2, [r3, #14]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	89db      	ldrh	r3, [r3, #14]
 801049e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 80104a0:	69b8      	ldr	r0, [r7, #24]
 80104a2:	f008 fc3f 	bl	8018d24 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80104a6:	8afb      	ldrh	r3, [r7, #22]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d139      	bne.n	8010520 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	7b1b      	ldrb	r3, [r3, #12]
 80104b6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	7b5b      	ldrb	r3, [r3, #13]
 80104bc:	f003 0302 	and.w	r3, r3, #2
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d011      	beq.n	80104e8 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d106      	bne.n	80104de <pbuf_free+0xc6>
 80104d0:	4b18      	ldr	r3, [pc, #96]	; (8010534 <pbuf_free+0x11c>)
 80104d2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80104d6:	491c      	ldr	r1, [pc, #112]	; (8010548 <pbuf_free+0x130>)
 80104d8:	4818      	ldr	r0, [pc, #96]	; (801053c <pbuf_free+0x124>)
 80104da:	f008 fc79 	bl	8018dd0 <iprintf>
        pc->custom_free_function(p);
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	691b      	ldr	r3, [r3, #16]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	4798      	blx	r3
 80104e6:	e015      	b.n	8010514 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80104e8:	89fb      	ldrh	r3, [r7, #14]
 80104ea:	2b03      	cmp	r3, #3
 80104ec:	d104      	bne.n	80104f8 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 80104ee:	6879      	ldr	r1, [r7, #4]
 80104f0:	200c      	movs	r0, #12
 80104f2:	f7ff f9f9 	bl	800f8e8 <memp_free>
 80104f6:	e00d      	b.n	8010514 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80104f8:	89fb      	ldrh	r3, [r7, #14]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d002      	beq.n	8010504 <pbuf_free+0xec>
 80104fe:	89fb      	ldrh	r3, [r7, #14]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d104      	bne.n	801050e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010504:	6879      	ldr	r1, [r7, #4]
 8010506:	200b      	movs	r0, #11
 8010508:	f7ff f9ee 	bl	800f8e8 <memp_free>
 801050c:	e002      	b.n	8010514 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7fe fe8a 	bl	800f228 <mem_free>
        }
      }
      count++;
 8010514:	7ffb      	ldrb	r3, [r7, #31]
 8010516:	3301      	adds	r3, #1
 8010518:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	607b      	str	r3, [r7, #4]
 801051e:	e001      	b.n	8010524 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010520:	2300      	movs	r3, #0
 8010522:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d1a3      	bne.n	8010472 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801052a:	7ffb      	ldrb	r3, [r7, #31]
}
 801052c:	4618      	mov	r0, r3
 801052e:	3720      	adds	r7, #32
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	0801ab28 	.word	0x0801ab28
 8010538:	0801ad84 	.word	0x0801ad84
 801053c:	0801ab98 	.word	0x0801ab98
 8010540:	0801adc0 	.word	0x0801adc0
 8010544:	0801add8 	.word	0x0801add8
 8010548:	0801adf0 	.word	0x0801adf0

0801054c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010554:	2300      	movs	r3, #0
 8010556:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010558:	e005      	b.n	8010566 <pbuf_clen+0x1a>
    ++len;
 801055a:	89fb      	ldrh	r3, [r7, #14]
 801055c:	3301      	adds	r3, #1
 801055e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1f6      	bne.n	801055a <pbuf_clen+0xe>
  }
  return len;
 801056c:	89fb      	ldrh	r3, [r7, #14]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3714      	adds	r7, #20
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
	...

0801057c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d016      	beq.n	80105b8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801058a:	f008 fbbd 	bl	8018d08 <sys_arch_protect>
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	89db      	ldrh	r3, [r3, #14]
 8010594:	3301      	adds	r3, #1
 8010596:	b29a      	uxth	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	81da      	strh	r2, [r3, #14]
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f008 fbc1 	bl	8018d24 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	89db      	ldrh	r3, [r3, #14]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <pbuf_ref+0x3c>
 80105aa:	4b05      	ldr	r3, [pc, #20]	; (80105c0 <pbuf_ref+0x44>)
 80105ac:	f240 3239 	movw	r2, #825	; 0x339
 80105b0:	4904      	ldr	r1, [pc, #16]	; (80105c4 <pbuf_ref+0x48>)
 80105b2:	4805      	ldr	r0, [pc, #20]	; (80105c8 <pbuf_ref+0x4c>)
 80105b4:	f008 fc0c 	bl	8018dd0 <iprintf>
  }
}
 80105b8:	bf00      	nop
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	0801ab28 	.word	0x0801ab28
 80105c4:	0801ae14 	.word	0x0801ae14
 80105c8:	0801ab98 	.word	0x0801ab98

080105cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d002      	beq.n	80105e2 <pbuf_cat+0x16>
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d107      	bne.n	80105f2 <pbuf_cat+0x26>
 80105e2:	4b20      	ldr	r3, [pc, #128]	; (8010664 <pbuf_cat+0x98>)
 80105e4:	f240 324d 	movw	r2, #845	; 0x34d
 80105e8:	491f      	ldr	r1, [pc, #124]	; (8010668 <pbuf_cat+0x9c>)
 80105ea:	4820      	ldr	r0, [pc, #128]	; (801066c <pbuf_cat+0xa0>)
 80105ec:	f008 fbf0 	bl	8018dd0 <iprintf>
 80105f0:	e034      	b.n	801065c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	60fb      	str	r3, [r7, #12]
 80105f6:	e00a      	b.n	801060e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	891a      	ldrh	r2, [r3, #8]
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	891b      	ldrh	r3, [r3, #8]
 8010600:	4413      	add	r3, r2
 8010602:	b29a      	uxth	r2, r3
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	60fb      	str	r3, [r7, #12]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d1f0      	bne.n	80105f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	891a      	ldrh	r2, [r3, #8]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	895b      	ldrh	r3, [r3, #10]
 801061e:	429a      	cmp	r2, r3
 8010620:	d006      	beq.n	8010630 <pbuf_cat+0x64>
 8010622:	4b10      	ldr	r3, [pc, #64]	; (8010664 <pbuf_cat+0x98>)
 8010624:	f240 3255 	movw	r2, #853	; 0x355
 8010628:	4911      	ldr	r1, [pc, #68]	; (8010670 <pbuf_cat+0xa4>)
 801062a:	4810      	ldr	r0, [pc, #64]	; (801066c <pbuf_cat+0xa0>)
 801062c:	f008 fbd0 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d006      	beq.n	8010646 <pbuf_cat+0x7a>
 8010638:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <pbuf_cat+0x98>)
 801063a:	f240 3256 	movw	r2, #854	; 0x356
 801063e:	490d      	ldr	r1, [pc, #52]	; (8010674 <pbuf_cat+0xa8>)
 8010640:	480a      	ldr	r0, [pc, #40]	; (801066c <pbuf_cat+0xa0>)
 8010642:	f008 fbc5 	bl	8018dd0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	891a      	ldrh	r2, [r3, #8]
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	891b      	ldrh	r3, [r3, #8]
 801064e:	4413      	add	r3, r2
 8010650:	b29a      	uxth	r2, r3
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	683a      	ldr	r2, [r7, #0]
 801065a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	0801ab28 	.word	0x0801ab28
 8010668:	0801ae28 	.word	0x0801ae28
 801066c:	0801ab98 	.word	0x0801ab98
 8010670:	0801ae60 	.word	0x0801ae60
 8010674:	0801ae90 	.word	0x0801ae90

08010678 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010682:	2300      	movs	r3, #0
 8010684:	81fb      	strh	r3, [r7, #14]
 8010686:	2300      	movs	r3, #0
 8010688:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d008      	beq.n	80106a2 <pbuf_copy+0x2a>
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d005      	beq.n	80106a2 <pbuf_copy+0x2a>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	891a      	ldrh	r2, [r3, #8]
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	891b      	ldrh	r3, [r3, #8]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d209      	bcs.n	80106b6 <pbuf_copy+0x3e>
 80106a2:	4b54      	ldr	r3, [pc, #336]	; (80107f4 <pbuf_copy+0x17c>)
 80106a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80106a8:	4953      	ldr	r1, [pc, #332]	; (80107f8 <pbuf_copy+0x180>)
 80106aa:	4854      	ldr	r0, [pc, #336]	; (80107fc <pbuf_copy+0x184>)
 80106ac:	f008 fb90 	bl	8018dd0 <iprintf>
 80106b0:	f06f 030f 	mvn.w	r3, #15
 80106b4:	e099      	b.n	80107ea <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	895b      	ldrh	r3, [r3, #10]
 80106ba:	461a      	mov	r2, r3
 80106bc:	89fb      	ldrh	r3, [r7, #14]
 80106be:	1ad2      	subs	r2, r2, r3
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	895b      	ldrh	r3, [r3, #10]
 80106c4:	4619      	mov	r1, r3
 80106c6:	89bb      	ldrh	r3, [r7, #12]
 80106c8:	1acb      	subs	r3, r1, r3
 80106ca:	429a      	cmp	r2, r3
 80106cc:	db05      	blt.n	80106da <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	895a      	ldrh	r2, [r3, #10]
 80106d2:	89bb      	ldrh	r3, [r7, #12]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	817b      	strh	r3, [r7, #10]
 80106d8:	e004      	b.n	80106e4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	895a      	ldrh	r2, [r3, #10]
 80106de:	89fb      	ldrh	r3, [r7, #14]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	89fb      	ldrh	r3, [r7, #14]
 80106ea:	18d0      	adds	r0, r2, r3
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	89bb      	ldrh	r3, [r7, #12]
 80106f2:	4413      	add	r3, r2
 80106f4:	897a      	ldrh	r2, [r7, #10]
 80106f6:	4619      	mov	r1, r3
 80106f8:	f008 fb57 	bl	8018daa <memcpy>
    offset_to += len;
 80106fc:	89fa      	ldrh	r2, [r7, #14]
 80106fe:	897b      	ldrh	r3, [r7, #10]
 8010700:	4413      	add	r3, r2
 8010702:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010704:	89ba      	ldrh	r2, [r7, #12]
 8010706:	897b      	ldrh	r3, [r7, #10]
 8010708:	4413      	add	r3, r2
 801070a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	895b      	ldrh	r3, [r3, #10]
 8010710:	89fa      	ldrh	r2, [r7, #14]
 8010712:	429a      	cmp	r2, r3
 8010714:	d906      	bls.n	8010724 <pbuf_copy+0xac>
 8010716:	4b37      	ldr	r3, [pc, #220]	; (80107f4 <pbuf_copy+0x17c>)
 8010718:	f240 32cd 	movw	r2, #973	; 0x3cd
 801071c:	4938      	ldr	r1, [pc, #224]	; (8010800 <pbuf_copy+0x188>)
 801071e:	4837      	ldr	r0, [pc, #220]	; (80107fc <pbuf_copy+0x184>)
 8010720:	f008 fb56 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	895b      	ldrh	r3, [r3, #10]
 8010728:	89ba      	ldrh	r2, [r7, #12]
 801072a:	429a      	cmp	r2, r3
 801072c:	d906      	bls.n	801073c <pbuf_copy+0xc4>
 801072e:	4b31      	ldr	r3, [pc, #196]	; (80107f4 <pbuf_copy+0x17c>)
 8010730:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010734:	4933      	ldr	r1, [pc, #204]	; (8010804 <pbuf_copy+0x18c>)
 8010736:	4831      	ldr	r0, [pc, #196]	; (80107fc <pbuf_copy+0x184>)
 8010738:	f008 fb4a 	bl	8018dd0 <iprintf>
    if (offset_from >= p_from->len) {
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	895b      	ldrh	r3, [r3, #10]
 8010740:	89ba      	ldrh	r2, [r7, #12]
 8010742:	429a      	cmp	r2, r3
 8010744:	d304      	bcc.n	8010750 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	895b      	ldrh	r3, [r3, #10]
 8010754:	89fa      	ldrh	r2, [r7, #14]
 8010756:	429a      	cmp	r2, r3
 8010758:	d114      	bne.n	8010784 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d10c      	bne.n	8010784 <pbuf_copy+0x10c>
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d009      	beq.n	8010784 <pbuf_copy+0x10c>
 8010770:	4b20      	ldr	r3, [pc, #128]	; (80107f4 <pbuf_copy+0x17c>)
 8010772:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010776:	4924      	ldr	r1, [pc, #144]	; (8010808 <pbuf_copy+0x190>)
 8010778:	4820      	ldr	r0, [pc, #128]	; (80107fc <pbuf_copy+0x184>)
 801077a:	f008 fb29 	bl	8018dd0 <iprintf>
 801077e:	f06f 030f 	mvn.w	r3, #15
 8010782:	e032      	b.n	80107ea <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d013      	beq.n	80107b2 <pbuf_copy+0x13a>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	895a      	ldrh	r2, [r3, #10]
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	891b      	ldrh	r3, [r3, #8]
 8010792:	429a      	cmp	r2, r3
 8010794:	d10d      	bne.n	80107b2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d009      	beq.n	80107b2 <pbuf_copy+0x13a>
 801079e:	4b15      	ldr	r3, [pc, #84]	; (80107f4 <pbuf_copy+0x17c>)
 80107a0:	f240 32de 	movw	r2, #990	; 0x3de
 80107a4:	4919      	ldr	r1, [pc, #100]	; (801080c <pbuf_copy+0x194>)
 80107a6:	4815      	ldr	r0, [pc, #84]	; (80107fc <pbuf_copy+0x184>)
 80107a8:	f008 fb12 	bl	8018dd0 <iprintf>
 80107ac:	f06f 0305 	mvn.w	r3, #5
 80107b0:	e01b      	b.n	80107ea <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d013      	beq.n	80107e0 <pbuf_copy+0x168>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	895a      	ldrh	r2, [r3, #10]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	891b      	ldrh	r3, [r3, #8]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d10d      	bne.n	80107e0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d009      	beq.n	80107e0 <pbuf_copy+0x168>
 80107cc:	4b09      	ldr	r3, [pc, #36]	; (80107f4 <pbuf_copy+0x17c>)
 80107ce:	f240 32e3 	movw	r2, #995	; 0x3e3
 80107d2:	490e      	ldr	r1, [pc, #56]	; (801080c <pbuf_copy+0x194>)
 80107d4:	4809      	ldr	r0, [pc, #36]	; (80107fc <pbuf_copy+0x184>)
 80107d6:	f008 fafb 	bl	8018dd0 <iprintf>
 80107da:	f06f 0305 	mvn.w	r3, #5
 80107de:	e004      	b.n	80107ea <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f47f af67 	bne.w	80106b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	0801ab28 	.word	0x0801ab28
 80107f8:	0801aedc 	.word	0x0801aedc
 80107fc:	0801ab98 	.word	0x0801ab98
 8010800:	0801af0c 	.word	0x0801af0c
 8010804:	0801af24 	.word	0x0801af24
 8010808:	0801af40 	.word	0x0801af40
 801080c:	0801af50 	.word	0x0801af50

08010810 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b088      	sub	sp, #32
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	4611      	mov	r1, r2
 801081c:	461a      	mov	r2, r3
 801081e:	460b      	mov	r3, r1
 8010820:	80fb      	strh	r3, [r7, #6]
 8010822:	4613      	mov	r3, r2
 8010824:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d108      	bne.n	8010842 <pbuf_copy_partial+0x32>
 8010830:	4b30      	ldr	r3, [pc, #192]	; (80108f4 <pbuf_copy_partial+0xe4>)
 8010832:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010836:	4930      	ldr	r1, [pc, #192]	; (80108f8 <pbuf_copy_partial+0xe8>)
 8010838:	4830      	ldr	r0, [pc, #192]	; (80108fc <pbuf_copy_partial+0xec>)
 801083a:	f008 fac9 	bl	8018dd0 <iprintf>
 801083e:	2300      	movs	r3, #0
 8010840:	e054      	b.n	80108ec <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d108      	bne.n	801085a <pbuf_copy_partial+0x4a>
 8010848:	4b2a      	ldr	r3, [pc, #168]	; (80108f4 <pbuf_copy_partial+0xe4>)
 801084a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801084e:	492c      	ldr	r1, [pc, #176]	; (8010900 <pbuf_copy_partial+0xf0>)
 8010850:	482a      	ldr	r0, [pc, #168]	; (80108fc <pbuf_copy_partial+0xec>)
 8010852:	f008 fabd 	bl	8018dd0 <iprintf>
 8010856:	2300      	movs	r3, #0
 8010858:	e048      	b.n	80108ec <pbuf_copy_partial+0xdc>

  left = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d002      	beq.n	801086a <pbuf_copy_partial+0x5a>
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <pbuf_copy_partial+0x5e>
    return 0;
 801086a:	2300      	movs	r3, #0
 801086c:	e03e      	b.n	80108ec <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	61fb      	str	r3, [r7, #28]
 8010872:	e034      	b.n	80108de <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010874:	88bb      	ldrh	r3, [r7, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00a      	beq.n	8010890 <pbuf_copy_partial+0x80>
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	895b      	ldrh	r3, [r3, #10]
 801087e:	88ba      	ldrh	r2, [r7, #4]
 8010880:	429a      	cmp	r2, r3
 8010882:	d305      	bcc.n	8010890 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	895b      	ldrh	r3, [r3, #10]
 8010888:	88ba      	ldrh	r2, [r7, #4]
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	80bb      	strh	r3, [r7, #4]
 801088e:	e023      	b.n	80108d8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	895a      	ldrh	r2, [r3, #10]
 8010894:	88bb      	ldrh	r3, [r7, #4]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801089a:	8b3a      	ldrh	r2, [r7, #24]
 801089c:	88fb      	ldrh	r3, [r7, #6]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d901      	bls.n	80108a6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80108a2:	88fb      	ldrh	r3, [r7, #6]
 80108a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80108a6:	8b7b      	ldrh	r3, [r7, #26]
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	18d0      	adds	r0, r2, r3
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	685a      	ldr	r2, [r3, #4]
 80108b0:	88bb      	ldrh	r3, [r7, #4]
 80108b2:	4413      	add	r3, r2
 80108b4:	8b3a      	ldrh	r2, [r7, #24]
 80108b6:	4619      	mov	r1, r3
 80108b8:	f008 fa77 	bl	8018daa <memcpy>
      copied_total += buf_copy_len;
 80108bc:	8afa      	ldrh	r2, [r7, #22]
 80108be:	8b3b      	ldrh	r3, [r7, #24]
 80108c0:	4413      	add	r3, r2
 80108c2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80108c4:	8b7a      	ldrh	r2, [r7, #26]
 80108c6:	8b3b      	ldrh	r3, [r7, #24]
 80108c8:	4413      	add	r3, r2
 80108ca:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80108cc:	88fa      	ldrh	r2, [r7, #6]
 80108ce:	8b3b      	ldrh	r3, [r7, #24]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80108d4:	2300      	movs	r3, #0
 80108d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	61fb      	str	r3, [r7, #28]
 80108de:	88fb      	ldrh	r3, [r7, #6]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <pbuf_copy_partial+0xda>
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1c4      	bne.n	8010874 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80108ea:	8afb      	ldrh	r3, [r7, #22]
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3720      	adds	r7, #32
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	0801ab28 	.word	0x0801ab28
 80108f8:	0801af7c 	.word	0x0801af7c
 80108fc:	0801ab98 	.word	0x0801ab98
 8010900:	0801af9c 	.word	0x0801af9c

08010904 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010904:	b480      	push	{r7}
 8010906:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010908:	bf00      	nop
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
	...

08010914 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010918:	f000 ffb6 	bl	8011888 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801091c:	4b07      	ldr	r3, [pc, #28]	; (801093c <tcp_tmr+0x28>)
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	3301      	adds	r3, #1
 8010922:	b2da      	uxtb	r2, r3
 8010924:	4b05      	ldr	r3, [pc, #20]	; (801093c <tcp_tmr+0x28>)
 8010926:	701a      	strb	r2, [r3, #0]
 8010928:	4b04      	ldr	r3, [pc, #16]	; (801093c <tcp_tmr+0x28>)
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	f003 0301 	and.w	r3, r3, #1
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010934:	f000 fce8 	bl	8011308 <tcp_slowtmr>
  }
}
 8010938:	bf00      	nop
 801093a:	bd80      	pop	{r7, pc}
 801093c:	200040b1 	.word	0x200040b1

08010940 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	60fb      	str	r3, [r7, #12]
 801094e:	e00a      	b.n	8010966 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	429a      	cmp	r2, r3
 8010958:	d102      	bne.n	8010960 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1f1      	bne.n	8010950 <tcp_remove_listener+0x10>
      }
   }
}
 801096c:	bf00      	nop
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d105      	bne.n	8010992 <tcp_listen_closed+0x1a>
 8010986:	4b13      	ldr	r3, [pc, #76]	; (80109d4 <tcp_listen_closed+0x5c>)
 8010988:	22c0      	movs	r2, #192	; 0xc0
 801098a:	4913      	ldr	r1, [pc, #76]	; (80109d8 <tcp_listen_closed+0x60>)
 801098c:	4813      	ldr	r0, [pc, #76]	; (80109dc <tcp_listen_closed+0x64>)
 801098e:	f008 fa1f 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	7d1b      	ldrb	r3, [r3, #20]
 8010996:	2b01      	cmp	r3, #1
 8010998:	d005      	beq.n	80109a6 <tcp_listen_closed+0x2e>
 801099a:	4b0e      	ldr	r3, [pc, #56]	; (80109d4 <tcp_listen_closed+0x5c>)
 801099c:	22c1      	movs	r2, #193	; 0xc1
 801099e:	4910      	ldr	r1, [pc, #64]	; (80109e0 <tcp_listen_closed+0x68>)
 80109a0:	480e      	ldr	r0, [pc, #56]	; (80109dc <tcp_listen_closed+0x64>)
 80109a2:	f008 fa15 	bl	8018dd0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80109a6:	2301      	movs	r3, #1
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	e00b      	b.n	80109c4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80109ac:	4a0d      	ldr	r2, [pc, #52]	; (80109e4 <tcp_listen_closed+0x6c>)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6879      	ldr	r1, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7ff ffc1 	bl	8010940 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	3301      	adds	r3, #1
 80109c2:	60fb      	str	r3, [r7, #12]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b03      	cmp	r3, #3
 80109c8:	d9f0      	bls.n	80109ac <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80109ca:	bf00      	nop
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	0801b0d0 	.word	0x0801b0d0
 80109d8:	0801b124 	.word	0x0801b124
 80109dc:	0801b130 	.word	0x0801b130
 80109e0:	0801b158 	.word	0x0801b158
 80109e4:	0801c6b4 	.word	0x0801c6b4

080109e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80109e8:	b5b0      	push	{r4, r5, r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af02      	add	r7, sp, #8
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	460b      	mov	r3, r1
 80109f2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d075      	beq.n	8010ae6 <tcp_close_shutdown+0xfe>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	7d1b      	ldrb	r3, [r3, #20]
 80109fe:	2b04      	cmp	r3, #4
 8010a00:	d003      	beq.n	8010a0a <tcp_close_shutdown+0x22>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	7d1b      	ldrb	r3, [r3, #20]
 8010a06:	2b07      	cmp	r3, #7
 8010a08:	d16d      	bne.n	8010ae6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d104      	bne.n	8010a1c <tcp_close_shutdown+0x34>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010a1a:	d064      	beq.n	8010ae6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7e9b      	ldrb	r3, [r3, #26]
 8010a20:	f003 0310 	and.w	r3, r3, #16
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d106      	bne.n	8010a36 <tcp_close_shutdown+0x4e>
 8010a28:	4b59      	ldr	r3, [pc, #356]	; (8010b90 <tcp_close_shutdown+0x1a8>)
 8010a2a:	f240 120f 	movw	r2, #271	; 0x10f
 8010a2e:	4959      	ldr	r1, [pc, #356]	; (8010b94 <tcp_close_shutdown+0x1ac>)
 8010a30:	4859      	ldr	r0, [pc, #356]	; (8010b98 <tcp_close_shutdown+0x1b0>)
 8010a32:	f008 f9cd 	bl	8018dd0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a3e:	687c      	ldr	r4, [r7, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	1d1d      	adds	r5, r3, #4
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	8adb      	ldrh	r3, [r3, #22]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	8b12      	ldrh	r2, [r2, #24]
 8010a4c:	9201      	str	r2, [sp, #4]
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	462b      	mov	r3, r5
 8010a52:	4622      	mov	r2, r4
 8010a54:	f004 ff1a 	bl	801588c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f001 fa4b 	bl	8011ef4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010a5e:	4b4f      	ldr	r3, [pc, #316]	; (8010b9c <tcp_close_shutdown+0x1b4>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d105      	bne.n	8010a74 <tcp_close_shutdown+0x8c>
 8010a68:	4b4c      	ldr	r3, [pc, #304]	; (8010b9c <tcp_close_shutdown+0x1b4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	4a4b      	ldr	r2, [pc, #300]	; (8010b9c <tcp_close_shutdown+0x1b4>)
 8010a70:	6013      	str	r3, [r2, #0]
 8010a72:	e013      	b.n	8010a9c <tcp_close_shutdown+0xb4>
 8010a74:	4b49      	ldr	r3, [pc, #292]	; (8010b9c <tcp_close_shutdown+0x1b4>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	60fb      	str	r3, [r7, #12]
 8010a7a:	e00c      	b.n	8010a96 <tcp_close_shutdown+0xae>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d104      	bne.n	8010a90 <tcp_close_shutdown+0xa8>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	68da      	ldr	r2, [r3, #12]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	60da      	str	r2, [r3, #12]
 8010a8e:	e005      	b.n	8010a9c <tcp_close_shutdown+0xb4>
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	60fb      	str	r3, [r7, #12]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1ef      	bne.n	8010a7c <tcp_close_shutdown+0x94>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	60da      	str	r2, [r3, #12]
 8010aa2:	4b3f      	ldr	r3, [pc, #252]	; (8010ba0 <tcp_close_shutdown+0x1b8>)
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	2b04      	cmp	r3, #4
 8010aae:	d10c      	bne.n	8010aca <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	220a      	movs	r2, #10
 8010ab4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010ab6:	4b3b      	ldr	r3, [pc, #236]	; (8010ba4 <tcp_close_shutdown+0x1bc>)
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	60da      	str	r2, [r3, #12]
 8010abe:	4a39      	ldr	r2, [pc, #228]	; (8010ba4 <tcp_close_shutdown+0x1bc>)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	f005 f934 	bl	8015d30 <tcp_timer_needed>
 8010ac8:	e00b      	b.n	8010ae2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8010aca:	4b37      	ldr	r3, [pc, #220]	; (8010ba8 <tcp_close_shutdown+0x1c0>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d102      	bne.n	8010ada <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010ad4:	f003 fd72 	bl	80145bc <tcp_trigger_input_pcb_close>
 8010ad8:	e003      	b.n	8010ae2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8010ada:	6879      	ldr	r1, [r7, #4]
 8010adc:	2001      	movs	r0, #1
 8010ade:	f7fe ff03 	bl	800f8e8 <memp_free>
        }
      }
      return ERR_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e050      	b.n	8010b88 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	7d1b      	ldrb	r3, [r3, #20]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d02e      	beq.n	8010b4c <tcp_close_shutdown+0x164>
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	d038      	beq.n	8010b64 <tcp_close_shutdown+0x17c>
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d142      	bne.n	8010b7c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	8adb      	ldrh	r3, [r3, #22]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d021      	beq.n	8010b42 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010afe:	4b2b      	ldr	r3, [pc, #172]	; (8010bac <tcp_close_shutdown+0x1c4>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d105      	bne.n	8010b14 <tcp_close_shutdown+0x12c>
 8010b08:	4b28      	ldr	r3, [pc, #160]	; (8010bac <tcp_close_shutdown+0x1c4>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	4a27      	ldr	r2, [pc, #156]	; (8010bac <tcp_close_shutdown+0x1c4>)
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	e013      	b.n	8010b3c <tcp_close_shutdown+0x154>
 8010b14:	4b25      	ldr	r3, [pc, #148]	; (8010bac <tcp_close_shutdown+0x1c4>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60bb      	str	r3, [r7, #8]
 8010b1a:	e00c      	b.n	8010b36 <tcp_close_shutdown+0x14e>
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d104      	bne.n	8010b30 <tcp_close_shutdown+0x148>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	60da      	str	r2, [r3, #12]
 8010b2e:	e005      	b.n	8010b3c <tcp_close_shutdown+0x154>
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	60bb      	str	r3, [r7, #8]
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1ef      	bne.n	8010b1c <tcp_close_shutdown+0x134>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	2001      	movs	r0, #1
 8010b46:	f7fe fecf 	bl	800f8e8 <memp_free>
    break;
 8010b4a:	e01c      	b.n	8010b86 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff ff13 	bl	8010978 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010b52:	6879      	ldr	r1, [r7, #4]
 8010b54:	4816      	ldr	r0, [pc, #88]	; (8010bb0 <tcp_close_shutdown+0x1c8>)
 8010b56:	f001 fa0f 	bl	8011f78 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010b5a:	6879      	ldr	r1, [r7, #4]
 8010b5c:	2002      	movs	r0, #2
 8010b5e:	f7fe fec3 	bl	800f8e8 <memp_free>
    break;
 8010b62:	e010      	b.n	8010b86 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8010b64:	6879      	ldr	r1, [r7, #4]
 8010b66:	480d      	ldr	r0, [pc, #52]	; (8010b9c <tcp_close_shutdown+0x1b4>)
 8010b68:	f001 fa06 	bl	8011f78 <tcp_pcb_remove>
 8010b6c:	4b0c      	ldr	r3, [pc, #48]	; (8010ba0 <tcp_close_shutdown+0x1b8>)
 8010b6e:	2201      	movs	r2, #1
 8010b70:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	2001      	movs	r0, #1
 8010b76:	f7fe feb7 	bl	800f8e8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8010b7a:	e004      	b.n	8010b86 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f000 f819 	bl	8010bb4 <tcp_close_shutdown_fin>
 8010b82:	4603      	mov	r3, r0
 8010b84:	e000      	b.n	8010b88 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b90:	0801b0d0 	.word	0x0801b0d0
 8010b94:	0801b170 	.word	0x0801b170
 8010b98:	0801b130 	.word	0x0801b130
 8010b9c:	200079b0 	.word	0x200079b0
 8010ba0:	200079ac 	.word	0x200079ac
 8010ba4:	200079c0 	.word	0x200079c0
 8010ba8:	200079c4 	.word	0x200079c4
 8010bac:	200079bc 	.word	0x200079bc
 8010bb0:	200079b8 	.word	0x200079b8

08010bb4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <tcp_close_shutdown_fin+0x1c>
 8010bc2:	4b2c      	ldr	r3, [pc, #176]	; (8010c74 <tcp_close_shutdown_fin+0xc0>)
 8010bc4:	f240 124d 	movw	r2, #333	; 0x14d
 8010bc8:	492b      	ldr	r1, [pc, #172]	; (8010c78 <tcp_close_shutdown_fin+0xc4>)
 8010bca:	482c      	ldr	r0, [pc, #176]	; (8010c7c <tcp_close_shutdown_fin+0xc8>)
 8010bcc:	f008 f900 	bl	8018dd0 <iprintf>

  switch (pcb->state) {
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	7d1b      	ldrb	r3, [r3, #20]
 8010bd4:	2b04      	cmp	r3, #4
 8010bd6:	d010      	beq.n	8010bfa <tcp_close_shutdown_fin+0x46>
 8010bd8:	2b07      	cmp	r3, #7
 8010bda:	d01b      	beq.n	8010c14 <tcp_close_shutdown_fin+0x60>
 8010bdc:	2b03      	cmp	r3, #3
 8010bde:	d126      	bne.n	8010c2e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f003 fd77 	bl	80146d4 <tcp_send_fin>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d11f      	bne.n	8010c32 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2205      	movs	r2, #5
 8010bf6:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010bf8:	e01b      	b.n	8010c32 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f003 fd6a 	bl	80146d4 <tcp_send_fin>
 8010c00:	4603      	mov	r3, r0
 8010c02:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d114      	bne.n	8010c36 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2205      	movs	r2, #5
 8010c10:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010c12:	e010      	b.n	8010c36 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f003 fd5d 	bl	80146d4 <tcp_send_fin>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d109      	bne.n	8010c3a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2209      	movs	r2, #9
 8010c2a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010c2c:	e005      	b.n	8010c3a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	e01c      	b.n	8010c6c <tcp_close_shutdown_fin+0xb8>
    break;
 8010c32:	bf00      	nop
 8010c34:	e002      	b.n	8010c3c <tcp_close_shutdown_fin+0x88>
    break;
 8010c36:	bf00      	nop
 8010c38:	e000      	b.n	8010c3c <tcp_close_shutdown_fin+0x88>
    break;
 8010c3a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d103      	bne.n	8010c4c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f004 fb97 	bl	8015378 <tcp_output>
 8010c4a:	e00d      	b.n	8010c68 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c54:	d108      	bne.n	8010c68 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	7e9b      	ldrb	r3, [r3, #26]
 8010c5a:	f043 0308 	orr.w	r3, r3, #8
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	e001      	b.n	8010c6c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8010c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	0801b0d0 	.word	0x0801b0d0
 8010c78:	0801b124 	.word	0x0801b124
 8010c7c:	0801b130 	.word	0x0801b130

08010c80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	7d1b      	ldrb	r3, [r3, #20]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d006      	beq.n	8010c9e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	7e9b      	ldrb	r3, [r3, #26]
 8010c94:	f043 0310 	orr.w	r3, r3, #16
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010c9e:	2101      	movs	r1, #1
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff fea1 	bl	80109e8 <tcp_close_shutdown>
 8010ca6:	4603      	mov	r3, r0
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	7d1b      	ldrb	r3, [r3, #20]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d102      	bne.n	8010cca <tcp_shutdown+0x1a>
    return ERR_CONN;
 8010cc4:	f06f 030a 	mvn.w	r3, #10
 8010cc8:	e035      	b.n	8010d36 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d01b      	beq.n	8010d08 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	7e9b      	ldrb	r3, [r3, #26]
 8010cd4:	f043 0310 	orr.w	r3, r3, #16
 8010cd8:	b2da      	uxtb	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d005      	beq.n	8010cf0 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	68f8      	ldr	r0, [r7, #12]
 8010ce8:	f7ff fe7e 	bl	80109e8 <tcp_close_shutdown>
 8010cec:	4603      	mov	r3, r0
 8010cee:	e022      	b.n	8010d36 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d007      	beq.n	8010d08 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ff fb8b 	bl	8010418 <pbuf_free>
      pcb->refused_data = NULL;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2200      	movs	r2, #0
 8010d06:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d012      	beq.n	8010d34 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	7d1b      	ldrb	r3, [r3, #20]
 8010d12:	2b03      	cmp	r3, #3
 8010d14:	db0b      	blt.n	8010d2e <tcp_shutdown+0x7e>
 8010d16:	2b04      	cmp	r3, #4
 8010d18:	dd01      	ble.n	8010d1e <tcp_shutdown+0x6e>
 8010d1a:	2b07      	cmp	r3, #7
 8010d1c:	d107      	bne.n	8010d2e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	4619      	mov	r1, r3
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f7ff fe5f 	bl	80109e8 <tcp_close_shutdown>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	e003      	b.n	8010d36 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 8010d2e:	f06f 030a 	mvn.w	r3, #10
 8010d32:	e000      	b.n	8010d36 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08c      	sub	sp, #48	; 0x30
 8010d44:	af02      	add	r7, sp, #8
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7d1b      	ldrb	r3, [r3, #20]
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d106      	bne.n	8010d60 <tcp_abandon+0x20>
 8010d52:	4b4d      	ldr	r3, [pc, #308]	; (8010e88 <tcp_abandon+0x148>)
 8010d54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010d58:	494c      	ldr	r1, [pc, #304]	; (8010e8c <tcp_abandon+0x14c>)
 8010d5a:	484d      	ldr	r0, [pc, #308]	; (8010e90 <tcp_abandon+0x150>)
 8010d5c:	f008 f838 	bl	8018dd0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	7d1b      	ldrb	r3, [r3, #20]
 8010d64:	2b0a      	cmp	r3, #10
 8010d66:	d108      	bne.n	8010d7a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010d68:	6879      	ldr	r1, [r7, #4]
 8010d6a:	484a      	ldr	r0, [pc, #296]	; (8010e94 <tcp_abandon+0x154>)
 8010d6c:	f001 f904 	bl	8011f78 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8010d70:	6879      	ldr	r1, [r7, #4]
 8010d72:	2001      	movs	r0, #1
 8010d74:	f7fe fdb8 	bl	800f8e8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8010d78:	e081      	b.n	8010e7e <tcp_abandon+0x13e>
    int send_rst = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d86:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d8c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d94:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d126      	bne.n	8010df2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	8adb      	ldrh	r3, [r3, #22]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d02e      	beq.n	8010e0a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010dac:	4b3a      	ldr	r3, [pc, #232]	; (8010e98 <tcp_abandon+0x158>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d105      	bne.n	8010dc2 <tcp_abandon+0x82>
 8010db6:	4b38      	ldr	r3, [pc, #224]	; (8010e98 <tcp_abandon+0x158>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	4a36      	ldr	r2, [pc, #216]	; (8010e98 <tcp_abandon+0x158>)
 8010dbe:	6013      	str	r3, [r2, #0]
 8010dc0:	e013      	b.n	8010dea <tcp_abandon+0xaa>
 8010dc2:	4b35      	ldr	r3, [pc, #212]	; (8010e98 <tcp_abandon+0x158>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	61fb      	str	r3, [r7, #28]
 8010dc8:	e00c      	b.n	8010de4 <tcp_abandon+0xa4>
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d104      	bne.n	8010dde <tcp_abandon+0x9e>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	68da      	ldr	r2, [r3, #12]
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	60da      	str	r2, [r3, #12]
 8010ddc:	e005      	b.n	8010dea <tcp_abandon+0xaa>
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	61fb      	str	r3, [r7, #28]
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d1ef      	bne.n	8010dca <tcp_abandon+0x8a>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	60da      	str	r2, [r3, #12]
 8010df0:	e00b      	b.n	8010e0a <tcp_abandon+0xca>
      send_rst = reset;
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	8adb      	ldrh	r3, [r3, #22]
 8010dfa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010dfc:	6879      	ldr	r1, [r7, #4]
 8010dfe:	4827      	ldr	r0, [pc, #156]	; (8010e9c <tcp_abandon+0x15c>)
 8010e00:	f001 f8ba 	bl	8011f78 <tcp_pcb_remove>
 8010e04:	4b26      	ldr	r3, [pc, #152]	; (8010ea0 <tcp_abandon+0x160>)
 8010e06:	2201      	movs	r2, #1
 8010e08:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d004      	beq.n	8010e1c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e16:	4618      	mov	r0, r3
 8010e18:	f000 fe03 	bl	8011a22 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d004      	beq.n	8010e2e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f000 fdfa 	bl	8011a22 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d004      	beq.n	8010e40 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 fdf1 	bl	8011a22 <tcp_segs_free>
    if (send_rst) {
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d00c      	beq.n	8010e60 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	1d19      	adds	r1, r3, #4
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8b1b      	ldrh	r3, [r3, #24]
 8010e50:	9301      	str	r3, [sp, #4]
 8010e52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e54:	9300      	str	r3, [sp, #0]
 8010e56:	460b      	mov	r3, r1
 8010e58:	6979      	ldr	r1, [r7, #20]
 8010e5a:	69b8      	ldr	r0, [r7, #24]
 8010e5c:	f004 fd16 	bl	801588c <tcp_rst>
    last_state = pcb->state;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	7d1b      	ldrb	r3, [r3, #20]
 8010e64:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8010e66:	6879      	ldr	r1, [r7, #4]
 8010e68:	2001      	movs	r0, #1
 8010e6a:	f7fe fd3d 	bl	800f8e8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d004      	beq.n	8010e7e <tcp_abandon+0x13e>
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	f06f 010c 	mvn.w	r1, #12
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	4798      	blx	r3
}
 8010e7e:	bf00      	nop
 8010e80:	3728      	adds	r7, #40	; 0x28
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	0801b0d0 	.word	0x0801b0d0
 8010e8c:	0801b18c 	.word	0x0801b18c
 8010e90:	0801b130 	.word	0x0801b130
 8010e94:	200079c0 	.word	0x200079c0
 8010e98:	200079bc 	.word	0x200079bc
 8010e9c:	200079b0 	.word	0x200079b0
 8010ea0:	200079ac 	.word	0x200079ac

08010ea4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010eac:	2101      	movs	r1, #1
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ff ff46 	bl	8010d40 <tcp_abandon>
}
 8010eb4:	bf00      	nop
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b088      	sub	sp, #32
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010eca:	2304      	movs	r3, #4
 8010ecc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d101      	bne.n	8010ed8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010ed4:	4b3c      	ldr	r3, [pc, #240]	; (8010fc8 <tcp_bind+0x10c>)
 8010ed6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <tcp_bind+0x28>
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d102      	bne.n	8010eea <tcp_bind+0x2e>
    return ERR_VAL;
 8010ee4:	f06f 0305 	mvn.w	r3, #5
 8010ee8:	e06a      	b.n	8010fc0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	7d1b      	ldrb	r3, [r3, #20]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d009      	beq.n	8010f06 <tcp_bind+0x4a>
 8010ef2:	4b36      	ldr	r3, [pc, #216]	; (8010fcc <tcp_bind+0x110>)
 8010ef4:	f44f 7211 	mov.w	r2, #580	; 0x244
 8010ef8:	4935      	ldr	r1, [pc, #212]	; (8010fd0 <tcp_bind+0x114>)
 8010efa:	4836      	ldr	r0, [pc, #216]	; (8010fd4 <tcp_bind+0x118>)
 8010efc:	f007 ff68 	bl	8018dd0 <iprintf>
 8010f00:	f06f 0305 	mvn.w	r3, #5
 8010f04:	e05c      	b.n	8010fc0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8010f06:	88fb      	ldrh	r3, [r7, #6]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d109      	bne.n	8010f20 <tcp_bind+0x64>
    port = tcp_new_port();
 8010f0c:	f000 f9b8 	bl	8011280 <tcp_new_port>
 8010f10:	4603      	mov	r3, r0
 8010f12:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010f14:	88fb      	ldrh	r3, [r7, #6]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d135      	bne.n	8010f86 <tcp_bind+0xca>
      return ERR_BUF;
 8010f1a:	f06f 0301 	mvn.w	r3, #1
 8010f1e:	e04f      	b.n	8010fc0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010f20:	2300      	movs	r3, #0
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	e02b      	b.n	8010f7e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010f26:	4a2c      	ldr	r2, [pc, #176]	; (8010fd8 <tcp_bind+0x11c>)
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	61bb      	str	r3, [r7, #24]
 8010f32:	e01e      	b.n	8010f72 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	8adb      	ldrh	r3, [r3, #22]
 8010f38:	88fa      	ldrh	r2, [r7, #6]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d116      	bne.n	8010f6c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010f3e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d010      	beq.n	8010f66 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00c      	beq.n	8010f66 <tcp_bind+0xaa>
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d009      	beq.n	8010f66 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d005      	beq.n	8010f66 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d102      	bne.n	8010f6c <tcp_bind+0xb0>
              return ERR_USE;
 8010f66:	f06f 0307 	mvn.w	r3, #7
 8010f6a:	e029      	b.n	8010fc0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	61bb      	str	r3, [r7, #24]
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1dd      	bne.n	8010f34 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	61fb      	str	r3, [r7, #28]
 8010f7e:	69fa      	ldr	r2, [r7, #28]
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	dbcf      	blt.n	8010f26 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d00c      	beq.n	8010fa6 <tcp_bind+0xea>
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d008      	beq.n	8010fa6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d002      	beq.n	8010fa0 <tcp_bind+0xe4>
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	e000      	b.n	8010fa2 <tcp_bind+0xe6>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	68fa      	ldr	r2, [r7, #12]
 8010fa4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	88fa      	ldrh	r2, [r7, #6]
 8010faa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010fac:	4b0b      	ldr	r3, [pc, #44]	; (8010fdc <tcp_bind+0x120>)
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	60da      	str	r2, [r3, #12]
 8010fb4:	4a09      	ldr	r2, [pc, #36]	; (8010fdc <tcp_bind+0x120>)
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	6013      	str	r3, [r2, #0]
 8010fba:	f004 feb9 	bl	8015d30 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3720      	adds	r7, #32
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	0801c6dc 	.word	0x0801c6dc
 8010fcc:	0801b0d0 	.word	0x0801b0d0
 8010fd0:	0801b1c0 	.word	0x0801b1c0
 8010fd4:	0801b130 	.word	0x0801b130
 8010fd8:	0801c6b4 	.word	0x0801c6b4
 8010fdc:	200079bc 	.word	0x200079bc

08010fe0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	4613      	mov	r3, r2
 8010fec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8010fee:	68b8      	ldr	r0, [r7, #8]
 8010ff0:	f7ff ff58 	bl	8010ea4 <tcp_abort>

  return ERR_ABRT;
 8010ff4:	f06f 030c 	mvn.w	r3, #12
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b088      	sub	sp, #32
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	460b      	mov	r3, r1
 801100a:	607a      	str	r2, [r7, #4]
 801100c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	7d1b      	ldrb	r3, [r3, #20]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d009      	beq.n	801102e <tcp_listen_with_backlog_and_err+0x2e>
 801101a:	4b3f      	ldr	r3, [pc, #252]	; (8011118 <tcp_listen_with_backlog_and_err+0x118>)
 801101c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011020:	493e      	ldr	r1, [pc, #248]	; (801111c <tcp_listen_with_backlog_and_err+0x11c>)
 8011022:	483f      	ldr	r0, [pc, #252]	; (8011120 <tcp_listen_with_backlog_and_err+0x120>)
 8011024:	f007 fed4 	bl	8018dd0 <iprintf>
 8011028:	23f1      	movs	r3, #241	; 0xf1
 801102a:	76fb      	strb	r3, [r7, #27]
 801102c:	e069      	b.n	8011102 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	7d1b      	ldrb	r3, [r3, #20]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d104      	bne.n	8011040 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801103a:	23f7      	movs	r3, #247	; 0xf7
 801103c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801103e:	e060      	b.n	8011102 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011040:	2002      	movs	r0, #2
 8011042:	f7fe fbdb 	bl	800f7fc <memp_malloc>
 8011046:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d102      	bne.n	8011054 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801104e:	23ff      	movs	r3, #255	; 0xff
 8011050:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011052:	e056      	b.n	8011102 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	691a      	ldr	r2, [r3, #16]
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	8ada      	ldrh	r2, [r3, #22]
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	2201      	movs	r2, #1
 8011068:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	7d5a      	ldrb	r2, [r3, #21]
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	7a1a      	ldrb	r2, [r3, #8]
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	7a9a      	ldrb	r2, [r3, #10]
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	7a5a      	ldrb	r2, [r3, #9]
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	8adb      	ldrh	r3, [r3, #22]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d021      	beq.n	80110de <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801109a:	4b22      	ldr	r3, [pc, #136]	; (8011124 <tcp_listen_with_backlog_and_err+0x124>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d105      	bne.n	80110b0 <tcp_listen_with_backlog_and_err+0xb0>
 80110a4:	4b1f      	ldr	r3, [pc, #124]	; (8011124 <tcp_listen_with_backlog_and_err+0x124>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	4a1e      	ldr	r2, [pc, #120]	; (8011124 <tcp_listen_with_backlog_and_err+0x124>)
 80110ac:	6013      	str	r3, [r2, #0]
 80110ae:	e013      	b.n	80110d8 <tcp_listen_with_backlog_and_err+0xd8>
 80110b0:	4b1c      	ldr	r3, [pc, #112]	; (8011124 <tcp_listen_with_backlog_and_err+0x124>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	617b      	str	r3, [r7, #20]
 80110b6:	e00c      	b.n	80110d2 <tcp_listen_with_backlog_and_err+0xd2>
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d104      	bne.n	80110cc <tcp_listen_with_backlog_and_err+0xcc>
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	68da      	ldr	r2, [r3, #12]
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	60da      	str	r2, [r3, #12]
 80110ca:	e005      	b.n	80110d8 <tcp_listen_with_backlog_and_err+0xd8>
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	617b      	str	r3, [r7, #20]
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d1ef      	bne.n	80110b8 <tcp_listen_with_backlog_and_err+0xb8>
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2200      	movs	r2, #0
 80110dc:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80110de:	68f9      	ldr	r1, [r7, #12]
 80110e0:	2001      	movs	r0, #1
 80110e2:	f7fe fc01 	bl	800f8e8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	4a0f      	ldr	r2, [pc, #60]	; (8011128 <tcp_listen_with_backlog_and_err+0x128>)
 80110ea:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80110ec:	4b0f      	ldr	r3, [pc, #60]	; (801112c <tcp_listen_with_backlog_and_err+0x12c>)
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	60da      	str	r2, [r3, #12]
 80110f4:	4a0d      	ldr	r2, [pc, #52]	; (801112c <tcp_listen_with_backlog_and_err+0x12c>)
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	6013      	str	r3, [r2, #0]
 80110fa:	f004 fe19 	bl	8015d30 <tcp_timer_needed>
  res = ERR_OK;
 80110fe:	2300      	movs	r3, #0
 8011100:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d002      	beq.n	801110e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7efa      	ldrb	r2, [r7, #27]
 801110c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801110e:	69fb      	ldr	r3, [r7, #28]
}
 8011110:	4618      	mov	r0, r3
 8011112:	3720      	adds	r7, #32
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	0801b0d0 	.word	0x0801b0d0
 801111c:	0801b1e8 	.word	0x0801b1e8
 8011120:	0801b130 	.word	0x0801b130
 8011124:	200079bc 	.word	0x200079bc
 8011128:	08010fe1 	.word	0x08010fe1
 801112c:	200079b8 	.word	0x200079b8

08011130 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011140:	4413      	add	r3, r2
 8011142:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801114c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011150:	bf28      	it	cs
 8011152:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011156:	b292      	uxth	r2, r2
 8011158:	4413      	add	r3, r2
 801115a:	68fa      	ldr	r2, [r7, #12]
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	db08      	blt.n	8011174 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116e:	68fa      	ldr	r2, [r7, #12]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	e020      	b.n	80111b6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	dd03      	ble.n	801118a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011188:	e014      	b.n	80111b4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801119c:	d306      	bcc.n	80111ac <tcp_update_rcv_ann_wnd+0x7c>
 801119e:	4b08      	ldr	r3, [pc, #32]	; (80111c0 <tcp_update_rcv_ann_wnd+0x90>)
 80111a0:	f44f 7242 	mov.w	r2, #776	; 0x308
 80111a4:	4907      	ldr	r1, [pc, #28]	; (80111c4 <tcp_update_rcv_ann_wnd+0x94>)
 80111a6:	4808      	ldr	r0, [pc, #32]	; (80111c8 <tcp_update_rcv_ann_wnd+0x98>)
 80111a8:	f007 fe12 	bl	8018dd0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80111b4:	2300      	movs	r3, #0
  }
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	0801b0d0 	.word	0x0801b0d0
 80111c4:	0801b20c 	.word	0x0801b20c
 80111c8:	0801b130 	.word	0x0801b130

080111cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	460b      	mov	r3, r1
 80111d6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7d1b      	ldrb	r3, [r3, #20]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d106      	bne.n	80111ee <tcp_recved+0x22>
 80111e0:	4b23      	ldr	r3, [pc, #140]	; (8011270 <tcp_recved+0xa4>)
 80111e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80111e6:	4923      	ldr	r1, [pc, #140]	; (8011274 <tcp_recved+0xa8>)
 80111e8:	4823      	ldr	r0, [pc, #140]	; (8011278 <tcp_recved+0xac>)
 80111ea:	f007 fdf1 	bl	8018dd0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111f2:	887b      	ldrh	r3, [r7, #2]
 80111f4:	4413      	add	r3, r2
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011200:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011204:	d904      	bls.n	8011210 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801120c:	851a      	strh	r2, [r3, #40]	; 0x28
 801120e:	e017      	b.n	8011240 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011214:	2b00      	cmp	r3, #0
 8011216:	d113      	bne.n	8011240 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	7d1b      	ldrb	r3, [r3, #20]
 801121c:	2b07      	cmp	r3, #7
 801121e:	d003      	beq.n	8011228 <tcp_recved+0x5c>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7d1b      	ldrb	r3, [r3, #20]
 8011224:	2b09      	cmp	r3, #9
 8011226:	d104      	bne.n	8011232 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801122e:	851a      	strh	r2, [r3, #40]	; 0x28
 8011230:	e006      	b.n	8011240 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011232:	4b0f      	ldr	r3, [pc, #60]	; (8011270 <tcp_recved+0xa4>)
 8011234:	f240 322d 	movw	r2, #813	; 0x32d
 8011238:	4910      	ldr	r1, [pc, #64]	; (801127c <tcp_recved+0xb0>)
 801123a:	480f      	ldr	r0, [pc, #60]	; (8011278 <tcp_recved+0xac>)
 801123c:	f007 fdc8 	bl	8018dd0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ff75 	bl	8011130 <tcp_update_rcv_ann_wnd>
 8011246:	4603      	mov	r3, r0
 8011248:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011250:	db09      	blt.n	8011266 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	7e9b      	ldrb	r3, [r3, #26]
 8011256:	f043 0302 	orr.w	r3, r3, #2
 801125a:	b2da      	uxtb	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f004 f889 	bl	8015378 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011266:	bf00      	nop
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	0801b0d0 	.word	0x0801b0d0
 8011274:	0801b228 	.word	0x0801b228
 8011278:	0801b130 	.word	0x0801b130
 801127c:	0801b250 	.word	0x0801b250

08011280 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801128a:	4b1d      	ldr	r3, [pc, #116]	; (8011300 <tcp_new_port+0x80>)
 801128c:	881b      	ldrh	r3, [r3, #0]
 801128e:	1c5a      	adds	r2, r3, #1
 8011290:	b291      	uxth	r1, r2
 8011292:	4a1b      	ldr	r2, [pc, #108]	; (8011300 <tcp_new_port+0x80>)
 8011294:	8011      	strh	r1, [r2, #0]
 8011296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801129a:	4293      	cmp	r3, r2
 801129c:	d103      	bne.n	80112a6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801129e:	4b18      	ldr	r3, [pc, #96]	; (8011300 <tcp_new_port+0x80>)
 80112a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80112a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80112a6:	2300      	movs	r3, #0
 80112a8:	71fb      	strb	r3, [r7, #7]
 80112aa:	e01e      	b.n	80112ea <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80112ac:	79fb      	ldrb	r3, [r7, #7]
 80112ae:	4a15      	ldr	r2, [pc, #84]	; (8011304 <tcp_new_port+0x84>)
 80112b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	603b      	str	r3, [r7, #0]
 80112b8:	e011      	b.n	80112de <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	8ada      	ldrh	r2, [r3, #22]
 80112be:	4b10      	ldr	r3, [pc, #64]	; (8011300 <tcp_new_port+0x80>)
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d108      	bne.n	80112d8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80112c6:	88bb      	ldrh	r3, [r7, #4]
 80112c8:	3301      	adds	r3, #1
 80112ca:	80bb      	strh	r3, [r7, #4]
 80112cc:	88bb      	ldrh	r3, [r7, #4]
 80112ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112d2:	d3da      	bcc.n	801128a <tcp_new_port+0xa>
          return 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	e00d      	b.n	80112f4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	603b      	str	r3, [r7, #0]
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1ea      	bne.n	80112ba <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80112e4:	79fb      	ldrb	r3, [r7, #7]
 80112e6:	3301      	adds	r3, #1
 80112e8:	71fb      	strb	r3, [r7, #7]
 80112ea:	79fb      	ldrb	r3, [r7, #7]
 80112ec:	2b03      	cmp	r3, #3
 80112ee:	d9dd      	bls.n	80112ac <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80112f0:	4b03      	ldr	r3, [pc, #12]	; (8011300 <tcp_new_port+0x80>)
 80112f2:	881b      	ldrh	r3, [r3, #0]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr
 8011300:	20000028 	.word	0x20000028
 8011304:	0801c6b4 	.word	0x0801c6b4

08011308 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011308:	b5b0      	push	{r4, r5, r7, lr}
 801130a:	b08c      	sub	sp, #48	; 0x30
 801130c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801130e:	2300      	movs	r3, #0
 8011310:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8011312:	4b96      	ldr	r3, [pc, #600]	; (801156c <tcp_slowtmr+0x264>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	3301      	adds	r3, #1
 8011318:	4a94      	ldr	r2, [pc, #592]	; (801156c <tcp_slowtmr+0x264>)
 801131a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801131c:	4b94      	ldr	r3, [pc, #592]	; (8011570 <tcp_slowtmr+0x268>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	3301      	adds	r3, #1
 8011322:	b2da      	uxtb	r2, r3
 8011324:	4b92      	ldr	r3, [pc, #584]	; (8011570 <tcp_slowtmr+0x268>)
 8011326:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011328:	2300      	movs	r3, #0
 801132a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801132c:	4b91      	ldr	r3, [pc, #580]	; (8011574 <tcp_slowtmr+0x26c>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011332:	e227      	b.n	8011784 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	7d1b      	ldrb	r3, [r3, #20]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d106      	bne.n	801134a <tcp_slowtmr+0x42>
 801133c:	4b8e      	ldr	r3, [pc, #568]	; (8011578 <tcp_slowtmr+0x270>)
 801133e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8011342:	498e      	ldr	r1, [pc, #568]	; (801157c <tcp_slowtmr+0x274>)
 8011344:	488e      	ldr	r0, [pc, #568]	; (8011580 <tcp_slowtmr+0x278>)
 8011346:	f007 fd43 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	7d1b      	ldrb	r3, [r3, #20]
 801134e:	2b01      	cmp	r3, #1
 8011350:	d106      	bne.n	8011360 <tcp_slowtmr+0x58>
 8011352:	4b89      	ldr	r3, [pc, #548]	; (8011578 <tcp_slowtmr+0x270>)
 8011354:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011358:	498a      	ldr	r1, [pc, #552]	; (8011584 <tcp_slowtmr+0x27c>)
 801135a:	4889      	ldr	r0, [pc, #548]	; (8011580 <tcp_slowtmr+0x278>)
 801135c:	f007 fd38 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011362:	7d1b      	ldrb	r3, [r3, #20]
 8011364:	2b0a      	cmp	r3, #10
 8011366:	d106      	bne.n	8011376 <tcp_slowtmr+0x6e>
 8011368:	4b83      	ldr	r3, [pc, #524]	; (8011578 <tcp_slowtmr+0x270>)
 801136a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801136e:	4986      	ldr	r1, [pc, #536]	; (8011588 <tcp_slowtmr+0x280>)
 8011370:	4883      	ldr	r0, [pc, #524]	; (8011580 <tcp_slowtmr+0x278>)
 8011372:	f007 fd2d 	bl	8018dd0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	7f5a      	ldrb	r2, [r3, #29]
 801137a:	4b7d      	ldr	r3, [pc, #500]	; (8011570 <tcp_slowtmr+0x268>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	429a      	cmp	r2, r3
 8011380:	d103      	bne.n	801138a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8011388:	e1fc      	b.n	8011784 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801138a:	4b79      	ldr	r3, [pc, #484]	; (8011570 <tcp_slowtmr+0x268>)
 801138c:	781a      	ldrb	r2, [r3, #0]
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8011396:	2300      	movs	r3, #0
 8011398:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	7d1b      	ldrb	r3, [r3, #20]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	d108      	bne.n	80113b4 <tcp_slowtmr+0xac>
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113a8:	2b05      	cmp	r3, #5
 80113aa:	d903      	bls.n	80113b4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80113ac:	7ffb      	ldrb	r3, [r7, #31]
 80113ae:	3301      	adds	r3, #1
 80113b0:	77fb      	strb	r3, [r7, #31]
 80113b2:	e0a2      	b.n	80114fa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113ba:	2b0b      	cmp	r3, #11
 80113bc:	d903      	bls.n	80113c6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80113be:	7ffb      	ldrb	r3, [r7, #31]
 80113c0:	3301      	adds	r3, #1
 80113c2:	77fb      	strb	r3, [r7, #31]
 80113c4:	e099      	b.n	80114fa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d032      	beq.n	8011436 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80113d6:	3b01      	subs	r3, #1
 80113d8:	4a6c      	ldr	r2, [pc, #432]	; (801158c <tcp_slowtmr+0x284>)
 80113da:	5cd3      	ldrb	r3, [r2, r3]
 80113dc:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80113e4:	7cfa      	ldrb	r2, [r7, #19]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d907      	bls.n	80113fa <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80113ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80113f0:	3301      	adds	r3, #1
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011400:	7cfa      	ldrb	r2, [r7, #19]
 8011402:	429a      	cmp	r2, r3
 8011404:	d879      	bhi.n	80114fa <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8011406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011408:	f004 fbd2 	bl	8015bb0 <tcp_zero_window_probe>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d173      	bne.n	80114fa <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8011412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011414:	2200      	movs	r2, #0
 8011416:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011420:	2b06      	cmp	r3, #6
 8011422:	d86a      	bhi.n	80114fa <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8011424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011426:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801142a:	3301      	adds	r3, #1
 801142c:	b2da      	uxtb	r2, r3
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8011434:	e061      	b.n	80114fa <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801143c:	2b00      	cmp	r3, #0
 801143e:	db08      	blt.n	8011452 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8011440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011442:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011446:	b29b      	uxth	r3, r3
 8011448:	3301      	adds	r3, #1
 801144a:	b29b      	uxth	r3, r3
 801144c:	b21a      	sxth	r2, r3
 801144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011450:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011456:	2b00      	cmp	r3, #0
 8011458:	d04f      	beq.n	80114fa <tcp_slowtmr+0x1f2>
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011466:	429a      	cmp	r2, r3
 8011468:	db47      	blt.n	80114fa <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	7d1b      	ldrb	r3, [r3, #20]
 801146e:	2b02      	cmp	r3, #2
 8011470:	d018      	beq.n	80114a4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011478:	2b0c      	cmp	r3, #12
 801147a:	bf28      	it	cs
 801147c:	230c      	movcs	r3, #12
 801147e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011486:	10db      	asrs	r3, r3, #3
 8011488:	b21b      	sxth	r3, r3
 801148a:	461a      	mov	r2, r3
 801148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011492:	4413      	add	r3, r2
 8011494:	7dfa      	ldrb	r2, [r7, #23]
 8011496:	493e      	ldr	r1, [pc, #248]	; (8011590 <tcp_slowtmr+0x288>)
 8011498:	5c8a      	ldrb	r2, [r1, r2]
 801149a:	4093      	lsls	r3, r2
 801149c:	b21a      	sxth	r2, r3
 801149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80114a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a6:	2200      	movs	r2, #0
 80114a8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80114b6:	4293      	cmp	r3, r2
 80114b8:	bf28      	it	cs
 80114ba:	4613      	movcs	r3, r2
 80114bc:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80114be:	8abb      	ldrh	r3, [r7, #20]
 80114c0:	085b      	lsrs	r3, r3, #1
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80114d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	429a      	cmp	r2, r3
 80114da:	d206      	bcs.n	80114ea <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114e0:	005b      	lsls	r3, r3, #1
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ec:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80114ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80114f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114f6:	f004 fa3f 	bl	8015978 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80114fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fc:	7d1b      	ldrb	r3, [r3, #20]
 80114fe:	2b06      	cmp	r3, #6
 8011500:	d10f      	bne.n	8011522 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	7e9b      	ldrb	r3, [r3, #26]
 8011506:	f003 0310 	and.w	r3, r3, #16
 801150a:	2b00      	cmp	r3, #0
 801150c:	d009      	beq.n	8011522 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801150e:	4b17      	ldr	r3, [pc, #92]	; (801156c <tcp_slowtmr+0x264>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	2b28      	cmp	r3, #40	; 0x28
 801151a:	d902      	bls.n	8011522 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801151c:	7ffb      	ldrb	r3, [r7, #31]
 801151e:	3301      	adds	r3, #1
 8011520:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	7a1b      	ldrb	r3, [r3, #8]
 8011526:	f003 0308 	and.w	r3, r3, #8
 801152a:	2b00      	cmp	r3, #0
 801152c:	d05d      	beq.n	80115ea <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011532:	2b04      	cmp	r3, #4
 8011534:	d003      	beq.n	801153e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8011536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011538:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801153a:	2b07      	cmp	r3, #7
 801153c:	d155      	bne.n	80115ea <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801153e:	4b0b      	ldr	r3, [pc, #44]	; (801156c <tcp_slowtmr+0x264>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011544:	6a1b      	ldr	r3, [r3, #32]
 8011546:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801154e:	4b11      	ldr	r3, [pc, #68]	; (8011594 <tcp_slowtmr+0x28c>)
 8011550:	440b      	add	r3, r1
 8011552:	4911      	ldr	r1, [pc, #68]	; (8011598 <tcp_slowtmr+0x290>)
 8011554:	fba1 1303 	umull	r1, r3, r1, r3
 8011558:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801155a:	429a      	cmp	r2, r3
 801155c:	d91e      	bls.n	801159c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801155e:	7ffb      	ldrb	r3, [r7, #31]
 8011560:	3301      	adds	r3, #1
 8011562:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8011564:	7fbb      	ldrb	r3, [r7, #30]
 8011566:	3301      	adds	r3, #1
 8011568:	77bb      	strb	r3, [r7, #30]
 801156a:	e03e      	b.n	80115ea <tcp_slowtmr+0x2e2>
 801156c:	200079b4 	.word	0x200079b4
 8011570:	200040b2 	.word	0x200040b2
 8011574:	200079b0 	.word	0x200079b0
 8011578:	0801b0d0 	.word	0x0801b0d0
 801157c:	0801b2a4 	.word	0x0801b2a4
 8011580:	0801b130 	.word	0x0801b130
 8011584:	0801b2d0 	.word	0x0801b2d0
 8011588:	0801b2fc 	.word	0x0801b2fc
 801158c:	0801c6ac 	.word	0x0801c6ac
 8011590:	0801c69c 	.word	0x0801c69c
 8011594:	000a4cb8 	.word	0x000a4cb8
 8011598:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801159c:	4b97      	ldr	r3, [pc, #604]	; (80117fc <tcp_slowtmr+0x4f4>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	6a1b      	ldr	r3, [r3, #32]
 80115a4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80115a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ae:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80115b2:	4618      	mov	r0, r3
 80115b4:	4b92      	ldr	r3, [pc, #584]	; (8011800 <tcp_slowtmr+0x4f8>)
 80115b6:	fb03 f300 	mul.w	r3, r3, r0
 80115ba:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80115bc:	4991      	ldr	r1, [pc, #580]	; (8011804 <tcp_slowtmr+0x4fc>)
 80115be:	fba1 1303 	umull	r1, r3, r1, r3
 80115c2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d910      	bls.n	80115ea <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80115c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115ca:	f004 fab4 	bl	8015b36 <tcp_keepalive>
 80115ce:	4603      	mov	r3, r0
 80115d0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80115d2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d107      	bne.n	80115ea <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80115e0:	3301      	adds	r3, #1
 80115e2:	b2da      	uxtb	r2, r3
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80115ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d016      	beq.n	8011620 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80115f2:	4b82      	ldr	r3, [pc, #520]	; (80117fc <tcp_slowtmr+0x4f4>)
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	1ad2      	subs	r2, r2, r3
 80115fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011602:	4619      	mov	r1, r3
 8011604:	460b      	mov	r3, r1
 8011606:	005b      	lsls	r3, r3, #1
 8011608:	440b      	add	r3, r1
 801160a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801160c:	429a      	cmp	r2, r3
 801160e:	d307      	bcc.n	8011620 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8011610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011614:	4618      	mov	r0, r3
 8011616:	f000 fa04 	bl	8011a22 <tcp_segs_free>
      pcb->ooseq = NULL;
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	2200      	movs	r2, #0
 801161e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011622:	7d1b      	ldrb	r3, [r3, #20]
 8011624:	2b03      	cmp	r3, #3
 8011626:	d109      	bne.n	801163c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011628:	4b74      	ldr	r3, [pc, #464]	; (80117fc <tcp_slowtmr+0x4f4>)
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162e:	6a1b      	ldr	r3, [r3, #32]
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	2b28      	cmp	r3, #40	; 0x28
 8011634:	d902      	bls.n	801163c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011636:	7ffb      	ldrb	r3, [r7, #31]
 8011638:	3301      	adds	r3, #1
 801163a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163e:	7d1b      	ldrb	r3, [r3, #20]
 8011640:	2b09      	cmp	r3, #9
 8011642:	d109      	bne.n	8011658 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011644:	4b6d      	ldr	r3, [pc, #436]	; (80117fc <tcp_slowtmr+0x4f4>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164a:	6a1b      	ldr	r3, [r3, #32]
 801164c:	1ad3      	subs	r3, r2, r3
 801164e:	2bf0      	cmp	r3, #240	; 0xf0
 8011650:	d902      	bls.n	8011658 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011652:	7ffb      	ldrb	r3, [r7, #31]
 8011654:	3301      	adds	r3, #1
 8011656:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011658:	7ffb      	ldrb	r3, [r7, #31]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d05d      	beq.n	801171a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011664:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011668:	f000 fc44 	bl	8011ef4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801166c:	6a3b      	ldr	r3, [r7, #32]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d010      	beq.n	8011694 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011672:	4b65      	ldr	r3, [pc, #404]	; (8011808 <tcp_slowtmr+0x500>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011678:	429a      	cmp	r2, r3
 801167a:	d106      	bne.n	801168a <tcp_slowtmr+0x382>
 801167c:	4b63      	ldr	r3, [pc, #396]	; (801180c <tcp_slowtmr+0x504>)
 801167e:	f240 4289 	movw	r2, #1161	; 0x489
 8011682:	4963      	ldr	r1, [pc, #396]	; (8011810 <tcp_slowtmr+0x508>)
 8011684:	4863      	ldr	r0, [pc, #396]	; (8011814 <tcp_slowtmr+0x50c>)
 8011686:	f007 fba3 	bl	8018dd0 <iprintf>
        prev->next = pcb->next;
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	68da      	ldr	r2, [r3, #12]
 801168e:	6a3b      	ldr	r3, [r7, #32]
 8011690:	60da      	str	r2, [r3, #12]
 8011692:	e00f      	b.n	80116b4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011694:	4b5c      	ldr	r3, [pc, #368]	; (8011808 <tcp_slowtmr+0x500>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801169a:	429a      	cmp	r2, r3
 801169c:	d006      	beq.n	80116ac <tcp_slowtmr+0x3a4>
 801169e:	4b5b      	ldr	r3, [pc, #364]	; (801180c <tcp_slowtmr+0x504>)
 80116a0:	f240 428d 	movw	r2, #1165	; 0x48d
 80116a4:	495c      	ldr	r1, [pc, #368]	; (8011818 <tcp_slowtmr+0x510>)
 80116a6:	485b      	ldr	r0, [pc, #364]	; (8011814 <tcp_slowtmr+0x50c>)
 80116a8:	f007 fb92 	bl	8018dd0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80116ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	4a55      	ldr	r2, [pc, #340]	; (8011808 <tcp_slowtmr+0x500>)
 80116b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80116b4:	7fbb      	ldrb	r3, [r7, #30]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d010      	beq.n	80116dc <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80116ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80116be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80116c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80116c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c6:	1d1d      	adds	r5, r3, #4
 80116c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ca:	8adb      	ldrh	r3, [r3, #22]
 80116cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116ce:	8b12      	ldrh	r2, [r2, #24]
 80116d0:	9201      	str	r2, [sp, #4]
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	462b      	mov	r3, r5
 80116d6:	4622      	mov	r2, r4
 80116d8:	f004 f8d8 	bl	801588c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	7d1b      	ldrb	r3, [r3, #20]
 80116e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80116ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80116f2:	6839      	ldr	r1, [r7, #0]
 80116f4:	2001      	movs	r0, #1
 80116f6:	f7fe f8f7 	bl	800f8e8 <memp_free>

      tcp_active_pcbs_changed = 0;
 80116fa:	4b48      	ldr	r3, [pc, #288]	; (801181c <tcp_slowtmr+0x514>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d004      	beq.n	8011710 <tcp_slowtmr+0x408>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f06f 010c 	mvn.w	r1, #12
 801170c:	68b8      	ldr	r0, [r7, #8]
 801170e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011710:	4b42      	ldr	r3, [pc, #264]	; (801181c <tcp_slowtmr+0x514>)
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d035      	beq.n	8011784 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8011718:	e606      	b.n	8011328 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011724:	6a3b      	ldr	r3, [r7, #32]
 8011726:	7edb      	ldrb	r3, [r3, #27]
 8011728:	3301      	adds	r3, #1
 801172a:	b2da      	uxtb	r2, r3
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011730:	6a3b      	ldr	r3, [r7, #32]
 8011732:	7eda      	ldrb	r2, [r3, #27]
 8011734:	6a3b      	ldr	r3, [r7, #32]
 8011736:	7f1b      	ldrb	r3, [r3, #28]
 8011738:	429a      	cmp	r2, r3
 801173a:	d323      	bcc.n	8011784 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801173c:	6a3b      	ldr	r3, [r7, #32]
 801173e:	2200      	movs	r2, #0
 8011740:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011742:	4b36      	ldr	r3, [pc, #216]	; (801181c <tcp_slowtmr+0x514>)
 8011744:	2200      	movs	r2, #0
 8011746:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011748:	6a3b      	ldr	r3, [r7, #32]
 801174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00a      	beq.n	8011768 <tcp_slowtmr+0x460>
 8011752:	6a3b      	ldr	r3, [r7, #32]
 8011754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011758:	6a3a      	ldr	r2, [r7, #32]
 801175a:	6912      	ldr	r2, [r2, #16]
 801175c:	6a39      	ldr	r1, [r7, #32]
 801175e:	4610      	mov	r0, r2
 8011760:	4798      	blx	r3
 8011762:	4603      	mov	r3, r0
 8011764:	777b      	strb	r3, [r7, #29]
 8011766:	e001      	b.n	801176c <tcp_slowtmr+0x464>
 8011768:	2300      	movs	r3, #0
 801176a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801176c:	4b2b      	ldr	r3, [pc, #172]	; (801181c <tcp_slowtmr+0x514>)
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d000      	beq.n	8011776 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8011774:	e5d8      	b.n	8011328 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011776:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d102      	bne.n	8011784 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801177e:	6a38      	ldr	r0, [r7, #32]
 8011780:	f003 fdfa 	bl	8015378 <tcp_output>
  while (pcb != NULL) {
 8011784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011786:	2b00      	cmp	r3, #0
 8011788:	f47f add4 	bne.w	8011334 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801178c:	2300      	movs	r3, #0
 801178e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011790:	4b23      	ldr	r3, [pc, #140]	; (8011820 <tcp_slowtmr+0x518>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011796:	e068      	b.n	801186a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	7d1b      	ldrb	r3, [r3, #20]
 801179c:	2b0a      	cmp	r3, #10
 801179e:	d006      	beq.n	80117ae <tcp_slowtmr+0x4a6>
 80117a0:	4b1a      	ldr	r3, [pc, #104]	; (801180c <tcp_slowtmr+0x504>)
 80117a2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80117a6:	491f      	ldr	r1, [pc, #124]	; (8011824 <tcp_slowtmr+0x51c>)
 80117a8:	481a      	ldr	r0, [pc, #104]	; (8011814 <tcp_slowtmr+0x50c>)
 80117aa:	f007 fb11 	bl	8018dd0 <iprintf>
    pcb_remove = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80117b2:	4b12      	ldr	r3, [pc, #72]	; (80117fc <tcp_slowtmr+0x4f4>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b8:	6a1b      	ldr	r3, [r3, #32]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	2bf0      	cmp	r3, #240	; 0xf0
 80117be:	d902      	bls.n	80117c6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80117c0:	7ffb      	ldrb	r3, [r7, #31]
 80117c2:	3301      	adds	r3, #1
 80117c4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80117c6:	7ffb      	ldrb	r3, [r7, #31]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d049      	beq.n	8011860 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80117cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ce:	f000 fb91 	bl	8011ef4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d029      	beq.n	801182c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80117d8:	4b11      	ldr	r3, [pc, #68]	; (8011820 <tcp_slowtmr+0x518>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117de:	429a      	cmp	r2, r3
 80117e0:	d106      	bne.n	80117f0 <tcp_slowtmr+0x4e8>
 80117e2:	4b0a      	ldr	r3, [pc, #40]	; (801180c <tcp_slowtmr+0x504>)
 80117e4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80117e8:	490f      	ldr	r1, [pc, #60]	; (8011828 <tcp_slowtmr+0x520>)
 80117ea:	480a      	ldr	r0, [pc, #40]	; (8011814 <tcp_slowtmr+0x50c>)
 80117ec:	f007 faf0 	bl	8018dd0 <iprintf>
        prev->next = pcb->next;
 80117f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f2:	68da      	ldr	r2, [r3, #12]
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	60da      	str	r2, [r3, #12]
 80117f8:	e028      	b.n	801184c <tcp_slowtmr+0x544>
 80117fa:	bf00      	nop
 80117fc:	200079b4 	.word	0x200079b4
 8011800:	000124f8 	.word	0x000124f8
 8011804:	10624dd3 	.word	0x10624dd3
 8011808:	200079b0 	.word	0x200079b0
 801180c:	0801b0d0 	.word	0x0801b0d0
 8011810:	0801b32c 	.word	0x0801b32c
 8011814:	0801b130 	.word	0x0801b130
 8011818:	0801b358 	.word	0x0801b358
 801181c:	200079ac 	.word	0x200079ac
 8011820:	200079c0 	.word	0x200079c0
 8011824:	0801b384 	.word	0x0801b384
 8011828:	0801b3b4 	.word	0x0801b3b4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801182c:	4b12      	ldr	r3, [pc, #72]	; (8011878 <tcp_slowtmr+0x570>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011832:	429a      	cmp	r2, r3
 8011834:	d006      	beq.n	8011844 <tcp_slowtmr+0x53c>
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <tcp_slowtmr+0x574>)
 8011838:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801183c:	4910      	ldr	r1, [pc, #64]	; (8011880 <tcp_slowtmr+0x578>)
 801183e:	4811      	ldr	r0, [pc, #68]	; (8011884 <tcp_slowtmr+0x57c>)
 8011840:	f007 fac6 	bl	8018dd0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	4a0b      	ldr	r2, [pc, #44]	; (8011878 <tcp_slowtmr+0x570>)
 801184a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011856:	69b9      	ldr	r1, [r7, #24]
 8011858:	2001      	movs	r0, #1
 801185a:	f7fe f845 	bl	800f8e8 <memp_free>
 801185e:	e004      	b.n	801186a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	2b00      	cmp	r3, #0
 801186e:	d193      	bne.n	8011798 <tcp_slowtmr+0x490>
    }
  }
}
 8011870:	bf00      	nop
 8011872:	3728      	adds	r7, #40	; 0x28
 8011874:	46bd      	mov	sp, r7
 8011876:	bdb0      	pop	{r4, r5, r7, pc}
 8011878:	200079c0 	.word	0x200079c0
 801187c:	0801b0d0 	.word	0x0801b0d0
 8011880:	0801b3dc 	.word	0x0801b3dc
 8011884:	0801b130 	.word	0x0801b130

08011888 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801188e:	4b2d      	ldr	r3, [pc, #180]	; (8011944 <tcp_fasttmr+0xbc>)
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	3301      	adds	r3, #1
 8011894:	b2da      	uxtb	r2, r3
 8011896:	4b2b      	ldr	r3, [pc, #172]	; (8011944 <tcp_fasttmr+0xbc>)
 8011898:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801189a:	4b2b      	ldr	r3, [pc, #172]	; (8011948 <tcp_fasttmr+0xc0>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80118a0:	e048      	b.n	8011934 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	7f5a      	ldrb	r2, [r3, #29]
 80118a6:	4b27      	ldr	r3, [pc, #156]	; (8011944 <tcp_fasttmr+0xbc>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d03f      	beq.n	801192e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80118ae:	4b25      	ldr	r3, [pc, #148]	; (8011944 <tcp_fasttmr+0xbc>)
 80118b0:	781a      	ldrb	r2, [r3, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	7e9b      	ldrb	r3, [r3, #26]
 80118ba:	f003 0301 	and.w	r3, r3, #1
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d010      	beq.n	80118e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	7e9b      	ldrb	r3, [r3, #26]
 80118c6:	f043 0302 	orr.w	r3, r3, #2
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f003 fd51 	bl	8015378 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	7e9b      	ldrb	r3, [r3, #26]
 80118da:	f023 0303 	bic.w	r3, r3, #3
 80118de:	b2da      	uxtb	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7e9b      	ldrb	r3, [r3, #26]
 80118e8:	f003 0308 	and.w	r3, r3, #8
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d009      	beq.n	8011904 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	7e9b      	ldrb	r3, [r3, #26]
 80118f4:	f023 0308 	bic.w	r3, r3, #8
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7ff f958 	bl	8010bb4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011912:	4b0e      	ldr	r3, [pc, #56]	; (801194c <tcp_fasttmr+0xc4>)
 8011914:	2200      	movs	r2, #0
 8011916:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 f819 	bl	8011950 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801191e:	4b0b      	ldr	r3, [pc, #44]	; (801194c <tcp_fasttmr+0xc4>)
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d000      	beq.n	8011928 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011926:	e7b8      	b.n	801189a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	607b      	str	r3, [r7, #4]
 801192c:	e002      	b.n	8011934 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d1b3      	bne.n	80118a2 <tcp_fasttmr+0x1a>
    }
  }
}
 801193a:	bf00      	nop
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	200040b2 	.word	0x200040b2
 8011948:	200079b0 	.word	0x200079b0
 801194c:	200079ac 	.word	0x200079ac

08011950 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011950:	b590      	push	{r4, r7, lr}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801195c:	7b5b      	ldrb	r3, [r3, #13]
 801195e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011964:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011972:	2b00      	cmp	r3, #0
 8011974:	d00b      	beq.n	801198e <tcp_process_refused_data+0x3e>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6918      	ldr	r0, [r3, #16]
 8011980:	2300      	movs	r3, #0
 8011982:	68ba      	ldr	r2, [r7, #8]
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	47a0      	blx	r4
 8011988:	4603      	mov	r3, r0
 801198a:	73fb      	strb	r3, [r7, #15]
 801198c:	e007      	b.n	801199e <tcp_process_refused_data+0x4e>
 801198e:	2300      	movs	r3, #0
 8011990:	68ba      	ldr	r2, [r7, #8]
 8011992:	6879      	ldr	r1, [r7, #4]
 8011994:	2000      	movs	r0, #0
 8011996:	f000 f88c 	bl	8011ab2 <tcp_recv_null>
 801199a:	4603      	mov	r3, r0
 801199c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d12a      	bne.n	80119fc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80119a6:	7bbb      	ldrb	r3, [r7, #14]
 80119a8:	f003 0320 	and.w	r3, r3, #32
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d033      	beq.n	8011a18 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80119b8:	d005      	beq.n	80119c6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119be:	3301      	adds	r3, #1
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00b      	beq.n	80119e8 <tcp_process_refused_data+0x98>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6918      	ldr	r0, [r3, #16]
 80119da:	2300      	movs	r3, #0
 80119dc:	2200      	movs	r2, #0
 80119de:	6879      	ldr	r1, [r7, #4]
 80119e0:	47a0      	blx	r4
 80119e2:	4603      	mov	r3, r0
 80119e4:	73fb      	strb	r3, [r7, #15]
 80119e6:	e001      	b.n	80119ec <tcp_process_refused_data+0x9c>
 80119e8:	2300      	movs	r3, #0
 80119ea:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80119ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119f0:	f113 0f0d 	cmn.w	r3, #13
 80119f4:	d110      	bne.n	8011a18 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80119f6:	f06f 030c 	mvn.w	r3, #12
 80119fa:	e00e      	b.n	8011a1a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80119fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a00:	f113 0f0d 	cmn.w	r3, #13
 8011a04:	d102      	bne.n	8011a0c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011a06:	f06f 030c 	mvn.w	r3, #12
 8011a0a:	e006      	b.n	8011a1a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	68ba      	ldr	r2, [r7, #8]
 8011a10:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8011a12:	f06f 0304 	mvn.w	r3, #4
 8011a16:	e000      	b.n	8011a1a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3714      	adds	r7, #20
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd90      	pop	{r4, r7, pc}

08011a22 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011a2a:	e007      	b.n	8011a3c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 f809 	bl	8011a4a <tcp_seg_free>
    seg = next;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1f4      	bne.n	8011a2c <tcp_segs_free+0xa>
  }
}
 8011a42:	bf00      	nop
 8011a44:	3710      	adds	r7, #16
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}

08011a4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	b082      	sub	sp, #8
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00c      	beq.n	8011a72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d004      	beq.n	8011a6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7fe fcd7 	bl	8010418 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011a6a:	6879      	ldr	r1, [r7, #4]
 8011a6c:	2003      	movs	r0, #3
 8011a6e:	f7fd ff3b 	bl	800f8e8 <memp_free>
  }
}
 8011a72:	bf00      	nop
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b084      	sub	sp, #16
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011a82:	2003      	movs	r0, #3
 8011a84:	f7fd feba 	bl	800f7fc <memp_malloc>
 8011a88:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <tcp_seg_copy+0x1a>
    return NULL;
 8011a90:	2300      	movs	r3, #0
 8011a92:	e00a      	b.n	8011aaa <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011a94:	2210      	movs	r2, #16
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f007 f986 	bl	8018daa <memcpy>
  pbuf_ref(cseg->p);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fe fd6a 	bl	801057c <pbuf_ref>
  return cseg;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b084      	sub	sp, #16
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	60f8      	str	r0, [r7, #12]
 8011aba:	60b9      	str	r1, [r7, #8]
 8011abc:	607a      	str	r2, [r7, #4]
 8011abe:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d009      	beq.n	8011ada <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	891b      	ldrh	r3, [r3, #8]
 8011aca:	4619      	mov	r1, r3
 8011acc:	68b8      	ldr	r0, [r7, #8]
 8011ace:	f7ff fb7d 	bl	80111cc <tcp_recved>
    pbuf_free(p);
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f7fe fca0 	bl	8010418 <pbuf_free>
 8011ad8:	e008      	b.n	8011aec <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8011ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d104      	bne.n	8011aec <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8011ae2:	68b8      	ldr	r0, [r7, #8]
 8011ae4:	f7ff f8cc 	bl	8010c80 <tcp_close>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	e000      	b.n	8011aee <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
	...

08011af8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b086      	sub	sp, #24
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	4603      	mov	r3, r0
 8011b00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	db01      	blt.n	8011b0e <tcp_kill_prio+0x16>
 8011b0a:	79fb      	ldrb	r3, [r7, #7]
 8011b0c:	e000      	b.n	8011b10 <tcp_kill_prio+0x18>
 8011b0e:	237f      	movs	r3, #127	; 0x7f
 8011b10:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011b16:	2300      	movs	r3, #0
 8011b18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b1a:	4b16      	ldr	r3, [pc, #88]	; (8011b74 <tcp_kill_prio+0x7c>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	617b      	str	r3, [r7, #20]
 8011b20:	e01a      	b.n	8011b58 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	7d5b      	ldrb	r3, [r3, #21]
 8011b26:	7afa      	ldrb	r2, [r7, #11]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d312      	bcc.n	8011b52 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b2c:	4b12      	ldr	r3, [pc, #72]	; (8011b78 <tcp_kill_prio+0x80>)
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	6a1b      	ldr	r3, [r3, #32]
 8011b34:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8011b36:	68fa      	ldr	r2, [r7, #12]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d80a      	bhi.n	8011b52 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	; (8011b78 <tcp_kill_prio+0x80>)
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	6a1b      	ldr	r3, [r3, #32]
 8011b44:	1ad3      	subs	r3, r2, r3
 8011b46:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	7d5b      	ldrb	r3, [r3, #21]
 8011b50:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	617b      	str	r3, [r7, #20]
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d1e1      	bne.n	8011b22 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d002      	beq.n	8011b6a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b64:	6938      	ldr	r0, [r7, #16]
 8011b66:	f7ff f99d 	bl	8010ea4 <tcp_abort>
  }
}
 8011b6a:	bf00      	nop
 8011b6c:	3718      	adds	r7, #24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	200079b0 	.word	0x200079b0
 8011b78:	200079b4 	.word	0x200079b4

08011b7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b086      	sub	sp, #24
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	4603      	mov	r3, r0
 8011b84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011b86:	79fb      	ldrb	r3, [r7, #7]
 8011b88:	2b08      	cmp	r3, #8
 8011b8a:	d009      	beq.n	8011ba0 <tcp_kill_state+0x24>
 8011b8c:	79fb      	ldrb	r3, [r7, #7]
 8011b8e:	2b09      	cmp	r3, #9
 8011b90:	d006      	beq.n	8011ba0 <tcp_kill_state+0x24>
 8011b92:	4b1a      	ldr	r3, [pc, #104]	; (8011bfc <tcp_kill_state+0x80>)
 8011b94:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b98:	4919      	ldr	r1, [pc, #100]	; (8011c00 <tcp_kill_state+0x84>)
 8011b9a:	481a      	ldr	r0, [pc, #104]	; (8011c04 <tcp_kill_state+0x88>)
 8011b9c:	f007 f918 	bl	8018dd0 <iprintf>

  inactivity = 0;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ba8:	4b17      	ldr	r3, [pc, #92]	; (8011c08 <tcp_kill_state+0x8c>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	617b      	str	r3, [r7, #20]
 8011bae:	e017      	b.n	8011be0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	79fa      	ldrb	r2, [r7, #7]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d10f      	bne.n	8011bda <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011bba:	4b14      	ldr	r3, [pc, #80]	; (8011c0c <tcp_kill_state+0x90>)
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d807      	bhi.n	8011bda <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011bca:	4b10      	ldr	r3, [pc, #64]	; (8011c0c <tcp_kill_state+0x90>)
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	6a1b      	ldr	r3, [r3, #32]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	617b      	str	r3, [r7, #20]
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1e4      	bne.n	8011bb0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d003      	beq.n	8011bf4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011bec:	2100      	movs	r1, #0
 8011bee:	6938      	ldr	r0, [r7, #16]
 8011bf0:	f7ff f8a6 	bl	8010d40 <tcp_abandon>
  }
}
 8011bf4:	bf00      	nop
 8011bf6:	3718      	adds	r7, #24
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	0801b0d0 	.word	0x0801b0d0
 8011c00:	0801b404 	.word	0x0801b404
 8011c04:	0801b130 	.word	0x0801b130
 8011c08:	200079b0 	.word	0x200079b0
 8011c0c:	200079b4 	.word	0x200079b4

08011c10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c1e:	4b12      	ldr	r3, [pc, #72]	; (8011c68 <tcp_kill_timewait+0x58>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]
 8011c24:	e012      	b.n	8011c4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011c26:	4b11      	ldr	r3, [pc, #68]	; (8011c6c <tcp_kill_timewait+0x5c>)
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d807      	bhi.n	8011c46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011c36:	4b0d      	ldr	r3, [pc, #52]	; (8011c6c <tcp_kill_timewait+0x5c>)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6a1b      	ldr	r3, [r3, #32]
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1e9      	bne.n	8011c26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c58:	68b8      	ldr	r0, [r7, #8]
 8011c5a:	f7ff f923 	bl	8010ea4 <tcp_abort>
  }
}
 8011c5e:	bf00      	nop
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	200079c0 	.word	0x200079c0
 8011c6c:	200079b4 	.word	0x200079b4

08011c70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	4603      	mov	r3, r0
 8011c78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c7a:	2001      	movs	r0, #1
 8011c7c:	f7fd fdbe 	bl	800f7fc <memp_malloc>
 8011c80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d124      	bne.n	8011cd2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011c88:	f7ff ffc2 	bl	8011c10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c8c:	2001      	movs	r0, #1
 8011c8e:	f7fd fdb5 	bl	800f7fc <memp_malloc>
 8011c92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d11b      	bne.n	8011cd2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011c9a:	2009      	movs	r0, #9
 8011c9c:	f7ff ff6e 	bl	8011b7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	f7fd fdab 	bl	800f7fc <memp_malloc>
 8011ca6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d111      	bne.n	8011cd2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011cae:	2008      	movs	r0, #8
 8011cb0:	f7ff ff64 	bl	8011b7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cb4:	2001      	movs	r0, #1
 8011cb6:	f7fd fda1 	bl	800f7fc <memp_malloc>
 8011cba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d107      	bne.n	8011cd2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011cc2:	79fb      	ldrb	r3, [r7, #7]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff ff17 	bl	8011af8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cca:	2001      	movs	r0, #1
 8011ccc:	f7fd fd96 	bl	800f7fc <memp_malloc>
 8011cd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d03f      	beq.n	8011d58 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011cd8:	2298      	movs	r2, #152	; 0x98
 8011cda:	2100      	movs	r1, #0
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f007 f86f 	bl	8018dc0 <memset>
    pcb->prio = prio;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	79fa      	ldrb	r2, [r7, #7]
 8011ce6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011cee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	22ff      	movs	r2, #255	; 0xff
 8011d06:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011d0e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2206      	movs	r2, #6
 8011d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2206      	movs	r2, #6
 8011d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d24:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011d2e:	4b0d      	ldr	r3, [pc, #52]	; (8011d64 <tcp_alloc+0xf4>)
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011d36:	4b0c      	ldr	r3, [pc, #48]	; (8011d68 <tcp_alloc+0xf8>)
 8011d38:	781a      	ldrb	r2, [r3, #0]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011d44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	4a08      	ldr	r2, [pc, #32]	; (8011d6c <tcp_alloc+0xfc>)
 8011d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	4a07      	ldr	r2, [pc, #28]	; (8011d70 <tcp_alloc+0x100>)
 8011d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011d58:	68fb      	ldr	r3, [r7, #12]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	200079b4 	.word	0x200079b4
 8011d68:	200040b2 	.word	0x200040b2
 8011d6c:	08011ab3 	.word	0x08011ab3
 8011d70:	006ddd00 	.word	0x006ddd00

08011d74 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011d7e:	2040      	movs	r0, #64	; 0x40
 8011d80:	f7ff ff76 	bl	8011c70 <tcp_alloc>
 8011d84:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011d86:	68fb      	ldr	r3, [r7, #12]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3710      	adds	r7, #16
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b083      	sub	sp, #12
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	611a      	str	r2, [r3, #16]
  }
}
 8011da6:	bf00      	nop
 8011da8:	370c      	adds	r7, #12
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
	...

08011db4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00e      	beq.n	8011de2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	7d1b      	ldrb	r3, [r3, #20]
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d106      	bne.n	8011dda <tcp_recv+0x26>
 8011dcc:	4b07      	ldr	r3, [pc, #28]	; (8011dec <tcp_recv+0x38>)
 8011dce:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8011dd2:	4907      	ldr	r1, [pc, #28]	; (8011df0 <tcp_recv+0x3c>)
 8011dd4:	4807      	ldr	r0, [pc, #28]	; (8011df4 <tcp_recv+0x40>)
 8011dd6:	f006 fffb 	bl	8018dd0 <iprintf>
    pcb->recv = recv;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011de2:	bf00      	nop
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	0801b0d0 	.word	0x0801b0d0
 8011df0:	0801b414 	.word	0x0801b414
 8011df4:	0801b130 	.word	0x0801b130

08011df8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00d      	beq.n	8011e24 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	7d1b      	ldrb	r3, [r3, #20]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d106      	bne.n	8011e1e <tcp_sent+0x26>
 8011e10:	4b06      	ldr	r3, [pc, #24]	; (8011e2c <tcp_sent+0x34>)
 8011e12:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8011e16:	4906      	ldr	r1, [pc, #24]	; (8011e30 <tcp_sent+0x38>)
 8011e18:	4806      	ldr	r0, [pc, #24]	; (8011e34 <tcp_sent+0x3c>)
 8011e1a:	f006 ffd9 	bl	8018dd0 <iprintf>
    pcb->sent = sent;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	683a      	ldr	r2, [r7, #0]
 8011e22:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8011e24:	bf00      	nop
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	0801b0d0 	.word	0x0801b0d0
 8011e30:	0801b43c 	.word	0x0801b43c
 8011e34:	0801b130 	.word	0x0801b130

08011e38 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d00e      	beq.n	8011e66 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	7d1b      	ldrb	r3, [r3, #20]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d106      	bne.n	8011e5e <tcp_err+0x26>
 8011e50:	4b07      	ldr	r3, [pc, #28]	; (8011e70 <tcp_err+0x38>)
 8011e52:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8011e56:	4907      	ldr	r1, [pc, #28]	; (8011e74 <tcp_err+0x3c>)
 8011e58:	4807      	ldr	r0, [pc, #28]	; (8011e78 <tcp_err+0x40>)
 8011e5a:	f006 ffb9 	bl	8018dd0 <iprintf>
    pcb->errf = err;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8011e66:	bf00      	nop
 8011e68:	3708      	adds	r7, #8
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	0801b0d0 	.word	0x0801b0d0
 8011e74:	0801b464 	.word	0x0801b464
 8011e78:	0801b130 	.word	0x0801b130

08011e7c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d008      	beq.n	8011e9e <tcp_accept+0x22>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	7d1b      	ldrb	r3, [r3, #20]
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d104      	bne.n	8011e9e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	619a      	str	r2, [r3, #24]
  }
}
 8011e9e:	bf00      	nop
 8011ea0:	3714      	adds	r7, #20
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr
	...

08011eac <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	7d1b      	ldrb	r3, [r3, #20]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d106      	bne.n	8011ed0 <tcp_poll+0x24>
 8011ec2:	4b09      	ldr	r3, [pc, #36]	; (8011ee8 <tcp_poll+0x3c>)
 8011ec4:	f240 7203 	movw	r2, #1795	; 0x703
 8011ec8:	4908      	ldr	r1, [pc, #32]	; (8011eec <tcp_poll+0x40>)
 8011eca:	4809      	ldr	r0, [pc, #36]	; (8011ef0 <tcp_poll+0x44>)
 8011ecc:	f006 ff80 	bl	8018dd0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	68ba      	ldr	r2, [r7, #8]
 8011ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	79fa      	ldrb	r2, [r7, #7]
 8011edc:	771a      	strb	r2, [r3, #28]
}
 8011ede:	bf00      	nop
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	0801b0d0 	.word	0x0801b0d0
 8011eec:	0801b48c 	.word	0x0801b48c
 8011ef0:	0801b130 	.word	0x0801b130

08011ef4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	7d1b      	ldrb	r3, [r3, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d034      	beq.n	8011f6e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011f08:	2b0a      	cmp	r3, #10
 8011f0a:	d030      	beq.n	8011f6e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d02c      	beq.n	8011f6e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d007      	beq.n	8011f2c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f20:	4618      	mov	r0, r3
 8011f22:	f7fe fa79 	bl	8010418 <pbuf_free>
      pcb->refused_data = NULL;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7ff fd76 	bl	8011a22 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f42:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7ff fd6a 	bl	8011a22 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7ff fd65 	bl	8011a22 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	669a      	str	r2, [r3, #104]	; 0x68
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8011f6e:	bf00      	nop
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
	...

08011f78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	683a      	ldr	r2, [r7, #0]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d105      	bne.n	8011f98 <tcp_pcb_remove+0x20>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	68da      	ldr	r2, [r3, #12]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	e013      	b.n	8011fc0 <tcp_pcb_remove+0x48>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	60fb      	str	r3, [r7, #12]
 8011f9e:	e00c      	b.n	8011fba <tcp_pcb_remove+0x42>
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	683a      	ldr	r2, [r7, #0]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d104      	bne.n	8011fb4 <tcp_pcb_remove+0x3c>
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	68da      	ldr	r2, [r3, #12]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	60da      	str	r2, [r3, #12]
 8011fb2:	e005      	b.n	8011fc0 <tcp_pcb_remove+0x48>
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	60fb      	str	r3, [r7, #12]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d1ef      	bne.n	8011fa0 <tcp_pcb_remove+0x28>
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011fc6:	6838      	ldr	r0, [r7, #0]
 8011fc8:	f7ff ff94 	bl	8011ef4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	7d1b      	ldrb	r3, [r3, #20]
 8011fd0:	2b0a      	cmp	r3, #10
 8011fd2:	d013      	beq.n	8011ffc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d00f      	beq.n	8011ffc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	7e9b      	ldrb	r3, [r3, #26]
 8011fe0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d009      	beq.n	8011ffc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	7e9b      	ldrb	r3, [r3, #26]
 8011fec:	f043 0302 	orr.w	r3, r3, #2
 8011ff0:	b2da      	uxtb	r2, r3
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011ff6:	6838      	ldr	r0, [r7, #0]
 8011ff8:	f003 f9be 	bl	8015378 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	7d1b      	ldrb	r3, [r3, #20]
 8012000:	2b01      	cmp	r3, #1
 8012002:	d020      	beq.n	8012046 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012008:	2b00      	cmp	r3, #0
 801200a:	d006      	beq.n	801201a <tcp_pcb_remove+0xa2>
 801200c:	4b13      	ldr	r3, [pc, #76]	; (801205c <tcp_pcb_remove+0xe4>)
 801200e:	f240 7253 	movw	r2, #1875	; 0x753
 8012012:	4913      	ldr	r1, [pc, #76]	; (8012060 <tcp_pcb_remove+0xe8>)
 8012014:	4813      	ldr	r0, [pc, #76]	; (8012064 <tcp_pcb_remove+0xec>)
 8012016:	f006 fedb 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801201e:	2b00      	cmp	r3, #0
 8012020:	d006      	beq.n	8012030 <tcp_pcb_remove+0xb8>
 8012022:	4b0e      	ldr	r3, [pc, #56]	; (801205c <tcp_pcb_remove+0xe4>)
 8012024:	f240 7254 	movw	r2, #1876	; 0x754
 8012028:	490f      	ldr	r1, [pc, #60]	; (8012068 <tcp_pcb_remove+0xf0>)
 801202a:	480e      	ldr	r0, [pc, #56]	; (8012064 <tcp_pcb_remove+0xec>)
 801202c:	f006 fed0 	bl	8018dd0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012034:	2b00      	cmp	r3, #0
 8012036:	d006      	beq.n	8012046 <tcp_pcb_remove+0xce>
 8012038:	4b08      	ldr	r3, [pc, #32]	; (801205c <tcp_pcb_remove+0xe4>)
 801203a:	f240 7256 	movw	r2, #1878	; 0x756
 801203e:	490b      	ldr	r1, [pc, #44]	; (801206c <tcp_pcb_remove+0xf4>)
 8012040:	4808      	ldr	r0, [pc, #32]	; (8012064 <tcp_pcb_remove+0xec>)
 8012042:	f006 fec5 	bl	8018dd0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	2200      	movs	r2, #0
 801204a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	2200      	movs	r2, #0
 8012050:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012052:	bf00      	nop
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
 801205a:	bf00      	nop
 801205c:	0801b0d0 	.word	0x0801b0d0
 8012060:	0801b4ac 	.word	0x0801b4ac
 8012064:	0801b130 	.word	0x0801b130
 8012068:	0801b4c4 	.word	0x0801b4c4
 801206c:	0801b4e0 	.word	0x0801b4e0

08012070 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012078:	4b07      	ldr	r3, [pc, #28]	; (8012098 <tcp_next_iss+0x28>)
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	4b07      	ldr	r3, [pc, #28]	; (801209c <tcp_next_iss+0x2c>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4413      	add	r3, r2
 8012082:	4a05      	ldr	r2, [pc, #20]	; (8012098 <tcp_next_iss+0x28>)
 8012084:	6013      	str	r3, [r2, #0]
  return iss;
 8012086:	4b04      	ldr	r3, [pc, #16]	; (8012098 <tcp_next_iss+0x28>)
 8012088:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801208a:	4618      	mov	r0, r3
 801208c:	370c      	adds	r7, #12
 801208e:	46bd      	mov	sp, r7
 8012090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012094:	4770      	bx	lr
 8012096:	bf00      	nop
 8012098:	2000002c 	.word	0x2000002c
 801209c:	200079b4 	.word	0x200079b4

080120a0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	4603      	mov	r3, r0
 80120a8:	6039      	str	r1, [r7, #0]
 80120aa:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80120ac:	6838      	ldr	r0, [r7, #0]
 80120ae:	f005 faed 	bl	801768c <ip4_route>
 80120b2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d101      	bne.n	80120be <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80120ba:	88fb      	ldrh	r3, [r7, #6]
 80120bc:	e010      	b.n	80120e0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80120c2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80120c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d008      	beq.n	80120de <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80120cc:	897b      	ldrh	r3, [r7, #10]
 80120ce:	3b28      	subs	r3, #40	; 0x28
 80120d0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80120d2:	893a      	ldrh	r2, [r7, #8]
 80120d4:	88fb      	ldrh	r3, [r7, #6]
 80120d6:	4293      	cmp	r3, r2
 80120d8:	bf28      	it	cs
 80120da:	4613      	movcs	r3, r2
 80120dc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80120de:	88fb      	ldrh	r3, [r7, #6]
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3710      	adds	r7, #16
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80120f6:	e011      	b.n	801211c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	429a      	cmp	r2, r3
 8012102:	d108      	bne.n	8012116 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801210a:	68f8      	ldr	r0, [r7, #12]
 801210c:	f7fe feca 	bl	8010ea4 <tcp_abort>
      pcb = next;
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	60fb      	str	r3, [r7, #12]
 8012114:	e002      	b.n	801211c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1ea      	bne.n	80120f8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8012122:	bf00      	nop
 8012124:	3710      	adds	r7, #16
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
	...

0801212c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d02c      	beq.n	8012196 <tcp_netif_ip_addr_changed+0x6a>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d028      	beq.n	8012196 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012144:	4b16      	ldr	r3, [pc, #88]	; (80121a0 <tcp_netif_ip_addr_changed+0x74>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	4619      	mov	r1, r3
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f7ff ffcc 	bl	80120e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012150:	4b14      	ldr	r3, [pc, #80]	; (80121a4 <tcp_netif_ip_addr_changed+0x78>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4619      	mov	r1, r3
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff ffc6 	bl	80120e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d019      	beq.n	8012196 <tcp_netif_ip_addr_changed+0x6a>
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d015      	beq.n	8012196 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801216a:	4b0f      	ldr	r3, [pc, #60]	; (80121a8 <tcp_netif_ip_addr_changed+0x7c>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	60fb      	str	r3, [r7, #12]
 8012170:	e00e      	b.n	8012190 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	68db      	ldr	r3, [r3, #12]
 8012176:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	429a      	cmp	r2, r3
 8012182:	d103      	bne.n	801218c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	60fb      	str	r3, [r7, #12]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d1ed      	bne.n	8012172 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012196:	bf00      	nop
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	200079b0 	.word	0x200079b0
 80121a4:	200079bc 	.word	0x200079bc
 80121a8:	200079b8 	.word	0x200079b8

080121ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80121ac:	b590      	push	{r4, r7, lr}
 80121ae:	b08b      	sub	sp, #44	; 0x2c
 80121b0:	af02      	add	r7, sp, #8
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	4a82      	ldr	r2, [pc, #520]	; (80123c4 <tcp_input+0x218>)
 80121bc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	895b      	ldrh	r3, [r3, #10]
 80121c2:	2b13      	cmp	r3, #19
 80121c4:	f240 838a 	bls.w	80128dc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121c8:	4b7f      	ldr	r3, [pc, #508]	; (80123c8 <tcp_input+0x21c>)
 80121ca:	695a      	ldr	r2, [r3, #20]
 80121cc:	4b7e      	ldr	r3, [pc, #504]	; (80123c8 <tcp_input+0x21c>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	4619      	mov	r1, r3
 80121d2:	4610      	mov	r0, r2
 80121d4:	f005 fcd4 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f040 8380 	bne.w	80128e0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80121e0:	4b79      	ldr	r3, [pc, #484]	; (80123c8 <tcp_input+0x21c>)
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121e8:	2be0      	cmp	r3, #224	; 0xe0
 80121ea:	f000 8379 	beq.w	80128e0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80121ee:	4b75      	ldr	r3, [pc, #468]	; (80123c4 <tcp_input+0x218>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	899b      	ldrh	r3, [r3, #12]
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fc fef4 	bl	800efe4 <lwip_htons>
 80121fc:	4603      	mov	r3, r0
 80121fe:	0b1b      	lsrs	r3, r3, #12
 8012200:	b29b      	uxth	r3, r3
 8012202:	b2db      	uxtb	r3, r3
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012208:	7cbb      	ldrb	r3, [r7, #18]
 801220a:	2b13      	cmp	r3, #19
 801220c:	f240 8368 	bls.w	80128e0 <tcp_input+0x734>
 8012210:	7cbb      	ldrb	r3, [r7, #18]
 8012212:	b29a      	uxth	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	891b      	ldrh	r3, [r3, #8]
 8012218:	429a      	cmp	r2, r3
 801221a:	f200 8361 	bhi.w	80128e0 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801221e:	7cbb      	ldrb	r3, [r7, #18]
 8012220:	b29b      	uxth	r3, r3
 8012222:	3b14      	subs	r3, #20
 8012224:	b29a      	uxth	r2, r3
 8012226:	4b69      	ldr	r3, [pc, #420]	; (80123cc <tcp_input+0x220>)
 8012228:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801222a:	4b69      	ldr	r3, [pc, #420]	; (80123d0 <tcp_input+0x224>)
 801222c:	2200      	movs	r2, #0
 801222e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	895a      	ldrh	r2, [r3, #10]
 8012234:	7cbb      	ldrb	r3, [r7, #18]
 8012236:	b29b      	uxth	r3, r3
 8012238:	429a      	cmp	r2, r3
 801223a:	d30d      	bcc.n	8012258 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801223c:	4b63      	ldr	r3, [pc, #396]	; (80123cc <tcp_input+0x220>)
 801223e:	881a      	ldrh	r2, [r3, #0]
 8012240:	4b64      	ldr	r3, [pc, #400]	; (80123d4 <tcp_input+0x228>)
 8012242:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8012244:	7cbb      	ldrb	r3, [r7, #18]
 8012246:	b29b      	uxth	r3, r3
 8012248:	425b      	negs	r3, r3
 801224a:	b29b      	uxth	r3, r3
 801224c:	b21b      	sxth	r3, r3
 801224e:	4619      	mov	r1, r3
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7fe f8bd 	bl	80103d0 <pbuf_header>
 8012256:	e055      	b.n	8012304 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d105      	bne.n	801226c <tcp_input+0xc0>
 8012260:	4b5d      	ldr	r3, [pc, #372]	; (80123d8 <tcp_input+0x22c>)
 8012262:	22b2      	movs	r2, #178	; 0xb2
 8012264:	495d      	ldr	r1, [pc, #372]	; (80123dc <tcp_input+0x230>)
 8012266:	485e      	ldr	r0, [pc, #376]	; (80123e0 <tcp_input+0x234>)
 8012268:	f006 fdb2 	bl	8018dd0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801226c:	f06f 0113 	mvn.w	r1, #19
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f7fe f8ad 	bl	80103d0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	895a      	ldrh	r2, [r3, #10]
 801227a:	4b56      	ldr	r3, [pc, #344]	; (80123d4 <tcp_input+0x228>)
 801227c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801227e:	4b53      	ldr	r3, [pc, #332]	; (80123cc <tcp_input+0x220>)
 8012280:	881a      	ldrh	r2, [r3, #0]
 8012282:	4b54      	ldr	r3, [pc, #336]	; (80123d4 <tcp_input+0x228>)
 8012284:	881b      	ldrh	r3, [r3, #0]
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801228a:	4b52      	ldr	r3, [pc, #328]	; (80123d4 <tcp_input+0x228>)
 801228c:	881b      	ldrh	r3, [r3, #0]
 801228e:	425b      	negs	r3, r3
 8012290:	b29b      	uxth	r3, r3
 8012292:	b21b      	sxth	r3, r3
 8012294:	4619      	mov	r1, r3
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f7fe f89a 	bl	80103d0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	895b      	ldrh	r3, [r3, #10]
 80122a2:	8a3a      	ldrh	r2, [r7, #16]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	f200 831d 	bhi.w	80128e4 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	4a47      	ldr	r2, [pc, #284]	; (80123d0 <tcp_input+0x224>)
 80122b2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681a      	ldr	r2, [r3, #0]
 80122b8:	8a3b      	ldrh	r3, [r7, #16]
 80122ba:	425b      	negs	r3, r3
 80122bc:	b29b      	uxth	r3, r3
 80122be:	b21b      	sxth	r3, r3
 80122c0:	4619      	mov	r1, r3
 80122c2:	4610      	mov	r0, r2
 80122c4:	f7fe f884 	bl	80103d0 <pbuf_header>
    p->tot_len -= opt2len;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	891a      	ldrh	r2, [r3, #8]
 80122cc:	8a3b      	ldrh	r3, [r7, #16]
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	895b      	ldrh	r3, [r3, #10]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d005      	beq.n	80122ea <tcp_input+0x13e>
 80122de:	4b3e      	ldr	r3, [pc, #248]	; (80123d8 <tcp_input+0x22c>)
 80122e0:	22cf      	movs	r2, #207	; 0xcf
 80122e2:	4940      	ldr	r1, [pc, #256]	; (80123e4 <tcp_input+0x238>)
 80122e4:	483e      	ldr	r0, [pc, #248]	; (80123e0 <tcp_input+0x234>)
 80122e6:	f006 fd73 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	891a      	ldrh	r2, [r3, #8]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	891b      	ldrh	r3, [r3, #8]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d005      	beq.n	8012304 <tcp_input+0x158>
 80122f8:	4b37      	ldr	r3, [pc, #220]	; (80123d8 <tcp_input+0x22c>)
 80122fa:	22d0      	movs	r2, #208	; 0xd0
 80122fc:	493a      	ldr	r1, [pc, #232]	; (80123e8 <tcp_input+0x23c>)
 80122fe:	4838      	ldr	r0, [pc, #224]	; (80123e0 <tcp_input+0x234>)
 8012300:	f006 fd66 	bl	8018dd0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012304:	4b2f      	ldr	r3, [pc, #188]	; (80123c4 <tcp_input+0x218>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	b29a      	uxth	r2, r3
 801230c:	4b2d      	ldr	r3, [pc, #180]	; (80123c4 <tcp_input+0x218>)
 801230e:	681c      	ldr	r4, [r3, #0]
 8012310:	4610      	mov	r0, r2
 8012312:	f7fc fe67 	bl	800efe4 <lwip_htons>
 8012316:	4603      	mov	r3, r0
 8012318:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801231a:	4b2a      	ldr	r3, [pc, #168]	; (80123c4 <tcp_input+0x218>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	885b      	ldrh	r3, [r3, #2]
 8012320:	b29a      	uxth	r2, r3
 8012322:	4b28      	ldr	r3, [pc, #160]	; (80123c4 <tcp_input+0x218>)
 8012324:	681c      	ldr	r4, [r3, #0]
 8012326:	4610      	mov	r0, r2
 8012328:	f7fc fe5c 	bl	800efe4 <lwip_htons>
 801232c:	4603      	mov	r3, r0
 801232e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012330:	4b24      	ldr	r3, [pc, #144]	; (80123c4 <tcp_input+0x218>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	685a      	ldr	r2, [r3, #4]
 8012336:	4b23      	ldr	r3, [pc, #140]	; (80123c4 <tcp_input+0x218>)
 8012338:	681c      	ldr	r4, [r3, #0]
 801233a:	4610      	mov	r0, r2
 801233c:	f7fc fe60 	bl	800f000 <lwip_htonl>
 8012340:	4603      	mov	r3, r0
 8012342:	6063      	str	r3, [r4, #4]
 8012344:	6863      	ldr	r3, [r4, #4]
 8012346:	4a29      	ldr	r2, [pc, #164]	; (80123ec <tcp_input+0x240>)
 8012348:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801234a:	4b1e      	ldr	r3, [pc, #120]	; (80123c4 <tcp_input+0x218>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	689a      	ldr	r2, [r3, #8]
 8012350:	4b1c      	ldr	r3, [pc, #112]	; (80123c4 <tcp_input+0x218>)
 8012352:	681c      	ldr	r4, [r3, #0]
 8012354:	4610      	mov	r0, r2
 8012356:	f7fc fe53 	bl	800f000 <lwip_htonl>
 801235a:	4603      	mov	r3, r0
 801235c:	60a3      	str	r3, [r4, #8]
 801235e:	68a3      	ldr	r3, [r4, #8]
 8012360:	4a23      	ldr	r2, [pc, #140]	; (80123f0 <tcp_input+0x244>)
 8012362:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012364:	4b17      	ldr	r3, [pc, #92]	; (80123c4 <tcp_input+0x218>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	89db      	ldrh	r3, [r3, #14]
 801236a:	b29a      	uxth	r2, r3
 801236c:	4b15      	ldr	r3, [pc, #84]	; (80123c4 <tcp_input+0x218>)
 801236e:	681c      	ldr	r4, [r3, #0]
 8012370:	4610      	mov	r0, r2
 8012372:	f7fc fe37 	bl	800efe4 <lwip_htons>
 8012376:	4603      	mov	r3, r0
 8012378:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801237a:	4b12      	ldr	r3, [pc, #72]	; (80123c4 <tcp_input+0x218>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	899b      	ldrh	r3, [r3, #12]
 8012380:	b29b      	uxth	r3, r3
 8012382:	4618      	mov	r0, r3
 8012384:	f7fc fe2e 	bl	800efe4 <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	b2db      	uxtb	r3, r3
 801238c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012390:	b2da      	uxtb	r2, r3
 8012392:	4b18      	ldr	r3, [pc, #96]	; (80123f4 <tcp_input+0x248>)
 8012394:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	891a      	ldrh	r2, [r3, #8]
 801239a:	4b16      	ldr	r3, [pc, #88]	; (80123f4 <tcp_input+0x248>)
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	f003 0303 	and.w	r3, r3, #3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	bf14      	ite	ne
 80123a6:	2301      	movne	r3, #1
 80123a8:	2300      	moveq	r3, #0
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	4413      	add	r3, r2
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	4b11      	ldr	r3, [pc, #68]	; (80123f8 <tcp_input+0x24c>)
 80123b4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80123b6:	2300      	movs	r3, #0
 80123b8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123ba:	4b10      	ldr	r3, [pc, #64]	; (80123fc <tcp_input+0x250>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	61fb      	str	r3, [r7, #28]
 80123c0:	e082      	b.n	80124c8 <tcp_input+0x31c>
 80123c2:	bf00      	nop
 80123c4:	200040c4 	.word	0x200040c4
 80123c8:	200048f4 	.word	0x200048f4
 80123cc:	200040c8 	.word	0x200040c8
 80123d0:	200040cc 	.word	0x200040cc
 80123d4:	200040ca 	.word	0x200040ca
 80123d8:	0801b4f8 	.word	0x0801b4f8
 80123dc:	0801b550 	.word	0x0801b550
 80123e0:	0801b560 	.word	0x0801b560
 80123e4:	0801b588 	.word	0x0801b588
 80123e8:	0801b594 	.word	0x0801b594
 80123ec:	200040d4 	.word	0x200040d4
 80123f0:	200040d8 	.word	0x200040d8
 80123f4:	200040e0 	.word	0x200040e0
 80123f8:	200040de 	.word	0x200040de
 80123fc:	200079b0 	.word	0x200079b0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	7d1b      	ldrb	r3, [r3, #20]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d105      	bne.n	8012414 <tcp_input+0x268>
 8012408:	4b8f      	ldr	r3, [pc, #572]	; (8012648 <tcp_input+0x49c>)
 801240a:	22e2      	movs	r2, #226	; 0xe2
 801240c:	498f      	ldr	r1, [pc, #572]	; (801264c <tcp_input+0x4a0>)
 801240e:	4890      	ldr	r0, [pc, #576]	; (8012650 <tcp_input+0x4a4>)
 8012410:	f006 fcde 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	7d1b      	ldrb	r3, [r3, #20]
 8012418:	2b0a      	cmp	r3, #10
 801241a:	d105      	bne.n	8012428 <tcp_input+0x27c>
 801241c:	4b8a      	ldr	r3, [pc, #552]	; (8012648 <tcp_input+0x49c>)
 801241e:	22e3      	movs	r2, #227	; 0xe3
 8012420:	498c      	ldr	r1, [pc, #560]	; (8012654 <tcp_input+0x4a8>)
 8012422:	488b      	ldr	r0, [pc, #556]	; (8012650 <tcp_input+0x4a4>)
 8012424:	f006 fcd4 	bl	8018dd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	7d1b      	ldrb	r3, [r3, #20]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d105      	bne.n	801243c <tcp_input+0x290>
 8012430:	4b85      	ldr	r3, [pc, #532]	; (8012648 <tcp_input+0x49c>)
 8012432:	22e4      	movs	r2, #228	; 0xe4
 8012434:	4988      	ldr	r1, [pc, #544]	; (8012658 <tcp_input+0x4ac>)
 8012436:	4886      	ldr	r0, [pc, #536]	; (8012650 <tcp_input+0x4a4>)
 8012438:	f006 fcca 	bl	8018dd0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	8b1a      	ldrh	r2, [r3, #24]
 8012440:	4b86      	ldr	r3, [pc, #536]	; (801265c <tcp_input+0x4b0>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	881b      	ldrh	r3, [r3, #0]
 8012446:	b29b      	uxth	r3, r3
 8012448:	429a      	cmp	r2, r3
 801244a:	d138      	bne.n	80124be <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	8ada      	ldrh	r2, [r3, #22]
 8012450:	4b82      	ldr	r3, [pc, #520]	; (801265c <tcp_input+0x4b0>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	885b      	ldrh	r3, [r3, #2]
 8012456:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012458:	429a      	cmp	r2, r3
 801245a:	d130      	bne.n	80124be <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	685a      	ldr	r2, [r3, #4]
 8012460:	4b7f      	ldr	r3, [pc, #508]	; (8012660 <tcp_input+0x4b4>)
 8012462:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012464:	429a      	cmp	r2, r3
 8012466:	d12a      	bne.n	80124be <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	4b7c      	ldr	r3, [pc, #496]	; (8012660 <tcp_input+0x4b4>)
 801246e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012470:	429a      	cmp	r2, r3
 8012472:	d124      	bne.n	80124be <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	69fa      	ldr	r2, [r7, #28]
 801247a:	429a      	cmp	r2, r3
 801247c:	d105      	bne.n	801248a <tcp_input+0x2de>
 801247e:	4b72      	ldr	r3, [pc, #456]	; (8012648 <tcp_input+0x49c>)
 8012480:	22ec      	movs	r2, #236	; 0xec
 8012482:	4978      	ldr	r1, [pc, #480]	; (8012664 <tcp_input+0x4b8>)
 8012484:	4872      	ldr	r0, [pc, #456]	; (8012650 <tcp_input+0x4a4>)
 8012486:	f006 fca3 	bl	8018dd0 <iprintf>
      if (prev != NULL) {
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00a      	beq.n	80124a6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	68da      	ldr	r2, [r3, #12]
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012498:	4b73      	ldr	r3, [pc, #460]	; (8012668 <tcp_input+0x4bc>)
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80124a0:	4a71      	ldr	r2, [pc, #452]	; (8012668 <tcp_input+0x4bc>)
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	69fa      	ldr	r2, [r7, #28]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d10f      	bne.n	80124d0 <tcp_input+0x324>
 80124b0:	4b65      	ldr	r3, [pc, #404]	; (8012648 <tcp_input+0x49c>)
 80124b2:	22f4      	movs	r2, #244	; 0xf4
 80124b4:	496d      	ldr	r1, [pc, #436]	; (801266c <tcp_input+0x4c0>)
 80124b6:	4866      	ldr	r0, [pc, #408]	; (8012650 <tcp_input+0x4a4>)
 80124b8:	f006 fc8a 	bl	8018dd0 <iprintf>
      break;
 80124bc:	e008      	b.n	80124d0 <tcp_input+0x324>
    }
    prev = pcb;
 80124be:	69fb      	ldr	r3, [r7, #28]
 80124c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	61fb      	str	r3, [r7, #28]
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d198      	bne.n	8012400 <tcp_input+0x254>
 80124ce:	e000      	b.n	80124d2 <tcp_input+0x326>
      break;
 80124d0:	bf00      	nop
  }

  if (pcb == NULL) {
 80124d2:	69fb      	ldr	r3, [r7, #28]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d173      	bne.n	80125c0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124d8:	4b65      	ldr	r3, [pc, #404]	; (8012670 <tcp_input+0x4c4>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	61fb      	str	r3, [r7, #28]
 80124de:	e02f      	b.n	8012540 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	7d1b      	ldrb	r3, [r3, #20]
 80124e4:	2b0a      	cmp	r3, #10
 80124e6:	d005      	beq.n	80124f4 <tcp_input+0x348>
 80124e8:	4b57      	ldr	r3, [pc, #348]	; (8012648 <tcp_input+0x49c>)
 80124ea:	22fe      	movs	r2, #254	; 0xfe
 80124ec:	4961      	ldr	r1, [pc, #388]	; (8012674 <tcp_input+0x4c8>)
 80124ee:	4858      	ldr	r0, [pc, #352]	; (8012650 <tcp_input+0x4a4>)
 80124f0:	f006 fc6e 	bl	8018dd0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	8b1a      	ldrh	r2, [r3, #24]
 80124f8:	4b58      	ldr	r3, [pc, #352]	; (801265c <tcp_input+0x4b0>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	881b      	ldrh	r3, [r3, #0]
 80124fe:	b29b      	uxth	r3, r3
 8012500:	429a      	cmp	r2, r3
 8012502:	d11a      	bne.n	801253a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	8ada      	ldrh	r2, [r3, #22]
 8012508:	4b54      	ldr	r3, [pc, #336]	; (801265c <tcp_input+0x4b0>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	885b      	ldrh	r3, [r3, #2]
 801250e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012510:	429a      	cmp	r2, r3
 8012512:	d112      	bne.n	801253a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	685a      	ldr	r2, [r3, #4]
 8012518:	4b51      	ldr	r3, [pc, #324]	; (8012660 <tcp_input+0x4b4>)
 801251a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801251c:	429a      	cmp	r2, r3
 801251e:	d10c      	bne.n	801253a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	4b4e      	ldr	r3, [pc, #312]	; (8012660 <tcp_input+0x4b4>)
 8012526:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012528:	429a      	cmp	r2, r3
 801252a:	d106      	bne.n	801253a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801252c:	69f8      	ldr	r0, [r7, #28]
 801252e:	f000 fb15 	bl	8012b5c <tcp_timewait_input>
        pbuf_free(p);
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7fd ff70 	bl	8010418 <pbuf_free>
        return;
 8012538:	e1da      	b.n	80128f0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	61fb      	str	r3, [r7, #28]
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1cc      	bne.n	80124e0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012546:	2300      	movs	r3, #0
 8012548:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801254a:	4b4b      	ldr	r3, [pc, #300]	; (8012678 <tcp_input+0x4cc>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	617b      	str	r3, [r7, #20]
 8012550:	e019      	b.n	8012586 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	8ada      	ldrh	r2, [r3, #22]
 8012556:	4b41      	ldr	r3, [pc, #260]	; (801265c <tcp_input+0x4b0>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	885b      	ldrh	r3, [r3, #2]
 801255c:	b29b      	uxth	r3, r3
 801255e:	429a      	cmp	r2, r3
 8012560:	d10c      	bne.n	801257c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	4b3e      	ldr	r3, [pc, #248]	; (8012660 <tcp_input+0x4b4>)
 8012568:	695b      	ldr	r3, [r3, #20]
 801256a:	429a      	cmp	r2, r3
 801256c:	d00f      	beq.n	801258e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00d      	beq.n	8012590 <tcp_input+0x3e4>
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d009      	beq.n	8012590 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	617b      	str	r3, [r7, #20]
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1e2      	bne.n	8012552 <tcp_input+0x3a6>
 801258c:	e000      	b.n	8012590 <tcp_input+0x3e4>
            break;
 801258e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d014      	beq.n	80125c0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00a      	beq.n	80125b2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	68da      	ldr	r2, [r3, #12]
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80125a4:	4b34      	ldr	r3, [pc, #208]	; (8012678 <tcp_input+0x4cc>)
 80125a6:	681a      	ldr	r2, [r3, #0]
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80125ac:	4a32      	ldr	r2, [pc, #200]	; (8012678 <tcp_input+0x4cc>)
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80125b2:	6978      	ldr	r0, [r7, #20]
 80125b4:	f000 f9f0 	bl	8012998 <tcp_listen_input>
      pbuf_free(p);
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7fd ff2d 	bl	8010418 <pbuf_free>
      return;
 80125be:	e197      	b.n	80128f0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f000 8164 	beq.w	8012890 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80125c8:	4b2c      	ldr	r3, [pc, #176]	; (801267c <tcp_input+0x4d0>)
 80125ca:	2200      	movs	r2, #0
 80125cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	891a      	ldrh	r2, [r3, #8]
 80125d2:	4b2a      	ldr	r3, [pc, #168]	; (801267c <tcp_input+0x4d0>)
 80125d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80125d6:	4a29      	ldr	r2, [pc, #164]	; (801267c <tcp_input+0x4d0>)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80125dc:	4b1f      	ldr	r3, [pc, #124]	; (801265c <tcp_input+0x4b0>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4a26      	ldr	r2, [pc, #152]	; (801267c <tcp_input+0x4d0>)
 80125e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80125e4:	4b26      	ldr	r3, [pc, #152]	; (8012680 <tcp_input+0x4d4>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80125ea:	4b26      	ldr	r3, [pc, #152]	; (8012684 <tcp_input+0x4d8>)
 80125ec:	2200      	movs	r2, #0
 80125ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80125f0:	4b25      	ldr	r3, [pc, #148]	; (8012688 <tcp_input+0x4dc>)
 80125f2:	2200      	movs	r2, #0
 80125f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80125f6:	4b25      	ldr	r3, [pc, #148]	; (801268c <tcp_input+0x4e0>)
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	f003 0308 	and.w	r3, r3, #8
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d006      	beq.n	8012610 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	7b5b      	ldrb	r3, [r3, #13]
 8012606:	f043 0301 	orr.w	r3, r3, #1
 801260a:	b2da      	uxtb	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012610:	69fb      	ldr	r3, [r7, #28]
 8012612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012614:	2b00      	cmp	r3, #0
 8012616:	d03d      	beq.n	8012694 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012618:	69f8      	ldr	r0, [r7, #28]
 801261a:	f7ff f999 	bl	8011950 <tcp_process_refused_data>
 801261e:	4603      	mov	r3, r0
 8012620:	f113 0f0d 	cmn.w	r3, #13
 8012624:	d007      	beq.n	8012636 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801262a:	2b00      	cmp	r3, #0
 801262c:	d032      	beq.n	8012694 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801262e:	4b18      	ldr	r3, [pc, #96]	; (8012690 <tcp_input+0x4e4>)
 8012630:	881b      	ldrh	r3, [r3, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d02e      	beq.n	8012694 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801263a:	2b00      	cmp	r3, #0
 801263c:	f040 8108 	bne.w	8012850 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012640:	69f8      	ldr	r0, [r7, #28]
 8012642:	f002 fe3d 	bl	80152c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012646:	e103      	b.n	8012850 <tcp_input+0x6a4>
 8012648:	0801b4f8 	.word	0x0801b4f8
 801264c:	0801b5b4 	.word	0x0801b5b4
 8012650:	0801b560 	.word	0x0801b560
 8012654:	0801b5dc 	.word	0x0801b5dc
 8012658:	0801b608 	.word	0x0801b608
 801265c:	200040c4 	.word	0x200040c4
 8012660:	200048f4 	.word	0x200048f4
 8012664:	0801b630 	.word	0x0801b630
 8012668:	200079b0 	.word	0x200079b0
 801266c:	0801b65c 	.word	0x0801b65c
 8012670:	200079c0 	.word	0x200079c0
 8012674:	0801b688 	.word	0x0801b688
 8012678:	200079b8 	.word	0x200079b8
 801267c:	200040b4 	.word	0x200040b4
 8012680:	200040e4 	.word	0x200040e4
 8012684:	200040e1 	.word	0x200040e1
 8012688:	200040dc 	.word	0x200040dc
 801268c:	200040e0 	.word	0x200040e0
 8012690:	200040de 	.word	0x200040de
      }
    }
    tcp_input_pcb = pcb;
 8012694:	4a98      	ldr	r2, [pc, #608]	; (80128f8 <tcp_input+0x74c>)
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801269a:	69f8      	ldr	r0, [r7, #28]
 801269c:	f000 fac6 	bl	8012c2c <tcp_process>
 80126a0:	4603      	mov	r3, r0
 80126a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80126a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126a8:	f113 0f0d 	cmn.w	r3, #13
 80126ac:	f000 80d2 	beq.w	8012854 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 80126b0:	4b92      	ldr	r3, [pc, #584]	; (80128fc <tcp_input+0x750>)
 80126b2:	781b      	ldrb	r3, [r3, #0]
 80126b4:	f003 0308 	and.w	r3, r3, #8
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d016      	beq.n	80126ea <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80126bc:	69fb      	ldr	r3, [r7, #28]
 80126be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d008      	beq.n	80126d8 <tcp_input+0x52c>
 80126c6:	69fb      	ldr	r3, [r7, #28]
 80126c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126cc:	69fa      	ldr	r2, [r7, #28]
 80126ce:	6912      	ldr	r2, [r2, #16]
 80126d0:	f06f 010d 	mvn.w	r1, #13
 80126d4:	4610      	mov	r0, r2
 80126d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80126d8:	69f9      	ldr	r1, [r7, #28]
 80126da:	4889      	ldr	r0, [pc, #548]	; (8012900 <tcp_input+0x754>)
 80126dc:	f7ff fc4c 	bl	8011f78 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80126e0:	69f9      	ldr	r1, [r7, #28]
 80126e2:	2001      	movs	r0, #1
 80126e4:	f7fd f900 	bl	800f8e8 <memp_free>
 80126e8:	e0bf      	b.n	801286a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80126ee:	4b85      	ldr	r3, [pc, #532]	; (8012904 <tcp_input+0x758>)
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d01b      	beq.n	801272e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80126f6:	4b83      	ldr	r3, [pc, #524]	; (8012904 <tcp_input+0x758>)
 80126f8:	881b      	ldrh	r3, [r3, #0]
 80126fa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012700:	2b00      	cmp	r3, #0
 8012702:	d009      	beq.n	8012718 <tcp_input+0x56c>
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012708:	69fa      	ldr	r2, [r7, #28]
 801270a:	6910      	ldr	r0, [r2, #16]
 801270c:	89fa      	ldrh	r2, [r7, #14]
 801270e:	69f9      	ldr	r1, [r7, #28]
 8012710:	4798      	blx	r3
 8012712:	4603      	mov	r3, r0
 8012714:	74fb      	strb	r3, [r7, #19]
 8012716:	e001      	b.n	801271c <tcp_input+0x570>
 8012718:	2300      	movs	r3, #0
 801271a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801271c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012720:	f113 0f0d 	cmn.w	r3, #13
 8012724:	f000 8098 	beq.w	8012858 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012728:	4b76      	ldr	r3, [pc, #472]	; (8012904 <tcp_input+0x758>)
 801272a:	2200      	movs	r2, #0
 801272c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801272e:	69f8      	ldr	r0, [r7, #28]
 8012730:	f000 f900 	bl	8012934 <tcp_input_delayed_close>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	f040 8090 	bne.w	801285c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801273c:	4b72      	ldr	r3, [pc, #456]	; (8012908 <tcp_input+0x75c>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d041      	beq.n	80127c8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <tcp_input+0x5ae>
 801274c:	4b6f      	ldr	r3, [pc, #444]	; (801290c <tcp_input+0x760>)
 801274e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012752:	496f      	ldr	r1, [pc, #444]	; (8012910 <tcp_input+0x764>)
 8012754:	486f      	ldr	r0, [pc, #444]	; (8012914 <tcp_input+0x768>)
 8012756:	f006 fb3b 	bl	8018dd0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	7e9b      	ldrb	r3, [r3, #26]
 801275e:	f003 0310 	and.w	r3, r3, #16
 8012762:	2b00      	cmp	r3, #0
 8012764:	d008      	beq.n	8012778 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012766:	4b68      	ldr	r3, [pc, #416]	; (8012908 <tcp_input+0x75c>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4618      	mov	r0, r3
 801276c:	f7fd fe54 	bl	8010418 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012770:	69f8      	ldr	r0, [r7, #28]
 8012772:	f7fe fb97 	bl	8010ea4 <tcp_abort>
            goto aborted;
 8012776:	e078      	b.n	801286a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00c      	beq.n	801279c <tcp_input+0x5f0>
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	6918      	ldr	r0, [r3, #16]
 801278c:	4b5e      	ldr	r3, [pc, #376]	; (8012908 <tcp_input+0x75c>)
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	2300      	movs	r3, #0
 8012792:	69f9      	ldr	r1, [r7, #28]
 8012794:	47a0      	blx	r4
 8012796:	4603      	mov	r3, r0
 8012798:	74fb      	strb	r3, [r7, #19]
 801279a:	e008      	b.n	80127ae <tcp_input+0x602>
 801279c:	4b5a      	ldr	r3, [pc, #360]	; (8012908 <tcp_input+0x75c>)
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	2300      	movs	r3, #0
 80127a2:	69f9      	ldr	r1, [r7, #28]
 80127a4:	2000      	movs	r0, #0
 80127a6:	f7ff f984 	bl	8011ab2 <tcp_recv_null>
 80127aa:	4603      	mov	r3, r0
 80127ac:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80127ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127b2:	f113 0f0d 	cmn.w	r3, #13
 80127b6:	d053      	beq.n	8012860 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80127b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d003      	beq.n	80127c8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80127c0:	4b51      	ldr	r3, [pc, #324]	; (8012908 <tcp_input+0x75c>)
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80127c8:	4b4c      	ldr	r3, [pc, #304]	; (80128fc <tcp_input+0x750>)
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	f003 0320 	and.w	r3, r3, #32
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d030      	beq.n	8012836 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d009      	beq.n	80127f0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127e0:	7b5a      	ldrb	r2, [r3, #13]
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127e6:	f042 0220 	orr.w	r2, r2, #32
 80127ea:	b2d2      	uxtb	r2, r2
 80127ec:	735a      	strb	r2, [r3, #13]
 80127ee:	e022      	b.n	8012836 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80127f8:	d005      	beq.n	8012806 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127fe:	3301      	adds	r3, #1
 8012800:	b29a      	uxth	r2, r3
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00b      	beq.n	8012828 <tcp_input+0x67c>
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	6918      	ldr	r0, [r3, #16]
 801281a:	2300      	movs	r3, #0
 801281c:	2200      	movs	r2, #0
 801281e:	69f9      	ldr	r1, [r7, #28]
 8012820:	47a0      	blx	r4
 8012822:	4603      	mov	r3, r0
 8012824:	74fb      	strb	r3, [r7, #19]
 8012826:	e001      	b.n	801282c <tcp_input+0x680>
 8012828:	2300      	movs	r3, #0
 801282a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801282c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012830:	f113 0f0d 	cmn.w	r3, #13
 8012834:	d016      	beq.n	8012864 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012836:	4b30      	ldr	r3, [pc, #192]	; (80128f8 <tcp_input+0x74c>)
 8012838:	2200      	movs	r2, #0
 801283a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801283c:	69f8      	ldr	r0, [r7, #28]
 801283e:	f000 f879 	bl	8012934 <tcp_input_delayed_close>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d10f      	bne.n	8012868 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012848:	69f8      	ldr	r0, [r7, #28]
 801284a:	f002 fd95 	bl	8015378 <tcp_output>
 801284e:	e00c      	b.n	801286a <tcp_input+0x6be>
        goto aborted;
 8012850:	bf00      	nop
 8012852:	e00a      	b.n	801286a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012854:	bf00      	nop
 8012856:	e008      	b.n	801286a <tcp_input+0x6be>
              goto aborted;
 8012858:	bf00      	nop
 801285a:	e006      	b.n	801286a <tcp_input+0x6be>
          goto aborted;
 801285c:	bf00      	nop
 801285e:	e004      	b.n	801286a <tcp_input+0x6be>
            goto aborted;
 8012860:	bf00      	nop
 8012862:	e002      	b.n	801286a <tcp_input+0x6be>
              goto aborted;
 8012864:	bf00      	nop
 8012866:	e000      	b.n	801286a <tcp_input+0x6be>
          goto aborted;
 8012868:	bf00      	nop
    tcp_input_pcb = NULL;
 801286a:	4b23      	ldr	r3, [pc, #140]	; (80128f8 <tcp_input+0x74c>)
 801286c:	2200      	movs	r2, #0
 801286e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012870:	4b25      	ldr	r3, [pc, #148]	; (8012908 <tcp_input+0x75c>)
 8012872:	2200      	movs	r2, #0
 8012874:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8012876:	4b28      	ldr	r3, [pc, #160]	; (8012918 <tcp_input+0x76c>)
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d037      	beq.n	80128ee <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 801287e:	4b26      	ldr	r3, [pc, #152]	; (8012918 <tcp_input+0x76c>)
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	4618      	mov	r0, r3
 8012884:	f7fd fdc8 	bl	8010418 <pbuf_free>
      inseg.p = NULL;
 8012888:	4b23      	ldr	r3, [pc, #140]	; (8012918 <tcp_input+0x76c>)
 801288a:	2200      	movs	r2, #0
 801288c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801288e:	e02e      	b.n	80128ee <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012890:	4b22      	ldr	r3, [pc, #136]	; (801291c <tcp_input+0x770>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	899b      	ldrh	r3, [r3, #12]
 8012896:	b29b      	uxth	r3, r3
 8012898:	4618      	mov	r0, r3
 801289a:	f7fc fba3 	bl	800efe4 <lwip_htons>
 801289e:	4603      	mov	r3, r0
 80128a0:	f003 0304 	and.w	r3, r3, #4
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d115      	bne.n	80128d4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80128a8:	4b1d      	ldr	r3, [pc, #116]	; (8012920 <tcp_input+0x774>)
 80128aa:	6818      	ldr	r0, [r3, #0]
 80128ac:	4b1d      	ldr	r3, [pc, #116]	; (8012924 <tcp_input+0x778>)
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	461a      	mov	r2, r3
 80128b2:	4b1d      	ldr	r3, [pc, #116]	; (8012928 <tcp_input+0x77c>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128b8:	4b18      	ldr	r3, [pc, #96]	; (801291c <tcp_input+0x770>)
 80128ba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80128bc:	885b      	ldrh	r3, [r3, #2]
 80128be:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128c0:	4a16      	ldr	r2, [pc, #88]	; (801291c <tcp_input+0x770>)
 80128c2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80128c4:	8812      	ldrh	r2, [r2, #0]
 80128c6:	b292      	uxth	r2, r2
 80128c8:	9201      	str	r2, [sp, #4]
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	4b17      	ldr	r3, [pc, #92]	; (801292c <tcp_input+0x780>)
 80128ce:	4a18      	ldr	r2, [pc, #96]	; (8012930 <tcp_input+0x784>)
 80128d0:	f002 ffdc 	bl	801588c <tcp_rst>
    pbuf_free(p);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7fd fd9f 	bl	8010418 <pbuf_free>
  return;
 80128da:	e008      	b.n	80128ee <tcp_input+0x742>
    goto dropped;
 80128dc:	bf00      	nop
 80128de:	e002      	b.n	80128e6 <tcp_input+0x73a>
dropped:
 80128e0:	bf00      	nop
 80128e2:	e000      	b.n	80128e6 <tcp_input+0x73a>
      goto dropped;
 80128e4:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7fd fd96 	bl	8010418 <pbuf_free>
 80128ec:	e000      	b.n	80128f0 <tcp_input+0x744>
  return;
 80128ee:	bf00      	nop
}
 80128f0:	3724      	adds	r7, #36	; 0x24
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd90      	pop	{r4, r7, pc}
 80128f6:	bf00      	nop
 80128f8:	200079c4 	.word	0x200079c4
 80128fc:	200040e1 	.word	0x200040e1
 8012900:	200079b0 	.word	0x200079b0
 8012904:	200040dc 	.word	0x200040dc
 8012908:	200040e4 	.word	0x200040e4
 801290c:	0801b4f8 	.word	0x0801b4f8
 8012910:	0801b6b8 	.word	0x0801b6b8
 8012914:	0801b560 	.word	0x0801b560
 8012918:	200040b4 	.word	0x200040b4
 801291c:	200040c4 	.word	0x200040c4
 8012920:	200040d8 	.word	0x200040d8
 8012924:	200040de 	.word	0x200040de
 8012928:	200040d4 	.word	0x200040d4
 801292c:	20004904 	.word	0x20004904
 8012930:	20004908 	.word	0x20004908

08012934 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801293c:	4b14      	ldr	r3, [pc, #80]	; (8012990 <tcp_input_delayed_close+0x5c>)
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 0310 	and.w	r3, r3, #16
 8012944:	2b00      	cmp	r3, #0
 8012946:	d01d      	beq.n	8012984 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	7e9b      	ldrb	r3, [r3, #26]
 801294c:	f003 0310 	and.w	r3, r3, #16
 8012950:	2b00      	cmp	r3, #0
 8012952:	d10d      	bne.n	8012970 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801295a:	2b00      	cmp	r3, #0
 801295c:	d008      	beq.n	8012970 <tcp_input_delayed_close+0x3c>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	6912      	ldr	r2, [r2, #16]
 8012968:	f06f 010e 	mvn.w	r1, #14
 801296c:	4610      	mov	r0, r2
 801296e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012970:	6879      	ldr	r1, [r7, #4]
 8012972:	4808      	ldr	r0, [pc, #32]	; (8012994 <tcp_input_delayed_close+0x60>)
 8012974:	f7ff fb00 	bl	8011f78 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8012978:	6879      	ldr	r1, [r7, #4]
 801297a:	2001      	movs	r0, #1
 801297c:	f7fc ffb4 	bl	800f8e8 <memp_free>
    return 1;
 8012980:	2301      	movs	r3, #1
 8012982:	e000      	b.n	8012986 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3708      	adds	r7, #8
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	200040e1 	.word	0x200040e1
 8012994:	200079b0 	.word	0x200079b0

08012998 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b088      	sub	sp, #32
 801299c:	af02      	add	r7, sp, #8
 801299e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80129a0:	4b64      	ldr	r3, [pc, #400]	; (8012b34 <tcp_listen_input+0x19c>)
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	f003 0304 	and.w	r3, r3, #4
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f040 80bc 	bne.w	8012b26 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80129ae:	4b61      	ldr	r3, [pc, #388]	; (8012b34 <tcp_listen_input+0x19c>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	f003 0310 	and.w	r3, r3, #16
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d016      	beq.n	80129e8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ba:	4b5f      	ldr	r3, [pc, #380]	; (8012b38 <tcp_listen_input+0x1a0>)
 80129bc:	6818      	ldr	r0, [r3, #0]
 80129be:	4b5f      	ldr	r3, [pc, #380]	; (8012b3c <tcp_listen_input+0x1a4>)
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	4b5e      	ldr	r3, [pc, #376]	; (8012b40 <tcp_listen_input+0x1a8>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129ca:	4b5e      	ldr	r3, [pc, #376]	; (8012b44 <tcp_listen_input+0x1ac>)
 80129cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ce:	885b      	ldrh	r3, [r3, #2]
 80129d0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129d2:	4a5c      	ldr	r2, [pc, #368]	; (8012b44 <tcp_listen_input+0x1ac>)
 80129d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129d6:	8812      	ldrh	r2, [r2, #0]
 80129d8:	b292      	uxth	r2, r2
 80129da:	9201      	str	r2, [sp, #4]
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	4b5a      	ldr	r3, [pc, #360]	; (8012b48 <tcp_listen_input+0x1b0>)
 80129e0:	4a5a      	ldr	r2, [pc, #360]	; (8012b4c <tcp_listen_input+0x1b4>)
 80129e2:	f002 ff53 	bl	801588c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80129e6:	e0a0      	b.n	8012b2a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 80129e8:	4b52      	ldr	r3, [pc, #328]	; (8012b34 <tcp_listen_input+0x19c>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	f003 0302 	and.w	r3, r3, #2
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f000 809a 	beq.w	8012b2a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	7d5b      	ldrb	r3, [r3, #21]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7ff f938 	bl	8011c70 <tcp_alloc>
 8012a00:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d111      	bne.n	8012a2c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	699b      	ldr	r3, [r3, #24]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00a      	beq.n	8012a26 <tcp_listen_input+0x8e>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	699b      	ldr	r3, [r3, #24]
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	6910      	ldr	r0, [r2, #16]
 8012a18:	f04f 32ff 	mov.w	r2, #4294967295
 8012a1c:	2100      	movs	r1, #0
 8012a1e:	4798      	blx	r3
 8012a20:	4603      	mov	r3, r0
 8012a22:	73bb      	strb	r3, [r7, #14]
      return;
 8012a24:	e082      	b.n	8012b2c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012a26:	23f0      	movs	r3, #240	; 0xf0
 8012a28:	73bb      	strb	r3, [r7, #14]
      return;
 8012a2a:	e07f      	b.n	8012b2c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012a2c:	4b48      	ldr	r3, [pc, #288]	; (8012b50 <tcp_listen_input+0x1b8>)
 8012a2e:	695a      	ldr	r2, [r3, #20]
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012a34:	4b46      	ldr	r3, [pc, #280]	; (8012b50 <tcp_listen_input+0x1b8>)
 8012a36:	691a      	ldr	r2, [r3, #16]
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	8ada      	ldrh	r2, [r3, #22]
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012a44:	4b3f      	ldr	r3, [pc, #252]	; (8012b44 <tcp_listen_input+0x1ac>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	881b      	ldrh	r3, [r3, #0]
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	2203      	movs	r2, #3
 8012a54:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012a56:	4b3a      	ldr	r3, [pc, #232]	; (8012b40 <tcp_listen_input+0x1a8>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	1c5a      	adds	r2, r3, #1
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012a68:	6978      	ldr	r0, [r7, #20]
 8012a6a:	f7ff fb01 	bl	8012070 <tcp_next_iss>
 8012a6e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	693a      	ldr	r2, [r7, #16]
 8012a74:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	693a      	ldr	r2, [r7, #16]
 8012a7a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	693a      	ldr	r2, [r7, #16]
 8012a80:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	693a      	ldr	r2, [r7, #16]
 8012a86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012a88:	4b2d      	ldr	r3, [pc, #180]	; (8012b40 <tcp_listen_input+0x1a8>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	1e5a      	subs	r2, r3, #1
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	691a      	ldr	r2, [r3, #16]
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	7a1b      	ldrb	r3, [r3, #8]
 8012aa4:	f003 030c 	and.w	r3, r3, #12
 8012aa8:	b2da      	uxtb	r2, r3
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012aae:	4b29      	ldr	r3, [pc, #164]	; (8012b54 <tcp_listen_input+0x1bc>)
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	60da      	str	r2, [r3, #12]
 8012ab6:	4a27      	ldr	r2, [pc, #156]	; (8012b54 <tcp_listen_input+0x1bc>)
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	6013      	str	r3, [r2, #0]
 8012abc:	f003 f938 	bl	8015d30 <tcp_timer_needed>
 8012ac0:	4b25      	ldr	r3, [pc, #148]	; (8012b58 <tcp_listen_input+0x1c0>)
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012ac6:	6978      	ldr	r0, [r7, #20]
 8012ac8:	f001 fd14 	bl	80144f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012acc:	4b1d      	ldr	r3, [pc, #116]	; (8012b44 <tcp_listen_input+0x1ac>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	89db      	ldrh	r3, [r3, #14]
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	3304      	adds	r3, #4
 8012aee:	4619      	mov	r1, r3
 8012af0:	4610      	mov	r0, r2
 8012af2:	f7ff fad5 	bl	80120a0 <tcp_eff_send_mss_impl>
 8012af6:	4603      	mov	r3, r0
 8012af8:	461a      	mov	r2, r3
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012afe:	2112      	movs	r1, #18
 8012b00:	6978      	ldr	r0, [r7, #20]
 8012b02:	f002 fae1 	bl	80150c8 <tcp_enqueue_flags>
 8012b06:	4603      	mov	r3, r0
 8012b08:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d004      	beq.n	8012b1c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8012b12:	2100      	movs	r1, #0
 8012b14:	6978      	ldr	r0, [r7, #20]
 8012b16:	f7fe f913 	bl	8010d40 <tcp_abandon>
      return;
 8012b1a:	e007      	b.n	8012b2c <tcp_listen_input+0x194>
    tcp_output(npcb);
 8012b1c:	6978      	ldr	r0, [r7, #20]
 8012b1e:	f002 fc2b 	bl	8015378 <tcp_output>
  return;
 8012b22:	bf00      	nop
 8012b24:	e001      	b.n	8012b2a <tcp_listen_input+0x192>
    return;
 8012b26:	bf00      	nop
 8012b28:	e000      	b.n	8012b2c <tcp_listen_input+0x194>
  return;
 8012b2a:	bf00      	nop
}
 8012b2c:	3718      	adds	r7, #24
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	bf00      	nop
 8012b34:	200040e0 	.word	0x200040e0
 8012b38:	200040d8 	.word	0x200040d8
 8012b3c:	200040de 	.word	0x200040de
 8012b40:	200040d4 	.word	0x200040d4
 8012b44:	200040c4 	.word	0x200040c4
 8012b48:	20004904 	.word	0x20004904
 8012b4c:	20004908 	.word	0x20004908
 8012b50:	200048f4 	.word	0x200048f4
 8012b54:	200079b0 	.word	0x200079b0
 8012b58:	200079ac 	.word	0x200079ac

08012b5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012b64:	4b29      	ldr	r3, [pc, #164]	; (8012c0c <tcp_timewait_input+0xb0>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	f003 0304 	and.w	r3, r3, #4
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d147      	bne.n	8012c00 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012b70:	4b26      	ldr	r3, [pc, #152]	; (8012c0c <tcp_timewait_input+0xb0>)
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	f003 0302 	and.w	r3, r3, #2
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d027      	beq.n	8012bcc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012b7c:	4b24      	ldr	r3, [pc, #144]	; (8012c10 <tcp_timewait_input+0xb4>)
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	db2a      	blt.n	8012be0 <tcp_timewait_input+0x84>
 8012b8a:	4b21      	ldr	r3, [pc, #132]	; (8012c10 <tcp_timewait_input+0xb4>)
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b92:	6879      	ldr	r1, [r7, #4]
 8012b94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b96:	440b      	add	r3, r1
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	dc20      	bgt.n	8012be0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b9e:	4b1d      	ldr	r3, [pc, #116]	; (8012c14 <tcp_timewait_input+0xb8>)
 8012ba0:	6818      	ldr	r0, [r3, #0]
 8012ba2:	4b1d      	ldr	r3, [pc, #116]	; (8012c18 <tcp_timewait_input+0xbc>)
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	4b19      	ldr	r3, [pc, #100]	; (8012c10 <tcp_timewait_input+0xb4>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bae:	4b1b      	ldr	r3, [pc, #108]	; (8012c1c <tcp_timewait_input+0xc0>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bb2:	885b      	ldrh	r3, [r3, #2]
 8012bb4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012bb6:	4a19      	ldr	r2, [pc, #100]	; (8012c1c <tcp_timewait_input+0xc0>)
 8012bb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012bba:	8812      	ldrh	r2, [r2, #0]
 8012bbc:	b292      	uxth	r2, r2
 8012bbe:	9201      	str	r2, [sp, #4]
 8012bc0:	9300      	str	r3, [sp, #0]
 8012bc2:	4b17      	ldr	r3, [pc, #92]	; (8012c20 <tcp_timewait_input+0xc4>)
 8012bc4:	4a17      	ldr	r2, [pc, #92]	; (8012c24 <tcp_timewait_input+0xc8>)
 8012bc6:	f002 fe61 	bl	801588c <tcp_rst>
      return;
 8012bca:	e01c      	b.n	8012c06 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8012bcc:	4b0f      	ldr	r3, [pc, #60]	; (8012c0c <tcp_timewait_input+0xb0>)
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	f003 0301 	and.w	r3, r3, #1
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d003      	beq.n	8012be0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012bd8:	4b13      	ldr	r3, [pc, #76]	; (8012c28 <tcp_timewait_input+0xcc>)
 8012bda:	681a      	ldr	r2, [r3, #0]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012be0:	4b0d      	ldr	r3, [pc, #52]	; (8012c18 <tcp_timewait_input+0xbc>)
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d00d      	beq.n	8012c04 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	7e9b      	ldrb	r3, [r3, #26]
 8012bec:	f043 0302 	orr.w	r3, r3, #2
 8012bf0:	b2da      	uxtb	r2, r3
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f002 fbbe 	bl	8015378 <tcp_output>
  }
  return;
 8012bfc:	bf00      	nop
 8012bfe:	e001      	b.n	8012c04 <tcp_timewait_input+0xa8>
    return;
 8012c00:	bf00      	nop
 8012c02:	e000      	b.n	8012c06 <tcp_timewait_input+0xaa>
  return;
 8012c04:	bf00      	nop
}
 8012c06:	3708      	adds	r7, #8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	200040e0 	.word	0x200040e0
 8012c10:	200040d4 	.word	0x200040d4
 8012c14:	200040d8 	.word	0x200040d8
 8012c18:	200040de 	.word	0x200040de
 8012c1c:	200040c4 	.word	0x200040c4
 8012c20:	20004904 	.word	0x20004904
 8012c24:	20004908 	.word	0x20004908
 8012c28:	200079b4 	.word	0x200079b4

08012c2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b08a      	sub	sp, #40	; 0x28
 8012c30:	af02      	add	r7, sp, #8
 8012c32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012c34:	2300      	movs	r3, #0
 8012c36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012c3c:	4ba4      	ldr	r3, [pc, #656]	; (8012ed0 <tcp_process+0x2a4>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f003 0304 	and.w	r3, r3, #4
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d04e      	beq.n	8012ce6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	7d1b      	ldrb	r3, [r3, #20]
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	d108      	bne.n	8012c62 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c54:	4b9f      	ldr	r3, [pc, #636]	; (8012ed4 <tcp_process+0x2a8>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d123      	bne.n	8012ca4 <tcp_process+0x78>
        acceptable = 1;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	76fb      	strb	r3, [r7, #27]
 8012c60:	e020      	b.n	8012ca4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c66:	4b9c      	ldr	r3, [pc, #624]	; (8012ed8 <tcp_process+0x2ac>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d102      	bne.n	8012c74 <tcp_process+0x48>
        acceptable = 1;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	76fb      	strb	r3, [r7, #27]
 8012c72:	e017      	b.n	8012ca4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c74:	4b98      	ldr	r3, [pc, #608]	; (8012ed8 <tcp_process+0x2ac>)
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c7c:	1ad3      	subs	r3, r2, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	db10      	blt.n	8012ca4 <tcp_process+0x78>
 8012c82:	4b95      	ldr	r3, [pc, #596]	; (8012ed8 <tcp_process+0x2ac>)
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c8a:	6879      	ldr	r1, [r7, #4]
 8012c8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c8e:	440b      	add	r3, r1
 8012c90:	1ad3      	subs	r3, r2, r3
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	dc06      	bgt.n	8012ca4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	7e9b      	ldrb	r3, [r3, #26]
 8012c9a:	f043 0302 	orr.w	r3, r3, #2
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012ca4:	7efb      	ldrb	r3, [r7, #27]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d01b      	beq.n	8012ce2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	7d1b      	ldrb	r3, [r3, #20]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d106      	bne.n	8012cc0 <tcp_process+0x94>
 8012cb2:	4b8a      	ldr	r3, [pc, #552]	; (8012edc <tcp_process+0x2b0>)
 8012cb4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012cb8:	4989      	ldr	r1, [pc, #548]	; (8012ee0 <tcp_process+0x2b4>)
 8012cba:	488a      	ldr	r0, [pc, #552]	; (8012ee4 <tcp_process+0x2b8>)
 8012cbc:	f006 f888 	bl	8018dd0 <iprintf>
      recv_flags |= TF_RESET;
 8012cc0:	4b89      	ldr	r3, [pc, #548]	; (8012ee8 <tcp_process+0x2bc>)
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	f043 0308 	orr.w	r3, r3, #8
 8012cc8:	b2da      	uxtb	r2, r3
 8012cca:	4b87      	ldr	r3, [pc, #540]	; (8012ee8 <tcp_process+0x2bc>)
 8012ccc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	7e9b      	ldrb	r3, [r3, #26]
 8012cd2:	f023 0301 	bic.w	r3, r3, #1
 8012cd6:	b2da      	uxtb	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8012cdc:	f06f 030d 	mvn.w	r3, #13
 8012ce0:	e34d      	b.n	801337e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	e34b      	b.n	801337e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012ce6:	4b7a      	ldr	r3, [pc, #488]	; (8012ed0 <tcp_process+0x2a4>)
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	f003 0302 	and.w	r3, r3, #2
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d010      	beq.n	8012d14 <tcp_process+0xe8>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	7d1b      	ldrb	r3, [r3, #20]
 8012cf6:	2b02      	cmp	r3, #2
 8012cf8:	d00c      	beq.n	8012d14 <tcp_process+0xe8>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	7d1b      	ldrb	r3, [r3, #20]
 8012cfe:	2b03      	cmp	r3, #3
 8012d00:	d008      	beq.n	8012d14 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	7e9b      	ldrb	r3, [r3, #26]
 8012d06:	f043 0302 	orr.w	r3, r3, #2
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012d10:	2300      	movs	r3, #0
 8012d12:	e334      	b.n	801337e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	7e9b      	ldrb	r3, [r3, #26]
 8012d18:	f003 0310 	and.w	r3, r3, #16
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d103      	bne.n	8012d28 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012d20:	4b72      	ldr	r3, [pc, #456]	; (8012eec <tcp_process+0x2c0>)
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f001 fbdf 	bl	80144f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	7d1b      	ldrb	r3, [r3, #20]
 8012d3a:	3b02      	subs	r3, #2
 8012d3c:	2b07      	cmp	r3, #7
 8012d3e:	f200 830e 	bhi.w	801335e <tcp_process+0x732>
 8012d42:	a201      	add	r2, pc, #4	; (adr r2, 8012d48 <tcp_process+0x11c>)
 8012d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d48:	08012d69 	.word	0x08012d69
 8012d4c:	08012f61 	.word	0x08012f61
 8012d50:	080130b9 	.word	0x080130b9
 8012d54:	080130e3 	.word	0x080130e3
 8012d58:	0801320d 	.word	0x0801320d
 8012d5c:	080130b9 	.word	0x080130b9
 8012d60:	08013299 	.word	0x08013299
 8012d64:	08013329 	.word	0x08013329
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012d68:	4b59      	ldr	r3, [pc, #356]	; (8012ed0 <tcp_process+0x2a4>)
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	f003 0310 	and.w	r3, r3, #16
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	f000 80cb 	beq.w	8012f0c <tcp_process+0x2e0>
 8012d76:	4b56      	ldr	r3, [pc, #344]	; (8012ed0 <tcp_process+0x2a4>)
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	f003 0302 	and.w	r3, r3, #2
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	f000 80c4 	beq.w	8012f0c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d88:	1c5a      	adds	r2, r3, #1
 8012d8a:	4b52      	ldr	r3, [pc, #328]	; (8012ed4 <tcp_process+0x2a8>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	f040 80bc 	bne.w	8012f0c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8012d94:	4b50      	ldr	r3, [pc, #320]	; (8012ed8 <tcp_process+0x2ac>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	1c5a      	adds	r2, r3, #1
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8012da6:	4b4b      	ldr	r3, [pc, #300]	; (8012ed4 <tcp_process+0x2a8>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8012dae:	4b50      	ldr	r3, [pc, #320]	; (8012ef0 <tcp_process+0x2c4>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	89db      	ldrh	r3, [r3, #14]
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012dc8:	4b43      	ldr	r3, [pc, #268]	; (8012ed8 <tcp_process+0x2ac>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	1e5a      	subs	r2, r3, #1
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2204      	movs	r2, #4
 8012dd6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3304      	adds	r3, #4
 8012de0:	4619      	mov	r1, r3
 8012de2:	4610      	mov	r0, r2
 8012de4:	f7ff f95c 	bl	80120a0 <tcp_eff_send_mss_impl>
 8012de8:	4603      	mov	r3, r0
 8012dea:	461a      	mov	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012df4:	005b      	lsls	r3, r3, #1
 8012df6:	f241 121c 	movw	r2, #4380	; 0x111c
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	bf38      	it	cc
 8012dfe:	461a      	movcc	r2, r3
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4293      	cmp	r3, r2
 8012e08:	bf28      	it	cs
 8012e0a:	4613      	movcs	r3, r2
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d106      	bne.n	8012e2c <tcp_process+0x200>
 8012e1e:	4b2f      	ldr	r3, [pc, #188]	; (8012edc <tcp_process+0x2b0>)
 8012e20:	f240 321a 	movw	r2, #794	; 0x31a
 8012e24:	4933      	ldr	r1, [pc, #204]	; (8012ef4 <tcp_process+0x2c8>)
 8012e26:	482f      	ldr	r0, [pc, #188]	; (8012ee4 <tcp_process+0x2b8>)
 8012e28:	f005 ffd2 	bl	8018dd0 <iprintf>
      --pcb->snd_queuelen;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e32:	3b01      	subs	r3, #1
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e40:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d111      	bne.n	8012e6c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e4c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d106      	bne.n	8012e62 <tcp_process+0x236>
 8012e54:	4b21      	ldr	r3, [pc, #132]	; (8012edc <tcp_process+0x2b0>)
 8012e56:	f240 3222 	movw	r2, #802	; 0x322
 8012e5a:	4927      	ldr	r1, [pc, #156]	; (8012ef8 <tcp_process+0x2cc>)
 8012e5c:	4821      	ldr	r0, [pc, #132]	; (8012ee4 <tcp_process+0x2b8>)
 8012e5e:	f005 ffb7 	bl	8018dd0 <iprintf>
        pcb->unsent = rseg->next;
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	669a      	str	r2, [r3, #104]	; 0x68
 8012e6a:	e003      	b.n	8012e74 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8012e74:	69f8      	ldr	r0, [r7, #28]
 8012e76:	f7fe fde8 	bl	8011a4a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d104      	bne.n	8012e8c <tcp_process+0x260>
        pcb->rtime = -1;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e88:	861a      	strh	r2, [r3, #48]	; 0x30
 8012e8a:	e006      	b.n	8012e9a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2200      	movs	r2, #0
 8012e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d00a      	beq.n	8012eba <tcp_process+0x28e>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	6910      	ldr	r0, [r2, #16]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	6879      	ldr	r1, [r7, #4]
 8012eb2:	4798      	blx	r3
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	76bb      	strb	r3, [r7, #26]
 8012eb8:	e001      	b.n	8012ebe <tcp_process+0x292>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8012ebe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ec2:	f113 0f0d 	cmn.w	r3, #13
 8012ec6:	d119      	bne.n	8012efc <tcp_process+0x2d0>
        return ERR_ABRT;
 8012ec8:	f06f 030c 	mvn.w	r3, #12
 8012ecc:	e257      	b.n	801337e <tcp_process+0x752>
 8012ece:	bf00      	nop
 8012ed0:	200040e0 	.word	0x200040e0
 8012ed4:	200040d8 	.word	0x200040d8
 8012ed8:	200040d4 	.word	0x200040d4
 8012edc:	0801b4f8 	.word	0x0801b4f8
 8012ee0:	0801b6d4 	.word	0x0801b6d4
 8012ee4:	0801b560 	.word	0x0801b560
 8012ee8:	200040e1 	.word	0x200040e1
 8012eec:	200079b4 	.word	0x200079b4
 8012ef0:	200040c4 	.word	0x200040c4
 8012ef4:	0801b6f4 	.word	0x0801b6f4
 8012ef8:	0801b70c 	.word	0x0801b70c
      }
      tcp_ack_now(pcb);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	7e9b      	ldrb	r3, [r3, #26]
 8012f00:	f043 0302 	orr.w	r3, r3, #2
 8012f04:	b2da      	uxtb	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8012f0a:	e22a      	b.n	8013362 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8012f0c:	4b9f      	ldr	r3, [pc, #636]	; (801318c <tcp_process+0x560>)
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	f003 0310 	and.w	r3, r3, #16
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	f000 8224 	beq.w	8013362 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f1a:	4b9d      	ldr	r3, [pc, #628]	; (8013190 <tcp_process+0x564>)
 8012f1c:	6818      	ldr	r0, [r3, #0]
 8012f1e:	4b9d      	ldr	r3, [pc, #628]	; (8013194 <tcp_process+0x568>)
 8012f20:	881b      	ldrh	r3, [r3, #0]
 8012f22:	461a      	mov	r2, r3
 8012f24:	4b9c      	ldr	r3, [pc, #624]	; (8013198 <tcp_process+0x56c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f2a:	4b9c      	ldr	r3, [pc, #624]	; (801319c <tcp_process+0x570>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f2e:	885b      	ldrh	r3, [r3, #2]
 8012f30:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f32:	4a9a      	ldr	r2, [pc, #616]	; (801319c <tcp_process+0x570>)
 8012f34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f36:	8812      	ldrh	r2, [r2, #0]
 8012f38:	b292      	uxth	r2, r2
 8012f3a:	9201      	str	r2, [sp, #4]
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	4b98      	ldr	r3, [pc, #608]	; (80131a0 <tcp_process+0x574>)
 8012f40:	4a98      	ldr	r2, [pc, #608]	; (80131a4 <tcp_process+0x578>)
 8012f42:	f002 fca3 	bl	801588c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f4c:	2b05      	cmp	r3, #5
 8012f4e:	f200 8208 	bhi.w	8013362 <tcp_process+0x736>
        pcb->rtime = 0;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f002 fd0d 	bl	8015978 <tcp_rexmit_rto>
    break;
 8012f5e:	e200      	b.n	8013362 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8012f60:	4b8a      	ldr	r3, [pc, #552]	; (801318c <tcp_process+0x560>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0310 	and.w	r3, r3, #16
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 8091 	beq.w	8013090 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8012f6e:	4b88      	ldr	r3, [pc, #544]	; (8013190 <tcp_process+0x564>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	db71      	blt.n	8013062 <tcp_process+0x436>
 8012f7e:	4b84      	ldr	r3, [pc, #528]	; (8013190 <tcp_process+0x564>)
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	dc6a      	bgt.n	8013062 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2204      	movs	r2, #4
 8012f90:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00b      	beq.n	8012fb2 <tcp_process+0x386>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f9e:	699b      	ldr	r3, [r3, #24]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d106      	bne.n	8012fb2 <tcp_process+0x386>
 8012fa4:	4b80      	ldr	r3, [pc, #512]	; (80131a8 <tcp_process+0x57c>)
 8012fa6:	f240 3251 	movw	r2, #849	; 0x351
 8012faa:	4980      	ldr	r1, [pc, #512]	; (80131ac <tcp_process+0x580>)
 8012fac:	4880      	ldr	r0, [pc, #512]	; (80131b0 <tcp_process+0x584>)
 8012fae:	f005 ff0f 	bl	8018dd0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d102      	bne.n	8012fc0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8012fba:	23fa      	movs	r3, #250	; 0xfa
 8012fbc:	76bb      	strb	r3, [r7, #26]
 8012fbe:	e011      	b.n	8012fe4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fc4:	699b      	ldr	r3, [r3, #24]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00a      	beq.n	8012fe0 <tcp_process+0x3b4>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fce:	699b      	ldr	r3, [r3, #24]
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	6910      	ldr	r0, [r2, #16]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	4798      	blx	r3
 8012fda:	4603      	mov	r3, r0
 8012fdc:	76bb      	strb	r3, [r7, #26]
 8012fde:	e001      	b.n	8012fe4 <tcp_process+0x3b8>
 8012fe0:	23f0      	movs	r3, #240	; 0xf0
 8012fe2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8012fe4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00a      	beq.n	8013002 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8012fec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ff0:	f113 0f0d 	cmn.w	r3, #13
 8012ff4:	d002      	beq.n	8012ffc <tcp_process+0x3d0>
            tcp_abort(pcb);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7fd ff54 	bl	8010ea4 <tcp_abort>
          }
          return ERR_ABRT;
 8012ffc:	f06f 030c 	mvn.w	r3, #12
 8013000:	e1bd      	b.n	801337e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f000 fa42 	bl	801348c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013008:	4b6a      	ldr	r3, [pc, #424]	; (80131b4 <tcp_process+0x588>)
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d005      	beq.n	801301c <tcp_process+0x3f0>
          recv_acked--;
 8013010:	4b68      	ldr	r3, [pc, #416]	; (80131b4 <tcp_process+0x588>)
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	3b01      	subs	r3, #1
 8013016:	b29a      	uxth	r2, r3
 8013018:	4b66      	ldr	r3, [pc, #408]	; (80131b4 <tcp_process+0x588>)
 801301a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013020:	005b      	lsls	r3, r3, #1
 8013022:	f241 121c 	movw	r2, #4380	; 0x111c
 8013026:	429a      	cmp	r2, r3
 8013028:	bf38      	it	cc
 801302a:	461a      	movcc	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	4293      	cmp	r3, r2
 8013034:	bf28      	it	cs
 8013036:	4613      	movcs	r3, r2
 8013038:	b29a      	uxth	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8013040:	4b5d      	ldr	r3, [pc, #372]	; (80131b8 <tcp_process+0x58c>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	f003 0320 	and.w	r3, r3, #32
 8013048:	2b00      	cmp	r3, #0
 801304a:	d034      	beq.n	80130b6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	7e9b      	ldrb	r3, [r3, #26]
 8013050:	f043 0302 	orr.w	r3, r3, #2
 8013054:	b2da      	uxtb	r2, r3
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2207      	movs	r2, #7
 801305e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8013060:	e029      	b.n	80130b6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013062:	4b4b      	ldr	r3, [pc, #300]	; (8013190 <tcp_process+0x564>)
 8013064:	6818      	ldr	r0, [r3, #0]
 8013066:	4b4b      	ldr	r3, [pc, #300]	; (8013194 <tcp_process+0x568>)
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	461a      	mov	r2, r3
 801306c:	4b4a      	ldr	r3, [pc, #296]	; (8013198 <tcp_process+0x56c>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013072:	4b4a      	ldr	r3, [pc, #296]	; (801319c <tcp_process+0x570>)
 8013074:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013076:	885b      	ldrh	r3, [r3, #2]
 8013078:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801307a:	4a48      	ldr	r2, [pc, #288]	; (801319c <tcp_process+0x570>)
 801307c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801307e:	8812      	ldrh	r2, [r2, #0]
 8013080:	b292      	uxth	r2, r2
 8013082:	9201      	str	r2, [sp, #4]
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	4b46      	ldr	r3, [pc, #280]	; (80131a0 <tcp_process+0x574>)
 8013088:	4a46      	ldr	r2, [pc, #280]	; (80131a4 <tcp_process+0x578>)
 801308a:	f002 fbff 	bl	801588c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801308e:	e16a      	b.n	8013366 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013090:	4b3e      	ldr	r3, [pc, #248]	; (801318c <tcp_process+0x560>)
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	f003 0302 	and.w	r3, r3, #2
 8013098:	2b00      	cmp	r3, #0
 801309a:	f000 8164 	beq.w	8013366 <tcp_process+0x73a>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a2:	1e5a      	subs	r2, r3, #1
 80130a4:	4b3c      	ldr	r3, [pc, #240]	; (8013198 <tcp_process+0x56c>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	f040 815c 	bne.w	8013366 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f002 fc98 	bl	80159e4 <tcp_rexmit>
    break;
 80130b4:	e157      	b.n	8013366 <tcp_process+0x73a>
 80130b6:	e156      	b.n	8013366 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 f9e7 	bl	801348c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80130be:	4b3e      	ldr	r3, [pc, #248]	; (80131b8 <tcp_process+0x58c>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	f003 0320 	and.w	r3, r3, #32
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	f000 814f 	beq.w	801336a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	7e9b      	ldrb	r3, [r3, #26]
 80130d0:	f043 0302 	orr.w	r3, r3, #2
 80130d4:	b2da      	uxtb	r2, r3
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2207      	movs	r2, #7
 80130de:	751a      	strb	r2, [r3, #20]
    }
    break;
 80130e0:	e143      	b.n	801336a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 f9d2 	bl	801348c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80130e8:	4b33      	ldr	r3, [pc, #204]	; (80131b8 <tcp_process+0x58c>)
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	f003 0320 	and.w	r3, r3, #32
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d074      	beq.n	80131de <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130f4:	4b25      	ldr	r3, [pc, #148]	; (801318c <tcp_process+0x560>)
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	f003 0310 	and.w	r3, r3, #16
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d063      	beq.n	80131c8 <tcp_process+0x59c>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013104:	4b22      	ldr	r3, [pc, #136]	; (8013190 <tcp_process+0x564>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	429a      	cmp	r2, r3
 801310a:	d15d      	bne.n	80131c8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013110:	2b00      	cmp	r3, #0
 8013112:	d159      	bne.n	80131c8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	7e9b      	ldrb	r3, [r3, #26]
 8013118:	f043 0302 	orr.w	r3, r3, #2
 801311c:	b2da      	uxtb	r2, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f7fe fee6 	bl	8011ef4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013128:	4b24      	ldr	r3, [pc, #144]	; (80131bc <tcp_process+0x590>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	429a      	cmp	r2, r3
 8013130:	d105      	bne.n	801313e <tcp_process+0x512>
 8013132:	4b22      	ldr	r3, [pc, #136]	; (80131bc <tcp_process+0x590>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	4a20      	ldr	r2, [pc, #128]	; (80131bc <tcp_process+0x590>)
 801313a:	6013      	str	r3, [r2, #0]
 801313c:	e013      	b.n	8013166 <tcp_process+0x53a>
 801313e:	4b1f      	ldr	r3, [pc, #124]	; (80131bc <tcp_process+0x590>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	617b      	str	r3, [r7, #20]
 8013144:	e00c      	b.n	8013160 <tcp_process+0x534>
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	429a      	cmp	r2, r3
 801314e:	d104      	bne.n	801315a <tcp_process+0x52e>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	68da      	ldr	r2, [r3, #12]
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	60da      	str	r2, [r3, #12]
 8013158:	e005      	b.n	8013166 <tcp_process+0x53a>
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	617b      	str	r3, [r7, #20]
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d1ef      	bne.n	8013146 <tcp_process+0x51a>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2200      	movs	r2, #0
 801316a:	60da      	str	r2, [r3, #12]
 801316c:	4b14      	ldr	r3, [pc, #80]	; (80131c0 <tcp_process+0x594>)
 801316e:	2201      	movs	r2, #1
 8013170:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	220a      	movs	r2, #10
 8013176:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013178:	4b12      	ldr	r3, [pc, #72]	; (80131c4 <tcp_process+0x598>)
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	60da      	str	r2, [r3, #12]
 8013180:	4a10      	ldr	r2, [pc, #64]	; (80131c4 <tcp_process+0x598>)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6013      	str	r3, [r2, #0]
 8013186:	f002 fdd3 	bl	8015d30 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801318a:	e0f0      	b.n	801336e <tcp_process+0x742>
 801318c:	200040e0 	.word	0x200040e0
 8013190:	200040d8 	.word	0x200040d8
 8013194:	200040de 	.word	0x200040de
 8013198:	200040d4 	.word	0x200040d4
 801319c:	200040c4 	.word	0x200040c4
 80131a0:	20004904 	.word	0x20004904
 80131a4:	20004908 	.word	0x20004908
 80131a8:	0801b4f8 	.word	0x0801b4f8
 80131ac:	0801b720 	.word	0x0801b720
 80131b0:	0801b560 	.word	0x0801b560
 80131b4:	200040dc 	.word	0x200040dc
 80131b8:	200040e1 	.word	0x200040e1
 80131bc:	200079b0 	.word	0x200079b0
 80131c0:	200079ac 	.word	0x200079ac
 80131c4:	200079c0 	.word	0x200079c0
        tcp_ack_now(pcb);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	7e9b      	ldrb	r3, [r3, #26]
 80131cc:	f043 0302 	orr.w	r3, r3, #2
 80131d0:	b2da      	uxtb	r2, r3
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2208      	movs	r2, #8
 80131da:	751a      	strb	r2, [r3, #20]
    break;
 80131dc:	e0c7      	b.n	801336e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131de:	4b6a      	ldr	r3, [pc, #424]	; (8013388 <tcp_process+0x75c>)
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	f003 0310 	and.w	r3, r3, #16
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f000 80c1 	beq.w	801336e <tcp_process+0x742>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131f0:	4b66      	ldr	r3, [pc, #408]	; (801338c <tcp_process+0x760>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	f040 80ba 	bne.w	801336e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f040 80b5 	bne.w	801336e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2206      	movs	r2, #6
 8013208:	751a      	strb	r2, [r3, #20]
    break;
 801320a:	e0b0      	b.n	801336e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f000 f93d 	bl	801348c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013212:	4b5f      	ldr	r3, [pc, #380]	; (8013390 <tcp_process+0x764>)
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	f003 0320 	and.w	r3, r3, #32
 801321a:	2b00      	cmp	r3, #0
 801321c:	f000 80a9 	beq.w	8013372 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	7e9b      	ldrb	r3, [r3, #26]
 8013224:	f043 0302 	orr.w	r3, r3, #2
 8013228:	b2da      	uxtb	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7fe fe60 	bl	8011ef4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013234:	4b57      	ldr	r3, [pc, #348]	; (8013394 <tcp_process+0x768>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	429a      	cmp	r2, r3
 801323c:	d105      	bne.n	801324a <tcp_process+0x61e>
 801323e:	4b55      	ldr	r3, [pc, #340]	; (8013394 <tcp_process+0x768>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	68db      	ldr	r3, [r3, #12]
 8013244:	4a53      	ldr	r2, [pc, #332]	; (8013394 <tcp_process+0x768>)
 8013246:	6013      	str	r3, [r2, #0]
 8013248:	e013      	b.n	8013272 <tcp_process+0x646>
 801324a:	4b52      	ldr	r3, [pc, #328]	; (8013394 <tcp_process+0x768>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	613b      	str	r3, [r7, #16]
 8013250:	e00c      	b.n	801326c <tcp_process+0x640>
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	429a      	cmp	r2, r3
 801325a:	d104      	bne.n	8013266 <tcp_process+0x63a>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	68da      	ldr	r2, [r3, #12]
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	60da      	str	r2, [r3, #12]
 8013264:	e005      	b.n	8013272 <tcp_process+0x646>
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	613b      	str	r3, [r7, #16]
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d1ef      	bne.n	8013252 <tcp_process+0x626>
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2200      	movs	r2, #0
 8013276:	60da      	str	r2, [r3, #12]
 8013278:	4b47      	ldr	r3, [pc, #284]	; (8013398 <tcp_process+0x76c>)
 801327a:	2201      	movs	r2, #1
 801327c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	220a      	movs	r2, #10
 8013282:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013284:	4b45      	ldr	r3, [pc, #276]	; (801339c <tcp_process+0x770>)
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	60da      	str	r2, [r3, #12]
 801328c:	4a43      	ldr	r2, [pc, #268]	; (801339c <tcp_process+0x770>)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6013      	str	r3, [r2, #0]
 8013292:	f002 fd4d 	bl	8015d30 <tcp_timer_needed>
    }
    break;
 8013296:	e06c      	b.n	8013372 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f000 f8f7 	bl	801348c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801329e:	4b3a      	ldr	r3, [pc, #232]	; (8013388 <tcp_process+0x75c>)
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	f003 0310 	and.w	r3, r3, #16
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d065      	beq.n	8013376 <tcp_process+0x74a>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80132ae:	4b37      	ldr	r3, [pc, #220]	; (801338c <tcp_process+0x760>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d15f      	bne.n	8013376 <tcp_process+0x74a>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d15b      	bne.n	8013376 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f7fe fe18 	bl	8011ef4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80132c4:	4b33      	ldr	r3, [pc, #204]	; (8013394 <tcp_process+0x768>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d105      	bne.n	80132da <tcp_process+0x6ae>
 80132ce:	4b31      	ldr	r3, [pc, #196]	; (8013394 <tcp_process+0x768>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	4a2f      	ldr	r2, [pc, #188]	; (8013394 <tcp_process+0x768>)
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	e013      	b.n	8013302 <tcp_process+0x6d6>
 80132da:	4b2e      	ldr	r3, [pc, #184]	; (8013394 <tcp_process+0x768>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	e00c      	b.n	80132fc <tcp_process+0x6d0>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d104      	bne.n	80132f6 <tcp_process+0x6ca>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	68da      	ldr	r2, [r3, #12]
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	60da      	str	r2, [r3, #12]
 80132f4:	e005      	b.n	8013302 <tcp_process+0x6d6>
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	60fb      	str	r3, [r7, #12]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d1ef      	bne.n	80132e2 <tcp_process+0x6b6>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	60da      	str	r2, [r3, #12]
 8013308:	4b23      	ldr	r3, [pc, #140]	; (8013398 <tcp_process+0x76c>)
 801330a:	2201      	movs	r2, #1
 801330c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	220a      	movs	r2, #10
 8013312:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013314:	4b21      	ldr	r3, [pc, #132]	; (801339c <tcp_process+0x770>)
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	60da      	str	r2, [r3, #12]
 801331c:	4a1f      	ldr	r2, [pc, #124]	; (801339c <tcp_process+0x770>)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6013      	str	r3, [r2, #0]
 8013322:	f002 fd05 	bl	8015d30 <tcp_timer_needed>
    }
    break;
 8013326:	e026      	b.n	8013376 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 f8af 	bl	801348c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801332e:	4b16      	ldr	r3, [pc, #88]	; (8013388 <tcp_process+0x75c>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	f003 0310 	and.w	r3, r3, #16
 8013336:	2b00      	cmp	r3, #0
 8013338:	d01f      	beq.n	801337a <tcp_process+0x74e>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801333e:	4b13      	ldr	r3, [pc, #76]	; (801338c <tcp_process+0x760>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	429a      	cmp	r2, r3
 8013344:	d119      	bne.n	801337a <tcp_process+0x74e>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801334a:	2b00      	cmp	r3, #0
 801334c:	d115      	bne.n	801337a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801334e:	4b10      	ldr	r3, [pc, #64]	; (8013390 <tcp_process+0x764>)
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	f043 0310 	orr.w	r3, r3, #16
 8013356:	b2da      	uxtb	r2, r3
 8013358:	4b0d      	ldr	r3, [pc, #52]	; (8013390 <tcp_process+0x764>)
 801335a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801335c:	e00d      	b.n	801337a <tcp_process+0x74e>
  default:
    break;
 801335e:	bf00      	nop
 8013360:	e00c      	b.n	801337c <tcp_process+0x750>
    break;
 8013362:	bf00      	nop
 8013364:	e00a      	b.n	801337c <tcp_process+0x750>
    break;
 8013366:	bf00      	nop
 8013368:	e008      	b.n	801337c <tcp_process+0x750>
    break;
 801336a:	bf00      	nop
 801336c:	e006      	b.n	801337c <tcp_process+0x750>
    break;
 801336e:	bf00      	nop
 8013370:	e004      	b.n	801337c <tcp_process+0x750>
    break;
 8013372:	bf00      	nop
 8013374:	e002      	b.n	801337c <tcp_process+0x750>
    break;
 8013376:	bf00      	nop
 8013378:	e000      	b.n	801337c <tcp_process+0x750>
    break;
 801337a:	bf00      	nop
  }
  return ERR_OK;
 801337c:	2300      	movs	r3, #0
}
 801337e:	4618      	mov	r0, r3
 8013380:	3720      	adds	r7, #32
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	200040e0 	.word	0x200040e0
 801338c:	200040d8 	.word	0x200040d8
 8013390:	200040e1 	.word	0x200040e1
 8013394:	200079b0 	.word	0x200079b0
 8013398:	200079ac 	.word	0x200079ac
 801339c:	200079c0 	.word	0x200079c0

080133a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80133a0:	b590      	push	{r4, r7, lr}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	899b      	ldrh	r3, [r3, #12]
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fb fe16 	bl	800efe4 <lwip_htons>
 80133b8:	4603      	mov	r3, r0
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d027      	beq.n	8013412 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80133c2:	6838      	ldr	r0, [r7, #0]
 80133c4:	f7fe fb2d 	bl	8011a22 <tcp_segs_free>
    next = NULL;
 80133c8:	2300      	movs	r3, #0
 80133ca:	603b      	str	r3, [r7, #0]
 80133cc:	e055      	b.n	801347a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	899b      	ldrh	r3, [r3, #12]
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fb fe04 	bl	800efe4 <lwip_htons>
 80133dc:	4603      	mov	r3, r0
 80133de:	f003 0301 	and.w	r3, r3, #1
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d00d      	beq.n	8013402 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	899b      	ldrh	r3, [r3, #12]
 80133ec:	b29c      	uxth	r4, r3
 80133ee:	2001      	movs	r0, #1
 80133f0:	f7fb fdf8 	bl	800efe4 <lwip_htons>
 80133f4:	4603      	mov	r3, r0
 80133f6:	461a      	mov	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	4322      	orrs	r2, r4
 80133fe:	b292      	uxth	r2, r2
 8013400:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f7fe fb1c 	bl	8011a4a <tcp_seg_free>
    while (next &&
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00e      	beq.n	8013436 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	891b      	ldrh	r3, [r3, #8]
 801341c:	461a      	mov	r2, r3
 801341e:	4b1a      	ldr	r3, [pc, #104]	; (8013488 <tcp_oos_insert_segment+0xe8>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	441a      	add	r2, r3
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	6839      	ldr	r1, [r7, #0]
 801342c:	8909      	ldrh	r1, [r1, #8]
 801342e:	440b      	add	r3, r1
 8013430:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013432:	2b00      	cmp	r3, #0
 8013434:	dacb      	bge.n	80133ce <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d01e      	beq.n	801347a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	891b      	ldrh	r3, [r3, #8]
 8013440:	461a      	mov	r2, r3
 8013442:	4b11      	ldr	r3, [pc, #68]	; (8013488 <tcp_oos_insert_segment+0xe8>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	441a      	add	r2, r3
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013450:	2b00      	cmp	r3, #0
 8013452:	dd12      	ble.n	801347a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	68db      	ldr	r3, [r3, #12]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	b29a      	uxth	r2, r3
 801345c:	4b0a      	ldr	r3, [pc, #40]	; (8013488 <tcp_oos_insert_segment+0xe8>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	b29b      	uxth	r3, r3
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	b29a      	uxth	r2, r3
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	685a      	ldr	r2, [r3, #4]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	891b      	ldrh	r3, [r3, #8]
 8013472:	4619      	mov	r1, r3
 8013474:	4610      	mov	r0, r2
 8013476:	f7fc fe5b 	bl	8010130 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	683a      	ldr	r2, [r7, #0]
 801347e:	601a      	str	r2, [r3, #0]
}
 8013480:	bf00      	nop
 8013482:	3714      	adds	r7, #20
 8013484:	46bd      	mov	sp, r7
 8013486:	bd90      	pop	{r4, r7, pc}
 8013488:	200040d4 	.word	0x200040d4

0801348c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801348e:	b08d      	sub	sp, #52	; 0x34
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	7d1b      	ldrb	r3, [r3, #20]
 801349c:	2b03      	cmp	r3, #3
 801349e:	d806      	bhi.n	80134ae <tcp_receive+0x22>
 80134a0:	4ba6      	ldr	r3, [pc, #664]	; (801373c <tcp_receive+0x2b0>)
 80134a2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80134a6:	49a6      	ldr	r1, [pc, #664]	; (8013740 <tcp_receive+0x2b4>)
 80134a8:	48a6      	ldr	r0, [pc, #664]	; (8013744 <tcp_receive+0x2b8>)
 80134aa:	f005 fc91 	bl	8018dd0 <iprintf>

  if (flags & TCP_ACK) {
 80134ae:	4ba6      	ldr	r3, [pc, #664]	; (8013748 <tcp_receive+0x2bc>)
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	f003 0310 	and.w	r3, r3, #16
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	f000 82bf 	beq.w	8013a3a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80134c2:	461a      	mov	r2, r3
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134c8:	4413      	add	r3, r2
 80134ca:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134d0:	4b9e      	ldr	r3, [pc, #632]	; (801374c <tcp_receive+0x2c0>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	1ad3      	subs	r3, r2, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	db1b      	blt.n	8013512 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134de:	4b9b      	ldr	r3, [pc, #620]	; (801374c <tcp_receive+0x2c0>)
 80134e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d106      	bne.n	80134f4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134ea:	4b99      	ldr	r3, [pc, #612]	; (8013750 <tcp_receive+0x2c4>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	1ad3      	subs	r3, r2, r3
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	db0e      	blt.n	8013512 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134f8:	4b95      	ldr	r3, [pc, #596]	; (8013750 <tcp_receive+0x2c4>)
 80134fa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d141      	bne.n	8013584 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013500:	4b94      	ldr	r3, [pc, #592]	; (8013754 <tcp_receive+0x2c8>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	89db      	ldrh	r3, [r3, #14]
 8013506:	b29a      	uxth	r2, r3
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801350e:	429a      	cmp	r2, r3
 8013510:	d938      	bls.n	8013584 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013512:	4b90      	ldr	r3, [pc, #576]	; (8013754 <tcp_receive+0x2c8>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	89db      	ldrh	r3, [r3, #14]
 8013518:	b29a      	uxth	r2, r3
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801352c:	429a      	cmp	r2, r3
 801352e:	d205      	bcs.n	801353c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801353c:	4b83      	ldr	r3, [pc, #524]	; (801374c <tcp_receive+0x2c0>)
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8013544:	4b82      	ldr	r3, [pc, #520]	; (8013750 <tcp_receive+0x2c4>)
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013552:	2b00      	cmp	r3, #0
 8013554:	d10d      	bne.n	8013572 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801355c:	2b00      	cmp	r3, #0
 801355e:	d111      	bne.n	8013584 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2200      	movs	r2, #0
 8013564:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2201      	movs	r2, #1
 801356c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8013570:	e008      	b.n	8013584 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013578:	2b00      	cmp	r3, #0
 801357a:	d003      	beq.n	8013584 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2200      	movs	r2, #0
 8013580:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013584:	4b72      	ldr	r3, [pc, #456]	; (8013750 <tcp_receive+0x2c4>)
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	2b00      	cmp	r3, #0
 8013590:	dc53      	bgt.n	801363a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013592:	4b71      	ldr	r3, [pc, #452]	; (8013758 <tcp_receive+0x2cc>)
 8013594:	881b      	ldrh	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d146      	bne.n	8013628 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80135a4:	4413      	add	r3, r2
 80135a6:	697a      	ldr	r2, [r7, #20]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d13d      	bne.n	8013628 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	db38      	blt.n	8013628 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135ba:	4b65      	ldr	r3, [pc, #404]	; (8013750 <tcp_receive+0x2c4>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d132      	bne.n	8013628 <tcp_receive+0x19c>
              found_dupack = 1;
 80135c2:	2301      	movs	r3, #1
 80135c4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135cc:	2bff      	cmp	r3, #255	; 0xff
 80135ce:	d007      	beq.n	80135e0 <tcp_receive+0x154>
                ++pcb->dupacks;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135d6:	3301      	adds	r3, #1
 80135d8:	b2da      	uxtb	r2, r3
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135e6:	2b03      	cmp	r3, #3
 80135e8:	d916      	bls.n	8013618 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135f4:	4413      	add	r3, r2
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135fe:	429a      	cmp	r2, r3
 8013600:	d912      	bls.n	8013628 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801360c:	4413      	add	r3, r2
 801360e:	b29a      	uxth	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013616:	e007      	b.n	8013628 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801361e:	2b03      	cmp	r3, #3
 8013620:	d102      	bne.n	8013628 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f002 fa2e 	bl	8015a84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	2b00      	cmp	r3, #0
 801362c:	f040 8169 	bne.w	8013902 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013638:	e163      	b.n	8013902 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801363a:	4b45      	ldr	r3, [pc, #276]	; (8013750 <tcp_receive+0x2c4>)
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013642:	1ad3      	subs	r3, r2, r3
 8013644:	3b01      	subs	r3, #1
 8013646:	2b00      	cmp	r3, #0
 8013648:	f2c0 8107 	blt.w	801385a <tcp_receive+0x3ce>
 801364c:	4b40      	ldr	r3, [pc, #256]	; (8013750 <tcp_receive+0x2c4>)
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013654:	1ad3      	subs	r3, r2, r3
 8013656:	2b00      	cmp	r3, #0
 8013658:	f300 80ff 	bgt.w	801385a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	7e9b      	ldrb	r3, [r3, #26]
 8013660:	f003 0304 	and.w	r3, r3, #4
 8013664:	2b00      	cmp	r3, #0
 8013666:	d00c      	beq.n	8013682 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	7e9b      	ldrb	r3, [r3, #26]
 801366c:	f023 0304 	bic.w	r3, r3, #4
 8013670:	b2da      	uxtb	r2, r3
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013690:	10db      	asrs	r3, r3, #3
 8013692:	b21b      	sxth	r3, r3
 8013694:	b29a      	uxth	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801369c:	b29b      	uxth	r3, r3
 801369e:	4413      	add	r3, r2
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	b21a      	sxth	r2, r3
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2200      	movs	r2, #0
 80136ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80136b2:	4b27      	ldr	r3, [pc, #156]	; (8013750 <tcp_receive+0x2c4>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	7d1b      	ldrb	r3, [r3, #20]
 80136be:	2b03      	cmp	r3, #3
 80136c0:	f240 8094 	bls.w	80137ec <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d216      	bcs.n	8013702 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136de:	4413      	add	r3, r2
 80136e0:	b29a      	uxth	r2, r3
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d97f      	bls.n	80137ec <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136f6:	4413      	add	r3, r2
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013700:	e074      	b.n	80137ec <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801370c:	4619      	mov	r1, r3
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013712:	fb03 f301 	mul.w	r3, r3, r1
 8013716:	6879      	ldr	r1, [r7, #4]
 8013718:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 801371c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013720:	b29b      	uxth	r3, r3
 8013722:	4413      	add	r3, r2
 8013724:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801372c:	8a7a      	ldrh	r2, [r7, #18]
 801372e:	429a      	cmp	r2, r3
 8013730:	d95c      	bls.n	80137ec <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	8a7a      	ldrh	r2, [r7, #18]
 8013736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801373a:	e057      	b.n	80137ec <tcp_receive+0x360>
 801373c:	0801b4f8 	.word	0x0801b4f8
 8013740:	0801b740 	.word	0x0801b740
 8013744:	0801b560 	.word	0x0801b560
 8013748:	200040e0 	.word	0x200040e0
 801374c:	200040d4 	.word	0x200040d4
 8013750:	200040d8 	.word	0x200040d8
 8013754:	200040c4 	.word	0x200040c4
 8013758:	200040de 	.word	0x200040de
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013760:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	4618      	mov	r0, r3
 8013778:	f7fc fee8 	bl	801054c <pbuf_clen>
 801377c:	4603      	mov	r3, r0
 801377e:	429c      	cmp	r4, r3
 8013780:	d206      	bcs.n	8013790 <tcp_receive+0x304>
 8013782:	4b70      	ldr	r3, [pc, #448]	; (8013944 <tcp_receive+0x4b8>)
 8013784:	f240 429e 	movw	r2, #1182	; 0x49e
 8013788:	496f      	ldr	r1, [pc, #444]	; (8013948 <tcp_receive+0x4bc>)
 801378a:	4870      	ldr	r0, [pc, #448]	; (801394c <tcp_receive+0x4c0>)
 801378c:	f005 fb20 	bl	8018dd0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	f7fc fed9 	bl	801054c <pbuf_clen>
 801379a:	4603      	mov	r3, r0
 801379c:	461a      	mov	r2, r3
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80137a4:	1a9b      	subs	r3, r3, r2
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80137ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b0:	891a      	ldrh	r2, [r3, #8]
 80137b2:	4b67      	ldr	r3, [pc, #412]	; (8013950 <tcp_receive+0x4c4>)
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	4413      	add	r3, r2
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	4b65      	ldr	r3, [pc, #404]	; (8013950 <tcp_receive+0x4c4>)
 80137bc:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80137be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137c0:	f7fe f943 	bl	8011a4a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00e      	beq.n	80137ec <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d10a      	bne.n	80137ec <tcp_receive+0x360>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d106      	bne.n	80137ec <tcp_receive+0x360>
 80137de:	4b59      	ldr	r3, [pc, #356]	; (8013944 <tcp_receive+0x4b8>)
 80137e0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80137e4:	495b      	ldr	r1, [pc, #364]	; (8013954 <tcp_receive+0x4c8>)
 80137e6:	4859      	ldr	r0, [pc, #356]	; (801394c <tcp_receive+0x4c0>)
 80137e8:	f005 faf2 	bl	8018dd0 <iprintf>
      while (pcb->unacked != NULL &&
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d022      	beq.n	801383a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7fb fbff 	bl	800f000 <lwip_htonl>
 8013802:	4604      	mov	r4, r0
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013808:	891b      	ldrh	r3, [r3, #8]
 801380a:	461d      	mov	r5, r3
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013810:	68db      	ldr	r3, [r3, #12]
 8013812:	899b      	ldrh	r3, [r3, #12]
 8013814:	b29b      	uxth	r3, r3
 8013816:	4618      	mov	r0, r3
 8013818:	f7fb fbe4 	bl	800efe4 <lwip_htons>
 801381c:	4603      	mov	r3, r0
 801381e:	f003 0303 	and.w	r3, r3, #3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <tcp_receive+0x39e>
 8013826:	2301      	movs	r3, #1
 8013828:	e000      	b.n	801382c <tcp_receive+0x3a0>
 801382a:	2300      	movs	r3, #0
 801382c:	442b      	add	r3, r5
 801382e:	18e2      	adds	r2, r4, r3
 8013830:	4b49      	ldr	r3, [pc, #292]	; (8013958 <tcp_receive+0x4cc>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013836:	2b00      	cmp	r3, #0
 8013838:	dd90      	ble.n	801375c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801383e:	2b00      	cmp	r3, #0
 8013840:	d104      	bne.n	801384c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013848:	861a      	strh	r2, [r3, #48]	; 0x30
 801384a:	e002      	b.n	8013852 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2200      	movs	r2, #0
 8013850:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2200      	movs	r2, #0
 8013856:	76da      	strb	r2, [r3, #27]
 8013858:	e002      	b.n	8013860 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f001 fd30 	bl	80152c0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013860:	e04f      	b.n	8013902 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013866:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013876:	2b00      	cmp	r3, #0
 8013878:	d103      	bne.n	8013882 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2200      	movs	r2, #0
 801387e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	4618      	mov	r0, r3
 801388e:	f7fc fe5d 	bl	801054c <pbuf_clen>
 8013892:	4603      	mov	r3, r0
 8013894:	429c      	cmp	r4, r3
 8013896:	d206      	bcs.n	80138a6 <tcp_receive+0x41a>
 8013898:	4b2a      	ldr	r3, [pc, #168]	; (8013944 <tcp_receive+0x4b8>)
 801389a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801389e:	492a      	ldr	r1, [pc, #168]	; (8013948 <tcp_receive+0x4bc>)
 80138a0:	482a      	ldr	r0, [pc, #168]	; (801394c <tcp_receive+0x4c0>)
 80138a2:	f005 fa95 	bl	8018dd0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80138a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7fc fe4e 	bl	801054c <pbuf_clen>
 80138b0:	4603      	mov	r3, r0
 80138b2:	461a      	mov	r2, r3
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80138ba:	1a9b      	subs	r3, r3, r2
 80138bc:	b29a      	uxth	r2, r3
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80138c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c6:	891a      	ldrh	r2, [r3, #8]
 80138c8:	4b21      	ldr	r3, [pc, #132]	; (8013950 <tcp_receive+0x4c4>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	4413      	add	r3, r2
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	4b1f      	ldr	r3, [pc, #124]	; (8013950 <tcp_receive+0x4c4>)
 80138d2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80138d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138d6:	f7fe f8b8 	bl	8011a4a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00e      	beq.n	8013902 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10a      	bne.n	8013902 <tcp_receive+0x476>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d106      	bne.n	8013902 <tcp_receive+0x476>
 80138f4:	4b13      	ldr	r3, [pc, #76]	; (8013944 <tcp_receive+0x4b8>)
 80138f6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80138fa:	4916      	ldr	r1, [pc, #88]	; (8013954 <tcp_receive+0x4c8>)
 80138fc:	4813      	ldr	r0, [pc, #76]	; (801394c <tcp_receive+0x4c0>)
 80138fe:	f005 fa67 	bl	8018dd0 <iprintf>
    while (pcb->unsent != NULL &&
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013906:	2b00      	cmp	r3, #0
 8013908:	d036      	beq.n	8013978 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801390a:	4b13      	ldr	r3, [pc, #76]	; (8013958 <tcp_receive+0x4cc>)
 801390c:	681c      	ldr	r4, [r3, #0]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	4618      	mov	r0, r3
 8013918:	f7fb fb72 	bl	800f000 <lwip_htonl>
 801391c:	4605      	mov	r5, r0
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013922:	891b      	ldrh	r3, [r3, #8]
 8013924:	461e      	mov	r6, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	899b      	ldrh	r3, [r3, #12]
 801392e:	b29b      	uxth	r3, r3
 8013930:	4618      	mov	r0, r3
 8013932:	f7fb fb57 	bl	800efe4 <lwip_htons>
 8013936:	4603      	mov	r3, r0
 8013938:	f003 0303 	and.w	r3, r3, #3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d00d      	beq.n	801395c <tcp_receive+0x4d0>
 8013940:	2301      	movs	r3, #1
 8013942:	e00c      	b.n	801395e <tcp_receive+0x4d2>
 8013944:	0801b4f8 	.word	0x0801b4f8
 8013948:	0801b75c 	.word	0x0801b75c
 801394c:	0801b560 	.word	0x0801b560
 8013950:	200040dc 	.word	0x200040dc
 8013954:	0801b784 	.word	0x0801b784
 8013958:	200040d8 	.word	0x200040d8
 801395c:	2300      	movs	r3, #0
 801395e:	4433      	add	r3, r6
 8013960:	442b      	add	r3, r5
 8013962:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8013964:	2b00      	cmp	r3, #0
 8013966:	db07      	blt.n	8013978 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013968:	4b8d      	ldr	r3, [pc, #564]	; (8013ba0 <tcp_receive+0x714>)
 801396a:	681a      	ldr	r2, [r3, #0]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013970:	1ad3      	subs	r3, r2, r3
 8013972:	2b00      	cmp	r3, #0
 8013974:	f77f af75 	ble.w	8013862 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801397e:	4b89      	ldr	r3, [pc, #548]	; (8013ba4 <tcp_receive+0x718>)
 8013980:	881b      	ldrh	r3, [r3, #0]
 8013982:	4413      	add	r3, r2
 8013984:	b29a      	uxth	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013990:	2b00      	cmp	r3, #0
 8013992:	d052      	beq.n	8013a3a <tcp_receive+0x5ae>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013998:	4b81      	ldr	r3, [pc, #516]	; (8013ba0 <tcp_receive+0x714>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	1ad3      	subs	r3, r2, r3
 801399e:	2b00      	cmp	r3, #0
 80139a0:	da4b      	bge.n	8013a3a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80139a2:	4b81      	ldr	r3, [pc, #516]	; (8013ba8 <tcp_receive+0x71c>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80139b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139bc:	10db      	asrs	r3, r3, #3
 80139be:	b21b      	sxth	r3, r3
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	1ad3      	subs	r3, r2, r3
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139d2:	4413      	add	r3, r2
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	b21a      	sxth	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80139dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	da03      	bge.n	80139ec <tcp_receive+0x560>
        m = -m;
 80139e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139e6:	425b      	negs	r3, r3
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80139ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80139f4:	109b      	asrs	r3, r3, #2
 80139f6:	b21b      	sxth	r3, r3
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a0a:	4413      	add	r3, r2
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	b21a      	sxth	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a1a:	10db      	asrs	r3, r3, #3
 8013a1c:	b21b      	sxth	r3, r3
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	4413      	add	r3, r2
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	b21a      	sxth	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2200      	movs	r2, #0
 8013a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013a3a:	4b5c      	ldr	r3, [pc, #368]	; (8013bac <tcp_receive+0x720>)
 8013a3c:	881b      	ldrh	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	f000 84f1 	beq.w	8014426 <tcp_receive+0xf9a>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	7d1b      	ldrb	r3, [r3, #20]
 8013a48:	2b06      	cmp	r3, #6
 8013a4a:	f200 84ec 	bhi.w	8014426 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a52:	4b57      	ldr	r3, [pc, #348]	; (8013bb0 <tcp_receive+0x724>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	1ad3      	subs	r3, r2, r3
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f2c0 80b8 	blt.w	8013bd0 <tcp_receive+0x744>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a64:	4b51      	ldr	r3, [pc, #324]	; (8013bac <tcp_receive+0x720>)
 8013a66:	881b      	ldrh	r3, [r3, #0]
 8013a68:	4619      	mov	r1, r3
 8013a6a:	4b51      	ldr	r3, [pc, #324]	; (8013bb0 <tcp_receive+0x724>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	440b      	add	r3, r1
 8013a70:	1ad3      	subs	r3, r2, r3
 8013a72:	3301      	adds	r3, #1
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f300 80ab 	bgt.w	8013bd0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013a7a:	4b4e      	ldr	r3, [pc, #312]	; (8013bb4 <tcp_receive+0x728>)
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a84:	4b4a      	ldr	r3, [pc, #296]	; (8013bb0 <tcp_receive+0x724>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	1ad3      	subs	r3, r2, r3
 8013a8a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013a8c:	4b49      	ldr	r3, [pc, #292]	; (8013bb4 <tcp_receive+0x728>)
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d106      	bne.n	8013aa2 <tcp_receive+0x616>
 8013a94:	4b48      	ldr	r3, [pc, #288]	; (8013bb8 <tcp_receive+0x72c>)
 8013a96:	f240 523c 	movw	r2, #1340	; 0x53c
 8013a9a:	4948      	ldr	r1, [pc, #288]	; (8013bbc <tcp_receive+0x730>)
 8013a9c:	4848      	ldr	r0, [pc, #288]	; (8013bc0 <tcp_receive+0x734>)
 8013a9e:	f005 f997 	bl	8018dd0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	dd06      	ble.n	8013aba <tcp_receive+0x62e>
 8013aac:	4b42      	ldr	r3, [pc, #264]	; (8013bb8 <tcp_receive+0x72c>)
 8013aae:	f240 523d 	movw	r2, #1341	; 0x53d
 8013ab2:	4944      	ldr	r1, [pc, #272]	; (8013bc4 <tcp_receive+0x738>)
 8013ab4:	4842      	ldr	r0, [pc, #264]	; (8013bc0 <tcp_receive+0x734>)
 8013ab6:	f005 f98b 	bl	8018dd0 <iprintf>
      if (inseg.p->len < off) {
 8013aba:	4b3e      	ldr	r3, [pc, #248]	; (8013bb4 <tcp_receive+0x728>)
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	895b      	ldrh	r3, [r3, #10]
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	dd3e      	ble.n	8013b46 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013ac8:	4b3a      	ldr	r3, [pc, #232]	; (8013bb4 <tcp_receive+0x728>)
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	891b      	ldrh	r3, [r3, #8]
 8013ace:	461a      	mov	r2, r3
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	dd06      	ble.n	8013ae4 <tcp_receive+0x658>
 8013ad6:	4b38      	ldr	r3, [pc, #224]	; (8013bb8 <tcp_receive+0x72c>)
 8013ad8:	f240 523f 	movw	r2, #1343	; 0x53f
 8013adc:	493a      	ldr	r1, [pc, #232]	; (8013bc8 <tcp_receive+0x73c>)
 8013ade:	4838      	ldr	r0, [pc, #224]	; (8013bc0 <tcp_receive+0x734>)
 8013ae0:	f005 f976 	bl	8018dd0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013ae4:	4b33      	ldr	r3, [pc, #204]	; (8013bb4 <tcp_receive+0x728>)
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	891a      	ldrh	r2, [r3, #8]
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8013af2:	e00e      	b.n	8013b12 <tcp_receive+0x686>
          off -= p->len;
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	895b      	ldrh	r3, [r3, #10]
 8013af8:	461a      	mov	r2, r3
 8013afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afc:	1a9b      	subs	r3, r3, r2
 8013afe:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	8a3a      	ldrh	r2, [r7, #16]
 8013b04:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8013b06:	69bb      	ldr	r3, [r7, #24]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8013b0c:	69bb      	ldr	r3, [r7, #24]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	895b      	ldrh	r3, [r3, #10]
 8013b16:	461a      	mov	r2, r3
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	dcea      	bgt.n	8013af4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8013b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	425b      	negs	r3, r3
 8013b24:	b29b      	uxth	r3, r3
 8013b26:	b21b      	sxth	r3, r3
 8013b28:	4619      	mov	r1, r3
 8013b2a:	69b8      	ldr	r0, [r7, #24]
 8013b2c:	f7fc fc50 	bl	80103d0 <pbuf_header>
 8013b30:	4603      	mov	r3, r0
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d01c      	beq.n	8013b70 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013b36:	4b20      	ldr	r3, [pc, #128]	; (8013bb8 <tcp_receive+0x72c>)
 8013b38:	f240 524c 	movw	r2, #1356	; 0x54c
 8013b3c:	4923      	ldr	r1, [pc, #140]	; (8013bcc <tcp_receive+0x740>)
 8013b3e:	4820      	ldr	r0, [pc, #128]	; (8013bc0 <tcp_receive+0x734>)
 8013b40:	f005 f946 	bl	8018dd0 <iprintf>
 8013b44:	e014      	b.n	8013b70 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8013b46:	4b1b      	ldr	r3, [pc, #108]	; (8013bb4 <tcp_receive+0x728>)
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b4c:	b292      	uxth	r2, r2
 8013b4e:	4252      	negs	r2, r2
 8013b50:	b292      	uxth	r2, r2
 8013b52:	b212      	sxth	r2, r2
 8013b54:	4611      	mov	r1, r2
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fc fc3a 	bl	80103d0 <pbuf_header>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d006      	beq.n	8013b70 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013b62:	4b15      	ldr	r3, [pc, #84]	; (8013bb8 <tcp_receive+0x72c>)
 8013b64:	f240 5251 	movw	r2, #1361	; 0x551
 8013b68:	4918      	ldr	r1, [pc, #96]	; (8013bcc <tcp_receive+0x740>)
 8013b6a:	4815      	ldr	r0, [pc, #84]	; (8013bc0 <tcp_receive+0x734>)
 8013b6c:	f005 f930 	bl	8018dd0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8013b70:	4b10      	ldr	r3, [pc, #64]	; (8013bb4 <tcp_receive+0x728>)
 8013b72:	891a      	ldrh	r2, [r3, #8]
 8013b74:	4b0e      	ldr	r3, [pc, #56]	; (8013bb0 <tcp_receive+0x724>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	b299      	uxth	r1, r3
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	1acb      	subs	r3, r1, r3
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	4413      	add	r3, r2
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	4b0a      	ldr	r3, [pc, #40]	; (8013bb4 <tcp_receive+0x728>)
 8013b8a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b90:	4a07      	ldr	r2, [pc, #28]	; (8013bb0 <tcp_receive+0x724>)
 8013b92:	6013      	str	r3, [r2, #0]
 8013b94:	4b07      	ldr	r3, [pc, #28]	; (8013bb4 <tcp_receive+0x728>)
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	4a05      	ldr	r2, [pc, #20]	; (8013bb0 <tcp_receive+0x724>)
 8013b9a:	6812      	ldr	r2, [r2, #0]
 8013b9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013b9e:	e025      	b.n	8013bec <tcp_receive+0x760>
 8013ba0:	200040d8 	.word	0x200040d8
 8013ba4:	200040dc 	.word	0x200040dc
 8013ba8:	200079b4 	.word	0x200079b4
 8013bac:	200040de 	.word	0x200040de
 8013bb0:	200040d4 	.word	0x200040d4
 8013bb4:	200040b4 	.word	0x200040b4
 8013bb8:	0801b4f8 	.word	0x0801b4f8
 8013bbc:	0801b7a4 	.word	0x0801b7a4
 8013bc0:	0801b560 	.word	0x0801b560
 8013bc4:	0801b7b4 	.word	0x0801b7b4
 8013bc8:	0801b7c4 	.word	0x0801b7c4
 8013bcc:	0801b7d4 	.word	0x0801b7d4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013bd0:	4b87      	ldr	r3, [pc, #540]	; (8013df0 <tcp_receive+0x964>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	da06      	bge.n	8013bec <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	7e9b      	ldrb	r3, [r3, #26]
 8013be2:	f043 0302 	orr.w	r3, r3, #2
 8013be6:	b2da      	uxtb	r2, r3
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013bec:	4b80      	ldr	r3, [pc, #512]	; (8013df0 <tcp_receive+0x964>)
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf4:	1ad3      	subs	r3, r2, r3
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	f2c0 8410 	blt.w	801441c <tcp_receive+0xf90>
 8013bfc:	4b7c      	ldr	r3, [pc, #496]	; (8013df0 <tcp_receive+0x964>)
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c04:	6879      	ldr	r1, [r7, #4]
 8013c06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c08:	440b      	add	r3, r1
 8013c0a:	1ad3      	subs	r3, r2, r3
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	f300 8404 	bgt.w	801441c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c18:	4b75      	ldr	r3, [pc, #468]	; (8013df0 <tcp_receive+0x964>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	f040 8287 	bne.w	8014130 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013c22:	4b74      	ldr	r3, [pc, #464]	; (8013df4 <tcp_receive+0x968>)
 8013c24:	891c      	ldrh	r4, [r3, #8]
 8013c26:	4b73      	ldr	r3, [pc, #460]	; (8013df4 <tcp_receive+0x968>)
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	899b      	ldrh	r3, [r3, #12]
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fb f9d8 	bl	800efe4 <lwip_htons>
 8013c34:	4603      	mov	r3, r0
 8013c36:	f003 0303 	and.w	r3, r3, #3
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d001      	beq.n	8013c42 <tcp_receive+0x7b6>
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e000      	b.n	8013c44 <tcp_receive+0x7b8>
 8013c42:	2300      	movs	r3, #0
 8013c44:	4423      	add	r3, r4
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	4b6b      	ldr	r3, [pc, #428]	; (8013df8 <tcp_receive+0x96c>)
 8013c4a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c50:	4b69      	ldr	r3, [pc, #420]	; (8013df8 <tcp_receive+0x96c>)
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d26e      	bcs.n	8013d36 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c58:	4b66      	ldr	r3, [pc, #408]	; (8013df4 <tcp_receive+0x968>)
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	899b      	ldrh	r3, [r3, #12]
 8013c5e:	b29b      	uxth	r3, r3
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7fb f9bf 	bl	800efe4 <lwip_htons>
 8013c66:	4603      	mov	r3, r0
 8013c68:	f003 0301 	and.w	r3, r3, #1
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d01b      	beq.n	8013ca8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013c70:	4b60      	ldr	r3, [pc, #384]	; (8013df4 <tcp_receive+0x968>)
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	899b      	ldrh	r3, [r3, #12]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c7c:	b29c      	uxth	r4, r3
 8013c7e:	4b5d      	ldr	r3, [pc, #372]	; (8013df4 <tcp_receive+0x968>)
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	899b      	ldrh	r3, [r3, #12]
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fb f9ac 	bl	800efe4 <lwip_htons>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7fb f9a5 	bl	800efe4 <lwip_htons>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	4b55      	ldr	r3, [pc, #340]	; (8013df4 <tcp_receive+0x968>)
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	4322      	orrs	r2, r4
 8013ca4:	b292      	uxth	r2, r2
 8013ca6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cac:	4b51      	ldr	r3, [pc, #324]	; (8013df4 <tcp_receive+0x968>)
 8013cae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013cb0:	4b50      	ldr	r3, [pc, #320]	; (8013df4 <tcp_receive+0x968>)
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	899b      	ldrh	r3, [r3, #12]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7fb f993 	bl	800efe4 <lwip_htons>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	f003 0302 	and.w	r3, r3, #2
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d005      	beq.n	8013cd4 <tcp_receive+0x848>
            inseg.len -= 1;
 8013cc8:	4b4a      	ldr	r3, [pc, #296]	; (8013df4 <tcp_receive+0x968>)
 8013cca:	891b      	ldrh	r3, [r3, #8]
 8013ccc:	3b01      	subs	r3, #1
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	4b48      	ldr	r3, [pc, #288]	; (8013df4 <tcp_receive+0x968>)
 8013cd2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013cd4:	4b47      	ldr	r3, [pc, #284]	; (8013df4 <tcp_receive+0x968>)
 8013cd6:	685a      	ldr	r2, [r3, #4]
 8013cd8:	4b46      	ldr	r3, [pc, #280]	; (8013df4 <tcp_receive+0x968>)
 8013cda:	891b      	ldrh	r3, [r3, #8]
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4610      	mov	r0, r2
 8013ce0:	f7fc fa26 	bl	8010130 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013ce4:	4b43      	ldr	r3, [pc, #268]	; (8013df4 <tcp_receive+0x968>)
 8013ce6:	891c      	ldrh	r4, [r3, #8]
 8013ce8:	4b42      	ldr	r3, [pc, #264]	; (8013df4 <tcp_receive+0x968>)
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	899b      	ldrh	r3, [r3, #12]
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fb f977 	bl	800efe4 <lwip_htons>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	f003 0303 	and.w	r3, r3, #3
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d001      	beq.n	8013d04 <tcp_receive+0x878>
 8013d00:	2301      	movs	r3, #1
 8013d02:	e000      	b.n	8013d06 <tcp_receive+0x87a>
 8013d04:	2300      	movs	r3, #0
 8013d06:	4423      	add	r3, r4
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	4b3b      	ldr	r3, [pc, #236]	; (8013df8 <tcp_receive+0x96c>)
 8013d0c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d0e:	4b3a      	ldr	r3, [pc, #232]	; (8013df8 <tcp_receive+0x96c>)
 8013d10:	881b      	ldrh	r3, [r3, #0]
 8013d12:	461a      	mov	r2, r3
 8013d14:	4b36      	ldr	r3, [pc, #216]	; (8013df0 <tcp_receive+0x964>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	441a      	add	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1e:	6879      	ldr	r1, [r7, #4]
 8013d20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d22:	440b      	add	r3, r1
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d006      	beq.n	8013d36 <tcp_receive+0x8aa>
 8013d28:	4b34      	ldr	r3, [pc, #208]	; (8013dfc <tcp_receive+0x970>)
 8013d2a:	f240 527f 	movw	r2, #1407	; 0x57f
 8013d2e:	4934      	ldr	r1, [pc, #208]	; (8013e00 <tcp_receive+0x974>)
 8013d30:	4834      	ldr	r0, [pc, #208]	; (8013e04 <tcp_receive+0x978>)
 8013d32:	f005 f84d 	bl	8018dd0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	f000 80e1 	beq.w	8013f02 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d40:	4b2c      	ldr	r3, [pc, #176]	; (8013df4 <tcp_receive+0x968>)
 8013d42:	68db      	ldr	r3, [r3, #12]
 8013d44:	899b      	ldrh	r3, [r3, #12]
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fb f94b 	bl	800efe4 <lwip_htons>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	f003 0301 	and.w	r3, r3, #1
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d010      	beq.n	8013d7a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013d58:	e00a      	b.n	8013d70 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d5e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d64:	681a      	ldr	r2, [r3, #0]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8013d6a:	68b8      	ldr	r0, [r7, #8]
 8013d6c:	f7fd fe6d 	bl	8011a4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d1f0      	bne.n	8013d5a <tcp_receive+0x8ce>
 8013d78:	e0c3      	b.n	8013f02 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013d80:	e04f      	b.n	8013e22 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	899b      	ldrh	r3, [r3, #12]
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fb f92a 	bl	800efe4 <lwip_htons>
 8013d90:	4603      	mov	r3, r0
 8013d92:	f003 0301 	and.w	r3, r3, #1
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d03b      	beq.n	8013e12 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013d9a:	4b16      	ldr	r3, [pc, #88]	; (8013df4 <tcp_receive+0x968>)
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	899b      	ldrh	r3, [r3, #12]
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7fb f91e 	bl	800efe4 <lwip_htons>
 8013da8:	4603      	mov	r3, r0
 8013daa:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d12f      	bne.n	8013e12 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013db2:	4b10      	ldr	r3, [pc, #64]	; (8013df4 <tcp_receive+0x968>)
 8013db4:	68db      	ldr	r3, [r3, #12]
 8013db6:	899b      	ldrh	r3, [r3, #12]
 8013db8:	b29c      	uxth	r4, r3
 8013dba:	2001      	movs	r0, #1
 8013dbc:	f7fb f912 	bl	800efe4 <lwip_htons>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	4b0b      	ldr	r3, [pc, #44]	; (8013df4 <tcp_receive+0x968>)
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	4322      	orrs	r2, r4
 8013dca:	b292      	uxth	r2, r2
 8013dcc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013dce:	4b09      	ldr	r3, [pc, #36]	; (8013df4 <tcp_receive+0x968>)
 8013dd0:	891c      	ldrh	r4, [r3, #8]
 8013dd2:	4b08      	ldr	r3, [pc, #32]	; (8013df4 <tcp_receive+0x968>)
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	899b      	ldrh	r3, [r3, #12]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fb f902 	bl	800efe4 <lwip_htons>
 8013de0:	4603      	mov	r3, r0
 8013de2:	f003 0303 	and.w	r3, r3, #3
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00e      	beq.n	8013e08 <tcp_receive+0x97c>
 8013dea:	2301      	movs	r3, #1
 8013dec:	e00d      	b.n	8013e0a <tcp_receive+0x97e>
 8013dee:	bf00      	nop
 8013df0:	200040d4 	.word	0x200040d4
 8013df4:	200040b4 	.word	0x200040b4
 8013df8:	200040de 	.word	0x200040de
 8013dfc:	0801b4f8 	.word	0x0801b4f8
 8013e00:	0801b7e8 	.word	0x0801b7e8
 8013e04:	0801b560 	.word	0x0801b560
 8013e08:	2300      	movs	r3, #0
 8013e0a:	4423      	add	r3, r4
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	4b95      	ldr	r3, [pc, #596]	; (8014064 <tcp_receive+0xbd8>)
 8013e10:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8013e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e14:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8013e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8013e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e1e:	f7fd fe14 	bl	8011a4a <tcp_seg_free>
            while (next &&
 8013e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d00e      	beq.n	8013e46 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013e28:	4b8e      	ldr	r3, [pc, #568]	; (8014064 <tcp_receive+0xbd8>)
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	4b8e      	ldr	r3, [pc, #568]	; (8014068 <tcp_receive+0xbdc>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	441a      	add	r2, r3
 8013e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e3c:	8909      	ldrh	r1, [r1, #8]
 8013e3e:	440b      	add	r3, r1
 8013e40:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	da9d      	bge.n	8013d82 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d057      	beq.n	8013efc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8013e4c:	4b85      	ldr	r3, [pc, #532]	; (8014064 <tcp_receive+0xbd8>)
 8013e4e:	881b      	ldrh	r3, [r3, #0]
 8013e50:	461a      	mov	r2, r3
 8013e52:	4b85      	ldr	r3, [pc, #532]	; (8014068 <tcp_receive+0xbdc>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	441a      	add	r2, r3
 8013e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	dd4b      	ble.n	8013efc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e66:	68db      	ldr	r3, [r3, #12]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	b29a      	uxth	r2, r3
 8013e6c:	4b7e      	ldr	r3, [pc, #504]	; (8014068 <tcp_receive+0xbdc>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	1ad3      	subs	r3, r2, r3
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	4b7d      	ldr	r3, [pc, #500]	; (801406c <tcp_receive+0xbe0>)
 8013e78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013e7a:	4b7c      	ldr	r3, [pc, #496]	; (801406c <tcp_receive+0xbe0>)
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	899b      	ldrh	r3, [r3, #12]
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fb f8ae 	bl	800efe4 <lwip_htons>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	f003 0302 	and.w	r3, r3, #2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d005      	beq.n	8013e9e <tcp_receive+0xa12>
                inseg.len -= 1;
 8013e92:	4b76      	ldr	r3, [pc, #472]	; (801406c <tcp_receive+0xbe0>)
 8013e94:	891b      	ldrh	r3, [r3, #8]
 8013e96:	3b01      	subs	r3, #1
 8013e98:	b29a      	uxth	r2, r3
 8013e9a:	4b74      	ldr	r3, [pc, #464]	; (801406c <tcp_receive+0xbe0>)
 8013e9c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013e9e:	4b73      	ldr	r3, [pc, #460]	; (801406c <tcp_receive+0xbe0>)
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	4b72      	ldr	r3, [pc, #456]	; (801406c <tcp_receive+0xbe0>)
 8013ea4:	891b      	ldrh	r3, [r3, #8]
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	4610      	mov	r0, r2
 8013eaa:	f7fc f941 	bl	8010130 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013eae:	4b6f      	ldr	r3, [pc, #444]	; (801406c <tcp_receive+0xbe0>)
 8013eb0:	891c      	ldrh	r4, [r3, #8]
 8013eb2:	4b6e      	ldr	r3, [pc, #440]	; (801406c <tcp_receive+0xbe0>)
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	899b      	ldrh	r3, [r3, #12]
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fb f892 	bl	800efe4 <lwip_htons>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	f003 0303 	and.w	r3, r3, #3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d001      	beq.n	8013ece <tcp_receive+0xa42>
 8013eca:	2301      	movs	r3, #1
 8013ecc:	e000      	b.n	8013ed0 <tcp_receive+0xa44>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	4423      	add	r3, r4
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	4b63      	ldr	r3, [pc, #396]	; (8014064 <tcp_receive+0xbd8>)
 8013ed6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013ed8:	4b62      	ldr	r3, [pc, #392]	; (8014064 <tcp_receive+0xbd8>)
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	461a      	mov	r2, r3
 8013ede:	4b62      	ldr	r3, [pc, #392]	; (8014068 <tcp_receive+0xbdc>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	441a      	add	r2, r3
 8013ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d006      	beq.n	8013efc <tcp_receive+0xa70>
 8013eee:	4b60      	ldr	r3, [pc, #384]	; (8014070 <tcp_receive+0xbe4>)
 8013ef0:	f240 52af 	movw	r2, #1455	; 0x5af
 8013ef4:	495f      	ldr	r1, [pc, #380]	; (8014074 <tcp_receive+0xbe8>)
 8013ef6:	4860      	ldr	r0, [pc, #384]	; (8014078 <tcp_receive+0xbec>)
 8013ef8:	f004 ff6a 	bl	8018dd0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f00:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013f02:	4b58      	ldr	r3, [pc, #352]	; (8014064 <tcp_receive+0xbd8>)
 8013f04:	881b      	ldrh	r3, [r3, #0]
 8013f06:	461a      	mov	r2, r3
 8013f08:	4b57      	ldr	r3, [pc, #348]	; (8014068 <tcp_receive+0xbdc>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	441a      	add	r2, r3
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f16:	4b53      	ldr	r3, [pc, #332]	; (8014064 <tcp_receive+0xbd8>)
 8013f18:	881b      	ldrh	r3, [r3, #0]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d206      	bcs.n	8013f2c <tcp_receive+0xaa0>
 8013f1e:	4b54      	ldr	r3, [pc, #336]	; (8014070 <tcp_receive+0xbe4>)
 8013f20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013f24:	4955      	ldr	r1, [pc, #340]	; (801407c <tcp_receive+0xbf0>)
 8013f26:	4854      	ldr	r0, [pc, #336]	; (8014078 <tcp_receive+0xbec>)
 8013f28:	f004 ff52 	bl	8018dd0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f30:	4b4c      	ldr	r3, [pc, #304]	; (8014064 <tcp_receive+0xbd8>)
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	1ad3      	subs	r3, r2, r3
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7fd f8f7 	bl	8011130 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013f42:	4b4a      	ldr	r3, [pc, #296]	; (801406c <tcp_receive+0xbe0>)
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	891b      	ldrh	r3, [r3, #8]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d006      	beq.n	8013f5a <tcp_receive+0xace>
          recv_data = inseg.p;
 8013f4c:	4b47      	ldr	r3, [pc, #284]	; (801406c <tcp_receive+0xbe0>)
 8013f4e:	685b      	ldr	r3, [r3, #4]
 8013f50:	4a4b      	ldr	r2, [pc, #300]	; (8014080 <tcp_receive+0xbf4>)
 8013f52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013f54:	4b45      	ldr	r3, [pc, #276]	; (801406c <tcp_receive+0xbe0>)
 8013f56:	2200      	movs	r2, #0
 8013f58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f5a:	4b44      	ldr	r3, [pc, #272]	; (801406c <tcp_receive+0xbe0>)
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	899b      	ldrh	r3, [r3, #12]
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fb f83e 	bl	800efe4 <lwip_htons>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	f003 0301 	and.w	r3, r3, #1
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f000 80b4 	beq.w	80140dc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013f74:	4b43      	ldr	r3, [pc, #268]	; (8014084 <tcp_receive+0xbf8>)
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	f043 0320 	orr.w	r3, r3, #32
 8013f7c:	b2da      	uxtb	r2, r3
 8013f7e:	4b41      	ldr	r3, [pc, #260]	; (8014084 <tcp_receive+0xbf8>)
 8013f80:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013f82:	e0ab      	b.n	80140dc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f88:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	4a35      	ldr	r2, [pc, #212]	; (8014068 <tcp_receive+0xbdc>)
 8013f94:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	891b      	ldrh	r3, [r3, #8]
 8013f9a:	461c      	mov	r4, r3
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	899b      	ldrh	r3, [r3, #12]
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fb f81d 	bl	800efe4 <lwip_htons>
 8013faa:	4603      	mov	r3, r0
 8013fac:	f003 0303 	and.w	r3, r3, #3
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d001      	beq.n	8013fb8 <tcp_receive+0xb2c>
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	e000      	b.n	8013fba <tcp_receive+0xb2e>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	191a      	adds	r2, r3, r4
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc0:	441a      	add	r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fca:	461c      	mov	r4, r3
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	891b      	ldrh	r3, [r3, #8]
 8013fd0:	461d      	mov	r5, r3
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	899b      	ldrh	r3, [r3, #12]
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7fb f802 	bl	800efe4 <lwip_htons>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	f003 0303 	and.w	r3, r3, #3
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <tcp_receive+0xb62>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e000      	b.n	8013ff0 <tcp_receive+0xb64>
 8013fee:	2300      	movs	r3, #0
 8013ff0:	442b      	add	r3, r5
 8013ff2:	429c      	cmp	r4, r3
 8013ff4:	d206      	bcs.n	8014004 <tcp_receive+0xb78>
 8013ff6:	4b1e      	ldr	r3, [pc, #120]	; (8014070 <tcp_receive+0xbe4>)
 8013ff8:	f240 52de 	movw	r2, #1502	; 0x5de
 8013ffc:	4922      	ldr	r1, [pc, #136]	; (8014088 <tcp_receive+0xbfc>)
 8013ffe:	481e      	ldr	r0, [pc, #120]	; (8014078 <tcp_receive+0xbec>)
 8014000:	f004 fee6 	bl	8018dd0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	891b      	ldrh	r3, [r3, #8]
 8014008:	461c      	mov	r4, r3
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	899b      	ldrh	r3, [r3, #12]
 8014010:	b29b      	uxth	r3, r3
 8014012:	4618      	mov	r0, r3
 8014014:	f7fa ffe6 	bl	800efe4 <lwip_htons>
 8014018:	4603      	mov	r3, r0
 801401a:	f003 0303 	and.w	r3, r3, #3
 801401e:	2b00      	cmp	r3, #0
 8014020:	d001      	beq.n	8014026 <tcp_receive+0xb9a>
 8014022:	2301      	movs	r3, #1
 8014024:	e000      	b.n	8014028 <tcp_receive+0xb9c>
 8014026:	2300      	movs	r3, #0
 8014028:	1919      	adds	r1, r3, r4
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801402e:	b28b      	uxth	r3, r1
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	b29a      	uxth	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7fd f879 	bl	8011130 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	891b      	ldrh	r3, [r3, #8]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d028      	beq.n	801409a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014048:	4b0d      	ldr	r3, [pc, #52]	; (8014080 <tcp_receive+0xbf4>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d01d      	beq.n	801408c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8014050:	4b0b      	ldr	r3, [pc, #44]	; (8014080 <tcp_receive+0xbf4>)
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	4619      	mov	r1, r3
 801405a:	4610      	mov	r0, r2
 801405c:	f7fc fab6 	bl	80105cc <pbuf_cat>
 8014060:	e018      	b.n	8014094 <tcp_receive+0xc08>
 8014062:	bf00      	nop
 8014064:	200040de 	.word	0x200040de
 8014068:	200040d4 	.word	0x200040d4
 801406c:	200040b4 	.word	0x200040b4
 8014070:	0801b4f8 	.word	0x0801b4f8
 8014074:	0801b820 	.word	0x0801b820
 8014078:	0801b560 	.word	0x0801b560
 801407c:	0801b85c 	.word	0x0801b85c
 8014080:	200040e4 	.word	0x200040e4
 8014084:	200040e1 	.word	0x200040e1
 8014088:	0801b87c 	.word	0x0801b87c
            } else {
              recv_data = cseg->p;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	4a71      	ldr	r2, [pc, #452]	; (8014258 <tcp_receive+0xdcc>)
 8014092:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	2200      	movs	r2, #0
 8014098:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	899b      	ldrh	r3, [r3, #12]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fa ff9e 	bl	800efe4 <lwip_htons>
 80140a8:	4603      	mov	r3, r0
 80140aa:	f003 0301 	and.w	r3, r3, #1
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d00d      	beq.n	80140ce <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80140b2:	4b6a      	ldr	r3, [pc, #424]	; (801425c <tcp_receive+0xdd0>)
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	f043 0320 	orr.w	r3, r3, #32
 80140ba:	b2da      	uxtb	r2, r3
 80140bc:	4b67      	ldr	r3, [pc, #412]	; (801425c <tcp_receive+0xdd0>)
 80140be:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	7d1b      	ldrb	r3, [r3, #20]
 80140c4:	2b04      	cmp	r3, #4
 80140c6:	d102      	bne.n	80140ce <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2207      	movs	r2, #7
 80140cc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f7fd fcb7 	bl	8011a4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d008      	beq.n	80140f6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140e8:	68db      	ldr	r3, [r3, #12]
 80140ea:	685a      	ldr	r2, [r3, #4]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80140f0:	429a      	cmp	r2, r3
 80140f2:	f43f af47 	beq.w	8013f84 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	7e9b      	ldrb	r3, [r3, #26]
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00e      	beq.n	8014120 <tcp_receive+0xc94>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	7e9b      	ldrb	r3, [r3, #26]
 8014106:	f023 0301 	bic.w	r3, r3, #1
 801410a:	b2da      	uxtb	r2, r3
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	769a      	strb	r2, [r3, #26]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	7e9b      	ldrb	r3, [r3, #26]
 8014114:	f043 0302 	orr.w	r3, r3, #2
 8014118:	b2da      	uxtb	r2, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801411e:	e181      	b.n	8014424 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	7e9b      	ldrb	r3, [r3, #26]
 8014124:	f043 0301 	orr.w	r3, r3, #1
 8014128:	b2da      	uxtb	r2, r3
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801412e:	e179      	b.n	8014424 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f001 f8c5 	bl	80152c0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801413a:	2b00      	cmp	r3, #0
 801413c:	d106      	bne.n	801414c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801413e:	4848      	ldr	r0, [pc, #288]	; (8014260 <tcp_receive+0xdd4>)
 8014140:	f7fd fc9b 	bl	8011a7a <tcp_seg_copy>
 8014144:	4602      	mov	r2, r0
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801414a:	e16b      	b.n	8014424 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801414c:	2300      	movs	r3, #0
 801414e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014156:	e150      	b.n	80143fa <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	685a      	ldr	r2, [r3, #4]
 801415e:	4b41      	ldr	r3, [pc, #260]	; (8014264 <tcp_receive+0xdd8>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	429a      	cmp	r2, r3
 8014164:	d11d      	bne.n	80141a2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014166:	4b3e      	ldr	r3, [pc, #248]	; (8014260 <tcp_receive+0xdd4>)
 8014168:	891a      	ldrh	r2, [r3, #8]
 801416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416c:	891b      	ldrh	r3, [r3, #8]
 801416e:	429a      	cmp	r2, r3
 8014170:	f240 8148 	bls.w	8014404 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8014174:	483a      	ldr	r0, [pc, #232]	; (8014260 <tcp_receive+0xdd4>)
 8014176:	f7fd fc80 	bl	8011a7a <tcp_seg_copy>
 801417a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2b00      	cmp	r3, #0
 8014180:	f000 8142 	beq.w	8014408 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8014184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014186:	2b00      	cmp	r3, #0
 8014188:	d003      	beq.n	8014192 <tcp_receive+0xd06>
                    prev->next = cseg;
 801418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801418c:	68fa      	ldr	r2, [r7, #12]
 801418e:	601a      	str	r2, [r3, #0]
 8014190:	e002      	b.n	8014198 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801419a:	68f8      	ldr	r0, [r7, #12]
 801419c:	f7ff f900 	bl	80133a0 <tcp_oos_insert_segment>
                }
                break;
 80141a0:	e132      	b.n	8014408 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80141a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d117      	bne.n	80141d8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80141a8:	4b2e      	ldr	r3, [pc, #184]	; (8014264 <tcp_receive+0xdd8>)
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	1ad3      	subs	r3, r2, r3
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	da57      	bge.n	8014268 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80141b8:	4829      	ldr	r0, [pc, #164]	; (8014260 <tcp_receive+0xdd4>)
 80141ba:	f7fd fc5e 	bl	8011a7a <tcp_seg_copy>
 80141be:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f000 8122 	beq.w	801440c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	68fa      	ldr	r2, [r7, #12]
 80141cc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80141ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80141d0:	68f8      	ldr	r0, [r7, #12]
 80141d2:	f7ff f8e5 	bl	80133a0 <tcp_oos_insert_segment>
                  }
                  break;
 80141d6:	e119      	b.n	801440c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80141d8:	4b22      	ldr	r3, [pc, #136]	; (8014264 <tcp_receive+0xdd8>)
 80141da:	681a      	ldr	r2, [r3, #0]
 80141dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141de:	68db      	ldr	r3, [r3, #12]
 80141e0:	685b      	ldr	r3, [r3, #4]
 80141e2:	1ad3      	subs	r3, r2, r3
 80141e4:	3b01      	subs	r3, #1
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	db3e      	blt.n	8014268 <tcp_receive+0xddc>
 80141ea:	4b1e      	ldr	r3, [pc, #120]	; (8014264 <tcp_receive+0xdd8>)
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f0:	68db      	ldr	r3, [r3, #12]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	3301      	adds	r3, #1
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	dc35      	bgt.n	8014268 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80141fc:	4818      	ldr	r0, [pc, #96]	; (8014260 <tcp_receive+0xdd4>)
 80141fe:	f7fd fc3c 	bl	8011a7a <tcp_seg_copy>
 8014202:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2b00      	cmp	r3, #0
 8014208:	f000 8102 	beq.w	8014410 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014214:	8912      	ldrh	r2, [r2, #8]
 8014216:	441a      	add	r2, r3
 8014218:	4b12      	ldr	r3, [pc, #72]	; (8014264 <tcp_receive+0xdd8>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	1ad3      	subs	r3, r2, r3
 801421e:	2b00      	cmp	r3, #0
 8014220:	dd12      	ble.n	8014248 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014222:	4b10      	ldr	r3, [pc, #64]	; (8014264 <tcp_receive+0xdd8>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	b29a      	uxth	r2, r3
 8014228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	b29b      	uxth	r3, r3
 8014230:	1ad3      	subs	r3, r2, r3
 8014232:	b29a      	uxth	r2, r3
 8014234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014236:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423a:	685a      	ldr	r2, [r3, #4]
 801423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423e:	891b      	ldrh	r3, [r3, #8]
 8014240:	4619      	mov	r1, r3
 8014242:	4610      	mov	r0, r2
 8014244:	f7fb ff74 	bl	8010130 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801424e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014250:	68f8      	ldr	r0, [r7, #12]
 8014252:	f7ff f8a5 	bl	80133a0 <tcp_oos_insert_segment>
                  }
                  break;
 8014256:	e0db      	b.n	8014410 <tcp_receive+0xf84>
 8014258:	200040e4 	.word	0x200040e4
 801425c:	200040e1 	.word	0x200040e1
 8014260:	200040b4 	.word	0x200040b4
 8014264:	200040d4 	.word	0x200040d4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	f040 80bf 	bne.w	80143f0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014272:	4b7c      	ldr	r3, [pc, #496]	; (8014464 <tcp_receive+0xfd8>)
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801427e:	2b00      	cmp	r3, #0
 8014280:	f340 80b6 	ble.w	80143f0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	899b      	ldrh	r3, [r3, #12]
 801428a:	b29b      	uxth	r3, r3
 801428c:	4618      	mov	r0, r3
 801428e:	f7fa fea9 	bl	800efe4 <lwip_htons>
 8014292:	4603      	mov	r3, r0
 8014294:	f003 0301 	and.w	r3, r3, #1
 8014298:	2b00      	cmp	r3, #0
 801429a:	f040 80bb 	bne.w	8014414 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801429e:	4872      	ldr	r0, [pc, #456]	; (8014468 <tcp_receive+0xfdc>)
 80142a0:	f7fd fbeb 	bl	8011a7a <tcp_seg_copy>
 80142a4:	4602      	mov	r2, r0
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80142aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f000 80b2 	beq.w	8014418 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80142b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142bc:	8912      	ldrh	r2, [r2, #8]
 80142be:	441a      	add	r2, r3
 80142c0:	4b68      	ldr	r3, [pc, #416]	; (8014464 <tcp_receive+0xfd8>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	dd12      	ble.n	80142f0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80142ca:	4b66      	ldr	r3, [pc, #408]	; (8014464 <tcp_receive+0xfd8>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	1ad3      	subs	r3, r2, r3
 80142da:	b29a      	uxth	r2, r3
 80142dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e2:	685a      	ldr	r2, [r3, #4]
 80142e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e6:	891b      	ldrh	r3, [r3, #8]
 80142e8:	4619      	mov	r1, r3
 80142ea:	4610      	mov	r0, r2
 80142ec:	f7fb ff20 	bl	8010130 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80142f0:	4b5e      	ldr	r3, [pc, #376]	; (801446c <tcp_receive+0xfe0>)
 80142f2:	881b      	ldrh	r3, [r3, #0]
 80142f4:	461a      	mov	r2, r3
 80142f6:	4b5b      	ldr	r3, [pc, #364]	; (8014464 <tcp_receive+0xfd8>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	441a      	add	r2, r3
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014304:	440b      	add	r3, r1
 8014306:	1ad3      	subs	r3, r2, r3
 8014308:	2b00      	cmp	r3, #0
 801430a:	f340 8085 	ble.w	8014418 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	899b      	ldrh	r3, [r3, #12]
 8014316:	b29b      	uxth	r3, r3
 8014318:	4618      	mov	r0, r3
 801431a:	f7fa fe63 	bl	800efe4 <lwip_htons>
 801431e:	4603      	mov	r3, r0
 8014320:	f003 0301 	and.w	r3, r3, #1
 8014324:	2b00      	cmp	r3, #0
 8014326:	d01e      	beq.n	8014366 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	899b      	ldrh	r3, [r3, #12]
 8014330:	b29b      	uxth	r3, r3
 8014332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014336:	b29c      	uxth	r4, r3
 8014338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	899b      	ldrh	r3, [r3, #12]
 8014340:	b29b      	uxth	r3, r3
 8014342:	4618      	mov	r0, r3
 8014344:	f7fa fe4e 	bl	800efe4 <lwip_htons>
 8014348:	4603      	mov	r3, r0
 801434a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801434e:	b29b      	uxth	r3, r3
 8014350:	4618      	mov	r0, r3
 8014352:	f7fa fe47 	bl	800efe4 <lwip_htons>
 8014356:	4603      	mov	r3, r0
 8014358:	461a      	mov	r2, r3
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	4322      	orrs	r2, r4
 8014362:	b292      	uxth	r2, r2
 8014364:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801436a:	b29a      	uxth	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014370:	4413      	add	r3, r2
 8014372:	b299      	uxth	r1, r3
 8014374:	4b3b      	ldr	r3, [pc, #236]	; (8014464 <tcp_receive+0xfd8>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	b29a      	uxth	r2, r3
 801437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	1a8a      	subs	r2, r1, r2
 8014380:	b292      	uxth	r2, r2
 8014382:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	685a      	ldr	r2, [r3, #4]
 801438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	891b      	ldrh	r3, [r3, #8]
 8014390:	4619      	mov	r1, r3
 8014392:	4610      	mov	r0, r2
 8014394:	f7fb fecc 	bl	8010130 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	891c      	ldrh	r4, [r3, #8]
 801439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fa fe1b 	bl	800efe4 <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	f003 0303 	and.w	r3, r3, #3
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <tcp_receive+0xf30>
 80143b8:	2301      	movs	r3, #1
 80143ba:	e000      	b.n	80143be <tcp_receive+0xf32>
 80143bc:	2300      	movs	r3, #0
 80143be:	4423      	add	r3, r4
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	4b2a      	ldr	r3, [pc, #168]	; (801446c <tcp_receive+0xfe0>)
 80143c4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80143c6:	4b29      	ldr	r3, [pc, #164]	; (801446c <tcp_receive+0xfe0>)
 80143c8:	881b      	ldrh	r3, [r3, #0]
 80143ca:	461a      	mov	r2, r3
 80143cc:	4b25      	ldr	r3, [pc, #148]	; (8014464 <tcp_receive+0xfd8>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	441a      	add	r2, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d6:	6879      	ldr	r1, [r7, #4]
 80143d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80143da:	440b      	add	r3, r1
 80143dc:	429a      	cmp	r2, r3
 80143de:	d01b      	beq.n	8014418 <tcp_receive+0xf8c>
 80143e0:	4b23      	ldr	r3, [pc, #140]	; (8014470 <tcp_receive+0xfe4>)
 80143e2:	f240 627b 	movw	r2, #1659	; 0x67b
 80143e6:	4923      	ldr	r1, [pc, #140]	; (8014474 <tcp_receive+0xfe8>)
 80143e8:	4823      	ldr	r0, [pc, #140]	; (8014478 <tcp_receive+0xfec>)
 80143ea:	f004 fcf1 	bl	8018dd0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80143ee:	e013      	b.n	8014418 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80143f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80143f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f47f aeab 	bne.w	8014158 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8014402:	e00f      	b.n	8014424 <tcp_receive+0xf98>
                break;
 8014404:	bf00      	nop
 8014406:	e00d      	b.n	8014424 <tcp_receive+0xf98>
                break;
 8014408:	bf00      	nop
 801440a:	e00b      	b.n	8014424 <tcp_receive+0xf98>
                  break;
 801440c:	bf00      	nop
 801440e:	e009      	b.n	8014424 <tcp_receive+0xf98>
                  break;
 8014410:	bf00      	nop
 8014412:	e007      	b.n	8014424 <tcp_receive+0xf98>
                  break;
 8014414:	bf00      	nop
 8014416:	e005      	b.n	8014424 <tcp_receive+0xf98>
                break;
 8014418:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801441a:	e003      	b.n	8014424 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 ff4f 	bl	80152c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014422:	e01a      	b.n	801445a <tcp_receive+0xfce>
 8014424:	e019      	b.n	801445a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014426:	4b0f      	ldr	r3, [pc, #60]	; (8014464 <tcp_receive+0xfd8>)
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	2b00      	cmp	r3, #0
 8014432:	db0a      	blt.n	801444a <tcp_receive+0xfbe>
 8014434:	4b0b      	ldr	r3, [pc, #44]	; (8014464 <tcp_receive+0xfd8>)
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801443c:	6879      	ldr	r1, [r7, #4]
 801443e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014440:	440b      	add	r3, r1
 8014442:	1ad3      	subs	r3, r2, r3
 8014444:	3301      	adds	r3, #1
 8014446:	2b00      	cmp	r3, #0
 8014448:	dd07      	ble.n	801445a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	7e9b      	ldrb	r3, [r3, #26]
 801444e:	f043 0302 	orr.w	r3, r3, #2
 8014452:	b2da      	uxtb	r2, r3
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8014458:	e7ff      	b.n	801445a <tcp_receive+0xfce>
 801445a:	bf00      	nop
 801445c:	3734      	adds	r7, #52	; 0x34
 801445e:	46bd      	mov	sp, r7
 8014460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014462:	bf00      	nop
 8014464:	200040d4 	.word	0x200040d4
 8014468:	200040b4 	.word	0x200040b4
 801446c:	200040de 	.word	0x200040de
 8014470:	0801b4f8 	.word	0x0801b4f8
 8014474:	0801b7e8 	.word	0x0801b7e8
 8014478:	0801b560 	.word	0x0801b560

0801447c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801447c:	b480      	push	{r7}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014482:	4b18      	ldr	r3, [pc, #96]	; (80144e4 <tcp_getoptbyte+0x68>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d005      	beq.n	8014496 <tcp_getoptbyte+0x1a>
 801448a:	4b17      	ldr	r3, [pc, #92]	; (80144e8 <tcp_getoptbyte+0x6c>)
 801448c:	881a      	ldrh	r2, [r3, #0]
 801448e:	4b17      	ldr	r3, [pc, #92]	; (80144ec <tcp_getoptbyte+0x70>)
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	429a      	cmp	r2, r3
 8014494:	d20e      	bcs.n	80144b4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014496:	4b16      	ldr	r3, [pc, #88]	; (80144f0 <tcp_getoptbyte+0x74>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	3314      	adds	r3, #20
 801449c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801449e:	4b12      	ldr	r3, [pc, #72]	; (80144e8 <tcp_getoptbyte+0x6c>)
 80144a0:	881b      	ldrh	r3, [r3, #0]
 80144a2:	1c5a      	adds	r2, r3, #1
 80144a4:	b291      	uxth	r1, r2
 80144a6:	4a10      	ldr	r2, [pc, #64]	; (80144e8 <tcp_getoptbyte+0x6c>)
 80144a8:	8011      	strh	r1, [r2, #0]
 80144aa:	461a      	mov	r2, r3
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	4413      	add	r3, r2
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	e010      	b.n	80144d6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80144b4:	4b0c      	ldr	r3, [pc, #48]	; (80144e8 <tcp_getoptbyte+0x6c>)
 80144b6:	881b      	ldrh	r3, [r3, #0]
 80144b8:	1c5a      	adds	r2, r3, #1
 80144ba:	b291      	uxth	r1, r2
 80144bc:	4a0a      	ldr	r2, [pc, #40]	; (80144e8 <tcp_getoptbyte+0x6c>)
 80144be:	8011      	strh	r1, [r2, #0]
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	4b0a      	ldr	r3, [pc, #40]	; (80144ec <tcp_getoptbyte+0x70>)
 80144c4:	881b      	ldrh	r3, [r3, #0]
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	1ad3      	subs	r3, r2, r3
 80144ca:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80144cc:	4b05      	ldr	r3, [pc, #20]	; (80144e4 <tcp_getoptbyte+0x68>)
 80144ce:	681a      	ldr	r2, [r3, #0]
 80144d0:	79fb      	ldrb	r3, [r7, #7]
 80144d2:	4413      	add	r3, r2
 80144d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	370c      	adds	r7, #12
 80144da:	46bd      	mov	sp, r7
 80144dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop
 80144e4:	200040cc 	.word	0x200040cc
 80144e8:	200040d0 	.word	0x200040d0
 80144ec:	200040ca 	.word	0x200040ca
 80144f0:	200040c4 	.word	0x200040c4

080144f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b084      	sub	sp, #16
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80144fc:	4b2d      	ldr	r3, [pc, #180]	; (80145b4 <tcp_parseopt+0xc0>)
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d053      	beq.n	80145ac <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014504:	4b2c      	ldr	r3, [pc, #176]	; (80145b8 <tcp_parseopt+0xc4>)
 8014506:	2200      	movs	r2, #0
 8014508:	801a      	strh	r2, [r3, #0]
 801450a:	e043      	b.n	8014594 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 801450c:	f7ff ffb6 	bl	801447c <tcp_getoptbyte>
 8014510:	4603      	mov	r3, r0
 8014512:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014514:	7bfb      	ldrb	r3, [r7, #15]
 8014516:	2b01      	cmp	r3, #1
 8014518:	d03c      	beq.n	8014594 <tcp_parseopt+0xa0>
 801451a:	2b02      	cmp	r3, #2
 801451c:	d002      	beq.n	8014524 <tcp_parseopt+0x30>
 801451e:	2b00      	cmp	r3, #0
 8014520:	d03f      	beq.n	80145a2 <tcp_parseopt+0xae>
 8014522:	e026      	b.n	8014572 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014524:	f7ff ffaa 	bl	801447c <tcp_getoptbyte>
 8014528:	4603      	mov	r3, r0
 801452a:	2b04      	cmp	r3, #4
 801452c:	d13b      	bne.n	80145a6 <tcp_parseopt+0xb2>
 801452e:	4b22      	ldr	r3, [pc, #136]	; (80145b8 <tcp_parseopt+0xc4>)
 8014530:	881b      	ldrh	r3, [r3, #0]
 8014532:	3302      	adds	r3, #2
 8014534:	4a1f      	ldr	r2, [pc, #124]	; (80145b4 <tcp_parseopt+0xc0>)
 8014536:	8812      	ldrh	r2, [r2, #0]
 8014538:	4293      	cmp	r3, r2
 801453a:	dc34      	bgt.n	80145a6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801453c:	f7ff ff9e 	bl	801447c <tcp_getoptbyte>
 8014540:	4603      	mov	r3, r0
 8014542:	b29b      	uxth	r3, r3
 8014544:	021b      	lsls	r3, r3, #8
 8014546:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8014548:	f7ff ff98 	bl	801447c <tcp_getoptbyte>
 801454c:	4603      	mov	r3, r0
 801454e:	b29a      	uxth	r2, r3
 8014550:	89bb      	ldrh	r3, [r7, #12]
 8014552:	4313      	orrs	r3, r2
 8014554:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014556:	89bb      	ldrh	r3, [r7, #12]
 8014558:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801455c:	d804      	bhi.n	8014568 <tcp_parseopt+0x74>
 801455e:	89bb      	ldrh	r3, [r7, #12]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d001      	beq.n	8014568 <tcp_parseopt+0x74>
 8014564:	89ba      	ldrh	r2, [r7, #12]
 8014566:	e001      	b.n	801456c <tcp_parseopt+0x78>
 8014568:	f44f 7206 	mov.w	r2, #536	; 0x218
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8014570:	e010      	b.n	8014594 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014572:	f7ff ff83 	bl	801447c <tcp_getoptbyte>
 8014576:	4603      	mov	r3, r0
 8014578:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801457a:	7afb      	ldrb	r3, [r7, #11]
 801457c:	2b01      	cmp	r3, #1
 801457e:	d914      	bls.n	80145aa <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014580:	7afb      	ldrb	r3, [r7, #11]
 8014582:	b29a      	uxth	r2, r3
 8014584:	4b0c      	ldr	r3, [pc, #48]	; (80145b8 <tcp_parseopt+0xc4>)
 8014586:	881b      	ldrh	r3, [r3, #0]
 8014588:	4413      	add	r3, r2
 801458a:	b29b      	uxth	r3, r3
 801458c:	3b02      	subs	r3, #2
 801458e:	b29a      	uxth	r2, r3
 8014590:	4b09      	ldr	r3, [pc, #36]	; (80145b8 <tcp_parseopt+0xc4>)
 8014592:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014594:	4b08      	ldr	r3, [pc, #32]	; (80145b8 <tcp_parseopt+0xc4>)
 8014596:	881a      	ldrh	r2, [r3, #0]
 8014598:	4b06      	ldr	r3, [pc, #24]	; (80145b4 <tcp_parseopt+0xc0>)
 801459a:	881b      	ldrh	r3, [r3, #0]
 801459c:	429a      	cmp	r2, r3
 801459e:	d3b5      	bcc.n	801450c <tcp_parseopt+0x18>
 80145a0:	e004      	b.n	80145ac <tcp_parseopt+0xb8>
        return;
 80145a2:	bf00      	nop
 80145a4:	e002      	b.n	80145ac <tcp_parseopt+0xb8>
          return;
 80145a6:	bf00      	nop
 80145a8:	e000      	b.n	80145ac <tcp_parseopt+0xb8>
          return;
 80145aa:	bf00      	nop
      }
    }
  }
}
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	200040c8 	.word	0x200040c8
 80145b8:	200040d0 	.word	0x200040d0

080145bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80145bc:	b480      	push	{r7}
 80145be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80145c0:	4b05      	ldr	r3, [pc, #20]	; (80145d8 <tcp_trigger_input_pcb_close+0x1c>)
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	f043 0310 	orr.w	r3, r3, #16
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	4b03      	ldr	r3, [pc, #12]	; (80145d8 <tcp_trigger_input_pcb_close+0x1c>)
 80145cc:	701a      	strb	r2, [r3, #0]
}
 80145ce:	bf00      	nop
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr
 80145d8:	200040e1 	.word	0x200040e1

080145dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	607b      	str	r3, [r7, #4]
 80145e6:	460b      	mov	r3, r1
 80145e8:	817b      	strh	r3, [r7, #10]
 80145ea:	4613      	mov	r3, r2
 80145ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80145ee:	897a      	ldrh	r2, [r7, #10]
 80145f0:	893b      	ldrh	r3, [r7, #8]
 80145f2:	4413      	add	r3, r2
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	3314      	adds	r3, #20
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	2200      	movs	r2, #0
 80145fc:	4619      	mov	r1, r3
 80145fe:	2001      	movs	r0, #1
 8014600:	f7fb fb98 	bl	800fd34 <pbuf_alloc>
 8014604:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d057      	beq.n	80146bc <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	895b      	ldrh	r3, [r3, #10]
 8014610:	461a      	mov	r2, r3
 8014612:	897b      	ldrh	r3, [r7, #10]
 8014614:	3314      	adds	r3, #20
 8014616:	429a      	cmp	r2, r3
 8014618:	da05      	bge.n	8014626 <tcp_output_alloc_header+0x4a>
 801461a:	4b2b      	ldr	r3, [pc, #172]	; (80146c8 <tcp_output_alloc_header+0xec>)
 801461c:	2273      	movs	r2, #115	; 0x73
 801461e:	492b      	ldr	r1, [pc, #172]	; (80146cc <tcp_output_alloc_header+0xf0>)
 8014620:	482b      	ldr	r0, [pc, #172]	; (80146d0 <tcp_output_alloc_header+0xf4>)
 8014622:	f004 fbd5 	bl	8018dd0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	8adb      	ldrh	r3, [r3, #22]
 8014630:	4618      	mov	r0, r3
 8014632:	f7fa fcd7 	bl	800efe4 <lwip_htons>
 8014636:	4603      	mov	r3, r0
 8014638:	461a      	mov	r2, r3
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	8b1b      	ldrh	r3, [r3, #24]
 8014642:	4618      	mov	r0, r3
 8014644:	f7fa fcce 	bl	800efe4 <lwip_htons>
 8014648:	4603      	mov	r3, r0
 801464a:	461a      	mov	r2, r3
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014650:	693b      	ldr	r3, [r7, #16]
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801465a:	4618      	mov	r0, r3
 801465c:	f7fa fcd0 	bl	800f000 <lwip_htonl>
 8014660:	4602      	mov	r2, r0
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014666:	897b      	ldrh	r3, [r7, #10]
 8014668:	089b      	lsrs	r3, r3, #2
 801466a:	b29b      	uxth	r3, r3
 801466c:	3305      	adds	r3, #5
 801466e:	b29b      	uxth	r3, r3
 8014670:	031b      	lsls	r3, r3, #12
 8014672:	b29b      	uxth	r3, r3
 8014674:	f043 0310 	orr.w	r3, r3, #16
 8014678:	b29b      	uxth	r3, r3
 801467a:	4618      	mov	r0, r3
 801467c:	f7fa fcb2 	bl	800efe4 <lwip_htons>
 8014680:	4603      	mov	r3, r0
 8014682:	461a      	mov	r2, r3
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801468c:	4618      	mov	r0, r3
 801468e:	f7fa fca9 	bl	800efe4 <lwip_htons>
 8014692:	4603      	mov	r3, r0
 8014694:	461a      	mov	r2, r3
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801469a:	693b      	ldr	r3, [r7, #16]
 801469c:	2200      	movs	r2, #0
 801469e:	741a      	strb	r2, [r3, #16]
 80146a0:	2200      	movs	r2, #0
 80146a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	2200      	movs	r2, #0
 80146a8:	749a      	strb	r2, [r3, #18]
 80146aa:	2200      	movs	r2, #0
 80146ac:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b2:	68fa      	ldr	r2, [r7, #12]
 80146b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80146b6:	441a      	add	r2, r3
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80146bc:	697b      	ldr	r3, [r7, #20]
}
 80146be:	4618      	mov	r0, r3
 80146c0:	3718      	adds	r7, #24
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	0801b8a4 	.word	0x0801b8a4
 80146cc:	0801b8fc 	.word	0x0801b8fc
 80146d0:	0801b92c 	.word	0x0801b92c

080146d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80146d4:	b590      	push	{r4, r7, lr}
 80146d6:	b085      	sub	sp, #20
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d02d      	beq.n	8014740 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146e8:	60fb      	str	r3, [r7, #12]
 80146ea:	e002      	b.n	80146f2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d1f8      	bne.n	80146ec <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	68db      	ldr	r3, [r3, #12]
 80146fe:	899b      	ldrh	r3, [r3, #12]
 8014700:	b29b      	uxth	r3, r3
 8014702:	4618      	mov	r0, r3
 8014704:	f7fa fc6e 	bl	800efe4 <lwip_htons>
 8014708:	4603      	mov	r3, r0
 801470a:	f003 0307 	and.w	r3, r3, #7
 801470e:	2b00      	cmp	r3, #0
 8014710:	d116      	bne.n	8014740 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	899b      	ldrh	r3, [r3, #12]
 8014718:	b29c      	uxth	r4, r3
 801471a:	2001      	movs	r0, #1
 801471c:	f7fa fc62 	bl	800efe4 <lwip_htons>
 8014720:	4603      	mov	r3, r0
 8014722:	461a      	mov	r2, r3
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	68db      	ldr	r3, [r3, #12]
 8014728:	4322      	orrs	r2, r4
 801472a:	b292      	uxth	r2, r2
 801472c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	7e9b      	ldrb	r3, [r3, #26]
 8014732:	f043 0320 	orr.w	r3, r3, #32
 8014736:	b2da      	uxtb	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801473c:	2300      	movs	r3, #0
 801473e:	e004      	b.n	801474a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014740:	2101      	movs	r1, #1
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 fcc0 	bl	80150c8 <tcp_enqueue_flags>
 8014748:	4603      	mov	r3, r0
}
 801474a:	4618      	mov	r0, r3
 801474c:	3714      	adds	r7, #20
 801474e:	46bd      	mov	sp, r7
 8014750:	bd90      	pop	{r4, r7, pc}
	...

08014754 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014754:	b590      	push	{r4, r7, lr}
 8014756:	b087      	sub	sp, #28
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	603b      	str	r3, [r7, #0]
 8014760:	4613      	mov	r3, r2
 8014762:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014764:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	b2db      	uxtb	r3, r3
 801476c:	f003 0304 	and.w	r3, r3, #4
 8014770:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014772:	2003      	movs	r0, #3
 8014774:	f7fb f842 	bl	800f7fc <memp_malloc>
 8014778:	6138      	str	r0, [r7, #16]
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d104      	bne.n	801478a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014780:	68b8      	ldr	r0, [r7, #8]
 8014782:	f7fb fe49 	bl	8010418 <pbuf_free>
    return NULL;
 8014786:	2300      	movs	r3, #0
 8014788:	e061      	b.n	801484e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014790:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	2200      	movs	r2, #0
 8014796:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	68ba      	ldr	r2, [r7, #8]
 801479c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	891a      	ldrh	r2, [r3, #8]
 80147a2:	7dfb      	ldrb	r3, [r7, #23]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d205      	bcs.n	80147b6 <tcp_create_segment+0x62>
 80147aa:	4b2b      	ldr	r3, [pc, #172]	; (8014858 <tcp_create_segment+0x104>)
 80147ac:	22ba      	movs	r2, #186	; 0xba
 80147ae:	492b      	ldr	r1, [pc, #172]	; (801485c <tcp_create_segment+0x108>)
 80147b0:	482b      	ldr	r0, [pc, #172]	; (8014860 <tcp_create_segment+0x10c>)
 80147b2:	f004 fb0d 	bl	8018dd0 <iprintf>
  seg->len = p->tot_len - optlen;
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	891a      	ldrh	r2, [r3, #8]
 80147ba:	7dfb      	ldrb	r3, [r7, #23]
 80147bc:	b29b      	uxth	r3, r3
 80147be:	1ad3      	subs	r3, r2, r3
 80147c0:	b29a      	uxth	r2, r3
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80147c6:	2114      	movs	r1, #20
 80147c8:	68b8      	ldr	r0, [r7, #8]
 80147ca:	f7fb fe01 	bl	80103d0 <pbuf_header>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d004      	beq.n	80147de <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80147d4:	6938      	ldr	r0, [r7, #16]
 80147d6:	f7fd f938 	bl	8011a4a <tcp_seg_free>
    return NULL;
 80147da:	2300      	movs	r3, #0
 80147dc:	e037      	b.n	801484e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	685a      	ldr	r2, [r3, #4]
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	8ada      	ldrh	r2, [r3, #22]
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	68dc      	ldr	r4, [r3, #12]
 80147f0:	4610      	mov	r0, r2
 80147f2:	f7fa fbf7 	bl	800efe4 <lwip_htons>
 80147f6:	4603      	mov	r3, r0
 80147f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	8b1a      	ldrh	r2, [r3, #24]
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	68dc      	ldr	r4, [r3, #12]
 8014802:	4610      	mov	r0, r2
 8014804:	f7fa fbee 	bl	800efe4 <lwip_htons>
 8014808:	4603      	mov	r3, r0
 801480a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	68dc      	ldr	r4, [r3, #12]
 8014810:	6838      	ldr	r0, [r7, #0]
 8014812:	f7fa fbf5 	bl	800f000 <lwip_htonl>
 8014816:	4603      	mov	r3, r0
 8014818:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	089b      	lsrs	r3, r3, #2
 801481e:	b2db      	uxtb	r3, r3
 8014820:	b29b      	uxth	r3, r3
 8014822:	3305      	adds	r3, #5
 8014824:	b29b      	uxth	r3, r3
 8014826:	031b      	lsls	r3, r3, #12
 8014828:	b29a      	uxth	r2, r3
 801482a:	79fb      	ldrb	r3, [r7, #7]
 801482c:	b29b      	uxth	r3, r3
 801482e:	4313      	orrs	r3, r2
 8014830:	b29a      	uxth	r2, r3
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	68dc      	ldr	r4, [r3, #12]
 8014836:	4610      	mov	r0, r2
 8014838:	f7fa fbd4 	bl	800efe4 <lwip_htons>
 801483c:	4603      	mov	r3, r0
 801483e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	2200      	movs	r2, #0
 8014846:	749a      	strb	r2, [r3, #18]
 8014848:	2200      	movs	r2, #0
 801484a:	74da      	strb	r2, [r3, #19]
  return seg;
 801484c:	693b      	ldr	r3, [r7, #16]
}
 801484e:	4618      	mov	r0, r3
 8014850:	371c      	adds	r7, #28
 8014852:	46bd      	mov	sp, r7
 8014854:	bd90      	pop	{r4, r7, pc}
 8014856:	bf00      	nop
 8014858:	0801b8a4 	.word	0x0801b8a4
 801485c:	0801b954 	.word	0x0801b954
 8014860:	0801b92c 	.word	0x0801b92c

08014864 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b086      	sub	sp, #24
 8014868:	af00      	add	r7, sp, #0
 801486a:	607b      	str	r3, [r7, #4]
 801486c:	4603      	mov	r3, r0
 801486e:	73fb      	strb	r3, [r7, #15]
 8014870:	460b      	mov	r3, r1
 8014872:	81bb      	strh	r3, [r7, #12]
 8014874:	4613      	mov	r3, r2
 8014876:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014878:	89bb      	ldrh	r3, [r7, #12]
 801487a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801487c:	89ba      	ldrh	r2, [r7, #12]
 801487e:	897b      	ldrh	r3, [r7, #10]
 8014880:	429a      	cmp	r2, r3
 8014882:	d221      	bcs.n	80148c8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014888:	f003 0302 	and.w	r3, r3, #2
 801488c:	2b00      	cmp	r3, #0
 801488e:	d111      	bne.n	80148b4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8014890:	6a3b      	ldr	r3, [r7, #32]
 8014892:	7e9b      	ldrb	r3, [r3, #26]
 8014894:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014898:	2b00      	cmp	r3, #0
 801489a:	d115      	bne.n	80148c8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801489c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d007      	beq.n	80148b4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80148a4:	6a3b      	ldr	r3, [r7, #32]
 80148a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d103      	bne.n	80148b4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80148ac:	6a3b      	ldr	r3, [r7, #32]
 80148ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d009      	beq.n	80148c8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80148b4:	89bb      	ldrh	r3, [r7, #12]
 80148b6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80148ba:	f023 0203 	bic.w	r2, r3, #3
 80148be:	897b      	ldrh	r3, [r7, #10]
 80148c0:	4293      	cmp	r3, r2
 80148c2:	bf28      	it	cs
 80148c4:	4613      	movcs	r3, r2
 80148c6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80148c8:	8af9      	ldrh	r1, [r7, #22]
 80148ca:	7bfb      	ldrb	r3, [r7, #15]
 80148cc:	2200      	movs	r2, #0
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7fb fa30 	bl	800fd34 <pbuf_alloc>
 80148d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d101      	bne.n	80148e0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80148dc:	2300      	movs	r3, #0
 80148de:	e019      	b.n	8014914 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d006      	beq.n	80148f6 <tcp_pbuf_prealloc+0x92>
 80148e8:	4b0c      	ldr	r3, [pc, #48]	; (801491c <tcp_pbuf_prealloc+0xb8>)
 80148ea:	f44f 7288 	mov.w	r2, #272	; 0x110
 80148ee:	490c      	ldr	r1, [pc, #48]	; (8014920 <tcp_pbuf_prealloc+0xbc>)
 80148f0:	480c      	ldr	r0, [pc, #48]	; (8014924 <tcp_pbuf_prealloc+0xc0>)
 80148f2:	f004 fa6d 	bl	8018dd0 <iprintf>
  *oversize = p->len - length;
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	895a      	ldrh	r2, [r3, #10]
 80148fa:	89bb      	ldrh	r3, [r7, #12]
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	b29a      	uxth	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	89ba      	ldrh	r2, [r7, #12]
 8014908:	811a      	strh	r2, [r3, #8]
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	891a      	ldrh	r2, [r3, #8]
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	815a      	strh	r2, [r3, #10]
  return p;
 8014912:	693b      	ldr	r3, [r7, #16]
}
 8014914:	4618      	mov	r0, r3
 8014916:	3718      	adds	r7, #24
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	0801b8a4 	.word	0x0801b8a4
 8014920:	0801b96c 	.word	0x0801b96c
 8014924:	0801b92c 	.word	0x0801b92c

08014928 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	460b      	mov	r3, r1
 8014932:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	7d1b      	ldrb	r3, [r3, #20]
 8014938:	2b04      	cmp	r3, #4
 801493a:	d00e      	beq.n	801495a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014940:	2b07      	cmp	r3, #7
 8014942:	d00a      	beq.n	801495a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014948:	2b02      	cmp	r3, #2
 801494a:	d006      	beq.n	801495a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014950:	2b03      	cmp	r3, #3
 8014952:	d002      	beq.n	801495a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014954:	f06f 030a 	mvn.w	r3, #10
 8014958:	e04f      	b.n	80149fa <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801495a:	887b      	ldrh	r3, [r7, #2]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d101      	bne.n	8014964 <tcp_write_checks+0x3c>
    return ERR_OK;
 8014960:	2300      	movs	r3, #0
 8014962:	e04a      	b.n	80149fa <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801496a:	887a      	ldrh	r2, [r7, #2]
 801496c:	429a      	cmp	r2, r3
 801496e:	d909      	bls.n	8014984 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	7e9b      	ldrb	r3, [r3, #26]
 8014974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014978:	b2da      	uxtb	r2, r3
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801497e:	f04f 33ff 	mov.w	r3, #4294967295
 8014982:	e03a      	b.n	80149fa <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801498a:	2b08      	cmp	r3, #8
 801498c:	d806      	bhi.n	801499c <tcp_write_checks+0x74>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014994:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014998:	4293      	cmp	r3, r2
 801499a:	d909      	bls.n	80149b0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	7e9b      	ldrb	r3, [r3, #26]
 80149a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80149a4:	b2da      	uxtb	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80149aa:	f04f 33ff 	mov.w	r3, #4294967295
 80149ae:	e024      	b.n	80149fa <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d00f      	beq.n	80149da <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d11a      	bne.n	80149f8 <tcp_write_checks+0xd0>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d116      	bne.n	80149f8 <tcp_write_checks+0xd0>
 80149ca:	4b0e      	ldr	r3, [pc, #56]	; (8014a04 <tcp_write_checks+0xdc>)
 80149cc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80149d0:	490d      	ldr	r1, [pc, #52]	; (8014a08 <tcp_write_checks+0xe0>)
 80149d2:	480e      	ldr	r0, [pc, #56]	; (8014a0c <tcp_write_checks+0xe4>)
 80149d4:	f004 f9fc 	bl	8018dd0 <iprintf>
 80149d8:	e00e      	b.n	80149f8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d103      	bne.n	80149ea <tcp_write_checks+0xc2>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d006      	beq.n	80149f8 <tcp_write_checks+0xd0>
 80149ea:	4b06      	ldr	r3, [pc, #24]	; (8014a04 <tcp_write_checks+0xdc>)
 80149ec:	f240 1259 	movw	r2, #345	; 0x159
 80149f0:	4907      	ldr	r1, [pc, #28]	; (8014a10 <tcp_write_checks+0xe8>)
 80149f2:	4806      	ldr	r0, [pc, #24]	; (8014a0c <tcp_write_checks+0xe4>)
 80149f4:	f004 f9ec 	bl	8018dd0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80149f8:	2300      	movs	r3, #0
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	0801b8a4 	.word	0x0801b8a4
 8014a08:	0801b980 	.word	0x0801b980
 8014a0c:	0801b92c 	.word	0x0801b92c
 8014a10:	0801b9bc 	.word	0x0801b9bc

08014a14 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014a14:	b590      	push	{r4, r7, lr}
 8014a16:	b09b      	sub	sp, #108	; 0x6c
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	4611      	mov	r1, r2
 8014a20:	461a      	mov	r2, r3
 8014a22:	460b      	mov	r3, r1
 8014a24:	80fb      	strh	r3, [r7, #6]
 8014a26:	4613      	mov	r3, r2
 8014a28:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	653b      	str	r3, [r7, #80]	; 0x50
 8014a32:	2300      	movs	r3, #0
 8014a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a36:	2300      	movs	r3, #0
 8014a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014a3e:	2300      	movs	r3, #0
 8014a40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8014a44:	2300      	movs	r3, #0
 8014a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014a50:	2300      	movs	r3, #0
 8014a52:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014a54:	2300      	movs	r3, #0
 8014a56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a62:	085b      	lsrs	r3, r3, #1
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	bf28      	it	cs
 8014a6e:	4613      	movcs	r3, r2
 8014a70:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d102      	bne.n	8014a7e <tcp_write+0x6a>
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a7c:	e000      	b.n	8014a80 <tcp_write+0x6c>
 8014a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a80:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d109      	bne.n	8014a9c <tcp_write+0x88>
 8014a88:	4b92      	ldr	r3, [pc, #584]	; (8014cd4 <tcp_write+0x2c0>)
 8014a8a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8014a8e:	4992      	ldr	r1, [pc, #584]	; (8014cd8 <tcp_write+0x2c4>)
 8014a90:	4892      	ldr	r0, [pc, #584]	; (8014cdc <tcp_write+0x2c8>)
 8014a92:	f004 f99d 	bl	8018dd0 <iprintf>
 8014a96:	f06f 030f 	mvn.w	r3, #15
 8014a9a:	e30a      	b.n	80150b2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014a9c:	88fb      	ldrh	r3, [r7, #6]
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f7ff ff41 	bl	8014928 <tcp_write_checks>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014aac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <tcp_write+0xa6>
    return err;
 8014ab4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014ab8:	e2fb      	b.n	80150b2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ac0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f000 80f5 	beq.w	8014cb8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8014ad4:	e002      	b.n	8014adc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8014ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1f8      	bne.n	8014ad6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8014ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ae6:	7a9b      	ldrb	r3, [r3, #10]
 8014ae8:	009b      	lsls	r3, r3, #2
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	f003 0304 	and.w	r3, r3, #4
 8014af0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014af6:	891b      	ldrh	r3, [r3, #8]
 8014af8:	4619      	mov	r1, r3
 8014afa:	8c3b      	ldrh	r3, [r7, #32]
 8014afc:	440b      	add	r3, r1
 8014afe:	429a      	cmp	r2, r3
 8014b00:	da06      	bge.n	8014b10 <tcp_write+0xfc>
 8014b02:	4b74      	ldr	r3, [pc, #464]	; (8014cd4 <tcp_write+0x2c0>)
 8014b04:	f240 12c7 	movw	r2, #455	; 0x1c7
 8014b08:	4975      	ldr	r1, [pc, #468]	; (8014ce0 <tcp_write+0x2cc>)
 8014b0a:	4874      	ldr	r0, [pc, #464]	; (8014cdc <tcp_write+0x2c8>)
 8014b0c:	f004 f960 	bl	8018dd0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b12:	891a      	ldrh	r2, [r3, #8]
 8014b14:	8c3b      	ldrh	r3, [r7, #32]
 8014b16:	4413      	add	r3, r2
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b26:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014b28:	8a7b      	ldrh	r3, [r7, #18]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d027      	beq.n	8014b7e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014b2e:	8a7b      	ldrh	r3, [r7, #18]
 8014b30:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d206      	bcs.n	8014b44 <tcp_write+0x130>
 8014b36:	4b67      	ldr	r3, [pc, #412]	; (8014cd4 <tcp_write+0x2c0>)
 8014b38:	f240 12d9 	movw	r2, #473	; 0x1d9
 8014b3c:	4969      	ldr	r1, [pc, #420]	; (8014ce4 <tcp_write+0x2d0>)
 8014b3e:	4867      	ldr	r0, [pc, #412]	; (8014cdc <tcp_write+0x2c8>)
 8014b40:	f004 f946 	bl	8018dd0 <iprintf>
      seg = last_unsent;
 8014b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014b48:	8a7b      	ldrh	r3, [r7, #18]
 8014b4a:	88fa      	ldrh	r2, [r7, #6]
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d901      	bls.n	8014b54 <tcp_write+0x140>
 8014b50:	8a7b      	ldrh	r3, [r7, #18]
 8014b52:	e000      	b.n	8014b56 <tcp_write+0x142>
 8014b54:	88fb      	ldrh	r3, [r7, #6]
 8014b56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	bfa8      	it	ge
 8014b5c:	4613      	movge	r3, r2
 8014b5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014b60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b66:	4413      	add	r3, r2
 8014b68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014b6c:	8a7a      	ldrh	r2, [r7, #18]
 8014b6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014b76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b7a:	1ad3      	subs	r3, r2, r3
 8014b7c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014b7e:	8a7b      	ldrh	r3, [r7, #18]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d00b      	beq.n	8014b9c <tcp_write+0x188>
 8014b84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b88:	88fb      	ldrh	r3, [r7, #6]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d006      	beq.n	8014b9c <tcp_write+0x188>
 8014b8e:	4b51      	ldr	r3, [pc, #324]	; (8014cd4 <tcp_write+0x2c0>)
 8014b90:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014b94:	4954      	ldr	r1, [pc, #336]	; (8014ce8 <tcp_write+0x2d4>)
 8014b96:	4851      	ldr	r0, [pc, #324]	; (8014cdc <tcp_write+0x2c8>)
 8014b98:	f004 f91a 	bl	8018dd0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014b9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ba0:	88fb      	ldrh	r3, [r7, #6]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	f080 8168 	bcs.w	8014e78 <tcp_write+0x464>
 8014ba8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f000 8164 	beq.w	8014e78 <tcp_write+0x464>
 8014bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bb2:	891b      	ldrh	r3, [r3, #8]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f000 815f 	beq.w	8014e78 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014bba:	88fa      	ldrh	r2, [r7, #6]
 8014bbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014bc0:	1ad2      	subs	r2, r2, r3
 8014bc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	bfa8      	it	ge
 8014bc8:	4613      	movge	r3, r2
 8014bca:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bce:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014bd0:	797b      	ldrb	r3, [r7, #5]
 8014bd2:	f003 0301 	and.w	r3, r3, #1
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d027      	beq.n	8014c2a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014bda:	f107 0012 	add.w	r0, r7, #18
 8014bde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014be0:	8bf9      	ldrh	r1, [r7, #30]
 8014be2:	2301      	movs	r3, #1
 8014be4:	9302      	str	r3, [sp, #8]
 8014be6:	797b      	ldrb	r3, [r7, #5]
 8014be8:	9301      	str	r3, [sp, #4]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2004      	movs	r0, #4
 8014bf2:	f7ff fe37 	bl	8014864 <tcp_pbuf_prealloc>
 8014bf6:	6578      	str	r0, [r7, #84]	; 0x54
 8014bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f000 8227 	beq.w	801504e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c02:	6858      	ldr	r0, [r3, #4]
 8014c04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c08:	68ba      	ldr	r2, [r7, #8]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	8bfa      	ldrh	r2, [r7, #30]
 8014c0e:	4619      	mov	r1, r3
 8014c10:	f004 f8cb 	bl	8018daa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014c14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c16:	f7fb fc99 	bl	801054c <pbuf_clen>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014c22:	4413      	add	r3, r2
 8014c24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014c28:	e03f      	b.n	8014caa <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8014c30:	e002      	b.n	8014c38 <tcp_write+0x224>
 8014c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	637b      	str	r3, [r7, #52]	; 0x34
 8014c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d1f8      	bne.n	8014c32 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c42:	7b1b      	ldrb	r3, [r3, #12]
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d115      	bne.n	8014c74 <tcp_write+0x260>
 8014c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c4e:	8952      	ldrh	r2, [r2, #10]
 8014c50:	4413      	add	r3, r2
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d10d      	bne.n	8014c74 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014c58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d006      	beq.n	8014c6e <tcp_write+0x25a>
 8014c60:	4b1c      	ldr	r3, [pc, #112]	; (8014cd4 <tcp_write+0x2c0>)
 8014c62:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8014c66:	4921      	ldr	r1, [pc, #132]	; (8014cec <tcp_write+0x2d8>)
 8014c68:	481c      	ldr	r0, [pc, #112]	; (8014cdc <tcp_write+0x2c8>)
 8014c6a:	f004 f8b1 	bl	8018dd0 <iprintf>
          extendlen = seglen;
 8014c6e:	8bfb      	ldrh	r3, [r7, #30]
 8014c70:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014c72:	e01a      	b.n	8014caa <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014c74:	8bfb      	ldrh	r3, [r7, #30]
 8014c76:	2201      	movs	r2, #1
 8014c78:	4619      	mov	r1, r3
 8014c7a:	2004      	movs	r0, #4
 8014c7c:	f7fb f85a 	bl	800fd34 <pbuf_alloc>
 8014c80:	6578      	str	r0, [r7, #84]	; 0x54
 8014c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f000 81e4 	beq.w	8015052 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8014c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c8e:	68ba      	ldr	r2, [r7, #8]
 8014c90:	441a      	add	r2, r3
 8014c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c94:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014c96:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c98:	f7fb fc58 	bl	801054c <pbuf_clen>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014ca4:	4413      	add	r3, r2
 8014ca6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014caa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014cae:	8bfb      	ldrh	r3, [r7, #30]
 8014cb0:	4413      	add	r3, r2
 8014cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014cb6:	e0df      	b.n	8014e78 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f000 80da 	beq.w	8014e78 <tcp_write+0x464>
 8014cc4:	4b03      	ldr	r3, [pc, #12]	; (8014cd4 <tcp_write+0x2c0>)
 8014cc6:	f240 2225 	movw	r2, #549	; 0x225
 8014cca:	4909      	ldr	r1, [pc, #36]	; (8014cf0 <tcp_write+0x2dc>)
 8014ccc:	4803      	ldr	r0, [pc, #12]	; (8014cdc <tcp_write+0x2c8>)
 8014cce:	f004 f87f 	bl	8018dd0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014cd2:	e0d1      	b.n	8014e78 <tcp_write+0x464>
 8014cd4:	0801b8a4 	.word	0x0801b8a4
 8014cd8:	0801b9f0 	.word	0x0801b9f0
 8014cdc:	0801b92c 	.word	0x0801b92c
 8014ce0:	0801ba24 	.word	0x0801ba24
 8014ce4:	0801ba3c 	.word	0x0801ba3c
 8014ce8:	0801ba5c 	.word	0x0801ba5c
 8014cec:	0801ba7c 	.word	0x0801ba7c
 8014cf0:	0801baa8 	.word	0x0801baa8
    struct pbuf *p;
    u16_t left = len - pos;
 8014cf4:	88fa      	ldrh	r2, [r7, #6]
 8014cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014cfa:	1ad3      	subs	r3, r2, r3
 8014cfc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014d0a:	8b7a      	ldrh	r2, [r7, #26]
 8014d0c:	8bbb      	ldrh	r3, [r7, #28]
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	bf28      	it	cs
 8014d12:	4613      	movcs	r3, r2
 8014d14:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014d16:	797b      	ldrb	r3, [r7, #5]
 8014d18:	f003 0301 	and.w	r3, r3, #1
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d036      	beq.n	8014d8e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d24:	b29a      	uxth	r2, r3
 8014d26:	8b3b      	ldrh	r3, [r7, #24]
 8014d28:	4413      	add	r3, r2
 8014d2a:	b299      	uxth	r1, r3
 8014d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	bf0c      	ite	eq
 8014d32:	2301      	moveq	r3, #1
 8014d34:	2300      	movne	r3, #0
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	f107 0012 	add.w	r0, r7, #18
 8014d3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d3e:	9302      	str	r3, [sp, #8]
 8014d40:	797b      	ldrb	r3, [r7, #5]
 8014d42:	9301      	str	r3, [sp, #4]
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	4603      	mov	r3, r0
 8014d4a:	2000      	movs	r0, #0
 8014d4c:	f7ff fd8a 	bl	8014864 <tcp_pbuf_prealloc>
 8014d50:	6338      	str	r0, [r7, #48]	; 0x30
 8014d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f000 817e 	beq.w	8015056 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5c:	895b      	ldrh	r3, [r3, #10]
 8014d5e:	8b3a      	ldrh	r2, [r7, #24]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d906      	bls.n	8014d72 <tcp_write+0x35e>
 8014d64:	4b8f      	ldr	r3, [pc, #572]	; (8014fa4 <tcp_write+0x590>)
 8014d66:	f240 2241 	movw	r2, #577	; 0x241
 8014d6a:	498f      	ldr	r1, [pc, #572]	; (8014fa8 <tcp_write+0x594>)
 8014d6c:	488f      	ldr	r0, [pc, #572]	; (8014fac <tcp_write+0x598>)
 8014d6e:	f004 f82f 	bl	8018dd0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8014d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d74:	685a      	ldr	r2, [r3, #4]
 8014d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d7a:	18d0      	adds	r0, r2, r3
 8014d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d80:	68ba      	ldr	r2, [r7, #8]
 8014d82:	4413      	add	r3, r2
 8014d84:	8b3a      	ldrh	r2, [r7, #24]
 8014d86:	4619      	mov	r1, r3
 8014d88:	f004 f80f 	bl	8018daa <memcpy>
 8014d8c:	e02e      	b.n	8014dec <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014d8e:	8a7b      	ldrh	r3, [r7, #18]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d006      	beq.n	8014da2 <tcp_write+0x38e>
 8014d94:	4b83      	ldr	r3, [pc, #524]	; (8014fa4 <tcp_write+0x590>)
 8014d96:	f240 224b 	movw	r2, #587	; 0x24b
 8014d9a:	4985      	ldr	r1, [pc, #532]	; (8014fb0 <tcp_write+0x59c>)
 8014d9c:	4883      	ldr	r0, [pc, #524]	; (8014fac <tcp_write+0x598>)
 8014d9e:	f004 f817 	bl	8018dd0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014da2:	8b3b      	ldrh	r3, [r7, #24]
 8014da4:	2201      	movs	r2, #1
 8014da6:	4619      	mov	r1, r3
 8014da8:	2000      	movs	r0, #0
 8014daa:	f7fa ffc3 	bl	800fd34 <pbuf_alloc>
 8014dae:	6178      	str	r0, [r7, #20]
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	f000 8151 	beq.w	801505a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8014db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	441a      	add	r2, r3
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	2200      	movs	r2, #0
 8014dcc:	4619      	mov	r1, r3
 8014dce:	2000      	movs	r0, #0
 8014dd0:	f7fa ffb0 	bl	800fd34 <pbuf_alloc>
 8014dd4:	6338      	str	r0, [r7, #48]	; 0x30
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d103      	bne.n	8014de4 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014ddc:	6978      	ldr	r0, [r7, #20]
 8014dde:	f7fb fb1b 	bl	8010418 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014de2:	e13d      	b.n	8015060 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014de4:	6979      	ldr	r1, [r7, #20]
 8014de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014de8:	f7fb fbf0 	bl	80105cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dee:	f7fb fbad 	bl	801054c <pbuf_clen>
 8014df2:	4603      	mov	r3, r0
 8014df4:	461a      	mov	r2, r3
 8014df6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014dfa:	4413      	add	r3, r2
 8014dfc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014e00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014e04:	2b09      	cmp	r3, #9
 8014e06:	d805      	bhi.n	8014e14 <tcp_write+0x400>
 8014e08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014e0c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014e10:	4293      	cmp	r3, r2
 8014e12:	d903      	bls.n	8014e1c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e16:	f7fb faff 	bl	8010418 <pbuf_free>
      goto memerr;
 8014e1a:	e121      	b.n	8015060 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e24:	441a      	add	r2, r3
 8014e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e2a:	9300      	str	r3, [sp, #0]
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	2200      	movs	r2, #0
 8014e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e32:	68f8      	ldr	r0, [r7, #12]
 8014e34:	f7ff fc8e 	bl	8014754 <tcp_create_segment>
 8014e38:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	f000 810e 	beq.w	801505e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d102      	bne.n	8014e4e <tcp_write+0x43a>
      queue = seg;
 8014e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8014e4c:	e00c      	b.n	8014e68 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d106      	bne.n	8014e62 <tcp_write+0x44e>
 8014e54:	4b53      	ldr	r3, [pc, #332]	; (8014fa4 <tcp_write+0x590>)
 8014e56:	f240 2285 	movw	r2, #645	; 0x285
 8014e5a:	4956      	ldr	r1, [pc, #344]	; (8014fb4 <tcp_write+0x5a0>)
 8014e5c:	4853      	ldr	r0, [pc, #332]	; (8014fac <tcp_write+0x598>)
 8014e5e:	f003 ffb7 	bl	8018dd0 <iprintf>
      prev_seg->next = seg;
 8014e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e66:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e6a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014e6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e70:	8b3b      	ldrh	r3, [r7, #24]
 8014e72:	4413      	add	r3, r2
 8014e74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014e78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e7c:	88fb      	ldrh	r3, [r7, #6]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	f4ff af38 	bcc.w	8014cf4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014e84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d02c      	beq.n	8014ee4 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e90:	e01e      	b.n	8014ed0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8014e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e94:	891a      	ldrh	r2, [r3, #8]
 8014e96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e98:	4413      	add	r3, r2
 8014e9a:	b29a      	uxth	r2, r3
 8014e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d110      	bne.n	8014eca <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014eae:	8952      	ldrh	r2, [r2, #10]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014eb4:	68b9      	ldr	r1, [r7, #8]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f003 ff77 	bl	8018daa <memcpy>
        p->len += oversize_used;
 8014ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ebe:	895a      	ldrh	r2, [r3, #10]
 8014ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ec2:	4413      	add	r3, r2
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1dd      	bne.n	8014e92 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8014ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ed8:	891a      	ldrh	r2, [r3, #8]
 8014eda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014edc:	4413      	add	r3, r2
 8014ede:	b29a      	uxth	r2, r3
 8014ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ee2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014ee4:	8a7a      	ldrh	r2, [r7, #18]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d018      	beq.n	8014f24 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d106      	bne.n	8014f06 <tcp_write+0x4f2>
 8014ef8:	4b2a      	ldr	r3, [pc, #168]	; (8014fa4 <tcp_write+0x590>)
 8014efa:	f240 22bb 	movw	r2, #699	; 0x2bb
 8014efe:	492e      	ldr	r1, [pc, #184]	; (8014fb8 <tcp_write+0x5a4>)
 8014f00:	482a      	ldr	r0, [pc, #168]	; (8014fac <tcp_write+0x598>)
 8014f02:	f003 ff65 	bl	8018dd0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7fb fb5d 	bl	80105cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f14:	891a      	ldrh	r2, [r3, #8]
 8014f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f18:	891b      	ldrh	r3, [r3, #8]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	b29a      	uxth	r2, r3
 8014f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f20:	811a      	strh	r2, [r3, #8]
 8014f22:	e037      	b.n	8014f94 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8014f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d034      	beq.n	8014f94 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d003      	beq.n	8014f38 <tcp_write+0x524>
 8014f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d106      	bne.n	8014f46 <tcp_write+0x532>
 8014f38:	4b1a      	ldr	r3, [pc, #104]	; (8014fa4 <tcp_write+0x590>)
 8014f3a:	f240 22c1 	movw	r2, #705	; 0x2c1
 8014f3e:	491f      	ldr	r1, [pc, #124]	; (8014fbc <tcp_write+0x5a8>)
 8014f40:	481a      	ldr	r0, [pc, #104]	; (8014fac <tcp_write+0x598>)
 8014f42:	f003 ff45 	bl	8018dd0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f4c:	e009      	b.n	8014f62 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8014f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f50:	891a      	ldrh	r2, [r3, #8]
 8014f52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f54:	4413      	add	r3, r2
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d1f1      	bne.n	8014f4e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8014f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f6c:	891a      	ldrh	r2, [r3, #8]
 8014f6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f70:	4413      	add	r3, r2
 8014f72:	b29a      	uxth	r2, r3
 8014f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f76:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7a:	895a      	ldrh	r2, [r3, #10]
 8014f7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f7e:	4413      	add	r3, r2
 8014f80:	b29a      	uxth	r2, r3
 8014f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f84:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f88:	891a      	ldrh	r2, [r3, #8]
 8014f8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f8c:	4413      	add	r3, r2
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f92:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d112      	bne.n	8014fc0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f9e:	669a      	str	r2, [r3, #104]	; 0x68
 8014fa0:	e011      	b.n	8014fc6 <tcp_write+0x5b2>
 8014fa2:	bf00      	nop
 8014fa4:	0801b8a4 	.word	0x0801b8a4
 8014fa8:	0801bad8 	.word	0x0801bad8
 8014fac:	0801b92c 	.word	0x0801b92c
 8014fb0:	0801bb18 	.word	0x0801bb18
 8014fb4:	0801bb28 	.word	0x0801bb28
 8014fb8:	0801bb3c 	.word	0x0801bb3c
 8014fbc:	0801bb74 	.word	0x0801bb74
  } else {
    last_unsent->next = queue;
 8014fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fc4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014fca:	88fb      	ldrh	r3, [r7, #6]
 8014fcc:	441a      	add	r2, r3
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014fd8:	88fb      	ldrh	r3, [r7, #6]
 8014fda:	1ad3      	subs	r3, r2, r3
 8014fdc:	b29a      	uxth	r2, r3
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014fea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d00e      	beq.n	8015016 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d10a      	bne.n	8015016 <tcp_write+0x602>
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015004:	2b00      	cmp	r3, #0
 8015006:	d106      	bne.n	8015016 <tcp_write+0x602>
 8015008:	4b2c      	ldr	r3, [pc, #176]	; (80150bc <tcp_write+0x6a8>)
 801500a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801500e:	492c      	ldr	r1, [pc, #176]	; (80150c0 <tcp_write+0x6ac>)
 8015010:	482c      	ldr	r0, [pc, #176]	; (80150c4 <tcp_write+0x6b0>)
 8015012:	f003 fedd 	bl	8018dd0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8015016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015018:	2b00      	cmp	r3, #0
 801501a:	d016      	beq.n	801504a <tcp_write+0x636>
 801501c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d012      	beq.n	801504a <tcp_write+0x636>
 8015024:	797b      	ldrb	r3, [r7, #5]
 8015026:	f003 0302 	and.w	r3, r3, #2
 801502a:	2b00      	cmp	r3, #0
 801502c:	d10d      	bne.n	801504a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	899b      	ldrh	r3, [r3, #12]
 8015034:	b29c      	uxth	r4, r3
 8015036:	2008      	movs	r0, #8
 8015038:	f7f9 ffd4 	bl	800efe4 <lwip_htons>
 801503c:	4603      	mov	r3, r0
 801503e:	461a      	mov	r2, r3
 8015040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	4322      	orrs	r2, r4
 8015046:	b292      	uxth	r2, r2
 8015048:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801504a:	2300      	movs	r3, #0
 801504c:	e031      	b.n	80150b2 <tcp_write+0x69e>
          goto memerr;
 801504e:	bf00      	nop
 8015050:	e006      	b.n	8015060 <tcp_write+0x64c>
            goto memerr;
 8015052:	bf00      	nop
 8015054:	e004      	b.n	8015060 <tcp_write+0x64c>
        goto memerr;
 8015056:	bf00      	nop
 8015058:	e002      	b.n	8015060 <tcp_write+0x64c>
        goto memerr;
 801505a:	bf00      	nop
 801505c:	e000      	b.n	8015060 <tcp_write+0x64c>
      goto memerr;
 801505e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	7e9b      	ldrb	r3, [r3, #26]
 8015064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015068:	b2da      	uxtb	r2, r3
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801506e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015070:	2b00      	cmp	r3, #0
 8015072:	d002      	beq.n	801507a <tcp_write+0x666>
    pbuf_free(concat_p);
 8015074:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015076:	f7fb f9cf 	bl	8010418 <pbuf_free>
  }
  if (queue != NULL) {
 801507a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801507c:	2b00      	cmp	r3, #0
 801507e:	d002      	beq.n	8015086 <tcp_write+0x672>
    tcp_segs_free(queue);
 8015080:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015082:	f7fc fcce 	bl	8011a22 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801508c:	2b00      	cmp	r3, #0
 801508e:	d00e      	beq.n	80150ae <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015094:	2b00      	cmp	r3, #0
 8015096:	d10a      	bne.n	80150ae <tcp_write+0x69a>
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801509c:	2b00      	cmp	r3, #0
 801509e:	d106      	bne.n	80150ae <tcp_write+0x69a>
 80150a0:	4b06      	ldr	r3, [pc, #24]	; (80150bc <tcp_write+0x6a8>)
 80150a2:	f240 3202 	movw	r2, #770	; 0x302
 80150a6:	4906      	ldr	r1, [pc, #24]	; (80150c0 <tcp_write+0x6ac>)
 80150a8:	4806      	ldr	r0, [pc, #24]	; (80150c4 <tcp_write+0x6b0>)
 80150aa:	f003 fe91 	bl	8018dd0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80150ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	375c      	adds	r7, #92	; 0x5c
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd90      	pop	{r4, r7, pc}
 80150ba:	bf00      	nop
 80150bc:	0801b8a4 	.word	0x0801b8a4
 80150c0:	0801bbac 	.word	0x0801bbac
 80150c4:	0801b92c 	.word	0x0801b92c

080150c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b08a      	sub	sp, #40	; 0x28
 80150cc:	af02      	add	r7, sp, #8
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	460b      	mov	r3, r1
 80150d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80150d4:	2300      	movs	r3, #0
 80150d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80150d8:	2300      	movs	r3, #0
 80150da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80150dc:	78fb      	ldrb	r3, [r7, #3]
 80150de:	f003 0303 	and.w	r3, r3, #3
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d106      	bne.n	80150f4 <tcp_enqueue_flags+0x2c>
 80150e6:	4b6f      	ldr	r3, [pc, #444]	; (80152a4 <tcp_enqueue_flags+0x1dc>)
 80150e8:	f240 321b 	movw	r2, #795	; 0x31b
 80150ec:	496e      	ldr	r1, [pc, #440]	; (80152a8 <tcp_enqueue_flags+0x1e0>)
 80150ee:	486f      	ldr	r0, [pc, #444]	; (80152ac <tcp_enqueue_flags+0x1e4>)
 80150f0:	f003 fe6e 	bl	8018dd0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150fa:	2b08      	cmp	r3, #8
 80150fc:	d806      	bhi.n	801510c <tcp_enqueue_flags+0x44>
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015104:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015108:	4293      	cmp	r3, r2
 801510a:	d90e      	bls.n	801512a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 801510c:	78fb      	ldrb	r3, [r7, #3]
 801510e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015112:	2b00      	cmp	r3, #0
 8015114:	d109      	bne.n	801512a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	7e9b      	ldrb	r3, [r3, #26]
 801511a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801511e:	b2da      	uxtb	r2, r3
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015124:	f04f 33ff 	mov.w	r3, #4294967295
 8015128:	e0b7      	b.n	801529a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801512a:	78fb      	ldrb	r3, [r7, #3]
 801512c:	f003 0302 	and.w	r3, r3, #2
 8015130:	2b00      	cmp	r3, #0
 8015132:	d001      	beq.n	8015138 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015134:	2301      	movs	r3, #1
 8015136:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015138:	7ffb      	ldrb	r3, [r7, #31]
 801513a:	009b      	lsls	r3, r3, #2
 801513c:	b2db      	uxtb	r3, r3
 801513e:	f003 0304 	and.w	r3, r3, #4
 8015142:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015144:	7dfb      	ldrb	r3, [r7, #23]
 8015146:	b29b      	uxth	r3, r3
 8015148:	2200      	movs	r2, #0
 801514a:	4619      	mov	r1, r3
 801514c:	2000      	movs	r0, #0
 801514e:	f7fa fdf1 	bl	800fd34 <pbuf_alloc>
 8015152:	6138      	str	r0, [r7, #16]
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d109      	bne.n	801516e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	7e9b      	ldrb	r3, [r3, #26]
 801515e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015162:	b2da      	uxtb	r2, r3
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015168:	f04f 33ff 	mov.w	r3, #4294967295
 801516c:	e095      	b.n	801529a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	895a      	ldrh	r2, [r3, #10]
 8015172:	7dfb      	ldrb	r3, [r7, #23]
 8015174:	b29b      	uxth	r3, r3
 8015176:	429a      	cmp	r2, r3
 8015178:	d206      	bcs.n	8015188 <tcp_enqueue_flags+0xc0>
 801517a:	4b4a      	ldr	r3, [pc, #296]	; (80152a4 <tcp_enqueue_flags+0x1dc>)
 801517c:	f240 3241 	movw	r2, #833	; 0x341
 8015180:	494b      	ldr	r1, [pc, #300]	; (80152b0 <tcp_enqueue_flags+0x1e8>)
 8015182:	484a      	ldr	r0, [pc, #296]	; (80152ac <tcp_enqueue_flags+0x1e4>)
 8015184:	f003 fe24 	bl	8018dd0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801518c:	78fa      	ldrb	r2, [r7, #3]
 801518e:	7ffb      	ldrb	r3, [r7, #31]
 8015190:	9300      	str	r3, [sp, #0]
 8015192:	460b      	mov	r3, r1
 8015194:	6939      	ldr	r1, [r7, #16]
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7ff fadc 	bl	8014754 <tcp_create_segment>
 801519c:	60f8      	str	r0, [r7, #12]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d109      	bne.n	80151b8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	7e9b      	ldrb	r3, [r3, #26]
 80151a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80151ac:	b2da      	uxtb	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80151b2:	f04f 33ff 	mov.w	r3, #4294967295
 80151b6:	e070      	b.n	801529a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	f003 0303 	and.w	r3, r3, #3
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d006      	beq.n	80151d2 <tcp_enqueue_flags+0x10a>
 80151c4:	4b37      	ldr	r3, [pc, #220]	; (80152a4 <tcp_enqueue_flags+0x1dc>)
 80151c6:	f240 3249 	movw	r2, #841	; 0x349
 80151ca:	493a      	ldr	r1, [pc, #232]	; (80152b4 <tcp_enqueue_flags+0x1ec>)
 80151cc:	4837      	ldr	r0, [pc, #220]	; (80152ac <tcp_enqueue_flags+0x1e4>)
 80151ce:	f003 fdff 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	891b      	ldrh	r3, [r3, #8]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d006      	beq.n	80151e8 <tcp_enqueue_flags+0x120>
 80151da:	4b32      	ldr	r3, [pc, #200]	; (80152a4 <tcp_enqueue_flags+0x1dc>)
 80151dc:	f240 324a 	movw	r2, #842	; 0x34a
 80151e0:	4935      	ldr	r1, [pc, #212]	; (80152b8 <tcp_enqueue_flags+0x1f0>)
 80151e2:	4832      	ldr	r0, [pc, #200]	; (80152ac <tcp_enqueue_flags+0x1e4>)
 80151e4:	f003 fdf4 	bl	8018dd0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d103      	bne.n	80151f8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	68fa      	ldr	r2, [r7, #12]
 80151f4:	669a      	str	r2, [r3, #104]	; 0x68
 80151f6:	e00d      	b.n	8015214 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151fc:	61bb      	str	r3, [r7, #24]
 80151fe:	e002      	b.n	8015206 <tcp_enqueue_flags+0x13e>
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	61bb      	str	r3, [r7, #24]
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d1f8      	bne.n	8015200 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2200      	movs	r2, #0
 8015218:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801521c:	78fb      	ldrb	r3, [r7, #3]
 801521e:	f003 0302 	and.w	r3, r3, #2
 8015222:	2b00      	cmp	r3, #0
 8015224:	d104      	bne.n	8015230 <tcp_enqueue_flags+0x168>
 8015226:	78fb      	ldrb	r3, [r7, #3]
 8015228:	f003 0301 	and.w	r3, r3, #1
 801522c:	2b00      	cmp	r3, #0
 801522e:	d004      	beq.n	801523a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015234:	1c5a      	adds	r2, r3, #1
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801523a:	78fb      	ldrb	r3, [r7, #3]
 801523c:	f003 0301 	and.w	r3, r3, #1
 8015240:	2b00      	cmp	r3, #0
 8015242:	d006      	beq.n	8015252 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	7e9b      	ldrb	r3, [r3, #26]
 8015248:	f043 0320 	orr.w	r3, r3, #32
 801524c:	b2da      	uxtb	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	4618      	mov	r0, r3
 8015258:	f7fb f978 	bl	801054c <pbuf_clen>
 801525c:	4603      	mov	r3, r0
 801525e:	461a      	mov	r2, r3
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015266:	4413      	add	r3, r2
 8015268:	b29a      	uxth	r2, r3
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015276:	2b00      	cmp	r3, #0
 8015278:	d00e      	beq.n	8015298 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801527e:	2b00      	cmp	r3, #0
 8015280:	d10a      	bne.n	8015298 <tcp_enqueue_flags+0x1d0>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015286:	2b00      	cmp	r3, #0
 8015288:	d106      	bne.n	8015298 <tcp_enqueue_flags+0x1d0>
 801528a:	4b06      	ldr	r3, [pc, #24]	; (80152a4 <tcp_enqueue_flags+0x1dc>)
 801528c:	f240 326d 	movw	r2, #877	; 0x36d
 8015290:	490a      	ldr	r1, [pc, #40]	; (80152bc <tcp_enqueue_flags+0x1f4>)
 8015292:	4806      	ldr	r0, [pc, #24]	; (80152ac <tcp_enqueue_flags+0x1e4>)
 8015294:	f003 fd9c 	bl	8018dd0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	3720      	adds	r7, #32
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	0801b8a4 	.word	0x0801b8a4
 80152a8:	0801bbcc 	.word	0x0801bbcc
 80152ac:	0801b92c 	.word	0x0801b92c
 80152b0:	0801bc24 	.word	0x0801bc24
 80152b4:	0801bc60 	.word	0x0801bc60
 80152b8:	0801bc78 	.word	0x0801bc78
 80152bc:	0801bca4 	.word	0x0801bca4

080152c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80152c0:	b590      	push	{r4, r7, lr}
 80152c2:	b08b      	sub	sp, #44	; 0x2c
 80152c4:	af04      	add	r7, sp, #16
 80152c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80152c8:	2300      	movs	r3, #0
 80152ca:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80152cc:	7dbb      	ldrb	r3, [r7, #22]
 80152ce:	b29c      	uxth	r4, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7f9 fe93 	bl	800f000 <lwip_htonl>
 80152da:	4603      	mov	r3, r0
 80152dc:	2200      	movs	r2, #0
 80152de:	4621      	mov	r1, r4
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f7ff f97b 	bl	80145dc <tcp_output_alloc_header>
 80152e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d109      	bne.n	8015302 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	7e9b      	ldrb	r3, [r3, #26]
 80152f2:	f043 0303 	orr.w	r3, r3, #3
 80152f6:	b2da      	uxtb	r2, r3
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80152fc:	f06f 0301 	mvn.w	r3, #1
 8015300:	e036      	b.n	8015370 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	3304      	adds	r3, #4
 8015306:	4618      	mov	r0, r3
 8015308:	f002 f9c0 	bl	801768c <ip4_route>
 801530c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d102      	bne.n	801531a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8015314:	23fc      	movs	r3, #252	; 0xfc
 8015316:	75fb      	strb	r3, [r7, #23]
 8015318:	e012      	b.n	8015340 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801531a:	6879      	ldr	r1, [r7, #4]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	1d18      	adds	r0, r3, #4
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	7a9c      	ldrb	r4, [r3, #10]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	7a5b      	ldrb	r3, [r3, #9]
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	9202      	str	r2, [sp, #8]
 801532c:	2206      	movs	r2, #6
 801532e:	9201      	str	r2, [sp, #4]
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	4623      	mov	r3, r4
 8015334:	4602      	mov	r2, r0
 8015336:	6938      	ldr	r0, [r7, #16]
 8015338:	f002 fb50 	bl	80179dc <ip4_output_if>
 801533c:	4603      	mov	r3, r0
 801533e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015340:	6938      	ldr	r0, [r7, #16]
 8015342:	f7fb f869 	bl	8010418 <pbuf_free>

  if (err != ERR_OK) {
 8015346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d007      	beq.n	801535e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	7e9b      	ldrb	r3, [r3, #26]
 8015352:	f043 0303 	orr.w	r3, r3, #3
 8015356:	b2da      	uxtb	r2, r3
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	769a      	strb	r2, [r3, #26]
 801535c:	e006      	b.n	801536c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	7e9b      	ldrb	r3, [r3, #26]
 8015362:	f023 0303 	bic.w	r3, r3, #3
 8015366:	b2da      	uxtb	r2, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801536c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015370:	4618      	mov	r0, r3
 8015372:	371c      	adds	r7, #28
 8015374:	46bd      	mov	sp, r7
 8015376:	bd90      	pop	{r4, r7, pc}

08015378 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015378:	b5b0      	push	{r4, r5, r7, lr}
 801537a:	b08a      	sub	sp, #40	; 0x28
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	7d1b      	ldrb	r3, [r3, #20]
 8015384:	2b01      	cmp	r3, #1
 8015386:	d106      	bne.n	8015396 <tcp_output+0x1e>
 8015388:	4b9b      	ldr	r3, [pc, #620]	; (80155f8 <tcp_output+0x280>)
 801538a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801538e:	499b      	ldr	r1, [pc, #620]	; (80155fc <tcp_output+0x284>)
 8015390:	489b      	ldr	r0, [pc, #620]	; (8015600 <tcp_output+0x288>)
 8015392:	f003 fd1d 	bl	8018dd0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015396:	4b9b      	ldr	r3, [pc, #620]	; (8015604 <tcp_output+0x28c>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	429a      	cmp	r2, r3
 801539e:	d101      	bne.n	80153a4 <tcp_output+0x2c>
    return ERR_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	e1cf      	b.n	8015744 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d203      	bcs.n	80153bc <tcp_output+0x44>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80153ba:	e002      	b.n	80153c2 <tcp_output+0x4a>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153c2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80153c8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	7e9b      	ldrb	r3, [r3, #26]
 80153ce:	f003 0302 	and.w	r3, r3, #2
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d017      	beq.n	8015406 <tcp_output+0x8e>
 80153d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d00f      	beq.n	80153fc <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80153dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7f9 fe0c 	bl	800f000 <lwip_htonl>
 80153e8:	4602      	mov	r2, r0
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153ee:	1ad3      	subs	r3, r2, r3
 80153f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153f2:	8912      	ldrh	r2, [r2, #8]
 80153f4:	4413      	add	r3, r2
     (seg == NULL ||
 80153f6:	69ba      	ldr	r2, [r7, #24]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d204      	bcs.n	8015406 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7ff ff5f 	bl	80152c0 <tcp_send_empty_ack>
 8015402:	4603      	mov	r3, r0
 8015404:	e19e      	b.n	8015744 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801540a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801540c:	6a3b      	ldr	r3, [r7, #32]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d007      	beq.n	8015422 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8015412:	e002      	b.n	801541a <tcp_output+0xa2>
 8015414:	6a3b      	ldr	r3, [r7, #32]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	623b      	str	r3, [r7, #32]
 801541a:	6a3b      	ldr	r3, [r7, #32]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d1f8      	bne.n	8015414 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	3304      	adds	r3, #4
 8015426:	4618      	mov	r0, r3
 8015428:	f002 f930 	bl	801768c <ip4_route>
 801542c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d102      	bne.n	801543a <tcp_output+0xc2>
    return ERR_RTE;
 8015434:	f06f 0303 	mvn.w	r3, #3
 8015438:	e184      	b.n	8015744 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d003      	beq.n	8015448 <tcp_output+0xd0>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d111      	bne.n	801546c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d002      	beq.n	8015454 <tcp_output+0xdc>
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	3304      	adds	r3, #4
 8015452:	e000      	b.n	8015456 <tcp_output+0xde>
 8015454:	2300      	movs	r3, #0
 8015456:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d102      	bne.n	8015464 <tcp_output+0xec>
      return ERR_RTE;
 801545e:	f06f 0303 	mvn.w	r3, #3
 8015462:	e16f      	b.n	8015744 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015464:	693b      	ldr	r3, [r7, #16]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546e:	2b00      	cmp	r3, #0
 8015470:	f000 813e 	beq.w	80156f0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	4618      	mov	r0, r3
 801547c:	f7f9 fdc0 	bl	800f000 <lwip_htonl>
 8015480:	4602      	mov	r2, r0
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015486:	1ad3      	subs	r3, r2, r3
 8015488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801548a:	8912      	ldrh	r2, [r2, #8]
 801548c:	4413      	add	r3, r2
  if (seg != NULL &&
 801548e:	69ba      	ldr	r2, [r7, #24]
 8015490:	429a      	cmp	r2, r3
 8015492:	f080 812d 	bcs.w	80156f0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	2b00      	cmp	r3, #0
 801549a:	f000 8129 	beq.w	80156f0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80154a4:	461a      	mov	r2, r3
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	4293      	cmp	r3, r2
 80154aa:	f040 8121 	bne.w	80156f0 <tcp_output+0x378>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	f040 811c 	bne.w	80156f0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f040 812b 	bne.w	801571a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2200      	movs	r2, #0
 80154c8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2201      	movs	r2, #1
 80154d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80154d4:	e121      	b.n	801571a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80154d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d8:	68db      	ldr	r3, [r3, #12]
 80154da:	899b      	ldrh	r3, [r3, #12]
 80154dc:	b29b      	uxth	r3, r3
 80154de:	4618      	mov	r0, r3
 80154e0:	f7f9 fd80 	bl	800efe4 <lwip_htons>
 80154e4:	4603      	mov	r3, r0
 80154e6:	f003 0304 	and.w	r3, r3, #4
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d006      	beq.n	80154fc <tcp_output+0x184>
 80154ee:	4b42      	ldr	r3, [pc, #264]	; (80155f8 <tcp_output+0x280>)
 80154f0:	f240 4246 	movw	r2, #1094	; 0x446
 80154f4:	4944      	ldr	r1, [pc, #272]	; (8015608 <tcp_output+0x290>)
 80154f6:	4842      	ldr	r0, [pc, #264]	; (8015600 <tcp_output+0x288>)
 80154f8:	f003 fc6a 	bl	8018dd0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015500:	2b00      	cmp	r3, #0
 8015502:	d01f      	beq.n	8015544 <tcp_output+0x1cc>
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	7e9b      	ldrb	r3, [r3, #26]
 8015508:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801550c:	2b00      	cmp	r3, #0
 801550e:	d119      	bne.n	8015544 <tcp_output+0x1cc>
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015514:	2b00      	cmp	r3, #0
 8015516:	d00b      	beq.n	8015530 <tcp_output+0x1b8>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d110      	bne.n	8015544 <tcp_output+0x1cc>
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015526:	891a      	ldrh	r2, [r3, #8]
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801552c:	429a      	cmp	r2, r3
 801552e:	d209      	bcs.n	8015544 <tcp_output+0x1cc>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015536:	2b00      	cmp	r3, #0
 8015538:	d004      	beq.n	8015544 <tcp_output+0x1cc>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015540:	2b08      	cmp	r3, #8
 8015542:	d901      	bls.n	8015548 <tcp_output+0x1d0>
 8015544:	2301      	movs	r3, #1
 8015546:	e000      	b.n	801554a <tcp_output+0x1d2>
 8015548:	2300      	movs	r3, #0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d106      	bne.n	801555c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	7e9b      	ldrb	r3, [r3, #26]
 8015552:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015556:	2b00      	cmp	r3, #0
 8015558:	f000 80e1 	beq.w	801571e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	7d1b      	ldrb	r3, [r3, #20]
 8015560:	2b02      	cmp	r3, #2
 8015562:	d00d      	beq.n	8015580 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	899b      	ldrh	r3, [r3, #12]
 801556a:	b29c      	uxth	r4, r3
 801556c:	2010      	movs	r0, #16
 801556e:	f7f9 fd39 	bl	800efe4 <lwip_htons>
 8015572:	4603      	mov	r3, r0
 8015574:	461a      	mov	r2, r3
 8015576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	4322      	orrs	r2, r4
 801557c:	b292      	uxth	r2, r2
 801557e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015580:	697a      	ldr	r2, [r7, #20]
 8015582:	6879      	ldr	r1, [r7, #4]
 8015584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015586:	f000 f8e1 	bl	801574c <tcp_output_segment>
 801558a:	4603      	mov	r3, r0
 801558c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d009      	beq.n	80155aa <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	7e9b      	ldrb	r3, [r3, #26]
 801559a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801559e:	b2da      	uxtb	r2, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	769a      	strb	r2, [r3, #26]
      return err;
 80155a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155a8:	e0cc      	b.n	8015744 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80155aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	7d1b      	ldrb	r3, [r3, #20]
 80155b6:	2b02      	cmp	r3, #2
 80155b8:	d006      	beq.n	80155c8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	7e9b      	ldrb	r3, [r3, #26]
 80155be:	f023 0303 	bic.w	r3, r3, #3
 80155c2:	b2da      	uxtb	r2, r3
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80155c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7f9 fd16 	bl	800f000 <lwip_htonl>
 80155d4:	4604      	mov	r4, r0
 80155d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155d8:	891b      	ldrh	r3, [r3, #8]
 80155da:	461d      	mov	r5, r3
 80155dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	899b      	ldrh	r3, [r3, #12]
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7f9 fcfd 	bl	800efe4 <lwip_htons>
 80155ea:	4603      	mov	r3, r0
 80155ec:	f003 0303 	and.w	r3, r3, #3
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d00b      	beq.n	801560c <tcp_output+0x294>
 80155f4:	2301      	movs	r3, #1
 80155f6:	e00a      	b.n	801560e <tcp_output+0x296>
 80155f8:	0801b8a4 	.word	0x0801b8a4
 80155fc:	0801bccc 	.word	0x0801bccc
 8015600:	0801b92c 	.word	0x0801b92c
 8015604:	200079c4 	.word	0x200079c4
 8015608:	0801bcf4 	.word	0x0801bcf4
 801560c:	2300      	movs	r3, #0
 801560e:	442b      	add	r3, r5
 8015610:	4423      	add	r3, r4
 8015612:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	1ad3      	subs	r3, r2, r3
 801561c:	2b00      	cmp	r3, #0
 801561e:	da02      	bge.n	8015626 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	68ba      	ldr	r2, [r7, #8]
 8015624:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015628:	891b      	ldrh	r3, [r3, #8]
 801562a:	461c      	mov	r4, r3
 801562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	899b      	ldrh	r3, [r3, #12]
 8015632:	b29b      	uxth	r3, r3
 8015634:	4618      	mov	r0, r3
 8015636:	f7f9 fcd5 	bl	800efe4 <lwip_htons>
 801563a:	4603      	mov	r3, r0
 801563c:	f003 0303 	and.w	r3, r3, #3
 8015640:	2b00      	cmp	r3, #0
 8015642:	d001      	beq.n	8015648 <tcp_output+0x2d0>
 8015644:	2301      	movs	r3, #1
 8015646:	e000      	b.n	801564a <tcp_output+0x2d2>
 8015648:	2300      	movs	r3, #0
 801564a:	4423      	add	r3, r4
 801564c:	2b00      	cmp	r3, #0
 801564e:	d049      	beq.n	80156e4 <tcp_output+0x36c>
      seg->next = NULL;
 8015650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015652:	2200      	movs	r2, #0
 8015654:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801565a:	2b00      	cmp	r3, #0
 801565c:	d105      	bne.n	801566a <tcp_output+0x2f2>
        pcb->unacked = seg;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015662:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8015664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015666:	623b      	str	r3, [r7, #32]
 8015668:	e03f      	b.n	80156ea <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	685b      	ldr	r3, [r3, #4]
 8015670:	4618      	mov	r0, r3
 8015672:	f7f9 fcc5 	bl	800f000 <lwip_htonl>
 8015676:	4604      	mov	r4, r0
 8015678:	6a3b      	ldr	r3, [r7, #32]
 801567a:	68db      	ldr	r3, [r3, #12]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	4618      	mov	r0, r3
 8015680:	f7f9 fcbe 	bl	800f000 <lwip_htonl>
 8015684:	4603      	mov	r3, r0
 8015686:	1ae3      	subs	r3, r4, r3
 8015688:	2b00      	cmp	r3, #0
 801568a:	da24      	bge.n	80156d6 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	336c      	adds	r3, #108	; 0x6c
 8015690:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015692:	e002      	b.n	801569a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015694:	69fb      	ldr	r3, [r7, #28]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801569a:	69fb      	ldr	r3, [r7, #28]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d011      	beq.n	80156c6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	68db      	ldr	r3, [r3, #12]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7f9 fca8 	bl	800f000 <lwip_htonl>
 80156b0:	4604      	mov	r4, r0
 80156b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7f9 fca1 	bl	800f000 <lwip_htonl>
 80156be:	4603      	mov	r3, r0
 80156c0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dbe6      	blt.n	8015694 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156cc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	e009      	b.n	80156ea <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80156d6:	6a3b      	ldr	r3, [r7, #32]
 80156d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156da:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80156dc:	6a3b      	ldr	r3, [r7, #32]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	623b      	str	r3, [r7, #32]
 80156e2:	e002      	b.n	80156ea <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80156e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156e6:	f7fc f9b0 	bl	8011a4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80156f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d015      	beq.n	8015722 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80156f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f8:	68db      	ldr	r3, [r3, #12]
 80156fa:	685b      	ldr	r3, [r3, #4]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7f9 fc7f 	bl	800f000 <lwip_htonl>
 8015702:	4602      	mov	r2, r0
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015708:	1ad3      	subs	r3, r2, r3
 801570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801570c:	8912      	ldrh	r2, [r2, #8]
 801570e:	4413      	add	r3, r2
  while (seg != NULL &&
 8015710:	69ba      	ldr	r2, [r7, #24]
 8015712:	429a      	cmp	r2, r3
 8015714:	f4bf aedf 	bcs.w	80154d6 <tcp_output+0x15e>
  }
output_done:
 8015718:	e003      	b.n	8015722 <tcp_output+0x3aa>
    goto output_done;
 801571a:	bf00      	nop
 801571c:	e002      	b.n	8015724 <tcp_output+0x3ac>
      break;
 801571e:	bf00      	nop
 8015720:	e000      	b.n	8015724 <tcp_output+0x3ac>
output_done:
 8015722:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015728:	2b00      	cmp	r3, #0
 801572a:	d103      	bne.n	8015734 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2200      	movs	r2, #0
 8015730:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	7e9b      	ldrb	r3, [r3, #26]
 8015738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801573c:	b2da      	uxtb	r2, r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015742:	2300      	movs	r3, #0
}
 8015744:	4618      	mov	r0, r3
 8015746:	3728      	adds	r7, #40	; 0x28
 8015748:	46bd      	mov	sp, r7
 801574a:	bdb0      	pop	{r4, r5, r7, pc}

0801574c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801574c:	b5b0      	push	{r4, r5, r7, lr}
 801574e:	b08c      	sub	sp, #48	; 0x30
 8015750:	af04      	add	r7, sp, #16
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	685b      	ldr	r3, [r3, #4]
 801575c:	89db      	ldrh	r3, [r3, #14]
 801575e:	2b01      	cmp	r3, #1
 8015760:	d001      	beq.n	8015766 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015762:	2300      	movs	r3, #0
 8015764:	e08b      	b.n	801587e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	68dc      	ldr	r4, [r3, #12]
 801576e:	4610      	mov	r0, r2
 8015770:	f7f9 fc46 	bl	800f000 <lwip_htonl>
 8015774:	4603      	mov	r3, r0
 8015776:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	68dc      	ldr	r4, [r3, #12]
 8015780:	4610      	mov	r0, r2
 8015782:	f7f9 fc2f 	bl	800efe4 <lwip_htons>
 8015786:	4603      	mov	r3, r0
 8015788:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801578e:	68ba      	ldr	r2, [r7, #8]
 8015790:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015792:	441a      	add	r2, r3
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	68db      	ldr	r3, [r3, #12]
 801579c:	3314      	adds	r3, #20
 801579e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	7a9b      	ldrb	r3, [r3, #10]
 80157a4:	f003 0301 	and.w	r3, r3, #1
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d014      	beq.n	80157d6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	3304      	adds	r3, #4
 80157b0:	4619      	mov	r1, r3
 80157b2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80157b6:	f7fc fc73 	bl	80120a0 <tcp_eff_send_mss_impl>
 80157ba:	4603      	mov	r3, r0
 80157bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80157be:	8b7b      	ldrh	r3, [r7, #26]
 80157c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80157c4:	4618      	mov	r0, r3
 80157c6:	f7f9 fc1b 	bl	800f000 <lwip_htonl>
 80157ca:	4602      	mov	r2, r0
 80157cc:	69fb      	ldr	r3, [r7, #28]
 80157ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	3304      	adds	r3, #4
 80157d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157dc:	2b00      	cmp	r3, #0
 80157de:	da02      	bge.n	80157e6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	2200      	movs	r2, #0
 80157e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d10c      	bne.n	8015808 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80157ee:	4b26      	ldr	r3, [pc, #152]	; (8015888 <tcp_output_segment+0x13c>)
 80157f0:	681a      	ldr	r2, [r3, #0]
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7f9 fbff 	bl	800f000 <lwip_htonl>
 8015802:	4602      	mov	r2, r0
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	68db      	ldr	r3, [r3, #12]
 801580c:	461a      	mov	r2, r3
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	1ad3      	subs	r3, r2, r3
 8015816:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	685b      	ldr	r3, [r3, #4]
 801581c:	8959      	ldrh	r1, [r3, #10]
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	8b3a      	ldrh	r2, [r7, #24]
 8015824:	1a8a      	subs	r2, r1, r2
 8015826:	b292      	uxth	r2, r2
 8015828:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	8919      	ldrh	r1, [r3, #8]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	685b      	ldr	r3, [r3, #4]
 8015834:	8b3a      	ldrh	r2, [r7, #24]
 8015836:	1a8a      	subs	r2, r1, r2
 8015838:	b292      	uxth	r2, r2
 801583a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	68fa      	ldr	r2, [r7, #12]
 8015842:	68d2      	ldr	r2, [r2, #12]
 8015844:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	68db      	ldr	r3, [r3, #12]
 801584a:	2200      	movs	r2, #0
 801584c:	741a      	strb	r2, [r3, #16]
 801584e:	2200      	movs	r2, #0
 8015850:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	6858      	ldr	r0, [r3, #4]
 8015856:	68b9      	ldr	r1, [r7, #8]
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	1d1c      	adds	r4, r3, #4
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	7a9d      	ldrb	r5, [r3, #10]
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	7a5b      	ldrb	r3, [r3, #9]
 8015864:	687a      	ldr	r2, [r7, #4]
 8015866:	9202      	str	r2, [sp, #8]
 8015868:	2206      	movs	r2, #6
 801586a:	9201      	str	r2, [sp, #4]
 801586c:	9300      	str	r3, [sp, #0]
 801586e:	462b      	mov	r3, r5
 8015870:	4622      	mov	r2, r4
 8015872:	f002 f8b3 	bl	80179dc <ip4_output_if>
 8015876:	4603      	mov	r3, r0
 8015878:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801587a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3720      	adds	r7, #32
 8015882:	46bd      	mov	sp, r7
 8015884:	bdb0      	pop	{r4, r5, r7, pc}
 8015886:	bf00      	nop
 8015888:	200079b4 	.word	0x200079b4

0801588c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b08c      	sub	sp, #48	; 0x30
 8015890:	af04      	add	r7, sp, #16
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
 8015898:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801589a:	2200      	movs	r2, #0
 801589c:	2114      	movs	r1, #20
 801589e:	2001      	movs	r0, #1
 80158a0:	f7fa fa48 	bl	800fd34 <pbuf_alloc>
 80158a4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80158a6:	69fb      	ldr	r3, [r7, #28]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d05b      	beq.n	8015964 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	895b      	ldrh	r3, [r3, #10]
 80158b0:	2b13      	cmp	r3, #19
 80158b2:	d806      	bhi.n	80158c2 <tcp_rst+0x36>
 80158b4:	4b2d      	ldr	r3, [pc, #180]	; (801596c <tcp_rst+0xe0>)
 80158b6:	f240 524d 	movw	r2, #1357	; 0x54d
 80158ba:	492d      	ldr	r1, [pc, #180]	; (8015970 <tcp_rst+0xe4>)
 80158bc:	482d      	ldr	r0, [pc, #180]	; (8015974 <tcp_rst+0xe8>)
 80158be:	f003 fa87 	bl	8018dd0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80158c2:	69fb      	ldr	r3, [r7, #28]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80158c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7f9 fb8a 	bl	800efe4 <lwip_htons>
 80158d0:	4603      	mov	r3, r0
 80158d2:	461a      	mov	r2, r3
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80158d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80158da:	4618      	mov	r0, r3
 80158dc:	f7f9 fb82 	bl	800efe4 <lwip_htons>
 80158e0:	4603      	mov	r3, r0
 80158e2:	461a      	mov	r2, r3
 80158e4:	69bb      	ldr	r3, [r7, #24]
 80158e6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80158e8:	68f8      	ldr	r0, [r7, #12]
 80158ea:	f7f9 fb89 	bl	800f000 <lwip_htonl>
 80158ee:	4602      	mov	r2, r0
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80158f4:	68b8      	ldr	r0, [r7, #8]
 80158f6:	f7f9 fb83 	bl	800f000 <lwip_htonl>
 80158fa:	4602      	mov	r2, r0
 80158fc:	69bb      	ldr	r3, [r7, #24]
 80158fe:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8015900:	f245 0014 	movw	r0, #20500	; 0x5014
 8015904:	f7f9 fb6e 	bl	800efe4 <lwip_htons>
 8015908:	4603      	mov	r3, r0
 801590a:	461a      	mov	r2, r3
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	2200      	movs	r2, #0
 8015914:	f042 0208 	orr.w	r2, r2, #8
 8015918:	739a      	strb	r2, [r3, #14]
 801591a:	2200      	movs	r2, #0
 801591c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8015920:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	2200      	movs	r2, #0
 8015926:	741a      	strb	r2, [r3, #16]
 8015928:	2200      	movs	r2, #0
 801592a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	2200      	movs	r2, #0
 8015930:	749a      	strb	r2, [r3, #18]
 8015932:	2200      	movs	r2, #0
 8015934:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8015936:	6838      	ldr	r0, [r7, #0]
 8015938:	f001 fea8 	bl	801768c <ip4_route>
 801593c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d00b      	beq.n	801595c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	9302      	str	r3, [sp, #8]
 8015948:	2306      	movs	r3, #6
 801594a:	9301      	str	r3, [sp, #4]
 801594c:	2300      	movs	r3, #0
 801594e:	9300      	str	r3, [sp, #0]
 8015950:	23ff      	movs	r3, #255	; 0xff
 8015952:	683a      	ldr	r2, [r7, #0]
 8015954:	6879      	ldr	r1, [r7, #4]
 8015956:	69f8      	ldr	r0, [r7, #28]
 8015958:	f002 f840 	bl	80179dc <ip4_output_if>
  }
  pbuf_free(p);
 801595c:	69f8      	ldr	r0, [r7, #28]
 801595e:	f7fa fd5b 	bl	8010418 <pbuf_free>
 8015962:	e000      	b.n	8015966 <tcp_rst+0xda>
    return;
 8015964:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015966:	3720      	adds	r7, #32
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}
 801596c:	0801b8a4 	.word	0x0801b8a4
 8015970:	0801b8fc 	.word	0x0801b8fc
 8015974:	0801b92c 	.word	0x0801b92c

08015978 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015984:	2b00      	cmp	r3, #0
 8015986:	d029      	beq.n	80159dc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801598c:	60fb      	str	r3, [r7, #12]
 801598e:	e002      	b.n	8015996 <tcp_rexmit_rto+0x1e>
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	60fb      	str	r3, [r7, #12]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d1f8      	bne.n	8015990 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2200      	movs	r2, #0
 80159b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80159ba:	2bff      	cmp	r3, #255	; 0xff
 80159bc:	d007      	beq.n	80159ce <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80159c4:	3301      	adds	r3, #1
 80159c6:	b2da      	uxtb	r2, r3
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2200      	movs	r2, #0
 80159d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f7ff fccf 	bl	8015378 <tcp_output>
 80159da:	e000      	b.n	80159de <tcp_rexmit_rto+0x66>
    return;
 80159dc:	bf00      	nop
}
 80159de:	3710      	adds	r7, #16
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}

080159e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80159e4:	b590      	push	{r4, r7, lr}
 80159e6:	b085      	sub	sp, #20
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d043      	beq.n	8015a7c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159f8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	3368      	adds	r3, #104	; 0x68
 8015a06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015a08:	e002      	b.n	8015a10 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d011      	beq.n	8015a3c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	68db      	ldr	r3, [r3, #12]
 8015a1e:	685b      	ldr	r3, [r3, #4]
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f9 faed 	bl	800f000 <lwip_htonl>
 8015a26:	4604      	mov	r4, r0
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7f9 fae6 	bl	800f000 <lwip_htonl>
 8015a34:	4603      	mov	r3, r0
 8015a36:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	dbe6      	blt.n	8015a0a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	68ba      	ldr	r2, [r7, #8]
 8015a48:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d103      	bne.n	8015a5a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2200      	movs	r2, #0
 8015a56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a60:	2bff      	cmp	r3, #255	; 0xff
 8015a62:	d007      	beq.n	8015a74 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a6a:	3301      	adds	r3, #1
 8015a6c:	b2da      	uxtb	r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2200      	movs	r2, #0
 8015a78:	635a      	str	r2, [r3, #52]	; 0x34
 8015a7a:	e000      	b.n	8015a7e <tcp_rexmit+0x9a>
    return;
 8015a7c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8015a7e:	3714      	adds	r7, #20
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd90      	pop	{r4, r7, pc}

08015a84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d04c      	beq.n	8015b2e <tcp_rexmit_fast+0xaa>
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	7e9b      	ldrb	r3, [r3, #26]
 8015a98:	f003 0304 	and.w	r3, r3, #4
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d146      	bne.n	8015b2e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f7ff ff9f 	bl	80159e4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d208      	bcs.n	8015ac8 <tcp_rexmit_fast+0x44>
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	da00      	bge.n	8015ac2 <tcp_rexmit_fast+0x3e>
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	105b      	asrs	r3, r3, #1
 8015ac4:	b29b      	uxth	r3, r3
 8015ac6:	e007      	b.n	8015ad8 <tcp_rexmit_fast+0x54>
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	da00      	bge.n	8015ad4 <tcp_rexmit_fast+0x50>
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	105b      	asrs	r3, r3, #1
 8015ad6:	b29b      	uxth	r3, r3
 8015ad8:	687a      	ldr	r2, [r7, #4]
 8015ada:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d206      	bcs.n	8015afe <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b08:	4619      	mov	r1, r3
 8015b0a:	0049      	lsls	r1, r1, #1
 8015b0c:	440b      	add	r3, r1
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	4413      	add	r3, r2
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	7e9b      	ldrb	r3, [r3, #26]
 8015b1e:	f043 0304 	orr.w	r3, r3, #4
 8015b22:	b2da      	uxtb	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8015b2e:	bf00      	nop
 8015b30:	3708      	adds	r7, #8
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b08a      	sub	sp, #40	; 0x28
 8015b3a:	af04      	add	r7, sp, #16
 8015b3c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b42:	3b01      	subs	r3, #1
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7f9 fa5b 	bl	800f000 <lwip_htonl>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	2100      	movs	r1, #0
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f7fe fd43 	bl	80145dc <tcp_output_alloc_header>
 8015b56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d102      	bne.n	8015b64 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b62:	e021      	b.n	8015ba8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	3304      	adds	r3, #4
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f001 fd8f 	bl	801768c <ip4_route>
 8015b6e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d102      	bne.n	8015b7c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8015b76:	23fc      	movs	r3, #252	; 0xfc
 8015b78:	75fb      	strb	r3, [r7, #23]
 8015b7a:	e010      	b.n	8015b9e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8015b7c:	6879      	ldr	r1, [r7, #4]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	1d1a      	adds	r2, r3, #4
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	7a98      	ldrb	r0, [r3, #10]
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	9302      	str	r3, [sp, #8]
 8015b8a:	2306      	movs	r3, #6
 8015b8c:	9301      	str	r3, [sp, #4]
 8015b8e:	2300      	movs	r3, #0
 8015b90:	9300      	str	r3, [sp, #0]
 8015b92:	4603      	mov	r3, r0
 8015b94:	6938      	ldr	r0, [r7, #16]
 8015b96:	f001 ff21 	bl	80179dc <ip4_output_if>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015b9e:	6938      	ldr	r0, [r7, #16]
 8015ba0:	f7fa fc3a 	bl	8010418 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3718      	adds	r7, #24
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015bb0:	b590      	push	{r4, r7, lr}
 8015bb2:	b08f      	sub	sp, #60	; 0x3c
 8015bb4:	af04      	add	r7, sp, #16
 8015bb6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bbc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8015bbe:	6a3b      	ldr	r3, [r7, #32]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d102      	bne.n	8015bca <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015bc8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8015bca:	6a3b      	ldr	r3, [r7, #32]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d101      	bne.n	8015bd4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	e085      	b.n	8015ce0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015bd4:	6a3b      	ldr	r3, [r7, #32]
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	899b      	ldrh	r3, [r3, #12]
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7f9 fa01 	bl	800efe4 <lwip_htons>
 8015be2:	4603      	mov	r3, r0
 8015be4:	f003 0301 	and.w	r3, r3, #1
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d005      	beq.n	8015bf8 <tcp_zero_window_probe+0x48>
 8015bec:	6a3b      	ldr	r3, [r7, #32]
 8015bee:	891b      	ldrh	r3, [r3, #8]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d101      	bne.n	8015bf8 <tcp_zero_window_probe+0x48>
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	e000      	b.n	8015bfa <tcp_zero_window_probe+0x4a>
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015bfc:	7ffb      	ldrb	r3, [r7, #31]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	bf0c      	ite	eq
 8015c02:	2301      	moveq	r3, #1
 8015c04:	2300      	movne	r3, #0
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8015c0a:	6a3b      	ldr	r3, [r7, #32]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	8bba      	ldrh	r2, [r7, #28]
 8015c12:	2100      	movs	r1, #0
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7fe fce1 	bl	80145dc <tcp_output_alloc_header>
 8015c1a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015c1c:	69bb      	ldr	r3, [r7, #24]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d102      	bne.n	8015c28 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015c22:	f04f 33ff 	mov.w	r3, #4294967295
 8015c26:	e05b      	b.n	8015ce0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015c28:	69bb      	ldr	r3, [r7, #24]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015c2e:	7ffb      	ldrb	r3, [r7, #31]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d00e      	beq.n	8015c52 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	899b      	ldrh	r3, [r3, #12]
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015c3e:	b29c      	uxth	r4, r3
 8015c40:	2011      	movs	r0, #17
 8015c42:	f7f9 f9cf 	bl	800efe4 <lwip_htons>
 8015c46:	4603      	mov	r3, r0
 8015c48:	4323      	orrs	r3, r4
 8015c4a:	b29a      	uxth	r2, r3
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	819a      	strh	r2, [r3, #12]
 8015c50:	e010      	b.n	8015c74 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	3314      	adds	r3, #20
 8015c58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015c5a:	6a3b      	ldr	r3, [r7, #32]
 8015c5c:	6858      	ldr	r0, [r3, #4]
 8015c5e:	6a3b      	ldr	r3, [r7, #32]
 8015c60:	685b      	ldr	r3, [r3, #4]
 8015c62:	891a      	ldrh	r2, [r3, #8]
 8015c64:	6a3b      	ldr	r3, [r7, #32]
 8015c66:	891b      	ldrh	r3, [r3, #8]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	6939      	ldr	r1, [r7, #16]
 8015c70:	f7fa fdce 	bl	8010810 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015c74:	6a3b      	ldr	r3, [r7, #32]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7f9 f9c0 	bl	800f000 <lwip_htonl>
 8015c80:	4603      	mov	r3, r0
 8015c82:	3301      	adds	r3, #1
 8015c84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	1ad3      	subs	r3, r2, r3
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	da02      	bge.n	8015c98 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	68fa      	ldr	r2, [r7, #12]
 8015c96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	3304      	adds	r3, #4
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f001 fcf5 	bl	801768c <ip4_route>
 8015ca2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d103      	bne.n	8015cb2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8015caa:	23fc      	movs	r3, #252	; 0xfc
 8015cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cb0:	e011      	b.n	8015cd6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015cb2:	6879      	ldr	r1, [r7, #4]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	1d1a      	adds	r2, r3, #4
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	7a98      	ldrb	r0, [r3, #10]
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	9302      	str	r3, [sp, #8]
 8015cc0:	2306      	movs	r3, #6
 8015cc2:	9301      	str	r3, [sp, #4]
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	4603      	mov	r3, r0
 8015cca:	69b8      	ldr	r0, [r7, #24]
 8015ccc:	f001 fe86 	bl	80179dc <ip4_output_if>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8015cd6:	69b8      	ldr	r0, [r7, #24]
 8015cd8:	f7fa fb9e 	bl	8010418 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015cdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	372c      	adds	r7, #44	; 0x2c
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd90      	pop	{r4, r7, pc}

08015ce8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015cf0:	f7fa fe10 	bl	8010914 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015cf4:	4b0a      	ldr	r3, [pc, #40]	; (8015d20 <tcpip_tcp_timer+0x38>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d103      	bne.n	8015d04 <tcpip_tcp_timer+0x1c>
 8015cfc:	4b09      	ldr	r3, [pc, #36]	; (8015d24 <tcpip_tcp_timer+0x3c>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d005      	beq.n	8015d10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015d04:	2200      	movs	r2, #0
 8015d06:	4908      	ldr	r1, [pc, #32]	; (8015d28 <tcpip_tcp_timer+0x40>)
 8015d08:	20fa      	movs	r0, #250	; 0xfa
 8015d0a:	f000 f86f 	bl	8015dec <sys_timeout>
 8015d0e:	e002      	b.n	8015d16 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015d10:	4b06      	ldr	r3, [pc, #24]	; (8015d2c <tcpip_tcp_timer+0x44>)
 8015d12:	2200      	movs	r2, #0
 8015d14:	601a      	str	r2, [r3, #0]
  }
}
 8015d16:	bf00      	nop
 8015d18:	3708      	adds	r7, #8
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	200079b0 	.word	0x200079b0
 8015d24:	200079c0 	.word	0x200079c0
 8015d28:	08015ce9 	.word	0x08015ce9
 8015d2c:	200040f0 	.word	0x200040f0

08015d30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015d34:	4b0a      	ldr	r3, [pc, #40]	; (8015d60 <tcp_timer_needed+0x30>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d10f      	bne.n	8015d5c <tcp_timer_needed+0x2c>
 8015d3c:	4b09      	ldr	r3, [pc, #36]	; (8015d64 <tcp_timer_needed+0x34>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d103      	bne.n	8015d4c <tcp_timer_needed+0x1c>
 8015d44:	4b08      	ldr	r3, [pc, #32]	; (8015d68 <tcp_timer_needed+0x38>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d007      	beq.n	8015d5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015d4c:	4b04      	ldr	r3, [pc, #16]	; (8015d60 <tcp_timer_needed+0x30>)
 8015d4e:	2201      	movs	r2, #1
 8015d50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015d52:	2200      	movs	r2, #0
 8015d54:	4905      	ldr	r1, [pc, #20]	; (8015d6c <tcp_timer_needed+0x3c>)
 8015d56:	20fa      	movs	r0, #250	; 0xfa
 8015d58:	f000 f848 	bl	8015dec <sys_timeout>
  }
}
 8015d5c:	bf00      	nop
 8015d5e:	bd80      	pop	{r7, pc}
 8015d60:	200040f0 	.word	0x200040f0
 8015d64:	200079b0 	.word	0x200079b0
 8015d68:	200079c0 	.word	0x200079c0
 8015d6c:	08015ce9 	.word	0x08015ce9

08015d70 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b084      	sub	sp, #16
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	687a      	ldr	r2, [r7, #4]
 8015d88:	4903      	ldr	r1, [pc, #12]	; (8015d98 <cyclic_timer+0x28>)
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f000 f82e 	bl	8015dec <sys_timeout>
}
 8015d90:	bf00      	nop
 8015d92:	3710      	adds	r7, #16
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	08015d71 	.word	0x08015d71

08015d9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015da2:	2301      	movs	r3, #1
 8015da4:	607b      	str	r3, [r7, #4]
 8015da6:	e00e      	b.n	8015dc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8015da8:	4a0d      	ldr	r2, [pc, #52]	; (8015de0 <sys_timeouts_init+0x44>)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	00db      	lsls	r3, r3, #3
 8015db4:	4a0a      	ldr	r2, [pc, #40]	; (8015de0 <sys_timeouts_init+0x44>)
 8015db6:	4413      	add	r3, r2
 8015db8:	461a      	mov	r2, r3
 8015dba:	490a      	ldr	r1, [pc, #40]	; (8015de4 <sys_timeouts_init+0x48>)
 8015dbc:	f000 f816 	bl	8015dec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	607b      	str	r3, [r7, #4]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d9ed      	bls.n	8015da8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8015dcc:	f7f3 ff46 	bl	8009c5c <sys_now>
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	4b05      	ldr	r3, [pc, #20]	; (8015de8 <sys_timeouts_init+0x4c>)
 8015dd4:	601a      	str	r2, [r3, #0]
}
 8015dd6:	bf00      	nop
 8015dd8:	3708      	adds	r7, #8
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	0801c6c4 	.word	0x0801c6c4
 8015de4:	08015d71 	.word	0x08015d71
 8015de8:	200040ec 	.word	0x200040ec

08015dec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b088      	sub	sp, #32
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015df8:	200a      	movs	r0, #10
 8015dfa:	f7f9 fcff 	bl	800f7fc <memp_malloc>
 8015dfe:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8015e00:	697b      	ldr	r3, [r7, #20]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d10a      	bne.n	8015e1c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	f040 8084 	bne.w	8015f16 <sys_timeout+0x12a>
 8015e0e:	4b44      	ldr	r3, [pc, #272]	; (8015f20 <sys_timeout+0x134>)
 8015e10:	22d4      	movs	r2, #212	; 0xd4
 8015e12:	4944      	ldr	r1, [pc, #272]	; (8015f24 <sys_timeout+0x138>)
 8015e14:	4844      	ldr	r0, [pc, #272]	; (8015f28 <sys_timeout+0x13c>)
 8015e16:	f002 ffdb 	bl	8018dd0 <iprintf>
    return;
 8015e1a:	e07c      	b.n	8015f16 <sys_timeout+0x12a>
  }

  now = sys_now();
 8015e1c:	f7f3 ff1e 	bl	8009c5c <sys_now>
 8015e20:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8015e22:	4b42      	ldr	r3, [pc, #264]	; (8015f2c <sys_timeout+0x140>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d105      	bne.n	8015e36 <sys_timeout+0x4a>
    diff = 0;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8015e2e:	4a40      	ldr	r2, [pc, #256]	; (8015f30 <sys_timeout+0x144>)
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	6013      	str	r3, [r2, #0]
 8015e34:	e004      	b.n	8015e40 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8015e36:	4b3e      	ldr	r3, [pc, #248]	; (8015f30 <sys_timeout+0x144>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	693a      	ldr	r2, [r7, #16]
 8015e3c:	1ad3      	subs	r3, r2, r3
 8015e3e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8015e40:	697b      	ldr	r3, [r7, #20]
 8015e42:	2200      	movs	r2, #0
 8015e44:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	68ba      	ldr	r2, [r7, #8]
 8015e4a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	687a      	ldr	r2, [r7, #4]
 8015e50:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8015e52:	68fa      	ldr	r2, [r7, #12]
 8015e54:	69bb      	ldr	r3, [r7, #24]
 8015e56:	441a      	add	r2, r3
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015e5c:	4b33      	ldr	r3, [pc, #204]	; (8015f2c <sys_timeout+0x140>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d103      	bne.n	8015e6c <sys_timeout+0x80>
    next_timeout = timeout;
 8015e64:	4a31      	ldr	r2, [pc, #196]	; (8015f2c <sys_timeout+0x140>)
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	6013      	str	r3, [r2, #0]
    return;
 8015e6a:	e055      	b.n	8015f18 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8015e6c:	4b2f      	ldr	r3, [pc, #188]	; (8015f2c <sys_timeout+0x140>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	68fa      	ldr	r2, [r7, #12]
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d20f      	bcs.n	8015e98 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8015e78:	4b2c      	ldr	r3, [pc, #176]	; (8015f2c <sys_timeout+0x140>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	6859      	ldr	r1, [r3, #4]
 8015e7e:	4b2b      	ldr	r3, [pc, #172]	; (8015f2c <sys_timeout+0x140>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	68fa      	ldr	r2, [r7, #12]
 8015e84:	1a8a      	subs	r2, r1, r2
 8015e86:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8015e88:	4b28      	ldr	r3, [pc, #160]	; (8015f2c <sys_timeout+0x140>)
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015e90:	4a26      	ldr	r2, [pc, #152]	; (8015f2c <sys_timeout+0x140>)
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	6013      	str	r3, [r2, #0]
 8015e96:	e03f      	b.n	8015f18 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015e98:	4b24      	ldr	r3, [pc, #144]	; (8015f2c <sys_timeout+0x140>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	61fb      	str	r3, [r7, #28]
 8015e9e:	e036      	b.n	8015f0e <sys_timeout+0x122>
      timeout->time -= t->time;
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	685a      	ldr	r2, [r3, #4]
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	685b      	ldr	r3, [r3, #4]
 8015ea8:	1ad2      	subs	r2, r2, r3
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d006      	beq.n	8015ec4 <sys_timeout+0xd8>
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	685a      	ldr	r2, [r3, #4]
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	685b      	ldr	r3, [r3, #4]
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d921      	bls.n	8015f08 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d009      	beq.n	8015ee0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8015ecc:	69fb      	ldr	r3, [r7, #28]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	6859      	ldr	r1, [r3, #4]
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	685a      	ldr	r2, [r3, #4]
 8015ed6:	69fb      	ldr	r3, [r7, #28]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	1a8a      	subs	r2, r1, r2
 8015edc:	605a      	str	r2, [r3, #4]
 8015ede:	e00b      	b.n	8015ef8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	68fa      	ldr	r2, [r7, #12]
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d206      	bcs.n	8015ef8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8015eea:	4b10      	ldr	r3, [pc, #64]	; (8015f2c <sys_timeout+0x140>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	685a      	ldr	r2, [r3, #4]
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	441a      	add	r2, r3
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	681a      	ldr	r2, [r3, #0]
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	697a      	ldr	r2, [r7, #20]
 8015f04:	601a      	str	r2, [r3, #0]
        break;
 8015f06:	e007      	b.n	8015f18 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	61fb      	str	r3, [r7, #28]
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1c5      	bne.n	8015ea0 <sys_timeout+0xb4>
 8015f14:	e000      	b.n	8015f18 <sys_timeout+0x12c>
    return;
 8015f16:	bf00      	nop
      }
    }
  }
}
 8015f18:	3720      	adds	r7, #32
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	0801bd0c 	.word	0x0801bd0c
 8015f24:	0801bd64 	.word	0x0801bd64
 8015f28:	0801bda4 	.word	0x0801bda4
 8015f2c:	200040e8 	.word	0x200040e8
 8015f30:	200040ec 	.word	0x200040ec

08015f34 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b086      	sub	sp, #24
 8015f38:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8015f3a:	4b24      	ldr	r3, [pc, #144]	; (8015fcc <sys_check_timeouts+0x98>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d03f      	beq.n	8015fc2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8015f42:	f7f3 fe8b 	bl	8009c5c <sys_now>
 8015f46:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8015f48:	4b21      	ldr	r3, [pc, #132]	; (8015fd0 <sys_check_timeouts+0x9c>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	68fa      	ldr	r2, [r7, #12]
 8015f4e:	1ad3      	subs	r3, r2, r3
 8015f50:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8015f56:	4b1d      	ldr	r3, [pc, #116]	; (8015fcc <sys_check_timeouts+0x98>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d02c      	beq.n	8015fbc <sys_check_timeouts+0x88>
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	697a      	ldr	r2, [r7, #20]
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d327      	bcc.n	8015fbc <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	685a      	ldr	r2, [r3, #4]
 8015f74:	4b16      	ldr	r3, [pc, #88]	; (8015fd0 <sys_check_timeouts+0x9c>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	4413      	add	r3, r2
 8015f7a:	4a15      	ldr	r2, [pc, #84]	; (8015fd0 <sys_check_timeouts+0x9c>)
 8015f7c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	697a      	ldr	r2, [r7, #20]
 8015f84:	1ad3      	subs	r3, r2, r3
 8015f86:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	4a0f      	ldr	r2, [pc, #60]	; (8015fcc <sys_check_timeouts+0x98>)
 8015f8e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	689b      	ldr	r3, [r3, #8]
 8015f94:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	68db      	ldr	r3, [r3, #12]
 8015f9a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015f9c:	68b9      	ldr	r1, [r7, #8]
 8015f9e:	200a      	movs	r0, #10
 8015fa0:	f7f9 fca2 	bl	800f8e8 <memp_free>
        if (handler != NULL) {
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d008      	beq.n	8015fbc <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8015faa:	480a      	ldr	r0, [pc, #40]	; (8015fd4 <sys_check_timeouts+0xa0>)
 8015fac:	f002 fe6a 	bl	8018c84 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6838      	ldr	r0, [r7, #0]
 8015fb4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8015fb6:	4807      	ldr	r0, [pc, #28]	; (8015fd4 <sys_check_timeouts+0xa0>)
 8015fb8:	f002 fe73 	bl	8018ca2 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8015fbc:	7cfb      	ldrb	r3, [r7, #19]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d1c7      	bne.n	8015f52 <sys_check_timeouts+0x1e>
  }
}
 8015fc2:	bf00      	nop
 8015fc4:	3718      	adds	r7, #24
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bd80      	pop	{r7, pc}
 8015fca:	bf00      	nop
 8015fcc:	200040e8 	.word	0x200040e8
 8015fd0:	200040ec 	.word	0x200040ec
 8015fd4:	200048f0 	.word	0x200048f0

08015fd8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8015fde:	4b0f      	ldr	r3, [pc, #60]	; (801601c <sys_timeouts_sleeptime+0x44>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d102      	bne.n	8015fec <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8015fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8015fea:	e013      	b.n	8016014 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8015fec:	f7f3 fe36 	bl	8009c5c <sys_now>
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	4b0b      	ldr	r3, [pc, #44]	; (8016020 <sys_timeouts_sleeptime+0x48>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	1ad3      	subs	r3, r2, r3
 8015ff8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8015ffa:	4b08      	ldr	r3, [pc, #32]	; (801601c <sys_timeouts_sleeptime+0x44>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	429a      	cmp	r2, r3
 8016004:	d901      	bls.n	801600a <sys_timeouts_sleeptime+0x32>
    return 0;
 8016006:	2300      	movs	r3, #0
 8016008:	e004      	b.n	8016014 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801600a:	4b04      	ldr	r3, [pc, #16]	; (801601c <sys_timeouts_sleeptime+0x44>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	685a      	ldr	r2, [r3, #4]
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	1ad3      	subs	r3, r2, r3
  }
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	200040e8 	.word	0x200040e8
 8016020:	200040ec 	.word	0x200040ec

08016024 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801602e:	4b0f      	ldr	r3, [pc, #60]	; (801606c <sys_timeouts_mbox_fetch+0x48>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d105      	bne.n	8016042 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016036:	2200      	movs	r2, #0
 8016038:	6839      	ldr	r1, [r7, #0]
 801603a:	6878      	ldr	r0, [r7, #4]
 801603c:	f002 fced 	bl	8018a1a <sys_arch_mbox_fetch>
    return;
 8016040:	e011      	b.n	8016066 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016042:	f7ff ffc9 	bl	8015fd8 <sys_timeouts_sleeptime>
 8016046:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d008      	beq.n	8016060 <sys_timeouts_mbox_fetch+0x3c>
 801604e:	68fa      	ldr	r2, [r7, #12]
 8016050:	6839      	ldr	r1, [r7, #0]
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f002 fce1 	bl	8018a1a <sys_arch_mbox_fetch>
 8016058:	4603      	mov	r3, r0
 801605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801605e:	d102      	bne.n	8016066 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016060:	f7ff ff68 	bl	8015f34 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016064:	e7e3      	b.n	801602e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8016066:	3710      	adds	r7, #16
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	200040e8 	.word	0x200040e8

08016070 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016070:	b480      	push	{r7}
 8016072:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016074:	bf00      	nop
 8016076:	46bd      	mov	sp, r7
 8016078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607c:	4770      	bx	lr
	...

08016080 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016080:	b480      	push	{r7}
 8016082:	b083      	sub	sp, #12
 8016084:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801608a:	4b17      	ldr	r3, [pc, #92]	; (80160e8 <udp_new_port+0x68>)
 801608c:	881b      	ldrh	r3, [r3, #0]
 801608e:	1c5a      	adds	r2, r3, #1
 8016090:	b291      	uxth	r1, r2
 8016092:	4a15      	ldr	r2, [pc, #84]	; (80160e8 <udp_new_port+0x68>)
 8016094:	8011      	strh	r1, [r2, #0]
 8016096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801609a:	4293      	cmp	r3, r2
 801609c:	d103      	bne.n	80160a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801609e:	4b12      	ldr	r3, [pc, #72]	; (80160e8 <udp_new_port+0x68>)
 80160a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80160a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80160a6:	4b11      	ldr	r3, [pc, #68]	; (80160ec <udp_new_port+0x6c>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	603b      	str	r3, [r7, #0]
 80160ac:	e011      	b.n	80160d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	8a5a      	ldrh	r2, [r3, #18]
 80160b2:	4b0d      	ldr	r3, [pc, #52]	; (80160e8 <udp_new_port+0x68>)
 80160b4:	881b      	ldrh	r3, [r3, #0]
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d108      	bne.n	80160cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80160ba:	88fb      	ldrh	r3, [r7, #6]
 80160bc:	3301      	adds	r3, #1
 80160be:	80fb      	strh	r3, [r7, #6]
 80160c0:	88fb      	ldrh	r3, [r7, #6]
 80160c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80160c6:	d3e0      	bcc.n	801608a <udp_new_port+0xa>
        return 0;
 80160c8:	2300      	movs	r3, #0
 80160ca:	e007      	b.n	80160dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	603b      	str	r3, [r7, #0]
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d1ea      	bne.n	80160ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80160d8:	4b03      	ldr	r3, [pc, #12]	; (80160e8 <udp_new_port+0x68>)
 80160da:	881b      	ldrh	r3, [r3, #0]
}
 80160dc:	4618      	mov	r0, r3
 80160de:	370c      	adds	r7, #12
 80160e0:	46bd      	mov	sp, r7
 80160e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e6:	4770      	bx	lr
 80160e8:	20000030 	.word	0x20000030
 80160ec:	200079c8 	.word	0x200079c8

080160f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80160f0:	b480      	push	{r7}
 80160f2:	b085      	sub	sp, #20
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	60f8      	str	r0, [r7, #12]
 80160f8:	60b9      	str	r1, [r7, #8]
 80160fa:	4613      	mov	r3, r2
 80160fc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80160fe:	79fb      	ldrb	r3, [r7, #7]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d018      	beq.n	8016136 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d013      	beq.n	8016132 <udp_input_local_match+0x42>
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00f      	beq.n	8016132 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016112:	4b14      	ldr	r3, [pc, #80]	; (8016164 <udp_input_local_match+0x74>)
 8016114:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801611a:	d00a      	beq.n	8016132 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	4b10      	ldr	r3, [pc, #64]	; (8016164 <udp_input_local_match+0x74>)
 8016122:	695b      	ldr	r3, [r3, #20]
 8016124:	405a      	eors	r2, r3
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	3308      	adds	r3, #8
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801612e:	2b00      	cmp	r3, #0
 8016130:	d110      	bne.n	8016154 <udp_input_local_match+0x64>
          return 1;
 8016132:	2301      	movs	r3, #1
 8016134:	e00f      	b.n	8016156 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d009      	beq.n	8016150 <udp_input_local_match+0x60>
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d005      	beq.n	8016150 <udp_input_local_match+0x60>
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	4b06      	ldr	r3, [pc, #24]	; (8016164 <udp_input_local_match+0x74>)
 801614a:	695b      	ldr	r3, [r3, #20]
 801614c:	429a      	cmp	r2, r3
 801614e:	d101      	bne.n	8016154 <udp_input_local_match+0x64>
      return 1;
 8016150:	2301      	movs	r3, #1
 8016152:	e000      	b.n	8016156 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3714      	adds	r7, #20
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr
 8016162:	bf00      	nop
 8016164:	200048f4 	.word	0x200048f4

08016168 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016168:	b590      	push	{r4, r7, lr}
 801616a:	b08d      	sub	sp, #52	; 0x34
 801616c:	af02      	add	r7, sp, #8
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016172:	2300      	movs	r3, #0
 8016174:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	895b      	ldrh	r3, [r3, #10]
 801617a:	2b07      	cmp	r3, #7
 801617c:	d803      	bhi.n	8016186 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f7fa f94a 	bl	8010418 <pbuf_free>
    goto end;
 8016184:	e0c6      	b.n	8016314 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801618c:	4b63      	ldr	r3, [pc, #396]	; (801631c <udp_input+0x1b4>)
 801618e:	695a      	ldr	r2, [r3, #20]
 8016190:	4b62      	ldr	r3, [pc, #392]	; (801631c <udp_input+0x1b4>)
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	4619      	mov	r1, r3
 8016196:	4610      	mov	r0, r2
 8016198:	f001 fcf2 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 801619c:	4603      	mov	r3, r0
 801619e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	881b      	ldrh	r3, [r3, #0]
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7f8 ff1c 	bl	800efe4 <lwip_htons>
 80161ac:	4603      	mov	r3, r0
 80161ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80161b0:	697b      	ldr	r3, [r7, #20]
 80161b2:	885b      	ldrh	r3, [r3, #2]
 80161b4:	b29b      	uxth	r3, r3
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7f8 ff14 	bl	800efe4 <lwip_htons>
 80161bc:	4603      	mov	r3, r0
 80161be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80161c0:	2300      	movs	r3, #0
 80161c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80161c4:	2300      	movs	r3, #0
 80161c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80161c8:	2300      	movs	r3, #0
 80161ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80161cc:	4b54      	ldr	r3, [pc, #336]	; (8016320 <udp_input+0x1b8>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	627b      	str	r3, [r7, #36]	; 0x24
 80161d2:	e03b      	b.n	801624c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80161d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d6:	8a5b      	ldrh	r3, [r3, #18]
 80161d8:	89fa      	ldrh	r2, [r7, #14]
 80161da:	429a      	cmp	r2, r3
 80161dc:	d131      	bne.n	8016242 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80161de:	7cfb      	ldrb	r3, [r7, #19]
 80161e0:	461a      	mov	r2, r3
 80161e2:	6839      	ldr	r1, [r7, #0]
 80161e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161e6:	f7ff ff83 	bl	80160f0 <udp_input_local_match>
 80161ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d028      	beq.n	8016242 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80161f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f2:	7c1b      	ldrb	r3, [r3, #16]
 80161f4:	f003 0304 	and.w	r3, r3, #4
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d104      	bne.n	8016206 <udp_input+0x9e>
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d101      	bne.n	8016206 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8016202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016204:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016208:	8a9b      	ldrh	r3, [r3, #20]
 801620a:	8a3a      	ldrh	r2, [r7, #16]
 801620c:	429a      	cmp	r2, r3
 801620e:	d118      	bne.n	8016242 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016212:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016214:	2b00      	cmp	r3, #0
 8016216:	d005      	beq.n	8016224 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621a:	685a      	ldr	r2, [r3, #4]
 801621c:	4b3f      	ldr	r3, [pc, #252]	; (801631c <udp_input+0x1b4>)
 801621e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016220:	429a      	cmp	r2, r3
 8016222:	d10e      	bne.n	8016242 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016224:	6a3b      	ldr	r3, [r7, #32]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d014      	beq.n	8016254 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	68da      	ldr	r2, [r3, #12]
 801622e:	6a3b      	ldr	r3, [r7, #32]
 8016230:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016232:	4b3b      	ldr	r3, [pc, #236]	; (8016320 <udp_input+0x1b8>)
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801623a:	4a39      	ldr	r2, [pc, #228]	; (8016320 <udp_input+0x1b8>)
 801623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016240:	e008      	b.n	8016254 <udp_input+0xec>
      }
    }

    prev = pcb;
 8016242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016244:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016248:	68db      	ldr	r3, [r3, #12]
 801624a:	627b      	str	r3, [r7, #36]	; 0x24
 801624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624e:	2b00      	cmp	r3, #0
 8016250:	d1c0      	bne.n	80161d4 <udp_input+0x6c>
 8016252:	e000      	b.n	8016256 <udp_input+0xee>
        break;
 8016254:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	2b00      	cmp	r3, #0
 801625a:	d101      	bne.n	8016260 <udp_input+0xf8>
    pcb = uncon_pcb;
 801625c:	69fb      	ldr	r3, [r7, #28]
 801625e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016262:	2b00      	cmp	r3, #0
 8016264:	d002      	beq.n	801626c <udp_input+0x104>
    for_us = 1;
 8016266:	2301      	movs	r3, #1
 8016268:	76fb      	strb	r3, [r7, #27]
 801626a:	e00a      	b.n	8016282 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	3304      	adds	r3, #4
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	4b2a      	ldr	r3, [pc, #168]	; (801631c <udp_input+0x1b4>)
 8016274:	695b      	ldr	r3, [r3, #20]
 8016276:	429a      	cmp	r2, r3
 8016278:	bf0c      	ite	eq
 801627a:	2301      	moveq	r3, #1
 801627c:	2300      	movne	r3, #0
 801627e:	b2db      	uxtb	r3, r3
 8016280:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016282:	7efb      	ldrb	r3, [r7, #27]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d042      	beq.n	801630e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8016288:	f06f 0107 	mvn.w	r1, #7
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f7fa f89f 	bl	80103d0 <pbuf_header>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d00a      	beq.n	80162ae <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8016298:	4b22      	ldr	r3, [pc, #136]	; (8016324 <udp_input+0x1bc>)
 801629a:	f240 1255 	movw	r2, #341	; 0x155
 801629e:	4922      	ldr	r1, [pc, #136]	; (8016328 <udp_input+0x1c0>)
 80162a0:	4822      	ldr	r0, [pc, #136]	; (801632c <udp_input+0x1c4>)
 80162a2:	f002 fd95 	bl	8018dd0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f7fa f8b6 	bl	8010418 <pbuf_free>
      goto end;
 80162ac:	e032      	b.n	8016314 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80162ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d012      	beq.n	80162da <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80162b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b6:	699b      	ldr	r3, [r3, #24]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d00a      	beq.n	80162d2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80162bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162be:	699c      	ldr	r4, [r3, #24]
 80162c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c2:	69d8      	ldr	r0, [r3, #28]
 80162c4:	8a3b      	ldrh	r3, [r7, #16]
 80162c6:	9300      	str	r3, [sp, #0]
 80162c8:	4b19      	ldr	r3, [pc, #100]	; (8016330 <udp_input+0x1c8>)
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80162d0:	e021      	b.n	8016316 <udp_input+0x1ae>
        pbuf_free(p);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7fa f8a0 	bl	8010418 <pbuf_free>
        goto end;
 80162d8:	e01c      	b.n	8016314 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80162da:	7cfb      	ldrb	r3, [r7, #19]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d112      	bne.n	8016306 <udp_input+0x19e>
 80162e0:	4b0e      	ldr	r3, [pc, #56]	; (801631c <udp_input+0x1b4>)
 80162e2:	695b      	ldr	r3, [r3, #20]
 80162e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162e8:	2be0      	cmp	r3, #224	; 0xe0
 80162ea:	d00c      	beq.n	8016306 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80162ec:	4b0b      	ldr	r3, [pc, #44]	; (801631c <udp_input+0x1b4>)
 80162ee:	899b      	ldrh	r3, [r3, #12]
 80162f0:	3308      	adds	r3, #8
 80162f2:	b29b      	uxth	r3, r3
 80162f4:	b21b      	sxth	r3, r3
 80162f6:	4619      	mov	r1, r3
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f7fa f87b 	bl	80103f4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80162fe:	2103      	movs	r1, #3
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	f001 f93b 	bl	801757c <icmp_dest_unreach>
      pbuf_free(p);
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f7fa f886 	bl	8010418 <pbuf_free>
  return;
 801630c:	e003      	b.n	8016316 <udp_input+0x1ae>
    pbuf_free(p);
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f7fa f882 	bl	8010418 <pbuf_free>
  return;
 8016314:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016316:	372c      	adds	r7, #44	; 0x2c
 8016318:	46bd      	mov	sp, r7
 801631a:	bd90      	pop	{r4, r7, pc}
 801631c:	200048f4 	.word	0x200048f4
 8016320:	200079c8 	.word	0x200079c8
 8016324:	0801bdcc 	.word	0x0801bdcc
 8016328:	0801be20 	.word	0x0801be20
 801632c:	0801be34 	.word	0x0801be34
 8016330:	20004904 	.word	0x20004904

08016334 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b086      	sub	sp, #24
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	4613      	mov	r3, r2
 8016340:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d101      	bne.n	801634c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016348:	4b30      	ldr	r3, [pc, #192]	; (801640c <udp_bind+0xd8>)
 801634a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d002      	beq.n	8016358 <udp_bind+0x24>
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d102      	bne.n	801635e <udp_bind+0x2a>
    return ERR_VAL;
 8016358:	f06f 0305 	mvn.w	r3, #5
 801635c:	e052      	b.n	8016404 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801635e:	2300      	movs	r3, #0
 8016360:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016362:	4b2b      	ldr	r3, [pc, #172]	; (8016410 <udp_bind+0xdc>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	617b      	str	r3, [r7, #20]
 8016368:	e009      	b.n	801637e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801636a:	68fa      	ldr	r2, [r7, #12]
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	429a      	cmp	r2, r3
 8016370:	d102      	bne.n	8016378 <udp_bind+0x44>
      rebind = 1;
 8016372:	2301      	movs	r3, #1
 8016374:	74fb      	strb	r3, [r7, #19]
      break;
 8016376:	e005      	b.n	8016384 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	68db      	ldr	r3, [r3, #12]
 801637c:	617b      	str	r3, [r7, #20]
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d1f2      	bne.n	801636a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016384:	88fb      	ldrh	r3, [r7, #6]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d109      	bne.n	801639e <udp_bind+0x6a>
    port = udp_new_port();
 801638a:	f7ff fe79 	bl	8016080 <udp_new_port>
 801638e:	4603      	mov	r3, r0
 8016390:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016392:	88fb      	ldrh	r3, [r7, #6]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d11e      	bne.n	80163d6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016398:	f06f 0307 	mvn.w	r3, #7
 801639c:	e032      	b.n	8016404 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801639e:	4b1c      	ldr	r3, [pc, #112]	; (8016410 <udp_bind+0xdc>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	617b      	str	r3, [r7, #20]
 80163a4:	e014      	b.n	80163d0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 80163a6:	68fa      	ldr	r2, [r7, #12]
 80163a8:	697b      	ldr	r3, [r7, #20]
 80163aa:	429a      	cmp	r2, r3
 80163ac:	d00d      	beq.n	80163ca <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80163ae:	697b      	ldr	r3, [r7, #20]
 80163b0:	8a5b      	ldrh	r3, [r3, #18]
 80163b2:	88fa      	ldrh	r2, [r7, #6]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d108      	bne.n	80163ca <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d102      	bne.n	80163ca <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80163c4:	f06f 0307 	mvn.w	r3, #7
 80163c8:	e01c      	b.n	8016404 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	68db      	ldr	r3, [r3, #12]
 80163ce:	617b      	str	r3, [r7, #20]
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d1e7      	bne.n	80163a6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <udp_bind+0xae>
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	e000      	b.n	80163e4 <udp_bind+0xb0>
 80163e2:	2300      	movs	r3, #0
 80163e4:	68fa      	ldr	r2, [r7, #12]
 80163e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	88fa      	ldrh	r2, [r7, #6]
 80163ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80163ee:	7cfb      	ldrb	r3, [r7, #19]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d106      	bne.n	8016402 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80163f4:	4b06      	ldr	r3, [pc, #24]	; (8016410 <udp_bind+0xdc>)
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80163fc:	4a04      	ldr	r2, [pc, #16]	; (8016410 <udp_bind+0xdc>)
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	0801c6dc 	.word	0x0801c6dc
 8016410:	200079c8 	.word	0x200079c8

08016414 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016414:	b480      	push	{r7}
 8016416:	b085      	sub	sp, #20
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	68ba      	ldr	r2, [r7, #8]
 8016424:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	687a      	ldr	r2, [r7, #4]
 801642a:	61da      	str	r2, [r3, #28]
}
 801642c:	bf00      	nop
 801642e:	3714      	adds	r7, #20
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr

08016438 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016440:	4b15      	ldr	r3, [pc, #84]	; (8016498 <udp_remove+0x60>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	687a      	ldr	r2, [r7, #4]
 8016446:	429a      	cmp	r2, r3
 8016448:	d105      	bne.n	8016456 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801644a:	4b13      	ldr	r3, [pc, #76]	; (8016498 <udp_remove+0x60>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	4a11      	ldr	r2, [pc, #68]	; (8016498 <udp_remove+0x60>)
 8016452:	6013      	str	r3, [r2, #0]
 8016454:	e017      	b.n	8016486 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016456:	4b10      	ldr	r3, [pc, #64]	; (8016498 <udp_remove+0x60>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	60fb      	str	r3, [r7, #12]
 801645c:	e010      	b.n	8016480 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d009      	beq.n	801647a <udp_remove+0x42>
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	429a      	cmp	r2, r3
 801646e:	d104      	bne.n	801647a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	68da      	ldr	r2, [r3, #12]
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	60da      	str	r2, [r3, #12]
        break;
 8016478:	e005      	b.n	8016486 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	68db      	ldr	r3, [r3, #12]
 801647e:	60fb      	str	r3, [r7, #12]
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d1eb      	bne.n	801645e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016486:	6879      	ldr	r1, [r7, #4]
 8016488:	2000      	movs	r0, #0
 801648a:	f7f9 fa2d 	bl	800f8e8 <memp_free>
}
 801648e:	bf00      	nop
 8016490:	3710      	adds	r7, #16
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
 8016496:	bf00      	nop
 8016498:	200079c8 	.word	0x200079c8

0801649c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b082      	sub	sp, #8
 80164a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80164a2:	2000      	movs	r0, #0
 80164a4:	f7f9 f9aa 	bl	800f7fc <memp_malloc>
 80164a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d007      	beq.n	80164c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80164b0:	2220      	movs	r2, #32
 80164b2:	2100      	movs	r1, #0
 80164b4:	6878      	ldr	r0, [r7, #4]
 80164b6:	f002 fc83 	bl	8018dc0 <memset>
    pcb->ttl = UDP_TTL;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	22ff      	movs	r2, #255	; 0xff
 80164be:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80164c0:	687b      	ldr	r3, [r7, #4]
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3708      	adds	r7, #8
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}

080164ca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80164ca:	b580      	push	{r7, lr}
 80164cc:	b084      	sub	sp, #16
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	4603      	mov	r3, r0
 80164d2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80164d4:	f7ff ffe2 	bl	801649c <udp_new>
 80164d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80164da:	68fb      	ldr	r3, [r7, #12]
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3710      	adds	r7, #16
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b085      	sub	sp, #20
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d01e      	beq.n	8016532 <udp_netif_ip_addr_changed+0x4e>
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d01a      	beq.n	8016532 <udp_netif_ip_addr_changed+0x4e>
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d017      	beq.n	8016532 <udp_netif_ip_addr_changed+0x4e>
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d013      	beq.n	8016532 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801650a:	4b0d      	ldr	r3, [pc, #52]	; (8016540 <udp_netif_ip_addr_changed+0x5c>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	60fb      	str	r3, [r7, #12]
 8016510:	e00c      	b.n	801652c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	429a      	cmp	r2, r3
 801651c:	d103      	bne.n	8016526 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	681a      	ldr	r2, [r3, #0]
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	68db      	ldr	r3, [r3, #12]
 801652a:	60fb      	str	r3, [r7, #12]
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d1ef      	bne.n	8016512 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016532:	bf00      	nop
 8016534:	3714      	adds	r7, #20
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr
 801653e:	bf00      	nop
 8016540:	200079c8 	.word	0x200079c8

08016544 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801654c:	4915      	ldr	r1, [pc, #84]	; (80165a4 <etharp_free_entry+0x60>)
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	4613      	mov	r3, r2
 8016552:	005b      	lsls	r3, r3, #1
 8016554:	4413      	add	r3, r2
 8016556:	00db      	lsls	r3, r3, #3
 8016558:	440b      	add	r3, r1
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d013      	beq.n	8016588 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016560:	4910      	ldr	r1, [pc, #64]	; (80165a4 <etharp_free_entry+0x60>)
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	4613      	mov	r3, r2
 8016566:	005b      	lsls	r3, r3, #1
 8016568:	4413      	add	r3, r2
 801656a:	00db      	lsls	r3, r3, #3
 801656c:	440b      	add	r3, r1
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	4618      	mov	r0, r3
 8016572:	f7f9 ff51 	bl	8010418 <pbuf_free>
    arp_table[i].q = NULL;
 8016576:	490b      	ldr	r1, [pc, #44]	; (80165a4 <etharp_free_entry+0x60>)
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	4613      	mov	r3, r2
 801657c:	005b      	lsls	r3, r3, #1
 801657e:	4413      	add	r3, r2
 8016580:	00db      	lsls	r3, r3, #3
 8016582:	440b      	add	r3, r1
 8016584:	2200      	movs	r2, #0
 8016586:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016588:	4906      	ldr	r1, [pc, #24]	; (80165a4 <etharp_free_entry+0x60>)
 801658a:	687a      	ldr	r2, [r7, #4]
 801658c:	4613      	mov	r3, r2
 801658e:	005b      	lsls	r3, r3, #1
 8016590:	4413      	add	r3, r2
 8016592:	00db      	lsls	r3, r3, #3
 8016594:	440b      	add	r3, r1
 8016596:	3314      	adds	r3, #20
 8016598:	2200      	movs	r2, #0
 801659a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801659c:	bf00      	nop
 801659e:	3708      	adds	r7, #8
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	200040f4 	.word	0x200040f4

080165a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165ae:	2300      	movs	r3, #0
 80165b0:	71fb      	strb	r3, [r7, #7]
 80165b2:	e096      	b.n	80166e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80165b4:	79fa      	ldrb	r2, [r7, #7]
 80165b6:	494f      	ldr	r1, [pc, #316]	; (80166f4 <etharp_tmr+0x14c>)
 80165b8:	4613      	mov	r3, r2
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	4413      	add	r3, r2
 80165be:	00db      	lsls	r3, r3, #3
 80165c0:	440b      	add	r3, r1
 80165c2:	3314      	adds	r3, #20
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80165c8:	79bb      	ldrb	r3, [r7, #6]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f000 8086 	beq.w	80166dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80165d0:	79fa      	ldrb	r2, [r7, #7]
 80165d2:	4948      	ldr	r1, [pc, #288]	; (80166f4 <etharp_tmr+0x14c>)
 80165d4:	4613      	mov	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4413      	add	r3, r2
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	440b      	add	r3, r1
 80165de:	3312      	adds	r3, #18
 80165e0:	881b      	ldrh	r3, [r3, #0]
 80165e2:	3301      	adds	r3, #1
 80165e4:	b298      	uxth	r0, r3
 80165e6:	4943      	ldr	r1, [pc, #268]	; (80166f4 <etharp_tmr+0x14c>)
 80165e8:	4613      	mov	r3, r2
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	4413      	add	r3, r2
 80165ee:	00db      	lsls	r3, r3, #3
 80165f0:	440b      	add	r3, r1
 80165f2:	3312      	adds	r3, #18
 80165f4:	4602      	mov	r2, r0
 80165f6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165f8:	79fa      	ldrb	r2, [r7, #7]
 80165fa:	493e      	ldr	r1, [pc, #248]	; (80166f4 <etharp_tmr+0x14c>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	440b      	add	r3, r1
 8016606:	3312      	adds	r3, #18
 8016608:	881b      	ldrh	r3, [r3, #0]
 801660a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801660e:	d215      	bcs.n	801663c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016610:	79fa      	ldrb	r2, [r7, #7]
 8016612:	4938      	ldr	r1, [pc, #224]	; (80166f4 <etharp_tmr+0x14c>)
 8016614:	4613      	mov	r3, r2
 8016616:	005b      	lsls	r3, r3, #1
 8016618:	4413      	add	r3, r2
 801661a:	00db      	lsls	r3, r3, #3
 801661c:	440b      	add	r3, r1
 801661e:	3314      	adds	r3, #20
 8016620:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016622:	2b01      	cmp	r3, #1
 8016624:	d10f      	bne.n	8016646 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016626:	79fa      	ldrb	r2, [r7, #7]
 8016628:	4932      	ldr	r1, [pc, #200]	; (80166f4 <etharp_tmr+0x14c>)
 801662a:	4613      	mov	r3, r2
 801662c:	005b      	lsls	r3, r3, #1
 801662e:	4413      	add	r3, r2
 8016630:	00db      	lsls	r3, r3, #3
 8016632:	440b      	add	r3, r1
 8016634:	3312      	adds	r3, #18
 8016636:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016638:	2b04      	cmp	r3, #4
 801663a:	d904      	bls.n	8016646 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801663c:	79fb      	ldrb	r3, [r7, #7]
 801663e:	4618      	mov	r0, r3
 8016640:	f7ff ff80 	bl	8016544 <etharp_free_entry>
 8016644:	e04a      	b.n	80166dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016646:	79fa      	ldrb	r2, [r7, #7]
 8016648:	492a      	ldr	r1, [pc, #168]	; (80166f4 <etharp_tmr+0x14c>)
 801664a:	4613      	mov	r3, r2
 801664c:	005b      	lsls	r3, r3, #1
 801664e:	4413      	add	r3, r2
 8016650:	00db      	lsls	r3, r3, #3
 8016652:	440b      	add	r3, r1
 8016654:	3314      	adds	r3, #20
 8016656:	781b      	ldrb	r3, [r3, #0]
 8016658:	2b03      	cmp	r3, #3
 801665a:	d10a      	bne.n	8016672 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801665c:	79fa      	ldrb	r2, [r7, #7]
 801665e:	4925      	ldr	r1, [pc, #148]	; (80166f4 <etharp_tmr+0x14c>)
 8016660:	4613      	mov	r3, r2
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	440b      	add	r3, r1
 801666a:	3314      	adds	r3, #20
 801666c:	2204      	movs	r2, #4
 801666e:	701a      	strb	r2, [r3, #0]
 8016670:	e034      	b.n	80166dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016672:	79fa      	ldrb	r2, [r7, #7]
 8016674:	491f      	ldr	r1, [pc, #124]	; (80166f4 <etharp_tmr+0x14c>)
 8016676:	4613      	mov	r3, r2
 8016678:	005b      	lsls	r3, r3, #1
 801667a:	4413      	add	r3, r2
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	440b      	add	r3, r1
 8016680:	3314      	adds	r3, #20
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	2b04      	cmp	r3, #4
 8016686:	d10a      	bne.n	801669e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016688:	79fa      	ldrb	r2, [r7, #7]
 801668a:	491a      	ldr	r1, [pc, #104]	; (80166f4 <etharp_tmr+0x14c>)
 801668c:	4613      	mov	r3, r2
 801668e:	005b      	lsls	r3, r3, #1
 8016690:	4413      	add	r3, r2
 8016692:	00db      	lsls	r3, r3, #3
 8016694:	440b      	add	r3, r1
 8016696:	3314      	adds	r3, #20
 8016698:	2202      	movs	r2, #2
 801669a:	701a      	strb	r2, [r3, #0]
 801669c:	e01e      	b.n	80166dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801669e:	79fa      	ldrb	r2, [r7, #7]
 80166a0:	4914      	ldr	r1, [pc, #80]	; (80166f4 <etharp_tmr+0x14c>)
 80166a2:	4613      	mov	r3, r2
 80166a4:	005b      	lsls	r3, r3, #1
 80166a6:	4413      	add	r3, r2
 80166a8:	00db      	lsls	r3, r3, #3
 80166aa:	440b      	add	r3, r1
 80166ac:	3314      	adds	r3, #20
 80166ae:	781b      	ldrb	r3, [r3, #0]
 80166b0:	2b01      	cmp	r3, #1
 80166b2:	d113      	bne.n	80166dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80166b4:	79fa      	ldrb	r2, [r7, #7]
 80166b6:	490f      	ldr	r1, [pc, #60]	; (80166f4 <etharp_tmr+0x14c>)
 80166b8:	4613      	mov	r3, r2
 80166ba:	005b      	lsls	r3, r3, #1
 80166bc:	4413      	add	r3, r2
 80166be:	00db      	lsls	r3, r3, #3
 80166c0:	440b      	add	r3, r1
 80166c2:	3308      	adds	r3, #8
 80166c4:	6818      	ldr	r0, [r3, #0]
 80166c6:	79fa      	ldrb	r2, [r7, #7]
 80166c8:	4613      	mov	r3, r2
 80166ca:	005b      	lsls	r3, r3, #1
 80166cc:	4413      	add	r3, r2
 80166ce:	00db      	lsls	r3, r3, #3
 80166d0:	4a08      	ldr	r2, [pc, #32]	; (80166f4 <etharp_tmr+0x14c>)
 80166d2:	4413      	add	r3, r2
 80166d4:	3304      	adds	r3, #4
 80166d6:	4619      	mov	r1, r3
 80166d8:	f000 fe38 	bl	801734c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166dc:	79fb      	ldrb	r3, [r7, #7]
 80166de:	3301      	adds	r3, #1
 80166e0:	71fb      	strb	r3, [r7, #7]
 80166e2:	79fb      	ldrb	r3, [r7, #7]
 80166e4:	2b09      	cmp	r3, #9
 80166e6:	f67f af65 	bls.w	80165b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	200040f4 	.word	0x200040f4

080166f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b088      	sub	sp, #32
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	460b      	mov	r3, r1
 8016702:	607a      	str	r2, [r7, #4]
 8016704:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016706:	230a      	movs	r3, #10
 8016708:	77fb      	strb	r3, [r7, #31]
 801670a:	230a      	movs	r3, #10
 801670c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801670e:	230a      	movs	r3, #10
 8016710:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8016712:	2300      	movs	r3, #0
 8016714:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8016716:	230a      	movs	r3, #10
 8016718:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801671a:	2300      	movs	r3, #0
 801671c:	833b      	strh	r3, [r7, #24]
 801671e:	2300      	movs	r3, #0
 8016720:	82fb      	strh	r3, [r7, #22]
 8016722:	2300      	movs	r3, #0
 8016724:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016726:	2300      	movs	r3, #0
 8016728:	773b      	strb	r3, [r7, #28]
 801672a:	e093      	b.n	8016854 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801672c:	7f3a      	ldrb	r2, [r7, #28]
 801672e:	4990      	ldr	r1, [pc, #576]	; (8016970 <etharp_find_entry+0x278>)
 8016730:	4613      	mov	r3, r2
 8016732:	005b      	lsls	r3, r3, #1
 8016734:	4413      	add	r3, r2
 8016736:	00db      	lsls	r3, r3, #3
 8016738:	440b      	add	r3, r1
 801673a:	3314      	adds	r3, #20
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016740:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016744:	2b0a      	cmp	r3, #10
 8016746:	d105      	bne.n	8016754 <etharp_find_entry+0x5c>
 8016748:	7cfb      	ldrb	r3, [r7, #19]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d102      	bne.n	8016754 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801674e:	7f3b      	ldrb	r3, [r7, #28]
 8016750:	777b      	strb	r3, [r7, #29]
 8016752:	e07c      	b.n	801684e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016754:	7cfb      	ldrb	r3, [r7, #19]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d079      	beq.n	801684e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801675a:	7cfb      	ldrb	r3, [r7, #19]
 801675c:	2b01      	cmp	r3, #1
 801675e:	d009      	beq.n	8016774 <etharp_find_entry+0x7c>
 8016760:	7cfb      	ldrb	r3, [r7, #19]
 8016762:	2b01      	cmp	r3, #1
 8016764:	d806      	bhi.n	8016774 <etharp_find_entry+0x7c>
 8016766:	4b83      	ldr	r3, [pc, #524]	; (8016974 <etharp_find_entry+0x27c>)
 8016768:	f44f 7293 	mov.w	r2, #294	; 0x126
 801676c:	4982      	ldr	r1, [pc, #520]	; (8016978 <etharp_find_entry+0x280>)
 801676e:	4883      	ldr	r0, [pc, #524]	; (801697c <etharp_find_entry+0x284>)
 8016770:	f002 fb2e 	bl	8018dd0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d00f      	beq.n	801679a <etharp_find_entry+0xa2>
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	6819      	ldr	r1, [r3, #0]
 801677e:	7f3a      	ldrb	r2, [r7, #28]
 8016780:	487b      	ldr	r0, [pc, #492]	; (8016970 <etharp_find_entry+0x278>)
 8016782:	4613      	mov	r3, r2
 8016784:	005b      	lsls	r3, r3, #1
 8016786:	4413      	add	r3, r2
 8016788:	00db      	lsls	r3, r3, #3
 801678a:	4403      	add	r3, r0
 801678c:	3304      	adds	r3, #4
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	4299      	cmp	r1, r3
 8016792:	d102      	bne.n	801679a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016794:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8016798:	e0e5      	b.n	8016966 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801679a:	7cfb      	ldrb	r3, [r7, #19]
 801679c:	2b01      	cmp	r3, #1
 801679e:	d13b      	bne.n	8016818 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80167a0:	7f3a      	ldrb	r2, [r7, #28]
 80167a2:	4973      	ldr	r1, [pc, #460]	; (8016970 <etharp_find_entry+0x278>)
 80167a4:	4613      	mov	r3, r2
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	4413      	add	r3, r2
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	440b      	add	r3, r1
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d018      	beq.n	80167e6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80167b4:	7f3a      	ldrb	r2, [r7, #28]
 80167b6:	496e      	ldr	r1, [pc, #440]	; (8016970 <etharp_find_entry+0x278>)
 80167b8:	4613      	mov	r3, r2
 80167ba:	005b      	lsls	r3, r3, #1
 80167bc:	4413      	add	r3, r2
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	440b      	add	r3, r1
 80167c2:	3312      	adds	r3, #18
 80167c4:	881b      	ldrh	r3, [r3, #0]
 80167c6:	8b3a      	ldrh	r2, [r7, #24]
 80167c8:	429a      	cmp	r2, r3
 80167ca:	d840      	bhi.n	801684e <etharp_find_entry+0x156>
            old_queue = i;
 80167cc:	7f3b      	ldrb	r3, [r7, #28]
 80167ce:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80167d0:	7f3a      	ldrb	r2, [r7, #28]
 80167d2:	4967      	ldr	r1, [pc, #412]	; (8016970 <etharp_find_entry+0x278>)
 80167d4:	4613      	mov	r3, r2
 80167d6:	005b      	lsls	r3, r3, #1
 80167d8:	4413      	add	r3, r2
 80167da:	00db      	lsls	r3, r3, #3
 80167dc:	440b      	add	r3, r1
 80167de:	3312      	adds	r3, #18
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	833b      	strh	r3, [r7, #24]
 80167e4:	e033      	b.n	801684e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80167e6:	7f3a      	ldrb	r2, [r7, #28]
 80167e8:	4961      	ldr	r1, [pc, #388]	; (8016970 <etharp_find_entry+0x278>)
 80167ea:	4613      	mov	r3, r2
 80167ec:	005b      	lsls	r3, r3, #1
 80167ee:	4413      	add	r3, r2
 80167f0:	00db      	lsls	r3, r3, #3
 80167f2:	440b      	add	r3, r1
 80167f4:	3312      	adds	r3, #18
 80167f6:	881b      	ldrh	r3, [r3, #0]
 80167f8:	8afa      	ldrh	r2, [r7, #22]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d827      	bhi.n	801684e <etharp_find_entry+0x156>
            old_pending = i;
 80167fe:	7f3b      	ldrb	r3, [r7, #28]
 8016800:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8016802:	7f3a      	ldrb	r2, [r7, #28]
 8016804:	495a      	ldr	r1, [pc, #360]	; (8016970 <etharp_find_entry+0x278>)
 8016806:	4613      	mov	r3, r2
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	4413      	add	r3, r2
 801680c:	00db      	lsls	r3, r3, #3
 801680e:	440b      	add	r3, r1
 8016810:	3312      	adds	r3, #18
 8016812:	881b      	ldrh	r3, [r3, #0]
 8016814:	82fb      	strh	r3, [r7, #22]
 8016816:	e01a      	b.n	801684e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016818:	7cfb      	ldrb	r3, [r7, #19]
 801681a:	2b01      	cmp	r3, #1
 801681c:	d917      	bls.n	801684e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801681e:	7f3a      	ldrb	r2, [r7, #28]
 8016820:	4953      	ldr	r1, [pc, #332]	; (8016970 <etharp_find_entry+0x278>)
 8016822:	4613      	mov	r3, r2
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	4413      	add	r3, r2
 8016828:	00db      	lsls	r3, r3, #3
 801682a:	440b      	add	r3, r1
 801682c:	3312      	adds	r3, #18
 801682e:	881b      	ldrh	r3, [r3, #0]
 8016830:	8aba      	ldrh	r2, [r7, #20]
 8016832:	429a      	cmp	r2, r3
 8016834:	d80b      	bhi.n	801684e <etharp_find_entry+0x156>
            old_stable = i;
 8016836:	7f3b      	ldrb	r3, [r7, #28]
 8016838:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801683a:	7f3a      	ldrb	r2, [r7, #28]
 801683c:	494c      	ldr	r1, [pc, #304]	; (8016970 <etharp_find_entry+0x278>)
 801683e:	4613      	mov	r3, r2
 8016840:	005b      	lsls	r3, r3, #1
 8016842:	4413      	add	r3, r2
 8016844:	00db      	lsls	r3, r3, #3
 8016846:	440b      	add	r3, r1
 8016848:	3312      	adds	r3, #18
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801684e:	7f3b      	ldrb	r3, [r7, #28]
 8016850:	3301      	adds	r3, #1
 8016852:	773b      	strb	r3, [r7, #28]
 8016854:	7f3b      	ldrb	r3, [r7, #28]
 8016856:	2b09      	cmp	r3, #9
 8016858:	f67f af68 	bls.w	801672c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801685c:	7afb      	ldrb	r3, [r7, #11]
 801685e:	f003 0302 	and.w	r3, r3, #2
 8016862:	2b00      	cmp	r3, #0
 8016864:	d108      	bne.n	8016878 <etharp_find_entry+0x180>
 8016866:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801686a:	2b0a      	cmp	r3, #10
 801686c:	d107      	bne.n	801687e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801686e:	7afb      	ldrb	r3, [r7, #11]
 8016870:	f003 0301 	and.w	r3, r3, #1
 8016874:	2b00      	cmp	r3, #0
 8016876:	d102      	bne.n	801687e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8016878:	f04f 33ff 	mov.w	r3, #4294967295
 801687c:	e073      	b.n	8016966 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801687e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016882:	2b09      	cmp	r3, #9
 8016884:	dc02      	bgt.n	801688c <etharp_find_entry+0x194>
    i = empty;
 8016886:	7f7b      	ldrb	r3, [r7, #29]
 8016888:	773b      	strb	r3, [r7, #28]
 801688a:	e036      	b.n	80168fa <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801688c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016890:	2b09      	cmp	r3, #9
 8016892:	dc13      	bgt.n	80168bc <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8016894:	7fbb      	ldrb	r3, [r7, #30]
 8016896:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016898:	7f3a      	ldrb	r2, [r7, #28]
 801689a:	4935      	ldr	r1, [pc, #212]	; (8016970 <etharp_find_entry+0x278>)
 801689c:	4613      	mov	r3, r2
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	4413      	add	r3, r2
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	440b      	add	r3, r1
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d018      	beq.n	80168de <etharp_find_entry+0x1e6>
 80168ac:	4b31      	ldr	r3, [pc, #196]	; (8016974 <etharp_find_entry+0x27c>)
 80168ae:	f240 126f 	movw	r2, #367	; 0x16f
 80168b2:	4933      	ldr	r1, [pc, #204]	; (8016980 <etharp_find_entry+0x288>)
 80168b4:	4831      	ldr	r0, [pc, #196]	; (801697c <etharp_find_entry+0x284>)
 80168b6:	f002 fa8b 	bl	8018dd0 <iprintf>
 80168ba:	e010      	b.n	80168de <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80168bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80168c0:	2b09      	cmp	r3, #9
 80168c2:	dc02      	bgt.n	80168ca <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80168c4:	7ffb      	ldrb	r3, [r7, #31]
 80168c6:	773b      	strb	r3, [r7, #28]
 80168c8:	e009      	b.n	80168de <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80168ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80168ce:	2b09      	cmp	r3, #9
 80168d0:	dc02      	bgt.n	80168d8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80168d2:	7efb      	ldrb	r3, [r7, #27]
 80168d4:	773b      	strb	r3, [r7, #28]
 80168d6:	e002      	b.n	80168de <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80168d8:	f04f 33ff 	mov.w	r3, #4294967295
 80168dc:	e043      	b.n	8016966 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168de:	7f3b      	ldrb	r3, [r7, #28]
 80168e0:	2b09      	cmp	r3, #9
 80168e2:	d906      	bls.n	80168f2 <etharp_find_entry+0x1fa>
 80168e4:	4b23      	ldr	r3, [pc, #140]	; (8016974 <etharp_find_entry+0x27c>)
 80168e6:	f240 1281 	movw	r2, #385	; 0x181
 80168ea:	4926      	ldr	r1, [pc, #152]	; (8016984 <etharp_find_entry+0x28c>)
 80168ec:	4823      	ldr	r0, [pc, #140]	; (801697c <etharp_find_entry+0x284>)
 80168ee:	f002 fa6f 	bl	8018dd0 <iprintf>
    etharp_free_entry(i);
 80168f2:	7f3b      	ldrb	r3, [r7, #28]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7ff fe25 	bl	8016544 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168fa:	7f3b      	ldrb	r3, [r7, #28]
 80168fc:	2b09      	cmp	r3, #9
 80168fe:	d906      	bls.n	801690e <etharp_find_entry+0x216>
 8016900:	4b1c      	ldr	r3, [pc, #112]	; (8016974 <etharp_find_entry+0x27c>)
 8016902:	f240 1285 	movw	r2, #389	; 0x185
 8016906:	491f      	ldr	r1, [pc, #124]	; (8016984 <etharp_find_entry+0x28c>)
 8016908:	481c      	ldr	r0, [pc, #112]	; (801697c <etharp_find_entry+0x284>)
 801690a:	f002 fa61 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801690e:	7f3a      	ldrb	r2, [r7, #28]
 8016910:	4917      	ldr	r1, [pc, #92]	; (8016970 <etharp_find_entry+0x278>)
 8016912:	4613      	mov	r3, r2
 8016914:	005b      	lsls	r3, r3, #1
 8016916:	4413      	add	r3, r2
 8016918:	00db      	lsls	r3, r3, #3
 801691a:	440b      	add	r3, r1
 801691c:	3314      	adds	r3, #20
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d006      	beq.n	8016932 <etharp_find_entry+0x23a>
 8016924:	4b13      	ldr	r3, [pc, #76]	; (8016974 <etharp_find_entry+0x27c>)
 8016926:	f240 1287 	movw	r2, #391	; 0x187
 801692a:	4917      	ldr	r1, [pc, #92]	; (8016988 <etharp_find_entry+0x290>)
 801692c:	4813      	ldr	r0, [pc, #76]	; (801697c <etharp_find_entry+0x284>)
 801692e:	f002 fa4f 	bl	8018dd0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d00a      	beq.n	801694e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016938:	7f3a      	ldrb	r2, [r7, #28]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	6819      	ldr	r1, [r3, #0]
 801693e:	480c      	ldr	r0, [pc, #48]	; (8016970 <etharp_find_entry+0x278>)
 8016940:	4613      	mov	r3, r2
 8016942:	005b      	lsls	r3, r3, #1
 8016944:	4413      	add	r3, r2
 8016946:	00db      	lsls	r3, r3, #3
 8016948:	4403      	add	r3, r0
 801694a:	3304      	adds	r3, #4
 801694c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801694e:	7f3a      	ldrb	r2, [r7, #28]
 8016950:	4907      	ldr	r1, [pc, #28]	; (8016970 <etharp_find_entry+0x278>)
 8016952:	4613      	mov	r3, r2
 8016954:	005b      	lsls	r3, r3, #1
 8016956:	4413      	add	r3, r2
 8016958:	00db      	lsls	r3, r3, #3
 801695a:	440b      	add	r3, r1
 801695c:	3312      	adds	r3, #18
 801695e:	2200      	movs	r2, #0
 8016960:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8016962:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8016966:	4618      	mov	r0, r3
 8016968:	3720      	adds	r7, #32
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	200040f4 	.word	0x200040f4
 8016974:	0801be8c 	.word	0x0801be8c
 8016978:	0801bee8 	.word	0x0801bee8
 801697c:	0801bf28 	.word	0x0801bf28
 8016980:	0801bf50 	.word	0x0801bf50
 8016984:	0801bf68 	.word	0x0801bf68
 8016988:	0801bf7c 	.word	0x0801bf7c

0801698c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b088      	sub	sp, #32
 8016990:	af02      	add	r7, sp, #8
 8016992:	60f8      	str	r0, [r7, #12]
 8016994:	60b9      	str	r1, [r7, #8]
 8016996:	607a      	str	r2, [r7, #4]
 8016998:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80169a0:	2b06      	cmp	r3, #6
 80169a2:	d006      	beq.n	80169b2 <etharp_update_arp_entry+0x26>
 80169a4:	4b48      	ldr	r3, [pc, #288]	; (8016ac8 <etharp_update_arp_entry+0x13c>)
 80169a6:	f240 12ab 	movw	r2, #427	; 0x1ab
 80169aa:	4948      	ldr	r1, [pc, #288]	; (8016acc <etharp_update_arp_entry+0x140>)
 80169ac:	4848      	ldr	r0, [pc, #288]	; (8016ad0 <etharp_update_arp_entry+0x144>)
 80169ae:	f002 fa0f 	bl	8018dd0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d012      	beq.n	80169de <etharp_update_arp_entry+0x52>
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00e      	beq.n	80169de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	68f9      	ldr	r1, [r7, #12]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f001 f8da 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 80169cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d105      	bne.n	80169de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169da:	2be0      	cmp	r3, #224	; 0xe0
 80169dc:	d102      	bne.n	80169e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80169de:	f06f 030f 	mvn.w	r3, #15
 80169e2:	e06c      	b.n	8016abe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80169e4:	78fb      	ldrb	r3, [r7, #3]
 80169e6:	68fa      	ldr	r2, [r7, #12]
 80169e8:	4619      	mov	r1, r3
 80169ea:	68b8      	ldr	r0, [r7, #8]
 80169ec:	f7ff fe84 	bl	80166f8 <etharp_find_entry>
 80169f0:	4603      	mov	r3, r0
 80169f2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80169f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	da02      	bge.n	8016a02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80169fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016a00:	e05d      	b.n	8016abe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016a02:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a06:	4933      	ldr	r1, [pc, #204]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a08:	4613      	mov	r3, r2
 8016a0a:	005b      	lsls	r3, r3, #1
 8016a0c:	4413      	add	r3, r2
 8016a0e:	00db      	lsls	r3, r3, #3
 8016a10:	440b      	add	r3, r1
 8016a12:	3314      	adds	r3, #20
 8016a14:	2202      	movs	r2, #2
 8016a16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016a18:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a1c:	492d      	ldr	r1, [pc, #180]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a1e:	4613      	mov	r3, r2
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	4413      	add	r3, r2
 8016a24:	00db      	lsls	r3, r3, #3
 8016a26:	440b      	add	r3, r1
 8016a28:	3308      	adds	r3, #8
 8016a2a:	68fa      	ldr	r2, [r7, #12]
 8016a2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8016a2e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a32:	4613      	mov	r3, r2
 8016a34:	005b      	lsls	r3, r3, #1
 8016a36:	4413      	add	r3, r2
 8016a38:	00db      	lsls	r3, r3, #3
 8016a3a:	3308      	adds	r3, #8
 8016a3c:	4a25      	ldr	r2, [pc, #148]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a3e:	4413      	add	r3, r2
 8016a40:	3304      	adds	r3, #4
 8016a42:	2206      	movs	r2, #6
 8016a44:	6879      	ldr	r1, [r7, #4]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f002 f9af 	bl	8018daa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016a4c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a50:	4920      	ldr	r1, [pc, #128]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a52:	4613      	mov	r3, r2
 8016a54:	005b      	lsls	r3, r3, #1
 8016a56:	4413      	add	r3, r2
 8016a58:	00db      	lsls	r3, r3, #3
 8016a5a:	440b      	add	r3, r1
 8016a5c:	3312      	adds	r3, #18
 8016a5e:	2200      	movs	r2, #0
 8016a60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016a62:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a66:	491b      	ldr	r1, [pc, #108]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a68:	4613      	mov	r3, r2
 8016a6a:	005b      	lsls	r3, r3, #1
 8016a6c:	4413      	add	r3, r2
 8016a6e:	00db      	lsls	r3, r3, #3
 8016a70:	440b      	add	r3, r1
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d021      	beq.n	8016abc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016a78:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a7c:	4915      	ldr	r1, [pc, #84]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a7e:	4613      	mov	r3, r2
 8016a80:	005b      	lsls	r3, r3, #1
 8016a82:	4413      	add	r3, r2
 8016a84:	00db      	lsls	r3, r3, #3
 8016a86:	440b      	add	r3, r1
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016a8c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a90:	4910      	ldr	r1, [pc, #64]	; (8016ad4 <etharp_update_arp_entry+0x148>)
 8016a92:	4613      	mov	r3, r2
 8016a94:	005b      	lsls	r3, r3, #1
 8016a96:	4413      	add	r3, r2
 8016a98:	00db      	lsls	r3, r3, #3
 8016a9a:	440b      	add	r3, r1
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8016aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016aaa:	9300      	str	r3, [sp, #0]
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6939      	ldr	r1, [r7, #16]
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	f001 ff07 	bl	80188c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016ab6:	6938      	ldr	r0, [r7, #16]
 8016ab8:	f7f9 fcae 	bl	8010418 <pbuf_free>
  }
  return ERR_OK;
 8016abc:	2300      	movs	r3, #0
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3718      	adds	r7, #24
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	0801be8c 	.word	0x0801be8c
 8016acc:	0801bfa8 	.word	0x0801bfa8
 8016ad0:	0801bf28 	.word	0x0801bf28
 8016ad4:	200040f4 	.word	0x200040f4

08016ad8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	73fb      	strb	r3, [r7, #15]
 8016ae4:	e01f      	b.n	8016b26 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8016ae6:	7bfa      	ldrb	r2, [r7, #15]
 8016ae8:	4912      	ldr	r1, [pc, #72]	; (8016b34 <etharp_cleanup_netif+0x5c>)
 8016aea:	4613      	mov	r3, r2
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	4413      	add	r3, r2
 8016af0:	00db      	lsls	r3, r3, #3
 8016af2:	440b      	add	r3, r1
 8016af4:	3314      	adds	r3, #20
 8016af6:	781b      	ldrb	r3, [r3, #0]
 8016af8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016afa:	7bbb      	ldrb	r3, [r7, #14]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d00f      	beq.n	8016b20 <etharp_cleanup_netif+0x48>
 8016b00:	7bfa      	ldrb	r2, [r7, #15]
 8016b02:	490c      	ldr	r1, [pc, #48]	; (8016b34 <etharp_cleanup_netif+0x5c>)
 8016b04:	4613      	mov	r3, r2
 8016b06:	005b      	lsls	r3, r3, #1
 8016b08:	4413      	add	r3, r2
 8016b0a:	00db      	lsls	r3, r3, #3
 8016b0c:	440b      	add	r3, r1
 8016b0e:	3308      	adds	r3, #8
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d103      	bne.n	8016b20 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8016b18:	7bfb      	ldrb	r3, [r7, #15]
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff fd12 	bl	8016544 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b20:	7bfb      	ldrb	r3, [r7, #15]
 8016b22:	3301      	adds	r3, #1
 8016b24:	73fb      	strb	r3, [r7, #15]
 8016b26:	7bfb      	ldrb	r3, [r7, #15]
 8016b28:	2b09      	cmp	r3, #9
 8016b2a:	d9dc      	bls.n	8016ae6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016b2c:	bf00      	nop
 8016b2e:	3710      	adds	r7, #16
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	200040f4 	.word	0x200040f4

08016b38 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016b38:	b5b0      	push	{r4, r5, r7, lr}
 8016b3a:	b08a      	sub	sp, #40	; 0x28
 8016b3c:	af04      	add	r7, sp, #16
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d107      	bne.n	8016b58 <etharp_input+0x20>
 8016b48:	4b3d      	ldr	r3, [pc, #244]	; (8016c40 <etharp_input+0x108>)
 8016b4a:	f44f 7222 	mov.w	r2, #648	; 0x288
 8016b4e:	493d      	ldr	r1, [pc, #244]	; (8016c44 <etharp_input+0x10c>)
 8016b50:	483d      	ldr	r0, [pc, #244]	; (8016c48 <etharp_input+0x110>)
 8016b52:	f002 f93d 	bl	8018dd0 <iprintf>
 8016b56:	e06f      	b.n	8016c38 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	685b      	ldr	r3, [r3, #4]
 8016b5c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	881b      	ldrh	r3, [r3, #0]
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b68:	d10c      	bne.n	8016b84 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016b6e:	2b06      	cmp	r3, #6
 8016b70:	d108      	bne.n	8016b84 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b76:	2b04      	cmp	r3, #4
 8016b78:	d104      	bne.n	8016b84 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	885b      	ldrh	r3, [r3, #2]
 8016b7e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b80:	2b08      	cmp	r3, #8
 8016b82:	d003      	beq.n	8016b8c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7f9 fc47 	bl	8010418 <pbuf_free>
    return;
 8016b8a:	e055      	b.n	8016c38 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	330e      	adds	r3, #14
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8016b94:	693b      	ldr	r3, [r7, #16]
 8016b96:	3318      	adds	r3, #24
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	3304      	adds	r3, #4
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d102      	bne.n	8016bac <etharp_input+0x74>
    for_us = 0;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	75fb      	strb	r3, [r7, #23]
 8016baa:	e009      	b.n	8016bc0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016bac:	68ba      	ldr	r2, [r7, #8]
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	bf0c      	ite	eq
 8016bb8:	2301      	moveq	r3, #1
 8016bba:	2300      	movne	r3, #0
 8016bbc:	b2db      	uxtb	r3, r3
 8016bbe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	f103 0208 	add.w	r2, r3, #8
 8016bc6:	7dfb      	ldrb	r3, [r7, #23]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d001      	beq.n	8016bd0 <etharp_input+0x98>
 8016bcc:	2301      	movs	r3, #1
 8016bce:	e000      	b.n	8016bd2 <etharp_input+0x9a>
 8016bd0:	2302      	movs	r3, #2
 8016bd2:	f107 010c 	add.w	r1, r7, #12
 8016bd6:	6838      	ldr	r0, [r7, #0]
 8016bd8:	f7ff fed8 	bl	801698c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	88db      	ldrh	r3, [r3, #6]
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016be6:	d003      	beq.n	8016bf0 <etharp_input+0xb8>
 8016be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bec:	d01e      	beq.n	8016c2c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8016bee:	e020      	b.n	8016c32 <etharp_input+0xfa>
    if (for_us) {
 8016bf0:	7dfb      	ldrb	r3, [r7, #23]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d01c      	beq.n	8016c30 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8016bfc:	693b      	ldr	r3, [r7, #16]
 8016bfe:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8016c0c:	693a      	ldr	r2, [r7, #16]
 8016c0e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8016c10:	2102      	movs	r1, #2
 8016c12:	9103      	str	r1, [sp, #12]
 8016c14:	f107 010c 	add.w	r1, r7, #12
 8016c18:	9102      	str	r1, [sp, #8]
 8016c1a:	9201      	str	r2, [sp, #4]
 8016c1c:	9300      	str	r3, [sp, #0]
 8016c1e:	462b      	mov	r3, r5
 8016c20:	4622      	mov	r2, r4
 8016c22:	4601      	mov	r1, r0
 8016c24:	6838      	ldr	r0, [r7, #0]
 8016c26:	f000 fae3 	bl	80171f0 <etharp_raw>
    break;
 8016c2a:	e001      	b.n	8016c30 <etharp_input+0xf8>
    break;
 8016c2c:	bf00      	nop
 8016c2e:	e000      	b.n	8016c32 <etharp_input+0xfa>
    break;
 8016c30:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f7f9 fbf0 	bl	8010418 <pbuf_free>
}
 8016c38:	3718      	adds	r7, #24
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	0801be8c 	.word	0x0801be8c
 8016c44:	0801c000 	.word	0x0801c000
 8016c48:	0801bf28 	.word	0x0801bf28

08016c4c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b086      	sub	sp, #24
 8016c50:	af02      	add	r7, sp, #8
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	4613      	mov	r3, r2
 8016c58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016c5a:	79fa      	ldrb	r2, [r7, #7]
 8016c5c:	4944      	ldr	r1, [pc, #272]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016c5e:	4613      	mov	r3, r2
 8016c60:	005b      	lsls	r3, r3, #1
 8016c62:	4413      	add	r3, r2
 8016c64:	00db      	lsls	r3, r3, #3
 8016c66:	440b      	add	r3, r1
 8016c68:	3314      	adds	r3, #20
 8016c6a:	781b      	ldrb	r3, [r3, #0]
 8016c6c:	2b01      	cmp	r3, #1
 8016c6e:	d806      	bhi.n	8016c7e <etharp_output_to_arp_index+0x32>
 8016c70:	4b40      	ldr	r3, [pc, #256]	; (8016d74 <etharp_output_to_arp_index+0x128>)
 8016c72:	f240 22ed 	movw	r2, #749	; 0x2ed
 8016c76:	4940      	ldr	r1, [pc, #256]	; (8016d78 <etharp_output_to_arp_index+0x12c>)
 8016c78:	4840      	ldr	r0, [pc, #256]	; (8016d7c <etharp_output_to_arp_index+0x130>)
 8016c7a:	f002 f8a9 	bl	8018dd0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016c7e:	79fa      	ldrb	r2, [r7, #7]
 8016c80:	493b      	ldr	r1, [pc, #236]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016c82:	4613      	mov	r3, r2
 8016c84:	005b      	lsls	r3, r3, #1
 8016c86:	4413      	add	r3, r2
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	440b      	add	r3, r1
 8016c8c:	3314      	adds	r3, #20
 8016c8e:	781b      	ldrb	r3, [r3, #0]
 8016c90:	2b02      	cmp	r3, #2
 8016c92:	d153      	bne.n	8016d3c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016c94:	79fa      	ldrb	r2, [r7, #7]
 8016c96:	4936      	ldr	r1, [pc, #216]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016c98:	4613      	mov	r3, r2
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	4413      	add	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	440b      	add	r3, r1
 8016ca2:	3312      	adds	r3, #18
 8016ca4:	881b      	ldrh	r3, [r3, #0]
 8016ca6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016caa:	d919      	bls.n	8016ce0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016cac:	79fa      	ldrb	r2, [r7, #7]
 8016cae:	4613      	mov	r3, r2
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	4413      	add	r3, r2
 8016cb4:	00db      	lsls	r3, r3, #3
 8016cb6:	4a2e      	ldr	r2, [pc, #184]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016cb8:	4413      	add	r3, r2
 8016cba:	3304      	adds	r3, #4
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	68f8      	ldr	r0, [r7, #12]
 8016cc0:	f000 fb44 	bl	801734c <etharp_request>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d138      	bne.n	8016d3c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016cca:	79fa      	ldrb	r2, [r7, #7]
 8016ccc:	4928      	ldr	r1, [pc, #160]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016cce:	4613      	mov	r3, r2
 8016cd0:	005b      	lsls	r3, r3, #1
 8016cd2:	4413      	add	r3, r2
 8016cd4:	00db      	lsls	r3, r3, #3
 8016cd6:	440b      	add	r3, r1
 8016cd8:	3314      	adds	r3, #20
 8016cda:	2203      	movs	r2, #3
 8016cdc:	701a      	strb	r2, [r3, #0]
 8016cde:	e02d      	b.n	8016d3c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016ce0:	79fa      	ldrb	r2, [r7, #7]
 8016ce2:	4923      	ldr	r1, [pc, #140]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	00db      	lsls	r3, r3, #3
 8016cec:	440b      	add	r3, r1
 8016cee:	3312      	adds	r3, #18
 8016cf0:	881b      	ldrh	r3, [r3, #0]
 8016cf2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016cf6:	d321      	bcc.n	8016d3c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016cf8:	79fa      	ldrb	r2, [r7, #7]
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	4413      	add	r3, r2
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	4a1b      	ldr	r2, [pc, #108]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016d04:	4413      	add	r3, r2
 8016d06:	1d19      	adds	r1, r3, #4
 8016d08:	79fa      	ldrb	r2, [r7, #7]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	005b      	lsls	r3, r3, #1
 8016d0e:	4413      	add	r3, r2
 8016d10:	00db      	lsls	r3, r3, #3
 8016d12:	3308      	adds	r3, #8
 8016d14:	4a16      	ldr	r2, [pc, #88]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016d16:	4413      	add	r3, r2
 8016d18:	3304      	adds	r3, #4
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f000 faf3 	bl	8017308 <etharp_request_dst>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d109      	bne.n	8016d3c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016d28:	79fa      	ldrb	r2, [r7, #7]
 8016d2a:	4911      	ldr	r1, [pc, #68]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	3314      	adds	r3, #20
 8016d38:	2203      	movs	r2, #3
 8016d3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8016d42:	79fa      	ldrb	r2, [r7, #7]
 8016d44:	4613      	mov	r3, r2
 8016d46:	005b      	lsls	r3, r3, #1
 8016d48:	4413      	add	r3, r2
 8016d4a:	00db      	lsls	r3, r3, #3
 8016d4c:	3308      	adds	r3, #8
 8016d4e:	4a08      	ldr	r2, [pc, #32]	; (8016d70 <etharp_output_to_arp_index+0x124>)
 8016d50:	4413      	add	r3, r2
 8016d52:	1d1a      	adds	r2, r3, #4
 8016d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d58:	9300      	str	r3, [sp, #0]
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	460a      	mov	r2, r1
 8016d5e:	68b9      	ldr	r1, [r7, #8]
 8016d60:	68f8      	ldr	r0, [r7, #12]
 8016d62:	f001 fdaf 	bl	80188c4 <ethernet_output>
 8016d66:	4603      	mov	r3, r0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3710      	adds	r7, #16
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	200040f4 	.word	0x200040f4
 8016d74:	0801be8c 	.word	0x0801be8c
 8016d78:	0801c020 	.word	0x0801c020
 8016d7c:	0801bf28 	.word	0x0801bf28

08016d80 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b08a      	sub	sp, #40	; 0x28
 8016d84:	af02      	add	r7, sp, #8
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d106      	bne.n	8016da4 <etharp_output+0x24>
 8016d96:	4b69      	ldr	r3, [pc, #420]	; (8016f3c <etharp_output+0x1bc>)
 8016d98:	f240 321b 	movw	r2, #795	; 0x31b
 8016d9c:	4968      	ldr	r1, [pc, #416]	; (8016f40 <etharp_output+0x1c0>)
 8016d9e:	4869      	ldr	r0, [pc, #420]	; (8016f44 <etharp_output+0x1c4>)
 8016da0:	f002 f816 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d106      	bne.n	8016db8 <etharp_output+0x38>
 8016daa:	4b64      	ldr	r3, [pc, #400]	; (8016f3c <etharp_output+0x1bc>)
 8016dac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016db0:	4965      	ldr	r1, [pc, #404]	; (8016f48 <etharp_output+0x1c8>)
 8016db2:	4864      	ldr	r0, [pc, #400]	; (8016f44 <etharp_output+0x1c4>)
 8016db4:	f002 f80c 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d106      	bne.n	8016dcc <etharp_output+0x4c>
 8016dbe:	4b5f      	ldr	r3, [pc, #380]	; (8016f3c <etharp_output+0x1bc>)
 8016dc0:	f240 321d 	movw	r2, #797	; 0x31d
 8016dc4:	4961      	ldr	r1, [pc, #388]	; (8016f4c <etharp_output+0x1cc>)
 8016dc6:	485f      	ldr	r0, [pc, #380]	; (8016f44 <etharp_output+0x1c4>)
 8016dc8:	f002 f802 	bl	8018dd0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	68f9      	ldr	r1, [r7, #12]
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f000 fed4 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d002      	beq.n	8016de4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016dde:	4b5c      	ldr	r3, [pc, #368]	; (8016f50 <etharp_output+0x1d0>)
 8016de0:	61fb      	str	r3, [r7, #28]
 8016de2:	e09b      	b.n	8016f1c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dec:	2be0      	cmp	r3, #224	; 0xe0
 8016dee:	d118      	bne.n	8016e22 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016df0:	2301      	movs	r3, #1
 8016df2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016df4:	2300      	movs	r3, #0
 8016df6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016df8:	235e      	movs	r3, #94	; 0x5e
 8016dfa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	3301      	adds	r3, #1
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	3302      	adds	r3, #2
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	3303      	adds	r3, #3
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016e1a:	f107 0310 	add.w	r3, r7, #16
 8016e1e:	61fb      	str	r3, [r7, #28]
 8016e20:	e07c      	b.n	8016f1c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681a      	ldr	r2, [r3, #0]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	3304      	adds	r3, #4
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	405a      	eors	r2, r3
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	3308      	adds	r3, #8
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4013      	ands	r3, r2
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d012      	beq.n	8016e60 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e40:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016e44:	4293      	cmp	r3, r2
 8016e46:	d00b      	beq.n	8016e60 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	330c      	adds	r3, #12
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d003      	beq.n	8016e5a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	330c      	adds	r3, #12
 8016e56:	61bb      	str	r3, [r7, #24]
 8016e58:	e002      	b.n	8016e60 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016e5a:	f06f 0303 	mvn.w	r3, #3
 8016e5e:	e069      	b.n	8016f34 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e60:	4b3c      	ldr	r3, [pc, #240]	; (8016f54 <etharp_output+0x1d4>)
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	4619      	mov	r1, r3
 8016e66:	4a3c      	ldr	r2, [pc, #240]	; (8016f58 <etharp_output+0x1d8>)
 8016e68:	460b      	mov	r3, r1
 8016e6a:	005b      	lsls	r3, r3, #1
 8016e6c:	440b      	add	r3, r1
 8016e6e:	00db      	lsls	r3, r3, #3
 8016e70:	4413      	add	r3, r2
 8016e72:	3314      	adds	r3, #20
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	2b01      	cmp	r3, #1
 8016e78:	d917      	bls.n	8016eaa <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	681a      	ldr	r2, [r3, #0]
 8016e7e:	4b35      	ldr	r3, [pc, #212]	; (8016f54 <etharp_output+0x1d4>)
 8016e80:	781b      	ldrb	r3, [r3, #0]
 8016e82:	4618      	mov	r0, r3
 8016e84:	4934      	ldr	r1, [pc, #208]	; (8016f58 <etharp_output+0x1d8>)
 8016e86:	4603      	mov	r3, r0
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	4403      	add	r3, r0
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	440b      	add	r3, r1
 8016e90:	3304      	adds	r3, #4
 8016e92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e94:	429a      	cmp	r2, r3
 8016e96:	d108      	bne.n	8016eaa <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016e98:	4b2e      	ldr	r3, [pc, #184]	; (8016f54 <etharp_output+0x1d4>)
 8016e9a:	781b      	ldrb	r3, [r3, #0]
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	68b9      	ldr	r1, [r7, #8]
 8016ea0:	68f8      	ldr	r0, [r7, #12]
 8016ea2:	f7ff fed3 	bl	8016c4c <etharp_output_to_arp_index>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	e044      	b.n	8016f34 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016eaa:	2300      	movs	r3, #0
 8016eac:	75fb      	strb	r3, [r7, #23]
 8016eae:	e02a      	b.n	8016f06 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016eb0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016eb4:	4928      	ldr	r1, [pc, #160]	; (8016f58 <etharp_output+0x1d8>)
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	440b      	add	r3, r1
 8016ec0:	3314      	adds	r3, #20
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d918      	bls.n	8016efa <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	6819      	ldr	r1, [r3, #0]
 8016ecc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016ed0:	4821      	ldr	r0, [pc, #132]	; (8016f58 <etharp_output+0x1d8>)
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	005b      	lsls	r3, r3, #1
 8016ed6:	4413      	add	r3, r2
 8016ed8:	00db      	lsls	r3, r3, #3
 8016eda:	4403      	add	r3, r0
 8016edc:	3304      	adds	r3, #4
 8016ede:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ee0:	4299      	cmp	r1, r3
 8016ee2:	d10a      	bne.n	8016efa <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8016ee4:	7dfa      	ldrb	r2, [r7, #23]
 8016ee6:	4b1b      	ldr	r3, [pc, #108]	; (8016f54 <etharp_output+0x1d4>)
 8016ee8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016eea:	7dfb      	ldrb	r3, [r7, #23]
 8016eec:	461a      	mov	r2, r3
 8016eee:	68b9      	ldr	r1, [r7, #8]
 8016ef0:	68f8      	ldr	r0, [r7, #12]
 8016ef2:	f7ff feab 	bl	8016c4c <etharp_output_to_arp_index>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	e01c      	b.n	8016f34 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	3301      	adds	r3, #1
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	75fb      	strb	r3, [r7, #23]
 8016f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016f0a:	2b09      	cmp	r3, #9
 8016f0c:	ddd0      	ble.n	8016eb0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016f0e:	68ba      	ldr	r2, [r7, #8]
 8016f10:	69b9      	ldr	r1, [r7, #24]
 8016f12:	68f8      	ldr	r0, [r7, #12]
 8016f14:	f000 f822 	bl	8016f5c <etharp_query>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	e00b      	b.n	8016f34 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8016f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f26:	9300      	str	r3, [sp, #0]
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	68b9      	ldr	r1, [r7, #8]
 8016f2c:	68f8      	ldr	r0, [r7, #12]
 8016f2e:	f001 fcc9 	bl	80188c4 <ethernet_output>
 8016f32:	4603      	mov	r3, r0
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	3720      	adds	r7, #32
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}
 8016f3c:	0801be8c 	.word	0x0801be8c
 8016f40:	0801c000 	.word	0x0801c000
 8016f44:	0801bf28 	.word	0x0801bf28
 8016f48:	0801c050 	.word	0x0801c050
 8016f4c:	0801bff0 	.word	0x0801bff0
 8016f50:	0801c6e0 	.word	0x0801c6e0
 8016f54:	200041e4 	.word	0x200041e4
 8016f58:	200040f4 	.word	0x200040f4

08016f5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b08c      	sub	sp, #48	; 0x30
 8016f60:	af02      	add	r7, sp, #8
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	3325      	adds	r3, #37	; 0x25
 8016f6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016f6e:	23ff      	movs	r3, #255	; 0xff
 8016f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016f74:	2300      	movs	r3, #0
 8016f76:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	68f9      	ldr	r1, [r7, #12]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f000 fdfe 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d10c      	bne.n	8016fa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f92:	2be0      	cmp	r3, #224	; 0xe0
 8016f94:	d006      	beq.n	8016fa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d003      	beq.n	8016fa4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d102      	bne.n	8016faa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016fa4:	f06f 030f 	mvn.w	r3, #15
 8016fa8:	e10f      	b.n	80171ca <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016faa:	68fa      	ldr	r2, [r7, #12]
 8016fac:	2101      	movs	r1, #1
 8016fae:	68b8      	ldr	r0, [r7, #8]
 8016fb0:	f7ff fba2 	bl	80166f8 <etharp_find_entry>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8016fb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	da02      	bge.n	8016fc6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8016fc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016fc4:	e101      	b.n	80171ca <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016fc6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016fca:	4982      	ldr	r1, [pc, #520]	; (80171d4 <etharp_query+0x278>)
 8016fcc:	4613      	mov	r3, r2
 8016fce:	005b      	lsls	r3, r3, #1
 8016fd0:	4413      	add	r3, r2
 8016fd2:	00db      	lsls	r3, r3, #3
 8016fd4:	440b      	add	r3, r1
 8016fd6:	3314      	adds	r3, #20
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d117      	bne.n	801700e <etharp_query+0xb2>
    is_new_entry = 1;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016fe2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016fe6:	497b      	ldr	r1, [pc, #492]	; (80171d4 <etharp_query+0x278>)
 8016fe8:	4613      	mov	r3, r2
 8016fea:	005b      	lsls	r3, r3, #1
 8016fec:	4413      	add	r3, r2
 8016fee:	00db      	lsls	r3, r3, #3
 8016ff0:	440b      	add	r3, r1
 8016ff2:	3314      	adds	r3, #20
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016ff8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016ffc:	4975      	ldr	r1, [pc, #468]	; (80171d4 <etharp_query+0x278>)
 8016ffe:	4613      	mov	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4413      	add	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	440b      	add	r3, r1
 8017008:	3308      	adds	r3, #8
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801700e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017012:	4970      	ldr	r1, [pc, #448]	; (80171d4 <etharp_query+0x278>)
 8017014:	4613      	mov	r3, r2
 8017016:	005b      	lsls	r3, r3, #1
 8017018:	4413      	add	r3, r2
 801701a:	00db      	lsls	r3, r3, #3
 801701c:	440b      	add	r3, r1
 801701e:	3314      	adds	r3, #20
 8017020:	781b      	ldrb	r3, [r3, #0]
 8017022:	2b01      	cmp	r3, #1
 8017024:	d012      	beq.n	801704c <etharp_query+0xf0>
 8017026:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801702a:	496a      	ldr	r1, [pc, #424]	; (80171d4 <etharp_query+0x278>)
 801702c:	4613      	mov	r3, r2
 801702e:	005b      	lsls	r3, r3, #1
 8017030:	4413      	add	r3, r2
 8017032:	00db      	lsls	r3, r3, #3
 8017034:	440b      	add	r3, r1
 8017036:	3314      	adds	r3, #20
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	2b01      	cmp	r3, #1
 801703c:	d806      	bhi.n	801704c <etharp_query+0xf0>
 801703e:	4b66      	ldr	r3, [pc, #408]	; (80171d8 <etharp_query+0x27c>)
 8017040:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017044:	4965      	ldr	r1, [pc, #404]	; (80171dc <etharp_query+0x280>)
 8017046:	4866      	ldr	r0, [pc, #408]	; (80171e0 <etharp_query+0x284>)
 8017048:	f001 fec2 	bl	8018dd0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801704c:	6a3b      	ldr	r3, [r7, #32]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d102      	bne.n	8017058 <etharp_query+0xfc>
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d10c      	bne.n	8017072 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017058:	68b9      	ldr	r1, [r7, #8]
 801705a:	68f8      	ldr	r0, [r7, #12]
 801705c:	f000 f976 	bl	801734c <etharp_request>
 8017060:	4603      	mov	r3, r0
 8017062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d102      	bne.n	8017072 <etharp_query+0x116>
      return result;
 801706c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017070:	e0ab      	b.n	80171ca <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d106      	bne.n	8017086 <etharp_query+0x12a>
 8017078:	4b57      	ldr	r3, [pc, #348]	; (80171d8 <etharp_query+0x27c>)
 801707a:	f240 32db 	movw	r2, #987	; 0x3db
 801707e:	4959      	ldr	r1, [pc, #356]	; (80171e4 <etharp_query+0x288>)
 8017080:	4857      	ldr	r0, [pc, #348]	; (80171e0 <etharp_query+0x284>)
 8017082:	f001 fea5 	bl	8018dd0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017086:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801708a:	4952      	ldr	r1, [pc, #328]	; (80171d4 <etharp_query+0x278>)
 801708c:	4613      	mov	r3, r2
 801708e:	005b      	lsls	r3, r3, #1
 8017090:	4413      	add	r3, r2
 8017092:	00db      	lsls	r3, r3, #3
 8017094:	440b      	add	r3, r1
 8017096:	3314      	adds	r3, #20
 8017098:	781b      	ldrb	r3, [r3, #0]
 801709a:	2b01      	cmp	r3, #1
 801709c:	d919      	bls.n	80170d2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801709e:	7cfa      	ldrb	r2, [r7, #19]
 80170a0:	4b51      	ldr	r3, [pc, #324]	; (80171e8 <etharp_query+0x28c>)
 80170a2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80170a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80170a8:	4613      	mov	r3, r2
 80170aa:	005b      	lsls	r3, r3, #1
 80170ac:	4413      	add	r3, r2
 80170ae:	00db      	lsls	r3, r3, #3
 80170b0:	3308      	adds	r3, #8
 80170b2:	4a48      	ldr	r2, [pc, #288]	; (80171d4 <etharp_query+0x278>)
 80170b4:	4413      	add	r3, r2
 80170b6:	1d1a      	adds	r2, r3, #4
 80170b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	4613      	mov	r3, r2
 80170c0:	697a      	ldr	r2, [r7, #20]
 80170c2:	6879      	ldr	r1, [r7, #4]
 80170c4:	68f8      	ldr	r0, [r7, #12]
 80170c6:	f001 fbfd 	bl	80188c4 <ethernet_output>
 80170ca:	4603      	mov	r3, r0
 80170cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170d0:	e079      	b.n	80171c6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80170d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80170d6:	493f      	ldr	r1, [pc, #252]	; (80171d4 <etharp_query+0x278>)
 80170d8:	4613      	mov	r3, r2
 80170da:	005b      	lsls	r3, r3, #1
 80170dc:	4413      	add	r3, r2
 80170de:	00db      	lsls	r3, r3, #3
 80170e0:	440b      	add	r3, r1
 80170e2:	3314      	adds	r3, #20
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d16d      	bne.n	80171c6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80170ea:	2300      	movs	r3, #0
 80170ec:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80170f2:	e01a      	b.n	801712a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	895a      	ldrh	r2, [r3, #10]
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	891b      	ldrh	r3, [r3, #8]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d10a      	bne.n	8017116 <etharp_query+0x1ba>
 8017100:	69fb      	ldr	r3, [r7, #28]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d006      	beq.n	8017116 <etharp_query+0x1ba>
 8017108:	4b33      	ldr	r3, [pc, #204]	; (80171d8 <etharp_query+0x27c>)
 801710a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801710e:	4937      	ldr	r1, [pc, #220]	; (80171ec <etharp_query+0x290>)
 8017110:	4833      	ldr	r0, [pc, #204]	; (80171e0 <etharp_query+0x284>)
 8017112:	f001 fe5d 	bl	8018dd0 <iprintf>
      if (p->type != PBUF_ROM) {
 8017116:	69fb      	ldr	r3, [r7, #28]
 8017118:	7b1b      	ldrb	r3, [r3, #12]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d002      	beq.n	8017124 <etharp_query+0x1c8>
        copy_needed = 1;
 801711e:	2301      	movs	r3, #1
 8017120:	61bb      	str	r3, [r7, #24]
        break;
 8017122:	e005      	b.n	8017130 <etharp_query+0x1d4>
      }
      p = p->next;
 8017124:	69fb      	ldr	r3, [r7, #28]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	61fb      	str	r3, [r7, #28]
    while (p) {
 801712a:	69fb      	ldr	r3, [r7, #28]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d1e1      	bne.n	80170f4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8017130:	69bb      	ldr	r3, [r7, #24]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d017      	beq.n	8017166 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	891b      	ldrh	r3, [r3, #8]
 801713a:	2200      	movs	r2, #0
 801713c:	4619      	mov	r1, r3
 801713e:	2002      	movs	r0, #2
 8017140:	f7f8 fdf8 	bl	800fd34 <pbuf_alloc>
 8017144:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8017146:	69fb      	ldr	r3, [r7, #28]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d011      	beq.n	8017170 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801714c:	6879      	ldr	r1, [r7, #4]
 801714e:	69f8      	ldr	r0, [r7, #28]
 8017150:	f7f9 fa92 	bl	8010678 <pbuf_copy>
 8017154:	4603      	mov	r3, r0
 8017156:	2b00      	cmp	r3, #0
 8017158:	d00a      	beq.n	8017170 <etharp_query+0x214>
          pbuf_free(p);
 801715a:	69f8      	ldr	r0, [r7, #28]
 801715c:	f7f9 f95c 	bl	8010418 <pbuf_free>
          p = NULL;
 8017160:	2300      	movs	r3, #0
 8017162:	61fb      	str	r3, [r7, #28]
 8017164:	e004      	b.n	8017170 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801716a:	69f8      	ldr	r0, [r7, #28]
 801716c:	f7f9 fa06 	bl	801057c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d024      	beq.n	80171c0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017176:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801717a:	4916      	ldr	r1, [pc, #88]	; (80171d4 <etharp_query+0x278>)
 801717c:	4613      	mov	r3, r2
 801717e:	005b      	lsls	r3, r3, #1
 8017180:	4413      	add	r3, r2
 8017182:	00db      	lsls	r3, r3, #3
 8017184:	440b      	add	r3, r1
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d00b      	beq.n	80171a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801718c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017190:	4910      	ldr	r1, [pc, #64]	; (80171d4 <etharp_query+0x278>)
 8017192:	4613      	mov	r3, r2
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	4413      	add	r3, r2
 8017198:	00db      	lsls	r3, r3, #3
 801719a:	440b      	add	r3, r1
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	4618      	mov	r0, r3
 80171a0:	f7f9 f93a 	bl	8010418 <pbuf_free>
      }
      arp_table[i].q = p;
 80171a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80171a8:	490a      	ldr	r1, [pc, #40]	; (80171d4 <etharp_query+0x278>)
 80171aa:	4613      	mov	r3, r2
 80171ac:	005b      	lsls	r3, r3, #1
 80171ae:	4413      	add	r3, r2
 80171b0:	00db      	lsls	r3, r3, #3
 80171b2:	440b      	add	r3, r1
 80171b4:	69fa      	ldr	r2, [r7, #28]
 80171b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80171b8:	2300      	movs	r3, #0
 80171ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171be:	e002      	b.n	80171c6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80171c0:	23ff      	movs	r3, #255	; 0xff
 80171c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80171c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3728      	adds	r7, #40	; 0x28
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	200040f4 	.word	0x200040f4
 80171d8:	0801be8c 	.word	0x0801be8c
 80171dc:	0801c05c 	.word	0x0801c05c
 80171e0:	0801bf28 	.word	0x0801bf28
 80171e4:	0801c050 	.word	0x0801c050
 80171e8:	200041e4 	.word	0x200041e4
 80171ec:	0801c084 	.word	0x0801c084

080171f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b08a      	sub	sp, #40	; 0x28
 80171f4:	af02      	add	r7, sp, #8
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	60b9      	str	r1, [r7, #8]
 80171fa:	607a      	str	r2, [r7, #4]
 80171fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80171fe:	2300      	movs	r3, #0
 8017200:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d106      	bne.n	8017216 <etharp_raw+0x26>
 8017208:	4b3a      	ldr	r3, [pc, #232]	; (80172f4 <etharp_raw+0x104>)
 801720a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801720e:	493a      	ldr	r1, [pc, #232]	; (80172f8 <etharp_raw+0x108>)
 8017210:	483a      	ldr	r0, [pc, #232]	; (80172fc <etharp_raw+0x10c>)
 8017212:	f001 fddd 	bl	8018dd0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017216:	2200      	movs	r2, #0
 8017218:	211c      	movs	r1, #28
 801721a:	2002      	movs	r0, #2
 801721c:	f7f8 fd8a 	bl	800fd34 <pbuf_alloc>
 8017220:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017222:	69bb      	ldr	r3, [r7, #24]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d102      	bne.n	801722e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017228:	f04f 33ff 	mov.w	r3, #4294967295
 801722c:	e05d      	b.n	80172ea <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	895b      	ldrh	r3, [r3, #10]
 8017232:	2b1b      	cmp	r3, #27
 8017234:	d806      	bhi.n	8017244 <etharp_raw+0x54>
 8017236:	4b2f      	ldr	r3, [pc, #188]	; (80172f4 <etharp_raw+0x104>)
 8017238:	f240 4264 	movw	r2, #1124	; 0x464
 801723c:	4930      	ldr	r1, [pc, #192]	; (8017300 <etharp_raw+0x110>)
 801723e:	482f      	ldr	r0, [pc, #188]	; (80172fc <etharp_raw+0x10c>)
 8017240:	f001 fdc6 	bl	8018dd0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801724a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801724c:	4618      	mov	r0, r3
 801724e:	f7f7 fec9 	bl	800efe4 <lwip_htons>
 8017252:	4603      	mov	r3, r0
 8017254:	461a      	mov	r2, r3
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017260:	2b06      	cmp	r3, #6
 8017262:	d006      	beq.n	8017272 <etharp_raw+0x82>
 8017264:	4b23      	ldr	r3, [pc, #140]	; (80172f4 <etharp_raw+0x104>)
 8017266:	f240 426b 	movw	r2, #1131	; 0x46b
 801726a:	4926      	ldr	r1, [pc, #152]	; (8017304 <etharp_raw+0x114>)
 801726c:	4823      	ldr	r0, [pc, #140]	; (80172fc <etharp_raw+0x10c>)
 801726e:	f001 fdaf 	bl	8018dd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	3308      	adds	r3, #8
 8017276:	2206      	movs	r2, #6
 8017278:	6839      	ldr	r1, [r7, #0]
 801727a:	4618      	mov	r0, r3
 801727c:	f001 fd95 	bl	8018daa <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	3312      	adds	r3, #18
 8017284:	2206      	movs	r2, #6
 8017286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017288:	4618      	mov	r0, r3
 801728a:	f001 fd8e 	bl	8018daa <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	330e      	adds	r3, #14
 8017292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017294:	6812      	ldr	r2, [r2, #0]
 8017296:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	3318      	adds	r3, #24
 801729c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801729e:	6812      	ldr	r2, [r2, #0]
 80172a0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80172a2:	697b      	ldr	r3, [r7, #20]
 80172a4:	2200      	movs	r2, #0
 80172a6:	701a      	strb	r2, [r3, #0]
 80172a8:	2200      	movs	r2, #0
 80172aa:	f042 0201 	orr.w	r2, r2, #1
 80172ae:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	2200      	movs	r2, #0
 80172b4:	f042 0208 	orr.w	r2, r2, #8
 80172b8:	709a      	strb	r2, [r3, #2]
 80172ba:	2200      	movs	r2, #0
 80172bc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80172be:	697b      	ldr	r3, [r7, #20]
 80172c0:	2206      	movs	r2, #6
 80172c2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80172c4:	697b      	ldr	r3, [r7, #20]
 80172c6:	2204      	movs	r2, #4
 80172c8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80172ca:	f640 0306 	movw	r3, #2054	; 0x806
 80172ce:	9300      	str	r3, [sp, #0]
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	68ba      	ldr	r2, [r7, #8]
 80172d4:	69b9      	ldr	r1, [r7, #24]
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f001 faf4 	bl	80188c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80172dc:	69b8      	ldr	r0, [r7, #24]
 80172de:	f7f9 f89b 	bl	8010418 <pbuf_free>
  p = NULL;
 80172e2:	2300      	movs	r3, #0
 80172e4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80172e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	3720      	adds	r7, #32
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd80      	pop	{r7, pc}
 80172f2:	bf00      	nop
 80172f4:	0801be8c 	.word	0x0801be8c
 80172f8:	0801c000 	.word	0x0801c000
 80172fc:	0801bf28 	.word	0x0801bf28
 8017300:	0801c0a0 	.word	0x0801c0a0
 8017304:	0801c0d4 	.word	0x0801c0d4

08017308 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b088      	sub	sp, #32
 801730c:	af04      	add	r7, sp, #16
 801730e:	60f8      	str	r0, [r7, #12]
 8017310:	60b9      	str	r1, [r7, #8]
 8017312:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017324:	2201      	movs	r2, #1
 8017326:	9203      	str	r2, [sp, #12]
 8017328:	68ba      	ldr	r2, [r7, #8]
 801732a:	9202      	str	r2, [sp, #8]
 801732c:	4a06      	ldr	r2, [pc, #24]	; (8017348 <etharp_request_dst+0x40>)
 801732e:	9201      	str	r2, [sp, #4]
 8017330:	9300      	str	r3, [sp, #0]
 8017332:	4603      	mov	r3, r0
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	68f8      	ldr	r0, [r7, #12]
 8017338:	f7ff ff5a 	bl	80171f0 <etharp_raw>
 801733c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801733e:	4618      	mov	r0, r3
 8017340:	3710      	adds	r7, #16
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	0801c6e8 	.word	0x0801c6e8

0801734c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017356:	4a05      	ldr	r2, [pc, #20]	; (801736c <etharp_request+0x20>)
 8017358:	6839      	ldr	r1, [r7, #0]
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7ff ffd4 	bl	8017308 <etharp_request_dst>
 8017360:	4603      	mov	r3, r0
}
 8017362:	4618      	mov	r0, r3
 8017364:	3708      	adds	r7, #8
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}
 801736a:	bf00      	nop
 801736c:	0801c6e0 	.word	0x0801c6e0

08017370 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b08e      	sub	sp, #56	; 0x38
 8017374:	af04      	add	r7, sp, #16
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801737a:	4b7a      	ldr	r3, [pc, #488]	; (8017564 <icmp_input+0x1f4>)
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8017380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	b29b      	uxth	r3, r3
 8017386:	f003 030f 	and.w	r3, r3, #15
 801738a:	b29b      	uxth	r3, r3
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017392:	2b13      	cmp	r3, #19
 8017394:	f240 80d1 	bls.w	801753a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	895b      	ldrh	r3, [r3, #10]
 801739c:	2b03      	cmp	r3, #3
 801739e:	f240 80ce 	bls.w	801753e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	781b      	ldrb	r3, [r3, #0]
 80173a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80173ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	f000 80bb 	beq.w	801752c <icmp_input+0x1bc>
 80173b6:	2b08      	cmp	r3, #8
 80173b8:	f040 80bb 	bne.w	8017532 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80173bc:	4b6a      	ldr	r3, [pc, #424]	; (8017568 <icmp_input+0x1f8>)
 80173be:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173c0:	4b68      	ldr	r3, [pc, #416]	; (8017564 <icmp_input+0x1f4>)
 80173c2:	695b      	ldr	r3, [r3, #20]
 80173c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173c8:	2be0      	cmp	r3, #224	; 0xe0
 80173ca:	f000 80bf 	beq.w	801754c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80173ce:	4b65      	ldr	r3, [pc, #404]	; (8017564 <icmp_input+0x1f4>)
 80173d0:	695a      	ldr	r2, [r3, #20]
 80173d2:	4b64      	ldr	r3, [pc, #400]	; (8017564 <icmp_input+0x1f4>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	4619      	mov	r1, r3
 80173d8:	4610      	mov	r0, r2
 80173da:	f000 fbd1 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	f040 80b5 	bne.w	8017550 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	891b      	ldrh	r3, [r3, #8]
 80173ea:	2b07      	cmp	r3, #7
 80173ec:	f240 80a9 	bls.w	8017542 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80173f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173f2:	330e      	adds	r3, #14
 80173f4:	b29b      	uxth	r3, r3
 80173f6:	b21b      	sxth	r3, r3
 80173f8:	4619      	mov	r1, r3
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f7f8 ffe8 	bl	80103d0 <pbuf_header>
 8017400:	4603      	mov	r3, r0
 8017402:	2b00      	cmp	r3, #0
 8017404:	d046      	beq.n	8017494 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	891a      	ldrh	r2, [r3, #8]
 801740a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801740c:	4413      	add	r3, r2
 801740e:	b29b      	uxth	r3, r3
 8017410:	2200      	movs	r2, #0
 8017412:	4619      	mov	r1, r3
 8017414:	2002      	movs	r0, #2
 8017416:	f7f8 fc8d 	bl	800fd34 <pbuf_alloc>
 801741a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	2b00      	cmp	r3, #0
 8017420:	f000 8098 	beq.w	8017554 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017424:	69bb      	ldr	r3, [r7, #24]
 8017426:	895b      	ldrh	r3, [r3, #10]
 8017428:	461a      	mov	r2, r3
 801742a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801742c:	3308      	adds	r3, #8
 801742e:	429a      	cmp	r2, r3
 8017430:	d203      	bcs.n	801743a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8017432:	69b8      	ldr	r0, [r7, #24]
 8017434:	f7f8 fff0 	bl	8010418 <pbuf_free>
        goto icmperr;
 8017438:	e08d      	b.n	8017556 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801743a:	69bb      	ldr	r3, [r7, #24]
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017442:	4618      	mov	r0, r3
 8017444:	f001 fcb1 	bl	8018daa <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8017448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801744a:	425b      	negs	r3, r3
 801744c:	b29b      	uxth	r3, r3
 801744e:	b21b      	sxth	r3, r3
 8017450:	4619      	mov	r1, r3
 8017452:	69b8      	ldr	r0, [r7, #24]
 8017454:	f7f8 ffbc 	bl	80103d0 <pbuf_header>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	d009      	beq.n	8017472 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801745e:	4b43      	ldr	r3, [pc, #268]	; (801756c <icmp_input+0x1fc>)
 8017460:	22af      	movs	r2, #175	; 0xaf
 8017462:	4943      	ldr	r1, [pc, #268]	; (8017570 <icmp_input+0x200>)
 8017464:	4843      	ldr	r0, [pc, #268]	; (8017574 <icmp_input+0x204>)
 8017466:	f001 fcb3 	bl	8018dd0 <iprintf>
        pbuf_free(r);
 801746a:	69b8      	ldr	r0, [r7, #24]
 801746c:	f7f8 ffd4 	bl	8010418 <pbuf_free>
        goto icmperr;
 8017470:	e071      	b.n	8017556 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8017472:	6879      	ldr	r1, [r7, #4]
 8017474:	69b8      	ldr	r0, [r7, #24]
 8017476:	f7f9 f8ff 	bl	8010678 <pbuf_copy>
 801747a:	4603      	mov	r3, r0
 801747c:	2b00      	cmp	r3, #0
 801747e:	d003      	beq.n	8017488 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8017480:	69b8      	ldr	r0, [r7, #24]
 8017482:	f7f8 ffc9 	bl	8010418 <pbuf_free>
        goto icmperr;
 8017486:	e066      	b.n	8017556 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f7f8 ffc5 	bl	8010418 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801748e:	69bb      	ldr	r3, [r7, #24]
 8017490:	607b      	str	r3, [r7, #4]
 8017492:	e015      	b.n	80174c0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017494:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017496:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801749a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801749e:	33f2      	adds	r3, #242	; 0xf2
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	b21b      	sxth	r3, r3
 80174a4:	4619      	mov	r1, r3
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7f8 ff92 	bl	80103d0 <pbuf_header>
 80174ac:	4603      	mov	r3, r0
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d006      	beq.n	80174c0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80174b2:	4b2e      	ldr	r3, [pc, #184]	; (801756c <icmp_input+0x1fc>)
 80174b4:	22c0      	movs	r2, #192	; 0xc0
 80174b6:	4930      	ldr	r1, [pc, #192]	; (8017578 <icmp_input+0x208>)
 80174b8:	482e      	ldr	r0, [pc, #184]	; (8017574 <icmp_input+0x204>)
 80174ba:	f001 fc89 	bl	8018dd0 <iprintf>
        goto icmperr;
 80174be:	e04a      	b.n	8017556 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	685b      	ldr	r3, [r3, #4]
 80174c4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80174c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80174ca:	4619      	mov	r1, r3
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7f8 ff7f 	bl	80103d0 <pbuf_header>
 80174d2:	4603      	mov	r3, r0
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d12b      	bne.n	8017530 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	681a      	ldr	r2, [r3, #0]
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80174e6:	4b1f      	ldr	r3, [pc, #124]	; (8017564 <icmp_input+0x1f4>)
 80174e8:	691a      	ldr	r2, [r3, #16]
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	2200      	movs	r2, #0
 80174f2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80174f4:	697b      	ldr	r3, [r7, #20]
 80174f6:	2200      	movs	r2, #0
 80174f8:	709a      	strb	r2, [r3, #2]
 80174fa:	2200      	movs	r2, #0
 80174fc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	22ff      	movs	r2, #255	; 0xff
 8017502:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	2200      	movs	r2, #0
 8017508:	729a      	strb	r2, [r3, #10]
 801750a:	2200      	movs	r2, #0
 801750c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	9302      	str	r3, [sp, #8]
 8017512:	2301      	movs	r3, #1
 8017514:	9301      	str	r3, [sp, #4]
 8017516:	2300      	movs	r3, #0
 8017518:	9300      	str	r3, [sp, #0]
 801751a:	23ff      	movs	r3, #255	; 0xff
 801751c:	2200      	movs	r2, #0
 801751e:	69f9      	ldr	r1, [r7, #28]
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f000 fa5b 	bl	80179dc <ip4_output_if>
 8017526:	4603      	mov	r3, r0
 8017528:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801752a:	e001      	b.n	8017530 <icmp_input+0x1c0>
    break;
 801752c:	bf00      	nop
 801752e:	e000      	b.n	8017532 <icmp_input+0x1c2>
    break;
 8017530:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f7f8 ff70 	bl	8010418 <pbuf_free>
  return;
 8017538:	e011      	b.n	801755e <icmp_input+0x1ee>
    goto lenerr;
 801753a:	bf00      	nop
 801753c:	e002      	b.n	8017544 <icmp_input+0x1d4>
    goto lenerr;
 801753e:	bf00      	nop
 8017540:	e000      	b.n	8017544 <icmp_input+0x1d4>
      goto lenerr;
 8017542:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f7f8 ff67 	bl	8010418 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801754a:	e008      	b.n	801755e <icmp_input+0x1ee>
      goto icmperr;
 801754c:	bf00      	nop
 801754e:	e002      	b.n	8017556 <icmp_input+0x1e6>
      goto icmperr;
 8017550:	bf00      	nop
 8017552:	e000      	b.n	8017556 <icmp_input+0x1e6>
        goto icmperr;
 8017554:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f7f8 ff5e 	bl	8010418 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801755c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801755e:	3728      	adds	r7, #40	; 0x28
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}
 8017564:	200048f4 	.word	0x200048f4
 8017568:	20004908 	.word	0x20004908
 801756c:	0801c118 	.word	0x0801c118
 8017570:	0801c170 	.word	0x0801c170
 8017574:	0801c1a8 	.word	0x0801c1a8
 8017578:	0801c1d0 	.word	0x0801c1d0

0801757c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
 8017584:	460b      	mov	r3, r1
 8017586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017588:	78fb      	ldrb	r3, [r7, #3]
 801758a:	461a      	mov	r2, r3
 801758c:	2103      	movs	r1, #3
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f000 f814 	bl	80175bc <icmp_send_response>
}
 8017594:	bf00      	nop
 8017596:	3708      	adds	r7, #8
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b082      	sub	sp, #8
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	460b      	mov	r3, r1
 80175a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80175a8:	78fb      	ldrb	r3, [r7, #3]
 80175aa:	461a      	mov	r2, r3
 80175ac:	210b      	movs	r1, #11
 80175ae:	6878      	ldr	r0, [r7, #4]
 80175b0:	f000 f804 	bl	80175bc <icmp_send_response>
}
 80175b4:	bf00      	nop
 80175b6:	3708      	adds	r7, #8
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b08c      	sub	sp, #48	; 0x30
 80175c0:	af04      	add	r7, sp, #16
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	460b      	mov	r3, r1
 80175c6:	70fb      	strb	r3, [r7, #3]
 80175c8:	4613      	mov	r3, r2
 80175ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80175cc:	2200      	movs	r2, #0
 80175ce:	2124      	movs	r1, #36	; 0x24
 80175d0:	2001      	movs	r0, #1
 80175d2:	f7f8 fbaf 	bl	800fd34 <pbuf_alloc>
 80175d6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80175d8:	69fb      	ldr	r3, [r7, #28]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d04c      	beq.n	8017678 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	895b      	ldrh	r3, [r3, #10]
 80175e2:	2b23      	cmp	r3, #35	; 0x23
 80175e4:	d806      	bhi.n	80175f4 <icmp_send_response+0x38>
 80175e6:	4b26      	ldr	r3, [pc, #152]	; (8017680 <icmp_send_response+0xc4>)
 80175e8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80175ec:	4925      	ldr	r1, [pc, #148]	; (8017684 <icmp_send_response+0xc8>)
 80175ee:	4826      	ldr	r0, [pc, #152]	; (8017688 <icmp_send_response+0xcc>)
 80175f0:	f001 fbee 	bl	8018dd0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	685b      	ldr	r3, [r3, #4]
 80175f8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80175fa:	69fb      	ldr	r3, [r7, #28]
 80175fc:	685b      	ldr	r3, [r3, #4]
 80175fe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	78fa      	ldrb	r2, [r7, #3]
 8017604:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	78ba      	ldrb	r2, [r7, #2]
 801760a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	2200      	movs	r2, #0
 8017610:	711a      	strb	r2, [r3, #4]
 8017612:	2200      	movs	r2, #0
 8017614:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	2200      	movs	r2, #0
 801761a:	719a      	strb	r2, [r3, #6]
 801761c:	2200      	movs	r2, #0
 801761e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017620:	69fb      	ldr	r3, [r7, #28]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	f103 0008 	add.w	r0, r3, #8
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	221c      	movs	r2, #28
 801762e:	4619      	mov	r1, r3
 8017630:	f001 fbbb 	bl	8018daa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017634:	69bb      	ldr	r3, [r7, #24]
 8017636:	68db      	ldr	r3, [r3, #12]
 8017638:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801763a:	f107 030c 	add.w	r3, r7, #12
 801763e:	4618      	mov	r0, r3
 8017640:	f000 f824 	bl	801768c <ip4_route>
 8017644:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d011      	beq.n	8017670 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	2200      	movs	r2, #0
 8017650:	709a      	strb	r2, [r3, #2]
 8017652:	2200      	movs	r2, #0
 8017654:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017656:	f107 020c 	add.w	r2, r7, #12
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	9302      	str	r3, [sp, #8]
 801765e:	2301      	movs	r3, #1
 8017660:	9301      	str	r3, [sp, #4]
 8017662:	2300      	movs	r3, #0
 8017664:	9300      	str	r3, [sp, #0]
 8017666:	23ff      	movs	r3, #255	; 0xff
 8017668:	2100      	movs	r1, #0
 801766a:	69f8      	ldr	r0, [r7, #28]
 801766c:	f000 f9b6 	bl	80179dc <ip4_output_if>
  }
  pbuf_free(q);
 8017670:	69f8      	ldr	r0, [r7, #28]
 8017672:	f7f8 fed1 	bl	8010418 <pbuf_free>
 8017676:	e000      	b.n	801767a <icmp_send_response+0xbe>
    return;
 8017678:	bf00      	nop
}
 801767a:	3720      	adds	r7, #32
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}
 8017680:	0801c118 	.word	0x0801c118
 8017684:	0801c204 	.word	0x0801c204
 8017688:	0801c1a8 	.word	0x0801c1a8

0801768c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801768c:	b480      	push	{r7}
 801768e:	b085      	sub	sp, #20
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017694:	4b30      	ldr	r3, [pc, #192]	; (8017758 <ip4_route+0xcc>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	60fb      	str	r3, [r7, #12]
 801769a:	e036      	b.n	801770a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80176a2:	f003 0301 	and.w	r3, r3, #1
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d02b      	beq.n	8017704 <ip4_route+0x78>
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80176b2:	089b      	lsrs	r3, r3, #2
 80176b4:	f003 0301 	and.w	r3, r3, #1
 80176b8:	b2db      	uxtb	r3, r3
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d022      	beq.n	8017704 <ip4_route+0x78>
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	3304      	adds	r3, #4
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d01d      	beq.n	8017704 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	3304      	adds	r3, #4
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	405a      	eors	r2, r3
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	3308      	adds	r3, #8
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	4013      	ands	r3, r2
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d101      	bne.n	80176e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	e033      	b.n	801774c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80176ea:	f003 0302 	and.w	r3, r3, #2
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d108      	bne.n	8017704 <ip4_route+0x78>
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	330c      	adds	r3, #12
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d101      	bne.n	8017704 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	e023      	b.n	801774c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	60fb      	str	r3, [r7, #12]
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d1c5      	bne.n	801769c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017710:	4b12      	ldr	r3, [pc, #72]	; (801775c <ip4_route+0xd0>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d015      	beq.n	8017744 <ip4_route+0xb8>
 8017718:	4b10      	ldr	r3, [pc, #64]	; (801775c <ip4_route+0xd0>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017720:	f003 0301 	and.w	r3, r3, #1
 8017724:	2b00      	cmp	r3, #0
 8017726:	d00d      	beq.n	8017744 <ip4_route+0xb8>
 8017728:	4b0c      	ldr	r3, [pc, #48]	; (801775c <ip4_route+0xd0>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017730:	f003 0304 	and.w	r3, r3, #4
 8017734:	2b00      	cmp	r3, #0
 8017736:	d005      	beq.n	8017744 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017738:	4b08      	ldr	r3, [pc, #32]	; (801775c <ip4_route+0xd0>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	3304      	adds	r3, #4
 801773e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017740:	2b00      	cmp	r3, #0
 8017742:	d101      	bne.n	8017748 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017744:	2300      	movs	r3, #0
 8017746:	e001      	b.n	801774c <ip4_route+0xc0>
  }

  return netif_default;
 8017748:	4b04      	ldr	r3, [pc, #16]	; (801775c <ip4_route+0xd0>)
 801774a:	681b      	ldr	r3, [r3, #0]
}
 801774c:	4618      	mov	r0, r3
 801774e:	3714      	adds	r7, #20
 8017750:	46bd      	mov	sp, r7
 8017752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017756:	4770      	bx	lr
 8017758:	200079a0 	.word	0x200079a0
 801775c:	200079a4 	.word	0x200079a4

08017760 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b086      	sub	sp, #24
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	685b      	ldr	r3, [r3, #4]
 801776e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	091b      	lsrs	r3, r3, #4
 8017776:	b2db      	uxtb	r3, r3
 8017778:	2b04      	cmp	r3, #4
 801777a:	d004      	beq.n	8017786 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	f7f8 fe4b 	bl	8010418 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017782:	2300      	movs	r3, #0
 8017784:	e122      	b.n	80179cc <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	b29b      	uxth	r3, r3
 801778c:	f003 030f 	and.w	r3, r3, #15
 8017790:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8017792:	897b      	ldrh	r3, [r7, #10]
 8017794:	009b      	lsls	r3, r3, #2
 8017796:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	885b      	ldrh	r3, [r3, #2]
 801779c:	b29b      	uxth	r3, r3
 801779e:	4618      	mov	r0, r3
 80177a0:	f7f7 fc20 	bl	800efe4 <lwip_htons>
 80177a4:	4603      	mov	r3, r0
 80177a6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	891b      	ldrh	r3, [r3, #8]
 80177ac:	893a      	ldrh	r2, [r7, #8]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d204      	bcs.n	80177bc <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 80177b2:	893b      	ldrh	r3, [r7, #8]
 80177b4:	4619      	mov	r1, r3
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f7f8 fcba 	bl	8010130 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	895b      	ldrh	r3, [r3, #10]
 80177c0:	897a      	ldrh	r2, [r7, #10]
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d807      	bhi.n	80177d6 <ip4_input+0x76>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	891b      	ldrh	r3, [r3, #8]
 80177ca:	893a      	ldrh	r2, [r7, #8]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d802      	bhi.n	80177d6 <ip4_input+0x76>
 80177d0:	897b      	ldrh	r3, [r7, #10]
 80177d2:	2b13      	cmp	r3, #19
 80177d4:	d804      	bhi.n	80177e0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f7f8 fe1e 	bl	8010418 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80177dc:	2300      	movs	r3, #0
 80177de:	e0f5      	b.n	80179cc <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	691b      	ldr	r3, [r3, #16]
 80177e4:	4a7b      	ldr	r2, [pc, #492]	; (80179d4 <ip4_input+0x274>)
 80177e6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	68db      	ldr	r3, [r3, #12]
 80177ec:	4a79      	ldr	r2, [pc, #484]	; (80179d4 <ip4_input+0x274>)
 80177ee:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177f0:	4b78      	ldr	r3, [pc, #480]	; (80179d4 <ip4_input+0x274>)
 80177f2:	695b      	ldr	r3, [r3, #20]
 80177f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177f8:	2be0      	cmp	r3, #224	; 0xe0
 80177fa:	d112      	bne.n	8017822 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017802:	f003 0301 	and.w	r3, r3, #1
 8017806:	b2db      	uxtb	r3, r3
 8017808:	2b00      	cmp	r3, #0
 801780a:	d007      	beq.n	801781c <ip4_input+0xbc>
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	3304      	adds	r3, #4
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d002      	beq.n	801781c <ip4_input+0xbc>
      netif = inp;
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	613b      	str	r3, [r7, #16]
 801781a:	e041      	b.n	80178a0 <ip4_input+0x140>
    } else {
      netif = NULL;
 801781c:	2300      	movs	r3, #0
 801781e:	613b      	str	r3, [r7, #16]
 8017820:	e03e      	b.n	80178a0 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017822:	2301      	movs	r3, #1
 8017824:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8017826:	683b      	ldr	r3, [r7, #0]
 8017828:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017830:	f003 0301 	and.w	r3, r3, #1
 8017834:	b2db      	uxtb	r3, r3
 8017836:	2b00      	cmp	r3, #0
 8017838:	d014      	beq.n	8017864 <ip4_input+0x104>
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	3304      	adds	r3, #4
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d00f      	beq.n	8017864 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017844:	4b63      	ldr	r3, [pc, #396]	; (80179d4 <ip4_input+0x274>)
 8017846:	695a      	ldr	r2, [r3, #20]
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	3304      	adds	r3, #4
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	429a      	cmp	r2, r3
 8017850:	d026      	beq.n	80178a0 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017852:	4b60      	ldr	r3, [pc, #384]	; (80179d4 <ip4_input+0x274>)
 8017854:	695b      	ldr	r3, [r3, #20]
 8017856:	6939      	ldr	r1, [r7, #16]
 8017858:	4618      	mov	r0, r3
 801785a:	f000 f991 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 801785e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017860:	2b00      	cmp	r3, #0
 8017862:	d11d      	bne.n	80178a0 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d00d      	beq.n	8017886 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801786a:	4b5a      	ldr	r3, [pc, #360]	; (80179d4 <ip4_input+0x274>)
 801786c:	695b      	ldr	r3, [r3, #20]
 801786e:	b2db      	uxtb	r3, r3
 8017870:	2b7f      	cmp	r3, #127	; 0x7f
 8017872:	d102      	bne.n	801787a <ip4_input+0x11a>
          netif = NULL;
 8017874:	2300      	movs	r3, #0
 8017876:	613b      	str	r3, [r7, #16]
          break;
 8017878:	e012      	b.n	80178a0 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801787a:	2300      	movs	r3, #0
 801787c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801787e:	4b56      	ldr	r3, [pc, #344]	; (80179d8 <ip4_input+0x278>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	613b      	str	r3, [r7, #16]
 8017884:	e002      	b.n	801788c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8017886:	693b      	ldr	r3, [r7, #16]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801788c:	693a      	ldr	r2, [r7, #16]
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	429a      	cmp	r2, r3
 8017892:	d102      	bne.n	801789a <ip4_input+0x13a>
        netif = netif->next;
 8017894:	693b      	ldr	r3, [r7, #16]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801789a:	693b      	ldr	r3, [r7, #16]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d1c4      	bne.n	801782a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80178a0:	4b4c      	ldr	r3, [pc, #304]	; (80179d4 <ip4_input+0x274>)
 80178a2:	691b      	ldr	r3, [r3, #16]
 80178a4:	6839      	ldr	r1, [r7, #0]
 80178a6:	4618      	mov	r0, r3
 80178a8:	f000 f96a 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d105      	bne.n	80178be <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80178b2:	4b48      	ldr	r3, [pc, #288]	; (80179d4 <ip4_input+0x274>)
 80178b4:	691b      	ldr	r3, [r3, #16]
 80178b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80178ba:	2be0      	cmp	r3, #224	; 0xe0
 80178bc:	d104      	bne.n	80178c8 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f7f8 fdaa 	bl	8010418 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80178c4:	2300      	movs	r3, #0
 80178c6:	e081      	b.n	80179cc <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80178c8:	693b      	ldr	r3, [r7, #16]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d104      	bne.n	80178d8 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7f8 fda2 	bl	8010418 <pbuf_free>
    return ERR_OK;
 80178d4:	2300      	movs	r3, #0
 80178d6:	e079      	b.n	80179cc <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80178d8:	697b      	ldr	r3, [r7, #20]
 80178da:	88db      	ldrh	r3, [r3, #6]
 80178dc:	b29b      	uxth	r3, r3
 80178de:	461a      	mov	r2, r3
 80178e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80178e4:	4013      	ands	r3, r2
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d00b      	beq.n	8017902 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f000 fc8e 	bl	801820c <ip4_reass>
 80178f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d101      	bne.n	80178fc <ip4_input+0x19c>
      return ERR_OK;
 80178f8:	2300      	movs	r3, #0
 80178fa:	e067      	b.n	80179cc <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017902:	4a34      	ldr	r2, [pc, #208]	; (80179d4 <ip4_input+0x274>)
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017908:	4a32      	ldr	r2, [pc, #200]	; (80179d4 <ip4_input+0x274>)
 801790a:	683b      	ldr	r3, [r7, #0]
 801790c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801790e:	4a31      	ldr	r2, [pc, #196]	; (80179d4 <ip4_input+0x274>)
 8017910:	697b      	ldr	r3, [r7, #20]
 8017912:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	b29b      	uxth	r3, r3
 801791a:	f003 030f 	and.w	r3, r3, #15
 801791e:	b29b      	uxth	r3, r3
 8017920:	009b      	lsls	r3, r3, #2
 8017922:	b29a      	uxth	r2, r3
 8017924:	4b2b      	ldr	r3, [pc, #172]	; (80179d4 <ip4_input+0x274>)
 8017926:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8017928:	897b      	ldrh	r3, [r7, #10]
 801792a:	425b      	negs	r3, r3
 801792c:	b29b      	uxth	r3, r3
 801792e:	b21b      	sxth	r3, r3
 8017930:	4619      	mov	r1, r3
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	f7f8 fd4c 	bl	80103d0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8017938:	697b      	ldr	r3, [r7, #20]
 801793a:	7a5b      	ldrb	r3, [r3, #9]
 801793c:	2b06      	cmp	r3, #6
 801793e:	d009      	beq.n	8017954 <ip4_input+0x1f4>
 8017940:	2b11      	cmp	r3, #17
 8017942:	d002      	beq.n	801794a <ip4_input+0x1ea>
 8017944:	2b01      	cmp	r3, #1
 8017946:	d00a      	beq.n	801795e <ip4_input+0x1fe>
 8017948:	e00e      	b.n	8017968 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801794a:	6839      	ldr	r1, [r7, #0]
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f7fe fc0b 	bl	8016168 <udp_input>
      break;
 8017952:	e028      	b.n	80179a6 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8017954:	6839      	ldr	r1, [r7, #0]
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f7fa fc28 	bl	80121ac <tcp_input>
      break;
 801795c:	e023      	b.n	80179a6 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801795e:	6839      	ldr	r1, [r7, #0]
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	f7ff fd05 	bl	8017370 <icmp_input>
      break;
 8017966:	e01e      	b.n	80179a6 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017968:	4b1a      	ldr	r3, [pc, #104]	; (80179d4 <ip4_input+0x274>)
 801796a:	695b      	ldr	r3, [r3, #20]
 801796c:	6939      	ldr	r1, [r7, #16]
 801796e:	4618      	mov	r0, r3
 8017970:	f000 f906 	bl	8017b80 <ip4_addr_isbroadcast_u32>
 8017974:	4603      	mov	r3, r0
 8017976:	2b00      	cmp	r3, #0
 8017978:	d112      	bne.n	80179a0 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801797a:	4b16      	ldr	r3, [pc, #88]	; (80179d4 <ip4_input+0x274>)
 801797c:	695b      	ldr	r3, [r3, #20]
 801797e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017982:	2be0      	cmp	r3, #224	; 0xe0
 8017984:	d00c      	beq.n	80179a0 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8017986:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801798a:	4619      	mov	r1, r3
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7f8 fd31 	bl	80103f4 <pbuf_header_force>
        p->payload = iphdr;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	697a      	ldr	r2, [r7, #20]
 8017996:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017998:	2102      	movs	r1, #2
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f7ff fdee 	bl	801757c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f7f8 fd39 	bl	8010418 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80179a6:	4b0b      	ldr	r3, [pc, #44]	; (80179d4 <ip4_input+0x274>)
 80179a8:	2200      	movs	r2, #0
 80179aa:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80179ac:	4b09      	ldr	r3, [pc, #36]	; (80179d4 <ip4_input+0x274>)
 80179ae:	2200      	movs	r2, #0
 80179b0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80179b2:	4b08      	ldr	r3, [pc, #32]	; (80179d4 <ip4_input+0x274>)
 80179b4:	2200      	movs	r2, #0
 80179b6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80179b8:	4b06      	ldr	r3, [pc, #24]	; (80179d4 <ip4_input+0x274>)
 80179ba:	2200      	movs	r2, #0
 80179bc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80179be:	4b05      	ldr	r3, [pc, #20]	; (80179d4 <ip4_input+0x274>)
 80179c0:	2200      	movs	r2, #0
 80179c2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80179c4:	4b03      	ldr	r3, [pc, #12]	; (80179d4 <ip4_input+0x274>)
 80179c6:	2200      	movs	r2, #0
 80179c8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80179ca:	2300      	movs	r3, #0
}
 80179cc:	4618      	mov	r0, r3
 80179ce:	3718      	adds	r7, #24
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}
 80179d4:	200048f4 	.word	0x200048f4
 80179d8:	200079a0 	.word	0x200079a0

080179dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b08a      	sub	sp, #40	; 0x28
 80179e0:	af04      	add	r7, sp, #16
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	60b9      	str	r1, [r7, #8]
 80179e6:	607a      	str	r2, [r7, #4]
 80179e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d009      	beq.n	8017a08 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d003      	beq.n	8017a02 <ip4_output_if+0x26>
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d102      	bne.n	8017a08 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a04:	3304      	adds	r3, #4
 8017a06:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017a08:	78fa      	ldrb	r2, [r7, #3]
 8017a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a0c:	9302      	str	r3, [sp, #8]
 8017a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a12:	9301      	str	r3, [sp, #4]
 8017a14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017a18:	9300      	str	r3, [sp, #0]
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	687a      	ldr	r2, [r7, #4]
 8017a1e:	6979      	ldr	r1, [r7, #20]
 8017a20:	68f8      	ldr	r0, [r7, #12]
 8017a22:	f000 f805 	bl	8017a30 <ip4_output_if_src>
 8017a26:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3718      	adds	r7, #24
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b088      	sub	sp, #32
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	60f8      	str	r0, [r7, #12]
 8017a38:	60b9      	str	r1, [r7, #8]
 8017a3a:	607a      	str	r2, [r7, #4]
 8017a3c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	89db      	ldrh	r3, [r3, #14]
 8017a42:	2b01      	cmp	r3, #1
 8017a44:	d006      	beq.n	8017a54 <ip4_output_if_src+0x24>
 8017a46:	4b48      	ldr	r3, [pc, #288]	; (8017b68 <ip4_output_if_src+0x138>)
 8017a48:	f240 3233 	movw	r2, #819	; 0x333
 8017a4c:	4947      	ldr	r1, [pc, #284]	; (8017b6c <ip4_output_if_src+0x13c>)
 8017a4e:	4848      	ldr	r0, [pc, #288]	; (8017b70 <ip4_output_if_src+0x140>)
 8017a50:	f001 f9be 	bl	8018dd0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d060      	beq.n	8017b1c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017a5a:	2314      	movs	r3, #20
 8017a5c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8017a5e:	2114      	movs	r1, #20
 8017a60:	68f8      	ldr	r0, [r7, #12]
 8017a62:	f7f8 fcb5 	bl	80103d0 <pbuf_header>
 8017a66:	4603      	mov	r3, r0
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d002      	beq.n	8017a72 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017a6c:	f06f 0301 	mvn.w	r3, #1
 8017a70:	e075      	b.n	8017b5e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	895b      	ldrh	r3, [r3, #10]
 8017a7c:	2b13      	cmp	r3, #19
 8017a7e:	d806      	bhi.n	8017a8e <ip4_output_if_src+0x5e>
 8017a80:	4b39      	ldr	r3, [pc, #228]	; (8017b68 <ip4_output_if_src+0x138>)
 8017a82:	f240 3261 	movw	r2, #865	; 0x361
 8017a86:	493b      	ldr	r1, [pc, #236]	; (8017b74 <ip4_output_if_src+0x144>)
 8017a88:	4839      	ldr	r0, [pc, #228]	; (8017b70 <ip4_output_if_src+0x140>)
 8017a8a:	f001 f9a1 	bl	8018dd0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017a8e:	69fb      	ldr	r3, [r7, #28]
 8017a90:	78fa      	ldrb	r2, [r7, #3]
 8017a92:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017a9a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681a      	ldr	r2, [r3, #0]
 8017aa0:	69fb      	ldr	r3, [r7, #28]
 8017aa2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017aa4:	8b7b      	ldrh	r3, [r7, #26]
 8017aa6:	089b      	lsrs	r3, r3, #2
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	b2db      	uxtb	r3, r3
 8017aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ab0:	b2da      	uxtb	r2, r3
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017ab6:	69fb      	ldr	r3, [r7, #28]
 8017ab8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017abc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	891b      	ldrh	r3, [r3, #8]
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f7f7 fa8e 	bl	800efe4 <lwip_htons>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	461a      	mov	r2, r3
 8017acc:	69fb      	ldr	r3, [r7, #28]
 8017ace:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	719a      	strb	r2, [r3, #6]
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017ada:	4b27      	ldr	r3, [pc, #156]	; (8017b78 <ip4_output_if_src+0x148>)
 8017adc:	881b      	ldrh	r3, [r3, #0]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7f7 fa80 	bl	800efe4 <lwip_htons>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	69fb      	ldr	r3, [r7, #28]
 8017aea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017aec:	4b22      	ldr	r3, [pc, #136]	; (8017b78 <ip4_output_if_src+0x148>)
 8017aee:	881b      	ldrh	r3, [r3, #0]
 8017af0:	3301      	adds	r3, #1
 8017af2:	b29a      	uxth	r2, r3
 8017af4:	4b20      	ldr	r3, [pc, #128]	; (8017b78 <ip4_output_if_src+0x148>)
 8017af6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017af8:	68bb      	ldr	r3, [r7, #8]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d104      	bne.n	8017b08 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017afe:	4b1f      	ldr	r3, [pc, #124]	; (8017b7c <ip4_output_if_src+0x14c>)
 8017b00:	681a      	ldr	r2, [r3, #0]
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	60da      	str	r2, [r3, #12]
 8017b06:	e003      	b.n	8017b10 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	2200      	movs	r2, #0
 8017b14:	729a      	strb	r2, [r3, #10]
 8017b16:	2200      	movs	r2, #0
 8017b18:	72da      	strb	r2, [r3, #11]
 8017b1a:	e008      	b.n	8017b2e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	685b      	ldr	r3, [r3, #4]
 8017b20:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	691b      	ldr	r3, [r3, #16]
 8017b26:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017b28:	f107 0314 	add.w	r3, r7, #20
 8017b2c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b30:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d00c      	beq.n	8017b50 <ip4_output_if_src+0x120>
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	891a      	ldrh	r2, [r3, #8]
 8017b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d906      	bls.n	8017b50 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b46:	68f8      	ldr	r0, [r7, #12]
 8017b48:	f000 fd0a 	bl	8018560 <ip4_frag>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	e006      	b.n	8017b5e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b52:	695b      	ldr	r3, [r3, #20]
 8017b54:	687a      	ldr	r2, [r7, #4]
 8017b56:	68f9      	ldr	r1, [r7, #12]
 8017b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b5a:	4798      	blx	r3
 8017b5c:	4603      	mov	r3, r0
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3720      	adds	r7, #32
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	0801c230 	.word	0x0801c230
 8017b6c:	0801c288 	.word	0x0801c288
 8017b70:	0801c294 	.word	0x0801c294
 8017b74:	0801c2bc 	.word	0x0801c2bc
 8017b78:	200041e6 	.word	0x200041e6
 8017b7c:	0801c6dc 	.word	0x0801c6dc

08017b80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017b80:	b480      	push	{r7}
 8017b82:	b085      	sub	sp, #20
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b94:	d002      	beq.n	8017b9c <ip4_addr_isbroadcast_u32+0x1c>
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d101      	bne.n	8017ba0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	e02a      	b.n	8017bf6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017ba6:	f003 0302 	and.w	r3, r3, #2
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d101      	bne.n	8017bb2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	e021      	b.n	8017bf6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	3304      	adds	r3, #4
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	687a      	ldr	r2, [r7, #4]
 8017bba:	429a      	cmp	r2, r3
 8017bbc:	d101      	bne.n	8017bc2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	e019      	b.n	8017bf6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017bc2:	68fa      	ldr	r2, [r7, #12]
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	3304      	adds	r3, #4
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	405a      	eors	r2, r3
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	3308      	adds	r3, #8
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	4013      	ands	r3, r2
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d10d      	bne.n	8017bf4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	3308      	adds	r3, #8
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	43da      	mvns	r2, r3
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	3308      	adds	r3, #8
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bec:	429a      	cmp	r2, r3
 8017bee:	d101      	bne.n	8017bf4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	e000      	b.n	8017bf6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017bf4:	2300      	movs	r3, #0
  }
}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3714      	adds	r7, #20
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c00:	4770      	bx	lr
	...

08017c04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b084      	sub	sp, #16
 8017c08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017c0e:	4b12      	ldr	r3, [pc, #72]	; (8017c58 <ip_reass_tmr+0x54>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017c14:	e018      	b.n	8017c48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	7fdb      	ldrb	r3, [r3, #31]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d00b      	beq.n	8017c36 <ip_reass_tmr+0x32>
      r->timer--;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	7fdb      	ldrb	r3, [r3, #31]
 8017c22:	3b01      	subs	r3, #1
 8017c24:	b2da      	uxtb	r2, r3
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	60fb      	str	r3, [r7, #12]
 8017c34:	e008      	b.n	8017c48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017c40:	68b9      	ldr	r1, [r7, #8]
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f000 f80a 	bl	8017c5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d1e3      	bne.n	8017c16 <ip_reass_tmr+0x12>
     }
   }
}
 8017c4e:	bf00      	nop
 8017c50:	3710      	adds	r7, #16
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}
 8017c56:	bf00      	nop
 8017c58:	200041e8 	.word	0x200041e8

08017c5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b088      	sub	sp, #32
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017c66:	2300      	movs	r3, #0
 8017c68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017c6a:	683a      	ldr	r2, [r7, #0]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d105      	bne.n	8017c7e <ip_reass_free_complete_datagram+0x22>
 8017c72:	4b45      	ldr	r3, [pc, #276]	; (8017d88 <ip_reass_free_complete_datagram+0x12c>)
 8017c74:	22ab      	movs	r2, #171	; 0xab
 8017c76:	4945      	ldr	r1, [pc, #276]	; (8017d8c <ip_reass_free_complete_datagram+0x130>)
 8017c78:	4845      	ldr	r0, [pc, #276]	; (8017d90 <ip_reass_free_complete_datagram+0x134>)
 8017c7a:	f001 f8a9 	bl	8018dd0 <iprintf>
  if (prev != NULL) {
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d00a      	beq.n	8017c9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d005      	beq.n	8017c9a <ip_reass_free_complete_datagram+0x3e>
 8017c8e:	4b3e      	ldr	r3, [pc, #248]	; (8017d88 <ip_reass_free_complete_datagram+0x12c>)
 8017c90:	22ad      	movs	r2, #173	; 0xad
 8017c92:	4940      	ldr	r1, [pc, #256]	; (8017d94 <ip_reass_free_complete_datagram+0x138>)
 8017c94:	483e      	ldr	r0, [pc, #248]	; (8017d90 <ip_reass_free_complete_datagram+0x134>)
 8017c96:	f001 f89b 	bl	8018dd0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	685b      	ldr	r3, [r3, #4]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	889b      	ldrh	r3, [r3, #4]
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d12a      	bne.n	8017d02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	681a      	ldr	r2, [r3, #0]
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017cba:	69bb      	ldr	r3, [r7, #24]
 8017cbc:	6858      	ldr	r0, [r3, #4]
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	3308      	adds	r3, #8
 8017cc2:	2214      	movs	r2, #20
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	f001 f870 	bl	8018daa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017cca:	2101      	movs	r1, #1
 8017ccc:	69b8      	ldr	r0, [r7, #24]
 8017cce:	f7ff fc65 	bl	801759c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017cd2:	69b8      	ldr	r0, [r7, #24]
 8017cd4:	f7f8 fc3a 	bl	801054c <pbuf_clen>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017cdc:	8bfa      	ldrh	r2, [r7, #30]
 8017cde:	8a7b      	ldrh	r3, [r7, #18]
 8017ce0:	4413      	add	r3, r2
 8017ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017ce6:	db05      	blt.n	8017cf4 <ip_reass_free_complete_datagram+0x98>
 8017ce8:	4b27      	ldr	r3, [pc, #156]	; (8017d88 <ip_reass_free_complete_datagram+0x12c>)
 8017cea:	22bc      	movs	r2, #188	; 0xbc
 8017cec:	492a      	ldr	r1, [pc, #168]	; (8017d98 <ip_reass_free_complete_datagram+0x13c>)
 8017cee:	4828      	ldr	r0, [pc, #160]	; (8017d90 <ip_reass_free_complete_datagram+0x134>)
 8017cf0:	f001 f86e 	bl	8018dd0 <iprintf>
    pbufs_freed += clen;
 8017cf4:	8bfa      	ldrh	r2, [r7, #30]
 8017cf6:	8a7b      	ldrh	r3, [r7, #18]
 8017cf8:	4413      	add	r3, r2
 8017cfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017cfc:	69b8      	ldr	r0, [r7, #24]
 8017cfe:	f7f8 fb8b 	bl	8010418 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	685b      	ldr	r3, [r3, #4]
 8017d06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017d08:	e01f      	b.n	8017d4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017d0a:	69bb      	ldr	r3, [r7, #24]
 8017d0c:	685b      	ldr	r3, [r3, #4]
 8017d0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017d10:	69bb      	ldr	r3, [r7, #24]
 8017d12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017d14:	697b      	ldr	r3, [r7, #20]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017d1a:	68f8      	ldr	r0, [r7, #12]
 8017d1c:	f7f8 fc16 	bl	801054c <pbuf_clen>
 8017d20:	4603      	mov	r3, r0
 8017d22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d24:	8bfa      	ldrh	r2, [r7, #30]
 8017d26:	8a7b      	ldrh	r3, [r7, #18]
 8017d28:	4413      	add	r3, r2
 8017d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d2e:	db05      	blt.n	8017d3c <ip_reass_free_complete_datagram+0xe0>
 8017d30:	4b15      	ldr	r3, [pc, #84]	; (8017d88 <ip_reass_free_complete_datagram+0x12c>)
 8017d32:	22cc      	movs	r2, #204	; 0xcc
 8017d34:	4918      	ldr	r1, [pc, #96]	; (8017d98 <ip_reass_free_complete_datagram+0x13c>)
 8017d36:	4816      	ldr	r0, [pc, #88]	; (8017d90 <ip_reass_free_complete_datagram+0x134>)
 8017d38:	f001 f84a 	bl	8018dd0 <iprintf>
    pbufs_freed += clen;
 8017d3c:	8bfa      	ldrh	r2, [r7, #30]
 8017d3e:	8a7b      	ldrh	r3, [r7, #18]
 8017d40:	4413      	add	r3, r2
 8017d42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017d44:	68f8      	ldr	r0, [r7, #12]
 8017d46:	f7f8 fb67 	bl	8010418 <pbuf_free>
  while (p != NULL) {
 8017d4a:	69bb      	ldr	r3, [r7, #24]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d1dc      	bne.n	8017d0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017d50:	6839      	ldr	r1, [r7, #0]
 8017d52:	6878      	ldr	r0, [r7, #4]
 8017d54:	f000 f8c2 	bl	8017edc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017d58:	4b10      	ldr	r3, [pc, #64]	; (8017d9c <ip_reass_free_complete_datagram+0x140>)
 8017d5a:	881b      	ldrh	r3, [r3, #0]
 8017d5c:	8bfa      	ldrh	r2, [r7, #30]
 8017d5e:	429a      	cmp	r2, r3
 8017d60:	d905      	bls.n	8017d6e <ip_reass_free_complete_datagram+0x112>
 8017d62:	4b09      	ldr	r3, [pc, #36]	; (8017d88 <ip_reass_free_complete_datagram+0x12c>)
 8017d64:	22d2      	movs	r2, #210	; 0xd2
 8017d66:	490e      	ldr	r1, [pc, #56]	; (8017da0 <ip_reass_free_complete_datagram+0x144>)
 8017d68:	4809      	ldr	r0, [pc, #36]	; (8017d90 <ip_reass_free_complete_datagram+0x134>)
 8017d6a:	f001 f831 	bl	8018dd0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8017d6e:	4b0b      	ldr	r3, [pc, #44]	; (8017d9c <ip_reass_free_complete_datagram+0x140>)
 8017d70:	881a      	ldrh	r2, [r3, #0]
 8017d72:	8bfb      	ldrh	r3, [r7, #30]
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	b29a      	uxth	r2, r3
 8017d78:	4b08      	ldr	r3, [pc, #32]	; (8017d9c <ip_reass_free_complete_datagram+0x140>)
 8017d7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017d7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3720      	adds	r7, #32
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	0801c2ec 	.word	0x0801c2ec
 8017d8c:	0801c348 	.word	0x0801c348
 8017d90:	0801c354 	.word	0x0801c354
 8017d94:	0801c37c 	.word	0x0801c37c
 8017d98:	0801c390 	.word	0x0801c390
 8017d9c:	200041ec 	.word	0x200041ec
 8017da0:	0801c3b0 	.word	0x0801c3b0

08017da4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b08a      	sub	sp, #40	; 0x28
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017dae:	2300      	movs	r3, #0
 8017db0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017db2:	2300      	movs	r3, #0
 8017db4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017db6:	2300      	movs	r3, #0
 8017db8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017dc2:	4b28      	ldr	r3, [pc, #160]	; (8017e64 <ip_reass_remove_oldest_datagram+0xc0>)
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017dc8:	e030      	b.n	8017e2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dcc:	695a      	ldr	r2, [r3, #20]
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	68db      	ldr	r3, [r3, #12]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d10c      	bne.n	8017df0 <ip_reass_remove_oldest_datagram+0x4c>
 8017dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd8:	699a      	ldr	r2, [r3, #24]
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	691b      	ldr	r3, [r3, #16]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d106      	bne.n	8017df0 <ip_reass_remove_oldest_datagram+0x4c>
 8017de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de4:	899a      	ldrh	r2, [r3, #12]
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	889b      	ldrh	r3, [r3, #4]
 8017dea:	b29b      	uxth	r3, r3
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d014      	beq.n	8017e1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017df0:	693b      	ldr	r3, [r7, #16]
 8017df2:	3301      	adds	r3, #1
 8017df4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017df6:	6a3b      	ldr	r3, [r7, #32]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d104      	bne.n	8017e06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	61bb      	str	r3, [r7, #24]
 8017e04:	e009      	b.n	8017e1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e08:	7fda      	ldrb	r2, [r3, #31]
 8017e0a:	6a3b      	ldr	r3, [r7, #32]
 8017e0c:	7fdb      	ldrb	r3, [r3, #31]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d803      	bhi.n	8017e1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017e16:	69fb      	ldr	r3, [r7, #28]
 8017e18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d001      	beq.n	8017e26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d1cb      	bne.n	8017dca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017e32:	6a3b      	ldr	r3, [r7, #32]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d008      	beq.n	8017e4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017e38:	69b9      	ldr	r1, [r7, #24]
 8017e3a:	6a38      	ldr	r0, [r7, #32]
 8017e3c:	f7ff ff0e 	bl	8017c5c <ip_reass_free_complete_datagram>
 8017e40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017e42:	697a      	ldr	r2, [r7, #20]
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	4413      	add	r3, r2
 8017e48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017e4a:	697a      	ldr	r2, [r7, #20]
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	429a      	cmp	r2, r3
 8017e50:	da02      	bge.n	8017e58 <ip_reass_remove_oldest_datagram+0xb4>
 8017e52:	693b      	ldr	r3, [r7, #16]
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	dcac      	bgt.n	8017db2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017e58:	697b      	ldr	r3, [r7, #20]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3728      	adds	r7, #40	; 0x28
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
 8017e62:	bf00      	nop
 8017e64:	200041e8 	.word	0x200041e8

08017e68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017e72:	2004      	movs	r0, #4
 8017e74:	f7f7 fcc2 	bl	800f7fc <memp_malloc>
 8017e78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d110      	bne.n	8017ea2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017e80:	6839      	ldr	r1, [r7, #0]
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f7ff ff8e 	bl	8017da4 <ip_reass_remove_oldest_datagram>
 8017e88:	4602      	mov	r2, r0
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	dc03      	bgt.n	8017e98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017e90:	2004      	movs	r0, #4
 8017e92:	f7f7 fcb3 	bl	800f7fc <memp_malloc>
 8017e96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d101      	bne.n	8017ea2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	e016      	b.n	8017ed0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017ea2:	2220      	movs	r2, #32
 8017ea4:	2100      	movs	r1, #0
 8017ea6:	68f8      	ldr	r0, [r7, #12]
 8017ea8:	f000 ff8a 	bl	8018dc0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	2203      	movs	r2, #3
 8017eb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017eb2:	4b09      	ldr	r3, [pc, #36]	; (8017ed8 <ip_reass_enqueue_new_datagram+0x70>)
 8017eb4:	681a      	ldr	r2, [r3, #0]
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017eba:	4a07      	ldr	r2, [pc, #28]	; (8017ed8 <ip_reass_enqueue_new_datagram+0x70>)
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	3308      	adds	r3, #8
 8017ec4:	2214      	movs	r2, #20
 8017ec6:	6879      	ldr	r1, [r7, #4]
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f000 ff6e 	bl	8018daa <memcpy>
  return ipr;
 8017ece:	68fb      	ldr	r3, [r7, #12]
}
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	3710      	adds	r7, #16
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}
 8017ed8:	200041e8 	.word	0x200041e8

08017edc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
 8017ee4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017ee6:	4b10      	ldr	r3, [pc, #64]	; (8017f28 <ip_reass_dequeue_datagram+0x4c>)
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d104      	bne.n	8017efa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	4a0c      	ldr	r2, [pc, #48]	; (8017f28 <ip_reass_dequeue_datagram+0x4c>)
 8017ef6:	6013      	str	r3, [r2, #0]
 8017ef8:	e00d      	b.n	8017f16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d106      	bne.n	8017f0e <ip_reass_dequeue_datagram+0x32>
 8017f00:	4b0a      	ldr	r3, [pc, #40]	; (8017f2c <ip_reass_dequeue_datagram+0x50>)
 8017f02:	f240 1245 	movw	r2, #325	; 0x145
 8017f06:	490a      	ldr	r1, [pc, #40]	; (8017f30 <ip_reass_dequeue_datagram+0x54>)
 8017f08:	480a      	ldr	r0, [pc, #40]	; (8017f34 <ip_reass_dequeue_datagram+0x58>)
 8017f0a:	f000 ff61 	bl	8018dd0 <iprintf>
    prev->next = ipr->next;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	681a      	ldr	r2, [r3, #0]
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017f16:	6879      	ldr	r1, [r7, #4]
 8017f18:	2004      	movs	r0, #4
 8017f1a:	f7f7 fce5 	bl	800f8e8 <memp_free>
}
 8017f1e:	bf00      	nop
 8017f20:	3708      	adds	r7, #8
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}
 8017f26:	bf00      	nop
 8017f28:	200041e8 	.word	0x200041e8
 8017f2c:	0801c2ec 	.word	0x0801c2ec
 8017f30:	0801c3cc 	.word	0x0801c3cc
 8017f34:	0801c354 	.word	0x0801c354

08017f38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b08c      	sub	sp, #48	; 0x30
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	60f8      	str	r0, [r7, #12]
 8017f40:	60b9      	str	r1, [r7, #8]
 8017f42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8017f44:	2300      	movs	r3, #0
 8017f46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017f48:	2301      	movs	r3, #1
 8017f4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8017f4c:	68bb      	ldr	r3, [r7, #8]
 8017f4e:	685b      	ldr	r3, [r3, #4]
 8017f50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017f52:	69fb      	ldr	r3, [r7, #28]
 8017f54:	885b      	ldrh	r3, [r3, #2]
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f7f7 f843 	bl	800efe4 <lwip_htons>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	461a      	mov	r2, r3
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	781b      	ldrb	r3, [r3, #0]
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	f003 030f 	and.w	r3, r3, #15
 8017f6c:	b29b      	uxth	r3, r3
 8017f6e:	009b      	lsls	r3, r3, #2
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	1ad3      	subs	r3, r2, r3
 8017f74:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017f76:	69fb      	ldr	r3, [r7, #28]
 8017f78:	88db      	ldrh	r3, [r3, #6]
 8017f7a:	b29b      	uxth	r3, r3
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7f7 f831 	bl	800efe4 <lwip_htons>
 8017f82:	4603      	mov	r3, r0
 8017f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	00db      	lsls	r3, r3, #3
 8017f8c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8017f8e:	68bb      	ldr	r3, [r7, #8]
 8017f90:	685b      	ldr	r3, [r3, #4]
 8017f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f96:	2200      	movs	r2, #0
 8017f98:	701a      	strb	r2, [r3, #0]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	705a      	strb	r2, [r3, #1]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	709a      	strb	r2, [r3, #2]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa8:	8b3a      	ldrh	r2, [r7, #24]
 8017faa:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8017fac:	8b3a      	ldrh	r2, [r7, #24]
 8017fae:	8b7b      	ldrh	r3, [r7, #26]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8017fbe:	e061      	b.n	8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8017fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc2:	685b      	ldr	r3, [r3, #4]
 8017fc4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8017fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc8:	889b      	ldrh	r3, [r3, #4]
 8017fca:	b29a      	uxth	r2, r3
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	889b      	ldrh	r3, [r3, #4]
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d232      	bcs.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fda:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d01f      	beq.n	8018022 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe4:	889b      	ldrh	r3, [r3, #4]
 8017fe6:	b29a      	uxth	r2, r3
 8017fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fea:	88db      	ldrh	r3, [r3, #6]
 8017fec:	b29b      	uxth	r3, r3
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	f0c0 80e3 	bcc.w	80181ba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8017ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff6:	88db      	ldrh	r3, [r3, #6]
 8017ff8:	b29a      	uxth	r2, r3
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	889b      	ldrh	r3, [r3, #4]
 8017ffe:	b29b      	uxth	r3, r3
 8018000:	429a      	cmp	r2, r3
 8018002:	f200 80da 	bhi.w	80181ba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018008:	68ba      	ldr	r2, [r7, #8]
 801800a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801800e:	88db      	ldrh	r3, [r3, #6]
 8018010:	b29a      	uxth	r2, r3
 8018012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018014:	889b      	ldrh	r3, [r3, #4]
 8018016:	b29b      	uxth	r3, r3
 8018018:	429a      	cmp	r2, r3
 801801a:	d037      	beq.n	801808c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801801c:	2300      	movs	r3, #0
 801801e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018020:	e034      	b.n	801808c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8018022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018024:	88db      	ldrh	r3, [r3, #6]
 8018026:	b29a      	uxth	r2, r3
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	889b      	ldrh	r3, [r3, #4]
 801802c:	b29b      	uxth	r3, r3
 801802e:	429a      	cmp	r2, r3
 8018030:	f200 80c5 	bhi.w	80181be <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	68ba      	ldr	r2, [r7, #8]
 8018038:	605a      	str	r2, [r3, #4]
      break;
 801803a:	e027      	b.n	801808c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803e:	889b      	ldrh	r3, [r3, #4]
 8018040:	b29a      	uxth	r2, r3
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	889b      	ldrh	r3, [r3, #4]
 8018046:	b29b      	uxth	r3, r3
 8018048:	429a      	cmp	r2, r3
 801804a:	f000 80ba 	beq.w	80181c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018050:	889b      	ldrh	r3, [r3, #4]
 8018052:	b29a      	uxth	r2, r3
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	88db      	ldrh	r3, [r3, #6]
 8018058:	b29b      	uxth	r3, r3
 801805a:	429a      	cmp	r2, r3
 801805c:	f0c0 80b3 	bcc.w	80181c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018062:	2b00      	cmp	r3, #0
 8018064:	d009      	beq.n	801807a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8018066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018068:	88db      	ldrh	r3, [r3, #6]
 801806a:	b29a      	uxth	r2, r3
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	889b      	ldrh	r3, [r3, #4]
 8018070:	b29b      	uxth	r3, r3
 8018072:	429a      	cmp	r2, r3
 8018074:	d001      	beq.n	801807a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018076:	2300      	movs	r3, #0
 8018078:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018086:	2b00      	cmp	r3, #0
 8018088:	d19a      	bne.n	8017fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801808a:	e000      	b.n	801808e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801808c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018090:	2b00      	cmp	r3, #0
 8018092:	d12d      	bne.n	80180f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8018094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018096:	2b00      	cmp	r3, #0
 8018098:	d01c      	beq.n	80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809c:	88db      	ldrh	r3, [r3, #6]
 801809e:	b29a      	uxth	r2, r3
 80180a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a2:	889b      	ldrh	r3, [r3, #4]
 80180a4:	b29b      	uxth	r3, r3
 80180a6:	429a      	cmp	r2, r3
 80180a8:	d906      	bls.n	80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80180aa:	4b51      	ldr	r3, [pc, #324]	; (80181f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80180ac:	f240 12ab 	movw	r2, #427	; 0x1ab
 80180b0:	4950      	ldr	r1, [pc, #320]	; (80181f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80180b2:	4851      	ldr	r0, [pc, #324]	; (80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80180b4:	f000 fe8c 	bl	8018dd0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80180b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ba:	68ba      	ldr	r2, [r7, #8]
 80180bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80180be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c0:	88db      	ldrh	r3, [r3, #6]
 80180c2:	b29a      	uxth	r2, r3
 80180c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c6:	889b      	ldrh	r3, [r3, #4]
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d010      	beq.n	80180f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80180ce:	2300      	movs	r3, #0
 80180d0:	623b      	str	r3, [r7, #32]
 80180d2:	e00d      	b.n	80180f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	685b      	ldr	r3, [r3, #4]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d006      	beq.n	80180ea <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80180dc:	4b44      	ldr	r3, [pc, #272]	; (80181f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80180de:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80180e2:	4946      	ldr	r1, [pc, #280]	; (80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180e4:	4844      	ldr	r0, [pc, #272]	; (80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80180e6:	f000 fe73 	bl	8018dd0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	68ba      	ldr	r2, [r7, #8]
 80180ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d105      	bne.n	8018102 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	7f9b      	ldrb	r3, [r3, #30]
 80180fa:	f003 0301 	and.w	r3, r3, #1
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d059      	beq.n	80181b6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8018102:	6a3b      	ldr	r3, [r7, #32]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d04f      	beq.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d006      	beq.n	801811e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	685b      	ldr	r3, [r3, #4]
 8018116:	889b      	ldrh	r3, [r3, #4]
 8018118:	b29b      	uxth	r3, r3
 801811a:	2b00      	cmp	r3, #0
 801811c:	d002      	beq.n	8018124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801811e:	2300      	movs	r3, #0
 8018120:	623b      	str	r3, [r7, #32]
 8018122:	e041      	b.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018126:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801812e:	e012      	b.n	8018156 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8018130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018132:	685b      	ldr	r3, [r3, #4]
 8018134:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018138:	88db      	ldrh	r3, [r3, #6]
 801813a:	b29a      	uxth	r2, r3
 801813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813e:	889b      	ldrh	r3, [r3, #4]
 8018140:	b29b      	uxth	r3, r3
 8018142:	429a      	cmp	r2, r3
 8018144:	d002      	beq.n	801814c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8018146:	2300      	movs	r3, #0
 8018148:	623b      	str	r3, [r7, #32]
            break;
 801814a:	e007      	b.n	801815c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801814e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018158:	2b00      	cmp	r3, #0
 801815a:	d1e9      	bne.n	8018130 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801815c:	6a3b      	ldr	r3, [r7, #32]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d022      	beq.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d106      	bne.n	8018178 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801816a:	4b21      	ldr	r3, [pc, #132]	; (80181f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801816c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8018170:	4923      	ldr	r1, [pc, #140]	; (8018200 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018172:	4821      	ldr	r0, [pc, #132]	; (80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018174:	f000 fe2c 	bl	8018dd0 <iprintf>
          LWIP_ASSERT("sanity check",
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	685b      	ldr	r3, [r3, #4]
 801817c:	685b      	ldr	r3, [r3, #4]
 801817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018180:	429a      	cmp	r2, r3
 8018182:	d106      	bne.n	8018192 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8018184:	4b1a      	ldr	r3, [pc, #104]	; (80181f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018186:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801818a:	491d      	ldr	r1, [pc, #116]	; (8018200 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801818c:	481a      	ldr	r0, [pc, #104]	; (80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801818e:	f000 fe1f 	bl	8018dd0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d006      	beq.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801819a:	4b15      	ldr	r3, [pc, #84]	; (80181f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801819c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80181a0:	4918      	ldr	r1, [pc, #96]	; (8018204 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80181a2:	4815      	ldr	r0, [pc, #84]	; (80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80181a4:	f000 fe14 	bl	8018dd0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80181a8:	6a3b      	ldr	r3, [r7, #32]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	bf14      	ite	ne
 80181ae:	2301      	movne	r3, #1
 80181b0:	2300      	moveq	r3, #0
 80181b2:	b2db      	uxtb	r3, r3
 80181b4:	e018      	b.n	80181e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80181b6:	2300      	movs	r3, #0
 80181b8:	e016      	b.n	80181e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80181ba:	bf00      	nop
 80181bc:	e004      	b.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80181be:	bf00      	nop
 80181c0:	e002      	b.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80181c2:	bf00      	nop
 80181c4:	e000      	b.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80181c6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80181c8:	68b8      	ldr	r0, [r7, #8]
 80181ca:	f7f8 f9bf 	bl	801054c <pbuf_clen>
 80181ce:	4603      	mov	r3, r0
 80181d0:	461a      	mov	r2, r3
 80181d2:	4b0d      	ldr	r3, [pc, #52]	; (8018208 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80181d4:	881b      	ldrh	r3, [r3, #0]
 80181d6:	1a9b      	subs	r3, r3, r2
 80181d8:	b29a      	uxth	r2, r3
 80181da:	4b0b      	ldr	r3, [pc, #44]	; (8018208 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80181dc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80181de:	68b8      	ldr	r0, [r7, #8]
 80181e0:	f7f8 f91a 	bl	8010418 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181e4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3730      	adds	r7, #48	; 0x30
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}
 80181f0:	0801c2ec 	.word	0x0801c2ec
 80181f4:	0801c3e8 	.word	0x0801c3e8
 80181f8:	0801c354 	.word	0x0801c354
 80181fc:	0801c408 	.word	0x0801c408
 8018200:	0801c440 	.word	0x0801c440
 8018204:	0801c450 	.word	0x0801c450
 8018208:	200041ec 	.word	0x200041ec

0801820c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b08e      	sub	sp, #56	; 0x38
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	f003 030f 	and.w	r3, r3, #15
 8018222:	009b      	lsls	r3, r3, #2
 8018224:	2b14      	cmp	r3, #20
 8018226:	f040 8131 	bne.w	801848c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822c:	88db      	ldrh	r3, [r3, #6]
 801822e:	b29b      	uxth	r3, r3
 8018230:	4618      	mov	r0, r3
 8018232:	f7f6 fed7 	bl	800efe4 <lwip_htons>
 8018236:	4603      	mov	r3, r0
 8018238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801823c:	b29b      	uxth	r3, r3
 801823e:	00db      	lsls	r3, r3, #3
 8018240:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018244:	885b      	ldrh	r3, [r3, #2]
 8018246:	b29b      	uxth	r3, r3
 8018248:	4618      	mov	r0, r3
 801824a:	f7f6 fecb 	bl	800efe4 <lwip_htons>
 801824e:	4603      	mov	r3, r0
 8018250:	461a      	mov	r2, r3
 8018252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	b29b      	uxth	r3, r3
 8018258:	f003 030f 	and.w	r3, r3, #15
 801825c:	b29b      	uxth	r3, r3
 801825e:	009b      	lsls	r3, r3, #2
 8018260:	b29b      	uxth	r3, r3
 8018262:	1ad3      	subs	r3, r2, r3
 8018264:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f7f8 f970 	bl	801054c <pbuf_clen>
 801826c:	4603      	mov	r3, r0
 801826e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018270:	4b8d      	ldr	r3, [pc, #564]	; (80184a8 <ip4_reass+0x29c>)
 8018272:	881b      	ldrh	r3, [r3, #0]
 8018274:	461a      	mov	r2, r3
 8018276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018278:	4413      	add	r3, r2
 801827a:	2b0a      	cmp	r3, #10
 801827c:	dd10      	ble.n	80182a0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801827e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018280:	4619      	mov	r1, r3
 8018282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018284:	f7ff fd8e 	bl	8017da4 <ip_reass_remove_oldest_datagram>
 8018288:	4603      	mov	r3, r0
 801828a:	2b00      	cmp	r3, #0
 801828c:	f000 8100 	beq.w	8018490 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018290:	4b85      	ldr	r3, [pc, #532]	; (80184a8 <ip4_reass+0x29c>)
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	461a      	mov	r2, r3
 8018296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018298:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801829a:	2b0a      	cmp	r3, #10
 801829c:	f300 80f8 	bgt.w	8018490 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80182a0:	4b82      	ldr	r3, [pc, #520]	; (80184ac <ip4_reass+0x2a0>)
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	633b      	str	r3, [r7, #48]	; 0x30
 80182a6:	e015      	b.n	80182d4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80182a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182aa:	695a      	ldr	r2, [r3, #20]
 80182ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d10c      	bne.n	80182ce <ip4_reass+0xc2>
 80182b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b6:	699a      	ldr	r2, [r3, #24]
 80182b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ba:	691b      	ldr	r3, [r3, #16]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d106      	bne.n	80182ce <ip4_reass+0xc2>
 80182c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c2:	899a      	ldrh	r2, [r3, #12]
 80182c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c6:	889b      	ldrh	r3, [r3, #4]
 80182c8:	b29b      	uxth	r3, r3
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d006      	beq.n	80182dc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80182ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	633b      	str	r3, [r7, #48]	; 0x30
 80182d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d1e6      	bne.n	80182a8 <ip4_reass+0x9c>
 80182da:	e000      	b.n	80182de <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80182dc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80182de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d109      	bne.n	80182f8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80182e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80182e6:	4619      	mov	r1, r3
 80182e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182ea:	f7ff fdbd 	bl	8017e68 <ip_reass_enqueue_new_datagram>
 80182ee:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80182f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d11c      	bne.n	8018330 <ip4_reass+0x124>
      goto nullreturn;
 80182f6:	e0ce      	b.n	8018496 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80182f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fa:	88db      	ldrh	r3, [r3, #6]
 80182fc:	b29b      	uxth	r3, r3
 80182fe:	4618      	mov	r0, r3
 8018300:	f7f6 fe70 	bl	800efe4 <lwip_htons>
 8018304:	4603      	mov	r3, r0
 8018306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801830a:	2b00      	cmp	r3, #0
 801830c:	d110      	bne.n	8018330 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018310:	89db      	ldrh	r3, [r3, #14]
 8018312:	4618      	mov	r0, r3
 8018314:	f7f6 fe66 	bl	800efe4 <lwip_htons>
 8018318:	4603      	mov	r3, r0
 801831a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801831e:	2b00      	cmp	r3, #0
 8018320:	d006      	beq.n	8018330 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018324:	3308      	adds	r3, #8
 8018326:	2214      	movs	r2, #20
 8018328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801832a:	4618      	mov	r0, r3
 801832c:	f000 fd3d 	bl	8018daa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018332:	88db      	ldrh	r3, [r3, #6]
 8018334:	b29b      	uxth	r3, r3
 8018336:	f003 0320 	and.w	r3, r3, #32
 801833a:	2b00      	cmp	r3, #0
 801833c:	bf0c      	ite	eq
 801833e:	2301      	moveq	r3, #1
 8018340:	2300      	movne	r3, #0
 8018342:	b2db      	uxtb	r3, r3
 8018344:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018346:	69fb      	ldr	r3, [r7, #28]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d00e      	beq.n	801836a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801834c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801834e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018350:	4413      	add	r3, r2
 8018352:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018354:	8b7a      	ldrh	r2, [r7, #26]
 8018356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018358:	429a      	cmp	r2, r3
 801835a:	f0c0 8099 	bcc.w	8018490 <ip4_reass+0x284>
 801835e:	8b7b      	ldrh	r3, [r7, #26]
 8018360:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018364:	4293      	cmp	r3, r2
 8018366:	f200 8093 	bhi.w	8018490 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801836a:	69fa      	ldr	r2, [r7, #28]
 801836c:	6879      	ldr	r1, [r7, #4]
 801836e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018370:	f7ff fde2 	bl	8017f38 <ip_reass_chain_frag_into_datagram_and_validate>
 8018374:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801837c:	f000 808a 	beq.w	8018494 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018380:	4b49      	ldr	r3, [pc, #292]	; (80184a8 <ip4_reass+0x29c>)
 8018382:	881a      	ldrh	r2, [r3, #0]
 8018384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018386:	4413      	add	r3, r2
 8018388:	b29a      	uxth	r2, r3
 801838a:	4b47      	ldr	r3, [pc, #284]	; (80184a8 <ip4_reass+0x29c>)
 801838c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d00d      	beq.n	80183b0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8018394:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018398:	4413      	add	r3, r2
 801839a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801839e:	8a7a      	ldrh	r2, [r7, #18]
 80183a0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80183a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a4:	7f9b      	ldrb	r3, [r3, #30]
 80183a6:	f043 0301 	orr.w	r3, r3, #1
 80183aa:	b2da      	uxtb	r2, r3
 80183ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ae:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	2b01      	cmp	r3, #1
 80183b4:	d168      	bne.n	8018488 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80183b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b8:	8b9b      	ldrh	r3, [r3, #28]
 80183ba:	3314      	adds	r3, #20
 80183bc:	b29a      	uxth	r2, r3
 80183be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80183c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c4:	685b      	ldr	r3, [r3, #4]
 80183c6:	685b      	ldr	r3, [r3, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80183cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	685b      	ldr	r3, [r3, #4]
 80183d2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80183d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d6:	3308      	adds	r3, #8
 80183d8:	2214      	movs	r2, #20
 80183da:	4619      	mov	r1, r3
 80183dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183de:	f000 fce4 	bl	8018daa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80183e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e4:	8b9b      	ldrh	r3, [r3, #28]
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7f6 fdfc 	bl	800efe4 <lwip_htons>
 80183ec:	4603      	mov	r3, r0
 80183ee:	461a      	mov	r2, r3
 80183f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80183f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f6:	2200      	movs	r2, #0
 80183f8:	719a      	strb	r2, [r3, #6]
 80183fa:	2200      	movs	r2, #0
 80183fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80183fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018400:	2200      	movs	r2, #0
 8018402:	729a      	strb	r2, [r3, #10]
 8018404:	2200      	movs	r2, #0
 8018406:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801840a:	685b      	ldr	r3, [r3, #4]
 801840c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801840e:	e00e      	b.n	801842e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8018410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8018416:	f06f 0113 	mvn.w	r1, #19
 801841a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801841c:	f7f7 ffd8 	bl	80103d0 <pbuf_header>
      pbuf_cat(p, r);
 8018420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f7f8 f8d2 	bl	80105cc <pbuf_cat>
      r = iprh->next_pbuf;
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018430:	2b00      	cmp	r3, #0
 8018432:	d1ed      	bne.n	8018410 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018434:	4b1d      	ldr	r3, [pc, #116]	; (80184ac <ip4_reass+0x2a0>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801843a:	429a      	cmp	r2, r3
 801843c:	d102      	bne.n	8018444 <ip4_reass+0x238>
      ipr_prev = NULL;
 801843e:	2300      	movs	r3, #0
 8018440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018442:	e010      	b.n	8018466 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018444:	4b19      	ldr	r3, [pc, #100]	; (80184ac <ip4_reass+0x2a0>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	62fb      	str	r3, [r7, #44]	; 0x2c
 801844a:	e007      	b.n	801845c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018452:	429a      	cmp	r2, r3
 8018454:	d006      	beq.n	8018464 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801845e:	2b00      	cmp	r3, #0
 8018460:	d1f4      	bne.n	801844c <ip4_reass+0x240>
 8018462:	e000      	b.n	8018466 <ip4_reass+0x25a>
          break;
 8018464:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801846a:	f7ff fd37 	bl	8017edc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f7f8 f86c 	bl	801054c <pbuf_clen>
 8018474:	4603      	mov	r3, r0
 8018476:	461a      	mov	r2, r3
 8018478:	4b0b      	ldr	r3, [pc, #44]	; (80184a8 <ip4_reass+0x29c>)
 801847a:	881b      	ldrh	r3, [r3, #0]
 801847c:	1a9b      	subs	r3, r3, r2
 801847e:	b29a      	uxth	r2, r3
 8018480:	4b09      	ldr	r3, [pc, #36]	; (80184a8 <ip4_reass+0x29c>)
 8018482:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	e00a      	b.n	801849e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018488:	2300      	movs	r3, #0
 801848a:	e008      	b.n	801849e <ip4_reass+0x292>
    goto nullreturn;
 801848c:	bf00      	nop
 801848e:	e002      	b.n	8018496 <ip4_reass+0x28a>

nullreturn:
 8018490:	bf00      	nop
 8018492:	e000      	b.n	8018496 <ip4_reass+0x28a>
    goto nullreturn;
 8018494:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018496:	6878      	ldr	r0, [r7, #4]
 8018498:	f7f7 ffbe 	bl	8010418 <pbuf_free>
  return NULL;
 801849c:	2300      	movs	r3, #0
}
 801849e:	4618      	mov	r0, r3
 80184a0:	3738      	adds	r7, #56	; 0x38
 80184a2:	46bd      	mov	sp, r7
 80184a4:	bd80      	pop	{r7, pc}
 80184a6:	bf00      	nop
 80184a8:	200041ec 	.word	0x200041ec
 80184ac:	200041e8 	.word	0x200041e8

080184b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80184b4:	2005      	movs	r0, #5
 80184b6:	f7f7 f9a1 	bl	800f7fc <memp_malloc>
 80184ba:	4603      	mov	r3, r0
}
 80184bc:	4618      	mov	r0, r3
 80184be:	bd80      	pop	{r7, pc}

080184c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b082      	sub	sp, #8
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d106      	bne.n	80184dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80184ce:	4b07      	ldr	r3, [pc, #28]	; (80184ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80184d0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80184d4:	4906      	ldr	r1, [pc, #24]	; (80184f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80184d6:	4807      	ldr	r0, [pc, #28]	; (80184f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80184d8:	f000 fc7a 	bl	8018dd0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80184dc:	6879      	ldr	r1, [r7, #4]
 80184de:	2005      	movs	r0, #5
 80184e0:	f7f7 fa02 	bl	800f8e8 <memp_free>
}
 80184e4:	bf00      	nop
 80184e6:	3708      	adds	r7, #8
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}
 80184ec:	0801c2ec 	.word	0x0801c2ec
 80184f0:	0801c474 	.word	0x0801c474
 80184f4:	0801c354 	.word	0x0801c354

080184f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b084      	sub	sp, #16
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <ipfrag_free_pbuf_custom+0x20>
 801850a:	4b11      	ldr	r3, [pc, #68]	; (8018550 <ipfrag_free_pbuf_custom+0x58>)
 801850c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8018510:	4910      	ldr	r1, [pc, #64]	; (8018554 <ipfrag_free_pbuf_custom+0x5c>)
 8018512:	4811      	ldr	r0, [pc, #68]	; (8018558 <ipfrag_free_pbuf_custom+0x60>)
 8018514:	f000 fc5c 	bl	8018dd0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8018518:	68fa      	ldr	r2, [r7, #12]
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	429a      	cmp	r2, r3
 801851e:	d006      	beq.n	801852e <ipfrag_free_pbuf_custom+0x36>
 8018520:	4b0b      	ldr	r3, [pc, #44]	; (8018550 <ipfrag_free_pbuf_custom+0x58>)
 8018522:	f240 22b9 	movw	r2, #697	; 0x2b9
 8018526:	490d      	ldr	r1, [pc, #52]	; (801855c <ipfrag_free_pbuf_custom+0x64>)
 8018528:	480b      	ldr	r0, [pc, #44]	; (8018558 <ipfrag_free_pbuf_custom+0x60>)
 801852a:	f000 fc51 	bl	8018dd0 <iprintf>
  if (pcr->original != NULL) {
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	695b      	ldr	r3, [r3, #20]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d004      	beq.n	8018540 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	695b      	ldr	r3, [r3, #20]
 801853a:	4618      	mov	r0, r3
 801853c:	f7f7 ff6c 	bl	8010418 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f7ff ffbd 	bl	80184c0 <ip_frag_free_pbuf_custom_ref>
}
 8018546:	bf00      	nop
 8018548:	3710      	adds	r7, #16
 801854a:	46bd      	mov	sp, r7
 801854c:	bd80      	pop	{r7, pc}
 801854e:	bf00      	nop
 8018550:	0801c2ec 	.word	0x0801c2ec
 8018554:	0801c480 	.word	0x0801c480
 8018558:	0801c354 	.word	0x0801c354
 801855c:	0801c48c 	.word	0x0801c48c

08018560 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b092      	sub	sp, #72	; 0x48
 8018564:	af02      	add	r7, sp, #8
 8018566:	60f8      	str	r0, [r7, #12]
 8018568:	60b9      	str	r1, [r7, #8]
 801856a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801856c:	2300      	movs	r3, #0
 801856e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018574:	3b14      	subs	r3, #20
 8018576:	2b00      	cmp	r3, #0
 8018578:	da00      	bge.n	801857c <ip4_frag+0x1c>
 801857a:	3307      	adds	r3, #7
 801857c:	10db      	asrs	r3, r3, #3
 801857e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018580:	2314      	movs	r3, #20
 8018582:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	685b      	ldr	r3, [r3, #4]
 8018588:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801858c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	f003 030f 	and.w	r3, r3, #15
 8018596:	009b      	lsls	r3, r3, #2
 8018598:	2b14      	cmp	r3, #20
 801859a:	d009      	beq.n	80185b0 <ip4_frag+0x50>
 801859c:	4b79      	ldr	r3, [pc, #484]	; (8018784 <ip4_frag+0x224>)
 801859e:	f240 22e1 	movw	r2, #737	; 0x2e1
 80185a2:	4979      	ldr	r1, [pc, #484]	; (8018788 <ip4_frag+0x228>)
 80185a4:	4879      	ldr	r0, [pc, #484]	; (801878c <ip4_frag+0x22c>)
 80185a6:	f000 fc13 	bl	8018dd0 <iprintf>
 80185aa:	f06f 0305 	mvn.w	r3, #5
 80185ae:	e0e5      	b.n	801877c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80185b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b2:	88db      	ldrh	r3, [r3, #6]
 80185b4:	b29b      	uxth	r3, r3
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7f6 fd14 	bl	800efe4 <lwip_htons>
 80185bc:	4603      	mov	r3, r0
 80185be:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80185c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80185c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185c6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80185c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80185ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d009      	beq.n	80185e6 <ip4_frag+0x86>
 80185d2:	4b6c      	ldr	r3, [pc, #432]	; (8018784 <ip4_frag+0x224>)
 80185d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80185d8:	496d      	ldr	r1, [pc, #436]	; (8018790 <ip4_frag+0x230>)
 80185da:	486c      	ldr	r0, [pc, #432]	; (801878c <ip4_frag+0x22c>)
 80185dc:	f000 fbf8 	bl	8018dd0 <iprintf>
 80185e0:	f06f 0305 	mvn.w	r3, #5
 80185e4:	e0ca      	b.n	801877c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	891b      	ldrh	r3, [r3, #8]
 80185ea:	3b14      	subs	r3, #20
 80185ec:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80185ee:	e0bc      	b.n	801876a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80185f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80185f2:	00da      	lsls	r2, r3, #3
 80185f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185f6:	4293      	cmp	r3, r2
 80185f8:	bfa8      	it	ge
 80185fa:	4613      	movge	r3, r2
 80185fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80185fe:	2200      	movs	r2, #0
 8018600:	2114      	movs	r1, #20
 8018602:	2002      	movs	r0, #2
 8018604:	f7f7 fb96 	bl	800fd34 <pbuf_alloc>
 8018608:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801860a:	6a3b      	ldr	r3, [r7, #32]
 801860c:	2b00      	cmp	r3, #0
 801860e:	f000 80b2 	beq.w	8018776 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	895b      	ldrh	r3, [r3, #10]
 8018616:	2b13      	cmp	r3, #19
 8018618:	d806      	bhi.n	8018628 <ip4_frag+0xc8>
 801861a:	4b5a      	ldr	r3, [pc, #360]	; (8018784 <ip4_frag+0x224>)
 801861c:	f240 3209 	movw	r2, #777	; 0x309
 8018620:	495c      	ldr	r1, [pc, #368]	; (8018794 <ip4_frag+0x234>)
 8018622:	485a      	ldr	r0, [pc, #360]	; (801878c <ip4_frag+0x22c>)
 8018624:	f000 fbd4 	bl	8018dd0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018628:	6a3b      	ldr	r3, [r7, #32]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	2214      	movs	r2, #20
 801862e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018630:	4618      	mov	r0, r3
 8018632:	f000 fbba 	bl	8018daa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018636:	6a3b      	ldr	r3, [r7, #32]
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801863c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801863e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8018640:	e04f      	b.n	80186e2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	895a      	ldrh	r2, [r3, #10]
 8018646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018648:	1ad3      	subs	r3, r2, r3
 801864a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801864c:	8b7a      	ldrh	r2, [r7, #26]
 801864e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018650:	4293      	cmp	r3, r2
 8018652:	bf28      	it	cs
 8018654:	4613      	movcs	r3, r2
 8018656:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801865a:	2b00      	cmp	r3, #0
 801865c:	d105      	bne.n	801866a <ip4_frag+0x10a>
        poff = 0;
 801865e:	2300      	movs	r3, #0
 8018660:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	60fb      	str	r3, [r7, #12]
        continue;
 8018668:	e03b      	b.n	80186e2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801866a:	f7ff ff21 	bl	80184b0 <ip_frag_alloc_pbuf_custom_ref>
 801866e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d103      	bne.n	801867e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8018676:	6a38      	ldr	r0, [r7, #32]
 8018678:	f7f7 fece 	bl	8010418 <pbuf_free>
        goto memerr;
 801867c:	e07c      	b.n	8018778 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801867e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018686:	4413      	add	r3, r2
 8018688:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801868a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801868c:	9201      	str	r2, [sp, #4]
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	4603      	mov	r3, r0
 8018692:	2202      	movs	r2, #2
 8018694:	2004      	movs	r0, #4
 8018696:	f7f7 fce1 	bl	801005c <pbuf_alloced_custom>
 801869a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d106      	bne.n	80186b0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80186a2:	6978      	ldr	r0, [r7, #20]
 80186a4:	f7ff ff0c 	bl	80184c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80186a8:	6a38      	ldr	r0, [r7, #32]
 80186aa:	f7f7 feb5 	bl	8010418 <pbuf_free>
        goto memerr;
 80186ae:	e063      	b.n	8018778 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80186b0:	68f8      	ldr	r0, [r7, #12]
 80186b2:	f7f7 ff63 	bl	801057c <pbuf_ref>
      pcr->original = p;
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	68fa      	ldr	r2, [r7, #12]
 80186ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	4a36      	ldr	r2, [pc, #216]	; (8018798 <ip4_frag+0x238>)
 80186c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80186c2:	6939      	ldr	r1, [r7, #16]
 80186c4:	6a38      	ldr	r0, [r7, #32]
 80186c6:	f7f7 ff81 	bl	80105cc <pbuf_cat>
      left_to_copy -= newpbuflen;
 80186ca:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80186cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80186ce:	1ad3      	subs	r3, r2, r3
 80186d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80186d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d004      	beq.n	80186e2 <ip4_frag+0x182>
        poff = 0;
 80186d8:	2300      	movs	r3, #0
 80186da:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80186e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d1ac      	bne.n	8018642 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80186e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80186ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80186ec:	4413      	add	r3, r2
 80186ee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80186f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80186f2:	68bb      	ldr	r3, [r7, #8]
 80186f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80186f6:	3b14      	subs	r3, #20
 80186f8:	429a      	cmp	r2, r3
 80186fa:	bfd4      	ite	le
 80186fc:	2301      	movle	r3, #1
 80186fe:	2300      	movgt	r3, #0
 8018700:	b2db      	uxtb	r3, r3
 8018702:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018704:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018706:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801870a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801870c:	69fb      	ldr	r3, [r7, #28]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d103      	bne.n	801871a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8018712:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018718:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801871a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801871c:	4618      	mov	r0, r3
 801871e:	f7f6 fc61 	bl	800efe4 <lwip_htons>
 8018722:	4603      	mov	r3, r0
 8018724:	461a      	mov	r2, r3
 8018726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018728:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801872a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801872c:	3314      	adds	r3, #20
 801872e:	b29b      	uxth	r3, r3
 8018730:	4618      	mov	r0, r3
 8018732:	f7f6 fc57 	bl	800efe4 <lwip_htons>
 8018736:	4603      	mov	r3, r0
 8018738:	461a      	mov	r2, r3
 801873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018740:	2200      	movs	r2, #0
 8018742:	729a      	strb	r2, [r3, #10]
 8018744:	2200      	movs	r2, #0
 8018746:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	695b      	ldr	r3, [r3, #20]
 801874c:	687a      	ldr	r2, [r7, #4]
 801874e:	6a39      	ldr	r1, [r7, #32]
 8018750:	68b8      	ldr	r0, [r7, #8]
 8018752:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018754:	6a38      	ldr	r0, [r7, #32]
 8018756:	f7f7 fe5f 	bl	8010418 <pbuf_free>
    left -= fragsize;
 801875a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801875c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801875e:	1ad3      	subs	r3, r2, r3
 8018760:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8018762:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018764:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018766:	4413      	add	r3, r2
 8018768:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801876a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801876c:	2b00      	cmp	r3, #0
 801876e:	f47f af3f 	bne.w	80185f0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018772:	2300      	movs	r3, #0
 8018774:	e002      	b.n	801877c <ip4_frag+0x21c>
      goto memerr;
 8018776:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018778:	f04f 33ff 	mov.w	r3, #4294967295
}
 801877c:	4618      	mov	r0, r3
 801877e:	3740      	adds	r7, #64	; 0x40
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}
 8018784:	0801c2ec 	.word	0x0801c2ec
 8018788:	0801c498 	.word	0x0801c498
 801878c:	0801c354 	.word	0x0801c354
 8018790:	0801c4c0 	.word	0x0801c4c0
 8018794:	0801c4dc 	.word	0x0801c4dc
 8018798:	080184f9 	.word	0x080184f9

0801879c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b086      	sub	sp, #24
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80187a6:	230e      	movs	r3, #14
 80187a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	895b      	ldrh	r3, [r3, #10]
 80187ae:	2b0e      	cmp	r3, #14
 80187b0:	d977      	bls.n	80188a2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	685b      	ldr	r3, [r3, #4]
 80187b6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80187b8:	693b      	ldr	r3, [r7, #16]
 80187ba:	7b1a      	ldrb	r2, [r3, #12]
 80187bc:	7b5b      	ldrb	r3, [r3, #13]
 80187be:	021b      	lsls	r3, r3, #8
 80187c0:	4313      	orrs	r3, r2
 80187c2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	781b      	ldrb	r3, [r3, #0]
 80187c8:	f003 0301 	and.w	r3, r3, #1
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d023      	beq.n	8018818 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80187d0:	693b      	ldr	r3, [r7, #16]
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	2b01      	cmp	r3, #1
 80187d6:	d10f      	bne.n	80187f8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	785b      	ldrb	r3, [r3, #1]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d11b      	bne.n	8018818 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80187e4:	2b5e      	cmp	r3, #94	; 0x5e
 80187e6:	d117      	bne.n	8018818 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	7b5b      	ldrb	r3, [r3, #13]
 80187ec:	f043 0310 	orr.w	r3, r3, #16
 80187f0:	b2da      	uxtb	r2, r3
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	735a      	strb	r2, [r3, #13]
 80187f6:	e00f      	b.n	8018818 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80187f8:	693b      	ldr	r3, [r7, #16]
 80187fa:	2206      	movs	r2, #6
 80187fc:	4930      	ldr	r1, [pc, #192]	; (80188c0 <ethernet_input+0x124>)
 80187fe:	4618      	mov	r0, r3
 8018800:	f000 fac4 	bl	8018d8c <memcmp>
 8018804:	4603      	mov	r3, r0
 8018806:	2b00      	cmp	r3, #0
 8018808:	d106      	bne.n	8018818 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	7b5b      	ldrb	r3, [r3, #13]
 801880e:	f043 0308 	orr.w	r3, r3, #8
 8018812:	b2da      	uxtb	r2, r3
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018818:	89fb      	ldrh	r3, [r7, #14]
 801881a:	2b08      	cmp	r3, #8
 801881c:	d003      	beq.n	8018826 <ethernet_input+0x8a>
 801881e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018822:	d01e      	beq.n	8018862 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018824:	e044      	b.n	80188b0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801882c:	f003 0308 	and.w	r3, r3, #8
 8018830:	2b00      	cmp	r3, #0
 8018832:	d038      	beq.n	80188a6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	895b      	ldrh	r3, [r3, #10]
 8018838:	461a      	mov	r2, r3
 801883a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801883e:	429a      	cmp	r2, r3
 8018840:	db33      	blt.n	80188aa <ethernet_input+0x10e>
 8018842:	8afb      	ldrh	r3, [r7, #22]
 8018844:	425b      	negs	r3, r3
 8018846:	b29b      	uxth	r3, r3
 8018848:	b21b      	sxth	r3, r3
 801884a:	4619      	mov	r1, r3
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f7f7 fdbf 	bl	80103d0 <pbuf_header>
 8018852:	4603      	mov	r3, r0
 8018854:	2b00      	cmp	r3, #0
 8018856:	d128      	bne.n	80188aa <ethernet_input+0x10e>
        ip4_input(p, netif);
 8018858:	6839      	ldr	r1, [r7, #0]
 801885a:	6878      	ldr	r0, [r7, #4]
 801885c:	f7fe ff80 	bl	8017760 <ip4_input>
      break;
 8018860:	e01d      	b.n	801889e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018868:	f003 0308 	and.w	r3, r3, #8
 801886c:	2b00      	cmp	r3, #0
 801886e:	d01e      	beq.n	80188ae <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	895b      	ldrh	r3, [r3, #10]
 8018874:	461a      	mov	r2, r3
 8018876:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801887a:	429a      	cmp	r2, r3
 801887c:	db15      	blt.n	80188aa <ethernet_input+0x10e>
 801887e:	8afb      	ldrh	r3, [r7, #22]
 8018880:	425b      	negs	r3, r3
 8018882:	b29b      	uxth	r3, r3
 8018884:	b21b      	sxth	r3, r3
 8018886:	4619      	mov	r1, r3
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	f7f7 fda1 	bl	80103d0 <pbuf_header>
 801888e:	4603      	mov	r3, r0
 8018890:	2b00      	cmp	r3, #0
 8018892:	d10a      	bne.n	80188aa <ethernet_input+0x10e>
        etharp_input(p, netif);
 8018894:	6839      	ldr	r1, [r7, #0]
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f7fe f94e 	bl	8016b38 <etharp_input>
      break;
 801889c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801889e:	2300      	movs	r3, #0
 80188a0:	e00a      	b.n	80188b8 <ethernet_input+0x11c>
    goto free_and_return;
 80188a2:	bf00      	nop
 80188a4:	e004      	b.n	80188b0 <ethernet_input+0x114>
        goto free_and_return;
 80188a6:	bf00      	nop
 80188a8:	e002      	b.n	80188b0 <ethernet_input+0x114>

free_and_return:
 80188aa:	bf00      	nop
 80188ac:	e000      	b.n	80188b0 <ethernet_input+0x114>
        goto free_and_return;
 80188ae:	bf00      	nop
  pbuf_free(p);
 80188b0:	6878      	ldr	r0, [r7, #4]
 80188b2:	f7f7 fdb1 	bl	8010418 <pbuf_free>
  return ERR_OK;
 80188b6:	2300      	movs	r3, #0
}
 80188b8:	4618      	mov	r0, r3
 80188ba:	3718      	adds	r7, #24
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}
 80188c0:	0801c6e0 	.word	0x0801c6e0

080188c4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b086      	sub	sp, #24
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	60f8      	str	r0, [r7, #12]
 80188cc:	60b9      	str	r1, [r7, #8]
 80188ce:	607a      	str	r2, [r7, #4]
 80188d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80188d2:	8c3b      	ldrh	r3, [r7, #32]
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7f6 fb85 	bl	800efe4 <lwip_htons>
 80188da:	4603      	mov	r3, r0
 80188dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80188de:	210e      	movs	r1, #14
 80188e0:	68b8      	ldr	r0, [r7, #8]
 80188e2:	f7f7 fd75 	bl	80103d0 <pbuf_header>
 80188e6:	4603      	mov	r3, r0
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d125      	bne.n	8018938 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	685b      	ldr	r3, [r3, #4]
 80188f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	8afa      	ldrh	r2, [r7, #22]
 80188f6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80188f8:	693b      	ldr	r3, [r7, #16]
 80188fa:	2206      	movs	r2, #6
 80188fc:	6839      	ldr	r1, [r7, #0]
 80188fe:	4618      	mov	r0, r3
 8018900:	f000 fa53 	bl	8018daa <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	3306      	adds	r3, #6
 8018908:	2206      	movs	r2, #6
 801890a:	6879      	ldr	r1, [r7, #4]
 801890c:	4618      	mov	r0, r3
 801890e:	f000 fa4c 	bl	8018daa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018918:	2b06      	cmp	r3, #6
 801891a:	d006      	beq.n	801892a <ethernet_output+0x66>
 801891c:	4b0a      	ldr	r3, [pc, #40]	; (8018948 <ethernet_output+0x84>)
 801891e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018922:	490a      	ldr	r1, [pc, #40]	; (801894c <ethernet_output+0x88>)
 8018924:	480a      	ldr	r0, [pc, #40]	; (8018950 <ethernet_output+0x8c>)
 8018926:	f000 fa53 	bl	8018dd0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	699b      	ldr	r3, [r3, #24]
 801892e:	68b9      	ldr	r1, [r7, #8]
 8018930:	68f8      	ldr	r0, [r7, #12]
 8018932:	4798      	blx	r3
 8018934:	4603      	mov	r3, r0
 8018936:	e002      	b.n	801893e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018938:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801893a:	f06f 0301 	mvn.w	r3, #1
}
 801893e:	4618      	mov	r0, r3
 8018940:	3718      	adds	r7, #24
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	0801c4fc 	.word	0x0801c4fc
 801894c:	0801c554 	.word	0x0801c554
 8018950:	0801c588 	.word	0x0801c588

08018954 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b086      	sub	sp, #24
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
 801895c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801895e:	683b      	ldr	r3, [r7, #0]
 8018960:	60bb      	str	r3, [r7, #8]
 8018962:	2304      	movs	r3, #4
 8018964:	60fb      	str	r3, [r7, #12]
 8018966:	2300      	movs	r3, #0
 8018968:	613b      	str	r3, [r7, #16]
 801896a:	2300      	movs	r3, #0
 801896c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801896e:	f107 0308 	add.w	r3, r7, #8
 8018972:	2100      	movs	r1, #0
 8018974:	4618      	mov	r0, r3
 8018976:	f7f1 fbce 	bl	800a116 <osMessageCreate>
 801897a:	4602      	mov	r2, r0
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d102      	bne.n	801898e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018988:	f04f 33ff 	mov.w	r3, #4294967295
 801898c:	e000      	b.n	8018990 <sys_mbox_new+0x3c>

  return ERR_OK;
 801898e:	2300      	movs	r3, #0
}
 8018990:	4618      	mov	r0, r3
 8018992:	3718      	adds	r7, #24
 8018994:	46bd      	mov	sp, r7
 8018996:	bd80      	pop	{r7, pc}

08018998 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7f1 fc93 	bl	800a2d0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7f1 fca4 	bl	800a2fc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80189b4:	bf00      	nop
 80189b6:	3708      	adds	r7, #8
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b082      	sub	sp, #8
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
 80189c4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80189c6:	bf00      	nop
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	6839      	ldr	r1, [r7, #0]
 80189ce:	f04f 32ff 	mov.w	r2, #4294967295
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7f1 fbc8 	bl	800a168 <osMessagePut>
 80189d8:	4603      	mov	r3, r0
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d1f4      	bne.n	80189c8 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80189de:	bf00      	nop
 80189e0:	3708      	adds	r7, #8
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}

080189e6 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80189e6:	b580      	push	{r7, lr}
 80189e8:	b084      	sub	sp, #16
 80189ea:	af00      	add	r7, sp, #0
 80189ec:	6078      	str	r0, [r7, #4]
 80189ee:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	6839      	ldr	r1, [r7, #0]
 80189f6:	2200      	movs	r2, #0
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7f1 fbb5 	bl	800a168 <osMessagePut>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d102      	bne.n	8018a0a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018a04:	2300      	movs	r3, #0
 8018a06:	73fb      	strb	r3, [r7, #15]
 8018a08:	e001      	b.n	8018a0e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018a0a:	23ff      	movs	r3, #255	; 0xff
 8018a0c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	3710      	adds	r7, #16
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd80      	pop	{r7, pc}

08018a1a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018a1a:	b580      	push	{r7, lr}
 8018a1c:	b08c      	sub	sp, #48	; 0x30
 8018a1e:	af00      	add	r7, sp, #0
 8018a20:	61f8      	str	r0, [r7, #28]
 8018a22:	61b9      	str	r1, [r7, #24]
 8018a24:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018a26:	f7f1 f99f 	bl	8009d68 <osKernelSysTick>
 8018a2a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d017      	beq.n	8018a62 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018a32:	69fb      	ldr	r3, [r7, #28]
 8018a34:	6819      	ldr	r1, [r3, #0]
 8018a36:	f107 0320 	add.w	r3, r7, #32
 8018a3a:	697a      	ldr	r2, [r7, #20]
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f7f1 fbd3 	bl	800a1e8 <osMessageGet>

    if(event.status == osEventMessage)
 8018a42:	6a3b      	ldr	r3, [r7, #32]
 8018a44:	2b10      	cmp	r3, #16
 8018a46:	d109      	bne.n	8018a5c <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a4a:	461a      	mov	r2, r3
 8018a4c:	69bb      	ldr	r3, [r7, #24]
 8018a4e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018a50:	f7f1 f98a 	bl	8009d68 <osKernelSysTick>
 8018a54:	4602      	mov	r2, r0
 8018a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a58:	1ad3      	subs	r3, r2, r3
 8018a5a:	e019      	b.n	8018a90 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018a60:	e016      	b.n	8018a90 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	6819      	ldr	r1, [r3, #0]
 8018a66:	463b      	mov	r3, r7
 8018a68:	f04f 32ff 	mov.w	r2, #4294967295
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7f1 fbbb 	bl	800a1e8 <osMessageGet>
 8018a72:	f107 0320 	add.w	r3, r7, #32
 8018a76:	463a      	mov	r2, r7
 8018a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8018a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a80:	461a      	mov	r2, r3
 8018a82:	69bb      	ldr	r3, [r7, #24]
 8018a84:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018a86:	f7f1 f96f 	bl	8009d68 <osKernelSysTick>
 8018a8a:	4602      	mov	r2, r0
 8018a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a8e:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	3730      	adds	r7, #48	; 0x30
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}

08018a98 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b086      	sub	sp, #24
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
 8018aa0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6819      	ldr	r1, [r3, #0]
 8018aa6:	f107 030c 	add.w	r3, r7, #12
 8018aaa:	2200      	movs	r2, #0
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7f1 fb9b 	bl	800a1e8 <osMessageGet>

  if(event.status == osEventMessage)
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2b10      	cmp	r3, #16
 8018ab6:	d105      	bne.n	8018ac4 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	461a      	mov	r2, r3
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	e001      	b.n	8018ac8 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018ac4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3718      	adds	r7, #24
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018ad0:	b480      	push	{r7}
 8018ad2:	b083      	sub	sp, #12
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d101      	bne.n	8018ae4 <sys_mbox_valid+0x14>
    return 0;
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	e000      	b.n	8018ae6 <sys_mbox_valid+0x16>
  else
    return 1;
 8018ae4:	2301      	movs	r3, #1
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	370c      	adds	r7, #12
 8018aea:	46bd      	mov	sp, r7
 8018aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af0:	4770      	bx	lr

08018af2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018af2:	b480      	push	{r7}
 8018af4:	b083      	sub	sp, #12
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	2200      	movs	r2, #0
 8018afe:	601a      	str	r2, [r3, #0]
}
 8018b00:	bf00      	nop
 8018b02:	370c      	adds	r7, #12
 8018b04:	46bd      	mov	sp, r7
 8018b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0a:	4770      	bx	lr

08018b0c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b084      	sub	sp, #16
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
 8018b14:	460b      	mov	r3, r1
 8018b16:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018b18:	2300      	movs	r3, #0
 8018b1a:	60bb      	str	r3, [r7, #8]
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018b20:	f107 0308 	add.w	r3, r7, #8
 8018b24:	2101      	movs	r1, #1
 8018b26:	4618      	mov	r0, r3
 8018b28:	f7f1 fa2a 	bl	8009f80 <osSemaphoreCreate>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d102      	bne.n	8018b40 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b3e:	e009      	b.n	8018b54 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018b40:	78fb      	ldrb	r3, [r7, #3]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d105      	bne.n	8018b52 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2100      	movs	r1, #0
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7f1 fa4b 	bl	8009fe8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018b52:	2300      	movs	r3, #0
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3710      	adds	r7, #16
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}

08018b5c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b084      	sub	sp, #16
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
 8018b64:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018b66:	f7f1 f8ff 	bl	8009d68 <osKernelSysTick>
 8018b6a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018b6c:	683b      	ldr	r3, [r7, #0]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d011      	beq.n	8018b96 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	6839      	ldr	r1, [r7, #0]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7f1 fa35 	bl	8009fe8 <osSemaphoreWait>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d105      	bne.n	8018b90 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018b84:	f7f1 f8f0 	bl	8009d68 <osKernelSysTick>
 8018b88:	4602      	mov	r2, r0
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	1ad3      	subs	r3, r2, r3
 8018b8e:	e012      	b.n	8018bb6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b90:	f04f 33ff 	mov.w	r3, #4294967295
 8018b94:	e00f      	b.n	8018bb6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018b96:	bf00      	nop
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7f1 fa21 	bl	8009fe8 <osSemaphoreWait>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d1f5      	bne.n	8018b98 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018bac:	f7f1 f8dc 	bl	8009d68 <osKernelSysTick>
 8018bb0:	4602      	mov	r2, r0
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3710      	adds	r7, #16
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}

08018bbe <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b082      	sub	sp, #8
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f7f1 fa5a 	bl	800a084 <osSemaphoreRelease>
}
 8018bd0:	bf00      	nop
 8018bd2:	3708      	adds	r7, #8
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}

08018bd8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	4618      	mov	r0, r3
 8018be6:	f7f1 fa83 	bl	800a0f0 <osSemaphoreDelete>
}
 8018bea:	bf00      	nop
 8018bec:	3708      	adds	r7, #8
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018bf2:	b480      	push	{r7}
 8018bf4:	b083      	sub	sp, #12
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d101      	bne.n	8018c06 <sys_sem_valid+0x14>
    return 0;
 8018c02:	2300      	movs	r3, #0
 8018c04:	e000      	b.n	8018c08 <sys_sem_valid+0x16>
  else
    return 1;
 8018c06:	2301      	movs	r3, #1
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	370c      	adds	r7, #12
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c12:	4770      	bx	lr

08018c14 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018c14:	b480      	push	{r7}
 8018c16:	b083      	sub	sp, #12
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	601a      	str	r2, [r3, #0]
}
 8018c22:	bf00      	nop
 8018c24:	370c      	adds	r7, #12
 8018c26:	46bd      	mov	sp, r7
 8018c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2c:	4770      	bx	lr
	...

08018c30 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018c34:	4803      	ldr	r0, [pc, #12]	; (8018c44 <sys_init+0x14>)
 8018c36:	f7f1 f907 	bl	8009e48 <osMutexCreate>
 8018c3a:	4602      	mov	r2, r0
 8018c3c:	4b02      	ldr	r3, [pc, #8]	; (8018c48 <sys_init+0x18>)
 8018c3e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018c40:	bf00      	nop
 8018c42:	bd80      	pop	{r7, pc}
 8018c44:	0801c6f0 	.word	0x0801c6f0
 8018c48:	200079d0 	.word	0x200079d0

08018c4c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b084      	sub	sp, #16
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018c54:	2300      	movs	r3, #0
 8018c56:	60bb      	str	r3, [r7, #8]
 8018c58:	2300      	movs	r3, #0
 8018c5a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018c5c:	f107 0308 	add.w	r3, r7, #8
 8018c60:	4618      	mov	r0, r3
 8018c62:	f7f1 f8f1 	bl	8009e48 <osMutexCreate>
 8018c66:	4602      	mov	r2, r0
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d102      	bne.n	8018c7a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c74:	f04f 33ff 	mov.w	r3, #4294967295
 8018c78:	e000      	b.n	8018c7c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018c7a:	2300      	movs	r3, #0
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3710      	adds	r7, #16
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	f04f 31ff 	mov.w	r1, #4294967295
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7f1 f8ef 	bl	8009e78 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018c9a:	bf00      	nop
 8018c9c:	3708      	adds	r7, #8
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd80      	pop	{r7, pc}

08018ca2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018ca2:	b580      	push	{r7, lr}
 8018ca4:	b082      	sub	sp, #8
 8018ca6:	af00      	add	r7, sp, #0
 8018ca8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7f1 f930 	bl	8009f14 <osMutexRelease>
}
 8018cb4:	bf00      	nop
 8018cb6:	3708      	adds	r7, #8
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}

08018cbc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08c      	sub	sp, #48	; 0x30
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	60f8      	str	r0, [r7, #12]
 8018cc4:	60b9      	str	r1, [r7, #8]
 8018cc6:	607a      	str	r2, [r7, #4]
 8018cc8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018cca:	f107 0314 	add.w	r3, r7, #20
 8018cce:	2200      	movs	r2, #0
 8018cd0:	601a      	str	r2, [r3, #0]
 8018cd2:	605a      	str	r2, [r3, #4]
 8018cd4:	609a      	str	r2, [r3, #8]
 8018cd6:	60da      	str	r2, [r3, #12]
 8018cd8:	611a      	str	r2, [r3, #16]
 8018cda:	615a      	str	r2, [r3, #20]
 8018cdc:	619a      	str	r2, [r3, #24]
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	617b      	str	r3, [r7, #20]
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	61bb      	str	r3, [r7, #24]
 8018ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ce8:	b21b      	sxth	r3, r3
 8018cea:	83bb      	strh	r3, [r7, #28]
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018cf0:	f107 0314 	add.w	r3, r7, #20
 8018cf4:	6879      	ldr	r1, [r7, #4]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7f1 f846 	bl	8009d88 <osThreadCreate>
 8018cfc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3730      	adds	r7, #48	; 0x30
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
	...

08018d08 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018d0c:	4b04      	ldr	r3, [pc, #16]	; (8018d20 <sys_arch_protect+0x18>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f04f 31ff 	mov.w	r1, #4294967295
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7f1 f8af 	bl	8009e78 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018d1a:	2301      	movs	r3, #1
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	bd80      	pop	{r7, pc}
 8018d20:	200079d0 	.word	0x200079d0

08018d24 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018d2c:	4b04      	ldr	r3, [pc, #16]	; (8018d40 <sys_arch_unprotect+0x1c>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7f1 f8ef 	bl	8009f14 <osMutexRelease>
}
 8018d36:	bf00      	nop
 8018d38:	3708      	adds	r7, #8
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	bf00      	nop
 8018d40:	200079d0 	.word	0x200079d0

08018d44 <__libc_init_array>:
 8018d44:	b570      	push	{r4, r5, r6, lr}
 8018d46:	4e0d      	ldr	r6, [pc, #52]	; (8018d7c <__libc_init_array+0x38>)
 8018d48:	4c0d      	ldr	r4, [pc, #52]	; (8018d80 <__libc_init_array+0x3c>)
 8018d4a:	1ba4      	subs	r4, r4, r6
 8018d4c:	10a4      	asrs	r4, r4, #2
 8018d4e:	2500      	movs	r5, #0
 8018d50:	42a5      	cmp	r5, r4
 8018d52:	d109      	bne.n	8018d68 <__libc_init_array+0x24>
 8018d54:	4e0b      	ldr	r6, [pc, #44]	; (8018d84 <__libc_init_array+0x40>)
 8018d56:	4c0c      	ldr	r4, [pc, #48]	; (8018d88 <__libc_init_array+0x44>)
 8018d58:	f000 ff1e 	bl	8019b98 <_init>
 8018d5c:	1ba4      	subs	r4, r4, r6
 8018d5e:	10a4      	asrs	r4, r4, #2
 8018d60:	2500      	movs	r5, #0
 8018d62:	42a5      	cmp	r5, r4
 8018d64:	d105      	bne.n	8018d72 <__libc_init_array+0x2e>
 8018d66:	bd70      	pop	{r4, r5, r6, pc}
 8018d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018d6c:	4798      	blx	r3
 8018d6e:	3501      	adds	r5, #1
 8018d70:	e7ee      	b.n	8018d50 <__libc_init_array+0xc>
 8018d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018d76:	4798      	blx	r3
 8018d78:	3501      	adds	r5, #1
 8018d7a:	e7f2      	b.n	8018d62 <__libc_init_array+0x1e>
 8018d7c:	0801c798 	.word	0x0801c798
 8018d80:	0801c798 	.word	0x0801c798
 8018d84:	0801c798 	.word	0x0801c798
 8018d88:	0801c79c 	.word	0x0801c79c

08018d8c <memcmp>:
 8018d8c:	b530      	push	{r4, r5, lr}
 8018d8e:	2400      	movs	r4, #0
 8018d90:	42a2      	cmp	r2, r4
 8018d92:	d101      	bne.n	8018d98 <memcmp+0xc>
 8018d94:	2000      	movs	r0, #0
 8018d96:	e007      	b.n	8018da8 <memcmp+0x1c>
 8018d98:	5d03      	ldrb	r3, [r0, r4]
 8018d9a:	3401      	adds	r4, #1
 8018d9c:	190d      	adds	r5, r1, r4
 8018d9e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018da2:	42ab      	cmp	r3, r5
 8018da4:	d0f4      	beq.n	8018d90 <memcmp+0x4>
 8018da6:	1b58      	subs	r0, r3, r5
 8018da8:	bd30      	pop	{r4, r5, pc}

08018daa <memcpy>:
 8018daa:	b510      	push	{r4, lr}
 8018dac:	1e43      	subs	r3, r0, #1
 8018dae:	440a      	add	r2, r1
 8018db0:	4291      	cmp	r1, r2
 8018db2:	d100      	bne.n	8018db6 <memcpy+0xc>
 8018db4:	bd10      	pop	{r4, pc}
 8018db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018dbe:	e7f7      	b.n	8018db0 <memcpy+0x6>

08018dc0 <memset>:
 8018dc0:	4402      	add	r2, r0
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	4293      	cmp	r3, r2
 8018dc6:	d100      	bne.n	8018dca <memset+0xa>
 8018dc8:	4770      	bx	lr
 8018dca:	f803 1b01 	strb.w	r1, [r3], #1
 8018dce:	e7f9      	b.n	8018dc4 <memset+0x4>

08018dd0 <iprintf>:
 8018dd0:	b40f      	push	{r0, r1, r2, r3}
 8018dd2:	4b0a      	ldr	r3, [pc, #40]	; (8018dfc <iprintf+0x2c>)
 8018dd4:	b513      	push	{r0, r1, r4, lr}
 8018dd6:	681c      	ldr	r4, [r3, #0]
 8018dd8:	b124      	cbz	r4, 8018de4 <iprintf+0x14>
 8018dda:	69a3      	ldr	r3, [r4, #24]
 8018ddc:	b913      	cbnz	r3, 8018de4 <iprintf+0x14>
 8018dde:	4620      	mov	r0, r4
 8018de0:	f000 f84e 	bl	8018e80 <__sinit>
 8018de4:	ab05      	add	r3, sp, #20
 8018de6:	9a04      	ldr	r2, [sp, #16]
 8018de8:	68a1      	ldr	r1, [r4, #8]
 8018dea:	9301      	str	r3, [sp, #4]
 8018dec:	4620      	mov	r0, r4
 8018dee:	f000 f955 	bl	801909c <_vfiprintf_r>
 8018df2:	b002      	add	sp, #8
 8018df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018df8:	b004      	add	sp, #16
 8018dfa:	4770      	bx	lr
 8018dfc:	20000034 	.word	0x20000034

08018e00 <std>:
 8018e00:	2300      	movs	r3, #0
 8018e02:	b510      	push	{r4, lr}
 8018e04:	4604      	mov	r4, r0
 8018e06:	e9c0 3300 	strd	r3, r3, [r0]
 8018e0a:	6083      	str	r3, [r0, #8]
 8018e0c:	8181      	strh	r1, [r0, #12]
 8018e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8018e10:	81c2      	strh	r2, [r0, #14]
 8018e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e16:	6183      	str	r3, [r0, #24]
 8018e18:	4619      	mov	r1, r3
 8018e1a:	2208      	movs	r2, #8
 8018e1c:	305c      	adds	r0, #92	; 0x5c
 8018e1e:	f7ff ffcf 	bl	8018dc0 <memset>
 8018e22:	4b05      	ldr	r3, [pc, #20]	; (8018e38 <std+0x38>)
 8018e24:	6263      	str	r3, [r4, #36]	; 0x24
 8018e26:	4b05      	ldr	r3, [pc, #20]	; (8018e3c <std+0x3c>)
 8018e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e2a:	4b05      	ldr	r3, [pc, #20]	; (8018e40 <std+0x40>)
 8018e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e2e:	4b05      	ldr	r3, [pc, #20]	; (8018e44 <std+0x44>)
 8018e30:	6224      	str	r4, [r4, #32]
 8018e32:	6323      	str	r3, [r4, #48]	; 0x30
 8018e34:	bd10      	pop	{r4, pc}
 8018e36:	bf00      	nop
 8018e38:	080195f9 	.word	0x080195f9
 8018e3c:	0801961b 	.word	0x0801961b
 8018e40:	08019653 	.word	0x08019653
 8018e44:	08019677 	.word	0x08019677

08018e48 <_cleanup_r>:
 8018e48:	4901      	ldr	r1, [pc, #4]	; (8018e50 <_cleanup_r+0x8>)
 8018e4a:	f000 b885 	b.w	8018f58 <_fwalk_reent>
 8018e4e:	bf00      	nop
 8018e50:	08019951 	.word	0x08019951

08018e54 <__sfmoreglue>:
 8018e54:	b570      	push	{r4, r5, r6, lr}
 8018e56:	1e4a      	subs	r2, r1, #1
 8018e58:	2568      	movs	r5, #104	; 0x68
 8018e5a:	4355      	muls	r5, r2
 8018e5c:	460e      	mov	r6, r1
 8018e5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018e62:	f000 f897 	bl	8018f94 <_malloc_r>
 8018e66:	4604      	mov	r4, r0
 8018e68:	b140      	cbz	r0, 8018e7c <__sfmoreglue+0x28>
 8018e6a:	2100      	movs	r1, #0
 8018e6c:	e9c0 1600 	strd	r1, r6, [r0]
 8018e70:	300c      	adds	r0, #12
 8018e72:	60a0      	str	r0, [r4, #8]
 8018e74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018e78:	f7ff ffa2 	bl	8018dc0 <memset>
 8018e7c:	4620      	mov	r0, r4
 8018e7e:	bd70      	pop	{r4, r5, r6, pc}

08018e80 <__sinit>:
 8018e80:	6983      	ldr	r3, [r0, #24]
 8018e82:	b510      	push	{r4, lr}
 8018e84:	4604      	mov	r4, r0
 8018e86:	bb33      	cbnz	r3, 8018ed6 <__sinit+0x56>
 8018e88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018e8c:	6503      	str	r3, [r0, #80]	; 0x50
 8018e8e:	4b12      	ldr	r3, [pc, #72]	; (8018ed8 <__sinit+0x58>)
 8018e90:	4a12      	ldr	r2, [pc, #72]	; (8018edc <__sinit+0x5c>)
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	6282      	str	r2, [r0, #40]	; 0x28
 8018e96:	4298      	cmp	r0, r3
 8018e98:	bf04      	itt	eq
 8018e9a:	2301      	moveq	r3, #1
 8018e9c:	6183      	streq	r3, [r0, #24]
 8018e9e:	f000 f81f 	bl	8018ee0 <__sfp>
 8018ea2:	6060      	str	r0, [r4, #4]
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	f000 f81b 	bl	8018ee0 <__sfp>
 8018eaa:	60a0      	str	r0, [r4, #8]
 8018eac:	4620      	mov	r0, r4
 8018eae:	f000 f817 	bl	8018ee0 <__sfp>
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	60e0      	str	r0, [r4, #12]
 8018eb6:	2104      	movs	r1, #4
 8018eb8:	6860      	ldr	r0, [r4, #4]
 8018eba:	f7ff ffa1 	bl	8018e00 <std>
 8018ebe:	2201      	movs	r2, #1
 8018ec0:	2109      	movs	r1, #9
 8018ec2:	68a0      	ldr	r0, [r4, #8]
 8018ec4:	f7ff ff9c 	bl	8018e00 <std>
 8018ec8:	2202      	movs	r2, #2
 8018eca:	2112      	movs	r1, #18
 8018ecc:	68e0      	ldr	r0, [r4, #12]
 8018ece:	f7ff ff97 	bl	8018e00 <std>
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	61a3      	str	r3, [r4, #24]
 8018ed6:	bd10      	pop	{r4, pc}
 8018ed8:	0801c6f8 	.word	0x0801c6f8
 8018edc:	08018e49 	.word	0x08018e49

08018ee0 <__sfp>:
 8018ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ee2:	4b1b      	ldr	r3, [pc, #108]	; (8018f50 <__sfp+0x70>)
 8018ee4:	681e      	ldr	r6, [r3, #0]
 8018ee6:	69b3      	ldr	r3, [r6, #24]
 8018ee8:	4607      	mov	r7, r0
 8018eea:	b913      	cbnz	r3, 8018ef2 <__sfp+0x12>
 8018eec:	4630      	mov	r0, r6
 8018eee:	f7ff ffc7 	bl	8018e80 <__sinit>
 8018ef2:	3648      	adds	r6, #72	; 0x48
 8018ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018ef8:	3b01      	subs	r3, #1
 8018efa:	d503      	bpl.n	8018f04 <__sfp+0x24>
 8018efc:	6833      	ldr	r3, [r6, #0]
 8018efe:	b133      	cbz	r3, 8018f0e <__sfp+0x2e>
 8018f00:	6836      	ldr	r6, [r6, #0]
 8018f02:	e7f7      	b.n	8018ef4 <__sfp+0x14>
 8018f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018f08:	b16d      	cbz	r5, 8018f26 <__sfp+0x46>
 8018f0a:	3468      	adds	r4, #104	; 0x68
 8018f0c:	e7f4      	b.n	8018ef8 <__sfp+0x18>
 8018f0e:	2104      	movs	r1, #4
 8018f10:	4638      	mov	r0, r7
 8018f12:	f7ff ff9f 	bl	8018e54 <__sfmoreglue>
 8018f16:	6030      	str	r0, [r6, #0]
 8018f18:	2800      	cmp	r0, #0
 8018f1a:	d1f1      	bne.n	8018f00 <__sfp+0x20>
 8018f1c:	230c      	movs	r3, #12
 8018f1e:	603b      	str	r3, [r7, #0]
 8018f20:	4604      	mov	r4, r0
 8018f22:	4620      	mov	r0, r4
 8018f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f26:	4b0b      	ldr	r3, [pc, #44]	; (8018f54 <__sfp+0x74>)
 8018f28:	6665      	str	r5, [r4, #100]	; 0x64
 8018f2a:	e9c4 5500 	strd	r5, r5, [r4]
 8018f2e:	60a5      	str	r5, [r4, #8]
 8018f30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018f34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018f38:	2208      	movs	r2, #8
 8018f3a:	4629      	mov	r1, r5
 8018f3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f40:	f7ff ff3e 	bl	8018dc0 <memset>
 8018f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018f4c:	e7e9      	b.n	8018f22 <__sfp+0x42>
 8018f4e:	bf00      	nop
 8018f50:	0801c6f8 	.word	0x0801c6f8
 8018f54:	ffff0001 	.word	0xffff0001

08018f58 <_fwalk_reent>:
 8018f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f5c:	4680      	mov	r8, r0
 8018f5e:	4689      	mov	r9, r1
 8018f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018f64:	2600      	movs	r6, #0
 8018f66:	b914      	cbnz	r4, 8018f6e <_fwalk_reent+0x16>
 8018f68:	4630      	mov	r0, r6
 8018f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018f72:	3f01      	subs	r7, #1
 8018f74:	d501      	bpl.n	8018f7a <_fwalk_reent+0x22>
 8018f76:	6824      	ldr	r4, [r4, #0]
 8018f78:	e7f5      	b.n	8018f66 <_fwalk_reent+0xe>
 8018f7a:	89ab      	ldrh	r3, [r5, #12]
 8018f7c:	2b01      	cmp	r3, #1
 8018f7e:	d907      	bls.n	8018f90 <_fwalk_reent+0x38>
 8018f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f84:	3301      	adds	r3, #1
 8018f86:	d003      	beq.n	8018f90 <_fwalk_reent+0x38>
 8018f88:	4629      	mov	r1, r5
 8018f8a:	4640      	mov	r0, r8
 8018f8c:	47c8      	blx	r9
 8018f8e:	4306      	orrs	r6, r0
 8018f90:	3568      	adds	r5, #104	; 0x68
 8018f92:	e7ee      	b.n	8018f72 <_fwalk_reent+0x1a>

08018f94 <_malloc_r>:
 8018f94:	b570      	push	{r4, r5, r6, lr}
 8018f96:	1ccd      	adds	r5, r1, #3
 8018f98:	f025 0503 	bic.w	r5, r5, #3
 8018f9c:	3508      	adds	r5, #8
 8018f9e:	2d0c      	cmp	r5, #12
 8018fa0:	bf38      	it	cc
 8018fa2:	250c      	movcc	r5, #12
 8018fa4:	2d00      	cmp	r5, #0
 8018fa6:	4606      	mov	r6, r0
 8018fa8:	db01      	blt.n	8018fae <_malloc_r+0x1a>
 8018faa:	42a9      	cmp	r1, r5
 8018fac:	d903      	bls.n	8018fb6 <_malloc_r+0x22>
 8018fae:	230c      	movs	r3, #12
 8018fb0:	6033      	str	r3, [r6, #0]
 8018fb2:	2000      	movs	r0, #0
 8018fb4:	bd70      	pop	{r4, r5, r6, pc}
 8018fb6:	f000 fd6b 	bl	8019a90 <__malloc_lock>
 8018fba:	4a21      	ldr	r2, [pc, #132]	; (8019040 <_malloc_r+0xac>)
 8018fbc:	6814      	ldr	r4, [r2, #0]
 8018fbe:	4621      	mov	r1, r4
 8018fc0:	b991      	cbnz	r1, 8018fe8 <_malloc_r+0x54>
 8018fc2:	4c20      	ldr	r4, [pc, #128]	; (8019044 <_malloc_r+0xb0>)
 8018fc4:	6823      	ldr	r3, [r4, #0]
 8018fc6:	b91b      	cbnz	r3, 8018fd0 <_malloc_r+0x3c>
 8018fc8:	4630      	mov	r0, r6
 8018fca:	f000 fb05 	bl	80195d8 <_sbrk_r>
 8018fce:	6020      	str	r0, [r4, #0]
 8018fd0:	4629      	mov	r1, r5
 8018fd2:	4630      	mov	r0, r6
 8018fd4:	f000 fb00 	bl	80195d8 <_sbrk_r>
 8018fd8:	1c43      	adds	r3, r0, #1
 8018fda:	d124      	bne.n	8019026 <_malloc_r+0x92>
 8018fdc:	230c      	movs	r3, #12
 8018fde:	6033      	str	r3, [r6, #0]
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	f000 fd56 	bl	8019a92 <__malloc_unlock>
 8018fe6:	e7e4      	b.n	8018fb2 <_malloc_r+0x1e>
 8018fe8:	680b      	ldr	r3, [r1, #0]
 8018fea:	1b5b      	subs	r3, r3, r5
 8018fec:	d418      	bmi.n	8019020 <_malloc_r+0x8c>
 8018fee:	2b0b      	cmp	r3, #11
 8018ff0:	d90f      	bls.n	8019012 <_malloc_r+0x7e>
 8018ff2:	600b      	str	r3, [r1, #0]
 8018ff4:	50cd      	str	r5, [r1, r3]
 8018ff6:	18cc      	adds	r4, r1, r3
 8018ff8:	4630      	mov	r0, r6
 8018ffa:	f000 fd4a 	bl	8019a92 <__malloc_unlock>
 8018ffe:	f104 000b 	add.w	r0, r4, #11
 8019002:	1d23      	adds	r3, r4, #4
 8019004:	f020 0007 	bic.w	r0, r0, #7
 8019008:	1ac3      	subs	r3, r0, r3
 801900a:	d0d3      	beq.n	8018fb4 <_malloc_r+0x20>
 801900c:	425a      	negs	r2, r3
 801900e:	50e2      	str	r2, [r4, r3]
 8019010:	e7d0      	b.n	8018fb4 <_malloc_r+0x20>
 8019012:	428c      	cmp	r4, r1
 8019014:	684b      	ldr	r3, [r1, #4]
 8019016:	bf16      	itet	ne
 8019018:	6063      	strne	r3, [r4, #4]
 801901a:	6013      	streq	r3, [r2, #0]
 801901c:	460c      	movne	r4, r1
 801901e:	e7eb      	b.n	8018ff8 <_malloc_r+0x64>
 8019020:	460c      	mov	r4, r1
 8019022:	6849      	ldr	r1, [r1, #4]
 8019024:	e7cc      	b.n	8018fc0 <_malloc_r+0x2c>
 8019026:	1cc4      	adds	r4, r0, #3
 8019028:	f024 0403 	bic.w	r4, r4, #3
 801902c:	42a0      	cmp	r0, r4
 801902e:	d005      	beq.n	801903c <_malloc_r+0xa8>
 8019030:	1a21      	subs	r1, r4, r0
 8019032:	4630      	mov	r0, r6
 8019034:	f000 fad0 	bl	80195d8 <_sbrk_r>
 8019038:	3001      	adds	r0, #1
 801903a:	d0cf      	beq.n	8018fdc <_malloc_r+0x48>
 801903c:	6025      	str	r5, [r4, #0]
 801903e:	e7db      	b.n	8018ff8 <_malloc_r+0x64>
 8019040:	200041f0 	.word	0x200041f0
 8019044:	200041f4 	.word	0x200041f4

08019048 <__sfputc_r>:
 8019048:	6893      	ldr	r3, [r2, #8]
 801904a:	3b01      	subs	r3, #1
 801904c:	2b00      	cmp	r3, #0
 801904e:	b410      	push	{r4}
 8019050:	6093      	str	r3, [r2, #8]
 8019052:	da08      	bge.n	8019066 <__sfputc_r+0x1e>
 8019054:	6994      	ldr	r4, [r2, #24]
 8019056:	42a3      	cmp	r3, r4
 8019058:	db01      	blt.n	801905e <__sfputc_r+0x16>
 801905a:	290a      	cmp	r1, #10
 801905c:	d103      	bne.n	8019066 <__sfputc_r+0x1e>
 801905e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019062:	f000 bb0d 	b.w	8019680 <__swbuf_r>
 8019066:	6813      	ldr	r3, [r2, #0]
 8019068:	1c58      	adds	r0, r3, #1
 801906a:	6010      	str	r0, [r2, #0]
 801906c:	7019      	strb	r1, [r3, #0]
 801906e:	4608      	mov	r0, r1
 8019070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019074:	4770      	bx	lr

08019076 <__sfputs_r>:
 8019076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019078:	4606      	mov	r6, r0
 801907a:	460f      	mov	r7, r1
 801907c:	4614      	mov	r4, r2
 801907e:	18d5      	adds	r5, r2, r3
 8019080:	42ac      	cmp	r4, r5
 8019082:	d101      	bne.n	8019088 <__sfputs_r+0x12>
 8019084:	2000      	movs	r0, #0
 8019086:	e007      	b.n	8019098 <__sfputs_r+0x22>
 8019088:	463a      	mov	r2, r7
 801908a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801908e:	4630      	mov	r0, r6
 8019090:	f7ff ffda 	bl	8019048 <__sfputc_r>
 8019094:	1c43      	adds	r3, r0, #1
 8019096:	d1f3      	bne.n	8019080 <__sfputs_r+0xa>
 8019098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801909c <_vfiprintf_r>:
 801909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a0:	460c      	mov	r4, r1
 80190a2:	b09d      	sub	sp, #116	; 0x74
 80190a4:	4617      	mov	r7, r2
 80190a6:	461d      	mov	r5, r3
 80190a8:	4606      	mov	r6, r0
 80190aa:	b118      	cbz	r0, 80190b4 <_vfiprintf_r+0x18>
 80190ac:	6983      	ldr	r3, [r0, #24]
 80190ae:	b90b      	cbnz	r3, 80190b4 <_vfiprintf_r+0x18>
 80190b0:	f7ff fee6 	bl	8018e80 <__sinit>
 80190b4:	4b7c      	ldr	r3, [pc, #496]	; (80192a8 <_vfiprintf_r+0x20c>)
 80190b6:	429c      	cmp	r4, r3
 80190b8:	d158      	bne.n	801916c <_vfiprintf_r+0xd0>
 80190ba:	6874      	ldr	r4, [r6, #4]
 80190bc:	89a3      	ldrh	r3, [r4, #12]
 80190be:	0718      	lsls	r0, r3, #28
 80190c0:	d55e      	bpl.n	8019180 <_vfiprintf_r+0xe4>
 80190c2:	6923      	ldr	r3, [r4, #16]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d05b      	beq.n	8019180 <_vfiprintf_r+0xe4>
 80190c8:	2300      	movs	r3, #0
 80190ca:	9309      	str	r3, [sp, #36]	; 0x24
 80190cc:	2320      	movs	r3, #32
 80190ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190d2:	2330      	movs	r3, #48	; 0x30
 80190d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190d8:	9503      	str	r5, [sp, #12]
 80190da:	f04f 0b01 	mov.w	fp, #1
 80190de:	46b8      	mov	r8, r7
 80190e0:	4645      	mov	r5, r8
 80190e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80190e6:	b10b      	cbz	r3, 80190ec <_vfiprintf_r+0x50>
 80190e8:	2b25      	cmp	r3, #37	; 0x25
 80190ea:	d154      	bne.n	8019196 <_vfiprintf_r+0xfa>
 80190ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80190f0:	d00b      	beq.n	801910a <_vfiprintf_r+0x6e>
 80190f2:	4653      	mov	r3, sl
 80190f4:	463a      	mov	r2, r7
 80190f6:	4621      	mov	r1, r4
 80190f8:	4630      	mov	r0, r6
 80190fa:	f7ff ffbc 	bl	8019076 <__sfputs_r>
 80190fe:	3001      	adds	r0, #1
 8019100:	f000 80c2 	beq.w	8019288 <_vfiprintf_r+0x1ec>
 8019104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019106:	4453      	add	r3, sl
 8019108:	9309      	str	r3, [sp, #36]	; 0x24
 801910a:	f898 3000 	ldrb.w	r3, [r8]
 801910e:	2b00      	cmp	r3, #0
 8019110:	f000 80ba 	beq.w	8019288 <_vfiprintf_r+0x1ec>
 8019114:	2300      	movs	r3, #0
 8019116:	f04f 32ff 	mov.w	r2, #4294967295
 801911a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801911e:	9304      	str	r3, [sp, #16]
 8019120:	9307      	str	r3, [sp, #28]
 8019122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019126:	931a      	str	r3, [sp, #104]	; 0x68
 8019128:	46a8      	mov	r8, r5
 801912a:	2205      	movs	r2, #5
 801912c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019130:	485e      	ldr	r0, [pc, #376]	; (80192ac <_vfiprintf_r+0x210>)
 8019132:	f7e7 f8d5 	bl	80002e0 <memchr>
 8019136:	9b04      	ldr	r3, [sp, #16]
 8019138:	bb78      	cbnz	r0, 801919a <_vfiprintf_r+0xfe>
 801913a:	06d9      	lsls	r1, r3, #27
 801913c:	bf44      	itt	mi
 801913e:	2220      	movmi	r2, #32
 8019140:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019144:	071a      	lsls	r2, r3, #28
 8019146:	bf44      	itt	mi
 8019148:	222b      	movmi	r2, #43	; 0x2b
 801914a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801914e:	782a      	ldrb	r2, [r5, #0]
 8019150:	2a2a      	cmp	r2, #42	; 0x2a
 8019152:	d02a      	beq.n	80191aa <_vfiprintf_r+0x10e>
 8019154:	9a07      	ldr	r2, [sp, #28]
 8019156:	46a8      	mov	r8, r5
 8019158:	2000      	movs	r0, #0
 801915a:	250a      	movs	r5, #10
 801915c:	4641      	mov	r1, r8
 801915e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019162:	3b30      	subs	r3, #48	; 0x30
 8019164:	2b09      	cmp	r3, #9
 8019166:	d969      	bls.n	801923c <_vfiprintf_r+0x1a0>
 8019168:	b360      	cbz	r0, 80191c4 <_vfiprintf_r+0x128>
 801916a:	e024      	b.n	80191b6 <_vfiprintf_r+0x11a>
 801916c:	4b50      	ldr	r3, [pc, #320]	; (80192b0 <_vfiprintf_r+0x214>)
 801916e:	429c      	cmp	r4, r3
 8019170:	d101      	bne.n	8019176 <_vfiprintf_r+0xda>
 8019172:	68b4      	ldr	r4, [r6, #8]
 8019174:	e7a2      	b.n	80190bc <_vfiprintf_r+0x20>
 8019176:	4b4f      	ldr	r3, [pc, #316]	; (80192b4 <_vfiprintf_r+0x218>)
 8019178:	429c      	cmp	r4, r3
 801917a:	bf08      	it	eq
 801917c:	68f4      	ldreq	r4, [r6, #12]
 801917e:	e79d      	b.n	80190bc <_vfiprintf_r+0x20>
 8019180:	4621      	mov	r1, r4
 8019182:	4630      	mov	r0, r6
 8019184:	f000 fae0 	bl	8019748 <__swsetup_r>
 8019188:	2800      	cmp	r0, #0
 801918a:	d09d      	beq.n	80190c8 <_vfiprintf_r+0x2c>
 801918c:	f04f 30ff 	mov.w	r0, #4294967295
 8019190:	b01d      	add	sp, #116	; 0x74
 8019192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019196:	46a8      	mov	r8, r5
 8019198:	e7a2      	b.n	80190e0 <_vfiprintf_r+0x44>
 801919a:	4a44      	ldr	r2, [pc, #272]	; (80192ac <_vfiprintf_r+0x210>)
 801919c:	1a80      	subs	r0, r0, r2
 801919e:	fa0b f000 	lsl.w	r0, fp, r0
 80191a2:	4318      	orrs	r0, r3
 80191a4:	9004      	str	r0, [sp, #16]
 80191a6:	4645      	mov	r5, r8
 80191a8:	e7be      	b.n	8019128 <_vfiprintf_r+0x8c>
 80191aa:	9a03      	ldr	r2, [sp, #12]
 80191ac:	1d11      	adds	r1, r2, #4
 80191ae:	6812      	ldr	r2, [r2, #0]
 80191b0:	9103      	str	r1, [sp, #12]
 80191b2:	2a00      	cmp	r2, #0
 80191b4:	db01      	blt.n	80191ba <_vfiprintf_r+0x11e>
 80191b6:	9207      	str	r2, [sp, #28]
 80191b8:	e004      	b.n	80191c4 <_vfiprintf_r+0x128>
 80191ba:	4252      	negs	r2, r2
 80191bc:	f043 0302 	orr.w	r3, r3, #2
 80191c0:	9207      	str	r2, [sp, #28]
 80191c2:	9304      	str	r3, [sp, #16]
 80191c4:	f898 3000 	ldrb.w	r3, [r8]
 80191c8:	2b2e      	cmp	r3, #46	; 0x2e
 80191ca:	d10e      	bne.n	80191ea <_vfiprintf_r+0x14e>
 80191cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80191d0:	2b2a      	cmp	r3, #42	; 0x2a
 80191d2:	d138      	bne.n	8019246 <_vfiprintf_r+0x1aa>
 80191d4:	9b03      	ldr	r3, [sp, #12]
 80191d6:	1d1a      	adds	r2, r3, #4
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	9203      	str	r2, [sp, #12]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	bfb8      	it	lt
 80191e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80191e4:	f108 0802 	add.w	r8, r8, #2
 80191e8:	9305      	str	r3, [sp, #20]
 80191ea:	4d33      	ldr	r5, [pc, #204]	; (80192b8 <_vfiprintf_r+0x21c>)
 80191ec:	f898 1000 	ldrb.w	r1, [r8]
 80191f0:	2203      	movs	r2, #3
 80191f2:	4628      	mov	r0, r5
 80191f4:	f7e7 f874 	bl	80002e0 <memchr>
 80191f8:	b140      	cbz	r0, 801920c <_vfiprintf_r+0x170>
 80191fa:	2340      	movs	r3, #64	; 0x40
 80191fc:	1b40      	subs	r0, r0, r5
 80191fe:	fa03 f000 	lsl.w	r0, r3, r0
 8019202:	9b04      	ldr	r3, [sp, #16]
 8019204:	4303      	orrs	r3, r0
 8019206:	f108 0801 	add.w	r8, r8, #1
 801920a:	9304      	str	r3, [sp, #16]
 801920c:	f898 1000 	ldrb.w	r1, [r8]
 8019210:	482a      	ldr	r0, [pc, #168]	; (80192bc <_vfiprintf_r+0x220>)
 8019212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019216:	2206      	movs	r2, #6
 8019218:	f108 0701 	add.w	r7, r8, #1
 801921c:	f7e7 f860 	bl	80002e0 <memchr>
 8019220:	2800      	cmp	r0, #0
 8019222:	d037      	beq.n	8019294 <_vfiprintf_r+0x1f8>
 8019224:	4b26      	ldr	r3, [pc, #152]	; (80192c0 <_vfiprintf_r+0x224>)
 8019226:	bb1b      	cbnz	r3, 8019270 <_vfiprintf_r+0x1d4>
 8019228:	9b03      	ldr	r3, [sp, #12]
 801922a:	3307      	adds	r3, #7
 801922c:	f023 0307 	bic.w	r3, r3, #7
 8019230:	3308      	adds	r3, #8
 8019232:	9303      	str	r3, [sp, #12]
 8019234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019236:	444b      	add	r3, r9
 8019238:	9309      	str	r3, [sp, #36]	; 0x24
 801923a:	e750      	b.n	80190de <_vfiprintf_r+0x42>
 801923c:	fb05 3202 	mla	r2, r5, r2, r3
 8019240:	2001      	movs	r0, #1
 8019242:	4688      	mov	r8, r1
 8019244:	e78a      	b.n	801915c <_vfiprintf_r+0xc0>
 8019246:	2300      	movs	r3, #0
 8019248:	f108 0801 	add.w	r8, r8, #1
 801924c:	9305      	str	r3, [sp, #20]
 801924e:	4619      	mov	r1, r3
 8019250:	250a      	movs	r5, #10
 8019252:	4640      	mov	r0, r8
 8019254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019258:	3a30      	subs	r2, #48	; 0x30
 801925a:	2a09      	cmp	r2, #9
 801925c:	d903      	bls.n	8019266 <_vfiprintf_r+0x1ca>
 801925e:	2b00      	cmp	r3, #0
 8019260:	d0c3      	beq.n	80191ea <_vfiprintf_r+0x14e>
 8019262:	9105      	str	r1, [sp, #20]
 8019264:	e7c1      	b.n	80191ea <_vfiprintf_r+0x14e>
 8019266:	fb05 2101 	mla	r1, r5, r1, r2
 801926a:	2301      	movs	r3, #1
 801926c:	4680      	mov	r8, r0
 801926e:	e7f0      	b.n	8019252 <_vfiprintf_r+0x1b6>
 8019270:	ab03      	add	r3, sp, #12
 8019272:	9300      	str	r3, [sp, #0]
 8019274:	4622      	mov	r2, r4
 8019276:	4b13      	ldr	r3, [pc, #76]	; (80192c4 <_vfiprintf_r+0x228>)
 8019278:	a904      	add	r1, sp, #16
 801927a:	4630      	mov	r0, r6
 801927c:	f3af 8000 	nop.w
 8019280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019284:	4681      	mov	r9, r0
 8019286:	d1d5      	bne.n	8019234 <_vfiprintf_r+0x198>
 8019288:	89a3      	ldrh	r3, [r4, #12]
 801928a:	065b      	lsls	r3, r3, #25
 801928c:	f53f af7e 	bmi.w	801918c <_vfiprintf_r+0xf0>
 8019290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019292:	e77d      	b.n	8019190 <_vfiprintf_r+0xf4>
 8019294:	ab03      	add	r3, sp, #12
 8019296:	9300      	str	r3, [sp, #0]
 8019298:	4622      	mov	r2, r4
 801929a:	4b0a      	ldr	r3, [pc, #40]	; (80192c4 <_vfiprintf_r+0x228>)
 801929c:	a904      	add	r1, sp, #16
 801929e:	4630      	mov	r0, r6
 80192a0:	f000 f888 	bl	80193b4 <_printf_i>
 80192a4:	e7ec      	b.n	8019280 <_vfiprintf_r+0x1e4>
 80192a6:	bf00      	nop
 80192a8:	0801c71c 	.word	0x0801c71c
 80192ac:	0801c75c 	.word	0x0801c75c
 80192b0:	0801c73c 	.word	0x0801c73c
 80192b4:	0801c6fc 	.word	0x0801c6fc
 80192b8:	0801c762 	.word	0x0801c762
 80192bc:	0801c766 	.word	0x0801c766
 80192c0:	00000000 	.word	0x00000000
 80192c4:	08019077 	.word	0x08019077

080192c8 <_printf_common>:
 80192c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192cc:	4691      	mov	r9, r2
 80192ce:	461f      	mov	r7, r3
 80192d0:	688a      	ldr	r2, [r1, #8]
 80192d2:	690b      	ldr	r3, [r1, #16]
 80192d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80192d8:	4293      	cmp	r3, r2
 80192da:	bfb8      	it	lt
 80192dc:	4613      	movlt	r3, r2
 80192de:	f8c9 3000 	str.w	r3, [r9]
 80192e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80192e6:	4606      	mov	r6, r0
 80192e8:	460c      	mov	r4, r1
 80192ea:	b112      	cbz	r2, 80192f2 <_printf_common+0x2a>
 80192ec:	3301      	adds	r3, #1
 80192ee:	f8c9 3000 	str.w	r3, [r9]
 80192f2:	6823      	ldr	r3, [r4, #0]
 80192f4:	0699      	lsls	r1, r3, #26
 80192f6:	bf42      	ittt	mi
 80192f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80192fc:	3302      	addmi	r3, #2
 80192fe:	f8c9 3000 	strmi.w	r3, [r9]
 8019302:	6825      	ldr	r5, [r4, #0]
 8019304:	f015 0506 	ands.w	r5, r5, #6
 8019308:	d107      	bne.n	801931a <_printf_common+0x52>
 801930a:	f104 0a19 	add.w	sl, r4, #25
 801930e:	68e3      	ldr	r3, [r4, #12]
 8019310:	f8d9 2000 	ldr.w	r2, [r9]
 8019314:	1a9b      	subs	r3, r3, r2
 8019316:	42ab      	cmp	r3, r5
 8019318:	dc28      	bgt.n	801936c <_printf_common+0xa4>
 801931a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801931e:	6822      	ldr	r2, [r4, #0]
 8019320:	3300      	adds	r3, #0
 8019322:	bf18      	it	ne
 8019324:	2301      	movne	r3, #1
 8019326:	0692      	lsls	r2, r2, #26
 8019328:	d42d      	bmi.n	8019386 <_printf_common+0xbe>
 801932a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801932e:	4639      	mov	r1, r7
 8019330:	4630      	mov	r0, r6
 8019332:	47c0      	blx	r8
 8019334:	3001      	adds	r0, #1
 8019336:	d020      	beq.n	801937a <_printf_common+0xb2>
 8019338:	6823      	ldr	r3, [r4, #0]
 801933a:	68e5      	ldr	r5, [r4, #12]
 801933c:	f8d9 2000 	ldr.w	r2, [r9]
 8019340:	f003 0306 	and.w	r3, r3, #6
 8019344:	2b04      	cmp	r3, #4
 8019346:	bf08      	it	eq
 8019348:	1aad      	subeq	r5, r5, r2
 801934a:	68a3      	ldr	r3, [r4, #8]
 801934c:	6922      	ldr	r2, [r4, #16]
 801934e:	bf0c      	ite	eq
 8019350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019354:	2500      	movne	r5, #0
 8019356:	4293      	cmp	r3, r2
 8019358:	bfc4      	itt	gt
 801935a:	1a9b      	subgt	r3, r3, r2
 801935c:	18ed      	addgt	r5, r5, r3
 801935e:	f04f 0900 	mov.w	r9, #0
 8019362:	341a      	adds	r4, #26
 8019364:	454d      	cmp	r5, r9
 8019366:	d11a      	bne.n	801939e <_printf_common+0xd6>
 8019368:	2000      	movs	r0, #0
 801936a:	e008      	b.n	801937e <_printf_common+0xb6>
 801936c:	2301      	movs	r3, #1
 801936e:	4652      	mov	r2, sl
 8019370:	4639      	mov	r1, r7
 8019372:	4630      	mov	r0, r6
 8019374:	47c0      	blx	r8
 8019376:	3001      	adds	r0, #1
 8019378:	d103      	bne.n	8019382 <_printf_common+0xba>
 801937a:	f04f 30ff 	mov.w	r0, #4294967295
 801937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019382:	3501      	adds	r5, #1
 8019384:	e7c3      	b.n	801930e <_printf_common+0x46>
 8019386:	18e1      	adds	r1, r4, r3
 8019388:	1c5a      	adds	r2, r3, #1
 801938a:	2030      	movs	r0, #48	; 0x30
 801938c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019390:	4422      	add	r2, r4
 8019392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801939a:	3302      	adds	r3, #2
 801939c:	e7c5      	b.n	801932a <_printf_common+0x62>
 801939e:	2301      	movs	r3, #1
 80193a0:	4622      	mov	r2, r4
 80193a2:	4639      	mov	r1, r7
 80193a4:	4630      	mov	r0, r6
 80193a6:	47c0      	blx	r8
 80193a8:	3001      	adds	r0, #1
 80193aa:	d0e6      	beq.n	801937a <_printf_common+0xb2>
 80193ac:	f109 0901 	add.w	r9, r9, #1
 80193b0:	e7d8      	b.n	8019364 <_printf_common+0x9c>
	...

080193b4 <_printf_i>:
 80193b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80193bc:	460c      	mov	r4, r1
 80193be:	7e09      	ldrb	r1, [r1, #24]
 80193c0:	b085      	sub	sp, #20
 80193c2:	296e      	cmp	r1, #110	; 0x6e
 80193c4:	4617      	mov	r7, r2
 80193c6:	4606      	mov	r6, r0
 80193c8:	4698      	mov	r8, r3
 80193ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193cc:	f000 80b3 	beq.w	8019536 <_printf_i+0x182>
 80193d0:	d822      	bhi.n	8019418 <_printf_i+0x64>
 80193d2:	2963      	cmp	r1, #99	; 0x63
 80193d4:	d036      	beq.n	8019444 <_printf_i+0x90>
 80193d6:	d80a      	bhi.n	80193ee <_printf_i+0x3a>
 80193d8:	2900      	cmp	r1, #0
 80193da:	f000 80b9 	beq.w	8019550 <_printf_i+0x19c>
 80193de:	2958      	cmp	r1, #88	; 0x58
 80193e0:	f000 8083 	beq.w	80194ea <_printf_i+0x136>
 80193e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80193e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80193ec:	e032      	b.n	8019454 <_printf_i+0xa0>
 80193ee:	2964      	cmp	r1, #100	; 0x64
 80193f0:	d001      	beq.n	80193f6 <_printf_i+0x42>
 80193f2:	2969      	cmp	r1, #105	; 0x69
 80193f4:	d1f6      	bne.n	80193e4 <_printf_i+0x30>
 80193f6:	6820      	ldr	r0, [r4, #0]
 80193f8:	6813      	ldr	r3, [r2, #0]
 80193fa:	0605      	lsls	r5, r0, #24
 80193fc:	f103 0104 	add.w	r1, r3, #4
 8019400:	d52a      	bpl.n	8019458 <_printf_i+0xa4>
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	6011      	str	r1, [r2, #0]
 8019406:	2b00      	cmp	r3, #0
 8019408:	da03      	bge.n	8019412 <_printf_i+0x5e>
 801940a:	222d      	movs	r2, #45	; 0x2d
 801940c:	425b      	negs	r3, r3
 801940e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019412:	486f      	ldr	r0, [pc, #444]	; (80195d0 <_printf_i+0x21c>)
 8019414:	220a      	movs	r2, #10
 8019416:	e039      	b.n	801948c <_printf_i+0xd8>
 8019418:	2973      	cmp	r1, #115	; 0x73
 801941a:	f000 809d 	beq.w	8019558 <_printf_i+0x1a4>
 801941e:	d808      	bhi.n	8019432 <_printf_i+0x7e>
 8019420:	296f      	cmp	r1, #111	; 0x6f
 8019422:	d020      	beq.n	8019466 <_printf_i+0xb2>
 8019424:	2970      	cmp	r1, #112	; 0x70
 8019426:	d1dd      	bne.n	80193e4 <_printf_i+0x30>
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	f043 0320 	orr.w	r3, r3, #32
 801942e:	6023      	str	r3, [r4, #0]
 8019430:	e003      	b.n	801943a <_printf_i+0x86>
 8019432:	2975      	cmp	r1, #117	; 0x75
 8019434:	d017      	beq.n	8019466 <_printf_i+0xb2>
 8019436:	2978      	cmp	r1, #120	; 0x78
 8019438:	d1d4      	bne.n	80193e4 <_printf_i+0x30>
 801943a:	2378      	movs	r3, #120	; 0x78
 801943c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019440:	4864      	ldr	r0, [pc, #400]	; (80195d4 <_printf_i+0x220>)
 8019442:	e055      	b.n	80194f0 <_printf_i+0x13c>
 8019444:	6813      	ldr	r3, [r2, #0]
 8019446:	1d19      	adds	r1, r3, #4
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	6011      	str	r1, [r2, #0]
 801944c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019454:	2301      	movs	r3, #1
 8019456:	e08c      	b.n	8019572 <_printf_i+0x1be>
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	6011      	str	r1, [r2, #0]
 801945c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019460:	bf18      	it	ne
 8019462:	b21b      	sxthne	r3, r3
 8019464:	e7cf      	b.n	8019406 <_printf_i+0x52>
 8019466:	6813      	ldr	r3, [r2, #0]
 8019468:	6825      	ldr	r5, [r4, #0]
 801946a:	1d18      	adds	r0, r3, #4
 801946c:	6010      	str	r0, [r2, #0]
 801946e:	0628      	lsls	r0, r5, #24
 8019470:	d501      	bpl.n	8019476 <_printf_i+0xc2>
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	e002      	b.n	801947c <_printf_i+0xc8>
 8019476:	0668      	lsls	r0, r5, #25
 8019478:	d5fb      	bpl.n	8019472 <_printf_i+0xbe>
 801947a:	881b      	ldrh	r3, [r3, #0]
 801947c:	4854      	ldr	r0, [pc, #336]	; (80195d0 <_printf_i+0x21c>)
 801947e:	296f      	cmp	r1, #111	; 0x6f
 8019480:	bf14      	ite	ne
 8019482:	220a      	movne	r2, #10
 8019484:	2208      	moveq	r2, #8
 8019486:	2100      	movs	r1, #0
 8019488:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801948c:	6865      	ldr	r5, [r4, #4]
 801948e:	60a5      	str	r5, [r4, #8]
 8019490:	2d00      	cmp	r5, #0
 8019492:	f2c0 8095 	blt.w	80195c0 <_printf_i+0x20c>
 8019496:	6821      	ldr	r1, [r4, #0]
 8019498:	f021 0104 	bic.w	r1, r1, #4
 801949c:	6021      	str	r1, [r4, #0]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d13d      	bne.n	801951e <_printf_i+0x16a>
 80194a2:	2d00      	cmp	r5, #0
 80194a4:	f040 808e 	bne.w	80195c4 <_printf_i+0x210>
 80194a8:	4665      	mov	r5, ip
 80194aa:	2a08      	cmp	r2, #8
 80194ac:	d10b      	bne.n	80194c6 <_printf_i+0x112>
 80194ae:	6823      	ldr	r3, [r4, #0]
 80194b0:	07db      	lsls	r3, r3, #31
 80194b2:	d508      	bpl.n	80194c6 <_printf_i+0x112>
 80194b4:	6923      	ldr	r3, [r4, #16]
 80194b6:	6862      	ldr	r2, [r4, #4]
 80194b8:	429a      	cmp	r2, r3
 80194ba:	bfde      	ittt	le
 80194bc:	2330      	movle	r3, #48	; 0x30
 80194be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80194c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80194c6:	ebac 0305 	sub.w	r3, ip, r5
 80194ca:	6123      	str	r3, [r4, #16]
 80194cc:	f8cd 8000 	str.w	r8, [sp]
 80194d0:	463b      	mov	r3, r7
 80194d2:	aa03      	add	r2, sp, #12
 80194d4:	4621      	mov	r1, r4
 80194d6:	4630      	mov	r0, r6
 80194d8:	f7ff fef6 	bl	80192c8 <_printf_common>
 80194dc:	3001      	adds	r0, #1
 80194de:	d14d      	bne.n	801957c <_printf_i+0x1c8>
 80194e0:	f04f 30ff 	mov.w	r0, #4294967295
 80194e4:	b005      	add	sp, #20
 80194e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194ea:	4839      	ldr	r0, [pc, #228]	; (80195d0 <_printf_i+0x21c>)
 80194ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80194f0:	6813      	ldr	r3, [r2, #0]
 80194f2:	6821      	ldr	r1, [r4, #0]
 80194f4:	1d1d      	adds	r5, r3, #4
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	6015      	str	r5, [r2, #0]
 80194fa:	060a      	lsls	r2, r1, #24
 80194fc:	d50b      	bpl.n	8019516 <_printf_i+0x162>
 80194fe:	07ca      	lsls	r2, r1, #31
 8019500:	bf44      	itt	mi
 8019502:	f041 0120 	orrmi.w	r1, r1, #32
 8019506:	6021      	strmi	r1, [r4, #0]
 8019508:	b91b      	cbnz	r3, 8019512 <_printf_i+0x15e>
 801950a:	6822      	ldr	r2, [r4, #0]
 801950c:	f022 0220 	bic.w	r2, r2, #32
 8019510:	6022      	str	r2, [r4, #0]
 8019512:	2210      	movs	r2, #16
 8019514:	e7b7      	b.n	8019486 <_printf_i+0xd2>
 8019516:	064d      	lsls	r5, r1, #25
 8019518:	bf48      	it	mi
 801951a:	b29b      	uxthmi	r3, r3
 801951c:	e7ef      	b.n	80194fe <_printf_i+0x14a>
 801951e:	4665      	mov	r5, ip
 8019520:	fbb3 f1f2 	udiv	r1, r3, r2
 8019524:	fb02 3311 	mls	r3, r2, r1, r3
 8019528:	5cc3      	ldrb	r3, [r0, r3]
 801952a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801952e:	460b      	mov	r3, r1
 8019530:	2900      	cmp	r1, #0
 8019532:	d1f5      	bne.n	8019520 <_printf_i+0x16c>
 8019534:	e7b9      	b.n	80194aa <_printf_i+0xf6>
 8019536:	6813      	ldr	r3, [r2, #0]
 8019538:	6825      	ldr	r5, [r4, #0]
 801953a:	6961      	ldr	r1, [r4, #20]
 801953c:	1d18      	adds	r0, r3, #4
 801953e:	6010      	str	r0, [r2, #0]
 8019540:	0628      	lsls	r0, r5, #24
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	d501      	bpl.n	801954a <_printf_i+0x196>
 8019546:	6019      	str	r1, [r3, #0]
 8019548:	e002      	b.n	8019550 <_printf_i+0x19c>
 801954a:	066a      	lsls	r2, r5, #25
 801954c:	d5fb      	bpl.n	8019546 <_printf_i+0x192>
 801954e:	8019      	strh	r1, [r3, #0]
 8019550:	2300      	movs	r3, #0
 8019552:	6123      	str	r3, [r4, #16]
 8019554:	4665      	mov	r5, ip
 8019556:	e7b9      	b.n	80194cc <_printf_i+0x118>
 8019558:	6813      	ldr	r3, [r2, #0]
 801955a:	1d19      	adds	r1, r3, #4
 801955c:	6011      	str	r1, [r2, #0]
 801955e:	681d      	ldr	r5, [r3, #0]
 8019560:	6862      	ldr	r2, [r4, #4]
 8019562:	2100      	movs	r1, #0
 8019564:	4628      	mov	r0, r5
 8019566:	f7e6 febb 	bl	80002e0 <memchr>
 801956a:	b108      	cbz	r0, 8019570 <_printf_i+0x1bc>
 801956c:	1b40      	subs	r0, r0, r5
 801956e:	6060      	str	r0, [r4, #4]
 8019570:	6863      	ldr	r3, [r4, #4]
 8019572:	6123      	str	r3, [r4, #16]
 8019574:	2300      	movs	r3, #0
 8019576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801957a:	e7a7      	b.n	80194cc <_printf_i+0x118>
 801957c:	6923      	ldr	r3, [r4, #16]
 801957e:	462a      	mov	r2, r5
 8019580:	4639      	mov	r1, r7
 8019582:	4630      	mov	r0, r6
 8019584:	47c0      	blx	r8
 8019586:	3001      	adds	r0, #1
 8019588:	d0aa      	beq.n	80194e0 <_printf_i+0x12c>
 801958a:	6823      	ldr	r3, [r4, #0]
 801958c:	079b      	lsls	r3, r3, #30
 801958e:	d413      	bmi.n	80195b8 <_printf_i+0x204>
 8019590:	68e0      	ldr	r0, [r4, #12]
 8019592:	9b03      	ldr	r3, [sp, #12]
 8019594:	4298      	cmp	r0, r3
 8019596:	bfb8      	it	lt
 8019598:	4618      	movlt	r0, r3
 801959a:	e7a3      	b.n	80194e4 <_printf_i+0x130>
 801959c:	2301      	movs	r3, #1
 801959e:	464a      	mov	r2, r9
 80195a0:	4639      	mov	r1, r7
 80195a2:	4630      	mov	r0, r6
 80195a4:	47c0      	blx	r8
 80195a6:	3001      	adds	r0, #1
 80195a8:	d09a      	beq.n	80194e0 <_printf_i+0x12c>
 80195aa:	3501      	adds	r5, #1
 80195ac:	68e3      	ldr	r3, [r4, #12]
 80195ae:	9a03      	ldr	r2, [sp, #12]
 80195b0:	1a9b      	subs	r3, r3, r2
 80195b2:	42ab      	cmp	r3, r5
 80195b4:	dcf2      	bgt.n	801959c <_printf_i+0x1e8>
 80195b6:	e7eb      	b.n	8019590 <_printf_i+0x1dc>
 80195b8:	2500      	movs	r5, #0
 80195ba:	f104 0919 	add.w	r9, r4, #25
 80195be:	e7f5      	b.n	80195ac <_printf_i+0x1f8>
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d1ac      	bne.n	801951e <_printf_i+0x16a>
 80195c4:	7803      	ldrb	r3, [r0, #0]
 80195c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80195ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80195ce:	e76c      	b.n	80194aa <_printf_i+0xf6>
 80195d0:	0801c76d 	.word	0x0801c76d
 80195d4:	0801c77e 	.word	0x0801c77e

080195d8 <_sbrk_r>:
 80195d8:	b538      	push	{r3, r4, r5, lr}
 80195da:	4c06      	ldr	r4, [pc, #24]	; (80195f4 <_sbrk_r+0x1c>)
 80195dc:	2300      	movs	r3, #0
 80195de:	4605      	mov	r5, r0
 80195e0:	4608      	mov	r0, r1
 80195e2:	6023      	str	r3, [r4, #0]
 80195e4:	f7e7 fd3c 	bl	8001060 <_sbrk>
 80195e8:	1c43      	adds	r3, r0, #1
 80195ea:	d102      	bne.n	80195f2 <_sbrk_r+0x1a>
 80195ec:	6823      	ldr	r3, [r4, #0]
 80195ee:	b103      	cbz	r3, 80195f2 <_sbrk_r+0x1a>
 80195f0:	602b      	str	r3, [r5, #0]
 80195f2:	bd38      	pop	{r3, r4, r5, pc}
 80195f4:	200079cc 	.word	0x200079cc

080195f8 <__sread>:
 80195f8:	b510      	push	{r4, lr}
 80195fa:	460c      	mov	r4, r1
 80195fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019600:	f000 fa96 	bl	8019b30 <_read_r>
 8019604:	2800      	cmp	r0, #0
 8019606:	bfab      	itete	ge
 8019608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801960a:	89a3      	ldrhlt	r3, [r4, #12]
 801960c:	181b      	addge	r3, r3, r0
 801960e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019612:	bfac      	ite	ge
 8019614:	6563      	strge	r3, [r4, #84]	; 0x54
 8019616:	81a3      	strhlt	r3, [r4, #12]
 8019618:	bd10      	pop	{r4, pc}

0801961a <__swrite>:
 801961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801961e:	461f      	mov	r7, r3
 8019620:	898b      	ldrh	r3, [r1, #12]
 8019622:	05db      	lsls	r3, r3, #23
 8019624:	4605      	mov	r5, r0
 8019626:	460c      	mov	r4, r1
 8019628:	4616      	mov	r6, r2
 801962a:	d505      	bpl.n	8019638 <__swrite+0x1e>
 801962c:	2302      	movs	r3, #2
 801962e:	2200      	movs	r2, #0
 8019630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019634:	f000 f9b6 	bl	80199a4 <_lseek_r>
 8019638:	89a3      	ldrh	r3, [r4, #12]
 801963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801963e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019642:	81a3      	strh	r3, [r4, #12]
 8019644:	4632      	mov	r2, r6
 8019646:	463b      	mov	r3, r7
 8019648:	4628      	mov	r0, r5
 801964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801964e:	f000 b869 	b.w	8019724 <_write_r>

08019652 <__sseek>:
 8019652:	b510      	push	{r4, lr}
 8019654:	460c      	mov	r4, r1
 8019656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801965a:	f000 f9a3 	bl	80199a4 <_lseek_r>
 801965e:	1c43      	adds	r3, r0, #1
 8019660:	89a3      	ldrh	r3, [r4, #12]
 8019662:	bf15      	itete	ne
 8019664:	6560      	strne	r0, [r4, #84]	; 0x54
 8019666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801966a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801966e:	81a3      	strheq	r3, [r4, #12]
 8019670:	bf18      	it	ne
 8019672:	81a3      	strhne	r3, [r4, #12]
 8019674:	bd10      	pop	{r4, pc}

08019676 <__sclose>:
 8019676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801967a:	f000 b8d3 	b.w	8019824 <_close_r>
	...

08019680 <__swbuf_r>:
 8019680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019682:	460e      	mov	r6, r1
 8019684:	4614      	mov	r4, r2
 8019686:	4605      	mov	r5, r0
 8019688:	b118      	cbz	r0, 8019692 <__swbuf_r+0x12>
 801968a:	6983      	ldr	r3, [r0, #24]
 801968c:	b90b      	cbnz	r3, 8019692 <__swbuf_r+0x12>
 801968e:	f7ff fbf7 	bl	8018e80 <__sinit>
 8019692:	4b21      	ldr	r3, [pc, #132]	; (8019718 <__swbuf_r+0x98>)
 8019694:	429c      	cmp	r4, r3
 8019696:	d12a      	bne.n	80196ee <__swbuf_r+0x6e>
 8019698:	686c      	ldr	r4, [r5, #4]
 801969a:	69a3      	ldr	r3, [r4, #24]
 801969c:	60a3      	str	r3, [r4, #8]
 801969e:	89a3      	ldrh	r3, [r4, #12]
 80196a0:	071a      	lsls	r2, r3, #28
 80196a2:	d52e      	bpl.n	8019702 <__swbuf_r+0x82>
 80196a4:	6923      	ldr	r3, [r4, #16]
 80196a6:	b363      	cbz	r3, 8019702 <__swbuf_r+0x82>
 80196a8:	6923      	ldr	r3, [r4, #16]
 80196aa:	6820      	ldr	r0, [r4, #0]
 80196ac:	1ac0      	subs	r0, r0, r3
 80196ae:	6963      	ldr	r3, [r4, #20]
 80196b0:	b2f6      	uxtb	r6, r6
 80196b2:	4283      	cmp	r3, r0
 80196b4:	4637      	mov	r7, r6
 80196b6:	dc04      	bgt.n	80196c2 <__swbuf_r+0x42>
 80196b8:	4621      	mov	r1, r4
 80196ba:	4628      	mov	r0, r5
 80196bc:	f000 f948 	bl	8019950 <_fflush_r>
 80196c0:	bb28      	cbnz	r0, 801970e <__swbuf_r+0x8e>
 80196c2:	68a3      	ldr	r3, [r4, #8]
 80196c4:	3b01      	subs	r3, #1
 80196c6:	60a3      	str	r3, [r4, #8]
 80196c8:	6823      	ldr	r3, [r4, #0]
 80196ca:	1c5a      	adds	r2, r3, #1
 80196cc:	6022      	str	r2, [r4, #0]
 80196ce:	701e      	strb	r6, [r3, #0]
 80196d0:	6963      	ldr	r3, [r4, #20]
 80196d2:	3001      	adds	r0, #1
 80196d4:	4283      	cmp	r3, r0
 80196d6:	d004      	beq.n	80196e2 <__swbuf_r+0x62>
 80196d8:	89a3      	ldrh	r3, [r4, #12]
 80196da:	07db      	lsls	r3, r3, #31
 80196dc:	d519      	bpl.n	8019712 <__swbuf_r+0x92>
 80196de:	2e0a      	cmp	r6, #10
 80196e0:	d117      	bne.n	8019712 <__swbuf_r+0x92>
 80196e2:	4621      	mov	r1, r4
 80196e4:	4628      	mov	r0, r5
 80196e6:	f000 f933 	bl	8019950 <_fflush_r>
 80196ea:	b190      	cbz	r0, 8019712 <__swbuf_r+0x92>
 80196ec:	e00f      	b.n	801970e <__swbuf_r+0x8e>
 80196ee:	4b0b      	ldr	r3, [pc, #44]	; (801971c <__swbuf_r+0x9c>)
 80196f0:	429c      	cmp	r4, r3
 80196f2:	d101      	bne.n	80196f8 <__swbuf_r+0x78>
 80196f4:	68ac      	ldr	r4, [r5, #8]
 80196f6:	e7d0      	b.n	801969a <__swbuf_r+0x1a>
 80196f8:	4b09      	ldr	r3, [pc, #36]	; (8019720 <__swbuf_r+0xa0>)
 80196fa:	429c      	cmp	r4, r3
 80196fc:	bf08      	it	eq
 80196fe:	68ec      	ldreq	r4, [r5, #12]
 8019700:	e7cb      	b.n	801969a <__swbuf_r+0x1a>
 8019702:	4621      	mov	r1, r4
 8019704:	4628      	mov	r0, r5
 8019706:	f000 f81f 	bl	8019748 <__swsetup_r>
 801970a:	2800      	cmp	r0, #0
 801970c:	d0cc      	beq.n	80196a8 <__swbuf_r+0x28>
 801970e:	f04f 37ff 	mov.w	r7, #4294967295
 8019712:	4638      	mov	r0, r7
 8019714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019716:	bf00      	nop
 8019718:	0801c71c 	.word	0x0801c71c
 801971c:	0801c73c 	.word	0x0801c73c
 8019720:	0801c6fc 	.word	0x0801c6fc

08019724 <_write_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4c07      	ldr	r4, [pc, #28]	; (8019744 <_write_r+0x20>)
 8019728:	4605      	mov	r5, r0
 801972a:	4608      	mov	r0, r1
 801972c:	4611      	mov	r1, r2
 801972e:	2200      	movs	r2, #0
 8019730:	6022      	str	r2, [r4, #0]
 8019732:	461a      	mov	r2, r3
 8019734:	f7e7 fc43 	bl	8000fbe <_write>
 8019738:	1c43      	adds	r3, r0, #1
 801973a:	d102      	bne.n	8019742 <_write_r+0x1e>
 801973c:	6823      	ldr	r3, [r4, #0]
 801973e:	b103      	cbz	r3, 8019742 <_write_r+0x1e>
 8019740:	602b      	str	r3, [r5, #0]
 8019742:	bd38      	pop	{r3, r4, r5, pc}
 8019744:	200079cc 	.word	0x200079cc

08019748 <__swsetup_r>:
 8019748:	4b32      	ldr	r3, [pc, #200]	; (8019814 <__swsetup_r+0xcc>)
 801974a:	b570      	push	{r4, r5, r6, lr}
 801974c:	681d      	ldr	r5, [r3, #0]
 801974e:	4606      	mov	r6, r0
 8019750:	460c      	mov	r4, r1
 8019752:	b125      	cbz	r5, 801975e <__swsetup_r+0x16>
 8019754:	69ab      	ldr	r3, [r5, #24]
 8019756:	b913      	cbnz	r3, 801975e <__swsetup_r+0x16>
 8019758:	4628      	mov	r0, r5
 801975a:	f7ff fb91 	bl	8018e80 <__sinit>
 801975e:	4b2e      	ldr	r3, [pc, #184]	; (8019818 <__swsetup_r+0xd0>)
 8019760:	429c      	cmp	r4, r3
 8019762:	d10f      	bne.n	8019784 <__swsetup_r+0x3c>
 8019764:	686c      	ldr	r4, [r5, #4]
 8019766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801976a:	b29a      	uxth	r2, r3
 801976c:	0715      	lsls	r5, r2, #28
 801976e:	d42c      	bmi.n	80197ca <__swsetup_r+0x82>
 8019770:	06d0      	lsls	r0, r2, #27
 8019772:	d411      	bmi.n	8019798 <__swsetup_r+0x50>
 8019774:	2209      	movs	r2, #9
 8019776:	6032      	str	r2, [r6, #0]
 8019778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801977c:	81a3      	strh	r3, [r4, #12]
 801977e:	f04f 30ff 	mov.w	r0, #4294967295
 8019782:	e03e      	b.n	8019802 <__swsetup_r+0xba>
 8019784:	4b25      	ldr	r3, [pc, #148]	; (801981c <__swsetup_r+0xd4>)
 8019786:	429c      	cmp	r4, r3
 8019788:	d101      	bne.n	801978e <__swsetup_r+0x46>
 801978a:	68ac      	ldr	r4, [r5, #8]
 801978c:	e7eb      	b.n	8019766 <__swsetup_r+0x1e>
 801978e:	4b24      	ldr	r3, [pc, #144]	; (8019820 <__swsetup_r+0xd8>)
 8019790:	429c      	cmp	r4, r3
 8019792:	bf08      	it	eq
 8019794:	68ec      	ldreq	r4, [r5, #12]
 8019796:	e7e6      	b.n	8019766 <__swsetup_r+0x1e>
 8019798:	0751      	lsls	r1, r2, #29
 801979a:	d512      	bpl.n	80197c2 <__swsetup_r+0x7a>
 801979c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801979e:	b141      	cbz	r1, 80197b2 <__swsetup_r+0x6a>
 80197a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197a4:	4299      	cmp	r1, r3
 80197a6:	d002      	beq.n	80197ae <__swsetup_r+0x66>
 80197a8:	4630      	mov	r0, r6
 80197aa:	f000 f973 	bl	8019a94 <_free_r>
 80197ae:	2300      	movs	r3, #0
 80197b0:	6363      	str	r3, [r4, #52]	; 0x34
 80197b2:	89a3      	ldrh	r3, [r4, #12]
 80197b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80197b8:	81a3      	strh	r3, [r4, #12]
 80197ba:	2300      	movs	r3, #0
 80197bc:	6063      	str	r3, [r4, #4]
 80197be:	6923      	ldr	r3, [r4, #16]
 80197c0:	6023      	str	r3, [r4, #0]
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	f043 0308 	orr.w	r3, r3, #8
 80197c8:	81a3      	strh	r3, [r4, #12]
 80197ca:	6923      	ldr	r3, [r4, #16]
 80197cc:	b94b      	cbnz	r3, 80197e2 <__swsetup_r+0x9a>
 80197ce:	89a3      	ldrh	r3, [r4, #12]
 80197d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80197d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197d8:	d003      	beq.n	80197e2 <__swsetup_r+0x9a>
 80197da:	4621      	mov	r1, r4
 80197dc:	4630      	mov	r0, r6
 80197de:	f000 f917 	bl	8019a10 <__smakebuf_r>
 80197e2:	89a2      	ldrh	r2, [r4, #12]
 80197e4:	f012 0301 	ands.w	r3, r2, #1
 80197e8:	d00c      	beq.n	8019804 <__swsetup_r+0xbc>
 80197ea:	2300      	movs	r3, #0
 80197ec:	60a3      	str	r3, [r4, #8]
 80197ee:	6963      	ldr	r3, [r4, #20]
 80197f0:	425b      	negs	r3, r3
 80197f2:	61a3      	str	r3, [r4, #24]
 80197f4:	6923      	ldr	r3, [r4, #16]
 80197f6:	b953      	cbnz	r3, 801980e <__swsetup_r+0xc6>
 80197f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019800:	d1ba      	bne.n	8019778 <__swsetup_r+0x30>
 8019802:	bd70      	pop	{r4, r5, r6, pc}
 8019804:	0792      	lsls	r2, r2, #30
 8019806:	bf58      	it	pl
 8019808:	6963      	ldrpl	r3, [r4, #20]
 801980a:	60a3      	str	r3, [r4, #8]
 801980c:	e7f2      	b.n	80197f4 <__swsetup_r+0xac>
 801980e:	2000      	movs	r0, #0
 8019810:	e7f7      	b.n	8019802 <__swsetup_r+0xba>
 8019812:	bf00      	nop
 8019814:	20000034 	.word	0x20000034
 8019818:	0801c71c 	.word	0x0801c71c
 801981c:	0801c73c 	.word	0x0801c73c
 8019820:	0801c6fc 	.word	0x0801c6fc

08019824 <_close_r>:
 8019824:	b538      	push	{r3, r4, r5, lr}
 8019826:	4c06      	ldr	r4, [pc, #24]	; (8019840 <_close_r+0x1c>)
 8019828:	2300      	movs	r3, #0
 801982a:	4605      	mov	r5, r0
 801982c:	4608      	mov	r0, r1
 801982e:	6023      	str	r3, [r4, #0]
 8019830:	f7e7 fbe1 	bl	8000ff6 <_close>
 8019834:	1c43      	adds	r3, r0, #1
 8019836:	d102      	bne.n	801983e <_close_r+0x1a>
 8019838:	6823      	ldr	r3, [r4, #0]
 801983a:	b103      	cbz	r3, 801983e <_close_r+0x1a>
 801983c:	602b      	str	r3, [r5, #0]
 801983e:	bd38      	pop	{r3, r4, r5, pc}
 8019840:	200079cc 	.word	0x200079cc

08019844 <__sflush_r>:
 8019844:	898a      	ldrh	r2, [r1, #12]
 8019846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801984a:	4605      	mov	r5, r0
 801984c:	0710      	lsls	r0, r2, #28
 801984e:	460c      	mov	r4, r1
 8019850:	d458      	bmi.n	8019904 <__sflush_r+0xc0>
 8019852:	684b      	ldr	r3, [r1, #4]
 8019854:	2b00      	cmp	r3, #0
 8019856:	dc05      	bgt.n	8019864 <__sflush_r+0x20>
 8019858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801985a:	2b00      	cmp	r3, #0
 801985c:	dc02      	bgt.n	8019864 <__sflush_r+0x20>
 801985e:	2000      	movs	r0, #0
 8019860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019866:	2e00      	cmp	r6, #0
 8019868:	d0f9      	beq.n	801985e <__sflush_r+0x1a>
 801986a:	2300      	movs	r3, #0
 801986c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019870:	682f      	ldr	r7, [r5, #0]
 8019872:	6a21      	ldr	r1, [r4, #32]
 8019874:	602b      	str	r3, [r5, #0]
 8019876:	d032      	beq.n	80198de <__sflush_r+0x9a>
 8019878:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801987a:	89a3      	ldrh	r3, [r4, #12]
 801987c:	075a      	lsls	r2, r3, #29
 801987e:	d505      	bpl.n	801988c <__sflush_r+0x48>
 8019880:	6863      	ldr	r3, [r4, #4]
 8019882:	1ac0      	subs	r0, r0, r3
 8019884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019886:	b10b      	cbz	r3, 801988c <__sflush_r+0x48>
 8019888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801988a:	1ac0      	subs	r0, r0, r3
 801988c:	2300      	movs	r3, #0
 801988e:	4602      	mov	r2, r0
 8019890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019892:	6a21      	ldr	r1, [r4, #32]
 8019894:	4628      	mov	r0, r5
 8019896:	47b0      	blx	r6
 8019898:	1c43      	adds	r3, r0, #1
 801989a:	89a3      	ldrh	r3, [r4, #12]
 801989c:	d106      	bne.n	80198ac <__sflush_r+0x68>
 801989e:	6829      	ldr	r1, [r5, #0]
 80198a0:	291d      	cmp	r1, #29
 80198a2:	d848      	bhi.n	8019936 <__sflush_r+0xf2>
 80198a4:	4a29      	ldr	r2, [pc, #164]	; (801994c <__sflush_r+0x108>)
 80198a6:	40ca      	lsrs	r2, r1
 80198a8:	07d6      	lsls	r6, r2, #31
 80198aa:	d544      	bpl.n	8019936 <__sflush_r+0xf2>
 80198ac:	2200      	movs	r2, #0
 80198ae:	6062      	str	r2, [r4, #4]
 80198b0:	04d9      	lsls	r1, r3, #19
 80198b2:	6922      	ldr	r2, [r4, #16]
 80198b4:	6022      	str	r2, [r4, #0]
 80198b6:	d504      	bpl.n	80198c2 <__sflush_r+0x7e>
 80198b8:	1c42      	adds	r2, r0, #1
 80198ba:	d101      	bne.n	80198c0 <__sflush_r+0x7c>
 80198bc:	682b      	ldr	r3, [r5, #0]
 80198be:	b903      	cbnz	r3, 80198c2 <__sflush_r+0x7e>
 80198c0:	6560      	str	r0, [r4, #84]	; 0x54
 80198c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198c4:	602f      	str	r7, [r5, #0]
 80198c6:	2900      	cmp	r1, #0
 80198c8:	d0c9      	beq.n	801985e <__sflush_r+0x1a>
 80198ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198ce:	4299      	cmp	r1, r3
 80198d0:	d002      	beq.n	80198d8 <__sflush_r+0x94>
 80198d2:	4628      	mov	r0, r5
 80198d4:	f000 f8de 	bl	8019a94 <_free_r>
 80198d8:	2000      	movs	r0, #0
 80198da:	6360      	str	r0, [r4, #52]	; 0x34
 80198dc:	e7c0      	b.n	8019860 <__sflush_r+0x1c>
 80198de:	2301      	movs	r3, #1
 80198e0:	4628      	mov	r0, r5
 80198e2:	47b0      	blx	r6
 80198e4:	1c41      	adds	r1, r0, #1
 80198e6:	d1c8      	bne.n	801987a <__sflush_r+0x36>
 80198e8:	682b      	ldr	r3, [r5, #0]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d0c5      	beq.n	801987a <__sflush_r+0x36>
 80198ee:	2b1d      	cmp	r3, #29
 80198f0:	d001      	beq.n	80198f6 <__sflush_r+0xb2>
 80198f2:	2b16      	cmp	r3, #22
 80198f4:	d101      	bne.n	80198fa <__sflush_r+0xb6>
 80198f6:	602f      	str	r7, [r5, #0]
 80198f8:	e7b1      	b.n	801985e <__sflush_r+0x1a>
 80198fa:	89a3      	ldrh	r3, [r4, #12]
 80198fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019900:	81a3      	strh	r3, [r4, #12]
 8019902:	e7ad      	b.n	8019860 <__sflush_r+0x1c>
 8019904:	690f      	ldr	r7, [r1, #16]
 8019906:	2f00      	cmp	r7, #0
 8019908:	d0a9      	beq.n	801985e <__sflush_r+0x1a>
 801990a:	0793      	lsls	r3, r2, #30
 801990c:	680e      	ldr	r6, [r1, #0]
 801990e:	bf08      	it	eq
 8019910:	694b      	ldreq	r3, [r1, #20]
 8019912:	600f      	str	r7, [r1, #0]
 8019914:	bf18      	it	ne
 8019916:	2300      	movne	r3, #0
 8019918:	eba6 0807 	sub.w	r8, r6, r7
 801991c:	608b      	str	r3, [r1, #8]
 801991e:	f1b8 0f00 	cmp.w	r8, #0
 8019922:	dd9c      	ble.n	801985e <__sflush_r+0x1a>
 8019924:	4643      	mov	r3, r8
 8019926:	463a      	mov	r2, r7
 8019928:	6a21      	ldr	r1, [r4, #32]
 801992a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801992c:	4628      	mov	r0, r5
 801992e:	47b0      	blx	r6
 8019930:	2800      	cmp	r0, #0
 8019932:	dc06      	bgt.n	8019942 <__sflush_r+0xfe>
 8019934:	89a3      	ldrh	r3, [r4, #12]
 8019936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801993a:	81a3      	strh	r3, [r4, #12]
 801993c:	f04f 30ff 	mov.w	r0, #4294967295
 8019940:	e78e      	b.n	8019860 <__sflush_r+0x1c>
 8019942:	4407      	add	r7, r0
 8019944:	eba8 0800 	sub.w	r8, r8, r0
 8019948:	e7e9      	b.n	801991e <__sflush_r+0xda>
 801994a:	bf00      	nop
 801994c:	20400001 	.word	0x20400001

08019950 <_fflush_r>:
 8019950:	b538      	push	{r3, r4, r5, lr}
 8019952:	690b      	ldr	r3, [r1, #16]
 8019954:	4605      	mov	r5, r0
 8019956:	460c      	mov	r4, r1
 8019958:	b1db      	cbz	r3, 8019992 <_fflush_r+0x42>
 801995a:	b118      	cbz	r0, 8019964 <_fflush_r+0x14>
 801995c:	6983      	ldr	r3, [r0, #24]
 801995e:	b90b      	cbnz	r3, 8019964 <_fflush_r+0x14>
 8019960:	f7ff fa8e 	bl	8018e80 <__sinit>
 8019964:	4b0c      	ldr	r3, [pc, #48]	; (8019998 <_fflush_r+0x48>)
 8019966:	429c      	cmp	r4, r3
 8019968:	d109      	bne.n	801997e <_fflush_r+0x2e>
 801996a:	686c      	ldr	r4, [r5, #4]
 801996c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019970:	b17b      	cbz	r3, 8019992 <_fflush_r+0x42>
 8019972:	4621      	mov	r1, r4
 8019974:	4628      	mov	r0, r5
 8019976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801997a:	f7ff bf63 	b.w	8019844 <__sflush_r>
 801997e:	4b07      	ldr	r3, [pc, #28]	; (801999c <_fflush_r+0x4c>)
 8019980:	429c      	cmp	r4, r3
 8019982:	d101      	bne.n	8019988 <_fflush_r+0x38>
 8019984:	68ac      	ldr	r4, [r5, #8]
 8019986:	e7f1      	b.n	801996c <_fflush_r+0x1c>
 8019988:	4b05      	ldr	r3, [pc, #20]	; (80199a0 <_fflush_r+0x50>)
 801998a:	429c      	cmp	r4, r3
 801998c:	bf08      	it	eq
 801998e:	68ec      	ldreq	r4, [r5, #12]
 8019990:	e7ec      	b.n	801996c <_fflush_r+0x1c>
 8019992:	2000      	movs	r0, #0
 8019994:	bd38      	pop	{r3, r4, r5, pc}
 8019996:	bf00      	nop
 8019998:	0801c71c 	.word	0x0801c71c
 801999c:	0801c73c 	.word	0x0801c73c
 80199a0:	0801c6fc 	.word	0x0801c6fc

080199a4 <_lseek_r>:
 80199a4:	b538      	push	{r3, r4, r5, lr}
 80199a6:	4c07      	ldr	r4, [pc, #28]	; (80199c4 <_lseek_r+0x20>)
 80199a8:	4605      	mov	r5, r0
 80199aa:	4608      	mov	r0, r1
 80199ac:	4611      	mov	r1, r2
 80199ae:	2200      	movs	r2, #0
 80199b0:	6022      	str	r2, [r4, #0]
 80199b2:	461a      	mov	r2, r3
 80199b4:	f7e7 fb46 	bl	8001044 <_lseek>
 80199b8:	1c43      	adds	r3, r0, #1
 80199ba:	d102      	bne.n	80199c2 <_lseek_r+0x1e>
 80199bc:	6823      	ldr	r3, [r4, #0]
 80199be:	b103      	cbz	r3, 80199c2 <_lseek_r+0x1e>
 80199c0:	602b      	str	r3, [r5, #0]
 80199c2:	bd38      	pop	{r3, r4, r5, pc}
 80199c4:	200079cc 	.word	0x200079cc

080199c8 <__swhatbuf_r>:
 80199c8:	b570      	push	{r4, r5, r6, lr}
 80199ca:	460e      	mov	r6, r1
 80199cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199d0:	2900      	cmp	r1, #0
 80199d2:	b096      	sub	sp, #88	; 0x58
 80199d4:	4614      	mov	r4, r2
 80199d6:	461d      	mov	r5, r3
 80199d8:	da07      	bge.n	80199ea <__swhatbuf_r+0x22>
 80199da:	2300      	movs	r3, #0
 80199dc:	602b      	str	r3, [r5, #0]
 80199de:	89b3      	ldrh	r3, [r6, #12]
 80199e0:	061a      	lsls	r2, r3, #24
 80199e2:	d410      	bmi.n	8019a06 <__swhatbuf_r+0x3e>
 80199e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199e8:	e00e      	b.n	8019a08 <__swhatbuf_r+0x40>
 80199ea:	466a      	mov	r2, sp
 80199ec:	f000 f8b2 	bl	8019b54 <_fstat_r>
 80199f0:	2800      	cmp	r0, #0
 80199f2:	dbf2      	blt.n	80199da <__swhatbuf_r+0x12>
 80199f4:	9a01      	ldr	r2, [sp, #4]
 80199f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80199fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199fe:	425a      	negs	r2, r3
 8019a00:	415a      	adcs	r2, r3
 8019a02:	602a      	str	r2, [r5, #0]
 8019a04:	e7ee      	b.n	80199e4 <__swhatbuf_r+0x1c>
 8019a06:	2340      	movs	r3, #64	; 0x40
 8019a08:	2000      	movs	r0, #0
 8019a0a:	6023      	str	r3, [r4, #0]
 8019a0c:	b016      	add	sp, #88	; 0x58
 8019a0e:	bd70      	pop	{r4, r5, r6, pc}

08019a10 <__smakebuf_r>:
 8019a10:	898b      	ldrh	r3, [r1, #12]
 8019a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a14:	079d      	lsls	r5, r3, #30
 8019a16:	4606      	mov	r6, r0
 8019a18:	460c      	mov	r4, r1
 8019a1a:	d507      	bpl.n	8019a2c <__smakebuf_r+0x1c>
 8019a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a20:	6023      	str	r3, [r4, #0]
 8019a22:	6123      	str	r3, [r4, #16]
 8019a24:	2301      	movs	r3, #1
 8019a26:	6163      	str	r3, [r4, #20]
 8019a28:	b002      	add	sp, #8
 8019a2a:	bd70      	pop	{r4, r5, r6, pc}
 8019a2c:	ab01      	add	r3, sp, #4
 8019a2e:	466a      	mov	r2, sp
 8019a30:	f7ff ffca 	bl	80199c8 <__swhatbuf_r>
 8019a34:	9900      	ldr	r1, [sp, #0]
 8019a36:	4605      	mov	r5, r0
 8019a38:	4630      	mov	r0, r6
 8019a3a:	f7ff faab 	bl	8018f94 <_malloc_r>
 8019a3e:	b948      	cbnz	r0, 8019a54 <__smakebuf_r+0x44>
 8019a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a44:	059a      	lsls	r2, r3, #22
 8019a46:	d4ef      	bmi.n	8019a28 <__smakebuf_r+0x18>
 8019a48:	f023 0303 	bic.w	r3, r3, #3
 8019a4c:	f043 0302 	orr.w	r3, r3, #2
 8019a50:	81a3      	strh	r3, [r4, #12]
 8019a52:	e7e3      	b.n	8019a1c <__smakebuf_r+0xc>
 8019a54:	4b0d      	ldr	r3, [pc, #52]	; (8019a8c <__smakebuf_r+0x7c>)
 8019a56:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a58:	89a3      	ldrh	r3, [r4, #12]
 8019a5a:	6020      	str	r0, [r4, #0]
 8019a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a60:	81a3      	strh	r3, [r4, #12]
 8019a62:	9b00      	ldr	r3, [sp, #0]
 8019a64:	6163      	str	r3, [r4, #20]
 8019a66:	9b01      	ldr	r3, [sp, #4]
 8019a68:	6120      	str	r0, [r4, #16]
 8019a6a:	b15b      	cbz	r3, 8019a84 <__smakebuf_r+0x74>
 8019a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a70:	4630      	mov	r0, r6
 8019a72:	f000 f881 	bl	8019b78 <_isatty_r>
 8019a76:	b128      	cbz	r0, 8019a84 <__smakebuf_r+0x74>
 8019a78:	89a3      	ldrh	r3, [r4, #12]
 8019a7a:	f023 0303 	bic.w	r3, r3, #3
 8019a7e:	f043 0301 	orr.w	r3, r3, #1
 8019a82:	81a3      	strh	r3, [r4, #12]
 8019a84:	89a3      	ldrh	r3, [r4, #12]
 8019a86:	431d      	orrs	r5, r3
 8019a88:	81a5      	strh	r5, [r4, #12]
 8019a8a:	e7cd      	b.n	8019a28 <__smakebuf_r+0x18>
 8019a8c:	08018e49 	.word	0x08018e49

08019a90 <__malloc_lock>:
 8019a90:	4770      	bx	lr

08019a92 <__malloc_unlock>:
 8019a92:	4770      	bx	lr

08019a94 <_free_r>:
 8019a94:	b538      	push	{r3, r4, r5, lr}
 8019a96:	4605      	mov	r5, r0
 8019a98:	2900      	cmp	r1, #0
 8019a9a:	d045      	beq.n	8019b28 <_free_r+0x94>
 8019a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019aa0:	1f0c      	subs	r4, r1, #4
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	bfb8      	it	lt
 8019aa6:	18e4      	addlt	r4, r4, r3
 8019aa8:	f7ff fff2 	bl	8019a90 <__malloc_lock>
 8019aac:	4a1f      	ldr	r2, [pc, #124]	; (8019b2c <_free_r+0x98>)
 8019aae:	6813      	ldr	r3, [r2, #0]
 8019ab0:	4610      	mov	r0, r2
 8019ab2:	b933      	cbnz	r3, 8019ac2 <_free_r+0x2e>
 8019ab4:	6063      	str	r3, [r4, #4]
 8019ab6:	6014      	str	r4, [r2, #0]
 8019ab8:	4628      	mov	r0, r5
 8019aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019abe:	f7ff bfe8 	b.w	8019a92 <__malloc_unlock>
 8019ac2:	42a3      	cmp	r3, r4
 8019ac4:	d90c      	bls.n	8019ae0 <_free_r+0x4c>
 8019ac6:	6821      	ldr	r1, [r4, #0]
 8019ac8:	1862      	adds	r2, r4, r1
 8019aca:	4293      	cmp	r3, r2
 8019acc:	bf04      	itt	eq
 8019ace:	681a      	ldreq	r2, [r3, #0]
 8019ad0:	685b      	ldreq	r3, [r3, #4]
 8019ad2:	6063      	str	r3, [r4, #4]
 8019ad4:	bf04      	itt	eq
 8019ad6:	1852      	addeq	r2, r2, r1
 8019ad8:	6022      	streq	r2, [r4, #0]
 8019ada:	6004      	str	r4, [r0, #0]
 8019adc:	e7ec      	b.n	8019ab8 <_free_r+0x24>
 8019ade:	4613      	mov	r3, r2
 8019ae0:	685a      	ldr	r2, [r3, #4]
 8019ae2:	b10a      	cbz	r2, 8019ae8 <_free_r+0x54>
 8019ae4:	42a2      	cmp	r2, r4
 8019ae6:	d9fa      	bls.n	8019ade <_free_r+0x4a>
 8019ae8:	6819      	ldr	r1, [r3, #0]
 8019aea:	1858      	adds	r0, r3, r1
 8019aec:	42a0      	cmp	r0, r4
 8019aee:	d10b      	bne.n	8019b08 <_free_r+0x74>
 8019af0:	6820      	ldr	r0, [r4, #0]
 8019af2:	4401      	add	r1, r0
 8019af4:	1858      	adds	r0, r3, r1
 8019af6:	4282      	cmp	r2, r0
 8019af8:	6019      	str	r1, [r3, #0]
 8019afa:	d1dd      	bne.n	8019ab8 <_free_r+0x24>
 8019afc:	6810      	ldr	r0, [r2, #0]
 8019afe:	6852      	ldr	r2, [r2, #4]
 8019b00:	605a      	str	r2, [r3, #4]
 8019b02:	4401      	add	r1, r0
 8019b04:	6019      	str	r1, [r3, #0]
 8019b06:	e7d7      	b.n	8019ab8 <_free_r+0x24>
 8019b08:	d902      	bls.n	8019b10 <_free_r+0x7c>
 8019b0a:	230c      	movs	r3, #12
 8019b0c:	602b      	str	r3, [r5, #0]
 8019b0e:	e7d3      	b.n	8019ab8 <_free_r+0x24>
 8019b10:	6820      	ldr	r0, [r4, #0]
 8019b12:	1821      	adds	r1, r4, r0
 8019b14:	428a      	cmp	r2, r1
 8019b16:	bf04      	itt	eq
 8019b18:	6811      	ldreq	r1, [r2, #0]
 8019b1a:	6852      	ldreq	r2, [r2, #4]
 8019b1c:	6062      	str	r2, [r4, #4]
 8019b1e:	bf04      	itt	eq
 8019b20:	1809      	addeq	r1, r1, r0
 8019b22:	6021      	streq	r1, [r4, #0]
 8019b24:	605c      	str	r4, [r3, #4]
 8019b26:	e7c7      	b.n	8019ab8 <_free_r+0x24>
 8019b28:	bd38      	pop	{r3, r4, r5, pc}
 8019b2a:	bf00      	nop
 8019b2c:	200041f0 	.word	0x200041f0

08019b30 <_read_r>:
 8019b30:	b538      	push	{r3, r4, r5, lr}
 8019b32:	4c07      	ldr	r4, [pc, #28]	; (8019b50 <_read_r+0x20>)
 8019b34:	4605      	mov	r5, r0
 8019b36:	4608      	mov	r0, r1
 8019b38:	4611      	mov	r1, r2
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	6022      	str	r2, [r4, #0]
 8019b3e:	461a      	mov	r2, r3
 8019b40:	f7e7 fa20 	bl	8000f84 <_read>
 8019b44:	1c43      	adds	r3, r0, #1
 8019b46:	d102      	bne.n	8019b4e <_read_r+0x1e>
 8019b48:	6823      	ldr	r3, [r4, #0]
 8019b4a:	b103      	cbz	r3, 8019b4e <_read_r+0x1e>
 8019b4c:	602b      	str	r3, [r5, #0]
 8019b4e:	bd38      	pop	{r3, r4, r5, pc}
 8019b50:	200079cc 	.word	0x200079cc

08019b54 <_fstat_r>:
 8019b54:	b538      	push	{r3, r4, r5, lr}
 8019b56:	4c07      	ldr	r4, [pc, #28]	; (8019b74 <_fstat_r+0x20>)
 8019b58:	2300      	movs	r3, #0
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	4608      	mov	r0, r1
 8019b5e:	4611      	mov	r1, r2
 8019b60:	6023      	str	r3, [r4, #0]
 8019b62:	f7e7 fa54 	bl	800100e <_fstat>
 8019b66:	1c43      	adds	r3, r0, #1
 8019b68:	d102      	bne.n	8019b70 <_fstat_r+0x1c>
 8019b6a:	6823      	ldr	r3, [r4, #0]
 8019b6c:	b103      	cbz	r3, 8019b70 <_fstat_r+0x1c>
 8019b6e:	602b      	str	r3, [r5, #0]
 8019b70:	bd38      	pop	{r3, r4, r5, pc}
 8019b72:	bf00      	nop
 8019b74:	200079cc 	.word	0x200079cc

08019b78 <_isatty_r>:
 8019b78:	b538      	push	{r3, r4, r5, lr}
 8019b7a:	4c06      	ldr	r4, [pc, #24]	; (8019b94 <_isatty_r+0x1c>)
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	4605      	mov	r5, r0
 8019b80:	4608      	mov	r0, r1
 8019b82:	6023      	str	r3, [r4, #0]
 8019b84:	f7e7 fa53 	bl	800102e <_isatty>
 8019b88:	1c43      	adds	r3, r0, #1
 8019b8a:	d102      	bne.n	8019b92 <_isatty_r+0x1a>
 8019b8c:	6823      	ldr	r3, [r4, #0]
 8019b8e:	b103      	cbz	r3, 8019b92 <_isatty_r+0x1a>
 8019b90:	602b      	str	r3, [r5, #0]
 8019b92:	bd38      	pop	{r3, r4, r5, pc}
 8019b94:	200079cc 	.word	0x200079cc

08019b98 <_init>:
 8019b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b9a:	bf00      	nop
 8019b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b9e:	bc08      	pop	{r3}
 8019ba0:	469e      	mov	lr, r3
 8019ba2:	4770      	bx	lr

08019ba4 <_fini>:
 8019ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba6:	bf00      	nop
 8019ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019baa:	bc08      	pop	{r3}
 8019bac:	469e      	mov	lr, r3
 8019bae:	4770      	bx	lr
