
009GUPIK_ROV_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  08019b90  08019b90  00029b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c75c  0801c75c  0002c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c764  0801c764  0002c764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c768  0801c768  0002c768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801c76c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000793c  20000098  0801c804  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200079d4  0801c804  000379d4  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0801c804  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005b6e0  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000098aa  00000000  00000000  0008b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000028b0  00000000  00000000  00095050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000025f8  00000000  00000000  00097900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004cb46  00000000  00000000  00099ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000355ea  00000000  00000000  000e6a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a566d  00000000  00000000  0011c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002c1695  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000acec  00000000  00000000  002c1710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019b78 	.word	0x08019b78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	08019b78 	.word	0x08019b78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <SystemInit+0xc4>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <SystemInit+0xc4>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SystemInit+0xc4>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <SystemInit+0xc4>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemInit+0xc8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemInit+0xc8>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemInit+0xc8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemInit+0xc8>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4924      	ldr	r1, [pc, #144]	; (8000748 <SystemInit+0xc8>)
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <SystemInit+0xcc>)
 80006ba:	4013      	ands	r3, r2
 80006bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemInit+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <SystemInit+0xc8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <SystemInit+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <SystemInit+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <SystemInit+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SystemInit+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <SystemInit+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <SystemInit+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <SystemInit+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <SystemInit+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <SystemInit+0xc8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <SystemInit+0xc8>)
 8000706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <SystemInit+0xc8>)
 800070e:	2200      	movs	r2, #0
 8000710:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <SystemInit+0xd0>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <SystemInit+0xd0>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <SystemInit+0xd4>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <SystemInit+0xd8>)
 8000724:	4013      	ands	r3, r2
 8000726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800072a:	d202      	bcs.n	8000732 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <SystemInit+0xdc>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SystemInit+0xc4>)
 8000734:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000738:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	58024400 	.word	0x58024400
 800074c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000750:	580000c0 	.word	0x580000c0
 8000754:	5c001000 	.word	0x5c001000
 8000758:	ffff0000 	.word	0xffff0000
 800075c:	51008108 	.word	0x51008108

08000760 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <vApplicationGetIdleTaskMemory+0x2c>)
 8000770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <vApplicationGetIdleTaskMemory+0x30>)
 8000776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200000b4 	.word	0x200000b4
 8000790:	20000108 	.word	0x20000108

08000794 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_FREERTOS_Init+0x48>)
 800079c:	1d3c      	adds	r4, r7, #4
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 fad9 	bl	8009d68 <osThreadCreate>
 80007b6:	4602      	mov	r2, r0
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_FREERTOS_Init+0x4c>)
 80007ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vTaskEthTCPCommunication, "vTaskEthTCPCommunication", 1000, NULL, 1, NULL);
 80007bc:	2300      	movs	r3, #0
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2301      	movs	r3, #1
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ca:	4906      	ldr	r1, [pc, #24]	; (80007e4 <MX_FREERTOS_Init+0x50>)
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_FREERTOS_Init+0x54>)
 80007ce:	f00a fe55 	bl	800b47c <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bdb0      	pop	{r4, r5, r7, pc}
 80007da:	bf00      	nop
 80007dc:	08019bb8 	.word	0x08019bb8
 80007e0:	200041f8 	.word	0x200041f8
 80007e4:	08019b90 	.word	0x08019b90
 80007e8:	0800080d 	.word	0x0800080d

080007ec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f4:	2102      	movs	r1, #2
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <StartDefaultTask+0x1c>)
 80007f8:	f002 ff97 	bl	800372a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000800:	f009 fafe 	bl	8009e00 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000804:	e7f6      	b.n	80007f4 <StartDefaultTask+0x8>
 8000806:	bf00      	nop
 8000808:	58021000 	.word	0x58021000

0800080c <vTaskEthTCPCommunication>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     

/* task to hold tcp communication */
void vTaskEthTCPCommunication(void * argument){
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af02      	add	r7, sp, #8
 8000812:	6078      	str	r0, [r7, #4]
	for(;;){


		/* Infinite loop */
		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_TCP);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2010      	movs	r0, #16
 800081a:	f00c fa15 	bl	800cc48 <netconn_new_with_proto_and_callback>
 800081e:	61f8      	str	r0, [r7, #28]
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000820:	2101      	movs	r1, #1
 8000822:	482f      	ldr	r0, [pc, #188]	; (80008e0 <vTaskEthTCPCommunication+0xd4>)
 8000824:	f002 ff81 	bl	800372a <HAL_GPIO_TogglePin>

		if (conn != NULL) {
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f2      	beq.n	8000814 <vTaskEthTCPCommunication+0x8>

			/* Bind connection to well known port number. */
			err = netconn_bind(conn, NULL, 80);
 800082e:	2250      	movs	r2, #80	; 0x50
 8000830:	2100      	movs	r1, #0
 8000832:	69f8      	ldr	r0, [r7, #28]
 8000834:	f00c faa8 	bl	800cd88 <netconn_bind>
 8000838:	4603      	mov	r3, r0
 800083a:	76fb      	strb	r3, [r7, #27]

			if (err == ERR_OK) {
 800083c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d147      	bne.n	80008d4 <vTaskEthTCPCommunication+0xc8>

				/* Tell connection to go into listening mode. */
				netconn_listen(conn);
 8000844:	21ff      	movs	r1, #255	; 0xff
 8000846:	69f8      	ldr	r0, [r7, #28]
 8000848:	f00c fad6 	bl	800cdf8 <netconn_listen_with_backlog>

				while (1) {
					/* Grab new connection. */
					accept_err = netconn_accept(conn, &newconn);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	69f8      	ldr	r0, [r7, #28]
 8000854:	f00c fafc 	bl	800ce50 <netconn_accept>
 8000858:	4603      	mov	r3, r0
 800085a:	76bb      	strb	r3, [r7, #26]
					HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <vTaskEthTCPCommunication+0xd4>)
 8000862:	f002 ff62 	bl	800372a <HAL_GPIO_TogglePin>
					/* Process the new connection. */
					if (accept_err == ERR_OK) {
 8000866:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1ee      	bne.n	800084c <vTaskEthTCPCommunication+0x40>

						while ((recv_err = netconn_recv(newconn, &buf))
 800086e:	e01b      	b.n	80008a8 <vTaskEthTCPCommunication+0x9c>
								== ERR_OK) {

							do {
								netbuf_data(buf, &data, &len);
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	f107 020a 	add.w	r2, r7, #10
 8000876:	f107 010c 	add.w	r1, r7, #12
 800087a:	4618      	mov	r0, r3
 800087c:	f00e f9b2 	bl	800ebe4 <netbuf_data>
								netconn_write(newconn, data, len, NETCONN_COPY);
 8000880:	6978      	ldr	r0, [r7, #20]
 8000882:	68f9      	ldr	r1, [r7, #12]
 8000884:	897b      	ldrh	r3, [r7, #10]
 8000886:	461a      	mov	r2, r3
 8000888:	2300      	movs	r3, #0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2301      	movs	r3, #1
 800088e:	f00c fca5 	bl	800d1dc <netconn_write_partly>
							} while (netbuf_next(buf) >= 0);
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	4618      	mov	r0, r3
 8000896:	f00e f9ef 	bl	800ec78 <netbuf_next>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	dae7      	bge.n	8000870 <vTaskEthTCPCommunication+0x64>

							netbuf_delete(buf);
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00e f97e 	bl	800eba4 <netbuf_delete>
						while ((recv_err = netconn_recv(newconn, &buf))
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f107 0210 	add.w	r2, r7, #16
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00c fc1b 	bl	800d0ec <netconn_recv>
 80008b6:	4603      	mov	r3, r0
 80008b8:	767b      	strb	r3, [r7, #25]
 80008ba:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0d6      	beq.n	8000870 <vTaskEthTCPCommunication+0x64>

						}

						/* Close connection and discard connection identifier. */
						netconn_close(newconn);
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00c fd31 	bl	800d32c <netconn_close>
						netconn_delete(newconn);
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00c fa35 	bl	800cd3c <netconn_delete>
					accept_err = netconn_accept(conn, &newconn);
 80008d2:	e7bb      	b.n	800084c <vTaskEthTCPCommunication+0x40>
					}
				}

			} else {
				netconn_delete(newconn);
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00c fa30 	bl	800cd3c <netconn_delete>
		conn = netconn_new(NETCONN_TCP);
 80008dc:	e79a      	b.n	8000814 <vTaskEthTCPCommunication+0x8>
 80008de:	bf00      	nop
 80008e0:	58020400 	.word	0x58020400

080008e4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b4a      	ldr	r3, [pc, #296]	; (8000a24 <MX_GPIO_Init+0x140>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	4a48      	ldr	r2, [pc, #288]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090a:	4b46      	ldr	r3, [pc, #280]	; (8000a24 <MX_GPIO_Init+0x140>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <MX_GPIO_Init+0x140>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	4a41      	ldr	r2, [pc, #260]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000928:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <MX_GPIO_Init+0x140>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <MX_GPIO_Init+0x140>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <MX_GPIO_Init+0x140>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a2a      	ldr	r2, [pc, #168]	; (8000a24 <MX_GPIO_Init+0x140>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <MX_GPIO_Init+0x140>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_GPIO_Init+0x140>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_GPIO_Init+0x140>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <MX_GPIO_Init+0x140>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_GPIO_Init+0x140>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f244 0101 	movw	r1, #16385	; 0x4001
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x144>)
 80009d4:	f002 fe90 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2102      	movs	r1, #2
 80009dc:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_GPIO_Init+0x148>)
 80009de:	f002 fe8b 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009e2:	f244 0301 	movw	r3, #16385	; 0x4001
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <MX_GPIO_Init+0x144>)
 80009fc:	f002 fccc 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000a18:	f002 fcbe 	bl	8003398 <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	58024400 	.word	0x58024400
 8000a28:	58020400 	.word	0x58020400
 8000a2c:	58021000 	.word	0x58021000

08000a30 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a38:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <SCB_EnableICache+0x3c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <SCB_EnableICache+0x3c>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <SCB_EnableICache+0x3c>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a56:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a5c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <SCB_EnableDCache+0x7c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <SCB_EnableDCache+0x7c>)
 8000a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a88:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	0b5b      	lsrs	r3, r3, #13
 8000a8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a92:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a9c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	015a      	lsls	r2, r3, #5
 8000aa2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000aa6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aac:	490f      	ldr	r1, [pc, #60]	; (8000aec <SCB_EnableDCache+0x7c>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1ef      	bne.n	8000a9e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	60fa      	str	r2, [r7, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e5      	bne.n	8000a94 <SCB_EnableDCache+0x24>
 8000ac8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <SCB_EnableDCache+0x7c>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <SCB_EnableDCache+0x7c>)
 8000ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad6:	6153      	str	r3, [r2, #20]
 8000ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000adc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000af6:	f000 fef9 	bl	80018ec <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MPU_Config+0x80>)
 8000b00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b02:	2307      	movs	r3, #7
 8000b04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b06:	2303      	movs	r3, #3
 8000b08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 ff13 	bl	8001954 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MPU_Config+0x84>)
 8000b34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b36:	230d      	movs	r3, #13
 8000b38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fef9 	bl	8001954 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f000 fed8 	bl	8001918 <HAL_MPU_Enable>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	30040000 	.word	0x30040000
 8000b74:	30044000 	.word	0x30044000

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  MPU_Config();
 8000b7e:	f7ff ffb7 	bl	8000af0 <MPU_Config>
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b82:	f7ff ff55 	bl	8000a30 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b86:	f7ff ff73 	bl	8000a70 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b90:	bf00      	nop
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <main+0xb0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <main+0x30>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dcf4      	bgt.n	8000b92 <main+0x1a>
  if ( timeout < 0 )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da01      	bge.n	8000bb2 <main+0x3a>
  {
  Error_Handler();
 8000bae:	f000 f933 	bl	8000e18 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 fd1d 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f839 	bl	8000c2c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <main+0xb0>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <main+0xb0>)
 8000bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <main+0xb0>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f002 fdc1 	bl	8003760 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f002 fdd7 	bl	8003794 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bea:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000bec:	bf00      	nop
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <main+0xb0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <main+0x8c>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dcf4      	bgt.n	8000bee <main+0x76>
if ( timeout < 0 )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	da01      	bge.n	8000c0e <main+0x96>
{
Error_Handler();
 8000c0a:	f000 f905 	bl	8000e18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f7ff fe69 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c12:	f000 fa43 	bl	800109c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c16:	f000 fad7 	bl	80011c8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 8000c1a:	f008 fb71 	bl	8009300 <MX_LWIP_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000c1e:	f7ff fdb9 	bl	8000794 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c22:	f009 f88a 	bl	8009d3a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <main+0xae>
 8000c28:	58024400 	.word	0x58024400

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0cc      	sub	sp, #304	; 0x130
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c36:	224c      	movs	r2, #76	; 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f018 f8b0 	bl	8018da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f018 f8a9 	bl	8018da0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	23bc      	movs	r3, #188	; 0xbc
 8000c56:	461a      	mov	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f018 f8a1 	bl	8018da0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c5e:	2004      	movs	r0, #4
 8000c60:	f002 fef4 	bl	8003a4c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <SystemClock_Config+0x1b8>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a5d      	ldr	r2, [pc, #372]	; (8000de4 <SystemClock_Config+0x1b8>)
 8000c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b5b      	ldr	r3, [pc, #364]	; (8000de4 <SystemClock_Config+0x1b8>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <SystemClock_Config+0x1bc>)
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <SystemClock_Config+0x1bc>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c8e:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <SystemClock_Config+0x1bc>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c9e:	bf00      	nop
 8000ca0:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <SystemClock_Config+0x1b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cac:	d1f8      	bne.n	8000ca0 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cae:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <SystemClock_Config+0x1c0>)
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	4a4d      	ldr	r2, [pc, #308]	; (8000dec <SystemClock_Config+0x1c0>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cde:	2378      	movs	r3, #120	; 0x78
 8000ce0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 ff07 	bl	8003b20 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d18:	f000 f87e 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	233f      	movs	r3, #63	; 0x3f
 8000d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d34:	2340      	movs	r3, #64	; 0x40
 8000d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d48:	2340      	movs	r3, #64	; 0x40
 8000d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d52:	2104      	movs	r1, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fabb 	bl	80042d0 <HAL_RCC_ClockConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000d60:	f000 f85a 	bl	8000e18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <SystemClock_Config+0x1c4>)
 8000d6a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2201      	movs	r2, #1
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2218      	movs	r2, #24
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	2202      	movs	r2, #2
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2204      	movs	r2, #4
 8000d8a:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2202      	movs	r2, #2
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fe48 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 8000dd2:	f000 f821 	bl	8000e18 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000dd6:	f002 fe93 	bl	8003b00 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000dda:	bf00      	nop
 8000ddc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58024800 	.word	0x58024800
 8000de8:	58000400 	.word	0x58000400
 8000dec:	58024400 	.word	0x58024400
 8000df0:	00040002 	.word	0x00040002

08000df4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d101      	bne.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e06:	f000 fc2f 	bl	8001668 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010000 	.word	0x40010000

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x38>)
 8000e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_MspInit+0x38>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_MspInit+0x38>)
 8000e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f06f 0001 	mvn.w	r0, #1
 8000e54:	f000 fd22 	bl	800189c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2019      	movs	r0, #25
 8000e7a:	f000 fd0f 	bl	800189c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000e7e:	2019      	movs	r0, #25
 8000e80:	f000 fd26 	bl	80018d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_InitTick+0xa8>)
 8000e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8a:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <HAL_InitTick+0xa8>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_InitTick+0xa8>)
 8000e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fd93 	bl	80049d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb2:	f003 fd7b 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_InitTick+0xac>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0xb0>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_InitTick+0xb4>)
 8000ece:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_InitTick+0xb0>)
 8000ed2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_InitTick+0xb0>)
 8000eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000edc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_InitTick+0xb0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_InitTick+0xb0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000eea:	480a      	ldr	r0, [pc, #40]	; (8000f14 <HAL_InitTick+0xb0>)
 8000eec:	f005 f8a6 	bl	800603c <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <HAL_InitTick+0xb0>)
 8000ef8:	f005 f8d6 	bl	80060a8 <HAL_TIM_Base_Start_IT>
 8000efc:	4603      	mov	r3, r0
 8000efe:	e000      	b.n	8000f02 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3738      	adds	r7, #56	; 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	200041fc 	.word	0x200041fc
 8000f18:	40010000 	.word	0x40010000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM1_UP_IRQHandler+0x10>)
 8000f56:	f005 f8d1 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200041fc 	.word	0x200041fc

08000f64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
	}

return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
	}
	return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
	return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x50>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x16>
		heap_end = &end;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_sbrk+0x50>)
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <_sbrk+0x54>)
 8001054:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <_sbrk+0x50>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <_sbrk+0x50>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	466a      	mov	r2, sp
 8001066:	4293      	cmp	r3, r2
 8001068:	d905      	bls.n	8001076 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <_sbrk+0x58>)
 800106c:	220c      	movs	r2, #12
 800106e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	e006      	b.n	8001084 <_sbrk+0x44>
	}

	heap_end += incr;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <_sbrk+0x50>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <_sbrk+0x50>)
 8001080:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000308 	.word	0x20000308
 8001094:	200079d8 	.word	0x200079d8
 8001098:	200079cc 	.word	0x200079cc

0800109c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010a2:	4a23      	ldr	r2, [pc, #140]	; (8001130 <MX_USART3_UART_Init+0x94>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010e6:	f005 fa09 	bl	80064fc <HAL_UART_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010f0:	f7ff fe92 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_USART3_UART_Init+0x90>)
 80010f8:	f007 fd73 	bl	8008be2 <HAL_UARTEx_SetTxFifoThreshold>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001102:	f7ff fe89 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <MX_USART3_UART_Init+0x90>)
 800110a:	f007 fda8 	bl	8008c5e <HAL_UARTEx_SetRxFifoThreshold>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001114:	f7ff fe80 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_USART3_UART_Init+0x90>)
 800111a:	f007 fd29 	bl	8008b70 <HAL_UARTEx_DisableFifoMode>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001124:	f7ff fe78 	bl	8000e18 <Error_Handler>
  }

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000423c 	.word	0x2000423c
 8001130:	40004800 	.word	0x40004800

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_UART_MspInit+0x88>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12e      	bne.n	80011b4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 8001158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 800115e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001162:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 8001168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_UART_MspInit+0x90>)
 80011b0:	f002 f8f2 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004800 	.word	0x40004800
 80011c0:	58024400 	.word	0x58024400
 80011c4:	58020c00 	.word	0x58020c00

080011c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d4:	2209      	movs	r2, #9
 80011d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011da:	2202      	movs	r2, #2
 80011dc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001204:	2201      	movs	r2, #1
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120a:	2200      	movs	r2, #0
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001210:	f002 fad4 	bl	80037bc <HAL_PCD_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800121a:	f7ff fdfd 	bl	8000e18 <Error_Handler>
  }

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200042c8 	.word	0x200042c8
 8001228:	40080000 	.word	0x40080000

0800122c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_PCD_MspInit+0xa4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13b      	bne.n	80012c6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_PCD_MspInit+0xa8>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_PCD_MspInit+0xa8>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_PCD_MspInit+0xa8>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800126c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800127e:	230a      	movs	r3, #10
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <HAL_PCD_MspInit+0xac>)
 800128a:	f002 f885 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800128e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_PCD_MspInit+0xac>)
 80012a4:	f002 f878 	bl	8003398 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_PCD_MspInit+0xa8>)
 80012aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_PCD_MspInit+0xa8>)
 80012b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_PCD_MspInit+0xa8>)
 80012ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40080000 	.word	0x40080000
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020000 	.word	0x58020000

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012e2:	e003      	b.n	80012ec <LoopCopyDataInit>

080012e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ea:	3104      	adds	r1, #4

080012ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f4:	d3f6      	bcc.n	80012e4 <CopyDataInit>
  ldr  r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012f8:	e002      	b.n	8001300 <LoopFillZerobss>

080012fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012fc:	f842 3b04 	str.w	r3, [r2], #4

08001300 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001302:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001304:	d3f9      	bcc.n	80012fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001306:	f7ff f9bb 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f017 fd0b 	bl	8018d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fc33 	bl	8000b78 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001318:	0801c76c 	.word	0x0801c76c
  ldr  r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001320:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8001324:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001328:	200079d4 	.word	0x200079d4

0800132c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC3_IRQHandler>

0800132e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <LAN8742_RegisterBusIO+0x28>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <LAN8742_RegisterBusIO+0x28>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <LAN8742_RegisterBusIO+0x28>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e014      	b.n	8001386 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d17c      	bne.n	80014ac <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e01c      	b.n	8001406 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f107 0208 	add.w	r2, r7, #8
 80013d4:	2112      	movs	r1, #18
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	4798      	blx	r3
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da03      	bge.n	80013e8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013e0:	f06f 0304 	mvn.w	r3, #4
 80013e4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80013e6:	e00b      	b.n	8001400 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d105      	bne.n	8001400 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
         break;
 80013fe:	e005      	b.n	800140c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b1f      	cmp	r3, #31
 800140a:	d9df      	bls.n	80013cc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b1f      	cmp	r3, #31
 8001412:	d902      	bls.n	800141a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001414:	f06f 0302 	mvn.w	r3, #2
 8001418:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d145      	bne.n	80014ac <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800142c:	2100      	movs	r1, #0
 800142e:	4798      	blx	r3
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	db37      	blt.n	80014a6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	f107 0208 	add.w	r2, r7, #8
 8001442:	2100      	movs	r1, #0
 8001444:	4798      	blx	r3
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	db28      	blt.n	800149e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4798      	blx	r3
 8001452:	4603      	mov	r3, r0
 8001454:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001456:	e01c      	b.n	8001492 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4798      	blx	r3
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800146a:	d80e      	bhi.n	800148a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6810      	ldr	r0, [r2, #0]
 8001474:	f107 0208 	add.w	r2, r7, #8
 8001478:	2100      	movs	r1, #0
 800147a:	4798      	blx	r3
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	da07      	bge.n	8001492 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001482:	f06f 0304 	mvn.w	r3, #4
 8001486:	613b      	str	r3, [r7, #16]
                 break;
 8001488:	e010      	b.n	80014ac <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800148a:	f06f 0301 	mvn.w	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
               break;
 8001490:	e00c      	b.n	80014ac <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1dd      	bne.n	8001458 <LAN8742_Init+0xc6>
 800149c:	e006      	b.n	80014ac <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800149e:	f06f 0304 	mvn.w	r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	e002      	b.n	80014ac <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80014a6:	f06f 0303 	mvn.w	r3, #3
 80014aa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d112      	bne.n	80014d8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4798      	blx	r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014bc:	bf00      	nop
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4798      	blx	r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014d0:	d9f5      	bls.n	80014be <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014d8:	693b      	ldr	r3, [r7, #16]
 }
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	2101      	movs	r1, #1
 80014fc:	4798      	blx	r3
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	da02      	bge.n	800150a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001504:	f06f 0304 	mvn.w	r3, #4
 8001508:	e06e      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6810      	ldr	r0, [r2, #0]
 8001512:	f107 020c 	add.w	r2, r7, #12
 8001516:	2101      	movs	r1, #1
 8001518:	4798      	blx	r3
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	da02      	bge.n	8001526 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001520:	f06f 0304 	mvn.w	r3, #4
 8001524:	e060      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001530:	2301      	movs	r3, #1
 8001532:	e059      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6810      	ldr	r0, [r2, #0]
 800153c:	f107 020c 	add.w	r2, r7, #12
 8001540:	2100      	movs	r1, #0
 8001542:	4798      	blx	r3
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	da02      	bge.n	8001550 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800154a:	f06f 0304 	mvn.w	r3, #4
 800154e:	e04b      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11b      	bne.n	8001592 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <LAN8742_GetLinkState+0x90>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800156e:	2302      	movs	r3, #2
 8001570:	e03a      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800157c:	2303      	movs	r3, #3
 800157e:	e033      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800158a:	2304      	movs	r3, #4
 800158c:	e02c      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800158e:	2305      	movs	r3, #5
 8001590:	e02a      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6810      	ldr	r0, [r2, #0]
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	211f      	movs	r1, #31
 80015a0:	4798      	blx	r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da02      	bge.n	80015ae <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80015a8:	f06f 0304 	mvn.w	r3, #4
 80015ac:	e01c      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015b8:	2306      	movs	r3, #6
 80015ba:	e015      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 031c 	and.w	r3, r3, #28
 80015c2:	2b18      	cmp	r3, #24
 80015c4:	d101      	bne.n	80015ca <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015c6:	2302      	movs	r3, #2
 80015c8:	e00e      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 031c 	and.w	r3, r3, #28
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d101      	bne.n	80015d8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e007      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 031c 	and.w	r3, r3, #28
 80015de:	2b14      	cmp	r3, #20
 80015e0:	d101      	bne.n	80015e6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015e2:	2304      	movs	r3, #4
 80015e4:	e000      	b.n	80015e8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015e6:	2305      	movs	r3, #5
    }				
  }
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f6:	2003      	movs	r0, #3
 80015f8:	f000 f945 	bl	8001886 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015fc:	f003 f81e 	bl	800463c <HAL_RCC_GetSysClockFreq>
 8001600:	4601      	mov	r1, r0
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_Init+0x68>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_Init+0x6c>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	fa21 f303 	lsr.w	r3, r1, r3
 8001618:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_Init+0x68>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_Init+0x6c>)
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_Init+0x70>)
 8001632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_Init+0x74>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fc12 	bl	8000e64 <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e002      	b.n	8001650 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800164a:	f7ff fbed 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	58024400 	.word	0x58024400
 800165c:	0801c57c 	.word	0x0801c57c
 8001660:	20000004 	.word	0x20000004
 8001664:	20000000 	.word	0x20000000

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000000c 	.word	0x2000000c
 800168c:	200046d0 	.word	0x200046d0

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200046d0 	.word	0x200046d0

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_Delay+0x40>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000000c 	.word	0x2000000c

080016ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetREVID+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0c1b      	lsrs	r3, r3, #16
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	5c001000 	.word	0x5c001000

08001704 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001714:	4904      	ldr	r1, [pc, #16]	; (8001728 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	58000400 	.word	0x58000400

0800172c <__NVIC_SetPriorityGrouping>:
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <__NVIC_SetPriorityGrouping+0x40>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	4313      	orrs	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x40>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	05fa0000 	.word	0x05fa0000

08001774 <__NVIC_GetPriorityGrouping>:
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff4c 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018aa:	f7ff ff63 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	6978      	ldr	r0, [r7, #20]
 80018b6:	f7ff ffb3 	bl	8001820 <NVIC_EncodePriority>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff82 	bl	80017cc <__NVIC_SetPriority>
}
 80018c8:	bf00      	nop
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff56 	bl	8001790 <__NVIC_EnableIRQ>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018f0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MPU_Disable+0x24>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <HAL_MPU_Disable+0x24>)
 80018fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fe:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <HAL_MPU_Disable+0x28>)
 8001902:	2200      	movs	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	e000ed90 	.word	0xe000ed90

08001918 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_MPU_Enable+0x34>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MPU_Enable+0x38>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MPU_Enable+0x38>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001936:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800193a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed90 	.word	0xe000ed90
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	785a      	ldrb	r2, [r3, #1]
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_MPU_ConfigRegion+0x84>)
 8001962:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d029      	beq.n	80019c0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <HAL_MPU_ConfigRegion+0x84>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b1b      	ldrb	r3, [r3, #12]
 8001978:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7adb      	ldrb	r3, [r3, #11]
 800197e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001980:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7a9b      	ldrb	r3, [r3, #10]
 8001986:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7b5b      	ldrb	r3, [r3, #13]
 800198e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7b9b      	ldrb	r3, [r3, #14]
 8001996:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7bdb      	ldrb	r3, [r3, #15]
 800199e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a5b      	ldrb	r3, [r3, #9]
 80019a6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a1b      	ldrb	r3, [r3, #8]
 80019ae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019b0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019bc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80019be:	e005      	b.n	80019cc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_MPU_ConfigRegion+0x84>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_MPU_ConfigRegion+0x84>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed90 	.word	0xe000ed90

080019dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0c6      	b.n	8001b7c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f007 fdda 	bl	80095b0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2223      	movs	r2, #35	; 0x23
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <HAL_ETH_Init+0x1a8>)
 8001a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a08:	4a5e      	ldr	r2, [pc, #376]	; (8001b84 <HAL_ETH_Init+0x1a8>)
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_ETH_Init+0x1a8>)
 8001a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7a1b      	ldrb	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fe6b 	bl	8001704 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a2e:	e003      	b.n	8001a38 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a34:	f7ff fe66 	bl	8001704 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fe1e 	bl	8001690 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a56:	e00f      	b.n	8001a78 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a58:	f7ff fe1a 	bl	8001690 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a66:	d907      	bls.n	8001a78 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	22e0      	movs	r2, #224	; 0xe0
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e081      	b.n	8001b7c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e6      	bne.n	8001a58 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f001 f934 	bl	8002cf8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a90:	f002 ff46 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_ETH_Init+0x1ac>)
 8001a98:	fba3 2302 	umull	r2, r3, r3, r2
 8001a9c:	0c9a      	lsrs	r2, r3, #18
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3a01      	subs	r2, #1
 8001aa4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f001 f887 	bl	8002bbc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ac4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22e0      	movs	r2, #224	; 0xe0
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e04a      	b.n	8001b7c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aee:	4413      	add	r3, r2
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_ETH_Init+0x1b0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6952      	ldr	r2, [r2, #20]
 8001afa:	0052      	lsls	r2, r2, #1
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b06:	440b      	add	r3, r1
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f001 f94c 	bl	8002da8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f001 f990 	bl	8002e36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	3305      	adds	r3, #5
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	3303      	adds	r3, #3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	061a      	lsls	r2, r3, #24
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	3302      	adds	r3, #2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b54:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b62:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2210      	movs	r2, #16
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2210      	movs	r2, #16
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	58024400 	.word	0x58024400
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	ffff8001 	.word	0xffff8001

08001b90 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	330a      	adds	r3, #10
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_ETH_DescAssignMemory+0x28>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d904      	bls.n	8001bc2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e021      	b.n	8001c06 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b087      	sub	sp, #28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	330a      	adds	r3, #10
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d17d      	bne.n	8001d30 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2223      	movs	r2, #35	; 0x23
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e018      	b.n	8001c72 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d902      	bls.n	8001c5e <HAL_ETH_Start_IT+0x4c>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	330a      	adds	r3, #10
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d9e3      	bls.n	8001c40 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0202 	orr.w	r2, r2, #2
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cba:	4413      	add	r3, r2
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6811      	ldr	r1, [r2, #0]
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cca:	440b      	add	r3, r1
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cd6:	4413      	add	r3, r2
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6811      	ldr	r1, [r2, #0]
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ce6:	440b      	add	r3, r1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001cfc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d00:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2210      	movs	r2, #16
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2222      	movs	r2, #34	; 0x22
 8001d0c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d16:	4413      	add	r3, r2
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6811      	ldr	r1, [r2, #0]
 8001d1e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001d22:	431a      	orrs	r2, r3
 8001d24:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d28:	440b      	add	r3, r1
 8001d2a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e076      	b.n	8001e4e <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d171      	bne.n	8001e4c <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f001 f8bf 	bl	8002ef0 <ETH_Prepare_Tx_Descriptors>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	f043 0202 	orr.w	r2, r3, #2
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e062      	b.n	8001e4e <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3206      	adds	r2, #6
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d904      	bls.n	8001db2 <HAL_ETH_Transmit+0x74>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	1f1a      	subs	r2, r3, #4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	3106      	adds	r1, #6
 8001dbe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001dc2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001dc6:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001dc8:	f7ff fc62 	bl	8001690 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001dce:	e034      	b.n	8001e3a <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d011      	beq.n	8001e06 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	f043 0208 	orr.w	r2, r3, #8
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	22e0      	movs	r2, #224	; 0xe0
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e023      	b.n	8001e4e <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d015      	beq.n	8001e3a <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001e0e:	f7ff fc3f 	bl	8001690 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <HAL_ETH_Transmit+0xe6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10a      	bne.n	8001e3a <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2210      	movs	r2, #16
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e009      	b.n	8001e4e <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dbc6      	blt.n	8001dd0 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2210      	movs	r2, #16
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b089      	sub	sp, #36	; 0x24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	332c      	adds	r3, #44	; 0x2c
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d06b      	beq.n	8001f60 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e0bc      	b.n	8002006 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d036      	beq.n	8001f0c <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d902      	bls.n	8001ec0 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b04      	subs	r3, #4
 8001ebe:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db11      	blt.n	8001ef6 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d902      	bls.n	8001ef6 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e07c      	b.n	8002006 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d012      	beq.n	8001f3e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	3301      	adds	r3, #1
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d902      	bls.n	8001f32 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	e010      	b.n	8001f60 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d902      	bls.n	8001f56 <HAL_ETH_IsRxDataAvailable+0x100>
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3b04      	subs	r3, #4
 8001f54:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db02      	blt.n	8001f6e <HAL_ETH_IsRxDataAvailable+0x118>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d98e      	bls.n	8001e8c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d044      	beq.n	8001ffe <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e036      	b.n	8001ff6 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f96:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d902      	bls.n	8001fe6 <HAL_ETH_IsRxDataAvailable+0x190>
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3c4      	bcc.n	8001f88 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]

  return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b08a      	sub	sp, #40	; 0x28
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	332c      	adds	r3, #44	; 0x2c
 8002020:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07d      	b.n	8002146 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff feff 	bl	8001e56 <HAL_ETH_IsRxDataAvailable>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e071      	b.n	8002146 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
 8002076:	e031      	b.n	80020dc <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	461a      	mov	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	461a      	mov	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020b2:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3301      	adds	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d902      	bls.n	80020c6 <HAL_ETH_GetRxDataBuffer+0xb4>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3b04      	subs	r3, #4
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	3301      	adds	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	6a3a      	ldr	r2, [r7, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3c7      	bcc.n	8002078 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	461a      	mov	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	429a      	cmp	r2, r3
 8002108:	d803      	bhi.n	8002112 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	e018      	b.n	8002144 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d012      	beq.n	8002140 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	461a      	mov	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	e001      	b.n	8002144 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3728      	adds	r7, #40	; 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	332c      	adds	r3, #44	; 0x2c
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fe72 	bl	8001e56 <HAL_ETH_IsRxDataAvailable>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e017      	b.n	80021ac <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4413      	add	r3, r2
 8002184:	3b01      	subs	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d902      	bls.n	8002194 <HAL_ETH_GetRxDataLength+0x46>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3b04      	subs	r3, #4
 8002192:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	332c      	adds	r3, #44	; 0x2c
 80021c0:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e055      	b.n	8002290 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e03c      	b.n	8002272 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002206:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	3b01      	subs	r3, #1
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d20d      	bcs.n	800226c <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d902      	bls.n	8002262 <HAL_ETH_BuildRxDescriptors+0xae>
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3b04      	subs	r3, #4
 8002260:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	3301      	adds	r3, #1
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	429a      	cmp	r2, r3
 8002278:	d3be      	bcc.n	80021f8 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	f241 1328 	movw	r3, #4392	; 0x1128
 8002284:	440b      	add	r3, r1
 8002286:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3724      	adds	r7, #36	; 0x24
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e03e      	b.n	800233c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	055b      	lsls	r3, r3, #21
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f043 030c 	orr.w	r3, r3, #12
 80022ea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80022fe:	f7ff f9c7 	bl	8001690 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002304:	e009      	b.n	800231a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002306:	f7ff f9c3 	bl	8001690 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002314:	d901      	bls.n	800231a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e010      	b.n	800233c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ed      	bne.n	8002306 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03c      	b.n	80023e0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800236e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	055b      	lsls	r3, r3, #21
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 030c 	bic.w	r3, r3, #12
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80023a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80023b2:	f7ff f96d 	bl	8001690 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023b8:	e009      	b.n	80023ce <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80023ba:	f7ff f969 	bl	8001690 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c8:	d901      	bls.n	80023ce <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e008      	b.n	80023e0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ed      	bne.n	80023ba <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40028000 	.word	0x40028000

080023ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e1c3      	b.n	8002788 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf14      	ite	ne
 80025fc:	2301      	movne	r3, #1
 80025fe:	2300      	moveq	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0e5b      	lsrs	r3, r3, #25
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002714:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002724:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf14      	ite	ne
 800275a:	2301      	movne	r3, #1
 800275c:	2300      	moveq	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e00a      	b.n	80027be <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d105      	bne.n	80027bc <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f860 	bl	8002878 <ETH_SetMACConfig>

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027d8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027e0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80027e2:	f002 f89d 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 80027e6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d908      	bls.n	8002802 <HAL_ETH_SetMDIOClockRange+0x3a>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d804      	bhi.n	8002802 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e027      	b.n	8002852 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d908      	bls.n	800281c <HAL_ETH_SetMDIOClockRange+0x54>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d804      	bhi.n	800281c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e01a      	b.n	8002852 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d903      	bls.n	800282c <HAL_ETH_SetMDIOClockRange+0x64>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d911      	bls.n	8002850 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4a10      	ldr	r2, [pc, #64]	; (8002870 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d908      	bls.n	8002846 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d804      	bhi.n	8002846 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e005      	b.n	8002852 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e000      	b.n	8002852 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002850:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	01312cff 	.word	0x01312cff
 8002868:	02160ebf 	.word	0x02160ebf
 800286c:	039386ff 	.word	0x039386ff
 8002870:	05f5e0ff 	.word	0x05f5e0ff
 8002874:	08f0d17f 	.word	0x08f0d17f

08002878 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800288a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002892:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	7b1b      	ldrb	r3, [r3, #12]
 8002898:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800289a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	7b5b      	ldrb	r3, [r3, #13]
 80028a0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028a2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7b9b      	ldrb	r3, [r3, #14]
 80028a8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	7bdb      	ldrb	r3, [r3, #15]
 80028b0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028b2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	7c12      	ldrb	r2, [r2, #16]
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d102      	bne.n	80028c2 <ETH_SetMACConfig+0x4a>
 80028bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028c0:	e000      	b.n	80028c4 <ETH_SetMACConfig+0x4c>
 80028c2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028c4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	7c52      	ldrb	r2, [r2, #17]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d102      	bne.n	80028d4 <ETH_SetMACConfig+0x5c>
 80028ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028d2:	e000      	b.n	80028d6 <ETH_SetMACConfig+0x5e>
 80028d4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028d6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7c9b      	ldrb	r3, [r3, #18]
 80028dc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028de:	431a      	orrs	r2, r3
                                macconf->Speed |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80028e4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80028ea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7f1b      	ldrb	r3, [r3, #28]
 80028f0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80028f2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	7f5b      	ldrb	r3, [r3, #29]
 80028f8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80028fa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	7f92      	ldrb	r2, [r2, #30]
 8002900:	2a00      	cmp	r2, #0
 8002902:	d102      	bne.n	800290a <ETH_SetMACConfig+0x92>
 8002904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002908:	e000      	b.n	800290c <ETH_SetMACConfig+0x94>
 800290a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800290c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	7fdb      	ldrb	r3, [r3, #31]
 8002912:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002914:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	f892 2020 	ldrb.w	r2, [r2, #32]
 800291c:	2a00      	cmp	r2, #0
 800291e:	d102      	bne.n	8002926 <ETH_SetMACConfig+0xae>
 8002920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002924:	e000      	b.n	8002928 <ETH_SetMACConfig+0xb0>
 8002926:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002928:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800292e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002936:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002938:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <ETH_SetMACConfig+0x22c>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	430b      	orrs	r3, r1
 8002954:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002962:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002964:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800296c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800296e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002976:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002978:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002980:	2a00      	cmp	r2, #0
 8002982:	d102      	bne.n	800298a <ETH_SetMACConfig+0x112>
 8002984:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002988:	e000      	b.n	800298c <ETH_SetMACConfig+0x114>
 800298a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800298c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <ETH_SetMACConfig+0x230>)
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <ETH_SetMACConfig+0x234>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029da:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d101      	bne.n	80029ea <ETH_SetMACConfig+0x172>
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	e000      	b.n	80029ec <ETH_SetMACConfig+0x174>
 80029ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80029ec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029fe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002a14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f023 0103 	bic.w	r1, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002a5e:	2a00      	cmp	r2, #0
 8002a60:	d101      	bne.n	8002a66 <ETH_SetMACConfig+0x1ee>
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	e000      	b.n	8002a68 <ETH_SetMACConfig+0x1f0>
 8002a66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002a68:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002a70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a72:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	00048083 	.word	0x00048083
 8002aa8:	c0f88000 	.word	0xc0f88000
 8002aac:	fffffef0 	.word	0xfffffef0

08002ab0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <ETH_SetDMAConfig+0xf8>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	6809      	ldr	r1, [r1, #0]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002ad6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ae2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	7b1b      	ldrb	r3, [r3, #12]
 8002ae8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002af6:	4413      	add	r3, r2
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <ETH_SetDMAConfig+0xfc>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b0a:	440b      	add	r3, r1
 8002b0c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	7b5b      	ldrb	r3, [r3, #13]
 8002b12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <ETH_SetDMAConfig+0x100>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002b36:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	7d1b      	ldrb	r3, [r3, #20]
 8002b40:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b42:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	7f5b      	ldrb	r3, [r3, #29]
 8002b48:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b56:	4413      	add	r3, r2
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <ETH_SetDMAConfig+0x104>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6811      	ldr	r1, [r2, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b6a:	440b      	add	r3, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7f1b      	ldrb	r3, [r3, #28]
 8002b72:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b84:	4413      	add	r3, r2
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <ETH_SetDMAConfig+0x108>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6811      	ldr	r1, [r2, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b98:	440b      	add	r3, r1
 8002b9a:	601a      	str	r2, [r3, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	ffff87fd 	.word	0xffff87fd
 8002bac:	ffff2ffe 	.word	0xffff2ffe
 8002bb0:	fffec000 	.word	0xfffec000
 8002bb4:	ffc0efef 	.word	0xffc0efef
 8002bb8:	7fc0ffff 	.word	0x7fc0ffff

08002bbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0a4      	sub	sp, #144	; 0x90
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c14:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002c18:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002c36:	2300      	movs	r3, #0
 8002c38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c54:	2320      	movs	r3, #32
 8002c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c70:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c96:	2300      	movs	r3, #0
 8002c98:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fde6 	bl	8002878 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002cdc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fee1 	bl	8002ab0 <ETH_SetDMAConfig>
}
 8002cee:	bf00      	nop
 8002cf0:	3790      	adds	r7, #144	; 0x90
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d12:	f001 fe05 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8002d16:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d908      	bls.n	8002d32 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d804      	bhi.n	8002d32 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e027      	b.n	8002d82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d908      	bls.n	8002d4c <ETH_MAC_MDIO_ClkConfig+0x54>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d804      	bhi.n	8002d4c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e01a      	b.n	8002d82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d903      	bls.n	8002d5c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d911      	bls.n	8002d80 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d908      	bls.n	8002d76 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d804      	bhi.n	8002d76 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e005      	b.n	8002d82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	e000      	b.n	8002d82 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002d80:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	01312cff 	.word	0x01312cff
 8002d98:	02160ebf 	.word	0x02160ebf
 8002d9c:	039386ff 	.word	0x039386ff
 8002da0:	05f5e0ff 	.word	0x05f5e0ff
 8002da4:	08f0d17f 	.word	0x08f0d17f

08002da8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e01d      	b.n	8002df2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	3206      	adds	r2, #6
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d9de      	bls.n	8002db6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f241 132c 	movw	r3, #4396	; 0x112c
 8002e06:	4413      	add	r3, r2
 8002e08:	2203      	movs	r2, #3
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68d9      	ldr	r1, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f241 1314 	movw	r3, #4372	; 0x1114
 8002e18:	4413      	add	r3, r2
 8002e1a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002e28:	601a      	str	r2, [r3, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e024      	b.n	8002e8e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	330a      	adds	r3, #10
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d9d7      	bls.n	8002e44 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	f241 1330 	movw	r3, #4400	; 0x1130
 8002eba:	4413      	add	r3, r2
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	f241 131c 	movw	r3, #4380	; 0x111c
 8002ecc:	4413      	add	r3, r2
 8002ece:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f241 1328 	movw	r3, #4392	; 0x1128
 8002ee0:	4413      	add	r3, r2
 8002ee2:	6019      	str	r1, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b08d      	sub	sp, #52	; 0x34
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3318      	adds	r3, #24
 8002f00:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f2e:	d101      	bne.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f30:	2302      	movs	r3, #2
 8002f32:	e223      	b.n	800337c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d044      	beq.n	8002fca <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4b72      	ldr	r3, [pc, #456]	; (8003110 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d027      	beq.n	8002fca <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fb8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fc8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00e      	beq.n	8002ff4 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	6992      	ldr	r2, [r2, #24]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <ETH_Prepare_Tx_Descriptors+0x11c>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d030      	beq.n	800306e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	3301      	adds	r3, #1
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b03      	cmp	r3, #3
 800302e:	d902      	bls.n	8003036 <ETH_Prepare_Tx_Descriptors+0x146>
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	3b04      	subs	r3, #4
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	3301      	adds	r3, #1
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800304e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003052:	d10c      	bne.n	800306e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e186      	b.n	800337c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	3301      	adds	r3, #1
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003084:	4013      	ands	r3, r2
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	6852      	ldr	r2, [r2, #4]
 800308a:	431a      	orrs	r2, r3
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <ETH_Prepare_Tx_Descriptors+0x228>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	6852      	ldr	r2, [r2, #4]
 80030b4:	0412      	lsls	r2, r2, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	e008      	b.n	80030d0 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2200      	movs	r2, #0
 80030c2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <ETH_Prepare_Tx_Descriptors+0x228>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d021      	beq.n	8003120 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	04db      	lsls	r3, r3, #19
 80030ea:	431a      	orrs	r2, r3
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <ETH_Prepare_Tx_Descriptors+0x22c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	69d2      	ldr	r2, [r2, #28]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	e02e      	b.n	800316e <ETH_Prepare_Tx_Descriptors+0x27e>
 8003110:	ffff0000 	.word	0xffff0000
 8003114:	ffffc000 	.word	0xffffc000
 8003118:	c000ffff 	.word	0xc000ffff
 800311c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b98      	ldr	r3, [pc, #608]	; (8003388 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	6852      	ldr	r2, [r2, #4]
 800312c:	431a      	orrs	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	431a      	orrs	r2, r3
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	431a      	orrs	r2, r3
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	431a      	orrs	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80c0 	beq.w	800333e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80031d0:	e0b5      	b.n	800333e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	3301      	adds	r3, #1
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d902      	bls.n	80031f0 <ETH_Prepare_Tx_Descriptors+0x300>
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	3b04      	subs	r3, #4
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800320e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003212:	d126      	bne.n	8003262 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	e016      	b.n	8003256 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	3301      	adds	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b03      	cmp	r3, #3
 800323e:	d902      	bls.n	8003246 <ETH_Prepare_Tx_Descriptors+0x356>
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	3b04      	subs	r3, #4
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	429a      	cmp	r2, r3
 800325c:	d3e4      	bcc.n	8003228 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e08c      	b.n	800337c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	3301      	adds	r3, #1
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <ETH_Prepare_Tx_Descriptors+0x49c>)
 800327e:	4013      	ands	r3, r2
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	6852      	ldr	r2, [r2, #4]
 8003284:	431a      	orrs	r2, r3
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	6852      	ldr	r2, [r2, #4]
 80032ae:	0412      	lsls	r2, r2, #16
 80032b0:	431a      	orrs	r2, r3
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	e008      	b.n	80032ca <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	2200      	movs	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	6a3a      	ldr	r2, [r7, #32]
 80032c8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00f      	beq.n	80032f6 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80032dc:	4013      	ands	r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	69d2      	ldr	r2, [r2, #28]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	e017      	b.n	8003326 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b23      	ldr	r3, [pc, #140]	; (8003388 <ETH_Prepare_Tx_Descriptors+0x498>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	6852      	ldr	r2, [r2, #4]
 8003302:	431a      	orrs	r2, r3
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	431a      	orrs	r2, r3
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f47f af45 	bne.w	80031d2 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	e005      	b.n	8003368 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003378:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3734      	adds	r7, #52	; 0x34
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	ffff8000 	.word	0xffff8000
 800338c:	ffffc000 	.word	0xffffc000
 8003390:	c000ffff 	.word	0xc000ffff
 8003394:	fffc0000 	.word	0xfffc0000

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033a6:	4b89      	ldr	r3, [pc, #548]	; (80035cc <HAL_GPIO_Init+0x234>)
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033aa:	e194      	b.n	80036d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8186 	beq.w	80036d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00b      	beq.n	80033e4 <HAL_GPIO_Init+0x4c>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0xee>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80e0 	beq.w	80036d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_GPIO_Init+0x238>)
 8003512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003516:	4a2e      	ldr	r2, [pc, #184]	; (80035d0 <HAL_GPIO_Init+0x238>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_GPIO_Init+0x238>)
 8003522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <HAL_GPIO_Init+0x23c>)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_GPIO_Init+0x240>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d052      	beq.n	8003600 <HAL_GPIO_Init+0x268>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_GPIO_Init+0x244>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d031      	beq.n	80035c6 <HAL_GPIO_Init+0x22e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <HAL_GPIO_Init+0x248>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d02b      	beq.n	80035c2 <HAL_GPIO_Init+0x22a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_GPIO_Init+0x24c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d025      	beq.n	80035be <HAL_GPIO_Init+0x226>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_GPIO_Init+0x250>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <HAL_GPIO_Init+0x222>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <HAL_GPIO_Init+0x254>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x21e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_GPIO_Init+0x258>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x21a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_GPIO_Init+0x25c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x216>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <HAL_GPIO_Init+0x260>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x212>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_GPIO_Init+0x264>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x20e>
 80035a2:	2309      	movs	r3, #9
 80035a4:	e02d      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035a6:	230a      	movs	r3, #10
 80035a8:	e02b      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035aa:	2308      	movs	r3, #8
 80035ac:	e029      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035ae:	2307      	movs	r3, #7
 80035b0:	e027      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035b2:	2306      	movs	r3, #6
 80035b4:	e025      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035b6:	2305      	movs	r3, #5
 80035b8:	e023      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035ba:	2304      	movs	r3, #4
 80035bc:	e021      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035be:	2303      	movs	r3, #3
 80035c0:	e01f      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e01d      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01b      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035ca:	bf00      	nop
 80035cc:	58000080 	.word	0x58000080
 80035d0:	58024400 	.word	0x58024400
 80035d4:	58000400 	.word	0x58000400
 80035d8:	58020000 	.word	0x58020000
 80035dc:	58020400 	.word	0x58020400
 80035e0:	58020800 	.word	0x58020800
 80035e4:	58020c00 	.word	0x58020c00
 80035e8:	58021000 	.word	0x58021000
 80035ec:	58021400 	.word	0x58021400
 80035f0:	58021800 	.word	0x58021800
 80035f4:	58021c00 	.word	0x58021c00
 80035f8:	58022000 	.word	0x58022000
 80035fc:	58022400 	.word	0x58022400
 8003600:	2300      	movs	r3, #0
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	f002 0203 	and.w	r2, r2, #3
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	4093      	lsls	r3, r2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003612:	4938      	ldr	r1, [pc, #224]	; (80036f4 <HAL_GPIO_Init+0x35c>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800369a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3301      	adds	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f ae63 	bne.w	80033ac <HAL_GPIO_Init+0x14>
  }
}
 80036e6:	bf00      	nop
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	58000400 	.word	0x58000400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	887b      	ldrh	r3, [r7, #2]
 800373c:	401a      	ands	r2, r3
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	041a      	lsls	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800374c:	e002      	b.n	8003754 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <HAL_HSEM_FastTake+0x2c>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3320      	adds	r3, #32
 800376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003772:	4a07      	ldr	r2, [pc, #28]	; (8003790 <HAL_HSEM_FastTake+0x30>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	58026400 	.word	0x58026400
 8003790:	80000300 	.word	0x80000300

08003794 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800379e:	4906      	ldr	r1, [pc, #24]	; (80037b8 <HAL_HSEM_Release+0x24>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	58026400 	.word	0x58026400

080037bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	b08f      	sub	sp, #60	; 0x3c
 80037c0:	af0a      	add	r7, sp, #40	; 0x28
 80037c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e116      	b.n	80039fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd1f 	bl	800122c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f005 fb2f 	bl	8008e70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	687e      	ldr	r6, [r7, #4]
 800381a:	466d      	mov	r5, sp
 800381c:	f106 0410 	add.w	r4, r6, #16
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003828:	e894 0003 	ldmia.w	r4, {r0, r1}
 800382c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003830:	1d33      	adds	r3, r6, #4
 8003832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003834:	6838      	ldr	r0, [r7, #0]
 8003836:	f005 fab9 	bl	8008dac <USB_CoreInit>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d7      	b.n	80039fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f005 fb1d 	bl	8008e92 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e04a      	b.n	80038f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	333d      	adds	r3, #61	; 0x3d
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	333c      	adds	r3, #60	; 0x3c
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	b298      	uxth	r0, r3
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3342      	adds	r3, #66	; 0x42
 800389a:	4602      	mov	r2, r0
 800389c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	333f      	adds	r3, #63	; 0x3f
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3344      	adds	r3, #68	; 0x44
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3348      	adds	r3, #72	; 0x48
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3350      	adds	r3, #80	; 0x50
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	3301      	adds	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3af      	bcc.n	800385e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e044      	b.n	800398e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	3301      	adds	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b5      	bcc.n	8003904 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	687e      	ldr	r6, [r7, #4]
 80039a0:	466d      	mov	r5, sp
 80039a2:	f106 0410 	add.w	r4, r6, #16
 80039a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039b6:	1d33      	adds	r3, r6, #4
 80039b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f005 fa94 	bl	8008ee8 <USB_DevInit>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e014      	b.n	80039fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f80a 	bl	8003a04 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f005 fc36 	bl	8009266 <USB_DevDisconnect>

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	10000003 	.word	0x10000003

08003a4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d00a      	beq.n	8003a76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a60:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e040      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e03e      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a7e:	491f      	ldr	r1, [pc, #124]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a86:	f7fd fe03 	bl	8001690 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a8c:	e009      	b.n	8003aa2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a8e:	f7fd fdff 	bl	8001690 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a9c:	d901      	bls.n	8003aa2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e028      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d1ee      	bne.n	8003a8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b1e      	cmp	r3, #30
 8003ab4:	d008      	beq.n	8003ac8 <HAL_PWREx_ConfigSupply+0x7c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8003aba:	d005      	beq.n	8003ac8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b1d      	cmp	r3, #29
 8003ac0:	d002      	beq.n	8003ac8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ac6:	d114      	bne.n	8003af2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ac8:	f7fd fde2 	bl	8001690 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ace:	e009      	b.n	8003ae4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ad0:	f7fd fdde 	bl	8001690 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ade:	d901      	bls.n	8003ae4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e007      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024800 	.word	0x58024800

08003b00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	58024800 	.word	0x58024800

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e3c4      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8087 	beq.w	8003c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b40:	4ba2      	ldr	r3, [pc, #648]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b4a:	4ba0      	ldr	r3, [pc, #640]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d007      	beq.n	8003b66 <HAL_RCC_OscConfig+0x46>
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b18      	cmp	r3, #24
 8003b5a:	d110      	bne.n	8003b7e <HAL_RCC_OscConfig+0x5e>
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d10b      	bne.n	8003b7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b66:	4b99      	ldr	r3, [pc, #612]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d06c      	beq.n	8003c4c <HAL_RCC_OscConfig+0x12c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d168      	bne.n	8003c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e39e      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x76>
 8003b88:	4b90      	ldr	r3, [pc, #576]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a8f      	ldr	r2, [pc, #572]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e02e      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd4>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x98>
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a8a      	ldr	r2, [pc, #552]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b88      	ldr	r3, [pc, #544]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a87      	ldr	r2, [pc, #540]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e01d      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0xbc>
 8003bc2:	4b82      	ldr	r3, [pc, #520]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a81      	ldr	r2, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a7e      	ldr	r2, [pc, #504]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd4>
 8003bdc:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fd48 	bl	8001690 <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fd fd44 	bl	8001690 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e352      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0xe4>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd fd34 	bl	8001690 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fd fd30 	bl	8001690 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e33e      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x10c>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8092 	beq.w	8003d80 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c5c:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c66:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <HAL_RCC_OscConfig+0x162>
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	2b18      	cmp	r3, #24
 8003c76:	d12d      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1b4>
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d128      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c82:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x17a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e310      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	f7fd fd27 	bl	80016ec <HAL_GetREVID>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d80a      	bhi.n	8003cbe <HAL_RCC_OscConfig+0x19e>
 8003ca8:	4b48      	ldr	r3, [pc, #288]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	4945      	ldr	r1, [pc, #276]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbc:	e060      	b.n	8003d80 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	493f      	ldr	r1, [pc, #252]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd2:	e055      	b.n	8003d80 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d038      	beq.n	8003d4e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 0219 	bic.w	r2, r3, #25
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4938      	ldr	r1, [pc, #224]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fd fccf 	bl	8001690 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd fccb 	bl	8001690 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e2d9      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d08:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	f7fd fcea 	bl	80016ec <HAL_GetREVID>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d80a      	bhi.n	8003d38 <HAL_RCC_OscConfig+0x218>
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	031b      	lsls	r3, r3, #12
 8003d30:	4926      	ldr	r1, [pc, #152]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
 8003d36:	e023      	b.n	8003d80 <HAL_RCC_OscConfig+0x260>
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	4921      	ldr	r1, [pc, #132]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
 8003d4c:	e018      	b.n	8003d80 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fc99 	bl	8001690 <HAL_GetTick>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fd fc95 	bl	8001690 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e2a3      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8091 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d007      	beq.n	8003db4 <HAL_RCC_OscConfig+0x294>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b18      	cmp	r3, #24
 8003da8:	d12f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d12a      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2b0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e277      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
 8003dcc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dd0:	f7fd fc8c 	bl	80016ec <HAL_GetREVID>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d80a      	bhi.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
 8003dde:	4ba2      	ldr	r3, [pc, #648]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	069b      	lsls	r3, r3, #26
 8003dec:	499e      	ldr	r1, [pc, #632]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003df2:	e05d      	b.n	8003eb0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003df4:	4b9c      	ldr	r3, [pc, #624]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	4999      	ldr	r1, [pc, #612]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e08:	e052      	b.n	8003eb0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d035      	beq.n	8003e7e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e12:	4b95      	ldr	r3, [pc, #596]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a94      	ldr	r2, [pc, #592]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fc37 	bl	8001690 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e26:	f7fd fc33 	bl	8001690 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e241      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e38:	4b8b      	ldr	r3, [pc, #556]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e44:	f7fd fc52 	bl	80016ec <HAL_GetREVID>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d80a      	bhi.n	8003e68 <HAL_RCC_OscConfig+0x348>
 8003e52:	4b85      	ldr	r3, [pc, #532]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	069b      	lsls	r3, r3, #26
 8003e60:	4981      	ldr	r1, [pc, #516]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 8003e66:	e023      	b.n	8003eb0 <HAL_RCC_OscConfig+0x390>
 8003e68:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	497c      	ldr	r1, [pc, #496]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e7e:	4b7a      	ldr	r3, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a79      	ldr	r2, [pc, #484]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fc01 	bl	8001690 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e92:	f7fd fbfd 	bl	8001690 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e20b      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ea4:	4b70      	ldr	r3, [pc, #448]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d036      	beq.n	8003f2a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d019      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec4:	4b68      	ldr	r3, [pc, #416]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec8:	4a67      	ldr	r2, [pc, #412]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fbde 	bl	8001690 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fbda 	bl	8001690 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1e8      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eea:	4b5f      	ldr	r3, [pc, #380]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x3b8>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef8:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd fbc4 	bl	8001690 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fbc0 	bl	8001690 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1ce      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f1e:	4b52      	ldr	r3, [pc, #328]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d036      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fba1 	bl	8001690 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f52:	f7fd fb9d 	bl	8001690 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1ab      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f64:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x432>
 8003f70:	e018      	b.n	8003fa4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f72:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a3c      	ldr	r2, [pc, #240]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fb87 	bl	8001690 <HAL_GetTick>
 8003f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f86:	f7fd fb83 	bl	8001690 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e191      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8086 	beq.w	80040be <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HAL_RCC_OscConfig+0x54c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	; (800406c <HAL_RCC_OscConfig+0x54c>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbe:	f7fd fb67 	bl	8001690 <HAL_GetTick>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fd fb63 	bl	8001690 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e171      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_OscConfig+0x54c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x4da>
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_OscConfig+0x536>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x4fc>
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x536>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x51e>
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x536>
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a06      	ldr	r2, [pc, #24]	; (8004068 <HAL_RCC_OscConfig+0x548>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01a      	beq.n	8004094 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fd fb17 	bl	8001690 <HAL_GetTick>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004064:	e00f      	b.n	8004086 <HAL_RCC_OscConfig+0x566>
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
 800406c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd fb0e 	bl	8001690 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e11a      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004086:	4b8f      	ldr	r3, [pc, #572]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x550>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fafc 	bl	8001690 <HAL_GetTick>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd faf8 	bl	8001690 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e104      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040b2:	4b84      	ldr	r3, [pc, #528]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80f9 	beq.w	80042ba <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040c8:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d0:	2b18      	cmp	r3, #24
 80040d2:	f000 80b4 	beq.w	800423e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b02      	cmp	r3, #2
 80040dc:	f040 8095 	bne.w	800420a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b78      	ldr	r3, [pc, #480]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a77      	ldr	r2, [pc, #476]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fad0 	bl	8001690 <HAL_GetTick>
 80040f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd facc 	bl	8001690 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e0da      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004106:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004116:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <HAL_RCC_OscConfig+0x7a8>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004122:	0112      	lsls	r2, r2, #4
 8004124:	430a      	orrs	r2, r1
 8004126:	4967      	ldr	r1, [pc, #412]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	628b      	str	r3, [r1, #40]	; 0x28
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	3b01      	subs	r3, #1
 8004132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	3b01      	subs	r3, #1
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	b29b      	uxth	r3, r3
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	3b01      	subs	r3, #1
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	3b01      	subs	r3, #1
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800415c:	4959      	ldr	r1, [pc, #356]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004162:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a57      	ldr	r2, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800416e:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCC_OscConfig+0x7ac>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800417a:	00d2      	lsls	r2, r2, #3
 800417c:	4951      	ldr	r1, [pc, #324]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004182:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f023 020c 	bic.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	494d      	ldr	r1, [pc, #308]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004194:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f023 0202 	bic.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	4948      	ldr	r1, [pc, #288]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4a43      	ldr	r2, [pc, #268]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041be:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80041ca:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3a      	ldr	r2, [pc, #232]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fa55 	bl	8001690 <HAL_GetTick>
 80041e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ea:	f7fd fa51 	bl	8001690 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e05f      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x6ca>
 8004208:	e057      	b.n	80042ba <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fa3b 	bl	8001690 <HAL_GetTick>
 800421a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7fd fa37 	bl	8001690 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e045      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x6fe>
 800423c:	e03d      	b.n	80042ba <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <HAL_RCC_OscConfig+0x7a4>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b01      	cmp	r3, #1
 8004250:	d031      	beq.n	80042b6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d12a      	bne.n	80042b6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d122      	bne.n	80042b6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d11a      	bne.n	80042b6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0a5b      	lsrs	r3, r3, #9
 8004284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d111      	bne.n	80042b6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d108      	bne.n	80042b6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	0e1b      	lsrs	r3, r3, #24
 80042a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3730      	adds	r7, #48	; 0x30
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	58024400 	.word	0x58024400
 80042c8:	fffffc0c 	.word	0xfffffc0c
 80042cc:	ffff0007 	.word	0xffff0007

080042d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e19c      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b8a      	ldr	r3, [pc, #552]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d910      	bls.n	8004314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b87      	ldr	r3, [pc, #540]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 020f 	bic.w	r2, r3, #15
 80042fa:	4985      	ldr	r1, [pc, #532]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b83      	ldr	r3, [pc, #524]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e184      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800432c:	429a      	cmp	r2, r3
 800432e:	d908      	bls.n	8004342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004330:	4b78      	ldr	r3, [pc, #480]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	4975      	ldr	r1, [pc, #468]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800433e:	4313      	orrs	r3, r2
 8004340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435a:	429a      	cmp	r2, r3
 800435c:	d908      	bls.n	8004370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800435e:	4b6d      	ldr	r3, [pc, #436]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	496a      	ldr	r1, [pc, #424]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800436c:	4313      	orrs	r3, r2
 800436e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	495e      	ldr	r1, [pc, #376]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800439a:	4313      	orrs	r3, r2
 800439c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d908      	bls.n	80043cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043ba:	4b56      	ldr	r3, [pc, #344]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4953      	ldr	r1, [pc, #332]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	4b4d      	ldr	r3, [pc, #308]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d908      	bls.n	80043fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f023 020f 	bic.w	r2, r3, #15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4947      	ldr	r1, [pc, #284]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d055      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004406:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4940      	ldr	r1, [pc, #256]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004414:	4313      	orrs	r3, r2
 8004416:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d107      	bne.n	8004430 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004420:	4b3c      	ldr	r3, [pc, #240]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d121      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0f6      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d107      	bne.n	8004448 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004438:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d115      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0ea      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0de      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004460:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0d6      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004470:	4b28      	ldr	r3, [pc, #160]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f023 0207 	bic.w	r2, r3, #7
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4925      	ldr	r1, [pc, #148]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 800447e:	4313      	orrs	r3, r2
 8004480:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7fd f905 	bl	8001690 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448a:	f7fd f901 	bl	8001690 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0be      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d1eb      	bne.n	800448a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d208      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f023 020f 	bic.w	r2, r3, #15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	490e      	ldr	r1, [pc, #56]	; (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d214      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	4906      	ldr	r1, [pc, #24]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <HAL_RCC_ClockConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e086      	b.n	800461e <HAL_RCC_ClockConfig+0x34e>
 8004510:	52002000 	.word	0x52002000
 8004514:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004530:	429a      	cmp	r2, r3
 8004532:	d208      	bcs.n	8004546 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004534:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	4939      	ldr	r1, [pc, #228]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004542:	4313      	orrs	r3, r2
 8004544:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800455e:	429a      	cmp	r2, r3
 8004560:	d208      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004562:	4b31      	ldr	r3, [pc, #196]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	492e      	ldr	r1, [pc, #184]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800458c:	429a      	cmp	r2, r3
 800458e:	d208      	bcs.n	80045a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4922      	ldr	r1, [pc, #136]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d010      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d208      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4917      	ldr	r1, [pc, #92]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045d0:	f000 f834 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045d4:	4601      	mov	r1, r0
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	4a12      	ldr	r2, [pc, #72]	; (800462c <HAL_RCC_ClockConfig+0x35c>)
 80045e2:	5cd3      	ldrb	r3, [r2, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa21 f303 	lsr.w	r3, r1, r3
 80045ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_RCC_ClockConfig+0x358>)
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_RCC_ClockConfig+0x35c>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x360>)
 8004606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_RCC_ClockConfig+0x364>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_RCC_ClockConfig+0x368>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fc26 	bl	8000e64 <HAL_InitTick>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
 800462c:	0801c57c 	.word	0x0801c57c
 8004630:	20000004 	.word	0x20000004
 8004634:	20000000 	.word	0x20000000
 8004638:	20000008 	.word	0x20000008

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004642:	4baf      	ldr	r3, [pc, #700]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464a:	2b18      	cmp	r3, #24
 800464c:	f200 814e 	bhi.w	80048ec <HAL_RCC_GetSysClockFreq+0x2b0>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	080046bd 	.word	0x080046bd
 800465c:	080048ed 	.word	0x080048ed
 8004660:	080048ed 	.word	0x080048ed
 8004664:	080048ed 	.word	0x080048ed
 8004668:	080048ed 	.word	0x080048ed
 800466c:	080048ed 	.word	0x080048ed
 8004670:	080048ed 	.word	0x080048ed
 8004674:	080048ed 	.word	0x080048ed
 8004678:	080046e3 	.word	0x080046e3
 800467c:	080048ed 	.word	0x080048ed
 8004680:	080048ed 	.word	0x080048ed
 8004684:	080048ed 	.word	0x080048ed
 8004688:	080048ed 	.word	0x080048ed
 800468c:	080048ed 	.word	0x080048ed
 8004690:	080048ed 	.word	0x080048ed
 8004694:	080048ed 	.word	0x080048ed
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080048ed 	.word	0x080048ed
 80046a0:	080048ed 	.word	0x080048ed
 80046a4:	080048ed 	.word	0x080048ed
 80046a8:	080048ed 	.word	0x080048ed
 80046ac:	080048ed 	.word	0x080048ed
 80046b0:	080048ed 	.word	0x080048ed
 80046b4:	080048ed 	.word	0x080048ed
 80046b8:	080046ef 	.word	0x080046ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046bc:	4b90      	ldr	r3, [pc, #576]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046c8:	4b8d      	ldr	r3, [pc, #564]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	08db      	lsrs	r3, r3, #3
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	4a8c      	ldr	r2, [pc, #560]	; (8004904 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
 80046d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046da:	e10a      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046dc:	4b89      	ldr	r3, [pc, #548]	; (8004904 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046de:	61bb      	str	r3, [r7, #24]
    break;
 80046e0:	e107      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046e2:	4b89      	ldr	r3, [pc, #548]	; (8004908 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046e4:	61bb      	str	r3, [r7, #24]
    break;
 80046e6:	e104      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046e8:	4b88      	ldr	r3, [pc, #544]	; (800490c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80046ea:	61bb      	str	r3, [r7, #24]
    break;
 80046ec:	e101      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ee:	4b84      	ldr	r3, [pc, #528]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046f8:	4b81      	ldr	r3, [pc, #516]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004702:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004704:	4b7e      	ldr	r3, [pc, #504]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80da 	beq.w	80048e6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d05a      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0x1b2>
 8004738:	2b01      	cmp	r3, #1
 800473a:	d302      	bcc.n	8004742 <HAL_RCC_GetSysClockFreq+0x106>
 800473c:	2b02      	cmp	r3, #2
 800473e:	d078      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004740:	e099      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004742:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d02d      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800474e:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	4a6a      	ldr	r2, [pc, #424]	; (8004904 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004778:	4b61      	ldr	r3, [pc, #388]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004788:	ed97 6a02 	vldr	s12, [r7, #8]
 800478c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80047a8:	e087      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004914 <HAL_RCC_GetSysClockFreq+0x2d8>
 80047b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047bc:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2d4>
 80047d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ec:	e065      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004918 <HAL_RCC_GetSysClockFreq+0x2dc>
 80047fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004800:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004810:	ed97 6a02 	vldr	s12, [r7, #8]
 8004814:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004830:	e043      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800491c <HAL_RCC_GetSysClockFreq+0x2e0>
 8004840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004844:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004854:	ed97 6a02 	vldr	s12, [r7, #8]
 8004858:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2d4>
 800485c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004874:	e021      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004880:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004918 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004888:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004898:	ed97 6a02 	vldr	s12, [r7, #8]
 800489c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2d4>
 80048a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	0a5b      	lsrs	r3, r3, #9
 80048c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c4:	3301      	adds	r3, #1
 80048c6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048de:	ee17 3a90 	vmov	r3, s15
 80048e2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048e4:	e005      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
    break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80048ee:	61bb      	str	r3, [r7, #24]
    break;
 80048f0:	bf00      	nop
  }

  return sysclockfreq;
 80048f2:	69bb      	ldr	r3, [r7, #24]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3724      	adds	r7, #36	; 0x24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	58024400 	.word	0x58024400
 8004904:	03d09000 	.word	0x03d09000
 8004908:	003d0900 	.word	0x003d0900
 800490c:	007a1200 	.word	0x007a1200
 8004910:	46000000 	.word	0x46000000
 8004914:	4c742400 	.word	0x4c742400
 8004918:	4a742400 	.word	0x4a742400
 800491c:	4af42400 	.word	0x4af42400

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004926:	f7ff fe89 	bl	800463c <HAL_RCC_GetSysClockFreq>
 800492a:	4601      	mov	r1, r0
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <HAL_RCC_GetHCLKFreq+0x50>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_RCC_GetHCLKFreq+0x54>)
 8004938:	5cd3      	ldrb	r3, [r2, r3]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	fa21 f303 	lsr.w	r3, r1, r3
 8004942:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_RCC_GetHCLKFreq+0x50>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_RCC_GetHCLKFreq+0x54>)
 800494e:	5cd3      	ldrb	r3, [r2, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	4a07      	ldr	r2, [pc, #28]	; (8004978 <HAL_RCC_GetHCLKFreq+0x58>)
 800495c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <HAL_RCC_GetHCLKFreq+0x58>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	58024400 	.word	0x58024400
 8004974:	0801c57c 	.word	0x0801c57c
 8004978:	20000004 	.word	0x20000004
 800497c:	20000000 	.word	0x20000000

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004984:	f7ff ffcc 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004988:	4601      	mov	r1, r0
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	58024400 	.word	0x58024400
 80049a8:	0801c57c 	.word	0x0801c57c

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049b0:	f7ff ffb6 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 80049b4:	4601      	mov	r1, r0
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	58024400 	.word	0x58024400
 80049d4:	0801c57c 	.word	0x0801c57c

080049d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223f      	movs	r2, #63	; 0x3f
 80049e6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e8:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0207 	and.w	r2, r3, #7
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80049f4:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a00:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_RCC_GetClockConfig+0x7c>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_RCC_GetClockConfig+0x80>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	58024400 	.word	0x58024400
 8004a58:	52002000 	.word	0x52002000

08004a5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d03d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a80:	d013      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d802      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004a8c:	e01f      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a92:	d013      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a98:	d01c      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004a9a:	e018      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4baf      	ldr	r3, [pc, #700]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	4aae      	ldr	r2, [pc, #696]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aa8:	e015      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2102      	movs	r1, #2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f95f 	bl	8005d74 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aba:	e00c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fa08 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004adc:	4b9f      	ldr	r3, [pc, #636]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae8:	499c      	ldr	r1, [pc, #624]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	650b      	str	r3, [r1, #80]	; 0x50
 8004aee:	e001      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d03d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d826      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b25 	.word	0x08004b25
 8004b14:	08004b33 	.word	0x08004b33
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	08004b5d 	.word	0x08004b5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b24:	4b8d      	ldr	r3, [pc, #564]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	4a8c      	ldr	r2, [pc, #560]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b30:	e015      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f91b 	bl	8005d74 <RCCEx_PLL2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b42:	e00c      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3324      	adds	r3, #36	; 0x24
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 f9c4 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b64:	4b7d      	ldr	r3, [pc, #500]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	f023 0207 	bic.w	r2, r3, #7
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	497a      	ldr	r1, [pc, #488]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	650b      	str	r3, [r1, #80]	; 0x50
 8004b76:	e001      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d03e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d01c      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d804      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b9c:	e01e      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba0:	d01f      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba6:	d01e      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ba8:	e018      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004baa:	4b6c      	ldr	r3, [pc, #432]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4a6b      	ldr	r2, [pc, #428]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bb6:	e017      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 f8d8 	bl	8005d74 <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bc8:	e00e      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3324      	adds	r3, #36	; 0x24
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 f981 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bda:	e005      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bee:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	4958      	ldr	r1, [pc, #352]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	650b      	str	r3, [r1, #80]	; 0x50
 8004c00:	e001      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d044      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1c:	d01f      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c22:	d805      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2c:	d00e      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004c2e:	e01f      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004c30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c34:	d01f      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004c36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c3a:	d01e      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c3c:	e018      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a46      	ldr	r2, [pc, #280]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c4a:	e017      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 f88e 	bl	8005d74 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c5c:	e00e      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3324      	adds	r3, #36	; 0x24
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f937 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c6e:	e005      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c82:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c90:	4932      	ldr	r1, [pc, #200]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	658b      	str	r3, [r1, #88]	; 0x58
 8004c96:	e001      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d044      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb2:	d01f      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb8:	d805      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004cc4:	e01f      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004cc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cca:	d01f      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd0:	d01e      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004cd2:	e018      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd4:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce0:	e017      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f001 f843 	bl	8005d74 <RCCEx_PLL2_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cf2:	e00e      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3324      	adds	r3, #36	; 0x24
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 f8ec 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d04:	e005      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0a:	e002      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d26:	490d      	ldr	r1, [pc, #52]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d2c:	e001      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d035      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d00c      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d802      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01b      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004d4e:	e017      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d00c      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d018      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004d58:	e012      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d60:	4baf      	ldr	r3, [pc, #700]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4aae      	ldr	r2, [pc, #696]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d6c:	e00e      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2102      	movs	r1, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fffd 	bl	8005d74 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d7e:	e005      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
      break;
 8004d84:	e002      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d92:	4ba3      	ldr	r3, [pc, #652]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9e:	49a0      	ldr	r1, [pc, #640]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004da4:	e001      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d042      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	d01f      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	d805      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d00e      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004dd0:	e01f      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd6:	d01f      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ddc:	d01e      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004dde:	e018      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de0:	4b8f      	ldr	r3, [pc, #572]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a8e      	ldr	r2, [pc, #568]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dec:	e017      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 ffbd 	bl	8005d74 <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dfe:	e00e      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3324      	adds	r3, #36	; 0x24
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 f866 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e10:	e005      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	75fb      	strb	r3, [r7, #23]
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004e18:	bf00      	nop
 8004e1a:	e000      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e24:	4b7e      	ldr	r3, [pc, #504]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	497b      	ldr	r1, [pc, #492]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	650b      	str	r3, [r1, #80]	; 0x50
 8004e36:	e001      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
 8004e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d042      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e50:	d01b      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e56:	d805      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d022      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004e62:	e01b      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e68:	d01d      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004e6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e6e:	d01c      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e74:	d01b      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004e76:	e011      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 ff78 	bl	8005d74 <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e88:	e012      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 f821 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e9a:	e009      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004eb6:	4b5a      	ldr	r3, [pc, #360]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec2:	4957      	ldr	r1, [pc, #348]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ec8:	e001      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d044      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee4:	d01b      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eea:	d805      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ef6:	e01b      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d01d      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f02:	d01c      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f08:	d01b      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004f0a:	e011      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 ff2e 	bl	8005d74 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f1c:	e012      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3324      	adds	r3, #36	; 0x24
 8004f22:	2101      	movs	r1, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 ffd7 	bl	8005ed8 <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f2e:	e009      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      break;
 8004f34:	e006      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f36:	bf00      	nop
 8004f38:	e004      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e002      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f4a:	4b35      	ldr	r3, [pc, #212]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f58:	4931      	ldr	r1, [pc, #196]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02d      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f78:	d005      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004f84:	e00f      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a25      	ldr	r2, [pc, #148]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f92:	e00c      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 feea 	bl	8005d74 <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fa4:	e003      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8004faa:	e000      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc0:	4917      	ldr	r1, [pc, #92]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004fc6:	e001      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d035      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d81b      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	08005025 	.word	0x08005025
 8004fec:	08004ff9 	.word	0x08004ff9
 8004ff0:	08005007 	.word	0x08005007
 8004ff4:	08005025 	.word	0x08005025
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005004:	e00f      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2102      	movs	r1, #2
 800500c:	4618      	mov	r0, r3
 800500e:	f000 feb1 	bl	8005d74 <RCCEx_PLL2_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005016:	e006      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
      break;
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400
      break;
 8005024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800502c:	4bba      	ldr	r3, [pc, #744]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	f023 0203 	bic.w	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005038:	49b7      	ldr	r1, [pc, #732]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800503e:	e001      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8086 	beq.w	800515e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005052:	4bb2      	ldr	r3, [pc, #712]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4ab1      	ldr	r2, [pc, #708]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800505e:	f7fc fb17 	bl	8001690 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005064:	e009      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005066:	f7fc fb13 	bl	8001690 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b64      	cmp	r3, #100	; 0x64
 8005072:	d902      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	75fb      	strb	r3, [r7, #23]
        break;
 8005078:	e005      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800507a:	4ba8      	ldr	r3, [pc, #672]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0ef      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d166      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800508c:	4ba2      	ldr	r3, [pc, #648]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800508e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005096:	4053      	eors	r3, r2
 8005098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050a0:	4b9d      	ldr	r3, [pc, #628]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050aa:	4b9b      	ldr	r3, [pc, #620]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a9a      	ldr	r2, [pc, #616]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b6:	4b98      	ldr	r3, [pc, #608]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a97      	ldr	r2, [pc, #604]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050c2:	4a95      	ldr	r2, [pc, #596]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d2:	d115      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fc fadc 	bl	8001690 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050da:	e00b      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fc fad8 	bl	8001690 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d902      	bls.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	75fb      	strb	r3, [r7, #23]
            break;
 80050f2:	e005      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f4:	4b88      	ldr	r3, [pc, #544]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ed      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d126      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d10d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005116:	4b80      	ldr	r3, [pc, #512]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005124:	0919      	lsrs	r1, r3, #4
 8005126:	4b7e      	ldr	r3, [pc, #504]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005128:	400b      	ands	r3, r1
 800512a:	497b      	ldr	r1, [pc, #492]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	610b      	str	r3, [r1, #16]
 8005130:	e005      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005132:	4b79      	ldr	r3, [pc, #484]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	4a78      	ldr	r2, [pc, #480]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005138:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800513c:	6113      	str	r3, [r2, #16]
 800513e:	4b76      	ldr	r3, [pc, #472]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	4972      	ldr	r1, [pc, #456]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	670b      	str	r3, [r1, #112]	; 0x70
 8005152:	e004      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	75bb      	strb	r3, [r7, #22]
 8005158:	e001      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d07d      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516e:	2b28      	cmp	r3, #40	; 0x28
 8005170:	d866      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	08005247 	.word	0x08005247
 800517c:	08005241 	.word	0x08005241
 8005180:	08005241 	.word	0x08005241
 8005184:	08005241 	.word	0x08005241
 8005188:	08005241 	.word	0x08005241
 800518c:	08005241 	.word	0x08005241
 8005190:	08005241 	.word	0x08005241
 8005194:	08005241 	.word	0x08005241
 8005198:	0800521d 	.word	0x0800521d
 800519c:	08005241 	.word	0x08005241
 80051a0:	08005241 	.word	0x08005241
 80051a4:	08005241 	.word	0x08005241
 80051a8:	08005241 	.word	0x08005241
 80051ac:	08005241 	.word	0x08005241
 80051b0:	08005241 	.word	0x08005241
 80051b4:	08005241 	.word	0x08005241
 80051b8:	0800522f 	.word	0x0800522f
 80051bc:	08005241 	.word	0x08005241
 80051c0:	08005241 	.word	0x08005241
 80051c4:	08005241 	.word	0x08005241
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005241 	.word	0x08005241
 80051d4:	08005241 	.word	0x08005241
 80051d8:	08005247 	.word	0x08005247
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005241 	.word	0x08005241
 80051f0:	08005241 	.word	0x08005241
 80051f4:	08005241 	.word	0x08005241
 80051f8:	08005247 	.word	0x08005247
 80051fc:	08005241 	.word	0x08005241
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
 800520c:	08005241 	.word	0x08005241
 8005210:	08005241 	.word	0x08005241
 8005214:	08005241 	.word	0x08005241
 8005218:	08005247 	.word	0x08005247
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	2101      	movs	r1, #1
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fda6 	bl	8005d74 <RCCEx_PLL2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800522c:	e00c      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3324      	adds	r3, #36	; 0x24
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fe4f 	bl	8005ed8 <RCCEx_PLL3_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800523e:	e003      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
      break;
 8005244:	e000      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800524e:	4b32      	ldr	r3, [pc, #200]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800525a:	492f      	ldr	r1, [pc, #188]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800525c:	4313      	orrs	r3, r2
 800525e:	654b      	str	r3, [r1, #84]	; 0x54
 8005260:	e001      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d037      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005276:	2b05      	cmp	r3, #5
 8005278:	d820      	bhi.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052c3 	.word	0x080052c3
 8005284:	08005299 	.word	0x08005299
 8005288:	080052ab 	.word	0x080052ab
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	2101      	movs	r1, #1
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fd68 	bl	8005d74 <RCCEx_PLL2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052a8:	e00c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3324      	adds	r3, #36	; 0x24
 80052ae:	2101      	movs	r1, #1
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fe11 	bl	8005ed8 <RCCEx_PLL3_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
      break;
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80052c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	4910      	ldr	r1, [pc, #64]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	654b      	str	r3, [r1, #84]	; 0x54
 80052dc:	e001      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d040      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d827      	bhi.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	0800534f 	.word	0x0800534f
 8005304:	08005325 	.word	0x08005325
 8005308:	08005337 	.word	0x08005337
 800530c:	0800534f 	.word	0x0800534f
 8005310:	0800534f 	.word	0x0800534f
 8005314:	0800534f 	.word	0x0800534f
 8005318:	58024400 	.word	0x58024400
 800531c:	58024800 	.word	0x58024800
 8005320:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fd22 	bl	8005d74 <RCCEx_PLL2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005334:	e00c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3324      	adds	r3, #36	; 0x24
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fdcb 	bl	8005ed8 <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	75fb      	strb	r3, [r7, #23]
      break;
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800534e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005356:	4bb2      	ldr	r3, [pc, #712]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	49ae      	ldr	r1, [pc, #696]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005366:	4313      	orrs	r3, r2
 8005368:	658b      	str	r3, [r1, #88]	; 0x58
 800536a:	e001      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d044      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005386:	d01b      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800538c:	d805      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d022      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005398:	e01b      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539e:	d01d      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80053a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a4:	d01c      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80053a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053aa:	d01b      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80053ac:	e011      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fcdd 	bl	8005d74 <RCCEx_PLL2_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053be:	e012      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3324      	adds	r3, #36	; 0x24
 80053c4:	2102      	movs	r1, #2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fd86 	bl	8005ed8 <RCCEx_PLL3_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053d0:	e009      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
      break;
 80053d6:	e006      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053d8:	bf00      	nop
 80053da:	e004      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80053e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ec:	4b8c      	ldr	r3, [pc, #560]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fa:	4989      	ldr	r1, [pc, #548]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005400:	e001      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d044      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541c:	d01b      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005422:	d805      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d022      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800542e:	e01b      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d01d      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005436:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800543a:	d01c      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800543c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005440:	d01b      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005442:	e011      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fc92 	bl	8005d74 <RCCEx_PLL2_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005454:	e012      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3324      	adds	r3, #36	; 0x24
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fd3b 	bl	8005ed8 <RCCEx_PLL3_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005466:	e009      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	e006      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800547a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005482:	4b67      	ldr	r3, [pc, #412]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005490:	4963      	ldr	r1, [pc, #396]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	658b      	str	r3, [r1, #88]	; 0x58
 8005496:	e001      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d044      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b2:	d01b      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80054b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b8:	d805      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d022      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80054c4:	e01b      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80054c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ca:	d01d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80054cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054d0:	d01c      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80054d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054d6:	d01b      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80054d8:	e011      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fc47 	bl	8005d74 <RCCEx_PLL2_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054ea:	e012      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3324      	adds	r3, #36	; 0x24
 80054f0:	2102      	movs	r1, #2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fcf0 	bl	8005ed8 <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054fc:	e009      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	e006      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005504:	bf00      	nop
 8005506:	e004      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005508:	bf00      	nop
 800550a:	e002      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800550c:	bf00      	nop
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005518:	4b41      	ldr	r3, [pc, #260]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005526:	493e      	ldr	r1, [pc, #248]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005528:	4313      	orrs	r3, r2
 800552a:	658b      	str	r3, [r1, #88]	; 0x58
 800552c:	e001      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	d10a      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3324      	adds	r3, #36	; 0x24
 800554e:	2102      	movs	r1, #2
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fcc1 	bl	8005ed8 <RCCEx_PLL3_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005560:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556e:	492c      	ldr	r1, [pc, #176]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d10a      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	2102      	movs	r1, #2
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fca0 	bl	8005ed8 <RCCEx_PLL3_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b0:	491b      	ldr	r1, [pc, #108]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d032      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d00d      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80055ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d2:	d016      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d111      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3304      	adds	r3, #4
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fbc8 	bl	8005d74 <RCCEx_PLL2_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055e8:	e00c      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3324      	adds	r3, #36	; 0x24
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fc71 	bl	8005ed8 <RCCEx_PLL3_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005618:	4901      	ldr	r1, [pc, #4]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	658b      	str	r3, [r1, #88]	; 0x58
 800561e:	e003      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005620:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563e:	d00c      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005644:	d015      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564a:	d10f      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564c:	4b71      	ldr	r3, [pc, #452]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a70      	ldr	r2, [pc, #448]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005658:	e00c      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fc39 	bl	8005ed8 <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800566a:	e003      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e000      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567a:	4b66      	ldr	r3, [pc, #408]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005688:	4962      	ldr	r1, [pc, #392]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800568a:	4313      	orrs	r3, r2
 800568c:	654b      	str	r3, [r1, #84]	; 0x54
 800568e:	e001      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d029      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d007      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80056ae:	e00f      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b0:	4b58      	ldr	r3, [pc, #352]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4a57      	ldr	r2, [pc, #348]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056bc:	e00b      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2102      	movs	r1, #2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fb55 	bl	8005d74 <RCCEx_PLL2_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056dc:	4b4d      	ldr	r3, [pc, #308]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	494a      	ldr	r1, [pc, #296]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056ee:	e001      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3324      	adds	r3, #36	; 0x24
 8005704:	2102      	movs	r1, #2
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fbe6 	bl	8005ed8 <RCCEx_PLL3_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02f      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572a:	d00c      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800572c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005730:	d802      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005736:	e00d      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d00f      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800573e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005742:	d00e      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005744:	e006      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005746:	4b33      	ldr	r3, [pc, #204]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a32      	ldr	r2, [pc, #200]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800574c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005752:	e007      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
      break;
 8005758:	e004      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800575a:	bf00      	nop
 800575c:	e002      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800575e:	bf00      	nop
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005776:	4927      	ldr	r1, [pc, #156]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005778:	4313      	orrs	r3, r2
 800577a:	654b      	str	r3, [r1, #84]	; 0x54
 800577c:	e001      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	491e      	ldr	r1, [pc, #120]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800579c:	4313      	orrs	r3, r2
 800579e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b8:	4916      	ldr	r1, [pc, #88]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d4:	6113      	str	r3, [r2, #16]
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057e0:	490c      	ldr	r1, [pc, #48]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da08      	bge.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fa:	4906      	ldr	r1, [pc, #24]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005800:	7dbb      	ldrb	r3, [r7, #22]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	58024400 	.word	0x58024400

08005818 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800581c:	f7ff f880 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8005820:	4601      	mov	r1, r0
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	4a04      	ldr	r2, [pc, #16]	; (8005840 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800582e:	5cd3      	ldrb	r3, [r2, r3]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	58024400 	.word	0x58024400
 8005840:	0801c57c 	.word	0x0801c57c

08005844 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005844:	b480      	push	{r7}
 8005846:	b089      	sub	sp, #36	; 0x24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800584c:	4b9d      	ldr	r3, [pc, #628]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005856:	4b9b      	ldr	r3, [pc, #620]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	0b1b      	lsrs	r3, r3, #12
 800585c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005860:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005862:	4b98      	ldr	r3, [pc, #608]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800586e:	4b95      	ldr	r3, [pc, #596]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 810a 	beq.w	8005aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d05a      	beq.n	800594e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d302      	bcc.n	80058a2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800589c:	2b02      	cmp	r3, #2
 800589e:	d078      	beq.n	8005992 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80058a0:	e099      	b.n	80059d6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a2:	4b88      	ldr	r3, [pc, #544]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02d      	beq.n	800590a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058ae:	4b85      	ldr	r3, [pc, #532]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	4a83      	ldr	r2, [pc, #524]	; (8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d8:	4b7a      	ldr	r3, [pc, #488]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80058f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005904:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005908:	e087      	b.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005914:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591c:	4b69      	ldr	r3, [pc, #420]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005930:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594c:	e065      	b.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005958:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800595c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005960:	4b58      	ldr	r3, [pc, #352]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005970:	ed97 6a03 	vldr	s12, [r7, #12]
 8005974:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005990:	e043      	b.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	ee07 3a90 	vmov	s15, r3
 8005998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80059a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a4:	4b47      	ldr	r3, [pc, #284]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80059bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059d4:	e021      	b.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80059e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e8:	4b36      	ldr	r3, [pc, #216]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005acc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a18:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005a1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	0a5b      	lsrs	r3, r3, #9
 8005a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a40:	ee17 2a90 	vmov	r2, s15
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a48:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6e:	ee17 2a90 	vmov	r2, s15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	0e1b      	lsrs	r3, r3, #24
 8005a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9c:	ee17 2a90 	vmov	r2, s15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	3724      	adds	r7, #36	; 0x24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	03d09000 	.word	0x03d09000
 8005acc:	46000000 	.word	0x46000000
 8005ad0:	4c742400 	.word	0x4c742400
 8005ad4:	4a742400 	.word	0x4a742400
 8005ad8:	4af42400 	.word	0x4af42400

08005adc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ae4:	4b9d      	ldr	r3, [pc, #628]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005aee:	4b9b      	ldr	r3, [pc, #620]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	0d1b      	lsrs	r3, r3, #20
 8005af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005afa:	4b98      	ldr	r3, [pc, #608]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b06:	4b95      	ldr	r3, [pc, #596]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	08db      	lsrs	r3, r3, #3
 8005b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 810a 	beq.w	8005d3e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d05a      	beq.n	8005be6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d302      	bcc.n	8005b3a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d078      	beq.n	8005c2a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005b38:	e099      	b.n	8005c6e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b3a:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d02d      	beq.n	8005ba2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b46:	4b85      	ldr	r3, [pc, #532]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	08db      	lsrs	r3, r3, #3
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	4a83      	ldr	r2, [pc, #524]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005b52:	fa22 f303 	lsr.w	r3, r2, r3
 8005b56:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	ee07 3a90 	vmov	s15, r3
 8005b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b70:	4b7a      	ldr	r3, [pc, #488]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ba0:	e087      	b.n	8005cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	ee07 3a90 	vmov	s15, r3
 8005ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb4:	4b69      	ldr	r3, [pc, #420]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005be4:	e065      	b.n	8005cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf8:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c28:	e043      	b.n	8005cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3c:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c6c:	e021      	b.n	8005cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c80:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c90:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	0a5b      	lsrs	r3, r3, #9
 8005cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd8:	ee17 2a90 	vmov	r2, s15
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d06:	ee17 2a90 	vmov	r2, s15
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	0e1b      	lsrs	r3, r3, #24
 8005d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d34:	ee17 2a90 	vmov	r2, s15
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d3c:	e008      	b.n	8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	609a      	str	r2, [r3, #8]
}
 8005d50:	bf00      	nop
 8005d52:	3724      	adds	r7, #36	; 0x24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	03d09000 	.word	0x03d09000
 8005d64:	46000000 	.word	0x46000000
 8005d68:	4c742400 	.word	0x4c742400
 8005d6c:	4a742400 	.word	0x4a742400
 8005d70:	4af42400 	.word	0x4af42400

08005d74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d82:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d101      	bne.n	8005d92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e099      	b.n	8005ec6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d92:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a4e      	ldr	r2, [pc, #312]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005d98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9e:	f7fb fc77 	bl	8001690 <HAL_GetTick>
 8005da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005da4:	e008      	b.n	8005db8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005da6:	f7fb fc73 	bl	8001690 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e086      	b.n	8005ec6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005db8:	4b45      	ldr	r3, [pc, #276]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f0      	bne.n	8005da6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	493f      	ldr	r1, [pc, #252]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	061b      	lsls	r3, r3, #24
 8005e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e08:	4931      	ldr	r1, [pc, #196]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e0e:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	492d      	ldr	r1, [pc, #180]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f023 0220 	bic.w	r2, r3, #32
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	4928      	ldr	r1, [pc, #160]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e32:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	4a26      	ldr	r2, [pc, #152]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e38:	f023 0310 	bic.w	r3, r3, #16
 8005e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e3e:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <RCCEx_PLL2_Config+0x160>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	69d2      	ldr	r2, [r2, #28]
 8005e4a:	00d2      	lsls	r2, r2, #3
 8005e4c:	4920      	ldr	r1, [pc, #128]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e52:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e58:	f043 0310 	orr.w	r3, r3, #16
 8005e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e70:	e00f      	b.n	8005e92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d106      	bne.n	8005e86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e78:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e84:	e005      	b.n	8005e92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a11      	ldr	r2, [pc, #68]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e92:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a0e      	ldr	r2, [pc, #56]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9e:	f7fb fbf7 	bl	8001690 <HAL_GetTick>
 8005ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ea4:	e008      	b.n	8005eb8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ea6:	f7fb fbf3 	bl	8001690 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e006      	b.n	8005ec6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <RCCEx_PLL2_Config+0x15c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	ffff0007 	.word	0xffff0007

08005ed8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ee6:	4b53      	ldr	r3, [pc, #332]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d101      	bne.n	8005ef6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e099      	b.n	800602a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a4e      	ldr	r2, [pc, #312]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f02:	f7fb fbc5 	bl	8001690 <HAL_GetTick>
 8005f06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f08:	e008      	b.n	8005f1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f0a:	f7fb fbc1 	bl	8001690 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e086      	b.n	800602a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f1c:	4b45      	ldr	r3, [pc, #276]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f0      	bne.n	8005f0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f28:	4b42      	ldr	r3, [pc, #264]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	051b      	lsls	r3, r3, #20
 8005f36:	493f      	ldr	r1, [pc, #252]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	025b      	lsls	r3, r3, #9
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f6c:	4931      	ldr	r1, [pc, #196]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f72:	4b30      	ldr	r3, [pc, #192]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	492d      	ldr	r1, [pc, #180]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	4928      	ldr	r1, [pc, #160]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	4a26      	ldr	r2, [pc, #152]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <RCCEx_PLL3_Config+0x160>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	69d2      	ldr	r2, [r2, #28]
 8005fae:	00d2      	lsls	r2, r2, #3
 8005fb0:	4920      	ldr	r1, [pc, #128]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fd4:	e00f      	b.n	8005ff6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d106      	bne.n	8005fea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fdc:	4b15      	ldr	r3, [pc, #84]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4a14      	ldr	r2, [pc, #80]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fe2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fe8:	e005      	b.n	8005ff6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a11      	ldr	r2, [pc, #68]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006002:	f7fb fb45 	bl	8001690 <HAL_GetTick>
 8006006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006008:	e008      	b.n	800601c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800600a:	f7fb fb41 	bl	8001690 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e006      	b.n	800602a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <RCCEx_PLL3_Config+0x15c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
 8006038:	ffff0007 	.word	0xffff0007

0800603c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e01d      	b.n	800608a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f815 	bl	8006092 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f000 f986 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <HAL_TIM_Base_Start_IT+0x50>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b06      	cmp	r3, #6
 80060d0:	d00b      	beq.n	80060ea <HAL_TIM_Base_Start_IT+0x42>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d8:	d007      	beq.n	80060ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	00010007 	.word	0x00010007

080060fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d122      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d11b      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0202 	mvn.w	r2, #2
 8006128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f905 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8f7 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f908 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d122      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d11b      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0204 	mvn.w	r2, #4
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f8db 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8cd 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8de 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d122      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8b1 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f8a3 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8b4 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b10      	cmp	r3, #16
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b10      	cmp	r3, #16
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0210 	mvn.w	r2, #16
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2208      	movs	r2, #8
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f887 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f879 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f88a 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0201 	mvn.w	r2, #1
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fa fdba 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b80      	cmp	r3, #128	; 0x80
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f914 	bl	80064d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f907 	bl	80064e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f838 	bl	8006376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b20      	cmp	r3, #32
 8006312:	d10e      	bne.n	8006332 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d107      	bne.n	8006332 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f06f 0220 	mvn.w	r2, #32
 800632a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f8c7 	bl	80064c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a40      	ldr	r2, [pc, #256]	; (80064a0 <TIM_Base_SetConfig+0x114>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3d      	ldr	r2, [pc, #244]	; (80064a4 <TIM_Base_SetConfig+0x118>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3c      	ldr	r2, [pc, #240]	; (80064a8 <TIM_Base_SetConfig+0x11c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3b      	ldr	r2, [pc, #236]	; (80064ac <TIM_Base_SetConfig+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3a      	ldr	r2, [pc, #232]	; (80064b0 <TIM_Base_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d108      	bne.n	80063de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2f      	ldr	r2, [pc, #188]	; (80064a0 <TIM_Base_SetConfig+0x114>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <TIM_Base_SetConfig+0x118>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2b      	ldr	r2, [pc, #172]	; (80064a8 <TIM_Base_SetConfig+0x11c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <TIM_Base_SetConfig+0x120>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a29      	ldr	r2, [pc, #164]	; (80064b0 <TIM_Base_SetConfig+0x124>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a28      	ldr	r2, [pc, #160]	; (80064b4 <TIM_Base_SetConfig+0x128>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <TIM_Base_SetConfig+0x12c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a26      	ldr	r2, [pc, #152]	; (80064bc <TIM_Base_SetConfig+0x130>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a10      	ldr	r2, [pc, #64]	; (80064a0 <TIM_Base_SetConfig+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00f      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a12      	ldr	r2, [pc, #72]	; (80064b0 <TIM_Base_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a11      	ldr	r2, [pc, #68]	; (80064b4 <TIM_Base_SetConfig+0x128>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <TIM_Base_SetConfig+0x12c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0f      	ldr	r2, [pc, #60]	; (80064bc <TIM_Base_SetConfig+0x130>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800

080064c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e042      	b.n	8006594 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fa fe07 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	; 0x24
 800652a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f82e 	bl	80065a0 <UART_SetConfig>
 8006544:	4603      	mov	r3, r0
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e022      	b.n	8006594 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f002 f9a0 	bl	800889c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800656a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800657a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f002 fa27 	bl	80089e0 <UART_CheckIdleState>
 8006592:	4603      	mov	r3, r0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	0000      	movs	r0, r0
	...

080065a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065a4:	b090      	sub	sp, #64	; 0x40
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065d6:	4313      	orrs	r3, r2
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4bc1      	ldr	r3, [pc, #772]	; (80068e8 <UART_SetConfig+0x348>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ea:	430b      	orrs	r3, r1
 80065ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4ab7      	ldr	r2, [pc, #732]	; (80068ec <UART_SetConfig+0x34c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d004      	beq.n	800661e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800661a:	4313      	orrs	r3, r2
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	4bb2      	ldr	r3, [pc, #712]	; (80068f0 <UART_SetConfig+0x350>)
 8006626:	4013      	ands	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800662e:	430b      	orrs	r3, r1
 8006630:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	f023 010f 	bic.w	r1, r3, #15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4aa9      	ldr	r2, [pc, #676]	; (80068f4 <UART_SetConfig+0x354>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d177      	bne.n	8006742 <UART_SetConfig+0x1a2>
 8006652:	4ba9      	ldr	r3, [pc, #676]	; (80068f8 <UART_SetConfig+0x358>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665a:	2b28      	cmp	r3, #40	; 0x28
 800665c:	d86c      	bhi.n	8006738 <UART_SetConfig+0x198>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0xc4>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006709 	.word	0x08006709
 8006668:	08006739 	.word	0x08006739
 800666c:	08006739 	.word	0x08006739
 8006670:	08006739 	.word	0x08006739
 8006674:	08006739 	.word	0x08006739
 8006678:	08006739 	.word	0x08006739
 800667c:	08006739 	.word	0x08006739
 8006680:	08006739 	.word	0x08006739
 8006684:	08006711 	.word	0x08006711
 8006688:	08006739 	.word	0x08006739
 800668c:	08006739 	.word	0x08006739
 8006690:	08006739 	.word	0x08006739
 8006694:	08006739 	.word	0x08006739
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	08006719 	.word	0x08006719
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	08006739 	.word	0x08006739
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006731 	.word	0x08006731
 8006708:	2301      	movs	r3, #1
 800670a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800670e:	e233      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006716:	e22f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800671e:	e22b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006726:	e227      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800672e:	e223      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006736:	e21f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800673e:	bf00      	nop
 8006740:	e21a      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6d      	ldr	r2, [pc, #436]	; (80068fc <UART_SetConfig+0x35c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d132      	bne.n	80067b2 <UART_SetConfig+0x212>
 800674c:	4b6a      	ldr	r3, [pc, #424]	; (80068f8 <UART_SetConfig+0x358>)
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	2b05      	cmp	r3, #5
 8006756:	d827      	bhi.n	80067a8 <UART_SetConfig+0x208>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x1c0>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006779 	.word	0x08006779
 8006764:	08006781 	.word	0x08006781
 8006768:	08006789 	.word	0x08006789
 800676c:	08006791 	.word	0x08006791
 8006770:	08006799 	.word	0x08006799
 8006774:	080067a1 	.word	0x080067a1
 8006778:	2300      	movs	r3, #0
 800677a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800677e:	e1fb      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006786:	e1f7      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800678e:	e1f3      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006796:	e1ef      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006798:	2320      	movs	r3, #32
 800679a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800679e:	e1eb      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067a6:	e1e7      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ae:	bf00      	nop
 80067b0:	e1e2      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a52      	ldr	r2, [pc, #328]	; (8006900 <UART_SetConfig+0x360>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d132      	bne.n	8006822 <UART_SetConfig+0x282>
 80067bc:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <UART_SetConfig+0x358>)
 80067be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	2b05      	cmp	r3, #5
 80067c6:	d827      	bhi.n	8006818 <UART_SetConfig+0x278>
 80067c8:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <UART_SetConfig+0x230>)
 80067ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ce:	bf00      	nop
 80067d0:	080067e9 	.word	0x080067e9
 80067d4:	080067f1 	.word	0x080067f1
 80067d8:	080067f9 	.word	0x080067f9
 80067dc:	08006801 	.word	0x08006801
 80067e0:	08006809 	.word	0x08006809
 80067e4:	08006811 	.word	0x08006811
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ee:	e1c3      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80067f0:	2304      	movs	r3, #4
 80067f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067f6:	e1bf      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80067f8:	2308      	movs	r3, #8
 80067fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067fe:	e1bb      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006800:	2310      	movs	r3, #16
 8006802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006806:	e1b7      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006808:	2320      	movs	r3, #32
 800680a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800680e:	e1b3      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006816:	e1af      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006818:	2380      	movs	r3, #128	; 0x80
 800681a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800681e:	bf00      	nop
 8006820:	e1aa      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a37      	ldr	r2, [pc, #220]	; (8006904 <UART_SetConfig+0x364>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d132      	bne.n	8006892 <UART_SetConfig+0x2f2>
 800682c:	4b32      	ldr	r3, [pc, #200]	; (80068f8 <UART_SetConfig+0x358>)
 800682e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	2b05      	cmp	r3, #5
 8006836:	d827      	bhi.n	8006888 <UART_SetConfig+0x2e8>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x2a0>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006859 	.word	0x08006859
 8006844:	08006861 	.word	0x08006861
 8006848:	08006869 	.word	0x08006869
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	2300      	movs	r3, #0
 800685a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800685e:	e18b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006866:	e187      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800686e:	e183      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006876:	e17f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006878:	2320      	movs	r3, #32
 800687a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800687e:	e17b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006880:	2340      	movs	r3, #64	; 0x40
 8006882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006886:	e177      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800688e:	bf00      	nop
 8006890:	e172      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <UART_SetConfig+0x368>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d144      	bne.n	8006926 <UART_SetConfig+0x386>
 800689c:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <UART_SetConfig+0x358>)
 800689e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	2b05      	cmp	r3, #5
 80068a6:	d839      	bhi.n	800691c <UART_SetConfig+0x37c>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x310>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068c9 	.word	0x080068c9
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	080068d9 	.word	0x080068d9
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	08006915 	.word	0x08006915
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ce:	e153      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068d6:	e14f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068de:	e14b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068e6:	e147      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80068e8:	cfff69f3 	.word	0xcfff69f3
 80068ec:	58000c00 	.word	0x58000c00
 80068f0:	11fff4ff 	.word	0x11fff4ff
 80068f4:	40011000 	.word	0x40011000
 80068f8:	58024400 	.word	0x58024400
 80068fc:	40004400 	.word	0x40004400
 8006900:	40004800 	.word	0x40004800
 8006904:	40004c00 	.word	0x40004c00
 8006908:	40005000 	.word	0x40005000
 800690c:	2320      	movs	r3, #32
 800690e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006912:	e131      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800691a:	e12d      	b.n	8006b78 <UART_SetConfig+0x5d8>
 800691c:	2380      	movs	r3, #128	; 0x80
 800691e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006922:	bf00      	nop
 8006924:	e128      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4ac3      	ldr	r2, [pc, #780]	; (8006c38 <UART_SetConfig+0x698>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d178      	bne.n	8006a22 <UART_SetConfig+0x482>
 8006930:	4bc2      	ldr	r3, [pc, #776]	; (8006c3c <UART_SetConfig+0x69c>)
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006938:	2b28      	cmp	r3, #40	; 0x28
 800693a:	d86d      	bhi.n	8006a18 <UART_SetConfig+0x478>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0x3a4>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	080069e9 	.word	0x080069e9
 8006948:	08006a19 	.word	0x08006a19
 800694c:	08006a19 	.word	0x08006a19
 8006950:	08006a19 	.word	0x08006a19
 8006954:	08006a19 	.word	0x08006a19
 8006958:	08006a19 	.word	0x08006a19
 800695c:	08006a19 	.word	0x08006a19
 8006960:	08006a19 	.word	0x08006a19
 8006964:	080069f1 	.word	0x080069f1
 8006968:	08006a19 	.word	0x08006a19
 800696c:	08006a19 	.word	0x08006a19
 8006970:	08006a19 	.word	0x08006a19
 8006974:	08006a19 	.word	0x08006a19
 8006978:	08006a19 	.word	0x08006a19
 800697c:	08006a19 	.word	0x08006a19
 8006980:	08006a19 	.word	0x08006a19
 8006984:	080069f9 	.word	0x080069f9
 8006988:	08006a19 	.word	0x08006a19
 800698c:	08006a19 	.word	0x08006a19
 8006990:	08006a19 	.word	0x08006a19
 8006994:	08006a19 	.word	0x08006a19
 8006998:	08006a19 	.word	0x08006a19
 800699c:	08006a19 	.word	0x08006a19
 80069a0:	08006a19 	.word	0x08006a19
 80069a4:	08006a01 	.word	0x08006a01
 80069a8:	08006a19 	.word	0x08006a19
 80069ac:	08006a19 	.word	0x08006a19
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006a19 	.word	0x08006a19
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a09 	.word	0x08006a09
 80069c8:	08006a19 	.word	0x08006a19
 80069cc:	08006a19 	.word	0x08006a19
 80069d0:	08006a19 	.word	0x08006a19
 80069d4:	08006a19 	.word	0x08006a19
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006a19 	.word	0x08006a19
 80069e0:	08006a19 	.word	0x08006a19
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ee:	e0c3      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069f6:	e0bf      	b.n	8006b78 <UART_SetConfig+0x5d8>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069fe:	e0bb      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a06:	e0b7      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a0e:	e0b3      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a16:	e0af      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a18:	2380      	movs	r3, #128	; 0x80
 8006a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a1e:	bf00      	nop
 8006a20:	e0aa      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a86      	ldr	r2, [pc, #536]	; (8006c40 <UART_SetConfig+0x6a0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d132      	bne.n	8006a92 <UART_SetConfig+0x4f2>
 8006a2c:	4b83      	ldr	r3, [pc, #524]	; (8006c3c <UART_SetConfig+0x69c>)
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	2b05      	cmp	r3, #5
 8006a36:	d827      	bhi.n	8006a88 <UART_SetConfig+0x4e8>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x4a0>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	08006a69 	.word	0x08006a69
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a5e:	e08b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a60:	2304      	movs	r3, #4
 8006a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a66:	e087      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a6e:	e083      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a70:	2310      	movs	r3, #16
 8006a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a76:	e07f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a78:	2320      	movs	r3, #32
 8006a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a7e:	e07b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a80:	2340      	movs	r3, #64	; 0x40
 8006a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a86:	e077      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a8e:	bf00      	nop
 8006a90:	e072      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6b      	ldr	r2, [pc, #428]	; (8006c44 <UART_SetConfig+0x6a4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d132      	bne.n	8006b02 <UART_SetConfig+0x562>
 8006a9c:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <UART_SetConfig+0x69c>)
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d827      	bhi.n	8006af8 <UART_SetConfig+0x558>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x510>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ac9 	.word	0x08006ac9
 8006ab4:	08006ad1 	.word	0x08006ad1
 8006ab8:	08006ad9 	.word	0x08006ad9
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006ae9 	.word	0x08006ae9
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ace:	e053      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ad6:	e04f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ade:	e04b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ae6:	e047      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006ae8:	2320      	movs	r3, #32
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aee:	e043      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006af0:	2340      	movs	r3, #64	; 0x40
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006af6:	e03f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006af8:	2380      	movs	r3, #128	; 0x80
 8006afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006afe:	bf00      	nop
 8006b00:	e03a      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a50      	ldr	r2, [pc, #320]	; (8006c48 <UART_SetConfig+0x6a8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d132      	bne.n	8006b72 <UART_SetConfig+0x5d2>
 8006b0c:	4b4b      	ldr	r3, [pc, #300]	; (8006c3c <UART_SetConfig+0x69c>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	d827      	bhi.n	8006b68 <UART_SetConfig+0x5c8>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <UART_SetConfig+0x580>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b39 	.word	0x08006b39
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	08006b49 	.word	0x08006b49
 8006b2c:	08006b51 	.word	0x08006b51
 8006b30:	08006b59 	.word	0x08006b59
 8006b34:	08006b61 	.word	0x08006b61
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b3e:	e01b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b40:	2304      	movs	r3, #4
 8006b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b46:	e017      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b4e:	e013      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b56:	e00f      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b58:	2320      	movs	r3, #32
 8006b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b5e:	e00b      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b60:	2340      	movs	r3, #64	; 0x40
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b66:	e007      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b6e:	bf00      	nop
 8006b70:	e002      	b.n	8006b78 <UART_SetConfig+0x5d8>
 8006b72:	2380      	movs	r3, #128	; 0x80
 8006b74:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <UART_SetConfig+0x6a8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f040 86f7 	bne.w	8007972 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	f000 80c0 	beq.w	8006d0e <UART_SetConfig+0x76e>
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	dc04      	bgt.n	8006b9c <UART_SetConfig+0x5fc>
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d00c      	beq.n	8006bb0 <UART_SetConfig+0x610>
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d065      	beq.n	8006c66 <UART_SetConfig+0x6c6>
 8006b9a:	e27a      	b.n	8007092 <UART_SetConfig+0xaf2>
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	f000 81b0 	beq.w	8006f02 <UART_SetConfig+0x962>
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	f000 821e 	beq.w	8006fe4 <UART_SetConfig+0xa44>
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	f000 8104 	beq.w	8006db6 <UART_SetConfig+0x816>
 8006bae:	e270      	b.n	8007092 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006bb0:	f7fe fe32 	bl	8005818 <HAL_RCCEx_GetD3PCLK1Freq>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d04e      	beq.n	8006c5c <UART_SetConfig+0x6bc>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d048      	beq.n	8006c58 <UART_SetConfig+0x6b8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d042      	beq.n	8006c54 <UART_SetConfig+0x6b4>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d03c      	beq.n	8006c50 <UART_SetConfig+0x6b0>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d036      	beq.n	8006c4c <UART_SetConfig+0x6ac>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d026      	beq.n	8006c34 <UART_SetConfig+0x694>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d020      	beq.n	8006c30 <UART_SetConfig+0x690>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b07      	cmp	r3, #7
 8006bf4:	d01a      	beq.n	8006c2c <UART_SetConfig+0x68c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d014      	beq.n	8006c28 <UART_SetConfig+0x688>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	d00e      	beq.n	8006c24 <UART_SetConfig+0x684>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b0a      	cmp	r3, #10
 8006c0c:	d008      	beq.n	8006c20 <UART_SetConfig+0x680>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b0b      	cmp	r3, #11
 8006c14:	d102      	bne.n	8006c1c <UART_SetConfig+0x67c>
 8006c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c1a:	e020      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e01e      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	e01c      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c24:	2340      	movs	r3, #64	; 0x40
 8006c26:	e01a      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c28:	2320      	movs	r3, #32
 8006c2a:	e018      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	e016      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c30:	230c      	movs	r3, #12
 8006c32:	e014      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c34:	230a      	movs	r3, #10
 8006c36:	e012      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	40007800 	.word	0x40007800
 8006c44:	40007c00 	.word	0x40007c00
 8006c48:	58000c00 	.word	0x58000c00
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	e006      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c50:	2306      	movs	r3, #6
 8006c52:	e004      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c54:	2304      	movs	r3, #4
 8006c56:	e002      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e000      	b.n	8006c5e <UART_SetConfig+0x6be>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c64:	e219      	b.n	800709a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c66:	f107 0318 	add.w	r3, r7, #24
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fdea 	bl	8005844 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d044      	beq.n	8006d04 <UART_SetConfig+0x764>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d03e      	beq.n	8006d00 <UART_SetConfig+0x760>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d038      	beq.n	8006cfc <UART_SetConfig+0x75c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d032      	beq.n	8006cf8 <UART_SetConfig+0x758>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d02c      	beq.n	8006cf4 <UART_SetConfig+0x754>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d026      	beq.n	8006cf0 <UART_SetConfig+0x750>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b06      	cmp	r3, #6
 8006ca8:	d020      	beq.n	8006cec <UART_SetConfig+0x74c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b07      	cmp	r3, #7
 8006cb0:	d01a      	beq.n	8006ce8 <UART_SetConfig+0x748>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d014      	beq.n	8006ce4 <UART_SetConfig+0x744>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b09      	cmp	r3, #9
 8006cc0:	d00e      	beq.n	8006ce0 <UART_SetConfig+0x740>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b0a      	cmp	r3, #10
 8006cc8:	d008      	beq.n	8006cdc <UART_SetConfig+0x73c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b0b      	cmp	r3, #11
 8006cd0:	d102      	bne.n	8006cd8 <UART_SetConfig+0x738>
 8006cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cd6:	e016      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e014      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cdc:	2380      	movs	r3, #128	; 0x80
 8006cde:	e012      	b.n	8006d06 <UART_SetConfig+0x766>
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	e010      	b.n	8006d06 <UART_SetConfig+0x766>
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	e00e      	b.n	8006d06 <UART_SetConfig+0x766>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	e00c      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cec:	230c      	movs	r3, #12
 8006cee:	e00a      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cf0:	230a      	movs	r3, #10
 8006cf2:	e008      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	e006      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cf8:	2306      	movs	r3, #6
 8006cfa:	e004      	b.n	8006d06 <UART_SetConfig+0x766>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	e002      	b.n	8006d06 <UART_SetConfig+0x766>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e000      	b.n	8006d06 <UART_SetConfig+0x766>
 8006d04:	2301      	movs	r3, #1
 8006d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d0c:	e1c5      	b.n	800709a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d0e:	f107 030c 	add.w	r3, r7, #12
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fee2 	bl	8005adc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d044      	beq.n	8006dac <UART_SetConfig+0x80c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d03e      	beq.n	8006da8 <UART_SetConfig+0x808>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d038      	beq.n	8006da4 <UART_SetConfig+0x804>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d032      	beq.n	8006da0 <UART_SetConfig+0x800>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d02c      	beq.n	8006d9c <UART_SetConfig+0x7fc>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d026      	beq.n	8006d98 <UART_SetConfig+0x7f8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d020      	beq.n	8006d94 <UART_SetConfig+0x7f4>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	2b07      	cmp	r3, #7
 8006d58:	d01a      	beq.n	8006d90 <UART_SetConfig+0x7f0>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d014      	beq.n	8006d8c <UART_SetConfig+0x7ec>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b09      	cmp	r3, #9
 8006d68:	d00e      	beq.n	8006d88 <UART_SetConfig+0x7e8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b0a      	cmp	r3, #10
 8006d70:	d008      	beq.n	8006d84 <UART_SetConfig+0x7e4>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b0b      	cmp	r3, #11
 8006d78:	d102      	bne.n	8006d80 <UART_SetConfig+0x7e0>
 8006d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d7e:	e016      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e014      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d84:	2380      	movs	r3, #128	; 0x80
 8006d86:	e012      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	e010      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	e00e      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d90:	2310      	movs	r3, #16
 8006d92:	e00c      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d94:	230c      	movs	r3, #12
 8006d96:	e00a      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d98:	230a      	movs	r3, #10
 8006d9a:	e008      	b.n	8006dae <UART_SetConfig+0x80e>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	e006      	b.n	8006dae <UART_SetConfig+0x80e>
 8006da0:	2306      	movs	r3, #6
 8006da2:	e004      	b.n	8006dae <UART_SetConfig+0x80e>
 8006da4:	2304      	movs	r3, #4
 8006da6:	e002      	b.n	8006dae <UART_SetConfig+0x80e>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e000      	b.n	8006dae <UART_SetConfig+0x80e>
 8006dac:	2301      	movs	r3, #1
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006db4:	e171      	b.n	800709a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db6:	4b7a      	ldr	r3, [pc, #488]	; (8006fa0 <UART_SetConfig+0xa00>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d054      	beq.n	8006e6c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006dc2:	4b77      	ldr	r3, [pc, #476]	; (8006fa0 <UART_SetConfig+0xa00>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	4a75      	ldr	r2, [pc, #468]	; (8006fa4 <UART_SetConfig+0xa04>)
 8006dce:	40da      	lsrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d044      	beq.n	8006e62 <UART_SetConfig+0x8c2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d03e      	beq.n	8006e5e <UART_SetConfig+0x8be>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d038      	beq.n	8006e5a <UART_SetConfig+0x8ba>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d032      	beq.n	8006e56 <UART_SetConfig+0x8b6>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d02c      	beq.n	8006e52 <UART_SetConfig+0x8b2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	d026      	beq.n	8006e4e <UART_SetConfig+0x8ae>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d020      	beq.n	8006e4a <UART_SetConfig+0x8aa>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	2b07      	cmp	r3, #7
 8006e0e:	d01a      	beq.n	8006e46 <UART_SetConfig+0x8a6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d014      	beq.n	8006e42 <UART_SetConfig+0x8a2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d00e      	beq.n	8006e3e <UART_SetConfig+0x89e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	2b0a      	cmp	r3, #10
 8006e26:	d008      	beq.n	8006e3a <UART_SetConfig+0x89a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	2b0b      	cmp	r3, #11
 8006e2e:	d102      	bne.n	8006e36 <UART_SetConfig+0x896>
 8006e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e34:	e016      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e014      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e3a:	2380      	movs	r3, #128	; 0x80
 8006e3c:	e012      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	e010      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e42:	2320      	movs	r3, #32
 8006e44:	e00e      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e46:	2310      	movs	r3, #16
 8006e48:	e00c      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	e00a      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e008      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e52:	2308      	movs	r3, #8
 8006e54:	e006      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e56:	2306      	movs	r3, #6
 8006e58:	e004      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e5a:	2304      	movs	r3, #4
 8006e5c:	e002      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e000      	b.n	8006e64 <UART_SetConfig+0x8c4>
 8006e62:	2301      	movs	r3, #1
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006e6a:	e116      	b.n	800709a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d043      	beq.n	8006efc <UART_SetConfig+0x95c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d03d      	beq.n	8006ef8 <UART_SetConfig+0x958>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d037      	beq.n	8006ef4 <UART_SetConfig+0x954>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d031      	beq.n	8006ef0 <UART_SetConfig+0x950>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d02b      	beq.n	8006eec <UART_SetConfig+0x94c>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b05      	cmp	r3, #5
 8006e9a:	d025      	beq.n	8006ee8 <UART_SetConfig+0x948>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b06      	cmp	r3, #6
 8006ea2:	d01f      	beq.n	8006ee4 <UART_SetConfig+0x944>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b07      	cmp	r3, #7
 8006eaa:	d019      	beq.n	8006ee0 <UART_SetConfig+0x940>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d013      	beq.n	8006edc <UART_SetConfig+0x93c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b09      	cmp	r3, #9
 8006eba:	d00d      	beq.n	8006ed8 <UART_SetConfig+0x938>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b0a      	cmp	r3, #10
 8006ec2:	d007      	beq.n	8006ed4 <UART_SetConfig+0x934>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	2b0b      	cmp	r3, #11
 8006eca:	d101      	bne.n	8006ed0 <UART_SetConfig+0x930>
 8006ecc:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <UART_SetConfig+0xa08>)
 8006ece:	e016      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ed0:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <UART_SetConfig+0xa04>)
 8006ed2:	e014      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ed4:	4b35      	ldr	r3, [pc, #212]	; (8006fac <UART_SetConfig+0xa0c>)
 8006ed6:	e012      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ed8:	4b35      	ldr	r3, [pc, #212]	; (8006fb0 <UART_SetConfig+0xa10>)
 8006eda:	e010      	b.n	8006efe <UART_SetConfig+0x95e>
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <UART_SetConfig+0xa14>)
 8006ede:	e00e      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ee0:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <UART_SetConfig+0xa18>)
 8006ee2:	e00c      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ee4:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <UART_SetConfig+0xa1c>)
 8006ee6:	e00a      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ee8:	4b35      	ldr	r3, [pc, #212]	; (8006fc0 <UART_SetConfig+0xa20>)
 8006eea:	e008      	b.n	8006efe <UART_SetConfig+0x95e>
 8006eec:	4b35      	ldr	r3, [pc, #212]	; (8006fc4 <UART_SetConfig+0xa24>)
 8006eee:	e006      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ef0:	4b35      	ldr	r3, [pc, #212]	; (8006fc8 <UART_SetConfig+0xa28>)
 8006ef2:	e004      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ef4:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <UART_SetConfig+0xa2c>)
 8006ef6:	e002      	b.n	8006efe <UART_SetConfig+0x95e>
 8006ef8:	4b35      	ldr	r3, [pc, #212]	; (8006fd0 <UART_SetConfig+0xa30>)
 8006efa:	e000      	b.n	8006efe <UART_SetConfig+0x95e>
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <UART_SetConfig+0xa04>)
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f00:	e0cb      	b.n	800709a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d046      	beq.n	8006f98 <UART_SetConfig+0x9f8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d040      	beq.n	8006f94 <UART_SetConfig+0x9f4>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d03a      	beq.n	8006f90 <UART_SetConfig+0x9f0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d034      	beq.n	8006f8c <UART_SetConfig+0x9ec>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d02e      	beq.n	8006f88 <UART_SetConfig+0x9e8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b05      	cmp	r3, #5
 8006f30:	d028      	beq.n	8006f84 <UART_SetConfig+0x9e4>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b06      	cmp	r3, #6
 8006f38:	d022      	beq.n	8006f80 <UART_SetConfig+0x9e0>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b07      	cmp	r3, #7
 8006f40:	d01c      	beq.n	8006f7c <UART_SetConfig+0x9dc>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d016      	beq.n	8006f78 <UART_SetConfig+0x9d8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	2b09      	cmp	r3, #9
 8006f50:	d00f      	beq.n	8006f72 <UART_SetConfig+0x9d2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b0a      	cmp	r3, #10
 8006f58:	d008      	beq.n	8006f6c <UART_SetConfig+0x9cc>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b0b      	cmp	r3, #11
 8006f60:	d102      	bne.n	8006f68 <UART_SetConfig+0x9c8>
 8006f62:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006f66:	e018      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <UART_SetConfig+0xa18>)
 8006f6a:	e016      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f6c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006f70:	e013      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f72:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f76:	e010      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f78:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <UART_SetConfig+0xa34>)
 8006f7a:	e00e      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <UART_SetConfig+0xa08>)
 8006f7e:	e00c      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f80:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <UART_SetConfig+0xa38>)
 8006f82:	e00a      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f84:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <UART_SetConfig+0xa3c>)
 8006f86:	e008      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f88:	4b08      	ldr	r3, [pc, #32]	; (8006fac <UART_SetConfig+0xa0c>)
 8006f8a:	e006      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f8c:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <UART_SetConfig+0xa40>)
 8006f8e:	e004      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <UART_SetConfig+0xa10>)
 8006f92:	e002      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f94:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <UART_SetConfig+0xa14>)
 8006f96:	e000      	b.n	8006f9a <UART_SetConfig+0x9fa>
 8006f98:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <UART_SetConfig+0xa18>)
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f9c:	e07d      	b.n	800709a <UART_SetConfig+0xafa>
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	03d09000 	.word	0x03d09000
 8006fa8:	0003d090 	.word	0x0003d090
 8006fac:	0007a120 	.word	0x0007a120
 8006fb0:	000f4240 	.word	0x000f4240
 8006fb4:	001e8480 	.word	0x001e8480
 8006fb8:	003d0900 	.word	0x003d0900
 8006fbc:	00516155 	.word	0x00516155
 8006fc0:	0061a800 	.word	0x0061a800
 8006fc4:	007a1200 	.word	0x007a1200
 8006fc8:	00a2c2aa 	.word	0x00a2c2aa
 8006fcc:	00f42400 	.word	0x00f42400
 8006fd0:	01e84800 	.word	0x01e84800
 8006fd4:	0001e848 	.word	0x0001e848
 8006fd8:	00051615 	.word	0x00051615
 8006fdc:	00061a80 	.word	0x00061a80
 8006fe0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d04e      	beq.n	800708a <UART_SetConfig+0xaea>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d047      	beq.n	8007084 <UART_SetConfig+0xae4>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d040      	beq.n	800707e <UART_SetConfig+0xade>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	2b03      	cmp	r3, #3
 8007002:	d039      	beq.n	8007078 <UART_SetConfig+0xad8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b04      	cmp	r3, #4
 800700a:	d032      	beq.n	8007072 <UART_SetConfig+0xad2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b05      	cmp	r3, #5
 8007012:	d02b      	beq.n	800706c <UART_SetConfig+0xacc>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	2b06      	cmp	r3, #6
 800701a:	d024      	beq.n	8007066 <UART_SetConfig+0xac6>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b07      	cmp	r3, #7
 8007022:	d01d      	beq.n	8007060 <UART_SetConfig+0xac0>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b08      	cmp	r3, #8
 800702a:	d016      	beq.n	800705a <UART_SetConfig+0xaba>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b09      	cmp	r3, #9
 8007032:	d00f      	beq.n	8007054 <UART_SetConfig+0xab4>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b0a      	cmp	r3, #10
 800703a:	d008      	beq.n	800704e <UART_SetConfig+0xaae>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b0b      	cmp	r3, #11
 8007042:	d101      	bne.n	8007048 <UART_SetConfig+0xaa8>
 8007044:	2380      	movs	r3, #128	; 0x80
 8007046:	e022      	b.n	800708e <UART_SetConfig+0xaee>
 8007048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704c:	e01f      	b.n	800708e <UART_SetConfig+0xaee>
 800704e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007052:	e01c      	b.n	800708e <UART_SetConfig+0xaee>
 8007054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007058:	e019      	b.n	800708e <UART_SetConfig+0xaee>
 800705a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800705e:	e016      	b.n	800708e <UART_SetConfig+0xaee>
 8007060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007064:	e013      	b.n	800708e <UART_SetConfig+0xaee>
 8007066:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800706a:	e010      	b.n	800708e <UART_SetConfig+0xaee>
 800706c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007070:	e00d      	b.n	800708e <UART_SetConfig+0xaee>
 8007072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007076:	e00a      	b.n	800708e <UART_SetConfig+0xaee>
 8007078:	f241 5355 	movw	r3, #5461	; 0x1555
 800707c:	e007      	b.n	800708e <UART_SetConfig+0xaee>
 800707e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007082:	e004      	b.n	800708e <UART_SetConfig+0xaee>
 8007084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007088:	e001      	b.n	800708e <UART_SetConfig+0xaee>
 800708a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007090:	e003      	b.n	800709a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007098:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	f001 83e8 	beq.w	8008872 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d305      	bcc.n	80070be <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d904      	bls.n	80070c8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070c4:	f001 bbd5 	b.w	8008872 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80070c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	f000 8154 	beq.w	800737a <UART_SetConfig+0xdda>
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	dc06      	bgt.n	80070e4 <UART_SetConfig+0xb44>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d00f      	beq.n	80070fa <UART_SetConfig+0xb5a>
 80070da:	2b04      	cmp	r3, #4
 80070dc:	f000 80ac 	beq.w	8007238 <UART_SetConfig+0xc98>
 80070e0:	f000 bc30 	b.w	8007944 <UART_SetConfig+0x13a4>
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	f000 832d 	beq.w	8007744 <UART_SetConfig+0x11a4>
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	f000 83a5 	beq.w	800783a <UART_SetConfig+0x129a>
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	f000 81e3 	beq.w	80074bc <UART_SetConfig+0xf1c>
 80070f6:	f000 bc25 	b.w	8007944 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070fa:	f7fe fb8d 	bl	8005818 <HAL_RCCEx_GetD3PCLK1Freq>
 80070fe:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	4618      	mov	r0, r3
 8007104:	f04f 0100 	mov.w	r1, #0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	d067      	beq.n	80071e0 <UART_SetConfig+0xc40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b01      	cmp	r3, #1
 8007116:	d05e      	beq.n	80071d6 <UART_SetConfig+0xc36>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b02      	cmp	r3, #2
 800711e:	d055      	beq.n	80071cc <UART_SetConfig+0xc2c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b03      	cmp	r3, #3
 8007126:	d04c      	beq.n	80071c2 <UART_SetConfig+0xc22>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b04      	cmp	r3, #4
 800712e:	d043      	beq.n	80071b8 <UART_SetConfig+0xc18>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	2b05      	cmp	r3, #5
 8007136:	d03a      	beq.n	80071ae <UART_SetConfig+0xc0e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b06      	cmp	r3, #6
 800713e:	d031      	beq.n	80071a4 <UART_SetConfig+0xc04>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	2b07      	cmp	r3, #7
 8007146:	d028      	beq.n	800719a <UART_SetConfig+0xbfa>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	2b08      	cmp	r3, #8
 800714e:	d01f      	beq.n	8007190 <UART_SetConfig+0xbf0>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b09      	cmp	r3, #9
 8007156:	d016      	beq.n	8007186 <UART_SetConfig+0xbe6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b0a      	cmp	r3, #10
 800715e:	d00d      	beq.n	800717c <UART_SetConfig+0xbdc>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b0b      	cmp	r3, #11
 8007166:	d104      	bne.n	8007172 <UART_SetConfig+0xbd2>
 8007168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800716c:	f04f 0400 	mov.w	r4, #0
 8007170:	e03a      	b.n	80071e8 <UART_SetConfig+0xc48>
 8007172:	f04f 0301 	mov.w	r3, #1
 8007176:	f04f 0400 	mov.w	r4, #0
 800717a:	e035      	b.n	80071e8 <UART_SetConfig+0xc48>
 800717c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007180:	f04f 0400 	mov.w	r4, #0
 8007184:	e030      	b.n	80071e8 <UART_SetConfig+0xc48>
 8007186:	f04f 0340 	mov.w	r3, #64	; 0x40
 800718a:	f04f 0400 	mov.w	r4, #0
 800718e:	e02b      	b.n	80071e8 <UART_SetConfig+0xc48>
 8007190:	f04f 0320 	mov.w	r3, #32
 8007194:	f04f 0400 	mov.w	r4, #0
 8007198:	e026      	b.n	80071e8 <UART_SetConfig+0xc48>
 800719a:	f04f 0310 	mov.w	r3, #16
 800719e:	f04f 0400 	mov.w	r4, #0
 80071a2:	e021      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071a4:	f04f 030c 	mov.w	r3, #12
 80071a8:	f04f 0400 	mov.w	r4, #0
 80071ac:	e01c      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071ae:	f04f 030a 	mov.w	r3, #10
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	e017      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071b8:	f04f 0308 	mov.w	r3, #8
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	e012      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071c2:	f04f 0306 	mov.w	r3, #6
 80071c6:	f04f 0400 	mov.w	r4, #0
 80071ca:	e00d      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071cc:	f04f 0304 	mov.w	r3, #4
 80071d0:	f04f 0400 	mov.w	r4, #0
 80071d4:	e008      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071d6:	f04f 0302 	mov.w	r3, #2
 80071da:	f04f 0400 	mov.w	r4, #0
 80071de:	e003      	b.n	80071e8 <UART_SetConfig+0xc48>
 80071e0:	f04f 0301 	mov.w	r3, #1
 80071e4:	f04f 0400 	mov.w	r4, #0
 80071e8:	461a      	mov	r2, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	f7f9 f8c8 	bl	8000380 <__aeabi_uldivmod>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4619      	mov	r1, r3
 80071f6:	4622      	mov	r2, r4
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	0214      	lsls	r4, r2, #8
 8007202:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007206:	020b      	lsls	r3, r1, #8
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6852      	ldr	r2, [r2, #4]
 800720c:	0852      	lsrs	r2, r2, #1
 800720e:	4611      	mov	r1, r2
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	eb13 0b01 	adds.w	fp, r3, r1
 8007218:	eb44 0c02 	adc.w	ip, r4, r2
 800721c:	4658      	mov	r0, fp
 800721e:	4661      	mov	r1, ip
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f04f 0400 	mov.w	r4, #0
 8007228:	461a      	mov	r2, r3
 800722a:	4623      	mov	r3, r4
 800722c:	f7f9 f8a8 	bl	8000380 <__aeabi_uldivmod>
 8007230:	4603      	mov	r3, r0
 8007232:	460c      	mov	r4, r1
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007236:	e389      	b.n	800794c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007238:	f107 0318 	add.w	r3, r7, #24
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe fb01 	bl	8005844 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4618      	mov	r0, r3
 8007246:	f04f 0100 	mov.w	r1, #0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d067      	beq.n	8007322 <UART_SetConfig+0xd82>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2b01      	cmp	r3, #1
 8007258:	d05e      	beq.n	8007318 <UART_SetConfig+0xd78>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b02      	cmp	r3, #2
 8007260:	d055      	beq.n	800730e <UART_SetConfig+0xd6e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b03      	cmp	r3, #3
 8007268:	d04c      	beq.n	8007304 <UART_SetConfig+0xd64>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b04      	cmp	r3, #4
 8007270:	d043      	beq.n	80072fa <UART_SetConfig+0xd5a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b05      	cmp	r3, #5
 8007278:	d03a      	beq.n	80072f0 <UART_SetConfig+0xd50>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b06      	cmp	r3, #6
 8007280:	d031      	beq.n	80072e6 <UART_SetConfig+0xd46>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b07      	cmp	r3, #7
 8007288:	d028      	beq.n	80072dc <UART_SetConfig+0xd3c>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b08      	cmp	r3, #8
 8007290:	d01f      	beq.n	80072d2 <UART_SetConfig+0xd32>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b09      	cmp	r3, #9
 8007298:	d016      	beq.n	80072c8 <UART_SetConfig+0xd28>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b0a      	cmp	r3, #10
 80072a0:	d00d      	beq.n	80072be <UART_SetConfig+0xd1e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b0b      	cmp	r3, #11
 80072a8:	d104      	bne.n	80072b4 <UART_SetConfig+0xd14>
 80072aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	e03a      	b.n	800732a <UART_SetConfig+0xd8a>
 80072b4:	f04f 0301 	mov.w	r3, #1
 80072b8:	f04f 0400 	mov.w	r4, #0
 80072bc:	e035      	b.n	800732a <UART_SetConfig+0xd8a>
 80072be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80072c2:	f04f 0400 	mov.w	r4, #0
 80072c6:	e030      	b.n	800732a <UART_SetConfig+0xd8a>
 80072c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80072cc:	f04f 0400 	mov.w	r4, #0
 80072d0:	e02b      	b.n	800732a <UART_SetConfig+0xd8a>
 80072d2:	f04f 0320 	mov.w	r3, #32
 80072d6:	f04f 0400 	mov.w	r4, #0
 80072da:	e026      	b.n	800732a <UART_SetConfig+0xd8a>
 80072dc:	f04f 0310 	mov.w	r3, #16
 80072e0:	f04f 0400 	mov.w	r4, #0
 80072e4:	e021      	b.n	800732a <UART_SetConfig+0xd8a>
 80072e6:	f04f 030c 	mov.w	r3, #12
 80072ea:	f04f 0400 	mov.w	r4, #0
 80072ee:	e01c      	b.n	800732a <UART_SetConfig+0xd8a>
 80072f0:	f04f 030a 	mov.w	r3, #10
 80072f4:	f04f 0400 	mov.w	r4, #0
 80072f8:	e017      	b.n	800732a <UART_SetConfig+0xd8a>
 80072fa:	f04f 0308 	mov.w	r3, #8
 80072fe:	f04f 0400 	mov.w	r4, #0
 8007302:	e012      	b.n	800732a <UART_SetConfig+0xd8a>
 8007304:	f04f 0306 	mov.w	r3, #6
 8007308:	f04f 0400 	mov.w	r4, #0
 800730c:	e00d      	b.n	800732a <UART_SetConfig+0xd8a>
 800730e:	f04f 0304 	mov.w	r3, #4
 8007312:	f04f 0400 	mov.w	r4, #0
 8007316:	e008      	b.n	800732a <UART_SetConfig+0xd8a>
 8007318:	f04f 0302 	mov.w	r3, #2
 800731c:	f04f 0400 	mov.w	r4, #0
 8007320:	e003      	b.n	800732a <UART_SetConfig+0xd8a>
 8007322:	f04f 0301 	mov.w	r3, #1
 8007326:	f04f 0400 	mov.w	r4, #0
 800732a:	461a      	mov	r2, r3
 800732c:	4623      	mov	r3, r4
 800732e:	f7f9 f827 	bl	8000380 <__aeabi_uldivmod>
 8007332:	4603      	mov	r3, r0
 8007334:	460c      	mov	r4, r1
 8007336:	4619      	mov	r1, r3
 8007338:	4622      	mov	r2, r4
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	f04f 0400 	mov.w	r4, #0
 8007342:	0214      	lsls	r4, r2, #8
 8007344:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007348:	020b      	lsls	r3, r1, #8
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6852      	ldr	r2, [r2, #4]
 800734e:	0852      	lsrs	r2, r2, #1
 8007350:	4611      	mov	r1, r2
 8007352:	f04f 0200 	mov.w	r2, #0
 8007356:	eb13 0b01 	adds.w	fp, r3, r1
 800735a:	eb44 0c02 	adc.w	ip, r4, r2
 800735e:	4658      	mov	r0, fp
 8007360:	4661      	mov	r1, ip
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f04f 0400 	mov.w	r4, #0
 800736a:	461a      	mov	r2, r3
 800736c:	4623      	mov	r3, r4
 800736e:	f7f9 f807 	bl	8000380 <__aeabi_uldivmod>
 8007372:	4603      	mov	r3, r0
 8007374:	460c      	mov	r4, r1
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007378:	e2e8      	b.n	800794c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fbac 	bl	8005adc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4618      	mov	r0, r3
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d067      	beq.n	8007464 <UART_SetConfig+0xec4>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b01      	cmp	r3, #1
 800739a:	d05e      	beq.n	800745a <UART_SetConfig+0xeba>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d055      	beq.n	8007450 <UART_SetConfig+0xeb0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d04c      	beq.n	8007446 <UART_SetConfig+0xea6>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d043      	beq.n	800743c <UART_SetConfig+0xe9c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d03a      	beq.n	8007432 <UART_SetConfig+0xe92>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b06      	cmp	r3, #6
 80073c2:	d031      	beq.n	8007428 <UART_SetConfig+0xe88>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b07      	cmp	r3, #7
 80073ca:	d028      	beq.n	800741e <UART_SetConfig+0xe7e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d01f      	beq.n	8007414 <UART_SetConfig+0xe74>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b09      	cmp	r3, #9
 80073da:	d016      	beq.n	800740a <UART_SetConfig+0xe6a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b0a      	cmp	r3, #10
 80073e2:	d00d      	beq.n	8007400 <UART_SetConfig+0xe60>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b0b      	cmp	r3, #11
 80073ea:	d104      	bne.n	80073f6 <UART_SetConfig+0xe56>
 80073ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f0:	f04f 0400 	mov.w	r4, #0
 80073f4:	e03a      	b.n	800746c <UART_SetConfig+0xecc>
 80073f6:	f04f 0301 	mov.w	r3, #1
 80073fa:	f04f 0400 	mov.w	r4, #0
 80073fe:	e035      	b.n	800746c <UART_SetConfig+0xecc>
 8007400:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007404:	f04f 0400 	mov.w	r4, #0
 8007408:	e030      	b.n	800746c <UART_SetConfig+0xecc>
 800740a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800740e:	f04f 0400 	mov.w	r4, #0
 8007412:	e02b      	b.n	800746c <UART_SetConfig+0xecc>
 8007414:	f04f 0320 	mov.w	r3, #32
 8007418:	f04f 0400 	mov.w	r4, #0
 800741c:	e026      	b.n	800746c <UART_SetConfig+0xecc>
 800741e:	f04f 0310 	mov.w	r3, #16
 8007422:	f04f 0400 	mov.w	r4, #0
 8007426:	e021      	b.n	800746c <UART_SetConfig+0xecc>
 8007428:	f04f 030c 	mov.w	r3, #12
 800742c:	f04f 0400 	mov.w	r4, #0
 8007430:	e01c      	b.n	800746c <UART_SetConfig+0xecc>
 8007432:	f04f 030a 	mov.w	r3, #10
 8007436:	f04f 0400 	mov.w	r4, #0
 800743a:	e017      	b.n	800746c <UART_SetConfig+0xecc>
 800743c:	f04f 0308 	mov.w	r3, #8
 8007440:	f04f 0400 	mov.w	r4, #0
 8007444:	e012      	b.n	800746c <UART_SetConfig+0xecc>
 8007446:	f04f 0306 	mov.w	r3, #6
 800744a:	f04f 0400 	mov.w	r4, #0
 800744e:	e00d      	b.n	800746c <UART_SetConfig+0xecc>
 8007450:	f04f 0304 	mov.w	r3, #4
 8007454:	f04f 0400 	mov.w	r4, #0
 8007458:	e008      	b.n	800746c <UART_SetConfig+0xecc>
 800745a:	f04f 0302 	mov.w	r3, #2
 800745e:	f04f 0400 	mov.w	r4, #0
 8007462:	e003      	b.n	800746c <UART_SetConfig+0xecc>
 8007464:	f04f 0301 	mov.w	r3, #1
 8007468:	f04f 0400 	mov.w	r4, #0
 800746c:	461a      	mov	r2, r3
 800746e:	4623      	mov	r3, r4
 8007470:	f7f8 ff86 	bl	8000380 <__aeabi_uldivmod>
 8007474:	4603      	mov	r3, r0
 8007476:	460c      	mov	r4, r1
 8007478:	4619      	mov	r1, r3
 800747a:	4622      	mov	r2, r4
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	f04f 0400 	mov.w	r4, #0
 8007484:	0214      	lsls	r4, r2, #8
 8007486:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800748a:	020b      	lsls	r3, r1, #8
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6852      	ldr	r2, [r2, #4]
 8007490:	0852      	lsrs	r2, r2, #1
 8007492:	4611      	mov	r1, r2
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	eb13 0b01 	adds.w	fp, r3, r1
 800749c:	eb44 0c02 	adc.w	ip, r4, r2
 80074a0:	4658      	mov	r0, fp
 80074a2:	4661      	mov	r1, ip
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f04f 0400 	mov.w	r4, #0
 80074ac:	461a      	mov	r2, r3
 80074ae:	4623      	mov	r3, r4
 80074b0:	f7f8 ff66 	bl	8000380 <__aeabi_uldivmod>
 80074b4:	4603      	mov	r3, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074ba:	e247      	b.n	800794c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074bc:	4b96      	ldr	r3, [pc, #600]	; (8007718 <UART_SetConfig+0x1178>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80a3 	beq.w	8007610 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ca:	4b93      	ldr	r3, [pc, #588]	; (8007718 <UART_SetConfig+0x1178>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	08db      	lsrs	r3, r3, #3
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	4a91      	ldr	r2, [pc, #580]	; (800771c <UART_SetConfig+0x117c>)
 80074d6:	fa22 f303 	lsr.w	r3, r2, r3
 80074da:	4618      	mov	r0, r3
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d067      	beq.n	80075b8 <UART_SetConfig+0x1018>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d05e      	beq.n	80075ae <UART_SetConfig+0x100e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d055      	beq.n	80075a4 <UART_SetConfig+0x1004>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d04c      	beq.n	800759a <UART_SetConfig+0xffa>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b04      	cmp	r3, #4
 8007506:	d043      	beq.n	8007590 <UART_SetConfig+0xff0>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b05      	cmp	r3, #5
 800750e:	d03a      	beq.n	8007586 <UART_SetConfig+0xfe6>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b06      	cmp	r3, #6
 8007516:	d031      	beq.n	800757c <UART_SetConfig+0xfdc>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b07      	cmp	r3, #7
 800751e:	d028      	beq.n	8007572 <UART_SetConfig+0xfd2>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b08      	cmp	r3, #8
 8007526:	d01f      	beq.n	8007568 <UART_SetConfig+0xfc8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b09      	cmp	r3, #9
 800752e:	d016      	beq.n	800755e <UART_SetConfig+0xfbe>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b0a      	cmp	r3, #10
 8007536:	d00d      	beq.n	8007554 <UART_SetConfig+0xfb4>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b0b      	cmp	r3, #11
 800753e:	d104      	bne.n	800754a <UART_SetConfig+0xfaa>
 8007540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007544:	f04f 0400 	mov.w	r4, #0
 8007548:	e03a      	b.n	80075c0 <UART_SetConfig+0x1020>
 800754a:	f04f 0301 	mov.w	r3, #1
 800754e:	f04f 0400 	mov.w	r4, #0
 8007552:	e035      	b.n	80075c0 <UART_SetConfig+0x1020>
 8007554:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007558:	f04f 0400 	mov.w	r4, #0
 800755c:	e030      	b.n	80075c0 <UART_SetConfig+0x1020>
 800755e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007562:	f04f 0400 	mov.w	r4, #0
 8007566:	e02b      	b.n	80075c0 <UART_SetConfig+0x1020>
 8007568:	f04f 0320 	mov.w	r3, #32
 800756c:	f04f 0400 	mov.w	r4, #0
 8007570:	e026      	b.n	80075c0 <UART_SetConfig+0x1020>
 8007572:	f04f 0310 	mov.w	r3, #16
 8007576:	f04f 0400 	mov.w	r4, #0
 800757a:	e021      	b.n	80075c0 <UART_SetConfig+0x1020>
 800757c:	f04f 030c 	mov.w	r3, #12
 8007580:	f04f 0400 	mov.w	r4, #0
 8007584:	e01c      	b.n	80075c0 <UART_SetConfig+0x1020>
 8007586:	f04f 030a 	mov.w	r3, #10
 800758a:	f04f 0400 	mov.w	r4, #0
 800758e:	e017      	b.n	80075c0 <UART_SetConfig+0x1020>
 8007590:	f04f 0308 	mov.w	r3, #8
 8007594:	f04f 0400 	mov.w	r4, #0
 8007598:	e012      	b.n	80075c0 <UART_SetConfig+0x1020>
 800759a:	f04f 0306 	mov.w	r3, #6
 800759e:	f04f 0400 	mov.w	r4, #0
 80075a2:	e00d      	b.n	80075c0 <UART_SetConfig+0x1020>
 80075a4:	f04f 0304 	mov.w	r3, #4
 80075a8:	f04f 0400 	mov.w	r4, #0
 80075ac:	e008      	b.n	80075c0 <UART_SetConfig+0x1020>
 80075ae:	f04f 0302 	mov.w	r3, #2
 80075b2:	f04f 0400 	mov.w	r4, #0
 80075b6:	e003      	b.n	80075c0 <UART_SetConfig+0x1020>
 80075b8:	f04f 0301 	mov.w	r3, #1
 80075bc:	f04f 0400 	mov.w	r4, #0
 80075c0:	461a      	mov	r2, r3
 80075c2:	4623      	mov	r3, r4
 80075c4:	f7f8 fedc 	bl	8000380 <__aeabi_uldivmod>
 80075c8:	4603      	mov	r3, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	4619      	mov	r1, r3
 80075ce:	4622      	mov	r2, r4
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	f04f 0400 	mov.w	r4, #0
 80075d8:	0214      	lsls	r4, r2, #8
 80075da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075de:	020b      	lsls	r3, r1, #8
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6852      	ldr	r2, [r2, #4]
 80075e4:	0852      	lsrs	r2, r2, #1
 80075e6:	4611      	mov	r1, r2
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	eb13 0b01 	adds.w	fp, r3, r1
 80075f0:	eb44 0c02 	adc.w	ip, r4, r2
 80075f4:	4658      	mov	r0, fp
 80075f6:	4661      	mov	r1, ip
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f04f 0400 	mov.w	r4, #0
 8007600:	461a      	mov	r2, r3
 8007602:	4623      	mov	r3, r4
 8007604:	f7f8 febc 	bl	8000380 <__aeabi_uldivmod>
 8007608:	4603      	mov	r3, r0
 800760a:	460c      	mov	r4, r1
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800760e:	e19d      	b.n	800794c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b00      	cmp	r3, #0
 8007616:	d05b      	beq.n	80076d0 <UART_SetConfig+0x1130>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b01      	cmp	r3, #1
 800761e:	d053      	beq.n	80076c8 <UART_SetConfig+0x1128>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b02      	cmp	r3, #2
 8007626:	d04b      	beq.n	80076c0 <UART_SetConfig+0x1120>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b03      	cmp	r3, #3
 800762e:	d043      	beq.n	80076b8 <UART_SetConfig+0x1118>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b04      	cmp	r3, #4
 8007636:	d03b      	beq.n	80076b0 <UART_SetConfig+0x1110>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b05      	cmp	r3, #5
 800763e:	d033      	beq.n	80076a8 <UART_SetConfig+0x1108>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b06      	cmp	r3, #6
 8007646:	d02b      	beq.n	80076a0 <UART_SetConfig+0x1100>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b07      	cmp	r3, #7
 800764e:	d023      	beq.n	8007698 <UART_SetConfig+0x10f8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b08      	cmp	r3, #8
 8007656:	d01b      	beq.n	8007690 <UART_SetConfig+0x10f0>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b09      	cmp	r3, #9
 800765e:	d013      	beq.n	8007688 <UART_SetConfig+0x10e8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b0a      	cmp	r3, #10
 8007666:	d00b      	beq.n	8007680 <UART_SetConfig+0x10e0>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b0b      	cmp	r3, #11
 800766e:	d103      	bne.n	8007678 <UART_SetConfig+0x10d8>
 8007670:	4b2a      	ldr	r3, [pc, #168]	; (800771c <UART_SetConfig+0x117c>)
 8007672:	f04f 0400 	mov.w	r4, #0
 8007676:	e02e      	b.n	80076d6 <UART_SetConfig+0x1136>
 8007678:	4b29      	ldr	r3, [pc, #164]	; (8007720 <UART_SetConfig+0x1180>)
 800767a:	f04f 0403 	mov.w	r4, #3
 800767e:	e02a      	b.n	80076d6 <UART_SetConfig+0x1136>
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <UART_SetConfig+0x1184>)
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	e026      	b.n	80076d6 <UART_SetConfig+0x1136>
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <UART_SetConfig+0x1188>)
 800768a:	f04f 0400 	mov.w	r4, #0
 800768e:	e022      	b.n	80076d6 <UART_SetConfig+0x1136>
 8007690:	4b26      	ldr	r3, [pc, #152]	; (800772c <UART_SetConfig+0x118c>)
 8007692:	f04f 0400 	mov.w	r4, #0
 8007696:	e01e      	b.n	80076d6 <UART_SetConfig+0x1136>
 8007698:	4b25      	ldr	r3, [pc, #148]	; (8007730 <UART_SetConfig+0x1190>)
 800769a:	f04f 0400 	mov.w	r4, #0
 800769e:	e01a      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076a0:	a419      	add	r4, pc, #100	; (adr r4, 8007708 <UART_SetConfig+0x1168>)
 80076a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80076a6:	e016      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <UART_SetConfig+0x1194>)
 80076aa:	f04f 0400 	mov.w	r4, #0
 80076ae:	e012      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076b0:	4b21      	ldr	r3, [pc, #132]	; (8007738 <UART_SetConfig+0x1198>)
 80076b2:	f04f 0400 	mov.w	r4, #0
 80076b6:	e00e      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076b8:	a415      	add	r4, pc, #84	; (adr r4, 8007710 <UART_SetConfig+0x1170>)
 80076ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80076be:	e00a      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076c0:	4b1e      	ldr	r3, [pc, #120]	; (800773c <UART_SetConfig+0x119c>)
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	e006      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <UART_SetConfig+0x11a0>)
 80076ca:	f04f 0401 	mov.w	r4, #1
 80076ce:	e002      	b.n	80076d6 <UART_SetConfig+0x1136>
 80076d0:	4b13      	ldr	r3, [pc, #76]	; (8007720 <UART_SetConfig+0x1180>)
 80076d2:	f04f 0403 	mov.w	r4, #3
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6852      	ldr	r2, [r2, #4]
 80076da:	0852      	lsrs	r2, r2, #1
 80076dc:	4611      	mov	r1, r2
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	eb13 0b01 	adds.w	fp, r3, r1
 80076e6:	eb44 0c02 	adc.w	ip, r4, r2
 80076ea:	4658      	mov	r0, fp
 80076ec:	4661      	mov	r1, ip
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f04f 0400 	mov.w	r4, #0
 80076f6:	461a      	mov	r2, r3
 80076f8:	4623      	mov	r3, r4
 80076fa:	f7f8 fe41 	bl	8000380 <__aeabi_uldivmod>
 80076fe:	4603      	mov	r3, r0
 8007700:	460c      	mov	r4, r1
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007704:	e122      	b.n	800794c <UART_SetConfig+0x13ac>
 8007706:	bf00      	nop
 8007708:	51615500 	.word	0x51615500
 800770c:	00000000 	.word	0x00000000
 8007710:	a2c2aa00 	.word	0xa2c2aa00
 8007714:	00000000 	.word	0x00000000
 8007718:	58024400 	.word	0x58024400
 800771c:	03d09000 	.word	0x03d09000
 8007720:	d0900000 	.word	0xd0900000
 8007724:	07a12000 	.word	0x07a12000
 8007728:	0f424000 	.word	0x0f424000
 800772c:	1e848000 	.word	0x1e848000
 8007730:	3d090000 	.word	0x3d090000
 8007734:	61a80000 	.word	0x61a80000
 8007738:	7a120000 	.word	0x7a120000
 800773c:	f4240000 	.word	0xf4240000
 8007740:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d05b      	beq.n	8007804 <UART_SetConfig+0x1264>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b01      	cmp	r3, #1
 8007752:	d053      	beq.n	80077fc <UART_SetConfig+0x125c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b02      	cmp	r3, #2
 800775a:	d04b      	beq.n	80077f4 <UART_SetConfig+0x1254>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b03      	cmp	r3, #3
 8007762:	d043      	beq.n	80077ec <UART_SetConfig+0x124c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2b04      	cmp	r3, #4
 800776a:	d03b      	beq.n	80077e4 <UART_SetConfig+0x1244>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b05      	cmp	r3, #5
 8007772:	d033      	beq.n	80077dc <UART_SetConfig+0x123c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b06      	cmp	r3, #6
 800777a:	d02b      	beq.n	80077d4 <UART_SetConfig+0x1234>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b07      	cmp	r3, #7
 8007782:	d023      	beq.n	80077cc <UART_SetConfig+0x122c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b08      	cmp	r3, #8
 800778a:	d01b      	beq.n	80077c4 <UART_SetConfig+0x1224>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b09      	cmp	r3, #9
 8007792:	d013      	beq.n	80077bc <UART_SetConfig+0x121c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b0a      	cmp	r3, #10
 800779a:	d00b      	beq.n	80077b4 <UART_SetConfig+0x1214>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b0b      	cmp	r3, #11
 80077a2:	d103      	bne.n	80077ac <UART_SetConfig+0x120c>
 80077a4:	4bc0      	ldr	r3, [pc, #768]	; (8007aa8 <UART_SetConfig+0x1508>)
 80077a6:	f04f 0400 	mov.w	r4, #0
 80077aa:	e02e      	b.n	800780a <UART_SetConfig+0x126a>
 80077ac:	4bbf      	ldr	r3, [pc, #764]	; (8007aac <UART_SetConfig+0x150c>)
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	e02a      	b.n	800780a <UART_SetConfig+0x126a>
 80077b4:	4bbe      	ldr	r3, [pc, #760]	; (8007ab0 <UART_SetConfig+0x1510>)
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e026      	b.n	800780a <UART_SetConfig+0x126a>
 80077bc:	4bbd      	ldr	r3, [pc, #756]	; (8007ab4 <UART_SetConfig+0x1514>)
 80077be:	f04f 0400 	mov.w	r4, #0
 80077c2:	e022      	b.n	800780a <UART_SetConfig+0x126a>
 80077c4:	4bbc      	ldr	r3, [pc, #752]	; (8007ab8 <UART_SetConfig+0x1518>)
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	e01e      	b.n	800780a <UART_SetConfig+0x126a>
 80077cc:	4bbb      	ldr	r3, [pc, #748]	; (8007abc <UART_SetConfig+0x151c>)
 80077ce:	f04f 0400 	mov.w	r4, #0
 80077d2:	e01a      	b.n	800780a <UART_SetConfig+0x126a>
 80077d4:	a4b0      	add	r4, pc, #704	; (adr r4, 8007a98 <UART_SetConfig+0x14f8>)
 80077d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077da:	e016      	b.n	800780a <UART_SetConfig+0x126a>
 80077dc:	4bb8      	ldr	r3, [pc, #736]	; (8007ac0 <UART_SetConfig+0x1520>)
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	e012      	b.n	800780a <UART_SetConfig+0x126a>
 80077e4:	4bb7      	ldr	r3, [pc, #732]	; (8007ac4 <UART_SetConfig+0x1524>)
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	e00e      	b.n	800780a <UART_SetConfig+0x126a>
 80077ec:	a4ac      	add	r4, pc, #688	; (adr r4, 8007aa0 <UART_SetConfig+0x1500>)
 80077ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077f2:	e00a      	b.n	800780a <UART_SetConfig+0x126a>
 80077f4:	4bb4      	ldr	r3, [pc, #720]	; (8007ac8 <UART_SetConfig+0x1528>)
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	e006      	b.n	800780a <UART_SetConfig+0x126a>
 80077fc:	4bb3      	ldr	r3, [pc, #716]	; (8007acc <UART_SetConfig+0x152c>)
 80077fe:	f04f 0400 	mov.w	r4, #0
 8007802:	e002      	b.n	800780a <UART_SetConfig+0x126a>
 8007804:	4ba9      	ldr	r3, [pc, #676]	; (8007aac <UART_SetConfig+0x150c>)
 8007806:	f04f 0400 	mov.w	r4, #0
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6852      	ldr	r2, [r2, #4]
 800780e:	0852      	lsrs	r2, r2, #1
 8007810:	4611      	mov	r1, r2
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	eb13 0b01 	adds.w	fp, r3, r1
 800781a:	eb44 0c02 	adc.w	ip, r4, r2
 800781e:	4658      	mov	r0, fp
 8007820:	4661      	mov	r1, ip
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f04f 0400 	mov.w	r4, #0
 800782a:	461a      	mov	r2, r3
 800782c:	4623      	mov	r3, r4
 800782e:	f7f8 fda7 	bl	8000380 <__aeabi_uldivmod>
 8007832:	4603      	mov	r3, r0
 8007834:	460c      	mov	r4, r1
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007838:	e088      	b.n	800794c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d064      	beq.n	800790c <UART_SetConfig+0x136c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b01      	cmp	r3, #1
 8007848:	d05b      	beq.n	8007902 <UART_SetConfig+0x1362>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b02      	cmp	r3, #2
 8007850:	d052      	beq.n	80078f8 <UART_SetConfig+0x1358>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b03      	cmp	r3, #3
 8007858:	d04a      	beq.n	80078f0 <UART_SetConfig+0x1350>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b04      	cmp	r3, #4
 8007860:	d041      	beq.n	80078e6 <UART_SetConfig+0x1346>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b05      	cmp	r3, #5
 8007868:	d039      	beq.n	80078de <UART_SetConfig+0x133e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b06      	cmp	r3, #6
 8007870:	d031      	beq.n	80078d6 <UART_SetConfig+0x1336>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b07      	cmp	r3, #7
 8007878:	d028      	beq.n	80078cc <UART_SetConfig+0x132c>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b08      	cmp	r3, #8
 8007880:	d01f      	beq.n	80078c2 <UART_SetConfig+0x1322>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b09      	cmp	r3, #9
 8007888:	d016      	beq.n	80078b8 <UART_SetConfig+0x1318>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	2b0a      	cmp	r3, #10
 8007890:	d00d      	beq.n	80078ae <UART_SetConfig+0x130e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b0b      	cmp	r3, #11
 8007898:	d104      	bne.n	80078a4 <UART_SetConfig+0x1304>
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	f04f 0400 	mov.w	r4, #0
 80078a2:	e037      	b.n	8007914 <UART_SetConfig+0x1374>
 80078a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078a8:	f04f 0400 	mov.w	r4, #0
 80078ac:	e032      	b.n	8007914 <UART_SetConfig+0x1374>
 80078ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078b2:	f04f 0400 	mov.w	r4, #0
 80078b6:	e02d      	b.n	8007914 <UART_SetConfig+0x1374>
 80078b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078bc:	f04f 0400 	mov.w	r4, #0
 80078c0:	e028      	b.n	8007914 <UART_SetConfig+0x1374>
 80078c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	e023      	b.n	8007914 <UART_SetConfig+0x1374>
 80078cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	e01e      	b.n	8007914 <UART_SetConfig+0x1374>
 80078d6:	4b7e      	ldr	r3, [pc, #504]	; (8007ad0 <UART_SetConfig+0x1530>)
 80078d8:	f04f 0400 	mov.w	r4, #0
 80078dc:	e01a      	b.n	8007914 <UART_SetConfig+0x1374>
 80078de:	4b7d      	ldr	r3, [pc, #500]	; (8007ad4 <UART_SetConfig+0x1534>)
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	e016      	b.n	8007914 <UART_SetConfig+0x1374>
 80078e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078ea:	f04f 0400 	mov.w	r4, #0
 80078ee:	e011      	b.n	8007914 <UART_SetConfig+0x1374>
 80078f0:	4b79      	ldr	r3, [pc, #484]	; (8007ad8 <UART_SetConfig+0x1538>)
 80078f2:	f04f 0400 	mov.w	r4, #0
 80078f6:	e00d      	b.n	8007914 <UART_SetConfig+0x1374>
 80078f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078fc:	f04f 0400 	mov.w	r4, #0
 8007900:	e008      	b.n	8007914 <UART_SetConfig+0x1374>
 8007902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007906:	f04f 0400 	mov.w	r4, #0
 800790a:	e003      	b.n	8007914 <UART_SetConfig+0x1374>
 800790c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6852      	ldr	r2, [r2, #4]
 8007918:	0852      	lsrs	r2, r2, #1
 800791a:	4611      	mov	r1, r2
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	eb13 0b01 	adds.w	fp, r3, r1
 8007924:	eb44 0c02 	adc.w	ip, r4, r2
 8007928:	4658      	mov	r0, fp
 800792a:	4661      	mov	r1, ip
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	461a      	mov	r2, r3
 8007936:	4623      	mov	r3, r4
 8007938:	f7f8 fd22 	bl	8000380 <__aeabi_uldivmod>
 800793c:	4603      	mov	r3, r0
 800793e:	460c      	mov	r4, r1
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007942:	e003      	b.n	800794c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800794a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800794c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007952:	d309      	bcc.n	8007968 <UART_SetConfig+0x13c8>
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800795a:	d205      	bcs.n	8007968 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	f000 bf85 	b.w	8008872 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800796e:	f000 bf80 	b.w	8008872 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800797a:	f040 83da 	bne.w	8008132 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800797e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	f200 83b3 	bhi.w	80080ee <UART_SetConfig+0x1b4e>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x13f0>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	08007add 	.word	0x08007add
 8007994:	08007b95 	.word	0x08007b95
 8007998:	080080ef 	.word	0x080080ef
 800799c:	080080ef 	.word	0x080080ef
 80079a0:	08007c4d 	.word	0x08007c4d
 80079a4:	080080ef 	.word	0x080080ef
 80079a8:	080080ef 	.word	0x080080ef
 80079ac:	080080ef 	.word	0x080080ef
 80079b0:	08007d09 	.word	0x08007d09
 80079b4:	080080ef 	.word	0x080080ef
 80079b8:	080080ef 	.word	0x080080ef
 80079bc:	080080ef 	.word	0x080080ef
 80079c0:	080080ef 	.word	0x080080ef
 80079c4:	080080ef 	.word	0x080080ef
 80079c8:	080080ef 	.word	0x080080ef
 80079cc:	080080ef 	.word	0x080080ef
 80079d0:	08007dc5 	.word	0x08007dc5
 80079d4:	080080ef 	.word	0x080080ef
 80079d8:	080080ef 	.word	0x080080ef
 80079dc:	080080ef 	.word	0x080080ef
 80079e0:	080080ef 	.word	0x080080ef
 80079e4:	080080ef 	.word	0x080080ef
 80079e8:	080080ef 	.word	0x080080ef
 80079ec:	080080ef 	.word	0x080080ef
 80079f0:	080080ef 	.word	0x080080ef
 80079f4:	080080ef 	.word	0x080080ef
 80079f8:	080080ef 	.word	0x080080ef
 80079fc:	080080ef 	.word	0x080080ef
 8007a00:	080080ef 	.word	0x080080ef
 8007a04:	080080ef 	.word	0x080080ef
 8007a08:	080080ef 	.word	0x080080ef
 8007a0c:	080080ef 	.word	0x080080ef
 8007a10:	08007f37 	.word	0x08007f37
 8007a14:	080080ef 	.word	0x080080ef
 8007a18:	080080ef 	.word	0x080080ef
 8007a1c:	080080ef 	.word	0x080080ef
 8007a20:	080080ef 	.word	0x080080ef
 8007a24:	080080ef 	.word	0x080080ef
 8007a28:	080080ef 	.word	0x080080ef
 8007a2c:	080080ef 	.word	0x080080ef
 8007a30:	080080ef 	.word	0x080080ef
 8007a34:	080080ef 	.word	0x080080ef
 8007a38:	080080ef 	.word	0x080080ef
 8007a3c:	080080ef 	.word	0x080080ef
 8007a40:	080080ef 	.word	0x080080ef
 8007a44:	080080ef 	.word	0x080080ef
 8007a48:	080080ef 	.word	0x080080ef
 8007a4c:	080080ef 	.word	0x080080ef
 8007a50:	080080ef 	.word	0x080080ef
 8007a54:	080080ef 	.word	0x080080ef
 8007a58:	080080ef 	.word	0x080080ef
 8007a5c:	080080ef 	.word	0x080080ef
 8007a60:	080080ef 	.word	0x080080ef
 8007a64:	080080ef 	.word	0x080080ef
 8007a68:	080080ef 	.word	0x080080ef
 8007a6c:	080080ef 	.word	0x080080ef
 8007a70:	080080ef 	.word	0x080080ef
 8007a74:	080080ef 	.word	0x080080ef
 8007a78:	080080ef 	.word	0x080080ef
 8007a7c:	080080ef 	.word	0x080080ef
 8007a80:	080080ef 	.word	0x080080ef
 8007a84:	080080ef 	.word	0x080080ef
 8007a88:	080080ef 	.word	0x080080ef
 8007a8c:	080080ef 	.word	0x080080ef
 8007a90:	0800802d 	.word	0x0800802d
 8007a94:	f3af 8000 	nop.w
 8007a98:	05161500 	.word	0x05161500
 8007a9c:	00000000 	.word	0x00000000
 8007aa0:	0a2c2a00 	.word	0x0a2c2a00
 8007aa4:	00000000 	.word	0x00000000
 8007aa8:	003d0900 	.word	0x003d0900
 8007aac:	3d090000 	.word	0x3d090000
 8007ab0:	007a1200 	.word	0x007a1200
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	01e84800 	.word	0x01e84800
 8007abc:	03d09000 	.word	0x03d09000
 8007ac0:	061a8000 	.word	0x061a8000
 8007ac4:	07a12000 	.word	0x07a12000
 8007ac8:	0f424000 	.word	0x0f424000
 8007acc:	1e848000 	.word	0x1e848000
 8007ad0:	000aaa00 	.word	0x000aaa00
 8007ad4:	000ccc00 	.word	0x000ccc00
 8007ad8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007adc:	f7fc ff50 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8007ae0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d044      	beq.n	8007b74 <UART_SetConfig+0x15d4>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d03e      	beq.n	8007b70 <UART_SetConfig+0x15d0>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d038      	beq.n	8007b6c <UART_SetConfig+0x15cc>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d032      	beq.n	8007b68 <UART_SetConfig+0x15c8>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d02c      	beq.n	8007b64 <UART_SetConfig+0x15c4>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d026      	beq.n	8007b60 <UART_SetConfig+0x15c0>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d020      	beq.n	8007b5c <UART_SetConfig+0x15bc>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b07      	cmp	r3, #7
 8007b20:	d01a      	beq.n	8007b58 <UART_SetConfig+0x15b8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d014      	beq.n	8007b54 <UART_SetConfig+0x15b4>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	d00e      	beq.n	8007b50 <UART_SetConfig+0x15b0>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b0a      	cmp	r3, #10
 8007b38:	d008      	beq.n	8007b4c <UART_SetConfig+0x15ac>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b0b      	cmp	r3, #11
 8007b40:	d102      	bne.n	8007b48 <UART_SetConfig+0x15a8>
 8007b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b46:	e016      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e014      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b4c:	2380      	movs	r3, #128	; 0x80
 8007b4e:	e012      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	e010      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b54:	2320      	movs	r3, #32
 8007b56:	e00e      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	e00c      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b5c:	230c      	movs	r3, #12
 8007b5e:	e00a      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b60:	230a      	movs	r3, #10
 8007b62:	e008      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b64:	2308      	movs	r3, #8
 8007b66:	e006      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b68:	2306      	movs	r3, #6
 8007b6a:	e004      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	e002      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e000      	b.n	8007b76 <UART_SetConfig+0x15d6>
 8007b74:	2301      	movs	r3, #1
 8007b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7c:	005a      	lsls	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b92:	e2b0      	b.n	80080f6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b94:	f7fc ff0a 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8007b98:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d044      	beq.n	8007c2c <UART_SetConfig+0x168c>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d03e      	beq.n	8007c28 <UART_SetConfig+0x1688>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d038      	beq.n	8007c24 <UART_SetConfig+0x1684>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d032      	beq.n	8007c20 <UART_SetConfig+0x1680>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d02c      	beq.n	8007c1c <UART_SetConfig+0x167c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d026      	beq.n	8007c18 <UART_SetConfig+0x1678>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b06      	cmp	r3, #6
 8007bd0:	d020      	beq.n	8007c14 <UART_SetConfig+0x1674>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b07      	cmp	r3, #7
 8007bd8:	d01a      	beq.n	8007c10 <UART_SetConfig+0x1670>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d014      	beq.n	8007c0c <UART_SetConfig+0x166c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b09      	cmp	r3, #9
 8007be8:	d00e      	beq.n	8007c08 <UART_SetConfig+0x1668>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b0a      	cmp	r3, #10
 8007bf0:	d008      	beq.n	8007c04 <UART_SetConfig+0x1664>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b0b      	cmp	r3, #11
 8007bf8:	d102      	bne.n	8007c00 <UART_SetConfig+0x1660>
 8007bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bfe:	e016      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e014      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	e012      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c08:	2340      	movs	r3, #64	; 0x40
 8007c0a:	e010      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	e00e      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c10:	2310      	movs	r3, #16
 8007c12:	e00c      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c14:	230c      	movs	r3, #12
 8007c16:	e00a      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c18:	230a      	movs	r3, #10
 8007c1a:	e008      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	e006      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c20:	2306      	movs	r3, #6
 8007c22:	e004      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c24:	2304      	movs	r3, #4
 8007c26:	e002      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e000      	b.n	8007c2e <UART_SetConfig+0x168e>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	005a      	lsls	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	441a      	add	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c4a:	e254      	b.n	80080f6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c4c:	f107 0318 	add.w	r3, r7, #24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fdf7 	bl	8005844 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d044      	beq.n	8007cea <UART_SetConfig+0x174a>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d03e      	beq.n	8007ce6 <UART_SetConfig+0x1746>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d038      	beq.n	8007ce2 <UART_SetConfig+0x1742>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d032      	beq.n	8007cde <UART_SetConfig+0x173e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d02c      	beq.n	8007cda <UART_SetConfig+0x173a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	d026      	beq.n	8007cd6 <UART_SetConfig+0x1736>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b06      	cmp	r3, #6
 8007c8e:	d020      	beq.n	8007cd2 <UART_SetConfig+0x1732>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b07      	cmp	r3, #7
 8007c96:	d01a      	beq.n	8007cce <UART_SetConfig+0x172e>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d014      	beq.n	8007cca <UART_SetConfig+0x172a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d00e      	beq.n	8007cc6 <UART_SetConfig+0x1726>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	2b0a      	cmp	r3, #10
 8007cae:	d008      	beq.n	8007cc2 <UART_SetConfig+0x1722>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2b0b      	cmp	r3, #11
 8007cb6:	d102      	bne.n	8007cbe <UART_SetConfig+0x171e>
 8007cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cbc:	e016      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e014      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cc2:	2380      	movs	r3, #128	; 0x80
 8007cc4:	e012      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	e010      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cca:	2320      	movs	r3, #32
 8007ccc:	e00e      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cce:	2310      	movs	r3, #16
 8007cd0:	e00c      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	e00a      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cd6:	230a      	movs	r3, #10
 8007cd8:	e008      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cda:	2308      	movs	r3, #8
 8007cdc:	e006      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cde:	2306      	movs	r3, #6
 8007ce0:	e004      	b.n	8007cec <UART_SetConfig+0x174c>
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	e002      	b.n	8007cec <UART_SetConfig+0x174c>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e000      	b.n	8007cec <UART_SetConfig+0x174c>
 8007cea:	2301      	movs	r3, #1
 8007cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf0:	005a      	lsls	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	441a      	add	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d06:	e1f6      	b.n	80080f6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fd fee5 	bl	8005adc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d044      	beq.n	8007da6 <UART_SetConfig+0x1806>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d03e      	beq.n	8007da2 <UART_SetConfig+0x1802>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d038      	beq.n	8007d9e <UART_SetConfig+0x17fe>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d032      	beq.n	8007d9a <UART_SetConfig+0x17fa>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d02c      	beq.n	8007d96 <UART_SetConfig+0x17f6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d026      	beq.n	8007d92 <UART_SetConfig+0x17f2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	2b06      	cmp	r3, #6
 8007d4a:	d020      	beq.n	8007d8e <UART_SetConfig+0x17ee>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	2b07      	cmp	r3, #7
 8007d52:	d01a      	beq.n	8007d8a <UART_SetConfig+0x17ea>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d014      	beq.n	8007d86 <UART_SetConfig+0x17e6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	d00e      	beq.n	8007d82 <UART_SetConfig+0x17e2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	2b0a      	cmp	r3, #10
 8007d6a:	d008      	beq.n	8007d7e <UART_SetConfig+0x17de>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b0b      	cmp	r3, #11
 8007d72:	d102      	bne.n	8007d7a <UART_SetConfig+0x17da>
 8007d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d78:	e016      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e014      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	e012      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	e010      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d86:	2320      	movs	r3, #32
 8007d88:	e00e      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	e00c      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	e00a      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d92:	230a      	movs	r3, #10
 8007d94:	e008      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d96:	2308      	movs	r3, #8
 8007d98:	e006      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d9a:	2306      	movs	r3, #6
 8007d9c:	e004      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007d9e:	2304      	movs	r3, #4
 8007da0:	e002      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e000      	b.n	8007da8 <UART_SetConfig+0x1808>
 8007da6:	2301      	movs	r3, #1
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	005a      	lsls	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	441a      	add	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dc2:	e198      	b.n	80080f6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc4:	4b87      	ldr	r3, [pc, #540]	; (8007fe4 <UART_SetConfig+0x1a44>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d05e      	beq.n	8007e8e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd0:	4b84      	ldr	r3, [pc, #528]	; (8007fe4 <UART_SetConfig+0x1a44>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	4a83      	ldr	r2, [pc, #524]	; (8007fe8 <UART_SetConfig+0x1a48>)
 8007ddc:	40da      	lsrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d044      	beq.n	8007e70 <UART_SetConfig+0x18d0>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d03e      	beq.n	8007e6c <UART_SetConfig+0x18cc>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d038      	beq.n	8007e68 <UART_SetConfig+0x18c8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d032      	beq.n	8007e64 <UART_SetConfig+0x18c4>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d02c      	beq.n	8007e60 <UART_SetConfig+0x18c0>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b05      	cmp	r3, #5
 8007e0c:	d026      	beq.n	8007e5c <UART_SetConfig+0x18bc>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d020      	beq.n	8007e58 <UART_SetConfig+0x18b8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	2b07      	cmp	r3, #7
 8007e1c:	d01a      	beq.n	8007e54 <UART_SetConfig+0x18b4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b08      	cmp	r3, #8
 8007e24:	d014      	beq.n	8007e50 <UART_SetConfig+0x18b0>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d00e      	beq.n	8007e4c <UART_SetConfig+0x18ac>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b0a      	cmp	r3, #10
 8007e34:	d008      	beq.n	8007e48 <UART_SetConfig+0x18a8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b0b      	cmp	r3, #11
 8007e3c:	d102      	bne.n	8007e44 <UART_SetConfig+0x18a4>
 8007e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e42:	e016      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e44:	2301      	movs	r3, #1
 8007e46:	e014      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	e012      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e4c:	2340      	movs	r3, #64	; 0x40
 8007e4e:	e010      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e50:	2320      	movs	r3, #32
 8007e52:	e00e      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e54:	2310      	movs	r3, #16
 8007e56:	e00c      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	e00a      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e5c:	230a      	movs	r3, #10
 8007e5e:	e008      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e60:	2308      	movs	r3, #8
 8007e62:	e006      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e64:	2306      	movs	r3, #6
 8007e66:	e004      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	e002      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e000      	b.n	8007e72 <UART_SetConfig+0x18d2>
 8007e70:	2301      	movs	r3, #1
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	005a      	lsls	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	441a      	add	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007e8c:	e133      	b.n	80080f6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d043      	beq.n	8007f1e <UART_SetConfig+0x197e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d03d      	beq.n	8007f1a <UART_SetConfig+0x197a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d037      	beq.n	8007f16 <UART_SetConfig+0x1976>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d031      	beq.n	8007f12 <UART_SetConfig+0x1972>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d02b      	beq.n	8007f0e <UART_SetConfig+0x196e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	d025      	beq.n	8007f0a <UART_SetConfig+0x196a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d01f      	beq.n	8007f06 <UART_SetConfig+0x1966>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b07      	cmp	r3, #7
 8007ecc:	d019      	beq.n	8007f02 <UART_SetConfig+0x1962>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d013      	beq.n	8007efe <UART_SetConfig+0x195e>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b09      	cmp	r3, #9
 8007edc:	d00d      	beq.n	8007efa <UART_SetConfig+0x195a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b0a      	cmp	r3, #10
 8007ee4:	d007      	beq.n	8007ef6 <UART_SetConfig+0x1956>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	2b0b      	cmp	r3, #11
 8007eec:	d101      	bne.n	8007ef2 <UART_SetConfig+0x1952>
 8007eee:	4b3f      	ldr	r3, [pc, #252]	; (8007fec <UART_SetConfig+0x1a4c>)
 8007ef0:	e016      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007ef2:	4b3f      	ldr	r3, [pc, #252]	; (8007ff0 <UART_SetConfig+0x1a50>)
 8007ef4:	e014      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007ef6:	4b3f      	ldr	r3, [pc, #252]	; (8007ff4 <UART_SetConfig+0x1a54>)
 8007ef8:	e012      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007efa:	4b3f      	ldr	r3, [pc, #252]	; (8007ff8 <UART_SetConfig+0x1a58>)
 8007efc:	e010      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007efe:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <UART_SetConfig+0x1a5c>)
 8007f00:	e00e      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f02:	4b3f      	ldr	r3, [pc, #252]	; (8008000 <UART_SetConfig+0x1a60>)
 8007f04:	e00c      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f06:	4b3f      	ldr	r3, [pc, #252]	; (8008004 <UART_SetConfig+0x1a64>)
 8007f08:	e00a      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f0a:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <UART_SetConfig+0x1a68>)
 8007f0c:	e008      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f0e:	4b3f      	ldr	r3, [pc, #252]	; (800800c <UART_SetConfig+0x1a6c>)
 8007f10:	e006      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f12:	4b3f      	ldr	r3, [pc, #252]	; (8008010 <UART_SetConfig+0x1a70>)
 8007f14:	e004      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f16:	4b3f      	ldr	r3, [pc, #252]	; (8008014 <UART_SetConfig+0x1a74>)
 8007f18:	e002      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f1a:	4b33      	ldr	r3, [pc, #204]	; (8007fe8 <UART_SetConfig+0x1a48>)
 8007f1c:	e000      	b.n	8007f20 <UART_SetConfig+0x1980>
 8007f1e:	4b34      	ldr	r3, [pc, #208]	; (8007ff0 <UART_SetConfig+0x1a50>)
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6852      	ldr	r2, [r2, #4]
 8007f24:	0852      	lsrs	r2, r2, #1
 8007f26:	441a      	add	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f34:	e0df      	b.n	80080f6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d045      	beq.n	8007fca <UART_SetConfig+0x1a2a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d03f      	beq.n	8007fc6 <UART_SetConfig+0x1a26>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d039      	beq.n	8007fc2 <UART_SetConfig+0x1a22>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d033      	beq.n	8007fbe <UART_SetConfig+0x1a1e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d02d      	beq.n	8007fba <UART_SetConfig+0x1a1a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d027      	beq.n	8007fb6 <UART_SetConfig+0x1a16>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d021      	beq.n	8007fb2 <UART_SetConfig+0x1a12>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	d01b      	beq.n	8007fae <UART_SetConfig+0x1a0e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d015      	beq.n	8007faa <UART_SetConfig+0x1a0a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d00f      	beq.n	8007fa6 <UART_SetConfig+0x1a06>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b0a      	cmp	r3, #10
 8007f8c:	d008      	beq.n	8007fa0 <UART_SetConfig+0x1a00>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	2b0b      	cmp	r3, #11
 8007f94:	d102      	bne.n	8007f9c <UART_SetConfig+0x19fc>
 8007f96:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007f9a:	e017      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007f9c:	4b18      	ldr	r3, [pc, #96]	; (8008000 <UART_SetConfig+0x1a60>)
 8007f9e:	e015      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fa0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007fa4:	e012      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fa6:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <UART_SetConfig+0x1a78>)
 8007fa8:	e010      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007faa:	4b1c      	ldr	r3, [pc, #112]	; (800801c <UART_SetConfig+0x1a7c>)
 8007fac:	e00e      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <UART_SetConfig+0x1a4c>)
 8007fb0:	e00c      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <UART_SetConfig+0x1a80>)
 8007fb4:	e00a      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fb6:	4b1b      	ldr	r3, [pc, #108]	; (8008024 <UART_SetConfig+0x1a84>)
 8007fb8:	e008      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <UART_SetConfig+0x1a54>)
 8007fbc:	e006      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <UART_SetConfig+0x1a88>)
 8007fc0:	e004      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <UART_SetConfig+0x1a58>)
 8007fc4:	e002      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <UART_SetConfig+0x1a5c>)
 8007fc8:	e000      	b.n	8007fcc <UART_SetConfig+0x1a2c>
 8007fca:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <UART_SetConfig+0x1a60>)
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	0852      	lsrs	r2, r2, #1
 8007fd2:	441a      	add	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fe0:	e089      	b.n	80080f6 <UART_SetConfig+0x1b56>
 8007fe2:	bf00      	nop
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	03d09000 	.word	0x03d09000
 8007fec:	0007a120 	.word	0x0007a120
 8007ff0:	07a12000 	.word	0x07a12000
 8007ff4:	000f4240 	.word	0x000f4240
 8007ff8:	001e8480 	.word	0x001e8480
 8007ffc:	003d0900 	.word	0x003d0900
 8008000:	007a1200 	.word	0x007a1200
 8008004:	00a2c2aa 	.word	0x00a2c2aa
 8008008:	00c35000 	.word	0x00c35000
 800800c:	00f42400 	.word	0x00f42400
 8008010:	01458554 	.word	0x01458554
 8008014:	01e84800 	.word	0x01e84800
 8008018:	0001e848 	.word	0x0001e848
 800801c:	0003d090 	.word	0x0003d090
 8008020:	000a2c2a 	.word	0x000a2c2a
 8008024:	000c3500 	.word	0x000c3500
 8008028:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d04f      	beq.n	80080d4 <UART_SetConfig+0x1b34>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b01      	cmp	r3, #1
 800803a:	d048      	beq.n	80080ce <UART_SetConfig+0x1b2e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b02      	cmp	r3, #2
 8008042:	d041      	beq.n	80080c8 <UART_SetConfig+0x1b28>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b03      	cmp	r3, #3
 800804a:	d03a      	beq.n	80080c2 <UART_SetConfig+0x1b22>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b04      	cmp	r3, #4
 8008052:	d033      	beq.n	80080bc <UART_SetConfig+0x1b1c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b05      	cmp	r3, #5
 800805a:	d02c      	beq.n	80080b6 <UART_SetConfig+0x1b16>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b06      	cmp	r3, #6
 8008062:	d025      	beq.n	80080b0 <UART_SetConfig+0x1b10>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2b07      	cmp	r3, #7
 800806a:	d01e      	beq.n	80080aa <UART_SetConfig+0x1b0a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b08      	cmp	r3, #8
 8008072:	d017      	beq.n	80080a4 <UART_SetConfig+0x1b04>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b09      	cmp	r3, #9
 800807a:	d010      	beq.n	800809e <UART_SetConfig+0x1afe>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b0a      	cmp	r3, #10
 8008082:	d009      	beq.n	8008098 <UART_SetConfig+0x1af8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b0b      	cmp	r3, #11
 800808a:	d102      	bne.n	8008092 <UART_SetConfig+0x1af2>
 800808c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008090:	e022      	b.n	80080d8 <UART_SetConfig+0x1b38>
 8008092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008096:	e01f      	b.n	80080d8 <UART_SetConfig+0x1b38>
 8008098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800809c:	e01c      	b.n	80080d8 <UART_SetConfig+0x1b38>
 800809e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a2:	e019      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080a8:	e016      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ae:	e013      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080b0:	f241 5354 	movw	r3, #5460	; 0x1554
 80080b4:	e010      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080b6:	f641 1398 	movw	r3, #6552	; 0x1998
 80080ba:	e00d      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080c0:	e00a      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080c2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80080c6:	e007      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080cc:	e004      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d2:	e001      	b.n	80080d8 <UART_SetConfig+0x1b38>
 80080d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6852      	ldr	r2, [r2, #4]
 80080dc:	0852      	lsrs	r2, r2, #1
 80080de:	441a      	add	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ec:	e003      	b.n	80080f6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80080f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f8:	2b0f      	cmp	r3, #15
 80080fa:	d916      	bls.n	800812a <UART_SetConfig+0x1b8a>
 80080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008102:	d212      	bcs.n	800812a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	b29b      	uxth	r3, r3
 8008108:	f023 030f 	bic.w	r3, r3, #15
 800810c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	b29b      	uxth	r3, r3
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	b29a      	uxth	r2, r3
 800811a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800811c:	4313      	orrs	r3, r2
 800811e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008126:	60da      	str	r2, [r3, #12]
 8008128:	e3a3      	b.n	8008872 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008130:	e39f      	b.n	8008872 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008132:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	f200 8388 	bhi.w	800884c <UART_SetConfig+0x22ac>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <UART_SetConfig+0x1ba4>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008249 	.word	0x08008249
 8008148:	080082ff 	.word	0x080082ff
 800814c:	0800884d 	.word	0x0800884d
 8008150:	0800884d 	.word	0x0800884d
 8008154:	080083b5 	.word	0x080083b5
 8008158:	0800884d 	.word	0x0800884d
 800815c:	0800884d 	.word	0x0800884d
 8008160:	0800884d 	.word	0x0800884d
 8008164:	0800846f 	.word	0x0800846f
 8008168:	0800884d 	.word	0x0800884d
 800816c:	0800884d 	.word	0x0800884d
 8008170:	0800884d 	.word	0x0800884d
 8008174:	0800884d 	.word	0x0800884d
 8008178:	0800884d 	.word	0x0800884d
 800817c:	0800884d 	.word	0x0800884d
 8008180:	0800884d 	.word	0x0800884d
 8008184:	08008529 	.word	0x08008529
 8008188:	0800884d 	.word	0x0800884d
 800818c:	0800884d 	.word	0x0800884d
 8008190:	0800884d 	.word	0x0800884d
 8008194:	0800884d 	.word	0x0800884d
 8008198:	0800884d 	.word	0x0800884d
 800819c:	0800884d 	.word	0x0800884d
 80081a0:	0800884d 	.word	0x0800884d
 80081a4:	0800884d 	.word	0x0800884d
 80081a8:	0800884d 	.word	0x0800884d
 80081ac:	0800884d 	.word	0x0800884d
 80081b0:	0800884d 	.word	0x0800884d
 80081b4:	0800884d 	.word	0x0800884d
 80081b8:	0800884d 	.word	0x0800884d
 80081bc:	0800884d 	.word	0x0800884d
 80081c0:	0800884d 	.word	0x0800884d
 80081c4:	08008699 	.word	0x08008699
 80081c8:	0800884d 	.word	0x0800884d
 80081cc:	0800884d 	.word	0x0800884d
 80081d0:	0800884d 	.word	0x0800884d
 80081d4:	0800884d 	.word	0x0800884d
 80081d8:	0800884d 	.word	0x0800884d
 80081dc:	0800884d 	.word	0x0800884d
 80081e0:	0800884d 	.word	0x0800884d
 80081e4:	0800884d 	.word	0x0800884d
 80081e8:	0800884d 	.word	0x0800884d
 80081ec:	0800884d 	.word	0x0800884d
 80081f0:	0800884d 	.word	0x0800884d
 80081f4:	0800884d 	.word	0x0800884d
 80081f8:	0800884d 	.word	0x0800884d
 80081fc:	0800884d 	.word	0x0800884d
 8008200:	0800884d 	.word	0x0800884d
 8008204:	0800884d 	.word	0x0800884d
 8008208:	0800884d 	.word	0x0800884d
 800820c:	0800884d 	.word	0x0800884d
 8008210:	0800884d 	.word	0x0800884d
 8008214:	0800884d 	.word	0x0800884d
 8008218:	0800884d 	.word	0x0800884d
 800821c:	0800884d 	.word	0x0800884d
 8008220:	0800884d 	.word	0x0800884d
 8008224:	0800884d 	.word	0x0800884d
 8008228:	0800884d 	.word	0x0800884d
 800822c:	0800884d 	.word	0x0800884d
 8008230:	0800884d 	.word	0x0800884d
 8008234:	0800884d 	.word	0x0800884d
 8008238:	0800884d 	.word	0x0800884d
 800823c:	0800884d 	.word	0x0800884d
 8008240:	0800884d 	.word	0x0800884d
 8008244:	0800878d 	.word	0x0800878d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008248:	f7fc fb9a 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 800824c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d044      	beq.n	80082e0 <UART_SetConfig+0x1d40>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b01      	cmp	r3, #1
 800825c:	d03e      	beq.n	80082dc <UART_SetConfig+0x1d3c>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b02      	cmp	r3, #2
 8008264:	d038      	beq.n	80082d8 <UART_SetConfig+0x1d38>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b03      	cmp	r3, #3
 800826c:	d032      	beq.n	80082d4 <UART_SetConfig+0x1d34>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b04      	cmp	r3, #4
 8008274:	d02c      	beq.n	80082d0 <UART_SetConfig+0x1d30>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b05      	cmp	r3, #5
 800827c:	d026      	beq.n	80082cc <UART_SetConfig+0x1d2c>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b06      	cmp	r3, #6
 8008284:	d020      	beq.n	80082c8 <UART_SetConfig+0x1d28>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b07      	cmp	r3, #7
 800828c:	d01a      	beq.n	80082c4 <UART_SetConfig+0x1d24>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b08      	cmp	r3, #8
 8008294:	d014      	beq.n	80082c0 <UART_SetConfig+0x1d20>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b09      	cmp	r3, #9
 800829c:	d00e      	beq.n	80082bc <UART_SetConfig+0x1d1c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b0a      	cmp	r3, #10
 80082a4:	d008      	beq.n	80082b8 <UART_SetConfig+0x1d18>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b0b      	cmp	r3, #11
 80082ac:	d102      	bne.n	80082b4 <UART_SetConfig+0x1d14>
 80082ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082b2:	e016      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e014      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082b8:	2380      	movs	r3, #128	; 0x80
 80082ba:	e012      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	e010      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082c0:	2320      	movs	r3, #32
 80082c2:	e00e      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082c4:	2310      	movs	r3, #16
 80082c6:	e00c      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082c8:	230c      	movs	r3, #12
 80082ca:	e00a      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082cc:	230a      	movs	r3, #10
 80082ce:	e008      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082d0:	2308      	movs	r3, #8
 80082d2:	e006      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082d4:	2306      	movs	r3, #6
 80082d6:	e004      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082d8:	2304      	movs	r3, #4
 80082da:	e002      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082dc:	2302      	movs	r3, #2
 80082de:	e000      	b.n	80082e2 <UART_SetConfig+0x1d42>
 80082e0:	2301      	movs	r3, #1
 80082e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	085b      	lsrs	r3, r3, #1
 80082ee:	441a      	add	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082fc:	e2aa      	b.n	8008854 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082fe:	f7fc fb55 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8008302:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d044      	beq.n	8008396 <UART_SetConfig+0x1df6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b01      	cmp	r3, #1
 8008312:	d03e      	beq.n	8008392 <UART_SetConfig+0x1df2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b02      	cmp	r3, #2
 800831a:	d038      	beq.n	800838e <UART_SetConfig+0x1dee>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b03      	cmp	r3, #3
 8008322:	d032      	beq.n	800838a <UART_SetConfig+0x1dea>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b04      	cmp	r3, #4
 800832a:	d02c      	beq.n	8008386 <UART_SetConfig+0x1de6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b05      	cmp	r3, #5
 8008332:	d026      	beq.n	8008382 <UART_SetConfig+0x1de2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b06      	cmp	r3, #6
 800833a:	d020      	beq.n	800837e <UART_SetConfig+0x1dde>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b07      	cmp	r3, #7
 8008342:	d01a      	beq.n	800837a <UART_SetConfig+0x1dda>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b08      	cmp	r3, #8
 800834a:	d014      	beq.n	8008376 <UART_SetConfig+0x1dd6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b09      	cmp	r3, #9
 8008352:	d00e      	beq.n	8008372 <UART_SetConfig+0x1dd2>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b0a      	cmp	r3, #10
 800835a:	d008      	beq.n	800836e <UART_SetConfig+0x1dce>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b0b      	cmp	r3, #11
 8008362:	d102      	bne.n	800836a <UART_SetConfig+0x1dca>
 8008364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008368:	e016      	b.n	8008398 <UART_SetConfig+0x1df8>
 800836a:	2301      	movs	r3, #1
 800836c:	e014      	b.n	8008398 <UART_SetConfig+0x1df8>
 800836e:	2380      	movs	r3, #128	; 0x80
 8008370:	e012      	b.n	8008398 <UART_SetConfig+0x1df8>
 8008372:	2340      	movs	r3, #64	; 0x40
 8008374:	e010      	b.n	8008398 <UART_SetConfig+0x1df8>
 8008376:	2320      	movs	r3, #32
 8008378:	e00e      	b.n	8008398 <UART_SetConfig+0x1df8>
 800837a:	2310      	movs	r3, #16
 800837c:	e00c      	b.n	8008398 <UART_SetConfig+0x1df8>
 800837e:	230c      	movs	r3, #12
 8008380:	e00a      	b.n	8008398 <UART_SetConfig+0x1df8>
 8008382:	230a      	movs	r3, #10
 8008384:	e008      	b.n	8008398 <UART_SetConfig+0x1df8>
 8008386:	2308      	movs	r3, #8
 8008388:	e006      	b.n	8008398 <UART_SetConfig+0x1df8>
 800838a:	2306      	movs	r3, #6
 800838c:	e004      	b.n	8008398 <UART_SetConfig+0x1df8>
 800838e:	2304      	movs	r3, #4
 8008390:	e002      	b.n	8008398 <UART_SetConfig+0x1df8>
 8008392:	2302      	movs	r3, #2
 8008394:	e000      	b.n	8008398 <UART_SetConfig+0x1df8>
 8008396:	2301      	movs	r3, #1
 8008398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800839a:	fbb2 f2f3 	udiv	r2, r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	085b      	lsrs	r3, r3, #1
 80083a4:	441a      	add	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083b2:	e24f      	b.n	8008854 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b4:	f107 0318 	add.w	r3, r7, #24
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fd fa43 	bl	8005844 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d044      	beq.n	8008452 <UART_SetConfig+0x1eb2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d03e      	beq.n	800844e <UART_SetConfig+0x1eae>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d038      	beq.n	800844a <UART_SetConfig+0x1eaa>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d032      	beq.n	8008446 <UART_SetConfig+0x1ea6>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d02c      	beq.n	8008442 <UART_SetConfig+0x1ea2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	d026      	beq.n	800843e <UART_SetConfig+0x1e9e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d020      	beq.n	800843a <UART_SetConfig+0x1e9a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b07      	cmp	r3, #7
 80083fe:	d01a      	beq.n	8008436 <UART_SetConfig+0x1e96>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b08      	cmp	r3, #8
 8008406:	d014      	beq.n	8008432 <UART_SetConfig+0x1e92>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b09      	cmp	r3, #9
 800840e:	d00e      	beq.n	800842e <UART_SetConfig+0x1e8e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	2b0a      	cmp	r3, #10
 8008416:	d008      	beq.n	800842a <UART_SetConfig+0x1e8a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b0b      	cmp	r3, #11
 800841e:	d102      	bne.n	8008426 <UART_SetConfig+0x1e86>
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008424:	e016      	b.n	8008454 <UART_SetConfig+0x1eb4>
 8008426:	2301      	movs	r3, #1
 8008428:	e014      	b.n	8008454 <UART_SetConfig+0x1eb4>
 800842a:	2380      	movs	r3, #128	; 0x80
 800842c:	e012      	b.n	8008454 <UART_SetConfig+0x1eb4>
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	e010      	b.n	8008454 <UART_SetConfig+0x1eb4>
 8008432:	2320      	movs	r3, #32
 8008434:	e00e      	b.n	8008454 <UART_SetConfig+0x1eb4>
 8008436:	2310      	movs	r3, #16
 8008438:	e00c      	b.n	8008454 <UART_SetConfig+0x1eb4>
 800843a:	230c      	movs	r3, #12
 800843c:	e00a      	b.n	8008454 <UART_SetConfig+0x1eb4>
 800843e:	230a      	movs	r3, #10
 8008440:	e008      	b.n	8008454 <UART_SetConfig+0x1eb4>
 8008442:	2308      	movs	r3, #8
 8008444:	e006      	b.n	8008454 <UART_SetConfig+0x1eb4>
 8008446:	2306      	movs	r3, #6
 8008448:	e004      	b.n	8008454 <UART_SetConfig+0x1eb4>
 800844a:	2304      	movs	r3, #4
 800844c:	e002      	b.n	8008454 <UART_SetConfig+0x1eb4>
 800844e:	2302      	movs	r3, #2
 8008450:	e000      	b.n	8008454 <UART_SetConfig+0x1eb4>
 8008452:	2301      	movs	r3, #1
 8008454:	fbb2 f2f3 	udiv	r2, r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	441a      	add	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	b29b      	uxth	r3, r3
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800846c:	e1f2      	b.n	8008854 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800846e:	f107 030c 	add.w	r3, r7, #12
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd fb32 	bl	8005adc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d044      	beq.n	800850c <UART_SetConfig+0x1f6c>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b01      	cmp	r3, #1
 8008488:	d03e      	beq.n	8008508 <UART_SetConfig+0x1f68>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b02      	cmp	r3, #2
 8008490:	d038      	beq.n	8008504 <UART_SetConfig+0x1f64>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b03      	cmp	r3, #3
 8008498:	d032      	beq.n	8008500 <UART_SetConfig+0x1f60>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d02c      	beq.n	80084fc <UART_SetConfig+0x1f5c>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d026      	beq.n	80084f8 <UART_SetConfig+0x1f58>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b06      	cmp	r3, #6
 80084b0:	d020      	beq.n	80084f4 <UART_SetConfig+0x1f54>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b07      	cmp	r3, #7
 80084b8:	d01a      	beq.n	80084f0 <UART_SetConfig+0x1f50>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d014      	beq.n	80084ec <UART_SetConfig+0x1f4c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d00e      	beq.n	80084e8 <UART_SetConfig+0x1f48>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b0a      	cmp	r3, #10
 80084d0:	d008      	beq.n	80084e4 <UART_SetConfig+0x1f44>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b0b      	cmp	r3, #11
 80084d8:	d102      	bne.n	80084e0 <UART_SetConfig+0x1f40>
 80084da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084de:	e016      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e014      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	e012      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084e8:	2340      	movs	r3, #64	; 0x40
 80084ea:	e010      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084ec:	2320      	movs	r3, #32
 80084ee:	e00e      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084f0:	2310      	movs	r3, #16
 80084f2:	e00c      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084f4:	230c      	movs	r3, #12
 80084f6:	e00a      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084f8:	230a      	movs	r3, #10
 80084fa:	e008      	b.n	800850e <UART_SetConfig+0x1f6e>
 80084fc:	2308      	movs	r3, #8
 80084fe:	e006      	b.n	800850e <UART_SetConfig+0x1f6e>
 8008500:	2306      	movs	r3, #6
 8008502:	e004      	b.n	800850e <UART_SetConfig+0x1f6e>
 8008504:	2304      	movs	r3, #4
 8008506:	e002      	b.n	800850e <UART_SetConfig+0x1f6e>
 8008508:	2302      	movs	r3, #2
 800850a:	e000      	b.n	800850e <UART_SetConfig+0x1f6e>
 800850c:	2301      	movs	r3, #1
 800850e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	441a      	add	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	b29b      	uxth	r3, r3
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008526:	e195      	b.n	8008854 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008528:	4b87      	ldr	r3, [pc, #540]	; (8008748 <UART_SetConfig+0x21a8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d05d      	beq.n	80085f0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008534:	4b84      	ldr	r3, [pc, #528]	; (8008748 <UART_SetConfig+0x21a8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	08db      	lsrs	r3, r3, #3
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	4a83      	ldr	r2, [pc, #524]	; (800874c <UART_SetConfig+0x21ac>)
 8008540:	40da      	lsrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d044      	beq.n	80085d4 <UART_SetConfig+0x2034>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b01      	cmp	r3, #1
 8008550:	d03e      	beq.n	80085d0 <UART_SetConfig+0x2030>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b02      	cmp	r3, #2
 8008558:	d038      	beq.n	80085cc <UART_SetConfig+0x202c>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b03      	cmp	r3, #3
 8008560:	d032      	beq.n	80085c8 <UART_SetConfig+0x2028>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b04      	cmp	r3, #4
 8008568:	d02c      	beq.n	80085c4 <UART_SetConfig+0x2024>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b05      	cmp	r3, #5
 8008570:	d026      	beq.n	80085c0 <UART_SetConfig+0x2020>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b06      	cmp	r3, #6
 8008578:	d020      	beq.n	80085bc <UART_SetConfig+0x201c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b07      	cmp	r3, #7
 8008580:	d01a      	beq.n	80085b8 <UART_SetConfig+0x2018>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b08      	cmp	r3, #8
 8008588:	d014      	beq.n	80085b4 <UART_SetConfig+0x2014>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b09      	cmp	r3, #9
 8008590:	d00e      	beq.n	80085b0 <UART_SetConfig+0x2010>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b0a      	cmp	r3, #10
 8008598:	d008      	beq.n	80085ac <UART_SetConfig+0x200c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b0b      	cmp	r3, #11
 80085a0:	d102      	bne.n	80085a8 <UART_SetConfig+0x2008>
 80085a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085a6:	e016      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e014      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	e012      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	e010      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085b4:	2320      	movs	r3, #32
 80085b6:	e00e      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085b8:	2310      	movs	r3, #16
 80085ba:	e00c      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085bc:	230c      	movs	r3, #12
 80085be:	e00a      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085c0:	230a      	movs	r3, #10
 80085c2:	e008      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085c4:	2308      	movs	r3, #8
 80085c6:	e006      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085c8:	2306      	movs	r3, #6
 80085ca:	e004      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085cc:	2304      	movs	r3, #4
 80085ce:	e002      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e000      	b.n	80085d6 <UART_SetConfig+0x2036>
 80085d4:	2301      	movs	r3, #1
 80085d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	441a      	add	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80085ee:	e131      	b.n	8008854 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d043      	beq.n	8008680 <UART_SetConfig+0x20e0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d03d      	beq.n	800867c <UART_SetConfig+0x20dc>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b02      	cmp	r3, #2
 8008606:	d037      	beq.n	8008678 <UART_SetConfig+0x20d8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b03      	cmp	r3, #3
 800860e:	d031      	beq.n	8008674 <UART_SetConfig+0x20d4>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b04      	cmp	r3, #4
 8008616:	d02b      	beq.n	8008670 <UART_SetConfig+0x20d0>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b05      	cmp	r3, #5
 800861e:	d025      	beq.n	800866c <UART_SetConfig+0x20cc>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	2b06      	cmp	r3, #6
 8008626:	d01f      	beq.n	8008668 <UART_SetConfig+0x20c8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b07      	cmp	r3, #7
 800862e:	d019      	beq.n	8008664 <UART_SetConfig+0x20c4>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b08      	cmp	r3, #8
 8008636:	d013      	beq.n	8008660 <UART_SetConfig+0x20c0>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b09      	cmp	r3, #9
 800863e:	d00d      	beq.n	800865c <UART_SetConfig+0x20bc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b0a      	cmp	r3, #10
 8008646:	d007      	beq.n	8008658 <UART_SetConfig+0x20b8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b0b      	cmp	r3, #11
 800864e:	d101      	bne.n	8008654 <UART_SetConfig+0x20b4>
 8008650:	4b3f      	ldr	r3, [pc, #252]	; (8008750 <UART_SetConfig+0x21b0>)
 8008652:	e016      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008654:	4b3d      	ldr	r3, [pc, #244]	; (800874c <UART_SetConfig+0x21ac>)
 8008656:	e014      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <UART_SetConfig+0x21b4>)
 800865a:	e012      	b.n	8008682 <UART_SetConfig+0x20e2>
 800865c:	4b3e      	ldr	r3, [pc, #248]	; (8008758 <UART_SetConfig+0x21b8>)
 800865e:	e010      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008660:	4b3e      	ldr	r3, [pc, #248]	; (800875c <UART_SetConfig+0x21bc>)
 8008662:	e00e      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008664:	4b3e      	ldr	r3, [pc, #248]	; (8008760 <UART_SetConfig+0x21c0>)
 8008666:	e00c      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008668:	4b3e      	ldr	r3, [pc, #248]	; (8008764 <UART_SetConfig+0x21c4>)
 800866a:	e00a      	b.n	8008682 <UART_SetConfig+0x20e2>
 800866c:	4b3e      	ldr	r3, [pc, #248]	; (8008768 <UART_SetConfig+0x21c8>)
 800866e:	e008      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008670:	4b3e      	ldr	r3, [pc, #248]	; (800876c <UART_SetConfig+0x21cc>)
 8008672:	e006      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008674:	4b3e      	ldr	r3, [pc, #248]	; (8008770 <UART_SetConfig+0x21d0>)
 8008676:	e004      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008678:	4b3e      	ldr	r3, [pc, #248]	; (8008774 <UART_SetConfig+0x21d4>)
 800867a:	e002      	b.n	8008682 <UART_SetConfig+0x20e2>
 800867c:	4b3e      	ldr	r3, [pc, #248]	; (8008778 <UART_SetConfig+0x21d8>)
 800867e:	e000      	b.n	8008682 <UART_SetConfig+0x20e2>
 8008680:	4b32      	ldr	r3, [pc, #200]	; (800874c <UART_SetConfig+0x21ac>)
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6852      	ldr	r2, [r2, #4]
 8008686:	0852      	lsrs	r2, r2, #1
 8008688:	441a      	add	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008692:	b29b      	uxth	r3, r3
 8008694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008696:	e0dd      	b.n	8008854 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	d046      	beq.n	800872e <UART_SetConfig+0x218e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d040      	beq.n	800872a <UART_SetConfig+0x218a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d03a      	beq.n	8008726 <UART_SetConfig+0x2186>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d034      	beq.n	8008722 <UART_SetConfig+0x2182>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d02e      	beq.n	800871e <UART_SetConfig+0x217e>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b05      	cmp	r3, #5
 80086c6:	d028      	beq.n	800871a <UART_SetConfig+0x217a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b06      	cmp	r3, #6
 80086ce:	d022      	beq.n	8008716 <UART_SetConfig+0x2176>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b07      	cmp	r3, #7
 80086d6:	d01c      	beq.n	8008712 <UART_SetConfig+0x2172>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d016      	beq.n	800870e <UART_SetConfig+0x216e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d00f      	beq.n	8008708 <UART_SetConfig+0x2168>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b0a      	cmp	r3, #10
 80086ee:	d008      	beq.n	8008702 <UART_SetConfig+0x2162>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b0b      	cmp	r3, #11
 80086f6:	d102      	bne.n	80086fe <UART_SetConfig+0x215e>
 80086f8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80086fc:	e018      	b.n	8008730 <UART_SetConfig+0x2190>
 80086fe:	4b18      	ldr	r3, [pc, #96]	; (8008760 <UART_SetConfig+0x21c0>)
 8008700:	e016      	b.n	8008730 <UART_SetConfig+0x2190>
 8008702:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008706:	e013      	b.n	8008730 <UART_SetConfig+0x2190>
 8008708:	f24f 4324 	movw	r3, #62500	; 0xf424
 800870c:	e010      	b.n	8008730 <UART_SetConfig+0x2190>
 800870e:	4b1b      	ldr	r3, [pc, #108]	; (800877c <UART_SetConfig+0x21dc>)
 8008710:	e00e      	b.n	8008730 <UART_SetConfig+0x2190>
 8008712:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <UART_SetConfig+0x21b0>)
 8008714:	e00c      	b.n	8008730 <UART_SetConfig+0x2190>
 8008716:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <UART_SetConfig+0x21e0>)
 8008718:	e00a      	b.n	8008730 <UART_SetConfig+0x2190>
 800871a:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <UART_SetConfig+0x21e4>)
 800871c:	e008      	b.n	8008730 <UART_SetConfig+0x2190>
 800871e:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <UART_SetConfig+0x21b4>)
 8008720:	e006      	b.n	8008730 <UART_SetConfig+0x2190>
 8008722:	4b19      	ldr	r3, [pc, #100]	; (8008788 <UART_SetConfig+0x21e8>)
 8008724:	e004      	b.n	8008730 <UART_SetConfig+0x2190>
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <UART_SetConfig+0x21b8>)
 8008728:	e002      	b.n	8008730 <UART_SetConfig+0x2190>
 800872a:	4b0c      	ldr	r3, [pc, #48]	; (800875c <UART_SetConfig+0x21bc>)
 800872c:	e000      	b.n	8008730 <UART_SetConfig+0x2190>
 800872e:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <UART_SetConfig+0x21c0>)
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6852      	ldr	r2, [r2, #4]
 8008734:	0852      	lsrs	r2, r2, #1
 8008736:	441a      	add	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008740:	b29b      	uxth	r3, r3
 8008742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008744:	e086      	b.n	8008854 <UART_SetConfig+0x22b4>
 8008746:	bf00      	nop
 8008748:	58024400 	.word	0x58024400
 800874c:	03d09000 	.word	0x03d09000
 8008750:	0003d090 	.word	0x0003d090
 8008754:	0007a120 	.word	0x0007a120
 8008758:	000f4240 	.word	0x000f4240
 800875c:	001e8480 	.word	0x001e8480
 8008760:	003d0900 	.word	0x003d0900
 8008764:	00516155 	.word	0x00516155
 8008768:	0061a800 	.word	0x0061a800
 800876c:	007a1200 	.word	0x007a1200
 8008770:	00a2c2aa 	.word	0x00a2c2aa
 8008774:	00f42400 	.word	0x00f42400
 8008778:	01e84800 	.word	0x01e84800
 800877c:	0001e848 	.word	0x0001e848
 8008780:	00051615 	.word	0x00051615
 8008784:	00061a80 	.word	0x00061a80
 8008788:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d04e      	beq.n	8008832 <UART_SetConfig+0x2292>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b01      	cmp	r3, #1
 800879a:	d047      	beq.n	800882c <UART_SetConfig+0x228c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d040      	beq.n	8008826 <UART_SetConfig+0x2286>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d039      	beq.n	8008820 <UART_SetConfig+0x2280>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d032      	beq.n	800881a <UART_SetConfig+0x227a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b05      	cmp	r3, #5
 80087ba:	d02b      	beq.n	8008814 <UART_SetConfig+0x2274>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2b06      	cmp	r3, #6
 80087c2:	d024      	beq.n	800880e <UART_SetConfig+0x226e>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b07      	cmp	r3, #7
 80087ca:	d01d      	beq.n	8008808 <UART_SetConfig+0x2268>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d016      	beq.n	8008802 <UART_SetConfig+0x2262>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d00f      	beq.n	80087fc <UART_SetConfig+0x225c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b0a      	cmp	r3, #10
 80087e2:	d008      	beq.n	80087f6 <UART_SetConfig+0x2256>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b0b      	cmp	r3, #11
 80087ea:	d101      	bne.n	80087f0 <UART_SetConfig+0x2250>
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	e022      	b.n	8008836 <UART_SetConfig+0x2296>
 80087f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f4:	e01f      	b.n	8008836 <UART_SetConfig+0x2296>
 80087f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087fa:	e01c      	b.n	8008836 <UART_SetConfig+0x2296>
 80087fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008800:	e019      	b.n	8008836 <UART_SetConfig+0x2296>
 8008802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008806:	e016      	b.n	8008836 <UART_SetConfig+0x2296>
 8008808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800880c:	e013      	b.n	8008836 <UART_SetConfig+0x2296>
 800880e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008812:	e010      	b.n	8008836 <UART_SetConfig+0x2296>
 8008814:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008818:	e00d      	b.n	8008836 <UART_SetConfig+0x2296>
 800881a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800881e:	e00a      	b.n	8008836 <UART_SetConfig+0x2296>
 8008820:	f241 5355 	movw	r3, #5461	; 0x1555
 8008824:	e007      	b.n	8008836 <UART_SetConfig+0x2296>
 8008826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800882a:	e004      	b.n	8008836 <UART_SetConfig+0x2296>
 800882c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008830:	e001      	b.n	8008836 <UART_SetConfig+0x2296>
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6852      	ldr	r2, [r2, #4]
 800883a:	0852      	lsrs	r2, r2, #1
 800883c:	441a      	add	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	fbb2 f3f3 	udiv	r3, r2, r3
 8008846:	b29b      	uxth	r3, r3
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800884a:	e003      	b.n	8008854 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	2b0f      	cmp	r3, #15
 8008858:	d908      	bls.n	800886c <UART_SetConfig+0x22cc>
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008860:	d204      	bcs.n	800886c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e002      	b.n	8008872 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800888e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008892:	4618      	mov	r0, r3
 8008894:	3740      	adds	r7, #64	; 0x40
 8008896:	46bd      	mov	sp, r7
 8008898:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800889c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	f003 0308 	and.w	r3, r3, #8
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01a      	beq.n	80089b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899a:	d10a      	bne.n	80089b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	605a      	str	r2, [r3, #4]
  }
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80089f0:	f7f8 fe4e 	bl	8001690 <HAL_GetTick>
 80089f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10e      	bne.n	8008a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f82c 	bl	8008a70 <UART_WaitOnFlagUntilTimeout>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e022      	b.n	8008a68 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d10e      	bne.n	8008a4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f816 	bl	8008a70 <UART_WaitOnFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e00c      	b.n	8008a68 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a80:	e062      	b.n	8008b48 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d05e      	beq.n	8008b48 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8a:	f7f8 fe01 	bl	8001690 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d302      	bcc.n	8008aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11d      	bne.n	8008adc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008aae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e045      	b.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0304 	and.w	r3, r3, #4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d02e      	beq.n	8008b48 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af8:	d126      	bne.n	8008b48 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b02:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e00f      	b.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69da      	ldr	r2, [r3, #28]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4013      	ands	r3, r2
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d08d      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d101      	bne.n	8008b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b82:	2302      	movs	r3, #2
 8008b84:	e027      	b.n	8008bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2224      	movs	r2, #36	; 0x24
 8008b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e02d      	b.n	8008c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2224      	movs	r2, #36	; 0x24
 8008c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f850 	bl	8008cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d101      	bne.n	8008c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c72:	2302      	movs	r3, #2
 8008c74:	e02d      	b.n	8008cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2224      	movs	r2, #36	; 0x24
 8008c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0201 	bic.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f812 	bl	8008cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b089      	sub	sp, #36	; 0x24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008ce4:	4a2f      	ldr	r2, [pc, #188]	; (8008da4 <UARTEx_SetNbDataToProcess+0xc8>)
 8008ce6:	f107 0314 	add.w	r3, r7, #20
 8008cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008cf2:	4a2d      	ldr	r2, [pc, #180]	; (8008da8 <UARTEx_SetNbDataToProcess+0xcc>)
 8008cf4:	f107 030c 	add.w	r3, r7, #12
 8008cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cfc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d108      	bne.n	8008d1a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d18:	e03d      	b.n	8008d96 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d1e:	2308      	movs	r3, #8
 8008d20:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	0e5b      	lsrs	r3, r3, #25
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	0f5b      	lsrs	r3, r3, #29
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 0307 	and.w	r3, r3, #7
 8008d40:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d42:	7fbb      	ldrb	r3, [r7, #30]
 8008d44:	7f3a      	ldrb	r2, [r7, #28]
 8008d46:	f107 0120 	add.w	r1, r7, #32
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
 8008d54:	7f3a      	ldrb	r2, [r7, #28]
 8008d56:	f107 0120 	add.w	r1, r7, #32
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d6c:	7ffb      	ldrb	r3, [r7, #31]
 8008d6e:	7f7a      	ldrb	r2, [r7, #29]
 8008d70:	f107 0120 	add.w	r1, r7, #32
 8008d74:	440a      	add	r2, r1
 8008d76:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d7a:	fb02 f303 	mul.w	r3, r2, r3
 8008d7e:	7f7a      	ldrb	r2, [r7, #29]
 8008d80:	f107 0120 	add.w	r1, r7, #32
 8008d84:	440a      	add	r2, r1
 8008d86:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d96:	bf00      	nop
 8008d98:	3724      	adds	r7, #36	; 0x24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	08019bd4 	.word	0x08019bd4
 8008da8:	08019bdc 	.word	0x08019bdc

08008dac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dac:	b084      	sub	sp, #16
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	f107 001c 	add.w	r0, r7, #28
 8008dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d120      	bne.n	8008e06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <USB_CoreInit+0xc0>)
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d105      	bne.n	8008dfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa4c 	bl	8009298 <USB_CoreReset>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]
 8008e04:	e01a      	b.n	8008e3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa40 	bl	8009298 <USB_CoreReset>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e2e:	e005      	b.n	8008e3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10b      	bne.n	8008e5a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f043 0206 	orr.w	r2, r3, #6
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f043 0220 	orr.w	r2, r3, #32
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e66:	b004      	add	sp, #16
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	ffbdffbf 	.word	0xffbdffbf

08008e70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f023 0201 	bic.w	r2, r3, #1
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d106      	bne.n	8008ebe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	60da      	str	r2, [r3, #12]
 8008ebc:	e00b      	b.n	8008ed6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
 8008ed0:	e001      	b.n	8008ed6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e003      	b.n	8008ede <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008ed6:	2032      	movs	r0, #50	; 0x32
 8008ed8:	f7f8 fbe6 	bl	80016a8 <HAL_Delay>

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ee8:	b084      	sub	sp, #16
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	613b      	str	r3, [r7, #16]
 8008f06:	e009      	b.n	8008f1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	3340      	adds	r3, #64	; 0x40
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	2200      	movs	r2, #0
 8008f14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b0e      	cmp	r3, #14
 8008f20:	d9f2      	bls.n	8008f08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d11c      	bne.n	8008f62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f36:	f043 0302 	orr.w	r3, r3, #2
 8008f3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e005      	b.n	8008f6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f74:	461a      	mov	r2, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f80:	4619      	mov	r1, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f88:	461a      	mov	r2, r3
 8008f8a:	680b      	ldr	r3, [r1, #0]
 8008f8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d10c      	bne.n	8008fae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f949 	bl	8009234 <USB_SetDevSpeed>
 8008fa2:	e008      	b.n	8008fb6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f944 	bl	8009234 <USB_SetDevSpeed>
 8008fac:	e003      	b.n	8008fb6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008fae:	2103      	movs	r1, #3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f93f 	bl	8009234 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fb6:	2110      	movs	r1, #16
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f8f3 	bl	80091a4 <USB_FlushTxFifo>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f911 	bl	80091f0 <USB_FlushRxFifo>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fde:	461a      	mov	r2, r3
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fea:	461a      	mov	r2, r3
 8008fec:	2300      	movs	r3, #0
 8008fee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	e043      	b.n	800908a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009018:	d118      	bne.n	800904c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902c:	461a      	mov	r2, r3
 800902e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	e013      	b.n	800905e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009042:	461a      	mov	r2, r3
 8009044:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009048:	6013      	str	r3, [r2, #0]
 800904a:	e008      	b.n	800905e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009058:	461a      	mov	r2, r3
 800905a:	2300      	movs	r3, #0
 800905c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906a:	461a      	mov	r2, r3
 800906c:	2300      	movs	r3, #0
 800906e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907c:	461a      	mov	r2, r3
 800907e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009082:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3301      	adds	r3, #1
 8009088:	613b      	str	r3, [r7, #16]
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	429a      	cmp	r2, r3
 8009090:	d3b7      	bcc.n	8009002 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009092:	2300      	movs	r3, #0
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	e043      	b.n	8009120 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ae:	d118      	bne.n	80090e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10a      	bne.n	80090cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c2:	461a      	mov	r2, r3
 80090c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	e013      	b.n	80090f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d8:	461a      	mov	r2, r3
 80090da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	e008      	b.n	80090f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	461a      	mov	r2, r3
 80090f0:	2300      	movs	r3, #0
 80090f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009100:	461a      	mov	r2, r3
 8009102:	2300      	movs	r3, #0
 8009104:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009112:	461a      	mov	r2, r3
 8009114:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009118:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	3301      	adds	r3, #1
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	429a      	cmp	r2, r3
 8009126:	d3b7      	bcc.n	8009098 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800913a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009148:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f043 0210 	orr.w	r2, r3, #16
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699a      	ldr	r2, [r3, #24]
 8009160:	4b0e      	ldr	r3, [pc, #56]	; (800919c <USB_DevInit+0x2b4>)
 8009162:	4313      	orrs	r3, r2
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f043 0208 	orr.w	r2, r3, #8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800917a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d105      	bne.n	800918c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699a      	ldr	r2, [r3, #24]
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <USB_DevInit+0x2b8>)
 8009186:	4313      	orrs	r3, r2
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009198:	b004      	add	sp, #16
 800919a:	4770      	bx	lr
 800919c:	803c3800 	.word	0x803c3800
 80091a0:	40000004 	.word	0x40000004

080091a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	019b      	lsls	r3, r3, #6
 80091b6:	f043 0220 	orr.w	r2, r3, #32
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4a09      	ldr	r2, [pc, #36]	; (80091ec <USB_FlushTxFifo+0x48>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d901      	bls.n	80091d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e006      	b.n	80091de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d0f0      	beq.n	80091be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	00030d40 	.word	0x00030d40

080091f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2210      	movs	r2, #16
 8009200:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a09      	ldr	r2, [pc, #36]	; (8009230 <USB_FlushRxFifo+0x40>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d901      	bls.n	8009214 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e006      	b.n	8009222 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b10      	cmp	r3, #16
 800921e:	d0f0      	beq.n	8009202 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	00030d40 	.word	0x00030d40

08009234 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	68f9      	ldr	r1, [r7, #12]
 8009250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009254:	4313      	orrs	r3, r2
 8009256:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009280:	f043 0302 	orr.w	r3, r3, #2
 8009284:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009286:	2003      	movs	r0, #3
 8009288:	f7f8 fa0e 	bl	80016a8 <HAL_Delay>

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4a13      	ldr	r2, [pc, #76]	; (80092fc <USB_CoreReset+0x64>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e01b      	b.n	80092ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	daf2      	bge.n	80092a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f043 0201 	orr.w	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3301      	adds	r3, #1
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4a09      	ldr	r2, [pc, #36]	; (80092fc <USB_CoreReset+0x64>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d901      	bls.n	80092e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e006      	b.n	80092ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d0f0      	beq.n	80092ce <USB_CoreReset+0x36>

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	00030d40 	.word	0x00030d40

08009300 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8009306:	4b8c      	ldr	r3, [pc, #560]	; (8009538 <MX_LWIP_Init+0x238>)
 8009308:	22a9      	movs	r2, #169	; 0xa9
 800930a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800930c:	4b8a      	ldr	r3, [pc, #552]	; (8009538 <MX_LWIP_Init+0x238>)
 800930e:	22fe      	movs	r2, #254	; 0xfe
 8009310:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8009312:	4b89      	ldr	r3, [pc, #548]	; (8009538 <MX_LWIP_Init+0x238>)
 8009314:	2202      	movs	r2, #2
 8009316:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8009318:	4b87      	ldr	r3, [pc, #540]	; (8009538 <MX_LWIP_Init+0x238>)
 800931a:	2214      	movs	r2, #20
 800931c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800931e:	4b87      	ldr	r3, [pc, #540]	; (800953c <MX_LWIP_Init+0x23c>)
 8009320:	22ff      	movs	r2, #255	; 0xff
 8009322:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009324:	4b85      	ldr	r3, [pc, #532]	; (800953c <MX_LWIP_Init+0x23c>)
 8009326:	22ff      	movs	r2, #255	; 0xff
 8009328:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800932a:	4b84      	ldr	r3, [pc, #528]	; (800953c <MX_LWIP_Init+0x23c>)
 800932c:	2200      	movs	r2, #0
 800932e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009330:	4b82      	ldr	r3, [pc, #520]	; (800953c <MX_LWIP_Init+0x23c>)
 8009332:	2200      	movs	r2, #0
 8009334:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009336:	4b82      	ldr	r3, [pc, #520]	; (8009540 <MX_LWIP_Init+0x240>)
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800933c:	4b80      	ldr	r3, [pc, #512]	; (8009540 <MX_LWIP_Init+0x240>)
 800933e:	2200      	movs	r2, #0
 8009340:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009342:	4b7f      	ldr	r3, [pc, #508]	; (8009540 <MX_LWIP_Init+0x240>)
 8009344:	2200      	movs	r2, #0
 8009346:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009348:	4b7d      	ldr	r3, [pc, #500]	; (8009540 <MX_LWIP_Init+0x240>)
 800934a:	2200      	movs	r2, #0
 800934c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800934e:	2100      	movs	r1, #0
 8009350:	2000      	movs	r0, #0
 8009352:	f005 fded 	bl	800ef30 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009356:	4b78      	ldr	r3, [pc, #480]	; (8009538 <MX_LWIP_Init+0x238>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	061a      	lsls	r2, r3, #24
 800935c:	4b76      	ldr	r3, [pc, #472]	; (8009538 <MX_LWIP_Init+0x238>)
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	041b      	lsls	r3, r3, #16
 8009362:	431a      	orrs	r2, r3
 8009364:	4b74      	ldr	r3, [pc, #464]	; (8009538 <MX_LWIP_Init+0x238>)
 8009366:	789b      	ldrb	r3, [r3, #2]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	4313      	orrs	r3, r2
 800936c:	4a72      	ldr	r2, [pc, #456]	; (8009538 <MX_LWIP_Init+0x238>)
 800936e:	78d2      	ldrb	r2, [r2, #3]
 8009370:	4313      	orrs	r3, r2
 8009372:	061a      	lsls	r2, r3, #24
 8009374:	4b70      	ldr	r3, [pc, #448]	; (8009538 <MX_LWIP_Init+0x238>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	0619      	lsls	r1, r3, #24
 800937a:	4b6f      	ldr	r3, [pc, #444]	; (8009538 <MX_LWIP_Init+0x238>)
 800937c:	785b      	ldrb	r3, [r3, #1]
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	4319      	orrs	r1, r3
 8009382:	4b6d      	ldr	r3, [pc, #436]	; (8009538 <MX_LWIP_Init+0x238>)
 8009384:	789b      	ldrb	r3, [r3, #2]
 8009386:	021b      	lsls	r3, r3, #8
 8009388:	430b      	orrs	r3, r1
 800938a:	496b      	ldr	r1, [pc, #428]	; (8009538 <MX_LWIP_Init+0x238>)
 800938c:	78c9      	ldrb	r1, [r1, #3]
 800938e:	430b      	orrs	r3, r1
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009396:	431a      	orrs	r2, r3
 8009398:	4b67      	ldr	r3, [pc, #412]	; (8009538 <MX_LWIP_Init+0x238>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	0619      	lsls	r1, r3, #24
 800939e:	4b66      	ldr	r3, [pc, #408]	; (8009538 <MX_LWIP_Init+0x238>)
 80093a0:	785b      	ldrb	r3, [r3, #1]
 80093a2:	041b      	lsls	r3, r3, #16
 80093a4:	4319      	orrs	r1, r3
 80093a6:	4b64      	ldr	r3, [pc, #400]	; (8009538 <MX_LWIP_Init+0x238>)
 80093a8:	789b      	ldrb	r3, [r3, #2]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	430b      	orrs	r3, r1
 80093ae:	4962      	ldr	r1, [pc, #392]	; (8009538 <MX_LWIP_Init+0x238>)
 80093b0:	78c9      	ldrb	r1, [r1, #3]
 80093b2:	430b      	orrs	r3, r1
 80093b4:	0a1b      	lsrs	r3, r3, #8
 80093b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80093ba:	431a      	orrs	r2, r3
 80093bc:	4b5e      	ldr	r3, [pc, #376]	; (8009538 <MX_LWIP_Init+0x238>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	0619      	lsls	r1, r3, #24
 80093c2:	4b5d      	ldr	r3, [pc, #372]	; (8009538 <MX_LWIP_Init+0x238>)
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	4319      	orrs	r1, r3
 80093ca:	4b5b      	ldr	r3, [pc, #364]	; (8009538 <MX_LWIP_Init+0x238>)
 80093cc:	789b      	ldrb	r3, [r3, #2]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	430b      	orrs	r3, r1
 80093d2:	4959      	ldr	r1, [pc, #356]	; (8009538 <MX_LWIP_Init+0x238>)
 80093d4:	78c9      	ldrb	r1, [r1, #3]
 80093d6:	430b      	orrs	r3, r1
 80093d8:	0e1b      	lsrs	r3, r3, #24
 80093da:	4313      	orrs	r3, r2
 80093dc:	4a59      	ldr	r2, [pc, #356]	; (8009544 <MX_LWIP_Init+0x244>)
 80093de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80093e0:	4b56      	ldr	r3, [pc, #344]	; (800953c <MX_LWIP_Init+0x23c>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	061a      	lsls	r2, r3, #24
 80093e6:	4b55      	ldr	r3, [pc, #340]	; (800953c <MX_LWIP_Init+0x23c>)
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	431a      	orrs	r2, r3
 80093ee:	4b53      	ldr	r3, [pc, #332]	; (800953c <MX_LWIP_Init+0x23c>)
 80093f0:	789b      	ldrb	r3, [r3, #2]
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	4313      	orrs	r3, r2
 80093f6:	4a51      	ldr	r2, [pc, #324]	; (800953c <MX_LWIP_Init+0x23c>)
 80093f8:	78d2      	ldrb	r2, [r2, #3]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	061a      	lsls	r2, r3, #24
 80093fe:	4b4f      	ldr	r3, [pc, #316]	; (800953c <MX_LWIP_Init+0x23c>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	0619      	lsls	r1, r3, #24
 8009404:	4b4d      	ldr	r3, [pc, #308]	; (800953c <MX_LWIP_Init+0x23c>)
 8009406:	785b      	ldrb	r3, [r3, #1]
 8009408:	041b      	lsls	r3, r3, #16
 800940a:	4319      	orrs	r1, r3
 800940c:	4b4b      	ldr	r3, [pc, #300]	; (800953c <MX_LWIP_Init+0x23c>)
 800940e:	789b      	ldrb	r3, [r3, #2]
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	430b      	orrs	r3, r1
 8009414:	4949      	ldr	r1, [pc, #292]	; (800953c <MX_LWIP_Init+0x23c>)
 8009416:	78c9      	ldrb	r1, [r1, #3]
 8009418:	430b      	orrs	r3, r1
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009420:	431a      	orrs	r2, r3
 8009422:	4b46      	ldr	r3, [pc, #280]	; (800953c <MX_LWIP_Init+0x23c>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	0619      	lsls	r1, r3, #24
 8009428:	4b44      	ldr	r3, [pc, #272]	; (800953c <MX_LWIP_Init+0x23c>)
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	041b      	lsls	r3, r3, #16
 800942e:	4319      	orrs	r1, r3
 8009430:	4b42      	ldr	r3, [pc, #264]	; (800953c <MX_LWIP_Init+0x23c>)
 8009432:	789b      	ldrb	r3, [r3, #2]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	430b      	orrs	r3, r1
 8009438:	4940      	ldr	r1, [pc, #256]	; (800953c <MX_LWIP_Init+0x23c>)
 800943a:	78c9      	ldrb	r1, [r1, #3]
 800943c:	430b      	orrs	r3, r1
 800943e:	0a1b      	lsrs	r3, r3, #8
 8009440:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009444:	431a      	orrs	r2, r3
 8009446:	4b3d      	ldr	r3, [pc, #244]	; (800953c <MX_LWIP_Init+0x23c>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	0619      	lsls	r1, r3, #24
 800944c:	4b3b      	ldr	r3, [pc, #236]	; (800953c <MX_LWIP_Init+0x23c>)
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	4319      	orrs	r1, r3
 8009454:	4b39      	ldr	r3, [pc, #228]	; (800953c <MX_LWIP_Init+0x23c>)
 8009456:	789b      	ldrb	r3, [r3, #2]
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	430b      	orrs	r3, r1
 800945c:	4937      	ldr	r1, [pc, #220]	; (800953c <MX_LWIP_Init+0x23c>)
 800945e:	78c9      	ldrb	r1, [r1, #3]
 8009460:	430b      	orrs	r3, r1
 8009462:	0e1b      	lsrs	r3, r3, #24
 8009464:	4313      	orrs	r3, r2
 8009466:	4a38      	ldr	r2, [pc, #224]	; (8009548 <MX_LWIP_Init+0x248>)
 8009468:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800946a:	4b35      	ldr	r3, [pc, #212]	; (8009540 <MX_LWIP_Init+0x240>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	061a      	lsls	r2, r3, #24
 8009470:	4b33      	ldr	r3, [pc, #204]	; (8009540 <MX_LWIP_Init+0x240>)
 8009472:	785b      	ldrb	r3, [r3, #1]
 8009474:	041b      	lsls	r3, r3, #16
 8009476:	431a      	orrs	r2, r3
 8009478:	4b31      	ldr	r3, [pc, #196]	; (8009540 <MX_LWIP_Init+0x240>)
 800947a:	789b      	ldrb	r3, [r3, #2]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	4313      	orrs	r3, r2
 8009480:	4a2f      	ldr	r2, [pc, #188]	; (8009540 <MX_LWIP_Init+0x240>)
 8009482:	78d2      	ldrb	r2, [r2, #3]
 8009484:	4313      	orrs	r3, r2
 8009486:	061a      	lsls	r2, r3, #24
 8009488:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <MX_LWIP_Init+0x240>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	0619      	lsls	r1, r3, #24
 800948e:	4b2c      	ldr	r3, [pc, #176]	; (8009540 <MX_LWIP_Init+0x240>)
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	041b      	lsls	r3, r3, #16
 8009494:	4319      	orrs	r1, r3
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <MX_LWIP_Init+0x240>)
 8009498:	789b      	ldrb	r3, [r3, #2]
 800949a:	021b      	lsls	r3, r3, #8
 800949c:	430b      	orrs	r3, r1
 800949e:	4928      	ldr	r1, [pc, #160]	; (8009540 <MX_LWIP_Init+0x240>)
 80094a0:	78c9      	ldrb	r1, [r1, #3]
 80094a2:	430b      	orrs	r3, r1
 80094a4:	021b      	lsls	r3, r3, #8
 80094a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094aa:	431a      	orrs	r2, r3
 80094ac:	4b24      	ldr	r3, [pc, #144]	; (8009540 <MX_LWIP_Init+0x240>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	0619      	lsls	r1, r3, #24
 80094b2:	4b23      	ldr	r3, [pc, #140]	; (8009540 <MX_LWIP_Init+0x240>)
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	4319      	orrs	r1, r3
 80094ba:	4b21      	ldr	r3, [pc, #132]	; (8009540 <MX_LWIP_Init+0x240>)
 80094bc:	789b      	ldrb	r3, [r3, #2]
 80094be:	021b      	lsls	r3, r3, #8
 80094c0:	430b      	orrs	r3, r1
 80094c2:	491f      	ldr	r1, [pc, #124]	; (8009540 <MX_LWIP_Init+0x240>)
 80094c4:	78c9      	ldrb	r1, [r1, #3]
 80094c6:	430b      	orrs	r3, r1
 80094c8:	0a1b      	lsrs	r3, r3, #8
 80094ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094ce:	431a      	orrs	r2, r3
 80094d0:	4b1b      	ldr	r3, [pc, #108]	; (8009540 <MX_LWIP_Init+0x240>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	0619      	lsls	r1, r3, #24
 80094d6:	4b1a      	ldr	r3, [pc, #104]	; (8009540 <MX_LWIP_Init+0x240>)
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	4319      	orrs	r1, r3
 80094de:	4b18      	ldr	r3, [pc, #96]	; (8009540 <MX_LWIP_Init+0x240>)
 80094e0:	789b      	ldrb	r3, [r3, #2]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	430b      	orrs	r3, r1
 80094e6:	4916      	ldr	r1, [pc, #88]	; (8009540 <MX_LWIP_Init+0x240>)
 80094e8:	78c9      	ldrb	r1, [r1, #3]
 80094ea:	430b      	orrs	r3, r1
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	4313      	orrs	r3, r2
 80094f0:	4a16      	ldr	r2, [pc, #88]	; (800954c <MX_LWIP_Init+0x24c>)
 80094f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80094f4:	4b16      	ldr	r3, [pc, #88]	; (8009550 <MX_LWIP_Init+0x250>)
 80094f6:	9302      	str	r3, [sp, #8]
 80094f8:	4b16      	ldr	r3, [pc, #88]	; (8009554 <MX_LWIP_Init+0x254>)
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4b12      	ldr	r3, [pc, #72]	; (800954c <MX_LWIP_Init+0x24c>)
 8009502:	4a11      	ldr	r2, [pc, #68]	; (8009548 <MX_LWIP_Init+0x248>)
 8009504:	490f      	ldr	r1, [pc, #60]	; (8009544 <MX_LWIP_Init+0x244>)
 8009506:	4814      	ldr	r0, [pc, #80]	; (8009558 <MX_LWIP_Init+0x258>)
 8009508:	f006 fa10 	bl	800f92c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800950c:	4812      	ldr	r0, [pc, #72]	; (8009558 <MX_LWIP_Init+0x258>)
 800950e:	f006 faed 	bl	800faec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009512:	4b11      	ldr	r3, [pc, #68]	; (8009558 <MX_LWIP_Init+0x258>)
 8009514:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009518:	089b      	lsrs	r3, r3, #2
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009524:	480c      	ldr	r0, [pc, #48]	; (8009558 <MX_LWIP_Init+0x258>)
 8009526:	f006 faf1 	bl	800fb0c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800952a:	e002      	b.n	8009532 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800952c:	480a      	ldr	r0, [pc, #40]	; (8009558 <MX_LWIP_Init+0x258>)
 800952e:	f006 fb31 	bl	800fb94 <netif_set_down>
}
 8009532:	bf00      	nop
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20004710 	.word	0x20004710
 800953c:	2000470c 	.word	0x2000470c
 8009540:	200046d4 	.word	0x200046d4
 8009544:	20004708 	.word	0x20004708
 8009548:	20004714 	.word	0x20004714
 800954c:	20004718 	.word	0x20004718
 8009550:	0800ee2d 	.word	0x0800ee2d
 8009554:	08009bb1 	.word	0x08009bb1
 8009558:	200046d8 	.word	0x200046d8

0800955c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800956e:	2320      	movs	r3, #32
 8009570:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009572:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8009576:	e00b      	b.n	8009590 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009578:	4a0c      	ldr	r2, [pc, #48]	; (80095ac <SCB_InvalidateDCache_by_Addr+0x50>)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4413      	add	r3, r2
 8009586:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2b00      	cmp	r3, #0
 8009594:	dcf0      	bgt.n	8009578 <SCB_InvalidateDCache_by_Addr+0x1c>
 8009596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800959a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	e000ed00 	.word	0xe000ed00

080095b0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08e      	sub	sp, #56	; 0x38
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	605a      	str	r2, [r3, #4]
 80095c2:	609a      	str	r2, [r3, #8]
 80095c4:	60da      	str	r2, [r3, #12]
 80095c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a59      	ldr	r2, [pc, #356]	; (8009734 <HAL_ETH_MspInit+0x184>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	f040 80ab 	bne.w	800972a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80095d4:	4b58      	ldr	r3, [pc, #352]	; (8009738 <HAL_ETH_MspInit+0x188>)
 80095d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80095da:	4a57      	ldr	r2, [pc, #348]	; (8009738 <HAL_ETH_MspInit+0x188>)
 80095dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80095e4:	4b54      	ldr	r3, [pc, #336]	; (8009738 <HAL_ETH_MspInit+0x188>)
 80095e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80095ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ee:	623b      	str	r3, [r7, #32]
 80095f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80095f2:	4b51      	ldr	r3, [pc, #324]	; (8009738 <HAL_ETH_MspInit+0x188>)
 80095f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80095f8:	4a4f      	ldr	r2, [pc, #316]	; (8009738 <HAL_ETH_MspInit+0x188>)
 80095fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009602:	4b4d      	ldr	r3, [pc, #308]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009610:	4b49      	ldr	r3, [pc, #292]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009612:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009616:	4a48      	ldr	r2, [pc, #288]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800961c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009620:	4b45      	ldr	r3, [pc, #276]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009622:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800962a:	61bb      	str	r3, [r7, #24]
 800962c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800962e:	4b42      	ldr	r3, [pc, #264]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009634:	4a40      	ldr	r2, [pc, #256]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009636:	f043 0304 	orr.w	r3, r3, #4
 800963a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800963e:	4b3e      	ldr	r3, [pc, #248]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800964c:	4b3a      	ldr	r3, [pc, #232]	; (8009738 <HAL_ETH_MspInit+0x188>)
 800964e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009652:	4a39      	ldr	r2, [pc, #228]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009654:	f043 0301 	orr.w	r3, r3, #1
 8009658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800965c:	4b36      	ldr	r3, [pc, #216]	; (8009738 <HAL_ETH_MspInit+0x188>)
 800965e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	613b      	str	r3, [r7, #16]
 8009668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800966a:	4b33      	ldr	r3, [pc, #204]	; (8009738 <HAL_ETH_MspInit+0x188>)
 800966c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009670:	4a31      	ldr	r2, [pc, #196]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009672:	f043 0302 	orr.w	r3, r3, #2
 8009676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800967a:	4b2f      	ldr	r3, [pc, #188]	; (8009738 <HAL_ETH_MspInit+0x188>)
 800967c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009688:	4b2b      	ldr	r3, [pc, #172]	; (8009738 <HAL_ETH_MspInit+0x188>)
 800968a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800968e:	4a2a      	ldr	r2, [pc, #168]	; (8009738 <HAL_ETH_MspInit+0x188>)
 8009690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009698:	4b27      	ldr	r3, [pc, #156]	; (8009738 <HAL_ETH_MspInit+0x188>)
 800969a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	60bb      	str	r3, [r7, #8]
 80096a4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80096a6:	2332      	movs	r3, #50	; 0x32
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096aa:	2302      	movs	r3, #2
 80096ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096b2:	2300      	movs	r3, #0
 80096b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096b6:	230b      	movs	r3, #11
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096be:	4619      	mov	r1, r3
 80096c0:	481e      	ldr	r0, [pc, #120]	; (800973c <HAL_ETH_MspInit+0x18c>)
 80096c2:	f7f9 fe69 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80096c6:	2386      	movs	r3, #134	; 0x86
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ca:	2302      	movs	r3, #2
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096d2:	2300      	movs	r3, #0
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096d6:	230b      	movs	r3, #11
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096de:	4619      	mov	r1, r3
 80096e0:	4817      	ldr	r0, [pc, #92]	; (8009740 <HAL_ETH_MspInit+0x190>)
 80096e2:	f7f9 fe59 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80096e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ec:	2302      	movs	r3, #2
 80096ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096f4:	2300      	movs	r3, #0
 80096f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096f8:	230b      	movs	r3, #11
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009700:	4619      	mov	r1, r3
 8009702:	4810      	ldr	r0, [pc, #64]	; (8009744 <HAL_ETH_MspInit+0x194>)
 8009704:	f7f9 fe48 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009708:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800970e:	2302      	movs	r3, #2
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009712:	2300      	movs	r3, #0
 8009714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009716:	2300      	movs	r3, #0
 8009718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800971a:	230b      	movs	r3, #11
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800971e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009722:	4619      	mov	r1, r3
 8009724:	4808      	ldr	r0, [pc, #32]	; (8009748 <HAL_ETH_MspInit+0x198>)
 8009726:	f7f9 fe37 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800972a:	bf00      	nop
 800972c:	3738      	adds	r7, #56	; 0x38
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	40028000 	.word	0x40028000
 8009738:	58024400 	.word	0x58024400
 800973c:	58020800 	.word	0x58020800
 8009740:	58020000 	.word	0x58020000
 8009744:	58020400 	.word	0x58020400
 8009748:	58021800 	.word	0x58021800

0800974c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800974c:	b5b0      	push	{r4, r5, r7, lr}
 800974e:	b0ac      	sub	sp, #176	; 0xb0
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009760:	4b90      	ldr	r3, [pc, #576]	; (80099a4 <low_level_init+0x258>)
 8009762:	4a91      	ldr	r2, [pc, #580]	; (80099a8 <low_level_init+0x25c>)
 8009764:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009766:	2300      	movs	r3, #0
 8009768:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800976c:	2380      	movs	r3, #128	; 0x80
 800976e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009772:	23e1      	movs	r3, #225	; 0xe1
 8009774:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009778:	2300      	movs	r3, #0
 800977a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800977e:	2300      	movs	r3, #0
 8009780:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009784:	2300      	movs	r3, #0
 8009786:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800978a:	4a86      	ldr	r2, [pc, #536]	; (80099a4 <low_level_init+0x258>)
 800978c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009790:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009792:	4b84      	ldr	r3, [pc, #528]	; (80099a4 <low_level_init+0x258>)
 8009794:	2201      	movs	r2, #1
 8009796:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009798:	4b82      	ldr	r3, [pc, #520]	; (80099a4 <low_level_init+0x258>)
 800979a:	4a84      	ldr	r2, [pc, #528]	; (80099ac <low_level_init+0x260>)
 800979c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800979e:	4b81      	ldr	r3, [pc, #516]	; (80099a4 <low_level_init+0x258>)
 80097a0:	4a83      	ldr	r2, [pc, #524]	; (80099b0 <low_level_init+0x264>)
 80097a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80097a4:	4b7f      	ldr	r3, [pc, #508]	; (80099a4 <low_level_init+0x258>)
 80097a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80097aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80097ac:	487d      	ldr	r0, [pc, #500]	; (80099a4 <low_level_init+0x258>)
 80097ae:	f7f8 f915 	bl	80019dc <HAL_ETH_Init>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80097b8:	2234      	movs	r2, #52	; 0x34
 80097ba:	2100      	movs	r1, #0
 80097bc:	487d      	ldr	r0, [pc, #500]	; (80099b4 <low_level_init+0x268>)
 80097be:	f00f faef 	bl	8018da0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80097c2:	4b7c      	ldr	r3, [pc, #496]	; (80099b4 <low_level_init+0x268>)
 80097c4:	2221      	movs	r2, #33	; 0x21
 80097c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80097c8:	4b7a      	ldr	r3, [pc, #488]	; (80099b4 <low_level_init+0x268>)
 80097ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80097ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80097d0:	4b78      	ldr	r3, [pc, #480]	; (80099b4 <low_level_init+0x268>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80097d6:	4878      	ldr	r0, [pc, #480]	; (80099b8 <low_level_init+0x26c>)
 80097d8:	f005 ff62 	bl	800f6a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2206      	movs	r2, #6
 80097e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80097e4:	4b6f      	ldr	r3, [pc, #444]	; (80099a4 <low_level_init+0x258>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	781a      	ldrb	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80097f0:	4b6c      	ldr	r3, [pc, #432]	; (80099a4 <low_level_init+0x258>)
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	785a      	ldrb	r2, [r3, #1]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80097fc:	4b69      	ldr	r3, [pc, #420]	; (80099a4 <low_level_init+0x258>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	789a      	ldrb	r2, [r3, #2]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009808:	4b66      	ldr	r3, [pc, #408]	; (80099a4 <low_level_init+0x258>)
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	78da      	ldrb	r2, [r3, #3]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009814:	4b63      	ldr	r3, [pc, #396]	; (80099a4 <low_level_init+0x258>)
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	791a      	ldrb	r2, [r3, #4]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009820:	4b60      	ldr	r3, [pc, #384]	; (80099a4 <low_level_init+0x258>)
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	795a      	ldrb	r2, [r3, #5]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009832:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800983a:	f043 030a 	orr.w	r3, r3, #10
 800983e:	b2da      	uxtb	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009846:	2300      	movs	r3, #0
 8009848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800984c:	e012      	b.n	8009874 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800984e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009852:	4613      	mov	r3, r2
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	4413      	add	r3, r2
 8009858:	025b      	lsls	r3, r3, #9
 800985a:	4a58      	ldr	r2, [pc, #352]	; (80099bc <low_level_init+0x270>)
 800985c:	441a      	add	r2, r3
 800985e:	2300      	movs	r3, #0
 8009860:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009864:	484f      	ldr	r0, [pc, #316]	; (80099a4 <low_level_init+0x258>)
 8009866:	f7f8 f993 	bl	8001b90 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800986a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800986e:	3301      	adds	r3, #1
 8009870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009878:	2b03      	cmp	r3, #3
 800987a:	d9e8      	bls.n	800984e <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800987c:	2300      	movs	r3, #0
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009880:	2300      	movs	r3, #0
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009888:	2101      	movs	r1, #1
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fb68 	bl	8009f60 <osSemaphoreCreate>
 8009890:	4602      	mov	r2, r0
 8009892:	4b4b      	ldr	r3, [pc, #300]	; (80099c0 <low_level_init+0x274>)
 8009894:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009896:	4b4b      	ldr	r3, [pc, #300]	; (80099c4 <low_level_init+0x278>)
 8009898:	f107 040c 	add.w	r4, r7, #12
 800989c:	461d      	mov	r5, r3
 800989e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80098aa:	f107 030c 	add.w	r3, r7, #12
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fa59 	bl	8009d68 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80098b6:	4944      	ldr	r1, [pc, #272]	; (80099c8 <low_level_init+0x27c>)
 80098b8:	4844      	ldr	r0, [pc, #272]	; (80099cc <low_level_init+0x280>)
 80098ba:	f7f7 fd38 	bl	800132e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80098be:	4843      	ldr	r0, [pc, #268]	; (80099cc <low_level_init+0x280>)
 80098c0:	f7f7 fd67 	bl	8001392 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80098c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d164      	bne.n	8009996 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80098cc:	483f      	ldr	r0, [pc, #252]	; (80099cc <low_level_init+0x280>)
 80098ce:	f7f7 fe08 	bl	80014e2 <LAN8742_GetLinkState>
 80098d2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80098d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098da:	2b01      	cmp	r3, #1
 80098dc:	dc06      	bgt.n	80098ec <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f006 f99d 	bl	800fc1e <netif_set_link_down>
      netif_set_down(netif);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f006 f955 	bl	800fb94 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80098ea:	e056      	b.n	800999a <low_level_init+0x24e>
      switch (PHYLinkState)
 80098ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098f0:	3b02      	subs	r3, #2
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d82a      	bhi.n	800994c <low_level_init+0x200>
 80098f6:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <low_level_init+0x1b0>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	0800990d 	.word	0x0800990d
 8009900:	0800991f 	.word	0x0800991f
 8009904:	0800992f 	.word	0x0800992f
 8009908:	0800993f 	.word	0x0800993f
        duplex = ETH_FULLDUPLEX_MODE;
 800990c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009914:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800991c:	e01f      	b.n	800995e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800991e:	2300      	movs	r3, #0
 8009920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800992c:	e017      	b.n	800995e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800992e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009936:	2300      	movs	r3, #0
 8009938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800993c:	e00f      	b.n	800995e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800993e:	2300      	movs	r3, #0
 8009940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8009944:	2300      	movs	r3, #0
 8009946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800994a:	e008      	b.n	800995e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800994c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8009954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800995c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800995e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009962:	4619      	mov	r1, r3
 8009964:	480f      	ldr	r0, [pc, #60]	; (80099a4 <low_level_init+0x258>)
 8009966:	f7f8 fd41 	bl	80023ec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800996a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800996e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 8009970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009974:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009976:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800997a:	4619      	mov	r1, r3
 800997c:	4809      	ldr	r0, [pc, #36]	; (80099a4 <low_level_init+0x258>)
 800997e:	f7f8 ff09 	bl	8002794 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8009982:	4808      	ldr	r0, [pc, #32]	; (80099a4 <low_level_init+0x258>)
 8009984:	f7f8 f945 	bl	8001c12 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f006 f8bf 	bl	800fb0c <netif_set_up>
    netif_set_link_up(netif);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f006 f922 	bl	800fbd8 <netif_set_link_up>
}
 8009994:	e001      	b.n	800999a <low_level_init+0x24e>
    Error_Handler();
 8009996:	f7f7 fa3f 	bl	8000e18 <Error_Handler>
}
 800999a:	bf00      	nop
 800999c:	37b0      	adds	r7, #176	; 0xb0
 800999e:	46bd      	mov	sp, r7
 80099a0:	bdb0      	pop	{r4, r5, r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20004808 	.word	0x20004808
 80099a8:	40028000 	.word	0x40028000
 80099ac:	30040060 	.word	0x30040060
 80099b0:	30040000 	.word	0x30040000
 80099b4:	20004878 	.word	0x20004878
 80099b8:	0801c58c 	.word	0x0801c58c
 80099bc:	30040200 	.word	0x30040200
 80099c0:	2000030c 	.word	0x2000030c
 80099c4:	08019bec 	.word	0x08019bec
 80099c8:	20000010 	.word	0x20000010
 80099cc:	200047e8 	.word	0x200047e8

080099d0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b092      	sub	sp, #72	; 0x48
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	647b      	str	r3, [r7, #68]	; 0x44
 80099de:	2300      	movs	r3, #0
 80099e0:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	2230      	movs	r2, #48	; 0x30
 80099ee:	2100      	movs	r1, #0
 80099f0:	4618      	mov	r0, r3
 80099f2:	f00f f9d5 	bl	8018da0 <memset>
  
  for(q = p; q != NULL; q = q->next)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099fa:	e04f      	b.n	8009a9c <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 80099fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d902      	bls.n	8009a08 <low_level_output+0x38>
      return ERR_IF;
 8009a02:	f06f 030b 	mvn.w	r3, #11
 8009a06:	e05a      	b.n	8009abe <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 8009a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0a:	6859      	ldr	r1, [r3, #4]
 8009a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a0e:	4613      	mov	r3, r2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3b40      	subs	r3, #64	; 0x40
 8009a1e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	895b      	ldrh	r3, [r3, #10]
 8009a24:	4619      	mov	r1, r3
 8009a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a28:	4613      	mov	r3, r2
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a34:	4413      	add	r3, r2
 8009a36:	3b3c      	subs	r3, #60	; 0x3c
 8009a38:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3c:	895b      	ldrh	r3, [r3, #10]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a42:	4413      	add	r3, r2
 8009a44:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 8009a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d012      	beq.n	8009a72 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a4e:	1e5a      	subs	r2, r3, #1
 8009a50:	f107 0008 	add.w	r0, r7, #8
 8009a54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a56:	460b      	mov	r3, r1
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	440b      	add	r3, r1
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	18c1      	adds	r1, r0, r3
 8009a60:	4613      	mov	r3, r2
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a6c:	4413      	add	r3, r2
 8009a6e:	3b38      	subs	r3, #56	; 0x38
 8009a70:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8009a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10a      	bne.n	8009a90 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 8009a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a88:	4413      	add	r3, r2
 8009a8a:	3b38      	subs	r3, #56	; 0x38
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8009a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a92:	3301      	adds	r3, #1
 8009a94:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1ac      	bne.n	80099fc <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 8009aa2:	4a09      	ldr	r2, [pc, #36]	; (8009ac8 <low_level_output+0xf8>)
 8009aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa6:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009aa8:	4a07      	ldr	r2, [pc, #28]	; (8009ac8 <low_level_output+0xf8>)
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009ab0:	2214      	movs	r2, #20
 8009ab2:	4905      	ldr	r1, [pc, #20]	; (8009ac8 <low_level_output+0xf8>)
 8009ab4:	4805      	ldr	r0, [pc, #20]	; (8009acc <low_level_output+0xfc>)
 8009ab6:	f7f8 f942 	bl	8001d3e <HAL_ETH_Transmit>
  
  return errval;
 8009aba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3748      	adds	r7, #72	; 0x48
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20004878 	.word	0x20004878
 8009acc:	20004808 	.word	0x20004808

08009ad0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 8009ae0:	f107 030c 	add.w	r3, r7, #12
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4817      	ldr	r0, [pc, #92]	; (8009b44 <low_level_input+0x74>)
 8009ae8:	f7f8 fa93 	bl	8002012 <HAL_ETH_GetRxDataBuffer>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d122      	bne.n	8009b38 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	4619      	mov	r1, r3
 8009af8:	4812      	ldr	r0, [pc, #72]	; (8009b44 <low_level_input+0x74>)
 8009afa:	f7f8 fb28 	bl	800214e <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8009afe:	4811      	ldr	r0, [pc, #68]	; (8009b44 <low_level_input+0x74>)
 8009b00:	f7f8 fb58 	bl	80021b4 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff fd26 	bl	800955c <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009b10:	480d      	ldr	r0, [pc, #52]	; (8009b48 <low_level_input+0x78>)
 8009b12:	f005 fe41 	bl	800f798 <memp_malloc_pool>
 8009b16:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	4a0c      	ldr	r2, [pc, #48]	; (8009b4c <low_level_input+0x7c>)
 8009b1c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	b299      	uxth	r1, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	2004      	movs	r0, #4
 8009b32:	f006 fa83 	bl	801003c <pbuf_alloced_custom>
 8009b36:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 8009b38:	69fb      	ldr	r3, [r7, #28]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3720      	adds	r7, #32
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20004808 	.word	0x20004808
 8009b48:	0801c58c 	.word	0x0801c58c
 8009b4c:	08009c0d 	.word	0x08009c0d

08009b50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009b5c:	4b12      	ldr	r3, [pc, #72]	; (8009ba8 <ethernetif_input+0x58>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f04f 31ff 	mov.w	r1, #4294967295
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fa2f 	bl	8009fc8 <osSemaphoreWait>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1f5      	bne.n	8009b5c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009b70:	480e      	ldr	r0, [pc, #56]	; (8009bac <ethernetif_input+0x5c>)
 8009b72:	f00f f877 	bl	8018c64 <sys_mutex_lock>
        p = low_level_input( netif );
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff ffaa 	bl	8009ad0 <low_level_input>
 8009b7c:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00a      	beq.n	8009b9a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	68f9      	ldr	r1, [r7, #12]
 8009b8a:	68b8      	ldr	r0, [r7, #8]
 8009b8c:	4798      	blx	r3
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 8009b94:	68b8      	ldr	r0, [r7, #8]
 8009b96:	f006 fc2f 	bl	80103f8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009b9a:	4804      	ldr	r0, [pc, #16]	; (8009bac <ethernetif_input+0x5c>)
 8009b9c:	f00f f871 	bl	8018c82 <sys_mutex_unlock>
      } while(p!=NULL);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e4      	bne.n	8009b70 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009ba6:	e7d9      	b.n	8009b5c <ethernetif_input+0xc>
 8009ba8:	2000030c 	.word	0x2000030c
 8009bac:	200048f0 	.word	0x200048f0

08009bb0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <ethernetif_init+0x1c>
 8009bbe:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <ethernetif_init+0x48>)
 8009bc0:	f240 223b 	movw	r2, #571	; 0x23b
 8009bc4:	490d      	ldr	r1, [pc, #52]	; (8009bfc <ethernetif_init+0x4c>)
 8009bc6:	480e      	ldr	r0, [pc, #56]	; (8009c00 <ethernetif_init+0x50>)
 8009bc8:	f00f f8f2 	bl	8018db0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2273      	movs	r2, #115	; 0x73
 8009bd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2274      	movs	r2, #116	; 0x74
 8009bd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <ethernetif_init+0x54>)
 8009be0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a08      	ldr	r2, [pc, #32]	; (8009c08 <ethernetif_init+0x58>)
 8009be6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fdaf 	bl	800974c <low_level_init>

  return ERR_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	08019c08 	.word	0x08019c08
 8009bfc:	08019c24 	.word	0x08019c24
 8009c00:	08019c34 	.word	0x08019c34
 8009c04:	08016d61 	.word	0x08016d61
 8009c08:	080099d1 	.word	0x080099d1

08009c0c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	891b      	ldrh	r3, [r3, #8]
 8009c20:	4619      	mov	r1, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f7ff fc9a 	bl	800955c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	4803      	ldr	r0, [pc, #12]	; (8009c38 <pbuf_free_custom+0x2c>)
 8009c2c:	f005 fe28 	bl	800f880 <memp_free_pool>
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	0801c58c 	.word	0x0801c58c

08009c3c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c40:	f7f7 fd26 	bl	8001690 <HAL_GetTick>
 8009c44:	4603      	mov	r3, r0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009c50:	4802      	ldr	r0, [pc, #8]	; (8009c5c <ETH_PHY_IO_Init+0x10>)
 8009c52:	f7f8 fdb9 	bl	80027c8 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20004808 	.word	0x20004808

08009c60 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009c60:	b480      	push	{r7}
 8009c62:	af00      	add	r7, sp, #0
  return 0;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	68f9      	ldr	r1, [r7, #12]
 8009c82:	4807      	ldr	r0, [pc, #28]	; (8009ca0 <ETH_PHY_IO_ReadReg+0x30>)
 8009c84:	f7f8 fb0a 	bl	800229c <HAL_ETH_ReadPHYRegister>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c92:	e000      	b.n	8009c96 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20004808 	.word	0x20004808

08009ca4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	68f9      	ldr	r1, [r7, #12]
 8009cb6:	4807      	ldr	r0, [pc, #28]	; (8009cd4 <ETH_PHY_IO_WriteReg+0x30>)
 8009cb8:	f7f8 fb44 	bl	8002344 <HAL_ETH_WritePHYRegister>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc6:	e000      	b.n	8009cca <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20004808 	.word	0x20004808

08009cd8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009cdc:	f7f7 fcd8 	bl	8001690 <HAL_GetTick>
 8009ce0:	4603      	mov	r3, r0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	4603      	mov	r3, r0
 8009cee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cf8:	2b84      	cmp	r3, #132	; 0x84
 8009cfa:	d005      	beq.n	8009d08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009cfc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4413      	add	r3, r2
 8009d04:	3303      	adds	r3, #3
 8009d06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d08:	68fb      	ldr	r3, [r7, #12]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d1c:	f3ef 8305 	mrs	r3, IPSR
 8009d20:	607b      	str	r3, [r7, #4]
  return(result);
 8009d22:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d3e:	f001 fd07 	bl	800b750 <vTaskStartScheduler>
  
  return osOK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009d4c:	f7ff ffe3 	bl	8009d16 <inHandlerMode>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009d56:	f001 fe13 	bl	800b980 <xTaskGetTickCountFromISR>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	e002      	b.n	8009d64 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009d5e:	f001 fdff 	bl	800b960 <xTaskGetTickCount>
 8009d62:	4603      	mov	r3, r0
  }
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6a:	b089      	sub	sp, #36	; 0x24
 8009d6c:	af04      	add	r7, sp, #16
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d020      	beq.n	8009dbc <osThreadCreate+0x54>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d01c      	beq.n	8009dbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685c      	ldr	r4, [r3, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681d      	ldr	r5, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	691e      	ldr	r6, [r3, #16]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff ffa6 	bl	8009ce6 <makeFreeRtosPriority>
 8009d9a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009da4:	9202      	str	r2, [sp, #8]
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	9100      	str	r1, [sp, #0]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	4632      	mov	r2, r6
 8009dae:	4629      	mov	r1, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	f001 fb09 	bl	800b3c8 <xTaskCreateStatic>
 8009db6:	4603      	mov	r3, r0
 8009db8:	60fb      	str	r3, [r7, #12]
 8009dba:	e01c      	b.n	8009df6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685c      	ldr	r4, [r3, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc8:	b29e      	uxth	r6, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff ff88 	bl	8009ce6 <makeFreeRtosPriority>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	f107 030c 	add.w	r3, r7, #12
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	9200      	str	r2, [sp, #0]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	4632      	mov	r2, r6
 8009de4:	4629      	mov	r1, r5
 8009de6:	4620      	mov	r0, r4
 8009de8:	f001 fb48 	bl	800b47c <xTaskCreate>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d001      	beq.n	8009df6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e000      	b.n	8009df8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <osDelay+0x16>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	e000      	b.n	8009e18 <osDelay+0x18>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fc65 	bl	800b6e8 <vTaskDelay>
  
  return osOK;
 8009e1e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d007      	beq.n	8009e48 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2001      	movs	r0, #1
 8009e40:	f000 fc7f 	bl	800a742 <xQueueCreateMutexStatic>
 8009e44:	4603      	mov	r3, r0
 8009e46:	e003      	b.n	8009e50 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f000 fc62 	bl	800a712 <xQueueCreateMutex>
 8009e4e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <osMutexWait+0x18>
    return osErrorParameter;
 8009e6c:	2380      	movs	r3, #128	; 0x80
 8009e6e:	e03a      	b.n	8009ee6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	d103      	bne.n	8009e84 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e009      	b.n	8009e98 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d006      	beq.n	8009e98 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <osMutexWait+0x40>
      ticks = 1;
 8009e94:	2301      	movs	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009e98:	f7ff ff3d 	bl	8009d16 <inHandlerMode>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d017      	beq.n	8009ed2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f860 	bl	800af70 <xQueueReceiveFromISR>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d001      	beq.n	8009eba <osMutexWait+0x62>
      return osErrorOS;
 8009eb6:	23ff      	movs	r3, #255	; 0xff
 8009eb8:	e015      	b.n	8009ee6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d011      	beq.n	8009ee4 <osMutexWait+0x8c>
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <osMutexWait+0x98>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	e008      	b.n	8009ee4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ed2:	68f9      	ldr	r1, [r7, #12]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 ff43 	bl	800ad60 <xQueueSemaphoreTake>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d001      	beq.n	8009ee4 <osMutexWait+0x8c>
    return osErrorOS;
 8009ee0:	23ff      	movs	r3, #255	; 0xff
 8009ee2:	e000      	b.n	8009ee6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	e000ed04 	.word	0xe000ed04

08009ef4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009f04:	f7ff ff07 	bl	8009d16 <inHandlerMode>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d016      	beq.n	8009f3c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fdbd 	bl	800aa94 <xQueueGiveFromISR>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d001      	beq.n	8009f24 <osMutexRelease+0x30>
      return osErrorOS;
 8009f20:	23ff      	movs	r3, #255	; 0xff
 8009f22:	e017      	b.n	8009f54 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d013      	beq.n	8009f52 <osMutexRelease+0x5e>
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <osMutexRelease+0x68>)
 8009f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	e00a      	b.n	8009f52 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fc18 	bl	800a778 <xQueueGenericSend>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d001      	beq.n	8009f52 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009f4e:	23ff      	movs	r3, #255	; 0xff
 8009f50:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009f52:	68fb      	ldr	r3, [r7, #12]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d010      	beq.n	8009f94 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d10b      	bne.n	8009f90 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	2200      	movs	r2, #0
 8009f84:	2100      	movs	r1, #0
 8009f86:	2001      	movs	r0, #1
 8009f88:	f000 fad8 	bl	800a53c <xQueueGenericCreateStatic>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	e016      	b.n	8009fbe <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e014      	b.n	8009fbe <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d110      	bne.n	8009fbc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f000 fb3f 	bl	800a622 <xQueueGenericCreate>
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <osSemaphoreCreate+0x58>
 8009fac:	2300      	movs	r3, #0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 fbe0 	bl	800a778 <xQueueGenericSend>
      return sema;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	e000      	b.n	8009fbe <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009fbc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009fdc:	2380      	movs	r3, #128	; 0x80
 8009fde:	e03a      	b.n	800a056 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fea:	d103      	bne.n	8009ff4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009fec:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e009      	b.n	800a008 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d006      	beq.n	800a008 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <osSemaphoreWait+0x40>
      ticks = 1;
 800a004:	2301      	movs	r3, #1
 800a006:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a008:	f7ff fe85 	bl	8009d16 <inHandlerMode>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d017      	beq.n	800a042 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	461a      	mov	r2, r3
 800a018:	2100      	movs	r1, #0
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 ffa8 	bl	800af70 <xQueueReceiveFromISR>
 800a020:	4603      	mov	r3, r0
 800a022:	2b01      	cmp	r3, #1
 800a024:	d001      	beq.n	800a02a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a026:	23ff      	movs	r3, #255	; 0xff
 800a028:	e015      	b.n	800a056 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d011      	beq.n	800a054 <osSemaphoreWait+0x8c>
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <osSemaphoreWait+0x98>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	e008      	b.n	800a054 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fe8b 	bl	800ad60 <xQueueSemaphoreTake>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d001      	beq.n	800a054 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a050:	23ff      	movs	r3, #255	; 0xff
 800a052:	e000      	b.n	800a056 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	e000ed04 	.word	0xe000ed04

0800a064 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a070:	2300      	movs	r3, #0
 800a072:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a074:	f7ff fe4f 	bl	8009d16 <inHandlerMode>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d016      	beq.n	800a0ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fd05 	bl	800aa94 <xQueueGiveFromISR>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d001      	beq.n	800a094 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a090:	23ff      	movs	r3, #255	; 0xff
 800a092:	e017      	b.n	800a0c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d013      	beq.n	800a0c2 <osSemaphoreRelease+0x5e>
 800a09a:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <osSemaphoreRelease+0x68>)
 800a09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	e00a      	b.n	800a0c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fb60 	bl	800a778 <xQueueGenericSend>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d001      	beq.n	800a0c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a0be:	23ff      	movs	r3, #255	; 0xff
 800a0c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a0d8:	f7ff fe1d 	bl	8009d16 <inHandlerMode>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a0e2:	2382      	movs	r3, #130	; 0x82
 800a0e4:	e003      	b.n	800a0ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fff9 	bl	800b0de <vQueueDelete>

  return osOK; 
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a0f6:	b590      	push	{r4, r7, lr}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af02      	add	r7, sp, #8
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d012      	beq.n	800a12e <osMessageCreate+0x38>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00e      	beq.n	800a12e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6859      	ldr	r1, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68dc      	ldr	r4, [r3, #12]
 800a120:	2300      	movs	r3, #0
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	4623      	mov	r3, r4
 800a126:	f000 fa09 	bl	800a53c <xQueueGenericCreateStatic>
 800a12a:	4603      	mov	r3, r0
 800a12c:	e008      	b.n	800a140 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	4619      	mov	r1, r3
 800a13a:	f000 fa72 	bl	800a622 <xQueueGenericCreate>
 800a13e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	bd90      	pop	{r4, r7, pc}

0800a148 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a154:	2300      	movs	r3, #0
 800a156:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <osMessagePut+0x1e>
    ticks = 1;
 800a162:	2301      	movs	r3, #1
 800a164:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a166:	f7ff fdd6 	bl	8009d16 <inHandlerMode>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d018      	beq.n	800a1a2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a170:	f107 0210 	add.w	r2, r7, #16
 800a174:	f107 0108 	add.w	r1, r7, #8
 800a178:	2300      	movs	r3, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fbf6 	bl	800a96c <xQueueGenericSendFromISR>
 800a180:	4603      	mov	r3, r0
 800a182:	2b01      	cmp	r3, #1
 800a184:	d001      	beq.n	800a18a <osMessagePut+0x42>
      return osErrorOS;
 800a186:	23ff      	movs	r3, #255	; 0xff
 800a188:	e018      	b.n	800a1bc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d014      	beq.n	800a1ba <osMessagePut+0x72>
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <osMessagePut+0x7c>)
 800a192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	e00b      	b.n	800a1ba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a1a2:	f107 0108 	add.w	r1, r7, #8
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 fae4 	bl	800a778 <xQueueGenericSend>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d001      	beq.n	800a1ba <osMessagePut+0x72>
      return osErrorOS;
 800a1b6:	23ff      	movs	r3, #255	; 0xff
 800a1b8:	e000      	b.n	800a1bc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	e000ed04 	.word	0xe000ed04

0800a1c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b08b      	sub	sp, #44	; 0x2c
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10a      	bne.n	800a1f8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	617b      	str	r3, [r7, #20]
    return event;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	461c      	mov	r4, r3
 800a1ea:	f107 0314 	add.w	r3, r7, #20
 800a1ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1f6:	e054      	b.n	800a2a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a206:	d103      	bne.n	800a210 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	627b      	str	r3, [r7, #36]	; 0x24
 800a20e:	e009      	b.n	800a224 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d006      	beq.n	800a224 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <osMessageGet+0x5c>
      ticks = 1;
 800a220:	2301      	movs	r3, #1
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a224:	f7ff fd77 	bl	8009d16 <inHandlerMode>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d01c      	beq.n	800a268 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a22e:	f107 0220 	add.w	r2, r7, #32
 800a232:	f107 0314 	add.w	r3, r7, #20
 800a236:	3304      	adds	r3, #4
 800a238:	4619      	mov	r1, r3
 800a23a:	68b8      	ldr	r0, [r7, #8]
 800a23c:	f000 fe98 	bl	800af70 <xQueueReceiveFromISR>
 800a240:	4603      	mov	r3, r0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d102      	bne.n	800a24c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a246:	2310      	movs	r3, #16
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e001      	b.n	800a250 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d01d      	beq.n	800a292 <osMessageGet+0xca>
 800a256:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <osMessageGet+0xe4>)
 800a258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	e014      	b.n	800a292 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a268:	f107 0314 	add.w	r3, r7, #20
 800a26c:	3304      	adds	r3, #4
 800a26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a270:	4619      	mov	r1, r3
 800a272:	68b8      	ldr	r0, [r7, #8]
 800a274:	f000 fc98 	bl	800aba8 <xQueueReceive>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d102      	bne.n	800a284 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a27e:	2310      	movs	r3, #16
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e006      	b.n	800a292 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <osMessageGet+0xc6>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e000      	b.n	800a290 <osMessageGet+0xc8>
 800a28e:	2340      	movs	r3, #64	; 0x40
 800a290:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	461c      	mov	r4, r3
 800a296:	f107 0314 	add.w	r3, r7, #20
 800a29a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a29e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	372c      	adds	r7, #44	; 0x2c
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd90      	pop	{r4, r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	e000ed04 	.word	0xe000ed04

0800a2b0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a2b8:	f7ff fd2d 	bl	8009d16 <inHandlerMode>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 feee 	bl	800b0a4 <uxQueueMessagesWaitingFromISR>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	e003      	b.n	800a2d4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fecc 	bl	800b06a <uxQueueMessagesWaiting>
 800a2d2:	4603      	mov	r3, r0
  }
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a2e4:	f7ff fd17 	bl	8009d16 <inHandlerMode>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <osMessageDelete+0x16>
    return osErrorISR;
 800a2ee:	2382      	movs	r3, #130	; 0x82
 800a2f0:	e003      	b.n	800a2fa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fef3 	bl	800b0de <vQueueDelete>

  return osOK; 
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f103 0208 	add.w	r2, r3, #8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f04f 32ff 	mov.w	r2, #4294967295
 800a31a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f103 0208 	add.w	r2, r3, #8
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f103 0208 	add.w	r2, r3, #8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ba:	d103      	bne.n	800a3c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	e00c      	b.n	800a3de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e002      	b.n	800a3d2 <vListInsert+0x2e>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d2f6      	bcs.n	800a3cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6892      	ldr	r2, [r2, #8]
 800a42c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6852      	ldr	r2, [r2, #4]
 800a436:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d103      	bne.n	800a44a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d109      	bne.n	800a494 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60bb      	str	r3, [r7, #8]
 800a492:	e7fe      	b.n	800a492 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a494:	f002 f8ca 	bl	800c62c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a0:	68f9      	ldr	r1, [r7, #12]
 800a4a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4a4:	fb01 f303 	mul.w	r3, r1, r3
 800a4a8:	441a      	add	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4ca:	fb01 f303 	mul.w	r3, r1, r3
 800a4ce:	441a      	add	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	22ff      	movs	r2, #255	; 0xff
 800a4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	22ff      	movs	r2, #255	; 0xff
 800a4e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d114      	bne.n	800a514 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01a      	beq.n	800a528 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3310      	adds	r3, #16
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f001 fb8a 	bl	800bc10 <xTaskRemoveFromEventList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d012      	beq.n	800a528 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a502:	4b0d      	ldr	r3, [pc, #52]	; (800a538 <xQueueGenericReset+0xcc>)
 800a504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	e009      	b.n	800a528 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3310      	adds	r3, #16
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fef2 	bl	800a302 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3324      	adds	r3, #36	; 0x24
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff feed 	bl	800a302 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a528:	f002 f8ae 	bl	800c688 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a52c:	2301      	movs	r3, #1
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08e      	sub	sp, #56	; 0x38
 800a540:	af02      	add	r7, sp, #8
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d109      	bne.n	800a564 <xQueueGenericCreateStatic+0x28>
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	62bb      	str	r3, [r7, #40]	; 0x28
 800a562:	e7fe      	b.n	800a562 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <xQueueGenericCreateStatic+0x42>
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24
 800a57c:	e7fe      	b.n	800a57c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <xQueueGenericCreateStatic+0x4e>
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <xQueueGenericCreateStatic+0x52>
 800a58a:	2301      	movs	r3, #1
 800a58c:	e000      	b.n	800a590 <xQueueGenericCreateStatic+0x54>
 800a58e:	2300      	movs	r3, #0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d109      	bne.n	800a5a8 <xQueueGenericCreateStatic+0x6c>
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	623b      	str	r3, [r7, #32]
 800a5a6:	e7fe      	b.n	800a5a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <xQueueGenericCreateStatic+0x78>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <xQueueGenericCreateStatic+0x7c>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e000      	b.n	800a5ba <xQueueGenericCreateStatic+0x7e>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <xQueueGenericCreateStatic+0x96>
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	61fb      	str	r3, [r7, #28]
 800a5d0:	e7fe      	b.n	800a5d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5d2:	2348      	movs	r3, #72	; 0x48
 800a5d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b48      	cmp	r3, #72	; 0x48
 800a5da:	d009      	beq.n	800a5f0 <xQueueGenericCreateStatic+0xb4>
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	61bb      	str	r3, [r7, #24]
 800a5ee:	e7fe      	b.n	800a5ee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00d      	beq.n	800a618 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a604:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	4613      	mov	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f844 	bl	800a6a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3730      	adds	r7, #48	; 0x30
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a622:	b580      	push	{r7, lr}
 800a624:	b08a      	sub	sp, #40	; 0x28
 800a626:	af02      	add	r7, sp, #8
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	4613      	mov	r3, r2
 800a62e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d109      	bne.n	800a64a <xQueueGenericCreate+0x28>
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	613b      	str	r3, [r7, #16]
 800a648:	e7fe      	b.n	800a648 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	e004      	b.n	800a660 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	fb02 f303 	mul.w	r3, r2, r3
 800a65e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	3348      	adds	r3, #72	; 0x48
 800a664:	4618      	mov	r0, r3
 800a666:	f002 f8fb 	bl	800c860 <pvPortMalloc>
 800a66a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d011      	beq.n	800a696 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	3348      	adds	r3, #72	; 0x48
 800a67a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a684:	79fa      	ldrb	r2, [r7, #7]
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4613      	mov	r3, r2
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 f805 	bl	800a6a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a696:	69bb      	ldr	r3, [r7, #24]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d103      	bne.n	800a6bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e002      	b.n	800a6c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	69b8      	ldr	r0, [r7, #24]
 800a6d2:	f7ff fecb 	bl	800a46c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00e      	beq.n	800a70a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6fe:	2300      	movs	r3, #0
 800a700:	2200      	movs	r2, #0
 800a702:	2100      	movs	r1, #0
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f837 	bl	800a778 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a712:	b580      	push	{r7, lr}
 800a714:	b086      	sub	sp, #24
 800a716:	af00      	add	r7, sp, #0
 800a718:	4603      	mov	r3, r0
 800a71a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a71c:	2301      	movs	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	461a      	mov	r2, r3
 800a728:	6939      	ldr	r1, [r7, #16]
 800a72a:	6978      	ldr	r0, [r7, #20]
 800a72c:	f7ff ff79 	bl	800a622 <xQueueGenericCreate>
 800a730:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff ffd3 	bl	800a6de <prvInitialiseMutex>

		return xNewQueue;
 800a738:	68fb      	ldr	r3, [r7, #12]
	}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a742:	b580      	push	{r7, lr}
 800a744:	b088      	sub	sp, #32
 800a746:	af02      	add	r7, sp, #8
 800a748:	4603      	mov	r3, r0
 800a74a:	6039      	str	r1, [r7, #0]
 800a74c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a74e:	2301      	movs	r3, #1
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2200      	movs	r2, #0
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f7ff feeb 	bl	800a53c <xQueueGenericCreateStatic>
 800a766:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff ffb8 	bl	800a6de <prvInitialiseMutex>

		return xNewQueue;
 800a76e:	68fb      	ldr	r3, [r7, #12]
	}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08e      	sub	sp, #56	; 0x38
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a786:	2300      	movs	r3, #0
 800a788:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	2b00      	cmp	r3, #0
 800a792:	d109      	bne.n	800a7a8 <xQueueGenericSend+0x30>
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7a6:	e7fe      	b.n	800a7a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d103      	bne.n	800a7b6 <xQueueGenericSend+0x3e>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <xQueueGenericSend+0x42>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <xQueueGenericSend+0x44>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d109      	bne.n	800a7d4 <xQueueGenericSend+0x5c>
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d2:	e7fe      	b.n	800a7d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d103      	bne.n	800a7e2 <xQueueGenericSend+0x6a>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d101      	bne.n	800a7e6 <xQueueGenericSend+0x6e>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e000      	b.n	800a7e8 <xQueueGenericSend+0x70>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <xQueueGenericSend+0x88>
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	623b      	str	r3, [r7, #32]
 800a7fe:	e7fe      	b.n	800a7fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a800:	f001 fbbc 	bl	800bf7c <xTaskGetSchedulerState>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <xQueueGenericSend+0x98>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <xQueueGenericSend+0x9c>
 800a810:	2301      	movs	r3, #1
 800a812:	e000      	b.n	800a816 <xQueueGenericSend+0x9e>
 800a814:	2300      	movs	r3, #0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <xQueueGenericSend+0xb6>
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	61fb      	str	r3, [r7, #28]
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82e:	f001 fefd 	bl	800c62c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d302      	bcc.n	800a844 <xQueueGenericSend+0xcc>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d129      	bne.n	800a898 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a84a:	f000 fc82 	bl	800b152 <prvCopyDataToQueue>
 800a84e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	d010      	beq.n	800a87a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	3324      	adds	r3, #36	; 0x24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f9d7 	bl	800bc10 <xTaskRemoveFromEventList>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d013      	beq.n	800a890 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a868:	4b3f      	ldr	r3, [pc, #252]	; (800a968 <xQueueGenericSend+0x1f0>)
 800a86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	e00a      	b.n	800a890 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d007      	beq.n	800a890 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a880:	4b39      	ldr	r3, [pc, #228]	; (800a968 <xQueueGenericSend+0x1f0>)
 800a882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a890:	f001 fefa 	bl	800c688 <vPortExitCritical>
				return pdPASS;
 800a894:	2301      	movs	r3, #1
 800a896:	e063      	b.n	800a960 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d103      	bne.n	800a8a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a89e:	f001 fef3 	bl	800c688 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e05c      	b.n	800a960 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8ac:	f107 0314 	add.w	r3, r7, #20
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f001 fa0f 	bl	800bcd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8ba:	f001 fee5 	bl	800c688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8be:	f000 ffa5 	bl	800b80c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8c2:	f001 feb3 	bl	800c62c <vPortEnterCritical>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d103      	bne.n	800a8dc <xQueueGenericSend+0x164>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e8:	d103      	bne.n	800a8f2 <xQueueGenericSend+0x17a>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8f2:	f001 fec9 	bl	800c688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8f6:	1d3a      	adds	r2, r7, #4
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f001 f9fe 	bl	800bd00 <xTaskCheckForTimeOut>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d124      	bne.n	800a954 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a90a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a90c:	f000 fd19 	bl	800b342 <prvIsQueueFull>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d018      	beq.n	800a948 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	3310      	adds	r3, #16
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 f952 	bl	800bbc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a926:	f000 fca4 	bl	800b272 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a92a:	f000 ff7d 	bl	800b828 <xTaskResumeAll>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	f47f af7c 	bne.w	800a82e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <xQueueGenericSend+0x1f0>)
 800a938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	e772      	b.n	800a82e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a94a:	f000 fc92 	bl	800b272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a94e:	f000 ff6b 	bl	800b828 <xTaskResumeAll>
 800a952:	e76c      	b.n	800a82e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a956:	f000 fc8c 	bl	800b272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a95a:	f000 ff65 	bl	800b828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a95e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a960:	4618      	mov	r0, r3
 800a962:	3738      	adds	r7, #56	; 0x38
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08e      	sub	sp, #56	; 0x38
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	2b00      	cmp	r3, #0
 800a982:	d109      	bne.n	800a998 <xQueueGenericSendFromISR+0x2c>
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
 800a996:	e7fe      	b.n	800a996 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d103      	bne.n	800a9a6 <xQueueGenericSendFromISR+0x3a>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <xQueueGenericSendFromISR+0x3e>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <xQueueGenericSendFromISR+0x40>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d109      	bne.n	800a9c4 <xQueueGenericSendFromISR+0x58>
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	623b      	str	r3, [r7, #32]
 800a9c2:	e7fe      	b.n	800a9c2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d103      	bne.n	800a9d2 <xQueueGenericSendFromISR+0x66>
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <xQueueGenericSendFromISR+0x6a>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <xQueueGenericSendFromISR+0x6c>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d109      	bne.n	800a9f0 <xQueueGenericSendFromISR+0x84>
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61fb      	str	r3, [r7, #28]
 800a9ee:	e7fe      	b.n	800a9ee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9f0:	f001 fef8 	bl	800c7e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9f4:	f3ef 8211 	mrs	r2, BASEPRI
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	61ba      	str	r2, [r7, #24]
 800aa0a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa0c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d302      	bcc.n	800aa22 <xQueueGenericSendFromISR+0xb6>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d12c      	bne.n	800aa7c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	68b9      	ldr	r1, [r7, #8]
 800aa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa32:	f000 fb8e 	bl	800b152 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa36:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3e:	d112      	bne.n	800aa66 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d016      	beq.n	800aa76 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	3324      	adds	r3, #36	; 0x24
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 f8df 	bl	800bc10 <xTaskRemoveFromEventList>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00e      	beq.n	800aa76 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00b      	beq.n	800aa76 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e007      	b.n	800aa76 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	b25a      	sxtb	r2, r3
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa76:	2301      	movs	r3, #1
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa7a:	e001      	b.n	800aa80 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3738      	adds	r7, #56	; 0x38
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08e      	sub	sp, #56	; 0x38
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d109      	bne.n	800aabc <xQueueGiveFromISR+0x28>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	623b      	str	r3, [r7, #32]
 800aaba:	e7fe      	b.n	800aaba <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d009      	beq.n	800aad8 <xQueueGiveFromISR+0x44>
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	61fb      	str	r3, [r7, #28]
 800aad6:	e7fe      	b.n	800aad6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <xQueueGiveFromISR+0x54>
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <xQueueGiveFromISR+0x58>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <xQueueGiveFromISR+0x5a>
 800aaec:	2300      	movs	r3, #0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <xQueueGiveFromISR+0x72>
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	61bb      	str	r3, [r7, #24]
 800ab04:	e7fe      	b.n	800ab04 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab06:	f001 fe6d 	bl	800c7e4 <vPortValidateInterruptPriority>
	__asm volatile
 800ab0a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	617a      	str	r2, [r7, #20]
 800ab20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ab22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d22b      	bcs.n	800ab8e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab50:	d112      	bne.n	800ab78 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d016      	beq.n	800ab88 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	3324      	adds	r3, #36	; 0x24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 f856 	bl	800bc10 <xTaskRemoveFromEventList>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00e      	beq.n	800ab88 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00b      	beq.n	800ab88 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	e007      	b.n	800ab88 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	b25a      	sxtb	r2, r3
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8c:	e001      	b.n	800ab92 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	637b      	str	r3, [r7, #52]	; 0x34
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3738      	adds	r7, #56	; 0x38
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08c      	sub	sp, #48	; 0x30
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <xQueueReceive+0x2e>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	623b      	str	r3, [r7, #32]
 800abd4:	e7fe      	b.n	800abd4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <xQueueReceive+0x3c>
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <xQueueReceive+0x40>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <xQueueReceive+0x42>
 800abe8:	2300      	movs	r3, #0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d109      	bne.n	800ac02 <xQueueReceive+0x5a>
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	61fb      	str	r3, [r7, #28]
 800ac00:	e7fe      	b.n	800ac00 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac02:	f001 f9bb 	bl	800bf7c <xTaskGetSchedulerState>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <xQueueReceive+0x6a>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <xQueueReceive+0x6e>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <xQueueReceive+0x70>
 800ac16:	2300      	movs	r3, #0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d109      	bne.n	800ac30 <xQueueReceive+0x88>
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	61bb      	str	r3, [r7, #24]
 800ac2e:	e7fe      	b.n	800ac2e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac30:	f001 fcfc 	bl	800c62c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01f      	beq.n	800ac80 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac44:	f000 faef 	bl	800b226 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	1e5a      	subs	r2, r3, #1
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00f      	beq.n	800ac78 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	3310      	adds	r3, #16
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 ffd7 	bl	800bc10 <xTaskRemoveFromEventList>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d007      	beq.n	800ac78 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac68:	4b3c      	ldr	r3, [pc, #240]	; (800ad5c <xQueueReceive+0x1b4>)
 800ac6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac78:	f001 fd06 	bl	800c688 <vPortExitCritical>
				return pdPASS;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e069      	b.n	800ad54 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d103      	bne.n	800ac8e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac86:	f001 fcff 	bl	800c688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e062      	b.n	800ad54 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac94:	f107 0310 	add.w	r3, r7, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f001 f81b 	bl	800bcd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aca2:	f001 fcf1 	bl	800c688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aca6:	f000 fdb1 	bl	800b80c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acaa:	f001 fcbf 	bl	800c62c <vPortEnterCritical>
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb4:	b25b      	sxtb	r3, r3
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acba:	d103      	bne.n	800acc4 <xQueueReceive+0x11c>
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acca:	b25b      	sxtb	r3, r3
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d103      	bne.n	800acda <xQueueReceive+0x132>
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acda:	f001 fcd5 	bl	800c688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acde:	1d3a      	adds	r2, r7, #4
 800ace0:	f107 0310 	add.w	r3, r7, #16
 800ace4:	4611      	mov	r1, r2
 800ace6:	4618      	mov	r0, r3
 800ace8:	f001 f80a 	bl	800bd00 <xTaskCheckForTimeOut>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d123      	bne.n	800ad3a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acf4:	f000 fb0f 	bl	800b316 <prvIsQueueEmpty>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d017      	beq.n	800ad2e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	3324      	adds	r3, #36	; 0x24
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 ff5e 	bl	800bbc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0e:	f000 fab0 	bl	800b272 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad12:	f000 fd89 	bl	800b828 <xTaskResumeAll>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d189      	bne.n	800ac30 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ad1c:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <xQueueReceive+0x1b4>)
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	e780      	b.n	800ac30 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad30:	f000 fa9f 	bl	800b272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad34:	f000 fd78 	bl	800b828 <xTaskResumeAll>
 800ad38:	e77a      	b.n	800ac30 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad3c:	f000 fa99 	bl	800b272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad40:	f000 fd72 	bl	800b828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad46:	f000 fae6 	bl	800b316 <prvIsQueueEmpty>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f43f af6f 	beq.w	800ac30 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3730      	adds	r7, #48	; 0x30
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	e000ed04 	.word	0xe000ed04

0800ad60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	; 0x38
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad72:	2300      	movs	r3, #0
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d109      	bne.n	800ad90 <xQueueSemaphoreTake+0x30>
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	623b      	str	r3, [r7, #32]
 800ad8e:	e7fe      	b.n	800ad8e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d009      	beq.n	800adac <xQueueSemaphoreTake+0x4c>
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	e7fe      	b.n	800adaa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adac:	f001 f8e6 	bl	800bf7c <xTaskGetSchedulerState>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d102      	bne.n	800adbc <xQueueSemaphoreTake+0x5c>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <xQueueSemaphoreTake+0x60>
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <xQueueSemaphoreTake+0x62>
 800adc0:	2300      	movs	r3, #0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <xQueueSemaphoreTake+0x7a>
 800adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	61bb      	str	r3, [r7, #24]
 800add8:	e7fe      	b.n	800add8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adda:	f001 fc27 	bl	800c62c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d024      	beq.n	800ae34 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	1e5a      	subs	r2, r3, #1
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d104      	bne.n	800ae04 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800adfa:	f001 fa79 	bl	800c2f0 <pvTaskIncrementMutexHeldCount>
 800adfe:	4602      	mov	r2, r0
 800ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00f      	beq.n	800ae2c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0e:	3310      	adds	r3, #16
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fefd 	bl	800bc10 <xTaskRemoveFromEventList>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d007      	beq.n	800ae2c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae1c:	4b53      	ldr	r3, [pc, #332]	; (800af6c <xQueueSemaphoreTake+0x20c>)
 800ae1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae2c:	f001 fc2c 	bl	800c688 <vPortExitCritical>
				return pdPASS;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e096      	b.n	800af62 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d110      	bne.n	800ae5c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <xQueueSemaphoreTake+0xf4>
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	617b      	str	r3, [r7, #20]
 800ae52:	e7fe      	b.n	800ae52 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae54:	f001 fc18 	bl	800c688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e082      	b.n	800af62 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d106      	bne.n	800ae70 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae62:	f107 030c 	add.w	r3, r7, #12
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 ff34 	bl	800bcd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae70:	f001 fc0a 	bl	800c688 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae74:	f000 fcca 	bl	800b80c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae78:	f001 fbd8 	bl	800c62c <vPortEnterCritical>
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae82:	b25b      	sxtb	r3, r3
 800ae84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae88:	d103      	bne.n	800ae92 <xQueueSemaphoreTake+0x132>
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae98:	b25b      	sxtb	r3, r3
 800ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9e:	d103      	bne.n	800aea8 <xQueueSemaphoreTake+0x148>
 800aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea8:	f001 fbee 	bl	800c688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeac:	463a      	mov	r2, r7
 800aeae:	f107 030c 	add.w	r3, r7, #12
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 ff23 	bl	800bd00 <xTaskCheckForTimeOut>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d132      	bne.n	800af26 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aec2:	f000 fa28 	bl	800b316 <prvIsQueueEmpty>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d026      	beq.n	800af1a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d109      	bne.n	800aee8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800aed4:	f001 fbaa 	bl	800c62c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 f86b 	bl	800bfb8 <xTaskPriorityInherit>
 800aee2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aee4:	f001 fbd0 	bl	800c688 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	3324      	adds	r3, #36	; 0x24
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fe69 	bl	800bbc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aef8:	f000 f9bb 	bl	800b272 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aefc:	f000 fc94 	bl	800b828 <xTaskResumeAll>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	f47f af69 	bne.w	800adda <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <xQueueSemaphoreTake+0x20c>)
 800af0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	e75f      	b.n	800adda <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af1c:	f000 f9a9 	bl	800b272 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af20:	f000 fc82 	bl	800b828 <xTaskResumeAll>
 800af24:	e759      	b.n	800adda <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af28:	f000 f9a3 	bl	800b272 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af2c:	f000 fc7c 	bl	800b828 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af32:	f000 f9f0 	bl	800b316 <prvIsQueueEmpty>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f43f af4e 	beq.w	800adda <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00d      	beq.n	800af60 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800af44:	f001 fb72 	bl	800c62c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af4a:	f000 f8ea 	bl	800b122 <prvGetDisinheritPriorityAfterTimeout>
 800af4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f001 f932 	bl	800c1c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af5c:	f001 fb94 	bl	800c688 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af62:	4618      	mov	r0, r3
 800af64:	3738      	adds	r7, #56	; 0x38
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	e000ed04 	.word	0xe000ed04

0800af70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08e      	sub	sp, #56	; 0x38
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	2b00      	cmp	r3, #0
 800af84:	d109      	bne.n	800af9a <xQueueReceiveFromISR+0x2a>
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	623b      	str	r3, [r7, #32]
 800af98:	e7fe      	b.n	800af98 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d103      	bne.n	800afa8 <xQueueReceiveFromISR+0x38>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <xQueueReceiveFromISR+0x3c>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e000      	b.n	800afae <xQueueReceiveFromISR+0x3e>
 800afac:	2300      	movs	r3, #0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <xQueueReceiveFromISR+0x56>
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	61fb      	str	r3, [r7, #28]
 800afc4:	e7fe      	b.n	800afc4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afc6:	f001 fc0d 	bl	800c7e4 <vPortValidateInterruptPriority>
	__asm volatile
 800afca:	f3ef 8211 	mrs	r2, BASEPRI
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	61ba      	str	r2, [r7, #24]
 800afe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800afe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d02f      	beq.n	800b052 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b000:	f000 f911 	bl	800b226 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b00c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b014:	d112      	bne.n	800b03c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d016      	beq.n	800b04c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b020:	3310      	adds	r3, #16
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fdf4 	bl	800bc10 <xTaskRemoveFromEventList>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00e      	beq.n	800b04c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e007      	b.n	800b04c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b040:	3301      	adds	r3, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	b25a      	sxtb	r2, r3
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b04c:	2301      	movs	r3, #1
 800b04e:	637b      	str	r3, [r7, #52]	; 0x34
 800b050:	e001      	b.n	800b056 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b052:	2300      	movs	r3, #0
 800b054:	637b      	str	r3, [r7, #52]	; 0x34
 800b056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b062:	4618      	mov	r0, r3
 800b064:	3738      	adds	r7, #56	; 0x38
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d109      	bne.n	800b08c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60bb      	str	r3, [r7, #8]
 800b08a:	e7fe      	b.n	800b08a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800b08c:	f001 face 	bl	800c62c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b094:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b096:	f001 faf7 	bl	800c688 <vPortExitCritical>

	return uxReturn;
 800b09a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d109      	bne.n	800b0ca <uxQueueMessagesWaitingFromISR+0x26>
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	e7fe      	b.n	800b0c8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b0d0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d109      	bne.n	800b104 <vQueueDelete+0x26>
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60bb      	str	r3, [r7, #8]
 800b102:	e7fe      	b.n	800b102 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 f935 	bl	800b374 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f001 fc65 	bl	800c9e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b122:	b480      	push	{r7}
 800b124:	b085      	sub	sp, #20
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d006      	beq.n	800b140 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f1c3 0307 	rsb	r3, r3, #7
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e001      	b.n	800b144 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b144:	68fb      	ldr	r3, [r7, #12]
	}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b086      	sub	sp, #24
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b15e:	2300      	movs	r3, #0
 800b160:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b166:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10d      	bne.n	800b18c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d14d      	bne.n	800b214 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 ff9b 	bl	800c0b8 <xTaskPriorityDisinherit>
 800b182:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	609a      	str	r2, [r3, #8]
 800b18a:	e043      	b.n	800b214 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d119      	bne.n	800b1c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6858      	ldr	r0, [r3, #4]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	461a      	mov	r2, r3
 800b19c:	68b9      	ldr	r1, [r7, #8]
 800b19e:	f00d fdf4 	bl	8018d8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	685a      	ldr	r2, [r3, #4]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	441a      	add	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d32b      	bcc.n	800b214 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	605a      	str	r2, [r3, #4]
 800b1c4:	e026      	b.n	800b214 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68d8      	ldr	r0, [r3, #12]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	f00d fdda 	bl	8018d8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	425b      	negs	r3, r3
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68da      	ldr	r2, [r3, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d207      	bcs.n	800b202 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	689a      	ldr	r2, [r3, #8]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fa:	425b      	negs	r3, r3
 800b1fc:	441a      	add	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d105      	bne.n	800b214 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d002      	beq.n	800b214 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	3b01      	subs	r3, #1
 800b212:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b21c:	697b      	ldr	r3, [r7, #20]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	d018      	beq.n	800b26a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	441a      	add	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68da      	ldr	r2, [r3, #12]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d303      	bcc.n	800b25a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68d9      	ldr	r1, [r3, #12]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b262:	461a      	mov	r2, r3
 800b264:	6838      	ldr	r0, [r7, #0]
 800b266:	f00d fd90 	bl	8018d8a <memcpy>
	}
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b27a:	f001 f9d7 	bl	800c62c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b284:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b286:	e011      	b.n	800b2ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d012      	beq.n	800b2b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3324      	adds	r3, #36	; 0x24
 800b294:	4618      	mov	r0, r3
 800b296:	f000 fcbb 	bl	800bc10 <xTaskRemoveFromEventList>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2a0:	f000 fd8e 	bl	800bdc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dce9      	bgt.n	800b288 <prvUnlockQueue+0x16>
 800b2b4:	e000      	b.n	800b2b8 <prvUnlockQueue+0x46>
					break;
 800b2b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	22ff      	movs	r2, #255	; 0xff
 800b2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2c0:	f001 f9e2 	bl	800c688 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2c4:	f001 f9b2 	bl	800c62c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2d0:	e011      	b.n	800b2f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d012      	beq.n	800b300 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3310      	adds	r3, #16
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 fc96 	bl	800bc10 <xTaskRemoveFromEventList>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2ea:	f000 fd69 	bl	800bdc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dce9      	bgt.n	800b2d2 <prvUnlockQueue+0x60>
 800b2fe:	e000      	b.n	800b302 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b300:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	22ff      	movs	r2, #255	; 0xff
 800b306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b30a:	f001 f9bd 	bl	800c688 <vPortExitCritical>
}
 800b30e:	bf00      	nop
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b31e:	f001 f985 	bl	800c62c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b32a:	2301      	movs	r3, #1
 800b32c:	60fb      	str	r3, [r7, #12]
 800b32e:	e001      	b.n	800b334 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b330:	2300      	movs	r3, #0
 800b332:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b334:	f001 f9a8 	bl	800c688 <vPortExitCritical>

	return xReturn;
 800b338:	68fb      	ldr	r3, [r7, #12]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b34a:	f001 f96f 	bl	800c62c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b356:	429a      	cmp	r2, r3
 800b358:	d102      	bne.n	800b360 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b35a:	2301      	movs	r3, #1
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	e001      	b.n	800b364 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b364:	f001 f990 	bl	800c688 <vPortExitCritical>

	return xReturn;
 800b368:	68fb      	ldr	r3, [r7, #12]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	e016      	b.n	800b3b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b382:	4a10      	ldr	r2, [pc, #64]	; (800b3c4 <vQueueUnregisterQueue+0x50>)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	4413      	add	r3, r2
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d10b      	bne.n	800b3aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b392:	4a0c      	ldr	r2, [pc, #48]	; (800b3c4 <vQueueUnregisterQueue+0x50>)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2100      	movs	r1, #0
 800b398:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b39c:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <vQueueUnregisterQueue+0x50>)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	00db      	lsls	r3, r3, #3
 800b3a2:	4413      	add	r3, r2
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]
				break;
 800b3a8:	e005      	b.n	800b3b6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b07      	cmp	r3, #7
 800b3b4:	d9e5      	bls.n	800b382 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b3b6:	bf00      	nop
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	200048ac 	.word	0x200048ac

0800b3c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08e      	sub	sp, #56	; 0x38
 800b3cc:	af04      	add	r7, sp, #16
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d109      	bne.n	800b3f0 <xTaskCreateStatic+0x28>
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	623b      	str	r3, [r7, #32]
 800b3ee:	e7fe      	b.n	800b3ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d109      	bne.n	800b40a <xTaskCreateStatic+0x42>
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	61fb      	str	r3, [r7, #28]
 800b408:	e7fe      	b.n	800b408 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b40a:	2354      	movs	r3, #84	; 0x54
 800b40c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b54      	cmp	r3, #84	; 0x54
 800b412:	d009      	beq.n	800b428 <xTaskCreateStatic+0x60>
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	e7fe      	b.n	800b426 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b428:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01e      	beq.n	800b46e <xTaskCreateStatic+0xa6>
 800b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01b      	beq.n	800b46e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b43e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	2202      	movs	r2, #2
 800b444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b448:	2300      	movs	r3, #0
 800b44a:	9303      	str	r3, [sp, #12]
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	9302      	str	r3, [sp, #8]
 800b450:	f107 0314 	add.w	r3, r7, #20
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f850 	bl	800b506 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b468:	f000 f8d4 	bl	800b614 <prvAddNewTaskToReadyList>
 800b46c:	e001      	b.n	800b472 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b472:	697b      	ldr	r3, [r7, #20]
	}
 800b474:	4618      	mov	r0, r3
 800b476:	3728      	adds	r7, #40	; 0x28
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b08c      	sub	sp, #48	; 0x30
 800b480:	af04      	add	r7, sp, #16
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	4613      	mov	r3, r2
 800b48a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4618      	mov	r0, r3
 800b492:	f001 f9e5 	bl	800c860 <pvPortMalloc>
 800b496:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00e      	beq.n	800b4bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b49e:	2054      	movs	r0, #84	; 0x54
 800b4a0:	f001 f9de 	bl	800c860 <pvPortMalloc>
 800b4a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	631a      	str	r2, [r3, #48]	; 0x30
 800b4b2:	e005      	b.n	800b4c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4b4:	6978      	ldr	r0, [r7, #20]
 800b4b6:	f001 fa95 	bl	800c9e4 <vPortFree>
 800b4ba:	e001      	b.n	800b4c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d017      	beq.n	800b4f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4ce:	88fa      	ldrh	r2, [r7, #6]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	9303      	str	r3, [sp, #12]
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	9302      	str	r3, [sp, #8]
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	9301      	str	r3, [sp, #4]
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f80e 	bl	800b506 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ea:	69f8      	ldr	r0, [r7, #28]
 800b4ec:	f000 f892 	bl	800b614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	61bb      	str	r3, [r7, #24]
 800b4f4:	e002      	b.n	800b4fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4fc:	69bb      	ldr	r3, [r7, #24]
	}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b088      	sub	sp, #32
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b51e:	440b      	add	r3, r1
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	f023 0307 	bic.w	r3, r3, #7
 800b52c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	f003 0307 	and.w	r3, r3, #7
 800b534:	2b00      	cmp	r3, #0
 800b536:	d009      	beq.n	800b54c <prvInitialiseNewTask+0x46>
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e7fe      	b.n	800b54a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d01f      	beq.n	800b592 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	e012      	b.n	800b57e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	4413      	add	r3, r2
 800b55e:	7819      	ldrb	r1, [r3, #0]
 800b560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	4413      	add	r3, r2
 800b566:	3334      	adds	r3, #52	; 0x34
 800b568:	460a      	mov	r2, r1
 800b56a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	4413      	add	r3, r2
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d006      	beq.n	800b586 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	3301      	adds	r3, #1
 800b57c:	61fb      	str	r3, [r7, #28]
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	2b0f      	cmp	r3, #15
 800b582:	d9e9      	bls.n	800b558 <prvInitialiseNewTask+0x52>
 800b584:	e000      	b.n	800b588 <prvInitialiseNewTask+0x82>
			{
				break;
 800b586:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b590:	e003      	b.n	800b59a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59c:	2b06      	cmp	r3, #6
 800b59e:	d901      	bls.n	800b5a4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5a0:	2306      	movs	r3, #6
 800b5a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fec1 	bl	800a342 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	3318      	adds	r3, #24
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe febc 	bl	800a342 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	f1c3 0207 	rsb	r2, r3, #7
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	68f9      	ldr	r1, [r7, #12]
 800b5f2:	69b8      	ldr	r0, [r7, #24]
 800b5f4:	f000 fef6 	bl	800c3e4 <pxPortInitialiseStack>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b60a:	bf00      	nop
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b61c:	f001 f806 	bl	800c62c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b620:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <prvAddNewTaskToReadyList+0xb8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	4a29      	ldr	r2, [pc, #164]	; (800b6cc <prvAddNewTaskToReadyList+0xb8>)
 800b628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b62a:	4b29      	ldr	r3, [pc, #164]	; (800b6d0 <prvAddNewTaskToReadyList+0xbc>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d109      	bne.n	800b646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b632:	4a27      	ldr	r2, [pc, #156]	; (800b6d0 <prvAddNewTaskToReadyList+0xbc>)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b638:	4b24      	ldr	r3, [pc, #144]	; (800b6cc <prvAddNewTaskToReadyList+0xb8>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d110      	bne.n	800b662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b640:	f000 fbe2 	bl	800be08 <prvInitialiseTaskLists>
 800b644:	e00d      	b.n	800b662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b646:	4b23      	ldr	r3, [pc, #140]	; (800b6d4 <prvAddNewTaskToReadyList+0xc0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d109      	bne.n	800b662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b64e:	4b20      	ldr	r3, [pc, #128]	; (800b6d0 <prvAddNewTaskToReadyList+0xbc>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b658:	429a      	cmp	r2, r3
 800b65a:	d802      	bhi.n	800b662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b65c:	4a1c      	ldr	r2, [pc, #112]	; (800b6d0 <prvAddNewTaskToReadyList+0xbc>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b662:	4b1d      	ldr	r3, [pc, #116]	; (800b6d8 <prvAddNewTaskToReadyList+0xc4>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3301      	adds	r3, #1
 800b668:	4a1b      	ldr	r2, [pc, #108]	; (800b6d8 <prvAddNewTaskToReadyList+0xc4>)
 800b66a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b670:	2201      	movs	r2, #1
 800b672:	409a      	lsls	r2, r3
 800b674:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <prvAddNewTaskToReadyList+0xc8>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4313      	orrs	r3, r2
 800b67a:	4a18      	ldr	r2, [pc, #96]	; (800b6dc <prvAddNewTaskToReadyList+0xc8>)
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4a15      	ldr	r2, [pc, #84]	; (800b6e0 <prvAddNewTaskToReadyList+0xcc>)
 800b68c:	441a      	add	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3304      	adds	r3, #4
 800b692:	4619      	mov	r1, r3
 800b694:	4610      	mov	r0, r2
 800b696:	f7fe fe61 	bl	800a35c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b69a:	f000 fff5 	bl	800c688 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b69e:	4b0d      	ldr	r3, [pc, #52]	; (800b6d4 <prvAddNewTaskToReadyList+0xc0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00e      	beq.n	800b6c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6a6:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <prvAddNewTaskToReadyList+0xbc>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d207      	bcs.n	800b6c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6b4:	4b0b      	ldr	r3, [pc, #44]	; (800b6e4 <prvAddNewTaskToReadyList+0xd0>)
 800b6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000414 	.word	0x20000414
 800b6d0:	20000314 	.word	0x20000314
 800b6d4:	20000420 	.word	0x20000420
 800b6d8:	20000430 	.word	0x20000430
 800b6dc:	2000041c 	.word	0x2000041c
 800b6e0:	20000318 	.word	0x20000318
 800b6e4:	e000ed04 	.word	0xe000ed04

0800b6e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d016      	beq.n	800b728 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6fa:	4b13      	ldr	r3, [pc, #76]	; (800b748 <vTaskDelay+0x60>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <vTaskDelay+0x2e>
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60bb      	str	r3, [r7, #8]
 800b714:	e7fe      	b.n	800b714 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b716:	f000 f879 	bl	800b80c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b71a:	2100      	movs	r1, #0
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fdfb 	bl	800c318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b722:	f000 f881 	bl	800b828 <xTaskResumeAll>
 800b726:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d107      	bne.n	800b73e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <vTaskDelay+0x64>)
 800b730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	2000043c 	.word	0x2000043c
 800b74c:	e000ed04 	.word	0xe000ed04

0800b750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b75e:	463a      	mov	r2, r7
 800b760:	1d39      	adds	r1, r7, #4
 800b762:	f107 0308 	add.w	r3, r7, #8
 800b766:	4618      	mov	r0, r3
 800b768:	f7f4 fffa 	bl	8000760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	9202      	str	r2, [sp, #8]
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	2300      	movs	r3, #0
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	2300      	movs	r3, #0
 800b77c:	460a      	mov	r2, r1
 800b77e:	491d      	ldr	r1, [pc, #116]	; (800b7f4 <vTaskStartScheduler+0xa4>)
 800b780:	481d      	ldr	r0, [pc, #116]	; (800b7f8 <vTaskStartScheduler+0xa8>)
 800b782:	f7ff fe21 	bl	800b3c8 <xTaskCreateStatic>
 800b786:	4602      	mov	r2, r0
 800b788:	4b1c      	ldr	r3, [pc, #112]	; (800b7fc <vTaskStartScheduler+0xac>)
 800b78a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <vTaskStartScheduler+0xac>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b794:	2301      	movs	r3, #1
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	e001      	b.n	800b79e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d115      	bne.n	800b7d0 <vTaskStartScheduler+0x80>
 800b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7b6:	4b12      	ldr	r3, [pc, #72]	; (800b800 <vTaskStartScheduler+0xb0>)
 800b7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7be:	4b11      	ldr	r3, [pc, #68]	; (800b804 <vTaskStartScheduler+0xb4>)
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7c4:	4b10      	ldr	r3, [pc, #64]	; (800b808 <vTaskStartScheduler+0xb8>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7ca:	f000 fe91 	bl	800c4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7ce:	e00d      	b.n	800b7ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d109      	bne.n	800b7ec <vTaskStartScheduler+0x9c>
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	e7fe      	b.n	800b7ea <vTaskStartScheduler+0x9a>
}
 800b7ec:	bf00      	nop
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	08019c5c 	.word	0x08019c5c
 800b7f8:	0800bdd9 	.word	0x0800bdd9
 800b7fc:	20000438 	.word	0x20000438
 800b800:	20000434 	.word	0x20000434
 800b804:	20000420 	.word	0x20000420
 800b808:	20000418 	.word	0x20000418

0800b80c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b810:	4b04      	ldr	r3, [pc, #16]	; (800b824 <vTaskSuspendAll+0x18>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3301      	adds	r3, #1
 800b816:	4a03      	ldr	r2, [pc, #12]	; (800b824 <vTaskSuspendAll+0x18>)
 800b818:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b81a:	bf00      	nop
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	2000043c 	.word	0x2000043c

0800b828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b832:	2300      	movs	r3, #0
 800b834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b836:	4b41      	ldr	r3, [pc, #260]	; (800b93c <xTaskResumeAll+0x114>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d109      	bne.n	800b852 <xTaskResumeAll+0x2a>
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	603b      	str	r3, [r7, #0]
 800b850:	e7fe      	b.n	800b850 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b852:	f000 feeb 	bl	800c62c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b856:	4b39      	ldr	r3, [pc, #228]	; (800b93c <xTaskResumeAll+0x114>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	4a37      	ldr	r2, [pc, #220]	; (800b93c <xTaskResumeAll+0x114>)
 800b85e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b860:	4b36      	ldr	r3, [pc, #216]	; (800b93c <xTaskResumeAll+0x114>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d161      	bne.n	800b92c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b868:	4b35      	ldr	r3, [pc, #212]	; (800b940 <xTaskResumeAll+0x118>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d05d      	beq.n	800b92c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b870:	e02e      	b.n	800b8d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b872:	4b34      	ldr	r3, [pc, #208]	; (800b944 <xTaskResumeAll+0x11c>)
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3318      	adds	r3, #24
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fdc9 	bl	800a416 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3304      	adds	r3, #4
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fe fdc4 	bl	800a416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	2201      	movs	r2, #1
 800b894:	409a      	lsls	r2, r3
 800b896:	4b2c      	ldr	r3, [pc, #176]	; (800b948 <xTaskResumeAll+0x120>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	4a2a      	ldr	r2, [pc, #168]	; (800b948 <xTaskResumeAll+0x120>)
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4a27      	ldr	r2, [pc, #156]	; (800b94c <xTaskResumeAll+0x124>)
 800b8ae:	441a      	add	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fe fd50 	bl	800a35c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	4b23      	ldr	r3, [pc, #140]	; (800b950 <xTaskResumeAll+0x128>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d302      	bcc.n	800b8d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b8ca:	4b22      	ldr	r3, [pc, #136]	; (800b954 <xTaskResumeAll+0x12c>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8d0:	4b1c      	ldr	r3, [pc, #112]	; (800b944 <xTaskResumeAll+0x11c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1cc      	bne.n	800b872 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8de:	f000 fb2d 	bl	800bf3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b8e2:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <xTaskResumeAll+0x130>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d010      	beq.n	800b910 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8ee:	f000 f859 	bl	800b9a4 <xTaskIncrementTick>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b8f8:	4b16      	ldr	r3, [pc, #88]	; (800b954 <xTaskResumeAll+0x12c>)
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3b01      	subs	r3, #1
 800b902:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f1      	bne.n	800b8ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b90a:	4b13      	ldr	r3, [pc, #76]	; (800b958 <xTaskResumeAll+0x130>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b910:	4b10      	ldr	r3, [pc, #64]	; (800b954 <xTaskResumeAll+0x12c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d009      	beq.n	800b92c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b918:	2301      	movs	r3, #1
 800b91a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b91c:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <xTaskResumeAll+0x134>)
 800b91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b92c:	f000 feac 	bl	800c688 <vPortExitCritical>

	return xAlreadyYielded;
 800b930:	68bb      	ldr	r3, [r7, #8]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000043c 	.word	0x2000043c
 800b940:	20000414 	.word	0x20000414
 800b944:	200003d4 	.word	0x200003d4
 800b948:	2000041c 	.word	0x2000041c
 800b94c:	20000318 	.word	0x20000318
 800b950:	20000314 	.word	0x20000314
 800b954:	20000428 	.word	0x20000428
 800b958:	20000424 	.word	0x20000424
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <xTaskGetTickCount+0x1c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b96c:	687b      	ldr	r3, [r7, #4]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	20000418 	.word	0x20000418

0800b980 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b986:	f000 ff2d 	bl	800c7e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b98e:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <xTaskGetTickCountFromISR+0x20>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b994:	683b      	ldr	r3, [r7, #0]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000418 	.word	0x20000418

0800b9a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ae:	4b4e      	ldr	r3, [pc, #312]	; (800bae8 <xTaskIncrementTick+0x144>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f040 8087 	bne.w	800bac6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9b8:	4b4c      	ldr	r3, [pc, #304]	; (800baec <xTaskIncrementTick+0x148>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9c0:	4a4a      	ldr	r2, [pc, #296]	; (800baec <xTaskIncrementTick+0x148>)
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d11f      	bne.n	800ba0c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9cc:	4b48      	ldr	r3, [pc, #288]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d009      	beq.n	800b9ea <xTaskIncrementTick+0x46>
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	e7fe      	b.n	800b9e8 <xTaskIncrementTick+0x44>
 800b9ea:	4b41      	ldr	r3, [pc, #260]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	4b40      	ldr	r3, [pc, #256]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a3e      	ldr	r2, [pc, #248]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	4a3e      	ldr	r2, [pc, #248]	; (800baf4 <xTaskIncrementTick+0x150>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	4b3e      	ldr	r3, [pc, #248]	; (800baf8 <xTaskIncrementTick+0x154>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	4a3c      	ldr	r2, [pc, #240]	; (800baf8 <xTaskIncrementTick+0x154>)
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	f000 fa98 	bl	800bf3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba0c:	4b3b      	ldr	r3, [pc, #236]	; (800bafc <xTaskIncrementTick+0x158>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d348      	bcc.n	800baa8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba16:	4b36      	ldr	r3, [pc, #216]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d104      	bne.n	800ba2a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba20:	4b36      	ldr	r3, [pc, #216]	; (800bafc <xTaskIncrementTick+0x158>)
 800ba22:	f04f 32ff 	mov.w	r2, #4294967295
 800ba26:	601a      	str	r2, [r3, #0]
					break;
 800ba28:	e03e      	b.n	800baa8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2a:	4b31      	ldr	r3, [pc, #196]	; (800baf0 <xTaskIncrementTick+0x14c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d203      	bcs.n	800ba4a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba42:	4a2e      	ldr	r2, [pc, #184]	; (800bafc <xTaskIncrementTick+0x158>)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba48:	e02e      	b.n	800baa8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fce1 	bl	800a416 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3318      	adds	r3, #24
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fcd8 	bl	800a416 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	409a      	lsls	r2, r3
 800ba6e:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	4a22      	ldr	r2, [pc, #136]	; (800bb00 <xTaskIncrementTick+0x15c>)
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4a1f      	ldr	r2, [pc, #124]	; (800bb04 <xTaskIncrementTick+0x160>)
 800ba86:	441a      	add	r2, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	f7fe fc64 	bl	800a35c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba98:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <xTaskIncrementTick+0x164>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d3b9      	bcc.n	800ba16 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baa6:	e7b6      	b.n	800ba16 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800baa8:	4b17      	ldr	r3, [pc, #92]	; (800bb08 <xTaskIncrementTick+0x164>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baae:	4915      	ldr	r1, [pc, #84]	; (800bb04 <xTaskIncrementTick+0x160>)
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	440b      	add	r3, r1
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d907      	bls.n	800bad0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	e004      	b.n	800bad0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <xTaskIncrementTick+0x168>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	4a0f      	ldr	r2, [pc, #60]	; (800bb0c <xTaskIncrementTick+0x168>)
 800bace:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bad0:	4b0f      	ldr	r3, [pc, #60]	; (800bb10 <xTaskIncrementTick+0x16c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800bad8:	2301      	movs	r3, #1
 800bada:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800badc:	697b      	ldr	r3, [r7, #20]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	2000043c 	.word	0x2000043c
 800baec:	20000418 	.word	0x20000418
 800baf0:	200003cc 	.word	0x200003cc
 800baf4:	200003d0 	.word	0x200003d0
 800baf8:	2000042c 	.word	0x2000042c
 800bafc:	20000434 	.word	0x20000434
 800bb00:	2000041c 	.word	0x2000041c
 800bb04:	20000318 	.word	0x20000318
 800bb08:	20000314 	.word	0x20000314
 800bb0c:	20000424 	.word	0x20000424
 800bb10:	20000428 	.word	0x20000428

0800bb14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b087      	sub	sp, #28
 800bb18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb1a:	4b26      	ldr	r3, [pc, #152]	; (800bbb4 <vTaskSwitchContext+0xa0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb22:	4b25      	ldr	r3, [pc, #148]	; (800bbb8 <vTaskSwitchContext+0xa4>)
 800bb24:	2201      	movs	r2, #1
 800bb26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb28:	e03e      	b.n	800bba8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800bb2a:	4b23      	ldr	r3, [pc, #140]	; (800bbb8 <vTaskSwitchContext+0xa4>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb30:	4b22      	ldr	r3, [pc, #136]	; (800bbbc <vTaskSwitchContext+0xa8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	fab3 f383 	clz	r3, r3
 800bb3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb3e:	7afb      	ldrb	r3, [r7, #11]
 800bb40:	f1c3 031f 	rsb	r3, r3, #31
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	491e      	ldr	r1, [pc, #120]	; (800bbc0 <vTaskSwitchContext+0xac>)
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <vTaskSwitchContext+0x5a>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	607b      	str	r3, [r7, #4]
 800bb6c:	e7fe      	b.n	800bb6c <vTaskSwitchContext+0x58>
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4613      	mov	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4a11      	ldr	r2, [pc, #68]	; (800bbc0 <vTaskSwitchContext+0xac>)
 800bb7a:	4413      	add	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	605a      	str	r2, [r3, #4]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3308      	adds	r3, #8
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d104      	bne.n	800bb9e <vTaskSwitchContext+0x8a>
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	4a07      	ldr	r2, [pc, #28]	; (800bbc4 <vTaskSwitchContext+0xb0>)
 800bba6:	6013      	str	r3, [r2, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	371c      	adds	r7, #28
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	2000043c 	.word	0x2000043c
 800bbb8:	20000428 	.word	0x20000428
 800bbbc:	2000041c 	.word	0x2000041c
 800bbc0:	20000318 	.word	0x20000318
 800bbc4:	20000314 	.word	0x20000314

0800bbc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d109      	bne.n	800bbec <vTaskPlaceOnEventList+0x24>
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	e7fe      	b.n	800bbea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbec:	4b07      	ldr	r3, [pc, #28]	; (800bc0c <vTaskPlaceOnEventList+0x44>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3318      	adds	r3, #24
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7fe fbd5 	bl	800a3a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	6838      	ldr	r0, [r7, #0]
 800bbfe:	f000 fb8b 	bl	800c318 <prvAddCurrentTaskToDelayedList>
}
 800bc02:	bf00      	nop
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20000314 	.word	0x20000314

0800bc10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d109      	bne.n	800bc3a <xTaskRemoveFromEventList+0x2a>
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60fb      	str	r3, [r7, #12]
 800bc38:	e7fe      	b.n	800bc38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	3318      	adds	r3, #24
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe fbe9 	bl	800a416 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc44:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <xTaskRemoveFromEventList+0xac>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d11c      	bne.n	800bc86 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fbe0 	bl	800a416 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	409a      	lsls	r2, r3
 800bc5e:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <xTaskRemoveFromEventList+0xb0>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	4a16      	ldr	r2, [pc, #88]	; (800bcc0 <xTaskRemoveFromEventList+0xb0>)
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4a13      	ldr	r2, [pc, #76]	; (800bcc4 <xTaskRemoveFromEventList+0xb4>)
 800bc76:	441a      	add	r2, r3
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	4610      	mov	r0, r2
 800bc80:	f7fe fb6c 	bl	800a35c <vListInsertEnd>
 800bc84:	e005      	b.n	800bc92 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	3318      	adds	r3, #24
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	480e      	ldr	r0, [pc, #56]	; (800bcc8 <xTaskRemoveFromEventList+0xb8>)
 800bc8e:	f7fe fb65 	bl	800a35c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc96:	4b0d      	ldr	r3, [pc, #52]	; (800bccc <xTaskRemoveFromEventList+0xbc>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d905      	bls.n	800bcac <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bca4:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <xTaskRemoveFromEventList+0xc0>)
 800bca6:	2201      	movs	r2, #1
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	e001      	b.n	800bcb0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcb0:	697b      	ldr	r3, [r7, #20]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	2000043c 	.word	0x2000043c
 800bcc0:	2000041c 	.word	0x2000041c
 800bcc4:	20000318 	.word	0x20000318
 800bcc8:	200003d4 	.word	0x200003d4
 800bccc:	20000314 	.word	0x20000314
 800bcd0:	20000428 	.word	0x20000428

0800bcd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcdc:	4b06      	ldr	r3, [pc, #24]	; (800bcf8 <vTaskInternalSetTimeOutState+0x24>)
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <vTaskInternalSetTimeOutState+0x28>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	605a      	str	r2, [r3, #4]
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	2000042c 	.word	0x2000042c
 800bcfc:	20000418 	.word	0x20000418

0800bd00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d109      	bne.n	800bd24 <xTaskCheckForTimeOut+0x24>
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	e7fe      	b.n	800bd22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d109      	bne.n	800bd3e <xTaskCheckForTimeOut+0x3e>
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	e7fe      	b.n	800bd3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bd3e:	f000 fc75 	bl	800c62c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd42:	4b1d      	ldr	r3, [pc, #116]	; (800bdb8 <xTaskCheckForTimeOut+0xb8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	d102      	bne.n	800bd62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61fb      	str	r3, [r7, #28]
 800bd60:	e023      	b.n	800bdaa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <xTaskCheckForTimeOut+0xbc>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d007      	beq.n	800bd7e <xTaskCheckForTimeOut+0x7e>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d302      	bcc.n	800bd7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	61fb      	str	r3, [r7, #28]
 800bd7c:	e015      	b.n	800bdaa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d20b      	bcs.n	800bda0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	1ad2      	subs	r2, r2, r3
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ff9d 	bl	800bcd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	61fb      	str	r3, [r7, #28]
 800bd9e:	e004      	b.n	800bdaa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bda6:	2301      	movs	r3, #1
 800bda8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdaa:	f000 fc6d 	bl	800c688 <vPortExitCritical>

	return xReturn;
 800bdae:	69fb      	ldr	r3, [r7, #28]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3720      	adds	r7, #32
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20000418 	.word	0x20000418
 800bdbc:	2000042c 	.word	0x2000042c

0800bdc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdc4:	4b03      	ldr	r3, [pc, #12]	; (800bdd4 <vTaskMissedYield+0x14>)
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	601a      	str	r2, [r3, #0]
}
 800bdca:	bf00      	nop
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	20000428 	.word	0x20000428

0800bdd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bde0:	f000 f852 	bl	800be88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bde4:	4b06      	ldr	r3, [pc, #24]	; (800be00 <prvIdleTask+0x28>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d9f9      	bls.n	800bde0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdec:	4b05      	ldr	r3, [pc, #20]	; (800be04 <prvIdleTask+0x2c>)
 800bdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdfc:	e7f0      	b.n	800bde0 <prvIdleTask+0x8>
 800bdfe:	bf00      	nop
 800be00:	20000318 	.word	0x20000318
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be0e:	2300      	movs	r3, #0
 800be10:	607b      	str	r3, [r7, #4]
 800be12:	e00c      	b.n	800be2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	4613      	mov	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4a12      	ldr	r2, [pc, #72]	; (800be68 <prvInitialiseTaskLists+0x60>)
 800be20:	4413      	add	r3, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fa6d 	bl	800a302 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3301      	adds	r3, #1
 800be2c:	607b      	str	r3, [r7, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b06      	cmp	r3, #6
 800be32:	d9ef      	bls.n	800be14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be34:	480d      	ldr	r0, [pc, #52]	; (800be6c <prvInitialiseTaskLists+0x64>)
 800be36:	f7fe fa64 	bl	800a302 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be3a:	480d      	ldr	r0, [pc, #52]	; (800be70 <prvInitialiseTaskLists+0x68>)
 800be3c:	f7fe fa61 	bl	800a302 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be40:	480c      	ldr	r0, [pc, #48]	; (800be74 <prvInitialiseTaskLists+0x6c>)
 800be42:	f7fe fa5e 	bl	800a302 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be46:	480c      	ldr	r0, [pc, #48]	; (800be78 <prvInitialiseTaskLists+0x70>)
 800be48:	f7fe fa5b 	bl	800a302 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be4c:	480b      	ldr	r0, [pc, #44]	; (800be7c <prvInitialiseTaskLists+0x74>)
 800be4e:	f7fe fa58 	bl	800a302 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be52:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <prvInitialiseTaskLists+0x78>)
 800be54:	4a05      	ldr	r2, [pc, #20]	; (800be6c <prvInitialiseTaskLists+0x64>)
 800be56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <prvInitialiseTaskLists+0x7c>)
 800be5a:	4a05      	ldr	r2, [pc, #20]	; (800be70 <prvInitialiseTaskLists+0x68>)
 800be5c:	601a      	str	r2, [r3, #0]
}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20000318 	.word	0x20000318
 800be6c:	200003a4 	.word	0x200003a4
 800be70:	200003b8 	.word	0x200003b8
 800be74:	200003d4 	.word	0x200003d4
 800be78:	200003e8 	.word	0x200003e8
 800be7c:	20000400 	.word	0x20000400
 800be80:	200003cc 	.word	0x200003cc
 800be84:	200003d0 	.word	0x200003d0

0800be88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be8e:	e019      	b.n	800bec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be90:	f000 fbcc 	bl	800c62c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be94:	4b0f      	ldr	r3, [pc, #60]	; (800bed4 <prvCheckTasksWaitingTermination+0x4c>)
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3304      	adds	r3, #4
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe fab8 	bl	800a416 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bea6:	4b0c      	ldr	r3, [pc, #48]	; (800bed8 <prvCheckTasksWaitingTermination+0x50>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3b01      	subs	r3, #1
 800beac:	4a0a      	ldr	r2, [pc, #40]	; (800bed8 <prvCheckTasksWaitingTermination+0x50>)
 800beae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800beb0:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <prvCheckTasksWaitingTermination+0x54>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	4a09      	ldr	r2, [pc, #36]	; (800bedc <prvCheckTasksWaitingTermination+0x54>)
 800beb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800beba:	f000 fbe5 	bl	800c688 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f80e 	bl	800bee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <prvCheckTasksWaitingTermination+0x54>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e1      	bne.n	800be90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	200003e8 	.word	0x200003e8
 800bed8:	20000414 	.word	0x20000414
 800bedc:	200003fc 	.word	0x200003fc

0800bee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d108      	bne.n	800bf04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef6:	4618      	mov	r0, r3
 800bef8:	f000 fd74 	bl	800c9e4 <vPortFree>
				vPortFree( pxTCB );
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fd71 	bl	800c9e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf02:	e017      	b.n	800bf34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d103      	bne.n	800bf16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fd68 	bl	800c9e4 <vPortFree>
	}
 800bf14:	e00e      	b.n	800bf34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d009      	beq.n	800bf34 <prvDeleteTCB+0x54>
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	e7fe      	b.n	800bf32 <prvDeleteTCB+0x52>
	}
 800bf34:	bf00      	nop
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf42:	4b0c      	ldr	r3, [pc, #48]	; (800bf74 <prvResetNextTaskUnblockTime+0x38>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	; (800bf78 <prvResetNextTaskUnblockTime+0x3c>)
 800bf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf54:	e008      	b.n	800bf68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf56:	4b07      	ldr	r3, [pc, #28]	; (800bf74 <prvResetNextTaskUnblockTime+0x38>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	4a04      	ldr	r2, [pc, #16]	; (800bf78 <prvResetNextTaskUnblockTime+0x3c>)
 800bf66:	6013      	str	r3, [r2, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	200003cc 	.word	0x200003cc
 800bf78:	20000434 	.word	0x20000434

0800bf7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf82:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <xTaskGetSchedulerState+0x34>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d102      	bne.n	800bf90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	e008      	b.n	800bfa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf90:	4b08      	ldr	r3, [pc, #32]	; (800bfb4 <xTaskGetSchedulerState+0x38>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf98:	2302      	movs	r3, #2
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	e001      	b.n	800bfa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfa2:	687b      	ldr	r3, [r7, #4]
	}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	20000420 	.word	0x20000420
 800bfb4:	2000043c 	.word	0x2000043c

0800bfb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d069      	beq.n	800c0a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd2:	4b36      	ldr	r3, [pc, #216]	; (800c0ac <xTaskPriorityInherit+0xf4>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d259      	bcs.n	800c090 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	db06      	blt.n	800bff2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe4:	4b31      	ldr	r3, [pc, #196]	; (800c0ac <xTaskPriorityInherit+0xf4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	f1c3 0207 	rsb	r2, r3, #7
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	6959      	ldr	r1, [r3, #20]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4a2b      	ldr	r2, [pc, #172]	; (800c0b0 <xTaskPriorityInherit+0xf8>)
 800c004:	4413      	add	r3, r2
 800c006:	4299      	cmp	r1, r3
 800c008:	d13a      	bne.n	800c080 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	3304      	adds	r3, #4
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fa01 	bl	800a416 <uxListRemove>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d115      	bne.n	800c046 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01e:	4924      	ldr	r1, [pc, #144]	; (800c0b0 <xTaskPriorityInherit+0xf8>)
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10a      	bne.n	800c046 <xTaskPriorityInherit+0x8e>
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	2201      	movs	r2, #1
 800c036:	fa02 f303 	lsl.w	r3, r2, r3
 800c03a:	43da      	mvns	r2, r3
 800c03c:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <xTaskPriorityInherit+0xfc>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4013      	ands	r3, r2
 800c042:	4a1c      	ldr	r2, [pc, #112]	; (800c0b4 <xTaskPriorityInherit+0xfc>)
 800c044:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c046:	4b19      	ldr	r3, [pc, #100]	; (800c0ac <xTaskPriorityInherit+0xf4>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	2201      	movs	r2, #1
 800c056:	409a      	lsls	r2, r3
 800c058:	4b16      	ldr	r3, [pc, #88]	; (800c0b4 <xTaskPriorityInherit+0xfc>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	4a15      	ldr	r2, [pc, #84]	; (800c0b4 <xTaskPriorityInherit+0xfc>)
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c066:	4613      	mov	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4a10      	ldr	r2, [pc, #64]	; (800c0b0 <xTaskPriorityInherit+0xf8>)
 800c070:	441a      	add	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	3304      	adds	r3, #4
 800c076:	4619      	mov	r1, r3
 800c078:	4610      	mov	r0, r2
 800c07a:	f7fe f96f 	bl	800a35c <vListInsertEnd>
 800c07e:	e004      	b.n	800c08a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <xTaskPriorityInherit+0xf4>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c08a:	2301      	movs	r3, #1
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e008      	b.n	800c0a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c094:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <xTaskPriorityInherit+0xf4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d201      	bcs.n	800c0a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20000314 	.word	0x20000314
 800c0b0:	20000318 	.word	0x20000318
 800c0b4:	2000041c 	.word	0x2000041c

0800c0b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d06c      	beq.n	800c1a8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0ce:	4b39      	ldr	r3, [pc, #228]	; (800c1b4 <xTaskPriorityDisinherit+0xfc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d009      	beq.n	800c0ec <xTaskPriorityDisinherit+0x34>
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	e7fe      	b.n	800c0ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d109      	bne.n	800c108 <xTaskPriorityDisinherit+0x50>
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	60bb      	str	r3, [r7, #8]
 800c106:	e7fe      	b.n	800c106 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d044      	beq.n	800c1a8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c122:	2b00      	cmp	r3, #0
 800c124:	d140      	bne.n	800c1a8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	3304      	adds	r3, #4
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe f973 	bl	800a416 <uxListRemove>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d115      	bne.n	800c162 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13a:	491f      	ldr	r1, [pc, #124]	; (800c1b8 <xTaskPriorityDisinherit+0x100>)
 800c13c:	4613      	mov	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	440b      	add	r3, r1
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <xTaskPriorityDisinherit+0xaa>
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	2201      	movs	r2, #1
 800c152:	fa02 f303 	lsl.w	r3, r2, r3
 800c156:	43da      	mvns	r2, r3
 800c158:	4b18      	ldr	r3, [pc, #96]	; (800c1bc <xTaskPriorityDisinherit+0x104>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4013      	ands	r3, r2
 800c15e:	4a17      	ldr	r2, [pc, #92]	; (800c1bc <xTaskPriorityDisinherit+0x104>)
 800c160:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	f1c3 0207 	rsb	r2, r3, #7
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17a:	2201      	movs	r2, #1
 800c17c:	409a      	lsls	r2, r3
 800c17e:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <xTaskPriorityDisinherit+0x104>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4313      	orrs	r3, r2
 800c184:	4a0d      	ldr	r2, [pc, #52]	; (800c1bc <xTaskPriorityDisinherit+0x104>)
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4a08      	ldr	r2, [pc, #32]	; (800c1b8 <xTaskPriorityDisinherit+0x100>)
 800c196:	441a      	add	r2, r3
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	3304      	adds	r3, #4
 800c19c:	4619      	mov	r1, r3
 800c19e:	4610      	mov	r0, r2
 800c1a0:	f7fe f8dc 	bl	800a35c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1a8:	697b      	ldr	r3, [r7, #20]
	}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000314 	.word	0x20000314
 800c1b8:	20000318 	.word	0x20000318
 800c1bc:	2000041c 	.word	0x2000041c

0800c1c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 8081 	beq.w	800c2dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d109      	bne.n	800c1f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e7fe      	b.n	800c1f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d902      	bls.n	800c206 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	e002      	b.n	800c20c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c20a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	69fa      	ldr	r2, [r7, #28]
 800c212:	429a      	cmp	r2, r3
 800c214:	d062      	beq.n	800c2dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d15d      	bne.n	800c2dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c220:	4b30      	ldr	r3, [pc, #192]	; (800c2e4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	69ba      	ldr	r2, [r7, #24]
 800c226:	429a      	cmp	r2, r3
 800c228:	d109      	bne.n	800c23e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	60bb      	str	r3, [r7, #8]
 800c23c:	e7fe      	b.n	800c23c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c242:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	69fa      	ldr	r2, [r7, #28]
 800c248:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	db04      	blt.n	800c25c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	f1c3 0207 	rsb	r2, r3, #7
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	6959      	ldr	r1, [r3, #20]
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4a1f      	ldr	r2, [pc, #124]	; (800c2e8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c26c:	4413      	add	r3, r2
 800c26e:	4299      	cmp	r1, r3
 800c270:	d134      	bne.n	800c2dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	3304      	adds	r3, #4
 800c276:	4618      	mov	r0, r3
 800c278:	f7fe f8cd 	bl	800a416 <uxListRemove>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d115      	bne.n	800c2ae <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c286:	4918      	ldr	r1, [pc, #96]	; (800c2e8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	440b      	add	r3, r1
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29c:	2201      	movs	r2, #1
 800c29e:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a2:	43da      	mvns	r2, r3
 800c2a4:	4b11      	ldr	r3, [pc, #68]	; (800c2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	4a10      	ldr	r2, [pc, #64]	; (800c2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	409a      	lsls	r2, r3
 800c2b6:	4b0d      	ldr	r3, [pc, #52]	; (800c2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	4a0b      	ldr	r2, [pc, #44]	; (800c2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4a06      	ldr	r2, [pc, #24]	; (800c2e8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c2ce:	441a      	add	r2, r3
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	f7fe f840 	bl	800a35c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2dc:	bf00      	nop
 800c2de:	3720      	adds	r7, #32
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20000314 	.word	0x20000314
 800c2e8:	20000318 	.word	0x20000318
 800c2ec:	2000041c 	.word	0x2000041c

0800c2f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c2f4:	4b07      	ldr	r3, [pc, #28]	; (800c314 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d004      	beq.n	800c306 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c2fc:	4b05      	ldr	r3, [pc, #20]	; (800c314 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c302:	3201      	adds	r2, #1
 800c304:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c306:	4b03      	ldr	r3, [pc, #12]	; (800c314 <pvTaskIncrementMutexHeldCount+0x24>)
 800c308:	681b      	ldr	r3, [r3, #0]
	}
 800c30a:	4618      	mov	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	20000314 	.word	0x20000314

0800c318 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c322:	4b29      	ldr	r3, [pc, #164]	; (800c3c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c328:	4b28      	ldr	r3, [pc, #160]	; (800c3cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3304      	adds	r3, #4
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe f871 	bl	800a416 <uxListRemove>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10b      	bne.n	800c352 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c33a:	4b24      	ldr	r3, [pc, #144]	; (800c3cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c340:	2201      	movs	r2, #1
 800c342:	fa02 f303 	lsl.w	r3, r2, r3
 800c346:	43da      	mvns	r2, r3
 800c348:	4b21      	ldr	r3, [pc, #132]	; (800c3d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4013      	ands	r3, r2
 800c34e:	4a20      	ldr	r2, [pc, #128]	; (800c3d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c350:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c358:	d10a      	bne.n	800c370 <prvAddCurrentTaskToDelayedList+0x58>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d007      	beq.n	800c370 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c360:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3304      	adds	r3, #4
 800c366:	4619      	mov	r1, r3
 800c368:	481a      	ldr	r0, [pc, #104]	; (800c3d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c36a:	f7fd fff7 	bl	800a35c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c36e:	e026      	b.n	800c3be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4413      	add	r3, r2
 800c376:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c378:	4b14      	ldr	r3, [pc, #80]	; (800c3cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	429a      	cmp	r2, r3
 800c386:	d209      	bcs.n	800c39c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c388:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	3304      	adds	r3, #4
 800c392:	4619      	mov	r1, r3
 800c394:	4610      	mov	r0, r2
 800c396:	f7fe f805 	bl	800a3a4 <vListInsert>
}
 800c39a:	e010      	b.n	800c3be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c39c:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	f7fd fffb 	bl	800a3a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3ae:	4b0c      	ldr	r3, [pc, #48]	; (800c3e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d202      	bcs.n	800c3be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c3b8:	4a09      	ldr	r2, [pc, #36]	; (800c3e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	6013      	str	r3, [r2, #0]
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000418 	.word	0x20000418
 800c3cc:	20000314 	.word	0x20000314
 800c3d0:	2000041c 	.word	0x2000041c
 800c3d4:	20000400 	.word	0x20000400
 800c3d8:	200003d0 	.word	0x200003d0
 800c3dc:	200003cc 	.word	0x200003cc
 800c3e0:	20000434 	.word	0x20000434

0800c3e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3b04      	subs	r3, #4
 800c3f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3b04      	subs	r3, #4
 800c402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f023 0201 	bic.w	r2, r3, #1
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3b04      	subs	r3, #4
 800c412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c414:	4a0c      	ldr	r2, [pc, #48]	; (800c448 <pxPortInitialiseStack+0x64>)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3b14      	subs	r3, #20
 800c41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3b04      	subs	r3, #4
 800c42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f06f 0202 	mvn.w	r2, #2
 800c432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3b20      	subs	r3, #32
 800c438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c43a:	68fb      	ldr	r3, [r7, #12]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	0800c44d 	.word	0x0800c44d

0800c44c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <prvTaskExitError+0x50>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45e:	d009      	beq.n	800c474 <prvTaskExitError+0x28>
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	60fb      	str	r3, [r7, #12]
 800c472:	e7fe      	b.n	800c472 <prvTaskExitError+0x26>
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c486:	bf00      	nop
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0fc      	beq.n	800c488 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c48e:	bf00      	nop
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	20000024 	.word	0x20000024

0800c4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <pxCurrentTCBConst2>)
 800c4a2:	6819      	ldr	r1, [r3, #0]
 800c4a4:	6808      	ldr	r0, [r1, #0]
 800c4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	f380 8809 	msr	PSP, r0
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f380 8811 	msr	BASEPRI, r0
 800c4ba:	4770      	bx	lr
 800c4bc:	f3af 8000 	nop.w

0800c4c0 <pxCurrentTCBConst2>:
 800c4c0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop

0800c4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4c8:	4808      	ldr	r0, [pc, #32]	; (800c4ec <prvPortStartFirstTask+0x24>)
 800c4ca:	6800      	ldr	r0, [r0, #0]
 800c4cc:	6800      	ldr	r0, [r0, #0]
 800c4ce:	f380 8808 	msr	MSP, r0
 800c4d2:	f04f 0000 	mov.w	r0, #0
 800c4d6:	f380 8814 	msr	CONTROL, r0
 800c4da:	b662      	cpsie	i
 800c4dc:	b661      	cpsie	f
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	df00      	svc	0
 800c4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ea:	bf00      	nop
 800c4ec:	e000ed08 	.word	0xe000ed08

0800c4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4f6:	4b44      	ldr	r3, [pc, #272]	; (800c608 <xPortStartScheduler+0x118>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a44      	ldr	r2, [pc, #272]	; (800c60c <xPortStartScheduler+0x11c>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d109      	bne.n	800c514 <xPortStartScheduler+0x24>
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	613b      	str	r3, [r7, #16]
 800c512:	e7fe      	b.n	800c512 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c514:	4b3c      	ldr	r3, [pc, #240]	; (800c608 <xPortStartScheduler+0x118>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a3d      	ldr	r2, [pc, #244]	; (800c610 <xPortStartScheduler+0x120>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d109      	bne.n	800c532 <xPortStartScheduler+0x42>
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	e7fe      	b.n	800c530 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c532:	4b38      	ldr	r3, [pc, #224]	; (800c614 <xPortStartScheduler+0x124>)
 800c534:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	22ff      	movs	r2, #255	; 0xff
 800c542:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c54c:	78fb      	ldrb	r3, [r7, #3]
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c554:	b2da      	uxtb	r2, r3
 800c556:	4b30      	ldr	r3, [pc, #192]	; (800c618 <xPortStartScheduler+0x128>)
 800c558:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c55a:	4b30      	ldr	r3, [pc, #192]	; (800c61c <xPortStartScheduler+0x12c>)
 800c55c:	2207      	movs	r2, #7
 800c55e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c560:	e009      	b.n	800c576 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c562:	4b2e      	ldr	r3, [pc, #184]	; (800c61c <xPortStartScheduler+0x12c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3b01      	subs	r3, #1
 800c568:	4a2c      	ldr	r2, [pc, #176]	; (800c61c <xPortStartScheduler+0x12c>)
 800c56a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c56c:	78fb      	ldrb	r3, [r7, #3]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	b2db      	uxtb	r3, r3
 800c574:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c576:	78fb      	ldrb	r3, [r7, #3]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c57e:	2b80      	cmp	r3, #128	; 0x80
 800c580:	d0ef      	beq.n	800c562 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c582:	4b26      	ldr	r3, [pc, #152]	; (800c61c <xPortStartScheduler+0x12c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f1c3 0307 	rsb	r3, r3, #7
 800c58a:	2b04      	cmp	r3, #4
 800c58c:	d009      	beq.n	800c5a2 <xPortStartScheduler+0xb2>
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	60bb      	str	r3, [r7, #8]
 800c5a0:	e7fe      	b.n	800c5a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5a2:	4b1e      	ldr	r3, [pc, #120]	; (800c61c <xPortStartScheduler+0x12c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	021b      	lsls	r3, r3, #8
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <xPortStartScheduler+0x12c>)
 800c5aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5ac:	4b1b      	ldr	r3, [pc, #108]	; (800c61c <xPortStartScheduler+0x12c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5b4:	4a19      	ldr	r2, [pc, #100]	; (800c61c <xPortStartScheduler+0x12c>)
 800c5b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5c0:	4b17      	ldr	r3, [pc, #92]	; (800c620 <xPortStartScheduler+0x130>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a16      	ldr	r2, [pc, #88]	; (800c620 <xPortStartScheduler+0x130>)
 800c5c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5cc:	4b14      	ldr	r3, [pc, #80]	; (800c620 <xPortStartScheduler+0x130>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a13      	ldr	r2, [pc, #76]	; (800c620 <xPortStartScheduler+0x130>)
 800c5d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5d8:	f000 f8d6 	bl	800c788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5dc:	4b11      	ldr	r3, [pc, #68]	; (800c624 <xPortStartScheduler+0x134>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5e2:	f000 f8f5 	bl	800c7d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5e6:	4b10      	ldr	r3, [pc, #64]	; (800c628 <xPortStartScheduler+0x138>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a0f      	ldr	r2, [pc, #60]	; (800c628 <xPortStartScheduler+0x138>)
 800c5ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5f2:	f7ff ff69 	bl	800c4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5f6:	f7ff fa8d 	bl	800bb14 <vTaskSwitchContext>
	prvTaskExitError();
 800c5fa:	f7ff ff27 	bl	800c44c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3718      	adds	r7, #24
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	e000ed00 	.word	0xe000ed00
 800c60c:	410fc271 	.word	0x410fc271
 800c610:	410fc270 	.word	0x410fc270
 800c614:	e000e400 	.word	0xe000e400
 800c618:	20000440 	.word	0x20000440
 800c61c:	20000444 	.word	0x20000444
 800c620:	e000ed20 	.word	0xe000ed20
 800c624:	20000024 	.word	0x20000024
 800c628:	e000ef34 	.word	0xe000ef34

0800c62c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c644:	4b0e      	ldr	r3, [pc, #56]	; (800c680 <vPortEnterCritical+0x54>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3301      	adds	r3, #1
 800c64a:	4a0d      	ldr	r2, [pc, #52]	; (800c680 <vPortEnterCritical+0x54>)
 800c64c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c64e:	4b0c      	ldr	r3, [pc, #48]	; (800c680 <vPortEnterCritical+0x54>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d10e      	bne.n	800c674 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <vPortEnterCritical+0x58>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d009      	beq.n	800c674 <vPortEnterCritical+0x48>
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	603b      	str	r3, [r7, #0]
 800c672:	e7fe      	b.n	800c672 <vPortEnterCritical+0x46>
	}
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	20000024 	.word	0x20000024
 800c684:	e000ed04 	.word	0xe000ed04

0800c688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c68e:	4b11      	ldr	r3, [pc, #68]	; (800c6d4 <vPortExitCritical+0x4c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d109      	bne.n	800c6aa <vPortExitCritical+0x22>
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	607b      	str	r3, [r7, #4]
 800c6a8:	e7fe      	b.n	800c6a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c6aa:	4b0a      	ldr	r3, [pc, #40]	; (800c6d4 <vPortExitCritical+0x4c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <vPortExitCritical+0x4c>)
 800c6b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <vPortExitCritical+0x4c>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d104      	bne.n	800c6c6 <vPortExitCritical+0x3e>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000024 	.word	0x20000024
	...

0800c6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6e0:	f3ef 8009 	mrs	r0, PSP
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	4b15      	ldr	r3, [pc, #84]	; (800c740 <pxCurrentTCBConst>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	f01e 0f10 	tst.w	lr, #16
 800c6f0:	bf08      	it	eq
 800c6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	6010      	str	r0, [r2, #0]
 800c6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c704:	f380 8811 	msr	BASEPRI, r0
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f7ff fa00 	bl	800bb14 <vTaskSwitchContext>
 800c714:	f04f 0000 	mov.w	r0, #0
 800c718:	f380 8811 	msr	BASEPRI, r0
 800c71c:	bc09      	pop	{r0, r3}
 800c71e:	6819      	ldr	r1, [r3, #0]
 800c720:	6808      	ldr	r0, [r1, #0]
 800c722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c726:	f01e 0f10 	tst.w	lr, #16
 800c72a:	bf08      	it	eq
 800c72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c730:	f380 8809 	msr	PSP, r0
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	f3af 8000 	nop.w

0800c740 <pxCurrentTCBConst>:
 800c740:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop

0800c748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c760:	f7ff f920 	bl	800b9a4 <xTaskIncrementTick>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c76a:	4b06      	ldr	r3, [pc, #24]	; (800c784 <SysTick_Handler+0x3c>)
 800c76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	2300      	movs	r3, #0
 800c774:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	e000ed04 	.word	0xe000ed04

0800c788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c788:	b480      	push	{r7}
 800c78a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c78c:	4b0b      	ldr	r3, [pc, #44]	; (800c7bc <vPortSetupTimerInterrupt+0x34>)
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c792:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <vPortSetupTimerInterrupt+0x38>)
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <vPortSetupTimerInterrupt+0x3c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a0a      	ldr	r2, [pc, #40]	; (800c7c8 <vPortSetupTimerInterrupt+0x40>)
 800c79e:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a2:	099b      	lsrs	r3, r3, #6
 800c7a4:	4a09      	ldr	r2, [pc, #36]	; (800c7cc <vPortSetupTimerInterrupt+0x44>)
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7aa:	4b04      	ldr	r3, [pc, #16]	; (800c7bc <vPortSetupTimerInterrupt+0x34>)
 800c7ac:	2207      	movs	r2, #7
 800c7ae:	601a      	str	r2, [r3, #0]
}
 800c7b0:	bf00      	nop
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	e000e010 	.word	0xe000e010
 800c7c0:	e000e018 	.word	0xe000e018
 800c7c4:	20000000 	.word	0x20000000
 800c7c8:	10624dd3 	.word	0x10624dd3
 800c7cc:	e000e014 	.word	0xe000e014

0800c7d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7e0 <vPortEnableVFP+0x10>
 800c7d4:	6801      	ldr	r1, [r0, #0]
 800c7d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7da:	6001      	str	r1, [r0, #0]
 800c7dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7de:	bf00      	nop
 800c7e0:	e000ed88 	.word	0xe000ed88

0800c7e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7ea:	f3ef 8305 	mrs	r3, IPSR
 800c7ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b0f      	cmp	r3, #15
 800c7f4:	d913      	bls.n	800c81e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7f6:	4a16      	ldr	r2, [pc, #88]	; (800c850 <vPortValidateInterruptPriority+0x6c>)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c800:	4b14      	ldr	r3, [pc, #80]	; (800c854 <vPortValidateInterruptPriority+0x70>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	7afa      	ldrb	r2, [r7, #11]
 800c806:	429a      	cmp	r2, r3
 800c808:	d209      	bcs.n	800c81e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	607b      	str	r3, [r7, #4]
 800c81c:	e7fe      	b.n	800c81c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c81e:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <vPortValidateInterruptPriority+0x74>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c826:	4b0d      	ldr	r3, [pc, #52]	; (800c85c <vPortValidateInterruptPriority+0x78>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d909      	bls.n	800c842 <vPortValidateInterruptPriority+0x5e>
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	e7fe      	b.n	800c840 <vPortValidateInterruptPriority+0x5c>
	}
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e3f0 	.word	0xe000e3f0
 800c854:	20000440 	.word	0x20000440
 800c858:	e000ed0c 	.word	0xe000ed0c
 800c85c:	20000444 	.word	0x20000444

0800c860 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08a      	sub	sp, #40	; 0x28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c868:	2300      	movs	r3, #0
 800c86a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c86c:	f7fe ffce 	bl	800b80c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c870:	4b57      	ldr	r3, [pc, #348]	; (800c9d0 <pvPortMalloc+0x170>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c878:	f000 f90c 	bl	800ca94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c87c:	4b55      	ldr	r3, [pc, #340]	; (800c9d4 <pvPortMalloc+0x174>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4013      	ands	r3, r2
 800c884:	2b00      	cmp	r3, #0
 800c886:	f040 808c 	bne.w	800c9a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d01c      	beq.n	800c8ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c890:	2208      	movs	r2, #8
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4413      	add	r3, r2
 800c896:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f003 0307 	and.w	r3, r3, #7
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d013      	beq.n	800c8ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f023 0307 	bic.w	r3, r3, #7
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f003 0307 	and.w	r3, r3, #7
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d009      	beq.n	800c8ca <pvPortMalloc+0x6a>
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	e7fe      	b.n	800c8c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d068      	beq.n	800c9a2 <pvPortMalloc+0x142>
 800c8d0:	4b41      	ldr	r3, [pc, #260]	; (800c9d8 <pvPortMalloc+0x178>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d863      	bhi.n	800c9a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8da:	4b40      	ldr	r3, [pc, #256]	; (800c9dc <pvPortMalloc+0x17c>)
 800c8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8de:	4b3f      	ldr	r3, [pc, #252]	; (800c9dc <pvPortMalloc+0x17c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8e4:	e004      	b.n	800c8f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d903      	bls.n	800c902 <pvPortMalloc+0xa2>
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1f1      	bne.n	800c8e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c902:	4b33      	ldr	r3, [pc, #204]	; (800c9d0 <pvPortMalloc+0x170>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c908:	429a      	cmp	r2, r3
 800c90a:	d04a      	beq.n	800c9a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2208      	movs	r2, #8
 800c912:	4413      	add	r3, r2
 800c914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	1ad2      	subs	r2, r2, r3
 800c926:	2308      	movs	r3, #8
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d91e      	bls.n	800c96c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4413      	add	r3, r2
 800c934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f003 0307 	and.w	r3, r3, #7
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d009      	beq.n	800c954 <pvPortMalloc+0xf4>
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	613b      	str	r3, [r7, #16]
 800c952:	e7fe      	b.n	800c952 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1ad2      	subs	r2, r2, r3
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c966:	69b8      	ldr	r0, [r7, #24]
 800c968:	f000 f8f6 	bl	800cb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c96c:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <pvPortMalloc+0x178>)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <pvPortMalloc+0x178>)
 800c978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c97a:	4b17      	ldr	r3, [pc, #92]	; (800c9d8 <pvPortMalloc+0x178>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	4b18      	ldr	r3, [pc, #96]	; (800c9e0 <pvPortMalloc+0x180>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d203      	bcs.n	800c98e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c986:	4b14      	ldr	r3, [pc, #80]	; (800c9d8 <pvPortMalloc+0x178>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a15      	ldr	r2, [pc, #84]	; (800c9e0 <pvPortMalloc+0x180>)
 800c98c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <pvPortMalloc+0x174>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	431a      	orrs	r2, r3
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9a2:	f7fe ff41 	bl	800b828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	f003 0307 	and.w	r3, r3, #7
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d009      	beq.n	800c9c4 <pvPortMalloc+0x164>
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
 800c9c2:	e7fe      	b.n	800c9c2 <pvPortMalloc+0x162>
	return pvReturn;
 800c9c4:	69fb      	ldr	r3, [r7, #28]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3728      	adds	r7, #40	; 0x28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20004050 	.word	0x20004050
 800c9d4:	2000405c 	.word	0x2000405c
 800c9d8:	20004054 	.word	0x20004054
 800c9dc:	20004048 	.word	0x20004048
 800c9e0:	20004058 	.word	0x20004058

0800c9e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d046      	beq.n	800ca84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	425b      	negs	r3, r3
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	4b20      	ldr	r3, [pc, #128]	; (800ca8c <vPortFree+0xa8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <vPortFree+0x42>
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e7fe      	b.n	800ca24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d009      	beq.n	800ca42 <vPortFree+0x5e>
 800ca2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	60bb      	str	r3, [r7, #8]
 800ca40:	e7fe      	b.n	800ca40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	4b11      	ldr	r3, [pc, #68]	; (800ca8c <vPortFree+0xa8>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d019      	beq.n	800ca84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d115      	bne.n	800ca84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <vPortFree+0xa8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	43db      	mvns	r3, r3
 800ca62:	401a      	ands	r2, r3
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca68:	f7fe fed0 	bl	800b80c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <vPortFree+0xac>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4413      	add	r3, r2
 800ca76:	4a06      	ldr	r2, [pc, #24]	; (800ca90 <vPortFree+0xac>)
 800ca78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca7a:	6938      	ldr	r0, [r7, #16]
 800ca7c:	f000 f86c 	bl	800cb58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ca80:	f7fe fed2 	bl	800b828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca84:	bf00      	nop
 800ca86:	3718      	adds	r7, #24
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	2000405c 	.word	0x2000405c
 800ca90:	20004054 	.word	0x20004054

0800ca94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caa0:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <prvHeapInit+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00c      	beq.n	800cac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3307      	adds	r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	4a1f      	ldr	r2, [pc, #124]	; (800cb40 <prvHeapInit+0xac>)
 800cac4:	4413      	add	r3, r2
 800cac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cacc:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <prvHeapInit+0xb0>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <prvHeapInit+0xb0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cae0:	2208      	movs	r2, #8
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0307 	bic.w	r3, r3, #7
 800caee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <prvHeapInit+0xb4>)
 800caf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <prvHeapInit+0xb4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvHeapInit+0xb4>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <prvHeapInit+0xb8>)
 800cb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <prvHeapInit+0xbc>)
 800cb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <prvHeapInit+0xc0>)
 800cb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	20000448 	.word	0x20000448
 800cb44:	20004048 	.word	0x20004048
 800cb48:	20004050 	.word	0x20004050
 800cb4c:	20004058 	.word	0x20004058
 800cb50:	20004054 	.word	0x20004054
 800cb54:	2000405c 	.word	0x2000405c

0800cb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb60:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <prvInsertBlockIntoFreeList+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	e002      	b.n	800cb6c <prvInsertBlockIntoFreeList+0x14>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8f7      	bhi.n	800cb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d108      	bne.n	800cb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	441a      	add	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d118      	bne.n	800cbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d00d      	beq.n	800cbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e008      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e003      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d002      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20004048 	.word	0x20004048
 800cc08:	20004050 	.word	0x20004050

0800cc0c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f002 f96f 	bl	800ef04 <tcpip_send_msg_wait_sem>
 800cc26:	4603      	mov	r3, r0
 800cc28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cc2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d103      	bne.n	800cc3a <netconn_apimsg+0x2e>
    return apimsg->err;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc38:	e001      	b.n	800cc3e <netconn_apimsg+0x32>
  }
  return err;
 800cc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08a      	sub	sp, #40	; 0x28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	603a      	str	r2, [r7, #0]
 800cc52:	71fb      	strb	r3, [r7, #7]
 800cc54:	460b      	mov	r3, r1
 800cc56:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cc58:	79fb      	ldrb	r3, [r7, #7]
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 ff83 	bl	800db68 <netconn_alloc>
 800cc62:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d054      	beq.n	800cd14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cc6a:	79bb      	ldrb	r3, [r7, #6]
 800cc6c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cc72:	f107 030c 	add.w	r3, r7, #12
 800cc76:	4619      	mov	r1, r3
 800cc78:	4829      	ldr	r0, [pc, #164]	; (800cd20 <netconn_new_with_proto_and_callback+0xd8>)
 800cc7a:	f7ff ffc7 	bl	800cc0c <netconn_apimsg>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800cc84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d043      	beq.n	800cd14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d005      	beq.n	800cca0 <netconn_new_with_proto_and_callback+0x58>
 800cc94:	4b23      	ldr	r3, [pc, #140]	; (800cd24 <netconn_new_with_proto_and_callback+0xdc>)
 800cc96:	2289      	movs	r2, #137	; 0x89
 800cc98:	4923      	ldr	r1, [pc, #140]	; (800cd28 <netconn_new_with_proto_and_callback+0xe0>)
 800cc9a:	4824      	ldr	r0, [pc, #144]	; (800cd2c <netconn_new_with_proto_and_callback+0xe4>)
 800cc9c:	f00c f888 	bl	8018db0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	3310      	adds	r3, #16
 800cca4:	4618      	mov	r0, r3
 800cca6:	f00b ff03 	bl	8018ab0 <sys_mbox_valid>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <netconn_new_with_proto_and_callback+0x74>
 800ccb0:	4b1c      	ldr	r3, [pc, #112]	; (800cd24 <netconn_new_with_proto_and_callback+0xdc>)
 800ccb2:	228a      	movs	r2, #138	; 0x8a
 800ccb4:	491e      	ldr	r1, [pc, #120]	; (800cd30 <netconn_new_with_proto_and_callback+0xe8>)
 800ccb6:	481d      	ldr	r0, [pc, #116]	; (800cd2c <netconn_new_with_proto_and_callback+0xe4>)
 800ccb8:	f00c f87a 	bl	8018db0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	3314      	adds	r3, #20
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f00b fef5 	bl	8018ab0 <sys_mbox_valid>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d005      	beq.n	800ccd8 <netconn_new_with_proto_and_callback+0x90>
 800cccc:	4b15      	ldr	r3, [pc, #84]	; (800cd24 <netconn_new_with_proto_and_callback+0xdc>)
 800ccce:	228c      	movs	r2, #140	; 0x8c
 800ccd0:	4918      	ldr	r1, [pc, #96]	; (800cd34 <netconn_new_with_proto_and_callback+0xec>)
 800ccd2:	4816      	ldr	r0, [pc, #88]	; (800cd2c <netconn_new_with_proto_and_callback+0xe4>)
 800ccd4:	f00c f86c 	bl	8018db0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccda:	330c      	adds	r3, #12
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f00b ff78 	bl	8018bd2 <sys_sem_valid>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d105      	bne.n	800ccf4 <netconn_new_with_proto_and_callback+0xac>
 800cce8:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <netconn_new_with_proto_and_callback+0xdc>)
 800ccea:	228f      	movs	r2, #143	; 0x8f
 800ccec:	4912      	ldr	r1, [pc, #72]	; (800cd38 <netconn_new_with_proto_and_callback+0xf0>)
 800ccee:	480f      	ldr	r0, [pc, #60]	; (800cd2c <netconn_new_with_proto_and_callback+0xe4>)
 800ccf0:	f00c f85e 	bl	8018db0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf6:	330c      	adds	r3, #12
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f00b ff5d 	bl	8018bb8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	3310      	adds	r3, #16
 800cd02:	4618      	mov	r0, r3
 800cd04:	f00b fe38 	bl	8018978 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cd08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd0a:	2007      	movs	r0, #7
 800cd0c:	f002 fddc 	bl	800f8c8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e000      	b.n	800cd16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3728      	adds	r7, #40	; 0x28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	0800db11 	.word	0x0800db11
 800cd24:	08019c64 	.word	0x08019c64
 800cd28:	08019cbc 	.word	0x08019cbc
 800cd2c:	08019ce0 	.word	0x08019ce0
 800cd30:	08019d08 	.word	0x08019d08
 800cd34:	08019d20 	.word	0x08019d20
 800cd38:	08019d44 	.word	0x08019d44

0800cd3c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b088      	sub	sp, #32
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d101      	bne.n	800cd4e <netconn_delete+0x12>
    return ERR_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e016      	b.n	800cd7c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cd52:	2329      	movs	r3, #41	; 0x29
 800cd54:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4809      	ldr	r0, [pc, #36]	; (800cd84 <netconn_delete+0x48>)
 800cd5e:	f7ff ff55 	bl	800cc0c <netconn_apimsg>
 800cd62:	4603      	mov	r3, r0
 800cd64:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800cd66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <netconn_delete+0x38>
    return err;
 800cd6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd72:	e003      	b.n	800cd7c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 ff67 	bl	800dc48 <netconn_free>

  return ERR_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3720      	adds	r7, #32
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0800e0cd 	.word	0x0800e0cd

0800cd88 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08a      	sub	sp, #40	; 0x28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	4613      	mov	r3, r2
 800cd94:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d108      	bne.n	800cdae <netconn_bind+0x26>
 800cd9c:	4b11      	ldr	r3, [pc, #68]	; (800cde4 <netconn_bind+0x5c>)
 800cd9e:	22ff      	movs	r2, #255	; 0xff
 800cda0:	4911      	ldr	r1, [pc, #68]	; (800cde8 <netconn_bind+0x60>)
 800cda2:	4812      	ldr	r0, [pc, #72]	; (800cdec <netconn_bind+0x64>)
 800cda4:	f00c f804 	bl	8018db0 <iprintf>
 800cda8:	f06f 030f 	mvn.w	r3, #15
 800cdac:	e015      	b.n	800cdda <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d101      	bne.n	800cdb8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800cdb4:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <netconn_bind+0x68>)
 800cdb6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800cdc0:	88fb      	ldrh	r3, [r7, #6]
 800cdc2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800cdc4:	f107 0310 	add.w	r3, r7, #16
 800cdc8:	4619      	mov	r1, r3
 800cdca:	480a      	ldr	r0, [pc, #40]	; (800cdf4 <netconn_bind+0x6c>)
 800cdcc:	f7ff ff1e 	bl	800cc0c <netconn_apimsg>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800cdd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3728      	adds	r7, #40	; 0x28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	08019c64 	.word	0x08019c64
 800cde8:	08019dc0 	.word	0x08019dc0
 800cdec:	08019ce0 	.word	0x08019ce0
 800cdf0:	0801c6a8 	.word	0x0801c6a8
 800cdf4:	0800e2d1 	.word	0x0800e2d1

0800cdf8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d109      	bne.n	800ce1e <netconn_listen_with_backlog+0x26>
 800ce0a:	4b0d      	ldr	r3, [pc, #52]	; (800ce40 <netconn_listen_with_backlog+0x48>)
 800ce0c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce10:	490c      	ldr	r1, [pc, #48]	; (800ce44 <netconn_listen_with_backlog+0x4c>)
 800ce12:	480d      	ldr	r0, [pc, #52]	; (800ce48 <netconn_listen_with_backlog+0x50>)
 800ce14:	f00b ffcc 	bl	8018db0 <iprintf>
 800ce18:	f06f 030f 	mvn.w	r3, #15
 800ce1c:	e00b      	b.n	800ce36 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ce22:	f107 0308 	add.w	r3, r7, #8
 800ce26:	4619      	mov	r1, r3
 800ce28:	4808      	ldr	r0, [pc, #32]	; (800ce4c <netconn_listen_with_backlog+0x54>)
 800ce2a:	f7ff feef 	bl	800cc0c <netconn_apimsg>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800ce32:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3720      	adds	r7, #32
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	08019c64 	.word	0x08019c64
 800ce44:	08019e20 	.word	0x08019e20
 800ce48:	08019ce0 	.word	0x08019ce0
 800ce4c:	0800e391 	.word	0x0800e391

0800ce50 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d109      	bne.n	800ce74 <netconn_accept+0x24>
 800ce60:	4b34      	ldr	r3, [pc, #208]	; (800cf34 <netconn_accept+0xe4>)
 800ce62:	f240 128d 	movw	r2, #397	; 0x18d
 800ce66:	4934      	ldr	r1, [pc, #208]	; (800cf38 <netconn_accept+0xe8>)
 800ce68:	4834      	ldr	r0, [pc, #208]	; (800cf3c <netconn_accept+0xec>)
 800ce6a:	f00b ffa1 	bl	8018db0 <iprintf>
 800ce6e:	f06f 030f 	mvn.w	r3, #15
 800ce72:	e05b      	b.n	800cf2c <netconn_accept+0xdc>
  *new_conn = NULL;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2200      	movs	r2, #0
 800ce78:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d109      	bne.n	800ce94 <netconn_accept+0x44>
 800ce80:	4b2c      	ldr	r3, [pc, #176]	; (800cf34 <netconn_accept+0xe4>)
 800ce82:	f240 128f 	movw	r2, #399	; 0x18f
 800ce86:	492e      	ldr	r1, [pc, #184]	; (800cf40 <netconn_accept+0xf0>)
 800ce88:	482c      	ldr	r0, [pc, #176]	; (800cf3c <netconn_accept+0xec>)
 800ce8a:	f00b ff91 	bl	8018db0 <iprintf>
 800ce8e:	f06f 030f 	mvn.w	r3, #15
 800ce92:	e04b      	b.n	800cf2c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ce9a:	f113 0f0c 	cmn.w	r3, #12
 800ce9e:	da03      	bge.n	800cea8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cea6:	e041      	b.n	800cf2c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3314      	adds	r3, #20
 800ceac:	4618      	mov	r0, r3
 800ceae:	f00b fdff 	bl	8018ab0 <sys_mbox_valid>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <netconn_accept+0x6e>
    return ERR_CLSD;
 800ceb8:	f06f 030e 	mvn.w	r3, #14
 800cebc:	e036      	b.n	800cf2c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3314      	adds	r3, #20
 800cec2:	f107 010c 	add.w	r1, r7, #12
 800cec6:	2200      	movs	r2, #0
 800cec8:	4618      	mov	r0, r3
 800ceca:	f00b fd96 	bl	80189fa <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d005      	beq.n	800cee6 <netconn_accept+0x96>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cede:	2200      	movs	r2, #0
 800cee0:	2101      	movs	r1, #1
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4a16      	ldr	r2, [pc, #88]	; (800cf44 <netconn_accept+0xf4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d102      	bne.n	800cef4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800ceee:	f06f 030c 	mvn.w	r3, #12
 800cef2:	e01b      	b.n	800cf2c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d114      	bne.n	800cf24 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00e      	beq.n	800cf1e <netconn_accept+0xce>
 800cf00:	f00b fef2 	bl	8018ce8 <sys_arch_protect>
 800cf04:	6138      	str	r0, [r7, #16]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cf0c:	f113 0f0c 	cmn.w	r3, #12
 800cf10:	db02      	blt.n	800cf18 <netconn_accept+0xc8>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	22f1      	movs	r2, #241	; 0xf1
 800cf16:	721a      	strb	r2, [r3, #8]
 800cf18:	6938      	ldr	r0, [r7, #16]
 800cf1a:	f00b fef3 	bl	8018d04 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800cf1e:	f06f 030e 	mvn.w	r3, #14
 800cf22:	e003      	b.n	800cf2c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cf2a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	08019c64 	.word	0x08019c64
 800cf38:	08019e40 	.word	0x08019e40
 800cf3c:	08019ce0 	.word	0x08019ce0
 800cf40:	08019e60 	.word	0x08019e60
 800cf44:	200048ec 	.word	0x200048ec

0800cf48 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08a      	sub	sp, #40	; 0x28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d109      	bne.n	800cf70 <netconn_recv_data+0x28>
 800cf5c:	4b5c      	ldr	r3, [pc, #368]	; (800d0d0 <netconn_recv_data+0x188>)
 800cf5e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800cf62:	495c      	ldr	r1, [pc, #368]	; (800d0d4 <netconn_recv_data+0x18c>)
 800cf64:	485c      	ldr	r0, [pc, #368]	; (800d0d8 <netconn_recv_data+0x190>)
 800cf66:	f00b ff23 	bl	8018db0 <iprintf>
 800cf6a:	f06f 030f 	mvn.w	r3, #15
 800cf6e:	e0aa      	b.n	800d0c6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d109      	bne.n	800cf90 <netconn_recv_data+0x48>
 800cf7c:	4b54      	ldr	r3, [pc, #336]	; (800d0d0 <netconn_recv_data+0x188>)
 800cf7e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800cf82:	4956      	ldr	r1, [pc, #344]	; (800d0dc <netconn_recv_data+0x194>)
 800cf84:	4854      	ldr	r0, [pc, #336]	; (800d0d8 <netconn_recv_data+0x190>)
 800cf86:	f00b ff13 	bl	8018db0 <iprintf>
 800cf8a:	f06f 030f 	mvn.w	r3, #15
 800cf8e:	e09a      	b.n	800d0c6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf98:	2b10      	cmp	r3, #16
 800cf9a:	d115      	bne.n	800cfc8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	3310      	adds	r3, #16
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f00b fd85 	bl	8018ab0 <sys_mbox_valid>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10d      	bne.n	800cfc8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3314      	adds	r3, #20
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f00b fd7d 	bl	8018ab0 <sys_mbox_valid>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <netconn_recv_data+0x7a>
 800cfbc:	f06f 030a 	mvn.w	r3, #10
 800cfc0:	e081      	b.n	800d0c6 <netconn_recv_data+0x17e>
 800cfc2:	f06f 030e 	mvn.w	r3, #14
 800cfc6:	e07e      	b.n	800d0c6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3310      	adds	r3, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f00b fd6f 	bl	8018ab0 <sys_mbox_valid>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d109      	bne.n	800cfec <netconn_recv_data+0xa4>
 800cfd8:	4b3d      	ldr	r3, [pc, #244]	; (800d0d0 <netconn_recv_data+0x188>)
 800cfda:	f240 12f5 	movw	r2, #501	; 0x1f5
 800cfde:	4940      	ldr	r1, [pc, #256]	; (800d0e0 <netconn_recv_data+0x198>)
 800cfe0:	483d      	ldr	r0, [pc, #244]	; (800d0d8 <netconn_recv_data+0x190>)
 800cfe2:	f00b fee5 	bl	8018db0 <iprintf>
 800cfe6:	f06f 030a 	mvn.w	r3, #10
 800cfea:	e06c      	b.n	800d0c6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cff2:	f113 0f0c 	cmn.w	r3, #12
 800cff6:	da03      	bge.n	800d000 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cffe:	e062      	b.n	800d0c6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	3310      	adds	r3, #16
 800d004:	f107 0120 	add.w	r1, r7, #32
 800d008:	2200      	movs	r2, #0
 800d00a:	4618      	mov	r0, r3
 800d00c:	f00b fcf5 	bl	80189fa <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d018:	2b10      	cmp	r3, #16
 800d01a:	d138      	bne.n	800d08e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	891b      	ldrh	r3, [r3, #8]
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	e001      	b.n	800d032 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d02e:	2301      	movs	r3, #1
 800d030:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d032:	f107 030c 	add.w	r3, r7, #12
 800d036:	4619      	mov	r1, r3
 800d038:	482a      	ldr	r0, [pc, #168]	; (800d0e4 <netconn_recv_data+0x19c>)
 800d03a:	f7ff fde7 	bl	800cc0c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d120      	bne.n	800d086 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d005      	beq.n	800d058 <netconn_recv_data+0x110>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d050:	2200      	movs	r2, #0
 800d052:	2101      	movs	r1, #1
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10b      	bne.n	800d078 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <netconn_recv_data+0x12a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d070:	e029      	b.n	800d0c6 <netconn_recv_data+0x17e>
 800d072:	f06f 030d 	mvn.w	r3, #13
 800d076:	e026      	b.n	800d0c6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d078:	2101      	movs	r1, #1
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f926 	bl	800d2cc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d080:	f06f 030e 	mvn.w	r3, #14
 800d084:	e01f      	b.n	800d0c6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	891b      	ldrh	r3, [r3, #8]
 800d08a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d08c:	e00d      	b.n	800d0aa <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <netconn_recv_data+0x15a>
 800d094:	4b0e      	ldr	r3, [pc, #56]	; (800d0d0 <netconn_recv_data+0x188>)
 800d096:	f240 223e 	movw	r2, #574	; 0x23e
 800d09a:	4913      	ldr	r1, [pc, #76]	; (800d0e8 <netconn_recv_data+0x1a0>)
 800d09c:	480e      	ldr	r0, [pc, #56]	; (800d0d8 <netconn_recv_data+0x190>)
 800d09e:	f00b fe87 	bl	8018db0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	891b      	ldrh	r3, [r3, #8]
 800d0a8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d005      	beq.n	800d0be <netconn_recv_data+0x176>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d0be:	6a3a      	ldr	r2, [r7, #32]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3728      	adds	r7, #40	; 0x28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	08019c64 	.word	0x08019c64
 800d0d4:	08019e80 	.word	0x08019e80
 800d0d8:	08019ce0 	.word	0x08019ce0
 800d0dc:	08019ea0 	.word	0x08019ea0
 800d0e0:	08019ebc 	.word	0x08019ebc
 800d0e4:	0800e515 	.word	0x0800e515
 800d0e8:	08019edc 	.word	0x08019edc

0800d0ec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b086      	sub	sp, #24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d109      	bne.n	800d114 <netconn_recv+0x28>
 800d100:	4b31      	ldr	r3, [pc, #196]	; (800d1c8 <netconn_recv+0xdc>)
 800d102:	f44f 721d 	mov.w	r2, #628	; 0x274
 800d106:	4931      	ldr	r1, [pc, #196]	; (800d1cc <netconn_recv+0xe0>)
 800d108:	4831      	ldr	r0, [pc, #196]	; (800d1d0 <netconn_recv+0xe4>)
 800d10a:	f00b fe51 	bl	8018db0 <iprintf>
 800d10e:	f06f 030f 	mvn.w	r3, #15
 800d112:	e054      	b.n	800d1be <netconn_recv+0xd2>
  *new_buf = NULL;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2200      	movs	r2, #0
 800d118:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <netconn_recv+0x48>
 800d120:	4b29      	ldr	r3, [pc, #164]	; (800d1c8 <netconn_recv+0xdc>)
 800d122:	f240 2276 	movw	r2, #630	; 0x276
 800d126:	492b      	ldr	r1, [pc, #172]	; (800d1d4 <netconn_recv+0xe8>)
 800d128:	4829      	ldr	r0, [pc, #164]	; (800d1d0 <netconn_recv+0xe4>)
 800d12a:	f00b fe41 	bl	8018db0 <iprintf>
 800d12e:	f06f 030f 	mvn.w	r3, #15
 800d132:	e044      	b.n	800d1be <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d13c:	2b10      	cmp	r3, #16
 800d13e:	d139      	bne.n	800d1b4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d144:	2006      	movs	r0, #6
 800d146:	f002 fb49 	bl	800f7dc <memp_malloc>
 800d14a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d102      	bne.n	800d158 <netconn_recv+0x6c>
      return ERR_MEM;
 800d152:	f04f 33ff 	mov.w	r3, #4294967295
 800d156:	e032      	b.n	800d1be <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d158:	f107 030c 	add.w	r3, r7, #12
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff fef2 	bl	800cf48 <netconn_recv_data>
 800d164:	4603      	mov	r3, r0
 800d166:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d006      	beq.n	800d17e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d170:	6979      	ldr	r1, [r7, #20]
 800d172:	2006      	movs	r0, #6
 800d174:	f002 fba8 	bl	800f8c8 <memp_free>
      return err;
 800d178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d17c:	e01f      	b.n	800d1be <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <netconn_recv+0xa6>
 800d184:	4b10      	ldr	r3, [pc, #64]	; (800d1c8 <netconn_recv+0xdc>)
 800d186:	f240 228a 	movw	r2, #650	; 0x28a
 800d18a:	4913      	ldr	r1, [pc, #76]	; (800d1d8 <netconn_recv+0xec>)
 800d18c:	4810      	ldr	r0, [pc, #64]	; (800d1d0 <netconn_recv+0xe4>)
 800d18e:	f00b fe0f 	bl	8018db0 <iprintf>

    buf->p = p;
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e004      	b.n	800d1be <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff fec6 	bl	800cf48 <netconn_recv_data>
 800d1bc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	08019c64 	.word	0x08019c64
 800d1cc:	08019e80 	.word	0x08019e80
 800d1d0:	08019ce0 	.word	0x08019ce0
 800d1d4:	08019ea0 	.word	0x08019ea0
 800d1d8:	08019ee8 	.word	0x08019ee8

0800d1dc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b08a      	sub	sp, #40	; 0x28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
 800d1e8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d109      	bne.n	800d204 <netconn_write_partly+0x28>
 800d1f0:	4b31      	ldr	r3, [pc, #196]	; (800d2b8 <netconn_write_partly+0xdc>)
 800d1f2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d1f6:	4931      	ldr	r1, [pc, #196]	; (800d2bc <netconn_write_partly+0xe0>)
 800d1f8:	4831      	ldr	r0, [pc, #196]	; (800d2c0 <netconn_write_partly+0xe4>)
 800d1fa:	f00b fdd9 	bl	8018db0 <iprintf>
 800d1fe:	f06f 030f 	mvn.w	r3, #15
 800d202:	e054      	b.n	800d2ae <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d20c:	2b10      	cmp	r3, #16
 800d20e:	d009      	beq.n	800d224 <netconn_write_partly+0x48>
 800d210:	4b29      	ldr	r3, [pc, #164]	; (800d2b8 <netconn_write_partly+0xdc>)
 800d212:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d216:	492b      	ldr	r1, [pc, #172]	; (800d2c4 <netconn_write_partly+0xe8>)
 800d218:	4829      	ldr	r0, [pc, #164]	; (800d2c0 <netconn_write_partly+0xe4>)
 800d21a:	f00b fdc9 	bl	8018db0 <iprintf>
 800d21e:	f06f 0305 	mvn.w	r3, #5
 800d222:	e044      	b.n	800d2ae <netconn_write_partly+0xd2>
  if (size == 0) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <netconn_write_partly+0x52>
    return ERR_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	e03f      	b.n	800d2ae <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	7f1b      	ldrb	r3, [r3, #28]
 800d232:	f003 0302 	and.w	r3, r3, #2
 800d236:	2b00      	cmp	r3, #0
 800d238:	d104      	bne.n	800d244 <netconn_write_partly+0x68>
 800d23a:	78fb      	ldrb	r3, [r7, #3]
 800d23c:	f003 0304 	and.w	r3, r3, #4
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <netconn_write_partly+0x6c>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <netconn_write_partly+0x6e>
 800d248:	2300      	movs	r3, #0
 800d24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <netconn_write_partly+0x86>
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d102      	bne.n	800d262 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d25c:	f06f 0305 	mvn.w	r3, #5
 800d260:	e025      	b.n	800d2ae <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d26a:	78fb      	ldrb	r3, [r7, #3]
 800d26c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d274:	f107 0310 	add.w	r3, r7, #16
 800d278:	4619      	mov	r1, r3
 800d27a:	4813      	ldr	r0, [pc, #76]	; (800d2c8 <netconn_write_partly+0xec>)
 800d27c:	f7ff fcc6 	bl	800cc0c <netconn_apimsg>
 800d280:	4603      	mov	r3, r0
 800d282:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d286:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10d      	bne.n	800d2aa <netconn_write_partly+0xce>
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00a      	beq.n	800d2aa <netconn_write_partly+0xce>
    if (dontblock) {
 800d294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d003      	beq.n	800d2a4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d29c:	69fa      	ldr	r2, [r7, #28]
 800d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	e002      	b.n	800d2aa <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d2aa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3728      	adds	r7, #40	; 0x28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	08019c64 	.word	0x08019c64
 800d2bc:	08019f10 	.word	0x08019f10
 800d2c0:	08019ce0 	.word	0x08019ce0
 800d2c4:	08019f2c 	.word	0x08019f2c
 800d2c8:	0800e8f5 	.word	0x0800e8f5

0800d2cc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b088      	sub	sp, #32
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d109      	bne.n	800d2f2 <netconn_close_shutdown+0x26>
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <netconn_close_shutdown+0x50>)
 800d2e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d2e4:	490e      	ldr	r1, [pc, #56]	; (800d320 <netconn_close_shutdown+0x54>)
 800d2e6:	480f      	ldr	r0, [pc, #60]	; (800d324 <netconn_close_shutdown+0x58>)
 800d2e8:	f00b fd62 	bl	8018db0 <iprintf>
 800d2ec:	f06f 030f 	mvn.w	r3, #15
 800d2f0:	e00f      	b.n	800d312 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d2f6:	78fb      	ldrb	r3, [r7, #3]
 800d2f8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d2fa:	2329      	movs	r3, #41	; 0x29
 800d2fc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d2fe:	f107 0308 	add.w	r3, r7, #8
 800d302:	4619      	mov	r1, r3
 800d304:	4808      	ldr	r0, [pc, #32]	; (800d328 <netconn_close_shutdown+0x5c>)
 800d306:	f7ff fc81 	bl	800cc0c <netconn_apimsg>
 800d30a:	4603      	mov	r3, r0
 800d30c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d30e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3720      	adds	r7, #32
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	08019c64 	.word	0x08019c64
 800d320:	08019f50 	.word	0x08019f50
 800d324:	08019ce0 	.word	0x08019ce0
 800d328:	0800ea55 	.word	0x0800ea55

0800d32c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800d334:	2103      	movs	r1, #3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff ffc8 	bl	800d2cc <netconn_close_shutdown>
 800d33c:	4603      	mov	r3, r0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
	...

0800d348 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
 800d354:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d105      	bne.n	800d368 <recv_udp+0x20>
 800d35c:	4b34      	ldr	r3, [pc, #208]	; (800d430 <recv_udp+0xe8>)
 800d35e:	22b1      	movs	r2, #177	; 0xb1
 800d360:	4934      	ldr	r1, [pc, #208]	; (800d434 <recv_udp+0xec>)
 800d362:	4835      	ldr	r0, [pc, #212]	; (800d438 <recv_udp+0xf0>)
 800d364:	f00b fd24 	bl	8018db0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d105      	bne.n	800d37a <recv_udp+0x32>
 800d36e:	4b30      	ldr	r3, [pc, #192]	; (800d430 <recv_udp+0xe8>)
 800d370:	22b2      	movs	r2, #178	; 0xb2
 800d372:	4932      	ldr	r1, [pc, #200]	; (800d43c <recv_udp+0xf4>)
 800d374:	4830      	ldr	r0, [pc, #192]	; (800d438 <recv_udp+0xf0>)
 800d376:	f00b fd1b 	bl	8018db0 <iprintf>
  conn = (struct netconn *)arg;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d103      	bne.n	800d38c <recv_udp+0x44>
    pbuf_free(p);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f003 f837 	bl	80103f8 <pbuf_free>
    return;
 800d38a:	e04d      	b.n	800d428 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	429a      	cmp	r2, r3
 800d394:	d005      	beq.n	800d3a2 <recv_udp+0x5a>
 800d396:	4b26      	ldr	r3, [pc, #152]	; (800d430 <recv_udp+0xe8>)
 800d398:	22ba      	movs	r2, #186	; 0xba
 800d39a:	4929      	ldr	r1, [pc, #164]	; (800d440 <recv_udp+0xf8>)
 800d39c:	4826      	ldr	r0, [pc, #152]	; (800d438 <recv_udp+0xf0>)
 800d39e:	f00b fd07 	bl	8018db0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	3310      	adds	r3, #16
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f00b fb82 	bl	8018ab0 <sys_mbox_valid>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d103      	bne.n	800d3ba <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f003 f820 	bl	80103f8 <pbuf_free>
    return;
 800d3b8:	e036      	b.n	800d428 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d3ba:	2006      	movs	r0, #6
 800d3bc:	f002 fa0e 	bl	800f7dc <memp_malloc>
 800d3c0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d103      	bne.n	800d3d0 <recv_udp+0x88>
    pbuf_free(p);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f003 f815 	bl	80103f8 <pbuf_free>
    return;
 800d3ce:	e02b      	b.n	800d428 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d002      	beq.n	800d3e8 <recv_udp+0xa0>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	e000      	b.n	800d3ea <recv_udp+0xa2>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d3f2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	891b      	ldrh	r3, [r3, #8]
 800d3f8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	3310      	adds	r3, #16
 800d3fe:	69b9      	ldr	r1, [r7, #24]
 800d400:	4618      	mov	r0, r3
 800d402:	f00b fae0 	bl	80189c6 <sys_mbox_trypost>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d003      	beq.n	800d414 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d40c:	69b8      	ldr	r0, [r7, #24]
 800d40e:	f001 fbc9 	bl	800eba4 <netbuf_delete>
    return;
 800d412:	e009      	b.n	800d428 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <recv_udp+0xe0>
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d420:	8afa      	ldrh	r2, [r7, #22]
 800d422:	2100      	movs	r1, #0
 800d424:	69f8      	ldr	r0, [r7, #28]
 800d426:	4798      	blx	r3
  }
}
 800d428:	3720      	adds	r7, #32
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	08019f6c 	.word	0x08019f6c
 800d434:	08019fc4 	.word	0x08019fc4
 800d438:	08019fe8 	.word	0x08019fe8
 800d43c:	0801a010 	.word	0x0801a010
 800d440:	0801a030 	.word	0x0801a030

0800d444 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b088      	sub	sp, #32
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d105      	bne.n	800d464 <recv_tcp+0x20>
 800d458:	4b39      	ldr	r3, [pc, #228]	; (800d540 <recv_tcp+0xfc>)
 800d45a:	22f9      	movs	r2, #249	; 0xf9
 800d45c:	4939      	ldr	r1, [pc, #228]	; (800d544 <recv_tcp+0x100>)
 800d45e:	483a      	ldr	r0, [pc, #232]	; (800d548 <recv_tcp+0x104>)
 800d460:	f00b fca6 	bl	8018db0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d105      	bne.n	800d476 <recv_tcp+0x32>
 800d46a:	4b35      	ldr	r3, [pc, #212]	; (800d540 <recv_tcp+0xfc>)
 800d46c:	22fa      	movs	r2, #250	; 0xfa
 800d46e:	4937      	ldr	r1, [pc, #220]	; (800d54c <recv_tcp+0x108>)
 800d470:	4835      	ldr	r0, [pc, #212]	; (800d548 <recv_tcp+0x104>)
 800d472:	f00b fc9d 	bl	8018db0 <iprintf>
  conn = (struct netconn *)arg;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d102      	bne.n	800d486 <recv_tcp+0x42>
    return ERR_VAL;
 800d480:	f06f 0305 	mvn.w	r3, #5
 800d484:	e057      	b.n	800d536 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d006      	beq.n	800d49e <recv_tcp+0x5a>
 800d490:	4b2b      	ldr	r3, [pc, #172]	; (800d540 <recv_tcp+0xfc>)
 800d492:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d496:	492e      	ldr	r1, [pc, #184]	; (800d550 <recv_tcp+0x10c>)
 800d498:	482b      	ldr	r0, [pc, #172]	; (800d548 <recv_tcp+0x104>)
 800d49a:	f00b fc89 	bl	8018db0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	3310      	adds	r3, #16
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f00b fb04 	bl	8018ab0 <sys_mbox_valid>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10d      	bne.n	800d4ca <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d008      	beq.n	800d4c6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	891b      	ldrh	r3, [r3, #8]
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	68b8      	ldr	r0, [r7, #8]
 800d4bc:	f003 fe76 	bl	80111ac <tcp_recved>
      pbuf_free(p);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f002 ff99 	bl	80103f8 <pbuf_free>
    }
    return ERR_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	e035      	b.n	800d536 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800d4ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d011      	beq.n	800d4f6 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00e      	beq.n	800d4f6 <recv_tcp+0xb2>
 800d4d8:	f00b fc06 	bl	8018ce8 <sys_arch_protect>
 800d4dc:	6178      	str	r0, [r7, #20]
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d4e4:	f113 0f0c 	cmn.w	r3, #12
 800d4e8:	db02      	blt.n	800d4f0 <recv_tcp+0xac>
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	78fa      	ldrb	r2, [r7, #3]
 800d4ee:	721a      	strb	r2, [r3, #8]
 800d4f0:	6978      	ldr	r0, [r7, #20]
 800d4f2:	f00b fc07 	bl	8018d04 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d003      	beq.n	800d504 <recv_tcp+0xc0>
    len = p->tot_len;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	891b      	ldrh	r3, [r3, #8]
 800d500:	83fb      	strh	r3, [r7, #30]
 800d502:	e001      	b.n	800d508 <recv_tcp+0xc4>
  } else {
    len = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	3310      	adds	r3, #16
 800d50c:	6879      	ldr	r1, [r7, #4]
 800d50e:	4618      	mov	r0, r3
 800d510:	f00b fa59 	bl	80189c6 <sys_mbox_trypost>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d002      	beq.n	800d520 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d51a:	f04f 33ff 	mov.w	r3, #4294967295
 800d51e:	e00a      	b.n	800d536 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <recv_tcp+0xf0>
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52c:	8bfa      	ldrh	r2, [r7, #30]
 800d52e:	2100      	movs	r1, #0
 800d530:	69b8      	ldr	r0, [r7, #24]
 800d532:	4798      	blx	r3
  }

  return ERR_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3720      	adds	r7, #32
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	08019f6c 	.word	0x08019f6c
 800d544:	0801a050 	.word	0x0801a050
 800d548:	08019fe8 	.word	0x08019fe8
 800d54c:	0801a074 	.word	0x0801a074
 800d550:	0801a094 	.word	0x0801a094

0800d554 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <poll_tcp+0x22>
 800d568:	4b29      	ldr	r3, [pc, #164]	; (800d610 <poll_tcp+0xbc>)
 800d56a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d56e:	4929      	ldr	r1, [pc, #164]	; (800d614 <poll_tcp+0xc0>)
 800d570:	4829      	ldr	r0, [pc, #164]	; (800d618 <poll_tcp+0xc4>)
 800d572:	f00b fc1d 	bl	8018db0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	785b      	ldrb	r3, [r3, #1]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d104      	bne.n	800d588 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d57e:	2101      	movs	r1, #1
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f001 f813 	bl	800e5ac <lwip_netconn_do_writemore>
 800d586:	e016      	b.n	800d5b6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	785b      	ldrb	r3, [r3, #1]
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d112      	bne.n	800d5b6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <poll_tcp+0x5a>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59c:	7a5b      	ldrb	r3, [r3, #9]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a6:	7a5a      	ldrb	r2, [r3, #9]
 800d5a8:	3a01      	subs	r2, #1
 800d5aa:	b2d2      	uxtb	r2, r2
 800d5ac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 fc13 	bl	800dddc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	7f1b      	ldrb	r3, [r3, #28]
 800d5ba:	f003 0310 	and.w	r3, r3, #16
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d021      	beq.n	800d606 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d01d      	beq.n	800d606 <poll_tcp+0xb2>
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5d2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d5d6:	d316      	bcc.n	800d606 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5e0:	2b04      	cmp	r3, #4
 800d5e2:	d810      	bhi.n	800d606 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	7f1b      	ldrb	r3, [r3, #28]
 800d5e8:	f023 0310 	bic.w	r3, r3, #16
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d005      	beq.n	800d606 <poll_tcp+0xb2>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fe:	2200      	movs	r2, #0
 800d600:	2102      	movs	r1, #2
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	08019f6c 	.word	0x08019f6c
 800d614:	0801a0b4 	.word	0x0801a0b4
 800d618:	08019fe8 	.word	0x08019fe8

0800d61c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	4613      	mov	r3, r2
 800d628:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d106      	bne.n	800d642 <sent_tcp+0x26>
 800d634:	4b20      	ldr	r3, [pc, #128]	; (800d6b8 <sent_tcp+0x9c>)
 800d636:	f240 1261 	movw	r2, #353	; 0x161
 800d63a:	4920      	ldr	r1, [pc, #128]	; (800d6bc <sent_tcp+0xa0>)
 800d63c:	4820      	ldr	r0, [pc, #128]	; (800d6c0 <sent_tcp+0xa4>)
 800d63e:	f00b fbb7 	bl	8018db0 <iprintf>

  if (conn) {
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d032      	beq.n	800d6ae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	785b      	ldrb	r3, [r3, #1]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d104      	bne.n	800d65a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d650:	2101      	movs	r1, #1
 800d652:	6978      	ldr	r0, [r7, #20]
 800d654:	f000 ffaa 	bl	800e5ac <lwip_netconn_do_writemore>
 800d658:	e007      	b.n	800d66a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	785b      	ldrb	r3, [r3, #1]
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d103      	bne.n	800d66a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d662:	2101      	movs	r1, #1
 800d664:	6978      	ldr	r0, [r7, #20]
 800d666:	f000 fbb9 	bl	800dddc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d01d      	beq.n	800d6ae <sent_tcp+0x92>
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d67a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d67e:	d316      	bcc.n	800d6ae <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d688:	2b04      	cmp	r3, #4
 800d68a:	d810      	bhi.n	800d6ae <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	7f1b      	ldrb	r3, [r3, #28]
 800d690:	f023 0310 	bic.w	r3, r3, #16
 800d694:	b2da      	uxtb	r2, r3
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <sent_tcp+0x92>
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a6:	88fa      	ldrh	r2, [r7, #6]
 800d6a8:	2102      	movs	r1, #2
 800d6aa:	6978      	ldr	r0, [r7, #20]
 800d6ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	08019f6c 	.word	0x08019f6c
 800d6bc:	0801a0b4 	.word	0x0801a0b4
 800d6c0:	08019fe8 	.word	0x08019fe8

0800d6c4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08a      	sub	sp, #40	; 0x28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <err_tcp+0x24>
 800d6da:	4b6c      	ldr	r3, [pc, #432]	; (800d88c <err_tcp+0x1c8>)
 800d6dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d6e0:	496b      	ldr	r1, [pc, #428]	; (800d890 <err_tcp+0x1cc>)
 800d6e2:	486c      	ldr	r0, [pc, #432]	; (800d894 <err_tcp+0x1d0>)
 800d6e4:	f00b fb64 	bl	8018db0 <iprintf>

  conn->pcb.tcp = NULL;
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	785b      	ldrb	r3, [r3, #1]
 800d6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800d6fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d700:	2b04      	cmp	r3, #4
 800d702:	d114      	bne.n	800d72e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d018      	beq.n	800d740 <err_tcp+0x7c>
 800d70e:	f00b faeb 	bl	8018ce8 <sys_arch_protect>
 800d712:	61b8      	str	r0, [r7, #24]
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d71a:	f113 0f0c 	cmn.w	r3, #12
 800d71e:	db02      	blt.n	800d726 <err_tcp+0x62>
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	2200      	movs	r2, #0
 800d724:	721a      	strb	r2, [r3, #8]
 800d726:	69b8      	ldr	r0, [r7, #24]
 800d728:	f00b faec 	bl	8018d04 <sys_arch_unprotect>
 800d72c:	e008      	b.n	800d740 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800d72e:	f00b fadb 	bl	8018ce8 <sys_arch_protect>
 800d732:	61f8      	str	r0, [r7, #28]
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	78fa      	ldrb	r2, [r7, #3]
 800d738:	721a      	strb	r2, [r3, #8]
 800d73a:	69f8      	ldr	r0, [r7, #28]
 800d73c:	f00b fae2 	bl	8018d04 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d744:	2b00      	cmp	r3, #0
 800d746:	d005      	beq.n	800d754 <err_tcp+0x90>
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74c:	2200      	movs	r2, #0
 800d74e:	2104      	movs	r1, #4
 800d750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d752:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d005      	beq.n	800d768 <err_tcp+0xa4>
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d760:	2200      	movs	r2, #0
 800d762:	2100      	movs	r1, #0
 800d764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d766:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d005      	beq.n	800d77c <err_tcp+0xb8>
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d774:	2200      	movs	r2, #0
 800d776:	2102      	movs	r1, #2
 800d778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	3310      	adds	r3, #16
 800d780:	4618      	mov	r0, r3
 800d782:	f00b f995 	bl	8018ab0 <sys_mbox_valid>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	3310      	adds	r3, #16
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f00b f917 	bl	80189c6 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	3314      	adds	r3, #20
 800d79c:	4618      	mov	r0, r3
 800d79e:	f00b f987 	bl	8018ab0 <sys_mbox_valid>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d005      	beq.n	800d7b4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	3314      	adds	r3, #20
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f00b f909 	bl	80189c6 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d7b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d007      	beq.n	800d7cc <err_tcp+0x108>
 800d7bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7c0:	2b04      	cmp	r3, #4
 800d7c2:	d003      	beq.n	800d7cc <err_tcp+0x108>
 800d7c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d14d      	bne.n	800d868 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	7f1b      	ldrb	r3, [r3, #28]
 800d7d0:	f003 0304 	and.w	r3, r3, #4
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf14      	ite	ne
 800d7d8:	2301      	movne	r3, #1
 800d7da:	2300      	moveq	r3, #0
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	7f1b      	ldrb	r3, [r3, #28]
 800d7e4:	f023 0304 	bic.w	r3, r3, #4
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d145      	bne.n	800d880 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <err_tcp+0x146>
 800d7fc:	4b23      	ldr	r3, [pc, #140]	; (800d88c <err_tcp+0x1c8>)
 800d7fe:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d802:	4925      	ldr	r1, [pc, #148]	; (800d898 <err_tcp+0x1d4>)
 800d804:	4823      	ldr	r0, [pc, #140]	; (800d894 <err_tcp+0x1d0>)
 800d806:	f00b fad3 	bl	8018db0 <iprintf>
      conn->current_msg->err = err;
 800d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80e:	78fa      	ldrb	r2, [r7, #3]
 800d810:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	330c      	adds	r3, #12
 800d81a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d81c:	6938      	ldr	r0, [r7, #16]
 800d81e:	f00b f9d8 	bl	8018bd2 <sys_sem_valid>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <err_tcp+0x172>
 800d828:	4b18      	ldr	r3, [pc, #96]	; (800d88c <err_tcp+0x1c8>)
 800d82a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d82e:	491b      	ldr	r1, [pc, #108]	; (800d89c <err_tcp+0x1d8>)
 800d830:	4818      	ldr	r0, [pc, #96]	; (800d894 <err_tcp+0x1d0>)
 800d832:	f00b fabd 	bl	8018db0 <iprintf>
      conn->current_msg = NULL;
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	2200      	movs	r2, #0
 800d83a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00e      	beq.n	800d860 <err_tcp+0x19c>
 800d842:	f00b fa51 	bl	8018ce8 <sys_arch_protect>
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d84e:	f113 0f0c 	cmn.w	r3, #12
 800d852:	db02      	blt.n	800d85a <err_tcp+0x196>
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	78fa      	ldrb	r2, [r7, #3]
 800d858:	721a      	strb	r2, [r3, #8]
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f00b fa52 	bl	8018d04 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800d860:	6938      	ldr	r0, [r7, #16]
 800d862:	f00b f99c 	bl	8018b9e <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d866:	e00b      	b.n	800d880 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d008      	beq.n	800d882 <err_tcp+0x1be>
 800d870:	4b06      	ldr	r3, [pc, #24]	; (800d88c <err_tcp+0x1c8>)
 800d872:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d876:	490a      	ldr	r1, [pc, #40]	; (800d8a0 <err_tcp+0x1dc>)
 800d878:	4806      	ldr	r0, [pc, #24]	; (800d894 <err_tcp+0x1d0>)
 800d87a:	f00b fa99 	bl	8018db0 <iprintf>
  }
}
 800d87e:	e000      	b.n	800d882 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800d880:	bf00      	nop
}
 800d882:	bf00      	nop
 800d884:	3728      	adds	r7, #40	; 0x28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08019f6c 	.word	0x08019f6c
 800d890:	0801a0b4 	.word	0x0801a0b4
 800d894:	08019fe8 	.word	0x08019fe8
 800d898:	0801a0c4 	.word	0x0801a0c4
 800d89c:	0801a0e0 	.word	0x0801a0e0
 800d8a0:	0801a0fc 	.word	0x0801a0fc

0800d8a4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d8b2:	6879      	ldr	r1, [r7, #4]
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f004 fa5b 	bl	8011d70 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d8ba:	490a      	ldr	r1, [pc, #40]	; (800d8e4 <setup_tcp+0x40>)
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f004 fa69 	bl	8011d94 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d8c2:	4909      	ldr	r1, [pc, #36]	; (800d8e8 <setup_tcp+0x44>)
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f004 fa87 	bl	8011dd8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	4907      	ldr	r1, [pc, #28]	; (800d8ec <setup_tcp+0x48>)
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f004 fadc 	bl	8011e8c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d8d4:	4906      	ldr	r1, [pc, #24]	; (800d8f0 <setup_tcp+0x4c>)
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f004 fa9e 	bl	8011e18 <tcp_err>
}
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	0800d445 	.word	0x0800d445
 800d8e8:	0800d61d 	.word	0x0800d61d
 800d8ec:	0800d555 	.word	0x0800d555
 800d8f0:	0800d6c5 	.word	0x0800d6c5

0800d8f4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4613      	mov	r3, r2
 800d900:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d102      	bne.n	800d912 <accept_function+0x1e>
    return ERR_VAL;
 800d90c:	f06f 0305 	mvn.w	r3, #5
 800d910:	e08d      	b.n	800da2e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	3314      	adds	r3, #20
 800d916:	4618      	mov	r0, r3
 800d918:	f00b f8ca 	bl	8018ab0 <sys_mbox_valid>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d922:	f06f 0305 	mvn.w	r3, #5
 800d926:	e082      	b.n	800da2e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d115      	bne.n	800d95a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	3314      	adds	r3, #20
 800d932:	4941      	ldr	r1, [pc, #260]	; (800da38 <accept_function+0x144>)
 800d934:	4618      	mov	r0, r3
 800d936:	f00b f846 	bl	80189c6 <sys_mbox_trypost>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d109      	bne.n	800d954 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d944:	2b00      	cmp	r3, #0
 800d946:	d005      	beq.n	800d954 <accept_function+0x60>
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94c:	2200      	movs	r2, #0
 800d94e:	2100      	movs	r1, #0
 800d950:	69f8      	ldr	r0, [r7, #28]
 800d952:	4798      	blx	r3
    }
    return ERR_VAL;
 800d954:	f06f 0305 	mvn.w	r3, #5
 800d958:	e069      	b.n	800da2e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	781a      	ldrb	r2, [r3, #0]
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d962:	4619      	mov	r1, r3
 800d964:	4610      	mov	r0, r2
 800d966:	f000 f8ff 	bl	800db68 <netconn_alloc>
 800d96a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d115      	bne.n	800d99e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	3314      	adds	r3, #20
 800d976:	4930      	ldr	r1, [pc, #192]	; (800da38 <accept_function+0x144>)
 800d978:	4618      	mov	r0, r3
 800d97a:	f00b f824 	bl	80189c6 <sys_mbox_trypost>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <accept_function+0xa4>
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d990:	2200      	movs	r2, #0
 800d992:	2100      	movs	r1, #0
 800d994:	69f8      	ldr	r0, [r7, #28]
 800d996:	4798      	blx	r3
    }
    return ERR_MEM;
 800d998:	f04f 33ff 	mov.w	r3, #4294967295
 800d99c:	e047      	b.n	800da2e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d9a4:	69b8      	ldr	r0, [r7, #24]
 800d9a6:	f7ff ff7d 	bl	800d8a4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	79fa      	ldrb	r2, [r7, #7]
 800d9ae:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	3314      	adds	r3, #20
 800d9b4:	69b9      	ldr	r1, [r7, #24]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f00b f805 	bl	80189c6 <sys_mbox_trypost>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d02a      	beq.n	800da18 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	6978      	ldr	r0, [r7, #20]
 800d9cc:	f004 f9d0 	bl	8011d70 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	6978      	ldr	r0, [r7, #20]
 800d9d4:	f004 f9de 	bl	8011d94 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d9d8:	2100      	movs	r1, #0
 800d9da:	6978      	ldr	r0, [r7, #20]
 800d9dc:	f004 f9fc 	bl	8011dd8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	6978      	ldr	r0, [r7, #20]
 800d9e6:	f004 fa51 	bl	8011e8c <tcp_poll>
    tcp_err(pcb, NULL);
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	6978      	ldr	r0, [r7, #20]
 800d9ee:	f004 fa13 	bl	8011e18 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	3310      	adds	r3, #16
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f00a ffbb 	bl	8018978 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	3310      	adds	r3, #16
 800da06:	4618      	mov	r0, r3
 800da08:	f00b f863 	bl	8018ad2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800da0c:	69b8      	ldr	r0, [r7, #24]
 800da0e:	f000 f91b 	bl	800dc48 <netconn_free>
    return ERR_MEM;
 800da12:	f04f 33ff 	mov.w	r3, #4294967295
 800da16:	e00a      	b.n	800da2e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d005      	beq.n	800da2c <accept_function+0x138>
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da24:	2200      	movs	r2, #0
 800da26:	2100      	movs	r1, #0
 800da28:	69f8      	ldr	r0, [r7, #28]
 800da2a:	4798      	blx	r3
  }

  return ERR_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3720      	adds	r7, #32
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	200048ec 	.word	0x200048ec

0800da3c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800da3c:	b590      	push	{r4, r7, lr}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800da44:	2300      	movs	r3, #0
 800da46:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d006      	beq.n	800da60 <pcb_new+0x24>
 800da52:	4b2b      	ldr	r3, [pc, #172]	; (800db00 <pcb_new+0xc4>)
 800da54:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800da58:	492a      	ldr	r1, [pc, #168]	; (800db04 <pcb_new+0xc8>)
 800da5a:	482b      	ldr	r0, [pc, #172]	; (800db08 <pcb_new+0xcc>)
 800da5c:	f00b f9a8 	bl	8018db0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da6a:	2b10      	cmp	r3, #16
 800da6c:	d022      	beq.n	800dab4 <pcb_new+0x78>
 800da6e:	2b20      	cmp	r3, #32
 800da70:	d133      	bne.n	800dada <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681c      	ldr	r4, [r3, #0]
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	4618      	mov	r0, r3
 800da7a:	f008 fd16 	bl	80164aa <udp_new_ip_type>
 800da7e:	4603      	mov	r3, r0
 800da80:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d02a      	beq.n	800dae2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b22      	cmp	r3, #34	; 0x22
 800da94:	d104      	bne.n	800daa0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6858      	ldr	r0, [r3, #4]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	4917      	ldr	r1, [pc, #92]	; (800db0c <pcb_new+0xd0>)
 800daae:	f008 fca1 	bl	80163f4 <udp_recv>
    }
    break;
 800dab2:	e016      	b.n	800dae2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681c      	ldr	r4, [r3, #0]
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
 800daba:	4618      	mov	r0, r3
 800dabc:	f004 f94a 	bl	8011d54 <tcp_new_ip_type>
 800dac0:	4603      	mov	r3, r0
 800dac2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00b      	beq.n	800dae6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fee6 	bl	800d8a4 <setup_tcp>
    }
    break;
 800dad8:	e005      	b.n	800dae6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	22fa      	movs	r2, #250	; 0xfa
 800dade:	711a      	strb	r2, [r3, #4]
    return;
 800dae0:	e00a      	b.n	800daf8 <pcb_new+0xbc>
    break;
 800dae2:	bf00      	nop
 800dae4:	e000      	b.n	800dae8 <pcb_new+0xac>
    break;
 800dae6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d102      	bne.n	800daf8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	22ff      	movs	r2, #255	; 0xff
 800daf6:	711a      	strb	r2, [r3, #4]
  }
}
 800daf8:	3714      	adds	r7, #20
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd90      	pop	{r4, r7, pc}
 800dafe:	bf00      	nop
 800db00:	08019f6c 	.word	0x08019f6c
 800db04:	0801a118 	.word	0x0801a118
 800db08:	08019fe8 	.word	0x08019fe8
 800db0c:	0800d349 	.word	0x0800d349

0800db10 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d102      	bne.n	800db32 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f7ff ff85 	bl	800da3c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d012      	beq.n	800db60 <lwip_netconn_do_newconn+0x50>
 800db3a:	f00b f8d5 	bl	8018ce8 <sys_arch_protect>
 800db3e:	60b8      	str	r0, [r7, #8]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800db48:	f113 0f0c 	cmn.w	r3, #12
 800db4c:	db05      	blt.n	800db5a <lwip_netconn_do_newconn+0x4a>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800db58:	721a      	strb	r2, [r3, #8]
 800db5a:	68b8      	ldr	r0, [r7, #8]
 800db5c:	f00b f8d2 	bl	8018d04 <sys_arch_unprotect>
}
 800db60:	bf00      	nop
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	6039      	str	r1, [r7, #0]
 800db72:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800db74:	2007      	movs	r0, #7
 800db76:	f001 fe31 	bl	800f7dc <memp_malloc>
 800db7a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <netconn_alloc+0x1e>
    return NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	e055      	b.n	800dc32 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2200      	movs	r2, #0
 800db8a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	79fa      	ldrb	r2, [r7, #7]
 800db90:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2200      	movs	r2, #0
 800db96:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800db98:	79fb      	ldrb	r3, [r7, #7]
 800db9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db9e:	2b10      	cmp	r3, #16
 800dba0:	d004      	beq.n	800dbac <netconn_alloc+0x44>
 800dba2:	2b20      	cmp	r3, #32
 800dba4:	d105      	bne.n	800dbb2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800dba6:	2306      	movs	r3, #6
 800dba8:	60fb      	str	r3, [r7, #12]
    break;
 800dbaa:	e00a      	b.n	800dbc2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800dbac:	2306      	movs	r3, #6
 800dbae:	60fb      	str	r3, [r7, #12]
    break;
 800dbb0:	e007      	b.n	800dbc2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800dbb2:	4b22      	ldr	r3, [pc, #136]	; (800dc3c <netconn_alloc+0xd4>)
 800dbb4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dbb8:	4921      	ldr	r1, [pc, #132]	; (800dc40 <netconn_alloc+0xd8>)
 800dbba:	4822      	ldr	r0, [pc, #136]	; (800dc44 <netconn_alloc+0xdc>)
 800dbbc:	f00b f8f8 	bl	8018db0 <iprintf>
    goto free_and_return;
 800dbc0:	e032      	b.n	800dc28 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	3310      	adds	r3, #16
 800dbc6:	68f9      	ldr	r1, [r7, #12]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f00a feb3 	bl	8018934 <sys_mbox_new>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d128      	bne.n	800dc26 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	330c      	adds	r3, #12
 800dbd8:	2100      	movs	r1, #0
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f00a ff86 	bl	8018aec <sys_sem_new>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d005      	beq.n	800dbf2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	3310      	adds	r3, #16
 800dbea:	4618      	mov	r0, r3
 800dbec:	f00a fec4 	bl	8018978 <sys_mbox_free>
    goto free_and_return;
 800dbf0:	e01a      	b.n	800dc28 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	3314      	adds	r3, #20
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f00a ff6b 	bl	8018ad2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	f04f 32ff 	mov.w	r2, #4294967295
 800dc08:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2200      	movs	r2, #0
 800dc14:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	771a      	strb	r2, [r3, #28]
  return conn;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	e005      	b.n	800dc32 <netconn_alloc+0xca>
    goto free_and_return;
 800dc26:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800dc28:	68b9      	ldr	r1, [r7, #8]
 800dc2a:	2007      	movs	r0, #7
 800dc2c:	f001 fe4c 	bl	800f8c8 <memp_free>
  return NULL;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	08019f6c 	.word	0x08019f6c
 800dc40:	0801a138 	.word	0x0801a138
 800dc44:	08019fe8 	.word	0x08019fe8

0800dc48 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d006      	beq.n	800dc66 <netconn_free+0x1e>
 800dc58:	4b1b      	ldr	r3, [pc, #108]	; (800dcc8 <netconn_free+0x80>)
 800dc5a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800dc5e:	491b      	ldr	r1, [pc, #108]	; (800dccc <netconn_free+0x84>)
 800dc60:	481b      	ldr	r0, [pc, #108]	; (800dcd0 <netconn_free+0x88>)
 800dc62:	f00b f8a5 	bl	8018db0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3310      	adds	r3, #16
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f00a ff20 	bl	8018ab0 <sys_mbox_valid>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <netconn_free+0x3c>
 800dc76:	4b14      	ldr	r3, [pc, #80]	; (800dcc8 <netconn_free+0x80>)
 800dc78:	f240 22e2 	movw	r2, #738	; 0x2e2
 800dc7c:	4915      	ldr	r1, [pc, #84]	; (800dcd4 <netconn_free+0x8c>)
 800dc7e:	4814      	ldr	r0, [pc, #80]	; (800dcd0 <netconn_free+0x88>)
 800dc80:	f00b f896 	bl	8018db0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	3314      	adds	r3, #20
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f00a ff11 	bl	8018ab0 <sys_mbox_valid>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d006      	beq.n	800dca2 <netconn_free+0x5a>
 800dc94:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <netconn_free+0x80>)
 800dc96:	f240 22e5 	movw	r2, #741	; 0x2e5
 800dc9a:	490f      	ldr	r1, [pc, #60]	; (800dcd8 <netconn_free+0x90>)
 800dc9c:	480c      	ldr	r0, [pc, #48]	; (800dcd0 <netconn_free+0x88>)
 800dc9e:	f00b f887 	bl	8018db0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	330c      	adds	r3, #12
 800dca6:	4618      	mov	r0, r3
 800dca8:	f00a ff86 	bl	8018bb8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	330c      	adds	r3, #12
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f00a ff9f 	bl	8018bf4 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800dcb6:	6879      	ldr	r1, [r7, #4]
 800dcb8:	2007      	movs	r0, #7
 800dcba:	f001 fe05 	bl	800f8c8 <memp_free>
}
 800dcbe:	bf00      	nop
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	08019f6c 	.word	0x08019f6c
 800dccc:	0801a160 	.word	0x0801a160
 800dcd0:	08019fe8 	.word	0x08019fe8
 800dcd4:	0801a190 	.word	0x0801a190
 800dcd8:	0801a1cc 	.word	0x0801a1cc

0800dcdc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	3310      	adds	r3, #16
 800dce8:	4618      	mov	r0, r3
 800dcea:	f00a fee1 	bl	8018ab0 <sys_mbox_valid>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d035      	beq.n	800dd60 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dcf4:	e01e      	b.n	800dd34 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcfe:	2b10      	cmp	r3, #16
 800dd00:	d114      	bne.n	800dd2c <netconn_drain+0x50>
        if (mem != NULL) {
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d015      	beq.n	800dd34 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d007      	beq.n	800dd24 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685a      	ldr	r2, [r3, #4]
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	891b      	ldrh	r3, [r3, #8]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4610      	mov	r0, r2
 800dd20:	f003 fa44 	bl	80111ac <tcp_recved>
          }
          pbuf_free(p);
 800dd24:	6978      	ldr	r0, [r7, #20]
 800dd26:	f002 fb67 	bl	80103f8 <pbuf_free>
 800dd2a:	e003      	b.n	800dd34 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 ff38 	bl	800eba4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	3310      	adds	r3, #16
 800dd38:	f107 020c 	add.w	r2, r7, #12
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f00a fe9a 	bl	8018a78 <sys_arch_mbox_tryfetch>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4a:	d1d4      	bne.n	800dcf6 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3310      	adds	r3, #16
 800dd50:	4618      	mov	r0, r3
 800dd52:	f00a fe11 	bl	8018978 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3310      	adds	r3, #16
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f00a feb9 	bl	8018ad2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	3314      	adds	r3, #20
 800dd64:	4618      	mov	r0, r3
 800dd66:	f00a fea3 	bl	8018ab0 <sys_mbox_valid>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d02e      	beq.n	800ddce <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd70:	e017      	b.n	800dda2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4a18      	ldr	r2, [pc, #96]	; (800ddd8 <netconn_drain+0xfc>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d013      	beq.n	800dda2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800dd7e:	6938      	ldr	r0, [r7, #16]
 800dd80:	f7ff ffac 	bl	800dcdc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d007      	beq.n	800dd9c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f003 f877 	bl	8010e84 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800dd9c:	6938      	ldr	r0, [r7, #16]
 800dd9e:	f7ff ff53 	bl	800dc48 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	3314      	adds	r3, #20
 800dda6:	f107 020c 	add.w	r2, r7, #12
 800ddaa:	4611      	mov	r1, r2
 800ddac:	4618      	mov	r0, r3
 800ddae:	f00a fe63 	bl	8018a78 <sys_arch_mbox_tryfetch>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb8:	d1db      	bne.n	800dd72 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	3314      	adds	r3, #20
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f00a fdda 	bl	8018978 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	3314      	adds	r3, #20
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f00a fe82 	bl	8018ad2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ddce:	bf00      	nop
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	200048ec 	.word	0x200048ec

0800dddc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <lwip_netconn_do_close_internal+0x24>
 800ddf2:	4baa      	ldr	r3, [pc, #680]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800ddf4:	f240 3243 	movw	r2, #835	; 0x343
 800ddf8:	49a9      	ldr	r1, [pc, #676]	; (800e0a0 <lwip_netconn_do_close_internal+0x2c4>)
 800ddfa:	48aa      	ldr	r0, [pc, #680]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800ddfc:	f00a ffd8 	bl	8018db0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de08:	2b10      	cmp	r3, #16
 800de0a:	d006      	beq.n	800de1a <lwip_netconn_do_close_internal+0x3e>
 800de0c:	4ba3      	ldr	r3, [pc, #652]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800de0e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800de12:	49a5      	ldr	r1, [pc, #660]	; (800e0a8 <lwip_netconn_do_close_internal+0x2cc>)
 800de14:	48a3      	ldr	r0, [pc, #652]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800de16:	f00a ffcb 	bl	8018db0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	785b      	ldrb	r3, [r3, #1]
 800de1e:	2b04      	cmp	r3, #4
 800de20:	d006      	beq.n	800de30 <lwip_netconn_do_close_internal+0x54>
 800de22:	4b9e      	ldr	r3, [pc, #632]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800de24:	f240 3245 	movw	r2, #837	; 0x345
 800de28:	49a0      	ldr	r1, [pc, #640]	; (800e0ac <lwip_netconn_do_close_internal+0x2d0>)
 800de2a:	489e      	ldr	r0, [pc, #632]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800de2c:	f00a ffc0 	bl	8018db0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d106      	bne.n	800de46 <lwip_netconn_do_close_internal+0x6a>
 800de38:	4b98      	ldr	r3, [pc, #608]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800de3a:	f240 3246 	movw	r2, #838	; 0x346
 800de3e:	499c      	ldr	r1, [pc, #624]	; (800e0b0 <lwip_netconn_do_close_internal+0x2d4>)
 800de40:	4898      	ldr	r0, [pc, #608]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800de42:	f00a ffb5 	bl	8018db0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <lwip_netconn_do_close_internal+0x80>
 800de4e:	4b93      	ldr	r3, [pc, #588]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800de50:	f240 3247 	movw	r2, #839	; 0x347
 800de54:	4997      	ldr	r1, [pc, #604]	; (800e0b4 <lwip_netconn_do_close_internal+0x2d8>)
 800de56:	4893      	ldr	r0, [pc, #588]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800de58:	f00a ffaa 	bl	8018db0 <iprintf>

  tpcb = conn->pcb.tcp;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	7a1b      	ldrb	r3, [r3, #8]
 800de68:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	f003 0302 	and.w	r3, r3, #2
 800de78:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d102      	bne.n	800de86 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800de80:	2301      	movs	r3, #1
 800de82:	77bb      	strb	r3, [r7, #30]
 800de84:	e01f      	b.n	800dec6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800de86:	7dbb      	ldrb	r3, [r7, #22]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800de90:	2b05      	cmp	r3, #5
 800de92:	d007      	beq.n	800dea4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800de98:	2b06      	cmp	r3, #6
 800de9a:	d003      	beq.n	800dea4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800dea0:	2b08      	cmp	r3, #8
 800dea2:	d102      	bne.n	800deaa <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800dea4:	2301      	movs	r3, #1
 800dea6:	77bb      	strb	r3, [r7, #30]
 800dea8:	e00d      	b.n	800dec6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800deaa:	7d7b      	ldrb	r3, [r7, #21]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d008      	beq.n	800dec2 <lwip_netconn_do_close_internal+0xe6>
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	7e9b      	ldrb	r3, [r3, #26]
 800deb4:	f003 0310 	and.w	r3, r3, #16
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800debc:	2301      	movs	r3, #1
 800debe:	77bb      	strb	r3, [r7, #30]
 800dec0:	e001      	b.n	800dec6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800dec2:	2300      	movs	r3, #0
 800dec4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800dec6:	7fbb      	ldrb	r3, [r7, #30]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800decc:	2100      	movs	r1, #0
 800dece:	69b8      	ldr	r0, [r7, #24]
 800ded0:	f003 ff4e 	bl	8011d70 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	7d1b      	ldrb	r3, [r3, #20]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d104      	bne.n	800dee6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dedc:	2100      	movs	r1, #0
 800dede:	69b8      	ldr	r0, [r7, #24]
 800dee0:	f003 ffbc 	bl	8011e5c <tcp_accept>
 800dee4:	e01d      	b.n	800df22 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800dee6:	7dbb      	ldrb	r3, [r7, #22]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d007      	beq.n	800defc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800deec:	2100      	movs	r1, #0
 800deee:	69b8      	ldr	r0, [r7, #24]
 800def0:	f003 ff50 	bl	8011d94 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800def4:	2100      	movs	r1, #0
 800def6:	69b8      	ldr	r0, [r7, #24]
 800def8:	f003 ffb0 	bl	8011e5c <tcp_accept>
    }
    if (shut_tx) {
 800defc:	7d7b      	ldrb	r3, [r7, #21]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800df02:	2100      	movs	r1, #0
 800df04:	69b8      	ldr	r0, [r7, #24]
 800df06:	f003 ff67 	bl	8011dd8 <tcp_sent>
    }
    if (close) {
 800df0a:	7fbb      	ldrb	r3, [r7, #30]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d008      	beq.n	800df22 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800df10:	2200      	movs	r2, #0
 800df12:	2100      	movs	r1, #0
 800df14:	69b8      	ldr	r0, [r7, #24]
 800df16:	f003 ffb9 	bl	8011e8c <tcp_poll>
      tcp_err(tpcb, NULL);
 800df1a:	2100      	movs	r1, #0
 800df1c:	69b8      	ldr	r0, [r7, #24]
 800df1e:	f003 ff7b 	bl	8011e18 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800df22:	7fbb      	ldrb	r3, [r7, #30]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d005      	beq.n	800df34 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800df28:	69b8      	ldr	r0, [r7, #24]
 800df2a:	f002 fe99 	bl	8010c60 <tcp_close>
 800df2e:	4603      	mov	r3, r0
 800df30:	77fb      	strb	r3, [r7, #31]
 800df32:	e007      	b.n	800df44 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800df34:	7dbb      	ldrb	r3, [r7, #22]
 800df36:	7d7a      	ldrb	r2, [r7, #21]
 800df38:	4619      	mov	r1, r3
 800df3a:	69b8      	ldr	r0, [r7, #24]
 800df3c:	f002 fea8 	bl	8010c90 <tcp_shutdown>
 800df40:	4603      	mov	r3, r0
 800df42:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800df44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d102      	bne.n	800df52 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800df4c:	2301      	movs	r3, #1
 800df4e:	777b      	strb	r3, [r7, #29]
 800df50:	e016      	b.n	800df80 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800df52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df5a:	d10f      	bne.n	800df7c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df60:	7a5b      	ldrb	r3, [r3, #9]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10c      	bne.n	800df80 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800df66:	2301      	movs	r3, #1
 800df68:	777b      	strb	r3, [r7, #29]
        if (close) {
 800df6a:	7fbb      	ldrb	r3, [r7, #30]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d007      	beq.n	800df80 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800df70:	69b8      	ldr	r0, [r7, #24]
 800df72:	f002 ff87 	bl	8010e84 <tcp_abort>
          err = ERR_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	77fb      	strb	r3, [r7, #31]
 800df7a:	e001      	b.n	800df80 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800df7c:	2301      	movs	r3, #1
 800df7e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800df80:	7f7b      	ldrb	r3, [r7, #29]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d056      	beq.n	800e034 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	330c      	adds	r3, #12
 800df8e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df94:	7ffa      	ldrb	r2, [r7, #31]
 800df96:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dfa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d129      	bne.n	800e000 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800dfac:	7fbb      	ldrb	r3, [r7, #30]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00c      	beq.n	800dfcc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d005      	beq.n	800dfcc <lwip_netconn_do_close_internal+0x1f0>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	2104      	movs	r1, #4
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	4798      	blx	r3
      }
      if (shut_rx) {
 800dfcc:	7dbb      	ldrb	r3, [r7, #22]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d009      	beq.n	800dfe6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d005      	beq.n	800dfe6 <lwip_netconn_do_close_internal+0x20a>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	4798      	blx	r3
      }
      if (shut_tx) {
 800dfe6:	7d7b      	ldrb	r3, [r7, #21]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d009      	beq.n	800e000 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <lwip_netconn_do_close_internal+0x224>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff8:	2200      	movs	r2, #0
 800dffa:	2102      	movs	r1, #2
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00e      	beq.n	800e024 <lwip_netconn_do_close_internal+0x248>
 800e006:	f00a fe6f 	bl	8018ce8 <sys_arch_protect>
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e012:	f113 0f0c 	cmn.w	r3, #12
 800e016:	db02      	blt.n	800e01e <lwip_netconn_do_close_internal+0x242>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	7ffa      	ldrb	r2, [r7, #31]
 800e01c:	721a      	strb	r2, [r3, #8]
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f00a fe70 	bl	8018d04 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e024:	78fb      	ldrb	r3, [r7, #3]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e02a:	6938      	ldr	r0, [r7, #16]
 800e02c:	f00a fdb7 	bl	8018b9e <sys_sem_signal>
    }
    return ERR_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	e02e      	b.n	800e092 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800e034:	7f7b      	ldrb	r3, [r7, #29]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d11e      	bne.n	800e078 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	7d1b      	ldrb	r3, [r3, #20]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d106      	bne.n	800e050 <lwip_netconn_do_close_internal+0x274>
 800e042:	4b16      	ldr	r3, [pc, #88]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800e044:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e048:	491b      	ldr	r1, [pc, #108]	; (800e0b8 <lwip_netconn_do_close_internal+0x2dc>)
 800e04a:	4816      	ldr	r0, [pc, #88]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800e04c:	f00a feb0 	bl	8018db0 <iprintf>
    if (shut_tx) {
 800e050:	7d7b      	ldrb	r3, [r7, #21]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d003      	beq.n	800e05e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800e056:	4919      	ldr	r1, [pc, #100]	; (800e0bc <lwip_netconn_do_close_internal+0x2e0>)
 800e058:	69b8      	ldr	r0, [r7, #24]
 800e05a:	f003 febd 	bl	8011dd8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e05e:	2201      	movs	r2, #1
 800e060:	4917      	ldr	r1, [pc, #92]	; (800e0c0 <lwip_netconn_do_close_internal+0x2e4>)
 800e062:	69b8      	ldr	r0, [r7, #24]
 800e064:	f003 ff12 	bl	8011e8c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e068:	4916      	ldr	r1, [pc, #88]	; (800e0c4 <lwip_netconn_do_close_internal+0x2e8>)
 800e06a:	69b8      	ldr	r0, [r7, #24]
 800e06c:	f003 fed4 	bl	8011e18 <tcp_err>
    tcp_arg(tpcb, conn);
 800e070:	6879      	ldr	r1, [r7, #4]
 800e072:	69b8      	ldr	r0, [r7, #24]
 800e074:	f003 fe7c 	bl	8011d70 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e078:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d106      	bne.n	800e08e <lwip_netconn_do_close_internal+0x2b2>
 800e080:	4b06      	ldr	r3, [pc, #24]	; (800e09c <lwip_netconn_do_close_internal+0x2c0>)
 800e082:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e086:	4910      	ldr	r1, [pc, #64]	; (800e0c8 <lwip_netconn_do_close_internal+0x2ec>)
 800e088:	4806      	ldr	r0, [pc, #24]	; (800e0a4 <lwip_netconn_do_close_internal+0x2c8>)
 800e08a:	f00a fe91 	bl	8018db0 <iprintf>
  return err;
 800e08e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	08019f6c 	.word	0x08019f6c
 800e0a0:	0801a208 	.word	0x0801a208
 800e0a4:	08019fe8 	.word	0x08019fe8
 800e0a8:	0801a218 	.word	0x0801a218
 800e0ac:	0801a238 	.word	0x0801a238
 800e0b0:	0801a25c 	.word	0x0801a25c
 800e0b4:	0801a0c4 	.word	0x0801a0c4
 800e0b8:	0801a270 	.word	0x0801a270
 800e0bc:	0800d61d 	.word	0x0800d61d
 800e0c0:	0800d555 	.word	0x0800d555
 800e0c4:	0800d6c5 	.word	0x0800d6c5
 800e0c8:	0801a294 	.word	0x0801a294

0800e0cc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	785b      	ldrb	r3, [r3, #1]
 800e0de:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e0e0:	7cfb      	ldrb	r3, [r7, #19]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00d      	beq.n	800e102 <lwip_netconn_do_delconn+0x36>
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0f0:	2b10      	cmp	r3, #16
 800e0f2:	d006      	beq.n	800e102 <lwip_netconn_do_delconn+0x36>
 800e0f4:	4b6f      	ldr	r3, [pc, #444]	; (800e2b4 <lwip_netconn_do_delconn+0x1e8>)
 800e0f6:	f240 4201 	movw	r2, #1025	; 0x401
 800e0fa:	496f      	ldr	r1, [pc, #444]	; (800e2b8 <lwip_netconn_do_delconn+0x1ec>)
 800e0fc:	486f      	ldr	r0, [pc, #444]	; (800e2bc <lwip_netconn_do_delconn+0x1f0>)
 800e0fe:	f00a fe57 	bl	8018db0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e102:	7cfb      	ldrb	r3, [r7, #19]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d005      	beq.n	800e114 <lwip_netconn_do_delconn+0x48>
 800e108:	7cfb      	ldrb	r3, [r7, #19]
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d002      	beq.n	800e114 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e10e:	7cfb      	ldrb	r3, [r7, #19]
 800e110:	2b03      	cmp	r3, #3
 800e112:	d109      	bne.n	800e128 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e114:	7cfb      	ldrb	r3, [r7, #19]
 800e116:	2b03      	cmp	r3, #3
 800e118:	d10a      	bne.n	800e130 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	7f1b      	ldrb	r3, [r3, #28]
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	d103      	bne.n	800e130 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	22fb      	movs	r2, #251	; 0xfb
 800e12c:	711a      	strb	r2, [r3, #4]
 800e12e:	e09c      	b.n	800e26a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e130:	7cfb      	ldrb	r3, [r7, #19]
 800e132:	2b03      	cmp	r3, #3
 800e134:	d10d      	bne.n	800e152 <lwip_netconn_do_delconn+0x86>
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	7f1b      	ldrb	r3, [r3, #28]
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d106      	bne.n	800e152 <lwip_netconn_do_delconn+0x86>
 800e144:	4b5b      	ldr	r3, [pc, #364]	; (800e2b4 <lwip_netconn_do_delconn+0x1e8>)
 800e146:	f240 421f 	movw	r2, #1055	; 0x41f
 800e14a:	495d      	ldr	r1, [pc, #372]	; (800e2c0 <lwip_netconn_do_delconn+0x1f4>)
 800e14c:	485b      	ldr	r0, [pc, #364]	; (800e2bc <lwip_netconn_do_delconn+0x1f0>)
 800e14e:	f00a fe2f 	bl	8018db0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	2200      	movs	r2, #0
 800e156:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7ff fdbd 	bl	800dcdc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d064      	beq.n	800e236 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e176:	2b10      	cmp	r3, #16
 800e178:	d00e      	beq.n	800e198 <lwip_netconn_do_delconn+0xcc>
 800e17a:	2b20      	cmp	r3, #32
 800e17c:	d000      	beq.n	800e180 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800e17e:	e056      	b.n	800e22e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	4618      	mov	r0, r3
 800e192:	f008 f941 	bl	8016418 <udp_remove>
        break;
 800e196:	e04a      	b.n	800e22e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d104      	bne.n	800e1ac <lwip_netconn_do_delconn+0xe0>
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	6a1b      	ldr	r3, [r3, #32]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d006      	beq.n	800e1ba <lwip_netconn_do_delconn+0xee>
 800e1ac:	4b41      	ldr	r3, [pc, #260]	; (800e2b4 <lwip_netconn_do_delconn+0x1e8>)
 800e1ae:	f240 4235 	movw	r2, #1077	; 0x435
 800e1b2:	4944      	ldr	r1, [pc, #272]	; (800e2c4 <lwip_netconn_do_delconn+0x1f8>)
 800e1b4:	4841      	ldr	r0, [pc, #260]	; (800e2bc <lwip_netconn_do_delconn+0x1f0>)
 800e1b6:	f00a fdfb 	bl	8018db0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2204      	movs	r2, #4
 800e1c0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	2203      	movs	r2, #3
 800e1c6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	697a      	ldr	r2, [r7, #20]
 800e1ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7ff fe00 	bl	800dddc <lwip_netconn_do_close_internal>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d064      	beq.n	800e2ac <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	785b      	ldrb	r3, [r3, #1]
 800e1e8:	2b04      	cmp	r3, #4
 800e1ea:	d006      	beq.n	800e1fa <lwip_netconn_do_delconn+0x12e>
 800e1ec:	4b31      	ldr	r3, [pc, #196]	; (800e2b4 <lwip_netconn_do_delconn+0x1e8>)
 800e1ee:	f240 423b 	movw	r2, #1083	; 0x43b
 800e1f2:	4935      	ldr	r1, [pc, #212]	; (800e2c8 <lwip_netconn_do_delconn+0x1fc>)
 800e1f4:	4831      	ldr	r0, [pc, #196]	; (800e2bc <lwip_netconn_do_delconn+0x1f0>)
 800e1f6:	f00a fddb 	bl	8018db0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e1fa:	4834      	ldr	r0, [pc, #208]	; (800e2cc <lwip_netconn_do_delconn+0x200>)
 800e1fc:	f00a fd41 	bl	8018c82 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	330c      	adds	r3, #12
 800e206:	2100      	movs	r1, #0
 800e208:	4618      	mov	r0, r3
 800e20a:	f00a fc97 	bl	8018b3c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e20e:	482f      	ldr	r0, [pc, #188]	; (800e2cc <lwip_netconn_do_delconn+0x200>)
 800e210:	f00a fd28 	bl	8018c64 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	785b      	ldrb	r3, [r3, #1]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d046      	beq.n	800e2ac <lwip_netconn_do_delconn+0x1e0>
 800e21e:	4b25      	ldr	r3, [pc, #148]	; (800e2b4 <lwip_netconn_do_delconn+0x1e8>)
 800e220:	f240 423f 	movw	r2, #1087	; 0x43f
 800e224:	4928      	ldr	r1, [pc, #160]	; (800e2c8 <lwip_netconn_do_delconn+0x1fc>)
 800e226:	4825      	ldr	r0, [pc, #148]	; (800e2bc <lwip_netconn_do_delconn+0x1f0>)
 800e228:	f00a fdc2 	bl	8018db0 <iprintf>
        return;
 800e22c:	e03e      	b.n	800e2ac <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2200      	movs	r2, #0
 800e234:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d007      	beq.n	800e250 <lwip_netconn_do_delconn+0x184>
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e246:	697a      	ldr	r2, [r7, #20]
 800e248:	6810      	ldr	r0, [r2, #0]
 800e24a:	2200      	movs	r2, #0
 800e24c:	2100      	movs	r1, #0
 800e24e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e256:	2b00      	cmp	r3, #0
 800e258:	d007      	beq.n	800e26a <lwip_netconn_do_delconn+0x19e>
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	6810      	ldr	r0, [r2, #0]
 800e264:	2200      	movs	r2, #0
 800e266:	2102      	movs	r1, #2
 800e268:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	330c      	adds	r3, #12
 800e270:	4618      	mov	r0, r3
 800e272:	f00a fcae 	bl	8018bd2 <sys_sem_valid>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d018      	beq.n	800e2ae <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d014      	beq.n	800e2ae <lwip_netconn_do_delconn+0x1e2>
 800e284:	f00a fd30 	bl	8018ce8 <sys_arch_protect>
 800e288:	60f8      	str	r0, [r7, #12]
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e292:	f113 0f0c 	cmn.w	r3, #12
 800e296:	db05      	blt.n	800e2a4 <lwip_netconn_do_delconn+0x1d8>
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e2a2:	721a      	strb	r2, [r3, #8]
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f00a fd2d 	bl	8018d04 <sys_arch_unprotect>
 800e2aa:	e000      	b.n	800e2ae <lwip_netconn_do_delconn+0x1e2>
        return;
 800e2ac:	bf00      	nop
  }
}
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	08019f6c 	.word	0x08019f6c
 800e2b8:	0801a2a4 	.word	0x0801a2a4
 800e2bc:	08019fe8 	.word	0x08019fe8
 800e2c0:	0801a2b8 	.word	0x0801a2b8
 800e2c4:	0801a2d8 	.word	0x0801a2d8
 800e2c8:	0801a2f4 	.word	0x0801a2f4
 800e2cc:	200048f0 	.word	0x200048f0

0800e2d0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e2e4:	f113 0f0c 	cmn.w	r3, #12
 800e2e8:	da06      	bge.n	800e2f8 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	711a      	strb	r2, [r3, #4]
 800e2f6:	e030      	b.n	800e35a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	22fa      	movs	r2, #250	; 0xfa
 800e2fc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d027      	beq.n	800e358 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e312:	2b10      	cmp	r3, #16
 800e314:	d011      	beq.n	800e33a <lwip_netconn_do_bind+0x6a>
 800e316:	2b20      	cmp	r3, #32
 800e318:	d000      	beq.n	800e31c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800e31a:	e01e      	b.n	800e35a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6858      	ldr	r0, [r3, #4]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6899      	ldr	r1, [r3, #8]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	899b      	ldrh	r3, [r3, #12]
 800e32a:	461a      	mov	r2, r3
 800e32c:	f007 fff2 	bl	8016314 <udp_bind>
 800e330:	4603      	mov	r3, r0
 800e332:	461a      	mov	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	711a      	strb	r2, [r3, #4]
        break;
 800e338:	e00f      	b.n	800e35a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6858      	ldr	r0, [r3, #4]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6899      	ldr	r1, [r3, #8]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	899b      	ldrh	r3, [r3, #12]
 800e348:	461a      	mov	r2, r3
 800e34a:	f002 fda7 	bl	8010e9c <tcp_bind>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	711a      	strb	r2, [r3, #4]
        break;
 800e356:	e000      	b.n	800e35a <lwip_netconn_do_bind+0x8a>
      }
    }
 800e358:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d012      	beq.n	800e388 <lwip_netconn_do_bind+0xb8>
 800e362:	f00a fcc1 	bl	8018ce8 <sys_arch_protect>
 800e366:	60b8      	str	r0, [r7, #8]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e370:	f113 0f0c 	cmn.w	r3, #12
 800e374:	db05      	blt.n	800e382 <lwip_netconn_do_bind+0xb2>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e380:	721a      	strb	r2, [r3, #8]
 800e382:	68b8      	ldr	r0, [r7, #8]
 800e384:	f00a fcbe 	bl	8018d04 <sys_arch_unprotect>
}
 800e388:	bf00      	nop
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b088      	sub	sp, #32
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e3a4:	f113 0f0c 	cmn.w	r3, #12
 800e3a8:	da06      	bge.n	800e3b8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	711a      	strb	r2, [r3, #4]
 800e3b6:	e090      	b.n	800e4da <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	22f5      	movs	r2, #245	; 0xf5
 800e3bc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f000 8088 	beq.w	800e4da <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d17d      	bne.n	800e4d4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	785b      	ldrb	r3, [r3, #1]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d16f      	bne.n	800e4c2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	22fa      	movs	r2, #250	; 0xfa
 800e3f2:	711a      	strb	r2, [r3, #4]
 800e3f4:	e071      	b.n	800e4da <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800e3f6:	23ff      	movs	r3, #255	; 0xff
 800e3f8:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	f107 020f 	add.w	r2, r7, #15
 800e404:	7ef9      	ldrb	r1, [r7, #27]
 800e406:	4618      	mov	r0, r3
 800e408:	f002 fdea 	bl	8010fe0 <tcp_listen_with_backlog_and_err>
 800e40c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d104      	bne.n	800e41e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800e414:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	711a      	strb	r2, [r3, #4]
 800e41c:	e05d      	b.n	800e4da <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3310      	adds	r3, #16
 800e424:	4618      	mov	r0, r3
 800e426:	f00a fb43 	bl	8018ab0 <sys_mbox_valid>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00b      	beq.n	800e448 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3310      	adds	r3, #16
 800e436:	4618      	mov	r0, r3
 800e438:	f00a fa9e 	bl	8018978 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	3310      	adds	r3, #16
 800e442:	4618      	mov	r0, r3
 800e444:	f00a fb45 	bl	8018ad2 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	2200      	movs	r2, #0
 800e44c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3314      	adds	r3, #20
 800e454:	4618      	mov	r0, r3
 800e456:	f00a fb2b 	bl	8018ab0 <sys_mbox_valid>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10a      	bne.n	800e476 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3314      	adds	r3, #20
 800e466:	2106      	movs	r1, #6
 800e468:	4618      	mov	r0, r3
 800e46a:	f00a fa63 	bl	8018934 <sys_mbox_new>
 800e46e:	4603      	mov	r3, r0
 800e470:	461a      	mov	r2, r3
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d118      	bne.n	800e4b2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2202      	movs	r2, #2
 800e486:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	697a      	ldr	r2, [r7, #20]
 800e48e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f003 fc67 	bl	8011d70 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	4919      	ldr	r1, [pc, #100]	; (800e510 <lwip_netconn_do_listen+0x180>)
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f003 fcd6 	bl	8011e5c <tcp_accept>
 800e4b0:	e013      	b.n	800e4da <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800e4b2:	6978      	ldr	r0, [r7, #20]
 800e4b4:	f002 fbd4 	bl	8010c60 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	605a      	str	r2, [r3, #4]
 800e4c0:	e00b      	b.n	800e4da <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	785b      	ldrb	r3, [r3, #1]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d106      	bne.n	800e4da <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	711a      	strb	r2, [r3, #4]
 800e4d2:	e002      	b.n	800e4da <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	22f0      	movs	r2, #240	; 0xf0
 800e4d8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d012      	beq.n	800e508 <lwip_netconn_do_listen+0x178>
 800e4e2:	f00a fc01 	bl	8018ce8 <sys_arch_protect>
 800e4e6:	6138      	str	r0, [r7, #16]
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e4f0:	f113 0f0c 	cmn.w	r3, #12
 800e4f4:	db05      	blt.n	800e502 <lwip_netconn_do_listen+0x172>
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	69fa      	ldr	r2, [r7, #28]
 800e4fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e500:	721a      	strb	r2, [r3, #8]
 800e502:	6938      	ldr	r0, [r7, #16]
 800e504:	f00a fbfe 	bl	8018d04 <sys_arch_unprotect>
}
 800e508:	bf00      	nop
 800e50a:	3720      	adds	r7, #32
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	0800d8f5 	.word	0x0800d8f5

0800e514 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2200      	movs	r2, #0
 800e524:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d022      	beq.n	800e576 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e53a:	2b10      	cmp	r3, #16
 800e53c:	d11b      	bne.n	800e576 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e54a:	d202      	bcs.n	800e552 <lwip_netconn_do_recv+0x3e>
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	b29b      	uxth	r3, r3
 800e550:	e001      	b.n	800e556 <lwip_netconn_do_recv+0x42>
 800e552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e556:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	89fa      	ldrh	r2, [r7, #14]
 800e560:	4611      	mov	r1, r2
 800e562:	4618      	mov	r0, r3
 800e564:	f002 fe22 	bl	80111ac <tcp_recved>
        remaining -= recved;
 800e568:	89fb      	ldrh	r3, [r7, #14]
 800e56a:	697a      	ldr	r2, [r7, #20]
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1e6      	bne.n	800e544 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d012      	beq.n	800e5a4 <lwip_netconn_do_recv+0x90>
 800e57e:	f00a fbb3 	bl	8018ce8 <sys_arch_protect>
 800e582:	60b8      	str	r0, [r7, #8]
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e58c:	f113 0f0c 	cmn.w	r3, #12
 800e590:	db05      	blt.n	800e59e <lwip_netconn_do_recv+0x8a>
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e59c:	721a      	strb	r2, [r3, #8]
 800e59e:	68b8      	ldr	r0, [r7, #8]
 800e5a0:	f00a fbb0 	bl	8018d04 <sys_arch_unprotect>
}
 800e5a4:	bf00      	nop
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08a      	sub	sp, #40	; 0x28
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d106      	bne.n	800e5d2 <lwip_netconn_do_writemore+0x26>
 800e5c4:	4ba3      	ldr	r3, [pc, #652]	; (800e854 <lwip_netconn_do_writemore+0x2a8>)
 800e5c6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800e5ca:	49a3      	ldr	r1, [pc, #652]	; (800e858 <lwip_netconn_do_writemore+0x2ac>)
 800e5cc:	48a3      	ldr	r0, [pc, #652]	; (800e85c <lwip_netconn_do_writemore+0x2b0>)
 800e5ce:	f00a fbef 	bl	8018db0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	785b      	ldrb	r3, [r3, #1]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d006      	beq.n	800e5e8 <lwip_netconn_do_writemore+0x3c>
 800e5da:	4b9e      	ldr	r3, [pc, #632]	; (800e854 <lwip_netconn_do_writemore+0x2a8>)
 800e5dc:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800e5e0:	499f      	ldr	r1, [pc, #636]	; (800e860 <lwip_netconn_do_writemore+0x2b4>)
 800e5e2:	489e      	ldr	r0, [pc, #632]	; (800e85c <lwip_netconn_do_writemore+0x2b0>)
 800e5e4:	f00a fbe4 	bl	8018db0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d106      	bne.n	800e5fe <lwip_netconn_do_writemore+0x52>
 800e5f0:	4b98      	ldr	r3, [pc, #608]	; (800e854 <lwip_netconn_do_writemore+0x2a8>)
 800e5f2:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800e5f6:	499b      	ldr	r1, [pc, #620]	; (800e864 <lwip_netconn_do_writemore+0x2b8>)
 800e5f8:	4898      	ldr	r0, [pc, #608]	; (800e85c <lwip_netconn_do_writemore+0x2b0>)
 800e5fa:	f00a fbd9 	bl	8018db0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <lwip_netconn_do_writemore+0x68>
 800e606:	4b93      	ldr	r3, [pc, #588]	; (800e854 <lwip_netconn_do_writemore+0x2a8>)
 800e608:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800e60c:	4996      	ldr	r1, [pc, #600]	; (800e868 <lwip_netconn_do_writemore+0x2bc>)
 800e60e:	4893      	ldr	r0, [pc, #588]	; (800e85c <lwip_netconn_do_writemore+0x2b0>)
 800e610:	f00a fbce 	bl	8018db0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a1a      	ldr	r2, [r3, #32]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d306      	bcc.n	800e630 <lwip_netconn_do_writemore+0x84>
 800e622:	4b8c      	ldr	r3, [pc, #560]	; (800e854 <lwip_netconn_do_writemore+0x2a8>)
 800e624:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800e628:	4990      	ldr	r1, [pc, #576]	; (800e86c <lwip_netconn_do_writemore+0x2c0>)
 800e62a:	488c      	ldr	r0, [pc, #560]	; (800e85c <lwip_netconn_do_writemore+0x2b0>)
 800e62c:	f00a fbc0 	bl	8018db0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e634:	7c1b      	ldrb	r3, [r3, #16]
 800e636:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	7f1b      	ldrb	r3, [r3, #28]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d105      	bne.n	800e652 <lwip_netconn_do_writemore+0xa6>
 800e646:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e64a:	f003 0304 	and.w	r3, r3, #4
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <lwip_netconn_do_writemore+0xaa>
 800e652:	2301      	movs	r3, #1
 800e654:	e000      	b.n	800e658 <lwip_netconn_do_writemore+0xac>
 800e656:	2300      	movs	r3, #0
 800e658:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e660:	689a      	ldr	r2, [r3, #8]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	4413      	add	r3, r2
 800e668:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66e:	68da      	ldr	r2, [r3, #12]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a1b      	ldr	r3, [r3, #32]
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e67e:	d309      	bcc.n	800e694 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800e680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e684:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800e686:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e68a:	f043 0302 	orr.w	r3, r3, #2
 800e68e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e692:	e001      	b.n	800e698 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6a0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800e6a2:	8afa      	ldrh	r2, [r7, #22]
 800e6a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d212      	bcs.n	800e6d0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800e6aa:	8afb      	ldrh	r3, [r7, #22]
 800e6ac:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800e6ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d006      	beq.n	800e6c4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800e6b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d109      	bne.n	800e6d0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800e6bc:	23f9      	movs	r3, #249	; 0xf9
 800e6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800e6c2:	e02a      	b.n	800e71a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e6c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e6c8:	f043 0302 	orr.w	r3, r3, #2
 800e6cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a1a      	ldr	r2, [r3, #32]
 800e6d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6d6:	441a      	add	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d906      	bls.n	800e6f0 <lwip_netconn_do_writemore+0x144>
 800e6e2:	4b5c      	ldr	r3, [pc, #368]	; (800e854 <lwip_netconn_do_writemore+0x2a8>)
 800e6e4:	f240 6213 	movw	r2, #1555	; 0x613
 800e6e8:	4961      	ldr	r1, [pc, #388]	; (800e870 <lwip_netconn_do_writemore+0x2c4>)
 800e6ea:	485c      	ldr	r0, [pc, #368]	; (800e85c <lwip_netconn_do_writemore+0x2b0>)
 800e6ec:	f00a fb60 	bl	8018db0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6858      	ldr	r0, [r3, #4]
 800e6f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e6f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6fa:	69f9      	ldr	r1, [r7, #28]
 800e6fc:	f006 f97a 	bl	80149f4 <tcp_write>
 800e700:	4603      	mov	r3, r0
 800e702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e706:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <lwip_netconn_do_writemore+0x16c>
 800e70e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e716:	d133      	bne.n	800e780 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800e718:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800e71a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d017      	beq.n	800e752 <lwip_netconn_do_writemore+0x1a6>
 800e722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d211      	bcs.n	800e752 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e732:	2b00      	cmp	r3, #0
 800e734:	d005      	beq.n	800e742 <lwip_netconn_do_writemore+0x196>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e73c:	2103      	movs	r1, #3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7f1b      	ldrb	r3, [r3, #28]
 800e746:	f043 0310 	orr.w	r3, r3, #16
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	771a      	strb	r2, [r3, #28]
 800e750:	e016      	b.n	800e780 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e75a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e75e:	d305      	bcc.n	800e76c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e768:	2b04      	cmp	r3, #4
 800e76a:	d909      	bls.n	800e780 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <lwip_netconn_do_writemore+0x1d4>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e778:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e77a:	2103      	movs	r1, #3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e780:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e784:	2b00      	cmp	r3, #0
 800e786:	d134      	bne.n	800e7f2 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a1a      	ldr	r2, [r3, #32]
 800e78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78e:	441a      	add	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a1a      	ldr	r2, [r3, #32]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d003      	beq.n	800e7aa <lwip_netconn_do_writemore+0x1fe>
 800e7a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d007      	beq.n	800e7ba <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	6a12      	ldr	r2, [r2, #32]
 800e7b2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f006 fdca 	bl	8015358 <tcp_output>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800e7c8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e7cc:	f113 0f0c 	cmn.w	r3, #12
 800e7d0:	db04      	blt.n	800e7dc <lwip_netconn_do_writemore+0x230>
 800e7d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e7d6:	f113 0f04 	cmn.w	r3, #4
 800e7da:	d152      	bne.n	800e882 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e7dc:	7d3b      	ldrb	r3, [r7, #20]
 800e7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	60da      	str	r2, [r3, #12]
 800e7f0:	e047      	b.n	800e882 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800e7f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fa:	d13b      	bne.n	800e874 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	4618      	mov	r0, r3
 800e802:	f006 fda9 	bl	8015358 <tcp_output>
 800e806:	4603      	mov	r3, r0
 800e808:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800e80a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800e80e:	f113 0f0c 	cmn.w	r3, #12
 800e812:	db04      	blt.n	800e81e <lwip_netconn_do_writemore+0x272>
 800e814:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800e818:	f113 0f04 	cmn.w	r3, #4
 800e81c:	d10a      	bne.n	800e834 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e81e:	7d7b      	ldrb	r3, [r7, #21]
 800e820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e824:	2301      	movs	r3, #1
 800e826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82e:	2200      	movs	r2, #0
 800e830:	60da      	str	r2, [r3, #12]
 800e832:	e026      	b.n	800e882 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800e834:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d022      	beq.n	800e882 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800e83c:	23f9      	movs	r3, #249	; 0xf9
 800e83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e842:	2301      	movs	r3, #1
 800e844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84c:	2200      	movs	r2, #0
 800e84e:	60da      	str	r2, [r3, #12]
 800e850:	e017      	b.n	800e882 <lwip_netconn_do_writemore+0x2d6>
 800e852:	bf00      	nop
 800e854:	08019f6c 	.word	0x08019f6c
 800e858:	0801a0b4 	.word	0x0801a0b4
 800e85c:	08019fe8 	.word	0x08019fe8
 800e860:	0801a394 	.word	0x0801a394
 800e864:	0801a0c4 	.word	0x0801a0c4
 800e868:	0801a3b4 	.word	0x0801a3b4
 800e86c:	0801a3cc 	.word	0x0801a3cc
 800e870:	0801a400 	.word	0x0801a400
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e874:	2301      	movs	r3, #1
 800e876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87e:	2200      	movs	r2, #0
 800e880:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800e882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e886:	2b00      	cmp	r3, #0
 800e888:	d02c      	beq.n	800e8e4 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	330c      	adds	r3, #12
 800e892:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e898:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e89c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00f      	beq.n	800e8d6 <lwip_netconn_do_writemore+0x32a>
 800e8b6:	f00a fa17 	bl	8018ce8 <sys_arch_protect>
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e8c2:	f113 0f0c 	cmn.w	r3, #12
 800e8c6:	db03      	blt.n	800e8d0 <lwip_netconn_do_writemore+0x324>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e8ce:	721a      	strb	r2, [r3, #8]
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f00a fa17 	bl	8018d04 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e8d6:	78fb      	ldrb	r3, [r7, #3]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d006      	beq.n	800e8ea <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e8dc:	6938      	ldr	r0, [r7, #16]
 800e8de:	f00a f95e 	bl	8018b9e <sys_sem_signal>
 800e8e2:	e002      	b.n	800e8ea <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e8:	e000      	b.n	800e8ec <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3728      	adds	r7, #40	; 0x28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e908:	f113 0f0c 	cmn.w	r3, #12
 800e90c:	da06      	bge.n	800e91c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	711a      	strb	r2, [r3, #4]
 800e91a:	e072      	b.n	800ea02 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e926:	2b10      	cmp	r3, #16
 800e928:	d168      	bne.n	800e9fc <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	785b      	ldrb	r3, [r3, #1]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d003      	beq.n	800e93c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	22fb      	movs	r2, #251	; 0xfb
 800e938:	711a      	strb	r2, [r3, #4]
 800e93a:	e062      	b.n	800ea02 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d056      	beq.n	800e9f4 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2201      	movs	r2, #1
 800e94c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e954:	2b00      	cmp	r3, #0
 800e956:	d104      	bne.n	800e962 <lwip_netconn_do_write+0x6e>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d006      	beq.n	800e970 <lwip_netconn_do_write+0x7c>
 800e962:	4b36      	ldr	r3, [pc, #216]	; (800ea3c <lwip_netconn_do_write+0x148>)
 800e964:	f240 6283 	movw	r2, #1667	; 0x683
 800e968:	4935      	ldr	r1, [pc, #212]	; (800ea40 <lwip_netconn_do_write+0x14c>)
 800e96a:	4836      	ldr	r0, [pc, #216]	; (800ea44 <lwip_netconn_do_write+0x150>)
 800e96c:	f00a fa20 	bl	8018db0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d106      	bne.n	800e986 <lwip_netconn_do_write+0x92>
 800e978:	4b30      	ldr	r3, [pc, #192]	; (800ea3c <lwip_netconn_do_write+0x148>)
 800e97a:	f240 6284 	movw	r2, #1668	; 0x684
 800e97e:	4932      	ldr	r1, [pc, #200]	; (800ea48 <lwip_netconn_do_write+0x154>)
 800e980:	4830      	ldr	r0, [pc, #192]	; (800ea44 <lwip_netconn_do_write+0x150>)
 800e982:	f00a fa15 	bl	8018db0 <iprintf>
        msg->conn->current_msg = msg;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2200      	movs	r2, #0
 800e994:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2100      	movs	r1, #0
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff fe05 	bl	800e5ac <lwip_netconn_do_writemore>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d044      	beq.n	800ea32 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	785b      	ldrb	r3, [r3, #1]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d006      	beq.n	800e9c0 <lwip_netconn_do_write+0xcc>
 800e9b2:	4b22      	ldr	r3, [pc, #136]	; (800ea3c <lwip_netconn_do_write+0x148>)
 800e9b4:	f240 6289 	movw	r2, #1673	; 0x689
 800e9b8:	4924      	ldr	r1, [pc, #144]	; (800ea4c <lwip_netconn_do_write+0x158>)
 800e9ba:	4822      	ldr	r0, [pc, #136]	; (800ea44 <lwip_netconn_do_write+0x150>)
 800e9bc:	f00a f9f8 	bl	8018db0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e9c0:	4823      	ldr	r0, [pc, #140]	; (800ea50 <lwip_netconn_do_write+0x15c>)
 800e9c2:	f00a f95e 	bl	8018c82 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	330c      	adds	r3, #12
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f00a f8b4 	bl	8018b3c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e9d4:	481e      	ldr	r0, [pc, #120]	; (800ea50 <lwip_netconn_do_write+0x15c>)
 800e9d6:	f00a f945 	bl	8018c64 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d126      	bne.n	800ea32 <lwip_netconn_do_write+0x13e>
 800e9e4:	4b15      	ldr	r3, [pc, #84]	; (800ea3c <lwip_netconn_do_write+0x148>)
 800e9e6:	f240 628d 	movw	r2, #1677	; 0x68d
 800e9ea:	4918      	ldr	r1, [pc, #96]	; (800ea4c <lwip_netconn_do_write+0x158>)
 800e9ec:	4815      	ldr	r0, [pc, #84]	; (800ea44 <lwip_netconn_do_write+0x150>)
 800e9ee:	f00a f9df 	bl	8018db0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e9f2:	e01e      	b.n	800ea32 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	22f5      	movs	r2, #245	; 0xf5
 800e9f8:	711a      	strb	r2, [r3, #4]
 800e9fa:	e002      	b.n	800ea02 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	22fa      	movs	r2, #250	; 0xfa
 800ea00:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d014      	beq.n	800ea34 <lwip_netconn_do_write+0x140>
 800ea0a:	f00a f96d 	bl	8018ce8 <sys_arch_protect>
 800ea0e:	60b8      	str	r0, [r7, #8]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea18:	f113 0f0c 	cmn.w	r3, #12
 800ea1c:	db05      	blt.n	800ea2a <lwip_netconn_do_write+0x136>
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ea28:	721a      	strb	r2, [r3, #8]
 800ea2a:	68b8      	ldr	r0, [r7, #8]
 800ea2c:	f00a f96a 	bl	8018d04 <sys_arch_unprotect>
 800ea30:	e000      	b.n	800ea34 <lwip_netconn_do_write+0x140>
        return;
 800ea32:	bf00      	nop
}
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	08019f6c 	.word	0x08019f6c
 800ea40:	0801a2d8 	.word	0x0801a2d8
 800ea44:	08019fe8 	.word	0x08019fe8
 800ea48:	0801a42c 	.word	0x0801a42c
 800ea4c:	0801a2f4 	.word	0x0801a2f4
 800ea50:	200048f0 	.word	0x200048f0

0800ea54 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b086      	sub	sp, #24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	785b      	ldrb	r3, [r3, #1]
 800ea66:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d06e      	beq.n	800eb50 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ea7c:	2b10      	cmp	r3, #16
 800ea7e:	d167      	bne.n	800eb50 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ea84:	2b03      	cmp	r3, #3
 800ea86:	d002      	beq.n	800ea8e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ea88:	7cfb      	ldrb	r3, [r7, #19]
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d060      	beq.n	800eb50 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ea8e:	7cfb      	ldrb	r3, [r7, #19]
 800ea90:	2b03      	cmp	r3, #3
 800ea92:	d103      	bne.n	800ea9c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	22f5      	movs	r2, #245	; 0xf5
 800ea98:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ea9a:	e05c      	b.n	800eb56 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800ea9c:	7cfb      	ldrb	r3, [r7, #19]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d103      	bne.n	800eaaa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	22fb      	movs	r2, #251	; 0xfb
 800eaa6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eaa8:	e055      	b.n	800eb56 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	7a1b      	ldrb	r3, [r3, #8]
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d004      	beq.n	800eac0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff f90e 	bl	800dcdc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d104      	bne.n	800ead4 <lwip_netconn_do_close+0x80>
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6a1b      	ldr	r3, [r3, #32]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d006      	beq.n	800eae2 <lwip_netconn_do_close+0x8e>
 800ead4:	4b2e      	ldr	r3, [pc, #184]	; (800eb90 <lwip_netconn_do_close+0x13c>)
 800ead6:	f240 721c 	movw	r2, #1820	; 0x71c
 800eada:	492e      	ldr	r1, [pc, #184]	; (800eb94 <lwip_netconn_do_close+0x140>)
 800eadc:	482e      	ldr	r0, [pc, #184]	; (800eb98 <lwip_netconn_do_close+0x144>)
 800eade:	f00a f967 	bl	8018db0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2204      	movs	r2, #4
 800eae8:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7ff f96f 	bl	800dddc <lwip_netconn_do_close_internal>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d040      	beq.n	800eb86 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	785b      	ldrb	r3, [r3, #1]
 800eb0a:	2b04      	cmp	r3, #4
 800eb0c:	d006      	beq.n	800eb1c <lwip_netconn_do_close+0xc8>
 800eb0e:	4b20      	ldr	r3, [pc, #128]	; (800eb90 <lwip_netconn_do_close+0x13c>)
 800eb10:	f240 7221 	movw	r2, #1825	; 0x721
 800eb14:	4921      	ldr	r1, [pc, #132]	; (800eb9c <lwip_netconn_do_close+0x148>)
 800eb16:	4820      	ldr	r0, [pc, #128]	; (800eb98 <lwip_netconn_do_close+0x144>)
 800eb18:	f00a f94a 	bl	8018db0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800eb1c:	4820      	ldr	r0, [pc, #128]	; (800eba0 <lwip_netconn_do_close+0x14c>)
 800eb1e:	f00a f8b0 	bl	8018c82 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	330c      	adds	r3, #12
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f00a f806 	bl	8018b3c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800eb30:	481b      	ldr	r0, [pc, #108]	; (800eba0 <lwip_netconn_do_close+0x14c>)
 800eb32:	f00a f897 	bl	8018c64 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	785b      	ldrb	r3, [r3, #1]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d022      	beq.n	800eb86 <lwip_netconn_do_close+0x132>
 800eb40:	4b13      	ldr	r3, [pc, #76]	; (800eb90 <lwip_netconn_do_close+0x13c>)
 800eb42:	f240 7225 	movw	r2, #1829	; 0x725
 800eb46:	4915      	ldr	r1, [pc, #84]	; (800eb9c <lwip_netconn_do_close+0x148>)
 800eb48:	4813      	ldr	r0, [pc, #76]	; (800eb98 <lwip_netconn_do_close+0x144>)
 800eb4a:	f00a f931 	bl	8018db0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800eb4e:	e01a      	b.n	800eb86 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	22f5      	movs	r2, #245	; 0xf5
 800eb54:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d014      	beq.n	800eb88 <lwip_netconn_do_close+0x134>
 800eb5e:	f00a f8c3 	bl	8018ce8 <sys_arch_protect>
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eb6c:	f113 0f0c 	cmn.w	r3, #12
 800eb70:	db05      	blt.n	800eb7e <lwip_netconn_do_close+0x12a>
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800eb7c:	721a      	strb	r2, [r3, #8]
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f00a f8c0 	bl	8018d04 <sys_arch_unprotect>
 800eb84:	e000      	b.n	800eb88 <lwip_netconn_do_close+0x134>
      return;
 800eb86:	bf00      	nop
}
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	08019f6c 	.word	0x08019f6c
 800eb94:	0801a2d8 	.word	0x0801a2d8
 800eb98:	08019fe8 	.word	0x08019fe8
 800eb9c:	0801a2f4 	.word	0x0801a2f4
 800eba0:	200048f0 	.word	0x200048f0

0800eba4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d013      	beq.n	800ebda <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00b      	beq.n	800ebd2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f001 fc1a 	bl	80103f8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	605a      	str	r2, [r3, #4]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	2006      	movs	r0, #6
 800ebd6:	f000 fe77 	bl	800f8c8 <memp_free>
  }
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
	...

0800ebe4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d108      	bne.n	800ec08 <netbuf_data+0x24>
 800ebf6:	4b1b      	ldr	r3, [pc, #108]	; (800ec64 <netbuf_data+0x80>)
 800ebf8:	22c2      	movs	r2, #194	; 0xc2
 800ebfa:	491b      	ldr	r1, [pc, #108]	; (800ec68 <netbuf_data+0x84>)
 800ebfc:	481b      	ldr	r0, [pc, #108]	; (800ec6c <netbuf_data+0x88>)
 800ebfe:	f00a f8d7 	bl	8018db0 <iprintf>
 800ec02:	f06f 030f 	mvn.w	r3, #15
 800ec06:	e029      	b.n	800ec5c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d108      	bne.n	800ec20 <netbuf_data+0x3c>
 800ec0e:	4b15      	ldr	r3, [pc, #84]	; (800ec64 <netbuf_data+0x80>)
 800ec10:	22c3      	movs	r2, #195	; 0xc3
 800ec12:	4917      	ldr	r1, [pc, #92]	; (800ec70 <netbuf_data+0x8c>)
 800ec14:	4815      	ldr	r0, [pc, #84]	; (800ec6c <netbuf_data+0x88>)
 800ec16:	f00a f8cb 	bl	8018db0 <iprintf>
 800ec1a:	f06f 030f 	mvn.w	r3, #15
 800ec1e:	e01d      	b.n	800ec5c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d108      	bne.n	800ec38 <netbuf_data+0x54>
 800ec26:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <netbuf_data+0x80>)
 800ec28:	22c4      	movs	r2, #196	; 0xc4
 800ec2a:	4912      	ldr	r1, [pc, #72]	; (800ec74 <netbuf_data+0x90>)
 800ec2c:	480f      	ldr	r0, [pc, #60]	; (800ec6c <netbuf_data+0x88>)
 800ec2e:	f00a f8bf 	bl	8018db0 <iprintf>
 800ec32:	f06f 030f 	mvn.w	r3, #15
 800ec36:	e011      	b.n	800ec5c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d102      	bne.n	800ec46 <netbuf_data+0x62>
    return ERR_BUF;
 800ec40:	f06f 0301 	mvn.w	r3, #1
 800ec44:	e00a      	b.n	800ec5c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	685a      	ldr	r2, [r3, #4]
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	895a      	ldrh	r2, [r3, #10]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	0801a458 	.word	0x0801a458
 800ec68:	0801a580 	.word	0x0801a580
 800ec6c:	0801a4c8 	.word	0x0801a4c8
 800ec70:	0801a59c 	.word	0x0801a59c
 800ec74:	0801a5bc 	.word	0x0801a5bc

0800ec78 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d108      	bne.n	800ec98 <netbuf_next+0x20>
 800ec86:	4b11      	ldr	r3, [pc, #68]	; (800eccc <netbuf_next+0x54>)
 800ec88:	22dc      	movs	r2, #220	; 0xdc
 800ec8a:	4911      	ldr	r1, [pc, #68]	; (800ecd0 <netbuf_next+0x58>)
 800ec8c:	4811      	ldr	r0, [pc, #68]	; (800ecd4 <netbuf_next+0x5c>)
 800ec8e:	f00a f88f 	bl	8018db0 <iprintf>
 800ec92:	f04f 33ff 	mov.w	r3, #4294967295
 800ec96:	e014      	b.n	800ecc2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d102      	bne.n	800eca8 <netbuf_next+0x30>
    return -1;
 800eca2:	f04f 33ff 	mov.w	r3, #4294967295
 800eca6:	e00c      	b.n	800ecc2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <netbuf_next+0x48>
    return 1;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e000      	b.n	800ecc2 <netbuf_next+0x4a>
  }
  return 0;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	0801a458 	.word	0x0801a458
 800ecd0:	0801a5d8 	.word	0x0801a5d8
 800ecd4:	0801a4c8 	.word	0x0801a4c8

0800ecd8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800ece0:	4b29      	ldr	r3, [pc, #164]	; (800ed88 <tcpip_thread+0xb0>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d005      	beq.n	800ecf4 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800ece8:	4b27      	ldr	r3, [pc, #156]	; (800ed88 <tcpip_thread+0xb0>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a27      	ldr	r2, [pc, #156]	; (800ed8c <tcpip_thread+0xb4>)
 800ecee:	6812      	ldr	r2, [r2, #0]
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800ecf4:	4826      	ldr	r0, [pc, #152]	; (800ed90 <tcpip_thread+0xb8>)
 800ecf6:	f009 ffb5 	bl	8018c64 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800ecfa:	4825      	ldr	r0, [pc, #148]	; (800ed90 <tcpip_thread+0xb8>)
 800ecfc:	f009 ffc1 	bl	8018c82 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800ed00:	f107 030c 	add.w	r3, r7, #12
 800ed04:	4619      	mov	r1, r3
 800ed06:	4823      	ldr	r0, [pc, #140]	; (800ed94 <tcpip_thread+0xbc>)
 800ed08:	f007 f97c 	bl	8016004 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ed0c:	4820      	ldr	r0, [pc, #128]	; (800ed90 <tcpip_thread+0xb8>)
 800ed0e:	f009 ffa9 	bl	8018c64 <sys_mutex_lock>
    if (msg == NULL) {
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed18:	4b1f      	ldr	r3, [pc, #124]	; (800ed98 <tcpip_thread+0xc0>)
 800ed1a:	2269      	movs	r2, #105	; 0x69
 800ed1c:	491f      	ldr	r1, [pc, #124]	; (800ed9c <tcpip_thread+0xc4>)
 800ed1e:	4820      	ldr	r0, [pc, #128]	; (800eda0 <tcpip_thread+0xc8>)
 800ed20:	f00a f846 	bl	8018db0 <iprintf>
      continue;
 800ed24:	e02f      	b.n	800ed86 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b03      	cmp	r3, #3
 800ed2c:	d011      	beq.n	800ed52 <tcpip_thread+0x7a>
 800ed2e:	2b04      	cmp	r3, #4
 800ed30:	d01b      	beq.n	800ed6a <tcpip_thread+0x92>
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d120      	bne.n	800ed78 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	6850      	ldr	r0, [r2, #4]
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	6892      	ldr	r2, [r2, #8]
 800ed42:	4611      	mov	r1, r2
 800ed44:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	2009      	movs	r0, #9
 800ed4c:	f000 fdbc 	bl	800f8c8 <memp_free>
      break;
 800ed50:	e019      	b.n	800ed86 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	6892      	ldr	r2, [r2, #8]
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	4619      	mov	r1, r3
 800ed62:	2008      	movs	r0, #8
 800ed64:	f000 fdb0 	bl	800f8c8 <memp_free>
      break;
 800ed68:	e00d      	b.n	800ed86 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	6892      	ldr	r2, [r2, #8]
 800ed72:	4610      	mov	r0, r2
 800ed74:	4798      	blx	r3
      break;
 800ed76:	e006      	b.n	800ed86 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed78:	4b07      	ldr	r3, [pc, #28]	; (800ed98 <tcpip_thread+0xc0>)
 800ed7a:	229b      	movs	r2, #155	; 0x9b
 800ed7c:	4907      	ldr	r1, [pc, #28]	; (800ed9c <tcpip_thread+0xc4>)
 800ed7e:	4808      	ldr	r0, [pc, #32]	; (800eda0 <tcpip_thread+0xc8>)
 800ed80:	f00a f816 	bl	8018db0 <iprintf>
      break;
 800ed84:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800ed86:	e7b8      	b.n	800ecfa <tcpip_thread+0x22>
 800ed88:	20004060 	.word	0x20004060
 800ed8c:	20004064 	.word	0x20004064
 800ed90:	200048f0 	.word	0x200048f0
 800ed94:	20004068 	.word	0x20004068
 800ed98:	0801a610 	.word	0x0801a610
 800ed9c:	0801a664 	.word	0x0801a664
 800eda0:	0801a684 	.word	0x0801a684

0800eda4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800edb0:	481a      	ldr	r0, [pc, #104]	; (800ee1c <tcpip_inpkt+0x78>)
 800edb2:	f009 fe7d 	bl	8018ab0 <sys_mbox_valid>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d105      	bne.n	800edc8 <tcpip_inpkt+0x24>
 800edbc:	4b18      	ldr	r3, [pc, #96]	; (800ee20 <tcpip_inpkt+0x7c>)
 800edbe:	22b5      	movs	r2, #181	; 0xb5
 800edc0:	4918      	ldr	r1, [pc, #96]	; (800ee24 <tcpip_inpkt+0x80>)
 800edc2:	4819      	ldr	r0, [pc, #100]	; (800ee28 <tcpip_inpkt+0x84>)
 800edc4:	f009 fff4 	bl	8018db0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800edc8:	2009      	movs	r0, #9
 800edca:	f000 fd07 	bl	800f7dc <memp_malloc>
 800edce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d102      	bne.n	800eddc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800edd6:	f04f 33ff 	mov.w	r3, #4294967295
 800edda:	e01a      	b.n	800ee12 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2202      	movs	r2, #2
 800ede0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800edf4:	6979      	ldr	r1, [r7, #20]
 800edf6:	4809      	ldr	r0, [pc, #36]	; (800ee1c <tcpip_inpkt+0x78>)
 800edf8:	f009 fde5 	bl	80189c6 <sys_mbox_trypost>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d006      	beq.n	800ee10 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee02:	6979      	ldr	r1, [r7, #20]
 800ee04:	2009      	movs	r0, #9
 800ee06:	f000 fd5f 	bl	800f8c8 <memp_free>
    return ERR_MEM;
 800ee0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee0e:	e000      	b.n	800ee12 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ee10:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20004068 	.word	0x20004068
 800ee20:	0801a610 	.word	0x0801a610
 800ee24:	0801a6ac 	.word	0x0801a6ac
 800ee28:	0801a684 	.word	0x0801a684

0800ee2c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ee3c:	f003 0318 	and.w	r3, r3, #24
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d006      	beq.n	800ee52 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ee44:	4a08      	ldr	r2, [pc, #32]	; (800ee68 <tcpip_input+0x3c>)
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff ffab 	bl	800eda4 <tcpip_inpkt>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	e005      	b.n	800ee5e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800ee52:	4a06      	ldr	r2, [pc, #24]	; (800ee6c <tcpip_input+0x40>)
 800ee54:	6839      	ldr	r1, [r7, #0]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff ffa4 	bl	800eda4 <tcpip_inpkt>
 800ee5c:	4603      	mov	r3, r0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	0801877d 	.word	0x0801877d
 800ee6c:	08017741 	.word	0x08017741

0800ee70 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800ee7e:	481d      	ldr	r0, [pc, #116]	; (800eef4 <tcpip_callback_with_block+0x84>)
 800ee80:	f009 fe16 	bl	8018ab0 <sys_mbox_valid>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d105      	bne.n	800ee96 <tcpip_callback_with_block+0x26>
 800ee8a:	4b1b      	ldr	r3, [pc, #108]	; (800eef8 <tcpip_callback_with_block+0x88>)
 800ee8c:	22ee      	movs	r2, #238	; 0xee
 800ee8e:	491b      	ldr	r1, [pc, #108]	; (800eefc <tcpip_callback_with_block+0x8c>)
 800ee90:	481b      	ldr	r0, [pc, #108]	; (800ef00 <tcpip_callback_with_block+0x90>)
 800ee92:	f009 ff8d 	bl	8018db0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ee96:	2008      	movs	r0, #8
 800ee98:	f000 fca0 	bl	800f7dc <memp_malloc>
 800ee9c:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d102      	bne.n	800eeaa <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800eea4:	f04f 33ff 	mov.w	r3, #4294967295
 800eea8:	e01f      	b.n	800eeea <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2203      	movs	r2, #3
 800eeae:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	609a      	str	r2, [r3, #8]
  if (block) {
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d004      	beq.n	800eecc <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800eec2:	6979      	ldr	r1, [r7, #20]
 800eec4:	480b      	ldr	r0, [pc, #44]	; (800eef4 <tcpip_callback_with_block+0x84>)
 800eec6:	f009 fd69 	bl	801899c <sys_mbox_post>
 800eeca:	e00d      	b.n	800eee8 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800eecc:	6979      	ldr	r1, [r7, #20]
 800eece:	4809      	ldr	r0, [pc, #36]	; (800eef4 <tcpip_callback_with_block+0x84>)
 800eed0:	f009 fd79 	bl	80189c6 <sys_mbox_trypost>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d006      	beq.n	800eee8 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800eeda:	6979      	ldr	r1, [r7, #20]
 800eedc:	2008      	movs	r0, #8
 800eede:	f000 fcf3 	bl	800f8c8 <memp_free>
      return ERR_MEM;
 800eee2:	f04f 33ff 	mov.w	r3, #4294967295
 800eee6:	e000      	b.n	800eeea <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	20004068 	.word	0x20004068
 800eef8:	0801a610 	.word	0x0801a610
 800eefc:	0801a6ac 	.word	0x0801a6ac
 800ef00:	0801a684 	.word	0x0801a684

0800ef04 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ef10:	4806      	ldr	r0, [pc, #24]	; (800ef2c <tcpip_send_msg_wait_sem+0x28>)
 800ef12:	f009 fea7 	bl	8018c64 <sys_mutex_lock>
  fn(apimsg);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	68b8      	ldr	r0, [r7, #8]
 800ef1a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ef1c:	4803      	ldr	r0, [pc, #12]	; (800ef2c <tcpip_send_msg_wait_sem+0x28>)
 800ef1e:	f009 feb0 	bl	8018c82 <sys_mutex_unlock>
  return ERR_OK;
 800ef22:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3710      	adds	r7, #16
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	200048f0 	.word	0x200048f0

0800ef30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ef3a:	f000 f86a 	bl	800f012 <lwip_init>

  tcpip_init_done = initfunc;
 800ef3e:	4a17      	ldr	r2, [pc, #92]	; (800ef9c <tcpip_init+0x6c>)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ef44:	4a16      	ldr	r2, [pc, #88]	; (800efa0 <tcpip_init+0x70>)
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ef4a:	2106      	movs	r1, #6
 800ef4c:	4815      	ldr	r0, [pc, #84]	; (800efa4 <tcpip_init+0x74>)
 800ef4e:	f009 fcf1 	bl	8018934 <sys_mbox_new>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d006      	beq.n	800ef66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ef58:	4b13      	ldr	r3, [pc, #76]	; (800efa8 <tcpip_init+0x78>)
 800ef5a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ef5e:	4913      	ldr	r1, [pc, #76]	; (800efac <tcpip_init+0x7c>)
 800ef60:	4813      	ldr	r0, [pc, #76]	; (800efb0 <tcpip_init+0x80>)
 800ef62:	f009 ff25 	bl	8018db0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ef66:	4813      	ldr	r0, [pc, #76]	; (800efb4 <tcpip_init+0x84>)
 800ef68:	f009 fe60 	bl	8018c2c <sys_mutex_new>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ef72:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <tcpip_init+0x78>)
 800ef74:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ef78:	490f      	ldr	r1, [pc, #60]	; (800efb8 <tcpip_init+0x88>)
 800ef7a:	480d      	ldr	r0, [pc, #52]	; (800efb0 <tcpip_init+0x80>)
 800ef7c:	f009 ff18 	bl	8018db0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ef80:	2300      	movs	r3, #0
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef88:	2200      	movs	r2, #0
 800ef8a:	490c      	ldr	r1, [pc, #48]	; (800efbc <tcpip_init+0x8c>)
 800ef8c:	480c      	ldr	r0, [pc, #48]	; (800efc0 <tcpip_init+0x90>)
 800ef8e:	f009 fe85 	bl	8018c9c <sys_thread_new>
}
 800ef92:	bf00      	nop
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20004060 	.word	0x20004060
 800efa0:	20004064 	.word	0x20004064
 800efa4:	20004068 	.word	0x20004068
 800efa8:	0801a610 	.word	0x0801a610
 800efac:	0801a6bc 	.word	0x0801a6bc
 800efb0:	0801a684 	.word	0x0801a684
 800efb4:	200048f0 	.word	0x200048f0
 800efb8:	0801a6e0 	.word	0x0801a6e0
 800efbc:	0800ecd9 	.word	0x0800ecd9
 800efc0:	0801a704 	.word	0x0801a704

0800efc4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	4603      	mov	r3, r0
 800efcc:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800efce:	88fb      	ldrh	r3, [r7, #6]
 800efd0:	ba5b      	rev16	r3, r3
 800efd2:	b29b      	uxth	r3, r3
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	061a      	lsls	r2, r3, #24
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	021b      	lsls	r3, r3, #8
 800eff0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eff4:	431a      	orrs	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	0a1b      	lsrs	r3, r3, #8
 800effa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800effe:	431a      	orrs	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	0e1b      	lsrs	r3, r3, #24
 800f004:	4313      	orrs	r3, r2
}
 800f006:	4618      	mov	r0, r3
 800f008:	370c      	adds	r7, #12
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr

0800f012 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b082      	sub	sp, #8
 800f016:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f01c:	f009 fdf8 	bl	8018c10 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f020:	f000 f8a6 	bl	800f170 <mem_init>
  memp_init();
 800f024:	f000 fb6c 	bl	800f700 <memp_init>
  pbuf_init();
  netif_init();
 800f028:	f000 fc78 	bl	800f91c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f02c:	f007 f810 	bl	8016050 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f030:	f001 fc58 	bl	80108e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f034:	f006 fea2 	bl	8015d7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f038:	bf00      	nop
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f048:	4b40      	ldr	r3, [pc, #256]	; (800f14c <plug_holes+0x10c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d206      	bcs.n	800f060 <plug_holes+0x20>
 800f052:	4b3f      	ldr	r3, [pc, #252]	; (800f150 <plug_holes+0x110>)
 800f054:	f240 125d 	movw	r2, #349	; 0x15d
 800f058:	493e      	ldr	r1, [pc, #248]	; (800f154 <plug_holes+0x114>)
 800f05a:	483f      	ldr	r0, [pc, #252]	; (800f158 <plug_holes+0x118>)
 800f05c:	f009 fea8 	bl	8018db0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f060:	4b3e      	ldr	r3, [pc, #248]	; (800f15c <plug_holes+0x11c>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	429a      	cmp	r2, r3
 800f068:	d306      	bcc.n	800f078 <plug_holes+0x38>
 800f06a:	4b39      	ldr	r3, [pc, #228]	; (800f150 <plug_holes+0x110>)
 800f06c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f070:	493b      	ldr	r1, [pc, #236]	; (800f160 <plug_holes+0x120>)
 800f072:	4839      	ldr	r0, [pc, #228]	; (800f158 <plug_holes+0x118>)
 800f074:	f009 fe9c 	bl	8018db0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d006      	beq.n	800f08e <plug_holes+0x4e>
 800f080:	4b33      	ldr	r3, [pc, #204]	; (800f150 <plug_holes+0x110>)
 800f082:	f240 125f 	movw	r2, #351	; 0x15f
 800f086:	4937      	ldr	r1, [pc, #220]	; (800f164 <plug_holes+0x124>)
 800f088:	4833      	ldr	r0, [pc, #204]	; (800f158 <plug_holes+0x118>)
 800f08a:	f009 fe91 	bl	8018db0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	881b      	ldrh	r3, [r3, #0]
 800f092:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f096:	d906      	bls.n	800f0a6 <plug_holes+0x66>
 800f098:	4b2d      	ldr	r3, [pc, #180]	; (800f150 <plug_holes+0x110>)
 800f09a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f09e:	4932      	ldr	r1, [pc, #200]	; (800f168 <plug_holes+0x128>)
 800f0a0:	482d      	ldr	r0, [pc, #180]	; (800f158 <plug_holes+0x118>)
 800f0a2:	f009 fe85 	bl	8018db0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f0a6:	4b29      	ldr	r3, [pc, #164]	; (800f14c <plug_holes+0x10c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	8812      	ldrh	r2, [r2, #0]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d01f      	beq.n	800f0fa <plug_holes+0xba>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	791b      	ldrb	r3, [r3, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d11b      	bne.n	800f0fa <plug_holes+0xba>
 800f0c2:	4b26      	ldr	r3, [pc, #152]	; (800f15c <plug_holes+0x11c>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d016      	beq.n	800f0fa <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f0cc:	4b27      	ldr	r3, [pc, #156]	; (800f16c <plug_holes+0x12c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d102      	bne.n	800f0dc <plug_holes+0x9c>
      lfree = mem;
 800f0d6:	4a25      	ldr	r2, [pc, #148]	; (800f16c <plug_holes+0x12c>)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	881a      	ldrh	r2, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a19      	ldr	r2, [pc, #100]	; (800f14c <plug_holes+0x10c>)
 800f0e8:	6812      	ldr	r2, [r2, #0]
 800f0ea:	1a99      	subs	r1, r3, r2
 800f0ec:	4b17      	ldr	r3, [pc, #92]	; (800f14c <plug_holes+0x10c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	8812      	ldrh	r2, [r2, #0]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	b28a      	uxth	r2, r1
 800f0f8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f0fa:	4b14      	ldr	r3, [pc, #80]	; (800f14c <plug_holes+0x10c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	8852      	ldrh	r2, [r2, #2]
 800f102:	4413      	add	r3, r2
 800f104:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d01a      	beq.n	800f144 <plug_holes+0x104>
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	791b      	ldrb	r3, [r3, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d116      	bne.n	800f144 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f116:	4b15      	ldr	r3, [pc, #84]	; (800f16c <plug_holes+0x12c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d102      	bne.n	800f126 <plug_holes+0xe6>
      lfree = pmem;
 800f120:	4a12      	ldr	r2, [pc, #72]	; (800f16c <plug_holes+0x12c>)
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	881a      	ldrh	r2, [r3, #0]
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	4a06      	ldr	r2, [pc, #24]	; (800f14c <plug_holes+0x10c>)
 800f132:	6812      	ldr	r2, [r2, #0]
 800f134:	1a99      	subs	r1, r3, r2
 800f136:	4b05      	ldr	r3, [pc, #20]	; (800f14c <plug_holes+0x10c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	8812      	ldrh	r2, [r2, #0]
 800f13e:	4413      	add	r3, r2
 800f140:	b28a      	uxth	r2, r1
 800f142:	805a      	strh	r2, [r3, #2]
  }
}
 800f144:	bf00      	nop
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	2000406c 	.word	0x2000406c
 800f150:	0801a714 	.word	0x0801a714
 800f154:	0801a768 	.word	0x0801a768
 800f158:	0801a780 	.word	0x0801a780
 800f15c:	20004070 	.word	0x20004070
 800f160:	0801a7a8 	.word	0x0801a7a8
 800f164:	0801a7c4 	.word	0x0801a7c4
 800f168:	0801a7e0 	.word	0x0801a7e0
 800f16c:	20004074 	.word	0x20004074

0800f170 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f176:	4b1c      	ldr	r3, [pc, #112]	; (800f1e8 <mem_init+0x78>)
 800f178:	4a1c      	ldr	r2, [pc, #112]	; (800f1ec <mem_init+0x7c>)
 800f17a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f17c:	4b1a      	ldr	r3, [pc, #104]	; (800f1e8 <mem_init+0x78>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f188:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f196:	4b14      	ldr	r3, [pc, #80]	; (800f1e8 <mem_init+0x78>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800f19e:	4a14      	ldr	r2, [pc, #80]	; (800f1f0 <mem_init+0x80>)
 800f1a0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f1a2:	4b13      	ldr	r3, [pc, #76]	; (800f1f0 <mem_init+0x80>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f1aa:	4b11      	ldr	r3, [pc, #68]	; (800f1f0 <mem_init+0x80>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f1b2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f1b4:	4b0e      	ldr	r3, [pc, #56]	; (800f1f0 <mem_init+0x80>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f1bc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f1be:	4b0a      	ldr	r3, [pc, #40]	; (800f1e8 <mem_init+0x78>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a0c      	ldr	r2, [pc, #48]	; (800f1f4 <mem_init+0x84>)
 800f1c4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f1c6:	480c      	ldr	r0, [pc, #48]	; (800f1f8 <mem_init+0x88>)
 800f1c8:	f009 fd30 	bl	8018c2c <sys_mutex_new>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d006      	beq.n	800f1e0 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f1d2:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <mem_init+0x8c>)
 800f1d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f1d8:	4909      	ldr	r1, [pc, #36]	; (800f200 <mem_init+0x90>)
 800f1da:	480a      	ldr	r0, [pc, #40]	; (800f204 <mem_init+0x94>)
 800f1dc:	f009 fde8 	bl	8018db0 <iprintf>
  }
}
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	2000406c 	.word	0x2000406c
 800f1ec:	30044000 	.word	0x30044000
 800f1f0:	20004070 	.word	0x20004070
 800f1f4:	20004074 	.word	0x20004074
 800f1f8:	20004078 	.word	0x20004078
 800f1fc:	0801a714 	.word	0x0801a714
 800f200:	0801a80c 	.word	0x0801a80c
 800f204:	0801a780 	.word	0x0801a780

0800f208 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d050      	beq.n	800f2b8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f003 0303 	and.w	r3, r3, #3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d006      	beq.n	800f22e <mem_free+0x26>
 800f220:	4b27      	ldr	r3, [pc, #156]	; (800f2c0 <mem_free+0xb8>)
 800f222:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f226:	4927      	ldr	r1, [pc, #156]	; (800f2c4 <mem_free+0xbc>)
 800f228:	4827      	ldr	r0, [pc, #156]	; (800f2c8 <mem_free+0xc0>)
 800f22a:	f009 fdc1 	bl	8018db0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f22e:	4b27      	ldr	r3, [pc, #156]	; (800f2cc <mem_free+0xc4>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	429a      	cmp	r2, r3
 800f236:	d304      	bcc.n	800f242 <mem_free+0x3a>
 800f238:	4b25      	ldr	r3, [pc, #148]	; (800f2d0 <mem_free+0xc8>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d306      	bcc.n	800f250 <mem_free+0x48>
 800f242:	4b1f      	ldr	r3, [pc, #124]	; (800f2c0 <mem_free+0xb8>)
 800f244:	f240 12af 	movw	r2, #431	; 0x1af
 800f248:	4922      	ldr	r1, [pc, #136]	; (800f2d4 <mem_free+0xcc>)
 800f24a:	481f      	ldr	r0, [pc, #124]	; (800f2c8 <mem_free+0xc0>)
 800f24c:	f009 fdb0 	bl	8018db0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f250:	4b1e      	ldr	r3, [pc, #120]	; (800f2cc <mem_free+0xc4>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	429a      	cmp	r2, r3
 800f258:	d304      	bcc.n	800f264 <mem_free+0x5c>
 800f25a:	4b1d      	ldr	r3, [pc, #116]	; (800f2d0 <mem_free+0xc8>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	429a      	cmp	r2, r3
 800f262:	d306      	bcc.n	800f272 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f264:	f009 fd40 	bl	8018ce8 <sys_arch_protect>
 800f268:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f26a:	68b8      	ldr	r0, [r7, #8]
 800f26c:	f009 fd4a 	bl	8018d04 <sys_arch_unprotect>
    return;
 800f270:	e023      	b.n	800f2ba <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f272:	4819      	ldr	r0, [pc, #100]	; (800f2d8 <mem_free+0xd0>)
 800f274:	f009 fcf6 	bl	8018c64 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3b08      	subs	r3, #8
 800f27c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	791b      	ldrb	r3, [r3, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d106      	bne.n	800f294 <mem_free+0x8c>
 800f286:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <mem_free+0xb8>)
 800f288:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f28c:	4913      	ldr	r1, [pc, #76]	; (800f2dc <mem_free+0xd4>)
 800f28e:	480e      	ldr	r0, [pc, #56]	; (800f2c8 <mem_free+0xc0>)
 800f290:	f009 fd8e 	bl	8018db0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2200      	movs	r2, #0
 800f298:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f29a:	4b11      	ldr	r3, [pc, #68]	; (800f2e0 <mem_free+0xd8>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d202      	bcs.n	800f2aa <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f2a4:	4a0e      	ldr	r2, [pc, #56]	; (800f2e0 <mem_free+0xd8>)
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff fec8 	bl	800f040 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f2b0:	4809      	ldr	r0, [pc, #36]	; (800f2d8 <mem_free+0xd0>)
 800f2b2:	f009 fce6 	bl	8018c82 <sys_mutex_unlock>
 800f2b6:	e000      	b.n	800f2ba <mem_free+0xb2>
    return;
 800f2b8:	bf00      	nop
}
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	0801a714 	.word	0x0801a714
 800f2c4:	0801a828 	.word	0x0801a828
 800f2c8:	0801a780 	.word	0x0801a780
 800f2cc:	2000406c 	.word	0x2000406c
 800f2d0:	20004070 	.word	0x20004070
 800f2d4:	0801a84c 	.word	0x0801a84c
 800f2d8:	20004078 	.word	0x20004078
 800f2dc:	0801a864 	.word	0x0801a864
 800f2e0:	20004074 	.word	0x20004074

0800f2e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800f2f0:	887b      	ldrh	r3, [r7, #2]
 800f2f2:	3303      	adds	r3, #3
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	f023 0303 	bic.w	r3, r3, #3
 800f2fa:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800f2fc:	887b      	ldrh	r3, [r7, #2]
 800f2fe:	2b0b      	cmp	r3, #11
 800f300:	d801      	bhi.n	800f306 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f302:	230c      	movs	r3, #12
 800f304:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800f306:	887b      	ldrh	r3, [r7, #2]
 800f308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f30c:	d901      	bls.n	800f312 <mem_trim+0x2e>
    return NULL;
 800f30e:	2300      	movs	r3, #0
 800f310:	e0bd      	b.n	800f48e <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f312:	4b61      	ldr	r3, [pc, #388]	; (800f498 <mem_trim+0x1b4>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d304      	bcc.n	800f326 <mem_trim+0x42>
 800f31c:	4b5f      	ldr	r3, [pc, #380]	; (800f49c <mem_trim+0x1b8>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	429a      	cmp	r2, r3
 800f324:	d306      	bcc.n	800f334 <mem_trim+0x50>
 800f326:	4b5e      	ldr	r3, [pc, #376]	; (800f4a0 <mem_trim+0x1bc>)
 800f328:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f32c:	495d      	ldr	r1, [pc, #372]	; (800f4a4 <mem_trim+0x1c0>)
 800f32e:	485e      	ldr	r0, [pc, #376]	; (800f4a8 <mem_trim+0x1c4>)
 800f330:	f009 fd3e 	bl	8018db0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f334:	4b58      	ldr	r3, [pc, #352]	; (800f498 <mem_trim+0x1b4>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d304      	bcc.n	800f348 <mem_trim+0x64>
 800f33e:	4b57      	ldr	r3, [pc, #348]	; (800f49c <mem_trim+0x1b8>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	429a      	cmp	r2, r3
 800f346:	d307      	bcc.n	800f358 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f348:	f009 fcce 	bl	8018ce8 <sys_arch_protect>
 800f34c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f009 fcd8 	bl	8018d04 <sys_arch_unprotect>
    return rmem;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	e09a      	b.n	800f48e <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	3b08      	subs	r3, #8
 800f35c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	4a4d      	ldr	r2, [pc, #308]	; (800f498 <mem_trim+0x1b4>)
 800f362:	6812      	ldr	r2, [r2, #0]
 800f364:	1a9b      	subs	r3, r3, r2
 800f366:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	881a      	ldrh	r2, [r3, #0]
 800f36c:	8b7b      	ldrh	r3, [r7, #26]
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	b29b      	uxth	r3, r3
 800f372:	3b08      	subs	r3, #8
 800f374:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f376:	887a      	ldrh	r2, [r7, #2]
 800f378:	8b3b      	ldrh	r3, [r7, #24]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d906      	bls.n	800f38c <mem_trim+0xa8>
 800f37e:	4b48      	ldr	r3, [pc, #288]	; (800f4a0 <mem_trim+0x1bc>)
 800f380:	f240 2206 	movw	r2, #518	; 0x206
 800f384:	4949      	ldr	r1, [pc, #292]	; (800f4ac <mem_trim+0x1c8>)
 800f386:	4848      	ldr	r0, [pc, #288]	; (800f4a8 <mem_trim+0x1c4>)
 800f388:	f009 fd12 	bl	8018db0 <iprintf>
  if (newsize > size) {
 800f38c:	887a      	ldrh	r2, [r7, #2]
 800f38e:	8b3b      	ldrh	r3, [r7, #24]
 800f390:	429a      	cmp	r2, r3
 800f392:	d901      	bls.n	800f398 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f394:	2300      	movs	r3, #0
 800f396:	e07a      	b.n	800f48e <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800f398:	887a      	ldrh	r2, [r7, #2]
 800f39a:	8b3b      	ldrh	r3, [r7, #24]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d101      	bne.n	800f3a4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	e074      	b.n	800f48e <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3a4:	4842      	ldr	r0, [pc, #264]	; (800f4b0 <mem_trim+0x1cc>)
 800f3a6:	f009 fc5d 	bl	8018c64 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800f3aa:	4b3b      	ldr	r3, [pc, #236]	; (800f498 <mem_trim+0x1b4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	69fa      	ldr	r2, [r7, #28]
 800f3b0:	8812      	ldrh	r2, [r2, #0]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	791b      	ldrb	r3, [r3, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d131      	bne.n	800f422 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	881b      	ldrh	r3, [r3, #0]
 800f3c2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f3c4:	8b7a      	ldrh	r2, [r7, #26]
 800f3c6:	887b      	ldrh	r3, [r7, #2]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	3308      	adds	r3, #8
 800f3ce:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800f3d0:	4b38      	ldr	r3, [pc, #224]	; (800f4b4 <mem_trim+0x1d0>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	697a      	ldr	r2, [r7, #20]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d105      	bne.n	800f3e6 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800f3da:	4b2f      	ldr	r3, [pc, #188]	; (800f498 <mem_trim+0x1b4>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	8a7b      	ldrh	r3, [r7, #18]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	4a34      	ldr	r2, [pc, #208]	; (800f4b4 <mem_trim+0x1d0>)
 800f3e4:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f3e6:	4b2c      	ldr	r3, [pc, #176]	; (800f498 <mem_trim+0x1b4>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	8a7b      	ldrh	r3, [r7, #18]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	8a3a      	ldrh	r2, [r7, #16]
 800f3fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	8b7a      	ldrh	r2, [r7, #26]
 800f400:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	8a7a      	ldrh	r2, [r7, #18]
 800f406:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f410:	d039      	beq.n	800f486 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f412:	4b21      	ldr	r3, [pc, #132]	; (800f498 <mem_trim+0x1b4>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	8812      	ldrh	r2, [r2, #0]
 800f41a:	4413      	add	r3, r2
 800f41c:	8a7a      	ldrh	r2, [r7, #18]
 800f41e:	805a      	strh	r2, [r3, #2]
 800f420:	e031      	b.n	800f486 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f422:	887b      	ldrh	r3, [r7, #2]
 800f424:	f103 0214 	add.w	r2, r3, #20
 800f428:	8b3b      	ldrh	r3, [r7, #24]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d82b      	bhi.n	800f486 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f42e:	8b7a      	ldrh	r2, [r7, #26]
 800f430:	887b      	ldrh	r3, [r7, #2]
 800f432:	4413      	add	r3, r2
 800f434:	b29b      	uxth	r3, r3
 800f436:	3308      	adds	r3, #8
 800f438:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f43a:	4b17      	ldr	r3, [pc, #92]	; (800f498 <mem_trim+0x1b4>)
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	8a7b      	ldrh	r3, [r7, #18]
 800f440:	4413      	add	r3, r2
 800f442:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800f444:	4b1b      	ldr	r3, [pc, #108]	; (800f4b4 <mem_trim+0x1d0>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d202      	bcs.n	800f454 <mem_trim+0x170>
      lfree = mem2;
 800f44e:	4a19      	ldr	r2, [pc, #100]	; (800f4b4 <mem_trim+0x1d0>)
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2200      	movs	r2, #0
 800f458:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	881a      	ldrh	r2, [r3, #0]
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	8b7a      	ldrh	r2, [r7, #26]
 800f466:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	8a7a      	ldrh	r2, [r7, #18]
 800f46c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f476:	d006      	beq.n	800f486 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f478:	4b07      	ldr	r3, [pc, #28]	; (800f498 <mem_trim+0x1b4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	697a      	ldr	r2, [r7, #20]
 800f47e:	8812      	ldrh	r2, [r2, #0]
 800f480:	4413      	add	r3, r2
 800f482:	8a7a      	ldrh	r2, [r7, #18]
 800f484:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f486:	480a      	ldr	r0, [pc, #40]	; (800f4b0 <mem_trim+0x1cc>)
 800f488:	f009 fbfb 	bl	8018c82 <sys_mutex_unlock>
  return rmem;
 800f48c:	687b      	ldr	r3, [r7, #4]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3720      	adds	r7, #32
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	2000406c 	.word	0x2000406c
 800f49c:	20004070 	.word	0x20004070
 800f4a0:	0801a714 	.word	0x0801a714
 800f4a4:	0801a878 	.word	0x0801a878
 800f4a8:	0801a780 	.word	0x0801a780
 800f4ac:	0801a890 	.word	0x0801a890
 800f4b0:	20004078 	.word	0x20004078
 800f4b4:	20004074 	.word	0x20004074

0800f4b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b088      	sub	sp, #32
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800f4c2:	88fb      	ldrh	r3, [r7, #6]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <mem_malloc+0x14>
    return NULL;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	e0d1      	b.n	800f670 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800f4cc:	88fb      	ldrh	r3, [r7, #6]
 800f4ce:	3303      	adds	r3, #3
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	f023 0303 	bic.w	r3, r3, #3
 800f4d6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800f4d8:	88fb      	ldrh	r3, [r7, #6]
 800f4da:	2b0b      	cmp	r3, #11
 800f4dc:	d801      	bhi.n	800f4e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f4de:	230c      	movs	r3, #12
 800f4e0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800f4e2:	88fb      	ldrh	r3, [r7, #6]
 800f4e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f4e8:	d901      	bls.n	800f4ee <mem_malloc+0x36>
    return NULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e0c0      	b.n	800f670 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f4ee:	4862      	ldr	r0, [pc, #392]	; (800f678 <mem_malloc+0x1c0>)
 800f4f0:	f009 fbb8 	bl	8018c64 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f4f4:	4b61      	ldr	r3, [pc, #388]	; (800f67c <mem_malloc+0x1c4>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	4b61      	ldr	r3, [pc, #388]	; (800f680 <mem_malloc+0x1c8>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	83fb      	strh	r3, [r7, #30]
 800f502:	e0aa      	b.n	800f65a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800f504:	4b5e      	ldr	r3, [pc, #376]	; (800f680 <mem_malloc+0x1c8>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	8bfb      	ldrh	r3, [r7, #30]
 800f50a:	4413      	add	r3, r2
 800f50c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	791b      	ldrb	r3, [r3, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	f040 809b 	bne.w	800f64e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	881b      	ldrh	r3, [r3, #0]
 800f51c:	461a      	mov	r2, r3
 800f51e:	8bfb      	ldrh	r3, [r7, #30]
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	f1a3 0208 	sub.w	r2, r3, #8
 800f526:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800f528:	429a      	cmp	r2, r3
 800f52a:	f0c0 8090 	bcc.w	800f64e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	8bfb      	ldrh	r3, [r7, #30]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	f1a3 0208 	sub.w	r2, r3, #8
 800f53c:	88fb      	ldrh	r3, [r7, #6]
 800f53e:	3314      	adds	r3, #20
 800f540:	429a      	cmp	r2, r3
 800f542:	d327      	bcc.n	800f594 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800f544:	8bfa      	ldrh	r2, [r7, #30]
 800f546:	88fb      	ldrh	r3, [r7, #6]
 800f548:	4413      	add	r3, r2
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	3308      	adds	r3, #8
 800f54e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800f550:	4b4b      	ldr	r3, [pc, #300]	; (800f680 <mem_malloc+0x1c8>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	8a7b      	ldrh	r3, [r7, #18]
 800f556:	4413      	add	r3, r2
 800f558:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	881a      	ldrh	r2, [r3, #0]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	8bfa      	ldrh	r2, [r7, #30]
 800f56c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	8a7a      	ldrh	r2, [r7, #18]
 800f572:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2201      	movs	r2, #1
 800f578:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f582:	d00a      	beq.n	800f59a <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f584:	4b3e      	ldr	r3, [pc, #248]	; (800f680 <mem_malloc+0x1c8>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	8812      	ldrh	r2, [r2, #0]
 800f58c:	4413      	add	r3, r2
 800f58e:	8a7a      	ldrh	r2, [r7, #18]
 800f590:	805a      	strh	r2, [r3, #2]
 800f592:	e002      	b.n	800f59a <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2201      	movs	r2, #1
 800f598:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f59a:	4b38      	ldr	r3, [pc, #224]	; (800f67c <mem_malloc+0x1c4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d127      	bne.n	800f5f4 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800f5a4:	4b35      	ldr	r3, [pc, #212]	; (800f67c <mem_malloc+0x1c4>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f5aa:	e005      	b.n	800f5b8 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800f5ac:	4b34      	ldr	r3, [pc, #208]	; (800f680 <mem_malloc+0x1c8>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	69ba      	ldr	r2, [r7, #24]
 800f5b2:	8812      	ldrh	r2, [r2, #0]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	791b      	ldrb	r3, [r3, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d004      	beq.n	800f5ca <mem_malloc+0x112>
 800f5c0:	4b30      	ldr	r3, [pc, #192]	; (800f684 <mem_malloc+0x1cc>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	69ba      	ldr	r2, [r7, #24]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d1f0      	bne.n	800f5ac <mem_malloc+0xf4>
          }
          lfree = cur;
 800f5ca:	4a2c      	ldr	r2, [pc, #176]	; (800f67c <mem_malloc+0x1c4>)
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f5d0:	4b2a      	ldr	r3, [pc, #168]	; (800f67c <mem_malloc+0x1c4>)
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	4b2b      	ldr	r3, [pc, #172]	; (800f684 <mem_malloc+0x1cc>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d00b      	beq.n	800f5f4 <mem_malloc+0x13c>
 800f5dc:	4b27      	ldr	r3, [pc, #156]	; (800f67c <mem_malloc+0x1c4>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	791b      	ldrb	r3, [r3, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d006      	beq.n	800f5f4 <mem_malloc+0x13c>
 800f5e6:	4b28      	ldr	r3, [pc, #160]	; (800f688 <mem_malloc+0x1d0>)
 800f5e8:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f5ec:	4927      	ldr	r1, [pc, #156]	; (800f68c <mem_malloc+0x1d4>)
 800f5ee:	4828      	ldr	r0, [pc, #160]	; (800f690 <mem_malloc+0x1d8>)
 800f5f0:	f009 fbde 	bl	8018db0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f5f4:	4820      	ldr	r0, [pc, #128]	; (800f678 <mem_malloc+0x1c0>)
 800f5f6:	f009 fb44 	bl	8018c82 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f5fa:	88fa      	ldrh	r2, [r7, #6]
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	4413      	add	r3, r2
 800f600:	3308      	adds	r3, #8
 800f602:	4a20      	ldr	r2, [pc, #128]	; (800f684 <mem_malloc+0x1cc>)
 800f604:	6812      	ldr	r2, [r2, #0]
 800f606:	4293      	cmp	r3, r2
 800f608:	d906      	bls.n	800f618 <mem_malloc+0x160>
 800f60a:	4b1f      	ldr	r3, [pc, #124]	; (800f688 <mem_malloc+0x1d0>)
 800f60c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f610:	4920      	ldr	r1, [pc, #128]	; (800f694 <mem_malloc+0x1dc>)
 800f612:	481f      	ldr	r0, [pc, #124]	; (800f690 <mem_malloc+0x1d8>)
 800f614:	f009 fbcc 	bl	8018db0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f003 0303 	and.w	r3, r3, #3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d006      	beq.n	800f630 <mem_malloc+0x178>
 800f622:	4b19      	ldr	r3, [pc, #100]	; (800f688 <mem_malloc+0x1d0>)
 800f624:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f628:	491b      	ldr	r1, [pc, #108]	; (800f698 <mem_malloc+0x1e0>)
 800f62a:	4819      	ldr	r0, [pc, #100]	; (800f690 <mem_malloc+0x1d8>)
 800f62c:	f009 fbc0 	bl	8018db0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	f003 0303 	and.w	r3, r3, #3
 800f636:	2b00      	cmp	r3, #0
 800f638:	d006      	beq.n	800f648 <mem_malloc+0x190>
 800f63a:	4b13      	ldr	r3, [pc, #76]	; (800f688 <mem_malloc+0x1d0>)
 800f63c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f640:	4916      	ldr	r1, [pc, #88]	; (800f69c <mem_malloc+0x1e4>)
 800f642:	4813      	ldr	r0, [pc, #76]	; (800f690 <mem_malloc+0x1d8>)
 800f644:	f009 fbb4 	bl	8018db0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	3308      	adds	r3, #8
 800f64c:	e010      	b.n	800f670 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800f64e:	4b0c      	ldr	r3, [pc, #48]	; (800f680 <mem_malloc+0x1c8>)
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	8bfb      	ldrh	r3, [r7, #30]
 800f654:	4413      	add	r3, r2
 800f656:	881b      	ldrh	r3, [r3, #0]
 800f658:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f65a:	8bfa      	ldrh	r2, [r7, #30]
 800f65c:	88fb      	ldrh	r3, [r7, #6]
 800f65e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f662:	429a      	cmp	r2, r3
 800f664:	f4ff af4e 	bcc.w	800f504 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f668:	4803      	ldr	r0, [pc, #12]	; (800f678 <mem_malloc+0x1c0>)
 800f66a:	f009 fb0a 	bl	8018c82 <sys_mutex_unlock>
  return NULL;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	20004078 	.word	0x20004078
 800f67c:	20004074 	.word	0x20004074
 800f680:	2000406c 	.word	0x2000406c
 800f684:	20004070 	.word	0x20004070
 800f688:	0801a714 	.word	0x0801a714
 800f68c:	0801a8b0 	.word	0x0801a8b0
 800f690:	0801a780 	.word	0x0801a780
 800f694:	0801a8cc 	.word	0x0801a8cc
 800f698:	0801a8fc 	.word	0x0801a8fc
 800f69c:	0801a92c 	.word	0x0801a92c

0800f6a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	3303      	adds	r3, #3
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f6bc:	2300      	movs	r3, #0
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	e011      	b.n	800f6e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	689b      	ldr	r3, [r3, #8]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	881b      	ldrh	r3, [r3, #0]
 800f6d8:	461a      	mov	r2, r3
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	4413      	add	r3, r2
 800f6de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	60fb      	str	r3, [r7, #12]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	885b      	ldrh	r3, [r3, #2]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	dbe7      	blt.n	800f6c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f6f2:	bf00      	nop
 800f6f4:	3714      	adds	r7, #20
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
	...

0800f700 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f706:	2300      	movs	r3, #0
 800f708:	80fb      	strh	r3, [r7, #6]
 800f70a:	e009      	b.n	800f720 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f70c:	88fb      	ldrh	r3, [r7, #6]
 800f70e:	4a08      	ldr	r2, [pc, #32]	; (800f730 <memp_init+0x30>)
 800f710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff ffc3 	bl	800f6a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	3301      	adds	r3, #1
 800f71e:	80fb      	strh	r3, [r7, #6]
 800f720:	88fb      	ldrh	r3, [r7, #6]
 800f722:	2b0c      	cmp	r3, #12
 800f724:	d9f2      	bls.n	800f70c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f726:	bf00      	nop
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	0801c634 	.word	0x0801c634

0800f734 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f73c:	f009 fad4 	bl	8018ce8 <sys_arch_protect>
 800f740:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d015      	beq.n	800f77c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	6812      	ldr	r2, [r2, #0]
 800f758:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	f003 0303 	and.w	r3, r3, #3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d006      	beq.n	800f772 <do_memp_malloc_pool+0x3e>
 800f764:	4b09      	ldr	r3, [pc, #36]	; (800f78c <do_memp_malloc_pool+0x58>)
 800f766:	f240 1249 	movw	r2, #329	; 0x149
 800f76a:	4909      	ldr	r1, [pc, #36]	; (800f790 <do_memp_malloc_pool+0x5c>)
 800f76c:	4809      	ldr	r0, [pc, #36]	; (800f794 <do_memp_malloc_pool+0x60>)
 800f76e:	f009 fb1f 	bl	8018db0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f009 fac6 	bl	8018d04 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	e003      	b.n	800f784 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f009 fac1 	bl	8018d04 <sys_arch_unprotect>
  return NULL;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3710      	adds	r7, #16
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	0801a950 	.word	0x0801a950
 800f790:	0801a9a4 	.word	0x0801a9a4
 800f794:	0801a9c8 	.word	0x0801a9c8

0800f798 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <memp_malloc_pool+0x1c>
 800f7a6:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <memp_malloc_pool+0x38>)
 800f7a8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f7ac:	4909      	ldr	r1, [pc, #36]	; (800f7d4 <memp_malloc_pool+0x3c>)
 800f7ae:	480a      	ldr	r0, [pc, #40]	; (800f7d8 <memp_malloc_pool+0x40>)
 800f7b0:	f009 fafe 	bl	8018db0 <iprintf>
  if (desc == NULL) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d101      	bne.n	800f7be <memp_malloc_pool+0x26>
    return NULL;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	e003      	b.n	800f7c6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff ffb8 	bl	800f734 <do_memp_malloc_pool>
 800f7c4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	0801a950 	.word	0x0801a950
 800f7d4:	0801a9f0 	.word	0x0801a9f0
 800f7d8:	0801a9c8 	.word	0x0801a9c8

0800f7dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	2b0c      	cmp	r3, #12
 800f7ea:	d908      	bls.n	800f7fe <memp_malloc+0x22>
 800f7ec:	4b0a      	ldr	r3, [pc, #40]	; (800f818 <memp_malloc+0x3c>)
 800f7ee:	f240 1287 	movw	r2, #391	; 0x187
 800f7f2:	490a      	ldr	r1, [pc, #40]	; (800f81c <memp_malloc+0x40>)
 800f7f4:	480a      	ldr	r0, [pc, #40]	; (800f820 <memp_malloc+0x44>)
 800f7f6:	f009 fadb 	bl	8018db0 <iprintf>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	e008      	b.n	800f810 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f7fe:	79fb      	ldrb	r3, [r7, #7]
 800f800:	4a08      	ldr	r2, [pc, #32]	; (800f824 <memp_malloc+0x48>)
 800f802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f806:	4618      	mov	r0, r3
 800f808:	f7ff ff94 	bl	800f734 <do_memp_malloc_pool>
 800f80c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f80e:	68fb      	ldr	r3, [r7, #12]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	0801a950 	.word	0x0801a950
 800f81c:	0801aa04 	.word	0x0801aa04
 800f820:	0801a9c8 	.word	0x0801a9c8
 800f824:	0801c634 	.word	0x0801c634

0800f828 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	f003 0303 	and.w	r3, r3, #3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d006      	beq.n	800f84a <do_memp_free_pool+0x22>
 800f83c:	4b0d      	ldr	r3, [pc, #52]	; (800f874 <do_memp_free_pool+0x4c>)
 800f83e:	f240 129d 	movw	r2, #413	; 0x19d
 800f842:	490d      	ldr	r1, [pc, #52]	; (800f878 <do_memp_free_pool+0x50>)
 800f844:	480d      	ldr	r0, [pc, #52]	; (800f87c <do_memp_free_pool+0x54>)
 800f846:	f009 fab3 	bl	8018db0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f84e:	f009 fa4b 	bl	8018ce8 <sys_arch_protect>
 800f852:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	68fa      	ldr	r2, [r7, #12]
 800f864:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f866:	68b8      	ldr	r0, [r7, #8]
 800f868:	f009 fa4c 	bl	8018d04 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f86c:	bf00      	nop
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	0801a950 	.word	0x0801a950
 800f878:	0801aa24 	.word	0x0801aa24
 800f87c:	0801a9c8 	.word	0x0801a9c8

0800f880 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d106      	bne.n	800f89e <memp_free_pool+0x1e>
 800f890:	4b0a      	ldr	r3, [pc, #40]	; (800f8bc <memp_free_pool+0x3c>)
 800f892:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800f896:	490a      	ldr	r1, [pc, #40]	; (800f8c0 <memp_free_pool+0x40>)
 800f898:	480a      	ldr	r0, [pc, #40]	; (800f8c4 <memp_free_pool+0x44>)
 800f89a:	f009 fa89 	bl	8018db0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d007      	beq.n	800f8b4 <memp_free_pool+0x34>
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d004      	beq.n	800f8b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff ffbb 	bl	800f828 <do_memp_free_pool>
 800f8b2:	e000      	b.n	800f8b6 <memp_free_pool+0x36>
    return;
 800f8b4:	bf00      	nop
}
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	0801a950 	.word	0x0801a950
 800f8c0:	0801a9f0 	.word	0x0801a9f0
 800f8c4:	0801a9c8 	.word	0x0801a9c8

0800f8c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	6039      	str	r1, [r7, #0]
 800f8d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	2b0c      	cmp	r3, #12
 800f8d8:	d907      	bls.n	800f8ea <memp_free+0x22>
 800f8da:	4b0c      	ldr	r3, [pc, #48]	; (800f90c <memp_free+0x44>)
 800f8dc:	f240 12db 	movw	r2, #475	; 0x1db
 800f8e0:	490b      	ldr	r1, [pc, #44]	; (800f910 <memp_free+0x48>)
 800f8e2:	480c      	ldr	r0, [pc, #48]	; (800f914 <memp_free+0x4c>)
 800f8e4:	f009 fa64 	bl	8018db0 <iprintf>
 800f8e8:	e00c      	b.n	800f904 <memp_free+0x3c>

  if (mem == NULL) {
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d008      	beq.n	800f902 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f8f0:	79fb      	ldrb	r3, [r7, #7]
 800f8f2:	4a09      	ldr	r2, [pc, #36]	; (800f918 <memp_free+0x50>)
 800f8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff ff94 	bl	800f828 <do_memp_free_pool>
 800f900:	e000      	b.n	800f904 <memp_free+0x3c>
    return;
 800f902:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	0801a950 	.word	0x0801a950
 800f910:	0801aa44 	.word	0x0801aa44
 800f914:	0801a9c8 	.word	0x0801a9c8
 800f918:	0801c634 	.word	0x0801c634

0800f91c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f91c:	b480      	push	{r7}
 800f91e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f920:	bf00      	nop
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
	...

0800f92c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	607a      	str	r2, [r7, #4]
 800f938:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d105      	bne.n	800f94c <netif_add+0x20>
 800f940:	4b1f      	ldr	r3, [pc, #124]	; (800f9c0 <netif_add+0x94>)
 800f942:	22fb      	movs	r2, #251	; 0xfb
 800f944:	491f      	ldr	r1, [pc, #124]	; (800f9c4 <netif_add+0x98>)
 800f946:	4820      	ldr	r0, [pc, #128]	; (800f9c8 <netif_add+0x9c>)
 800f948:	f009 fa32 	bl	8018db0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2200      	movs	r2, #0
 800f956:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2200      	movs	r2, #0
 800f95c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2203      	movs	r2, #3
 800f96a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	69ba      	ldr	r2, [r7, #24]
 800f972:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800f974:	4b15      	ldr	r3, [pc, #84]	; (800f9cc <netif_add+0xa0>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	1c5a      	adds	r2, r3, #1
 800f97a:	b2d1      	uxtb	r1, r2
 800f97c:	4a13      	ldr	r2, [pc, #76]	; (800f9cc <netif_add+0xa0>)
 800f97e:	7011      	strb	r1, [r2, #0]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6a3a      	ldr	r2, [r7, #32]
 800f98a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68b9      	ldr	r1, [r7, #8]
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f000 f81e 	bl	800f9d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	4798      	blx	r3
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <netif_add+0x7c>
    return NULL;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	e007      	b.n	800f9b8 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f9a8:	4b09      	ldr	r3, [pc, #36]	; (800f9d0 <netif_add+0xa4>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f9b0:	4a07      	ldr	r2, [pc, #28]	; (800f9d0 <netif_add+0xa4>)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3710      	adds	r7, #16
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	0801aa60 	.word	0x0801aa60
 800f9c4:	0801aab4 	.word	0x0801aab4
 800f9c8:	0801aacc 	.word	0x0801aacc
 800f9cc:	200040b0 	.word	0x200040b0
 800f9d0:	200079a0 	.word	0x200079a0

0800f9d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
 800f9e0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d003      	beq.n	800f9f0 <netif_set_addr+0x1c>
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10c      	bne.n	800fa0a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800f9f0:	68b9      	ldr	r1, [r7, #8]
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f000 f81a 	bl	800fa2c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800f9f8:	6879      	ldr	r1, [r7, #4]
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	f000 f862 	bl	800fac4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800fa00:	6839      	ldr	r1, [r7, #0]
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 f84a 	bl	800fa9c <netif_set_gw>
 800fa08:	e00b      	b.n	800fa22 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f000 f859 	bl	800fac4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f000 f841 	bl	800fa9c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800fa1a:	68b9      	ldr	r1, [r7, #8]
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f000 f805 	bl	800fa2c <netif_set_ipaddr>
  }
}
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
	...

0800fa2c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d003      	beq.n	800fa44 <netif_set_ipaddr+0x18>
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	60fb      	str	r3, [r7, #12]
 800fa42:	e002      	b.n	800fa4a <netif_set_ipaddr+0x1e>
 800fa44:	4b14      	ldr	r3, [pc, #80]	; (800fa98 <netif_set_ipaddr+0x6c>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	3304      	adds	r3, #4
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d01c      	beq.n	800fa90 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	3304      	adds	r3, #4
 800fa5a:	f107 020c 	add.w	r2, r7, #12
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f002 fb53 	bl	801210c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	f107 020c 	add.w	r2, r7, #12
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f006 fd27 	bl	80164c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <netif_set_ipaddr+0x56>
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	e000      	b.n	800fa84 <netif_set_ipaddr+0x58>
 800fa82:	2300      	movs	r3, #0
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fa88:	2101      	movs	r1, #1
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f861 	bl	800fb52 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800fa90:	bf00      	nop
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	0801c6a8 	.word	0x0801c6a8

0800fa9c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <netif_set_gw+0x16>
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	e000      	b.n	800fab4 <netif_set_gw+0x18>
 800fab2:	2300      	movs	r3, #0
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800fab8:	bf00      	nop
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d002      	beq.n	800fada <netif_set_netmask+0x16>
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	e000      	b.n	800fadc <netif_set_netmask+0x18>
 800fada:	2300      	movs	r3, #0
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800faf4:	4a04      	ldr	r2, [pc, #16]	; (800fb08 <netif_set_default+0x1c>)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fafa:	bf00      	nop
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	200079a4 	.word	0x200079a4

0800fb0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb1a:	f003 0301 	and.w	r3, r3, #1
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d113      	bne.n	800fb4a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb28:	f043 0301 	orr.w	r3, r3, #1
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb3a:	f003 0304 	and.w	r3, r3, #4
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d003      	beq.n	800fb4a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800fb42:	2103      	movs	r1, #3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 f804 	bl	800fb52 <netif_issue_reports>
    }
  }
}
 800fb4a:	bf00      	nop
 800fb4c:	3708      	adds	r7, #8
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b082      	sub	sp, #8
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb5e:	78fb      	ldrb	r3, [r7, #3]
 800fb60:	f003 0301 	and.w	r3, r3, #1
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d011      	beq.n	800fb8c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00c      	beq.n	800fb8c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fb78:	f003 0308 	and.w	r3, r3, #8
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d005      	beq.n	800fb8c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3304      	adds	r3, #4
 800fb84:	4619      	mov	r1, r3
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f007 fbd0 	bl	801732c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fba2:	f003 0301 	and.w	r3, r3, #1
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d012      	beq.n	800fbd0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbb0:	f023 0301 	bic.w	r3, r3, #1
 800fbb4:	b2da      	uxtb	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbc2:	f003 0308 	and.w	r3, r3, #8
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d002      	beq.n	800fbd0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f006 ff74 	bl	8016ab8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbe6:	f003 0304 	and.w	r3, r3, #4
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d113      	bne.n	800fc16 <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fbf4:	f043 0304 	orr.w	r3, r3, #4
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc06:	f003 0301 	and.w	r3, r3, #1
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800fc0e:	2103      	movs	r1, #3
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7ff ff9e 	bl	800fb52 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 800fc16:	bf00      	nop
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800fc1e:	b480      	push	{r7}
 800fc20:	b083      	sub	sp, #12
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc2c:	f003 0304 	and.w	r3, r3, #4
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d008      	beq.n	800fc46 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fc3a:	f023 0304 	bic.w	r3, r3, #4
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 800fc46:	bf00      	nop
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
	...

0800fc54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fc5a:	f009 f845 	bl	8018ce8 <sys_arch_protect>
 800fc5e:	6038      	str	r0, [r7, #0]
 800fc60:	4b0f      	ldr	r3, [pc, #60]	; (800fca0 <pbuf_free_ooseq+0x4c>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	701a      	strb	r2, [r3, #0]
 800fc66:	6838      	ldr	r0, [r7, #0]
 800fc68:	f009 f84c 	bl	8018d04 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc6c:	4b0d      	ldr	r3, [pc, #52]	; (800fca4 <pbuf_free_ooseq+0x50>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	607b      	str	r3, [r7, #4]
 800fc72:	e00f      	b.n	800fc94 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d008      	beq.n	800fc8e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc80:	4618      	mov	r0, r3
 800fc82:	f001 febe 	bl	8011a02 <tcp_segs_free>
      pcb->ooseq = NULL;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800fc8c:	e005      	b.n	800fc9a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	607b      	str	r3, [r7, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1ec      	bne.n	800fc74 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	200079a8 	.word	0x200079a8
 800fca4:	200079b0 	.word	0x200079b0

0800fca8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fcb0:	f7ff ffd0 	bl	800fc54 <pbuf_free_ooseq>
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fcc2:	f009 f811 	bl	8018ce8 <sys_arch_protect>
 800fcc6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fcc8:	4b10      	ldr	r3, [pc, #64]	; (800fd0c <pbuf_pool_is_empty+0x50>)
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fcce:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <pbuf_pool_is_empty+0x50>)
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f009 f815 	bl	8018d04 <sys_arch_unprotect>

  if (!queued) {
 800fcda:	78fb      	ldrb	r3, [r7, #3]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d110      	bne.n	800fd02 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fce0:	2200      	movs	r2, #0
 800fce2:	2100      	movs	r1, #0
 800fce4:	480a      	ldr	r0, [pc, #40]	; (800fd10 <pbuf_pool_is_empty+0x54>)
 800fce6:	f7ff f8c3 	bl	800ee70 <tcpip_callback_with_block>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d008      	beq.n	800fd02 <pbuf_pool_is_empty+0x46>
 800fcf0:	f008 fffa 	bl	8018ce8 <sys_arch_protect>
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <pbuf_pool_is_empty+0x50>)
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	701a      	strb	r2, [r3, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f009 f801 	bl	8018d04 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	200079a8 	.word	0x200079a8
 800fd10:	0800fca9 	.word	0x0800fca9

0800fd14 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b088      	sub	sp, #32
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	71fb      	strb	r3, [r7, #7]
 800fd1e:	460b      	mov	r3, r1
 800fd20:	80bb      	strh	r3, [r7, #4]
 800fd22:	4613      	mov	r3, r2
 800fd24:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800fd26:	79fb      	ldrb	r3, [r7, #7]
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	d81c      	bhi.n	800fd66 <pbuf_alloc+0x52>
 800fd2c:	a201      	add	r2, pc, #4	; (adr r2, 800fd34 <pbuf_alloc+0x20>)
 800fd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd32:	bf00      	nop
 800fd34:	0800fd49 	.word	0x0800fd49
 800fd38:	0800fd4f 	.word	0x0800fd4f
 800fd3c:	0800fd55 	.word	0x0800fd55
 800fd40:	0800fd5b 	.word	0x0800fd5b
 800fd44:	0800fd61 	.word	0x0800fd61
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fd48:	2336      	movs	r3, #54	; 0x36
 800fd4a:	82fb      	strh	r3, [r7, #22]
    break;
 800fd4c:	e014      	b.n	800fd78 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800fd4e:	2322      	movs	r3, #34	; 0x22
 800fd50:	82fb      	strh	r3, [r7, #22]
    break;
 800fd52:	e011      	b.n	800fd78 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fd54:	230e      	movs	r3, #14
 800fd56:	82fb      	strh	r3, [r7, #22]
    break;
 800fd58:	e00e      	b.n	800fd78 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	82fb      	strh	r3, [r7, #22]
    break;
 800fd5e:	e00b      	b.n	800fd78 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	82fb      	strh	r3, [r7, #22]
    break;
 800fd64:	e008      	b.n	800fd78 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800fd66:	4ba5      	ldr	r3, [pc, #660]	; (800fffc <pbuf_alloc+0x2e8>)
 800fd68:	f44f 728b 	mov.w	r2, #278	; 0x116
 800fd6c:	49a4      	ldr	r1, [pc, #656]	; (8010000 <pbuf_alloc+0x2ec>)
 800fd6e:	48a5      	ldr	r0, [pc, #660]	; (8010004 <pbuf_alloc+0x2f0>)
 800fd70:	f009 f81e 	bl	8018db0 <iprintf>
    return NULL;
 800fd74:	2300      	movs	r3, #0
 800fd76:	e15d      	b.n	8010034 <pbuf_alloc+0x320>
  }

  switch (type) {
 800fd78:	79bb      	ldrb	r3, [r7, #6]
 800fd7a:	2b03      	cmp	r3, #3
 800fd7c:	f200 8134 	bhi.w	800ffe8 <pbuf_alloc+0x2d4>
 800fd80:	a201      	add	r2, pc, #4	; (adr r2, 800fd88 <pbuf_alloc+0x74>)
 800fd82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd86:	bf00      	nop
 800fd88:	0800ff29 	.word	0x0800ff29
 800fd8c:	0800ffb5 	.word	0x0800ffb5
 800fd90:	0800ffb5 	.word	0x0800ffb5
 800fd94:	0800fd99 	.word	0x0800fd99
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fd98:	200c      	movs	r0, #12
 800fd9a:	f7ff fd1f 	bl	800f7dc <memp_malloc>
 800fd9e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d103      	bne.n	800fdae <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800fda6:	f7ff ff89 	bl	800fcbc <pbuf_pool_is_empty>
      return NULL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	e142      	b.n	8010034 <pbuf_alloc+0x320>
    }
    p->type = type;
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	79ba      	ldrb	r2, [r7, #6]
 800fdb2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800fdba:	8afb      	ldrh	r3, [r7, #22]
 800fdbc:	3310      	adds	r3, #16
 800fdbe:	69fa      	ldr	r2, [r7, #28]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	3303      	adds	r3, #3
 800fdc4:	f023 0303 	bic.w	r3, r3, #3
 800fdc8:	461a      	mov	r2, r3
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	f003 0303 	and.w	r3, r3, #3
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d006      	beq.n	800fde8 <pbuf_alloc+0xd4>
 800fdda:	4b88      	ldr	r3, [pc, #544]	; (800fffc <pbuf_alloc+0x2e8>)
 800fddc:	f240 1229 	movw	r2, #297	; 0x129
 800fde0:	4989      	ldr	r1, [pc, #548]	; (8010008 <pbuf_alloc+0x2f4>)
 800fde2:	4888      	ldr	r0, [pc, #544]	; (8010004 <pbuf_alloc+0x2f0>)
 800fde4:	f008 ffe4 	bl	8018db0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	88ba      	ldrh	r2, [r7, #4]
 800fdec:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800fdee:	8afb      	ldrh	r3, [r7, #22]
 800fdf0:	3303      	adds	r3, #3
 800fdf2:	f023 0303 	bic.w	r3, r3, #3
 800fdf6:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800fdfa:	88bb      	ldrh	r3, [r7, #4]
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	bf28      	it	cs
 800fe00:	4613      	movcs	r3, r2
 800fe02:	b29a      	uxth	r2, r3
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	69fa      	ldr	r2, [r7, #28]
 800fe0e:	8952      	ldrh	r2, [r2, #10]
 800fe10:	441a      	add	r2, r3
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d906      	bls.n	800fe2a <pbuf_alloc+0x116>
 800fe1c:	4b77      	ldr	r3, [pc, #476]	; (800fffc <pbuf_alloc+0x2e8>)
 800fe1e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800fe22:	497a      	ldr	r1, [pc, #488]	; (801000c <pbuf_alloc+0x2f8>)
 800fe24:	4877      	ldr	r0, [pc, #476]	; (8010004 <pbuf_alloc+0x2f0>)
 800fe26:	f008 ffc3 	bl	8018db0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fe2a:	8afb      	ldrh	r3, [r7, #22]
 800fe2c:	3303      	adds	r3, #3
 800fe2e:	f023 0303 	bic.w	r3, r3, #3
 800fe32:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fe36:	d106      	bne.n	800fe46 <pbuf_alloc+0x132>
 800fe38:	4b70      	ldr	r3, [pc, #448]	; (800fffc <pbuf_alloc+0x2e8>)
 800fe3a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fe3e:	4974      	ldr	r1, [pc, #464]	; (8010010 <pbuf_alloc+0x2fc>)
 800fe40:	4870      	ldr	r0, [pc, #448]	; (8010004 <pbuf_alloc+0x2f0>)
 800fe42:	f008 ffb5 	bl	8018db0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800fe50:	88bb      	ldrh	r3, [r7, #4]
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	8952      	ldrh	r2, [r2, #10]
 800fe56:	1a9b      	subs	r3, r3, r2
 800fe58:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800fe5a:	e061      	b.n	800ff20 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fe5c:	200c      	movs	r0, #12
 800fe5e:	f7ff fcbd 	bl	800f7dc <memp_malloc>
 800fe62:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800fe6a:	f7ff ff27 	bl	800fcbc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800fe6e:	69f8      	ldr	r0, [r7, #28]
 800fe70:	f000 fac2 	bl	80103f8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800fe74:	2300      	movs	r3, #0
 800fe76:	e0dd      	b.n	8010034 <pbuf_alloc+0x320>
      }
      q->type = type;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	79ba      	ldrb	r2, [r7, #6]
 800fe7c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2200      	movs	r2, #0
 800fe82:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fe96:	4293      	cmp	r3, r2
 800fe98:	dd06      	ble.n	800fea8 <pbuf_alloc+0x194>
 800fe9a:	4b58      	ldr	r3, [pc, #352]	; (800fffc <pbuf_alloc+0x2e8>)
 800fe9c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800fea0:	495c      	ldr	r1, [pc, #368]	; (8010014 <pbuf_alloc+0x300>)
 800fea2:	4858      	ldr	r0, [pc, #352]	; (8010004 <pbuf_alloc+0x2f0>)
 800fea4:	f008 ff84 	bl	8018db0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	b29a      	uxth	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800feb8:	bf28      	it	cs
 800feba:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800febe:	b29a      	uxth	r2, r3
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f103 0210 	add.w	r2, r3, #16
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	f003 0303 	and.w	r3, r3, #3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d006      	beq.n	800fee8 <pbuf_alloc+0x1d4>
 800feda:	4b48      	ldr	r3, [pc, #288]	; (800fffc <pbuf_alloc+0x2e8>)
 800fedc:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800fee0:	494d      	ldr	r1, [pc, #308]	; (8010018 <pbuf_alloc+0x304>)
 800fee2:	4848      	ldr	r0, [pc, #288]	; (8010004 <pbuf_alloc+0x2f0>)
 800fee4:	f008 ff64 	bl	8018db0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	69fa      	ldr	r2, [r7, #28]
 800feee:	8952      	ldrh	r2, [r2, #10]
 800fef0:	441a      	add	r2, r3
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d906      	bls.n	800ff0a <pbuf_alloc+0x1f6>
 800fefc:	4b3f      	ldr	r3, [pc, #252]	; (800fffc <pbuf_alloc+0x2e8>)
 800fefe:	f240 1255 	movw	r2, #341	; 0x155
 800ff02:	4942      	ldr	r1, [pc, #264]	; (801000c <pbuf_alloc+0x2f8>)
 800ff04:	483f      	ldr	r0, [pc, #252]	; (8010004 <pbuf_alloc+0x2f0>)
 800ff06:	f008 ff53 	bl	8018db0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	895b      	ldrh	r3, [r3, #10]
 800ff14:	461a      	mov	r2, r3
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	1a9b      	subs	r3, r3, r2
 800ff1a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	dc9a      	bgt.n	800fe5c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800ff26:	e07e      	b.n	8010026 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800ff28:	8afb      	ldrh	r3, [r7, #22]
 800ff2a:	3313      	adds	r3, #19
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	f023 0303 	bic.w	r3, r3, #3
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	88bb      	ldrh	r3, [r7, #4]
 800ff36:	3303      	adds	r3, #3
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	f023 0303 	bic.w	r3, r3, #3
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	4413      	add	r3, r2
 800ff42:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800ff44:	897a      	ldrh	r2, [r7, #10]
 800ff46:	88bb      	ldrh	r3, [r7, #4]
 800ff48:	3303      	adds	r3, #3
 800ff4a:	f023 0303 	bic.w	r3, r3, #3
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d201      	bcs.n	800ff56 <pbuf_alloc+0x242>
        return NULL;
 800ff52:	2300      	movs	r3, #0
 800ff54:	e06e      	b.n	8010034 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800ff56:	897b      	ldrh	r3, [r7, #10]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7ff faad 	bl	800f4b8 <mem_malloc>
 800ff5e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d101      	bne.n	800ff6a <pbuf_alloc+0x256>
      return NULL;
 800ff66:	2300      	movs	r3, #0
 800ff68:	e064      	b.n	8010034 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800ff6a:	8afb      	ldrh	r3, [r7, #22]
 800ff6c:	3310      	adds	r3, #16
 800ff6e:	69fa      	ldr	r2, [r7, #28]
 800ff70:	4413      	add	r3, r2
 800ff72:	3303      	adds	r3, #3
 800ff74:	f023 0303 	bic.w	r3, r3, #3
 800ff78:	461a      	mov	r2, r3
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	88ba      	ldrh	r2, [r7, #4]
 800ff82:	811a      	strh	r2, [r3, #8]
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	891a      	ldrh	r2, [r3, #8]
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	79ba      	ldrb	r2, [r7, #6]
 800ff96:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	f003 0303 	and.w	r3, r3, #3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d03f      	beq.n	8010024 <pbuf_alloc+0x310>
 800ffa4:	4b15      	ldr	r3, [pc, #84]	; (800fffc <pbuf_alloc+0x2e8>)
 800ffa6:	f240 1277 	movw	r2, #375	; 0x177
 800ffaa:	491c      	ldr	r1, [pc, #112]	; (801001c <pbuf_alloc+0x308>)
 800ffac:	4815      	ldr	r0, [pc, #84]	; (8010004 <pbuf_alloc+0x2f0>)
 800ffae:	f008 feff 	bl	8018db0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ffb2:	e037      	b.n	8010024 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ffb4:	200b      	movs	r0, #11
 800ffb6:	f7ff fc11 	bl	800f7dc <memp_malloc>
 800ffba:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e036      	b.n	8010034 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	88ba      	ldrh	r2, [r7, #4]
 800ffd0:	811a      	strh	r2, [r3, #8]
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	891a      	ldrh	r2, [r3, #8]
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	79ba      	ldrb	r2, [r7, #6]
 800ffe4:	731a      	strb	r2, [r3, #12]
    break;
 800ffe6:	e01e      	b.n	8010026 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <pbuf_alloc+0x2e8>)
 800ffea:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800ffee:	490c      	ldr	r1, [pc, #48]	; (8010020 <pbuf_alloc+0x30c>)
 800fff0:	4804      	ldr	r0, [pc, #16]	; (8010004 <pbuf_alloc+0x2f0>)
 800fff2:	f008 fedd 	bl	8018db0 <iprintf>
    return NULL;
 800fff6:	2300      	movs	r3, #0
 800fff8:	e01c      	b.n	8010034 <pbuf_alloc+0x320>
 800fffa:	bf00      	nop
 800fffc:	0801aaf4 	.word	0x0801aaf4
 8010000:	0801ab48 	.word	0x0801ab48
 8010004:	0801ab64 	.word	0x0801ab64
 8010008:	0801ab8c 	.word	0x0801ab8c
 801000c:	0801abbc 	.word	0x0801abbc
 8010010:	0801abf0 	.word	0x0801abf0
 8010014:	0801ac24 	.word	0x0801ac24
 8010018:	0801ac38 	.word	0x0801ac38
 801001c:	0801ac68 	.word	0x0801ac68
 8010020:	0801ac94 	.word	0x0801ac94
    break;
 8010024:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	2201      	movs	r2, #1
 801002a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	2200      	movs	r2, #0
 8010030:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010032:	69fb      	ldr	r3, [r7, #28]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3720      	adds	r7, #32
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	603b      	str	r3, [r7, #0]
 8010044:	4603      	mov	r3, r0
 8010046:	71fb      	strb	r3, [r7, #7]
 8010048:	460b      	mov	r3, r1
 801004a:	80bb      	strh	r3, [r7, #4]
 801004c:	4613      	mov	r3, r2
 801004e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010050:	79fb      	ldrb	r3, [r7, #7]
 8010052:	2b04      	cmp	r3, #4
 8010054:	d81b      	bhi.n	801008e <pbuf_alloced_custom+0x52>
 8010056:	a201      	add	r2, pc, #4	; (adr r2, 801005c <pbuf_alloced_custom+0x20>)
 8010058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801005c:	08010071 	.word	0x08010071
 8010060:	08010077 	.word	0x08010077
 8010064:	0801007d 	.word	0x0801007d
 8010068:	08010083 	.word	0x08010083
 801006c:	08010089 	.word	0x08010089
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010070:	2336      	movs	r3, #54	; 0x36
 8010072:	81fb      	strh	r3, [r7, #14]
    break;
 8010074:	e014      	b.n	80100a0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010076:	2322      	movs	r3, #34	; 0x22
 8010078:	81fb      	strh	r3, [r7, #14]
    break;
 801007a:	e011      	b.n	80100a0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801007c:	230e      	movs	r3, #14
 801007e:	81fb      	strh	r3, [r7, #14]
    break;
 8010080:	e00e      	b.n	80100a0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010082:	2300      	movs	r3, #0
 8010084:	81fb      	strh	r3, [r7, #14]
    break;
 8010086:	e00b      	b.n	80100a0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	81fb      	strh	r3, [r7, #14]
    break;
 801008c:	e008      	b.n	80100a0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801008e:	4b1d      	ldr	r3, [pc, #116]	; (8010104 <pbuf_alloced_custom+0xc8>)
 8010090:	f240 12c5 	movw	r2, #453	; 0x1c5
 8010094:	491c      	ldr	r1, [pc, #112]	; (8010108 <pbuf_alloced_custom+0xcc>)
 8010096:	481d      	ldr	r0, [pc, #116]	; (801010c <pbuf_alloced_custom+0xd0>)
 8010098:	f008 fe8a 	bl	8018db0 <iprintf>
    return NULL;
 801009c:	2300      	movs	r3, #0
 801009e:	e02d      	b.n	80100fc <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80100a0:	89fb      	ldrh	r3, [r7, #14]
 80100a2:	3303      	adds	r3, #3
 80100a4:	f023 0203 	bic.w	r2, r3, #3
 80100a8:	88bb      	ldrh	r3, [r7, #4]
 80100aa:	441a      	add	r2, r3
 80100ac:	8bbb      	ldrh	r3, [r7, #28]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d901      	bls.n	80100b6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80100b2:	2300      	movs	r3, #0
 80100b4:	e022      	b.n	80100fc <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d008      	beq.n	80100d4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80100c2:	89fb      	ldrh	r3, [r7, #14]
 80100c4:	3303      	adds	r3, #3
 80100c6:	f023 0303 	bic.w	r3, r3, #3
 80100ca:	69ba      	ldr	r2, [r7, #24]
 80100cc:	441a      	add	r2, r3
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	605a      	str	r2, [r3, #4]
 80100d2:	e002      	b.n	80100da <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2200      	movs	r2, #0
 80100d8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2202      	movs	r2, #2
 80100de:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	88ba      	ldrh	r2, [r7, #4]
 80100e4:	811a      	strh	r2, [r3, #8]
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	891a      	ldrh	r2, [r3, #8]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	79ba      	ldrb	r2, [r7, #6]
 80100f2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2201      	movs	r2, #1
 80100f8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80100fa:	683b      	ldr	r3, [r7, #0]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	0801aaf4 	.word	0x0801aaf4
 8010108:	0801acb0 	.word	0x0801acb0
 801010c:	0801ab64 	.word	0x0801ab64

08010110 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	460b      	mov	r3, r1
 801011a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <pbuf_realloc+0x20>
 8010122:	4b4b      	ldr	r3, [pc, #300]	; (8010250 <pbuf_realloc+0x140>)
 8010124:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010128:	494a      	ldr	r1, [pc, #296]	; (8010254 <pbuf_realloc+0x144>)
 801012a:	484b      	ldr	r0, [pc, #300]	; (8010258 <pbuf_realloc+0x148>)
 801012c:	f008 fe40 	bl	8018db0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	7b1b      	ldrb	r3, [r3, #12]
 8010134:	2b03      	cmp	r3, #3
 8010136:	d012      	beq.n	801015e <pbuf_realloc+0x4e>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7b1b      	ldrb	r3, [r3, #12]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d00e      	beq.n	801015e <pbuf_realloc+0x4e>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	7b1b      	ldrb	r3, [r3, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d00a      	beq.n	801015e <pbuf_realloc+0x4e>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	7b1b      	ldrb	r3, [r3, #12]
 801014c:	2b02      	cmp	r3, #2
 801014e:	d006      	beq.n	801015e <pbuf_realloc+0x4e>
 8010150:	4b3f      	ldr	r3, [pc, #252]	; (8010250 <pbuf_realloc+0x140>)
 8010152:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010156:	4941      	ldr	r1, [pc, #260]	; (801025c <pbuf_realloc+0x14c>)
 8010158:	483f      	ldr	r0, [pc, #252]	; (8010258 <pbuf_realloc+0x148>)
 801015a:	f008 fe29 	bl	8018db0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	891b      	ldrh	r3, [r3, #8]
 8010162:	887a      	ldrh	r2, [r7, #2]
 8010164:	429a      	cmp	r2, r3
 8010166:	d26f      	bcs.n	8010248 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010168:	887b      	ldrh	r3, [r7, #2]
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	8912      	ldrh	r2, [r2, #8]
 801016e:	1a9b      	subs	r3, r3, r2
 8010170:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010172:	887b      	ldrh	r3, [r7, #2]
 8010174:	827b      	strh	r3, [r7, #18]
  q = p;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801017a:	e025      	b.n	80101c8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	895b      	ldrh	r3, [r3, #10]
 8010180:	8a7a      	ldrh	r2, [r7, #18]
 8010182:	1ad3      	subs	r3, r2, r3
 8010184:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801018c:	4293      	cmp	r3, r2
 801018e:	dd06      	ble.n	801019e <pbuf_realloc+0x8e>
 8010190:	4b2f      	ldr	r3, [pc, #188]	; (8010250 <pbuf_realloc+0x140>)
 8010192:	f240 220b 	movw	r2, #523	; 0x20b
 8010196:	4932      	ldr	r1, [pc, #200]	; (8010260 <pbuf_realloc+0x150>)
 8010198:	482f      	ldr	r0, [pc, #188]	; (8010258 <pbuf_realloc+0x148>)
 801019a:	f008 fe09 	bl	8018db0 <iprintf>
    q->tot_len += (u16_t)grow;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	891a      	ldrh	r2, [r3, #8]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	4413      	add	r3, r2
 80101a8:	b29a      	uxth	r2, r3
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d106      	bne.n	80101c8 <pbuf_realloc+0xb8>
 80101ba:	4b25      	ldr	r3, [pc, #148]	; (8010250 <pbuf_realloc+0x140>)
 80101bc:	f240 220f 	movw	r2, #527	; 0x20f
 80101c0:	4928      	ldr	r1, [pc, #160]	; (8010264 <pbuf_realloc+0x154>)
 80101c2:	4825      	ldr	r0, [pc, #148]	; (8010258 <pbuf_realloc+0x148>)
 80101c4:	f008 fdf4 	bl	8018db0 <iprintf>
  while (rem_len > q->len) {
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	895b      	ldrh	r3, [r3, #10]
 80101cc:	8a7a      	ldrh	r2, [r7, #18]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d8d4      	bhi.n	801017c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	7b1b      	ldrb	r3, [r3, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d122      	bne.n	8010220 <pbuf_realloc+0x110>
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	895b      	ldrh	r3, [r3, #10]
 80101de:	8a7a      	ldrh	r2, [r7, #18]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d01d      	beq.n	8010220 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	7b5b      	ldrb	r3, [r3, #13]
 80101e8:	f003 0302 	and.w	r3, r3, #2
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d117      	bne.n	8010220 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	461a      	mov	r2, r3
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	8a7b      	ldrh	r3, [r7, #18]
 80101fe:	4413      	add	r3, r2
 8010200:	b29b      	uxth	r3, r3
 8010202:	4619      	mov	r1, r3
 8010204:	6978      	ldr	r0, [r7, #20]
 8010206:	f7ff f86d 	bl	800f2e4 <mem_trim>
 801020a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <pbuf_realloc+0x110>
 8010212:	4b0f      	ldr	r3, [pc, #60]	; (8010250 <pbuf_realloc+0x140>)
 8010214:	f240 221d 	movw	r2, #541	; 0x21d
 8010218:	4913      	ldr	r1, [pc, #76]	; (8010268 <pbuf_realloc+0x158>)
 801021a:	480f      	ldr	r0, [pc, #60]	; (8010258 <pbuf_realloc+0x148>)
 801021c:	f008 fdc8 	bl	8018db0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	8a7a      	ldrh	r2, [r7, #18]
 8010224:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	895a      	ldrh	r2, [r3, #10]
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d004      	beq.n	8010240 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4618      	mov	r0, r3
 801023c:	f000 f8dc 	bl	80103f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	2200      	movs	r2, #0
 8010244:	601a      	str	r2, [r3, #0]
 8010246:	e000      	b.n	801024a <pbuf_realloc+0x13a>
    return;
 8010248:	bf00      	nop

}
 801024a:	3718      	adds	r7, #24
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	0801aaf4 	.word	0x0801aaf4
 8010254:	0801acd4 	.word	0x0801acd4
 8010258:	0801ab64 	.word	0x0801ab64
 801025c:	0801acec 	.word	0x0801acec
 8010260:	0801ad08 	.word	0x0801ad08
 8010264:	0801ad1c 	.word	0x0801ad1c
 8010268:	0801ad34 	.word	0x0801ad34

0801026c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	807b      	strh	r3, [r7, #2]
 8010278:	4613      	mov	r3, r2
 801027a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d106      	bne.n	8010290 <pbuf_header_impl+0x24>
 8010282:	4b46      	ldr	r3, [pc, #280]	; (801039c <pbuf_header_impl+0x130>)
 8010284:	f240 223f 	movw	r2, #575	; 0x23f
 8010288:	4945      	ldr	r1, [pc, #276]	; (80103a0 <pbuf_header_impl+0x134>)
 801028a:	4846      	ldr	r0, [pc, #280]	; (80103a4 <pbuf_header_impl+0x138>)
 801028c:	f008 fd90 	bl	8018db0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8010290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <pbuf_header_impl+0x32>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d101      	bne.n	80102a2 <pbuf_header_impl+0x36>
    return 0;
 801029e:	2300      	movs	r3, #0
 80102a0:	e078      	b.n	8010394 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80102a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	da10      	bge.n	80102cc <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80102aa:	887b      	ldrh	r3, [r7, #2]
 80102ac:	425b      	negs	r3, r3
 80102ae:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	895b      	ldrh	r3, [r3, #10]
 80102b4:	89fa      	ldrh	r2, [r7, #14]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d90a      	bls.n	80102d0 <pbuf_header_impl+0x64>
 80102ba:	4b38      	ldr	r3, [pc, #224]	; (801039c <pbuf_header_impl+0x130>)
 80102bc:	f240 2247 	movw	r2, #583	; 0x247
 80102c0:	4939      	ldr	r1, [pc, #228]	; (80103a8 <pbuf_header_impl+0x13c>)
 80102c2:	4838      	ldr	r0, [pc, #224]	; (80103a4 <pbuf_header_impl+0x138>)
 80102c4:	f008 fd74 	bl	8018db0 <iprintf>
 80102c8:	2301      	movs	r3, #1
 80102ca:	e063      	b.n	8010394 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80102cc:	887b      	ldrh	r3, [r7, #2]
 80102ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7b1b      	ldrb	r3, [r3, #12]
 80102d4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80102dc:	89bb      	ldrh	r3, [r7, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d002      	beq.n	80102e8 <pbuf_header_impl+0x7c>
 80102e2:	89bb      	ldrh	r3, [r7, #12]
 80102e4:	2b03      	cmp	r3, #3
 80102e6:	d112      	bne.n	801030e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102f0:	425b      	negs	r3, r3
 80102f2:	441a      	add	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	3310      	adds	r3, #16
 8010300:	429a      	cmp	r2, r3
 8010302:	d238      	bcs.n	8010376 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68ba      	ldr	r2, [r7, #8]
 8010308:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801030a:	2301      	movs	r3, #1
 801030c:	e042      	b.n	8010394 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801030e:	89bb      	ldrh	r3, [r7, #12]
 8010310:	2b02      	cmp	r3, #2
 8010312:	d002      	beq.n	801031a <pbuf_header_impl+0xae>
 8010314:	89bb      	ldrh	r3, [r7, #12]
 8010316:	2b01      	cmp	r3, #1
 8010318:	d124      	bne.n	8010364 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801031a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801031e:	2b00      	cmp	r3, #0
 8010320:	da0d      	bge.n	801033e <pbuf_header_impl+0xd2>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	895b      	ldrh	r3, [r3, #10]
 8010326:	89fa      	ldrh	r2, [r7, #14]
 8010328:	429a      	cmp	r2, r3
 801032a:	d808      	bhi.n	801033e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010334:	425b      	negs	r3, r3
 8010336:	441a      	add	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	605a      	str	r2, [r3, #4]
 801033c:	e011      	b.n	8010362 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801033e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010342:	2b00      	cmp	r3, #0
 8010344:	dd0b      	ble.n	801035e <pbuf_header_impl+0xf2>
 8010346:	787b      	ldrb	r3, [r7, #1]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d008      	beq.n	801035e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685a      	ldr	r2, [r3, #4]
 8010350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010354:	425b      	negs	r3, r3
 8010356:	441a      	add	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	605a      	str	r2, [r3, #4]
 801035c:	e001      	b.n	8010362 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801035e:	2301      	movs	r3, #1
 8010360:	e018      	b.n	8010394 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010362:	e008      	b.n	8010376 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010364:	4b0d      	ldr	r3, [pc, #52]	; (801039c <pbuf_header_impl+0x130>)
 8010366:	f240 2277 	movw	r2, #631	; 0x277
 801036a:	4910      	ldr	r1, [pc, #64]	; (80103ac <pbuf_header_impl+0x140>)
 801036c:	480d      	ldr	r0, [pc, #52]	; (80103a4 <pbuf_header_impl+0x138>)
 801036e:	f008 fd1f 	bl	8018db0 <iprintf>
    return 1;
 8010372:	2301      	movs	r3, #1
 8010374:	e00e      	b.n	8010394 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	895a      	ldrh	r2, [r3, #10]
 801037a:	887b      	ldrh	r3, [r7, #2]
 801037c:	4413      	add	r3, r2
 801037e:	b29a      	uxth	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	891a      	ldrh	r2, [r3, #8]
 8010388:	887b      	ldrh	r3, [r7, #2]
 801038a:	4413      	add	r3, r2
 801038c:	b29a      	uxth	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	0801aaf4 	.word	0x0801aaf4
 80103a0:	0801ad50 	.word	0x0801ad50
 80103a4:	0801ab64 	.word	0x0801ab64
 80103a8:	0801ad5c 	.word	0x0801ad5c
 80103ac:	0801ad7c 	.word	0x0801ad7c

080103b0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	460b      	mov	r3, r1
 80103ba:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80103bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103c0:	2200      	movs	r2, #0
 80103c2:	4619      	mov	r1, r3
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff ff51 	bl	801026c <pbuf_header_impl>
 80103ca:	4603      	mov	r3, r0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	460b      	mov	r3, r1
 80103de:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80103e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80103e4:	2201      	movs	r2, #1
 80103e6:	4619      	mov	r1, r3
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff ff3f 	bl	801026c <pbuf_header_impl>
 80103ee:	4603      	mov	r3, r0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d10b      	bne.n	801041e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d106      	bne.n	801041a <pbuf_free+0x22>
 801040c:	4b41      	ldr	r3, [pc, #260]	; (8010514 <pbuf_free+0x11c>)
 801040e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010412:	4941      	ldr	r1, [pc, #260]	; (8010518 <pbuf_free+0x120>)
 8010414:	4841      	ldr	r0, [pc, #260]	; (801051c <pbuf_free+0x124>)
 8010416:	f008 fccb 	bl	8018db0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801041a:	2300      	movs	r3, #0
 801041c:	e076      	b.n	801050c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	7b1b      	ldrb	r3, [r3, #12]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d012      	beq.n	801044c <pbuf_free+0x54>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7b1b      	ldrb	r3, [r3, #12]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d00e      	beq.n	801044c <pbuf_free+0x54>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	7b1b      	ldrb	r3, [r3, #12]
 8010432:	2b02      	cmp	r3, #2
 8010434:	d00a      	beq.n	801044c <pbuf_free+0x54>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	7b1b      	ldrb	r3, [r3, #12]
 801043a:	2b03      	cmp	r3, #3
 801043c:	d006      	beq.n	801044c <pbuf_free+0x54>
 801043e:	4b35      	ldr	r3, [pc, #212]	; (8010514 <pbuf_free+0x11c>)
 8010440:	f240 22de 	movw	r2, #734	; 0x2de
 8010444:	4936      	ldr	r1, [pc, #216]	; (8010520 <pbuf_free+0x128>)
 8010446:	4835      	ldr	r0, [pc, #212]	; (801051c <pbuf_free+0x124>)
 8010448:	f008 fcb2 	bl	8018db0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801044c:	2300      	movs	r3, #0
 801044e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010450:	e058      	b.n	8010504 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010452:	f008 fc49 	bl	8018ce8 <sys_arch_protect>
 8010456:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	89db      	ldrh	r3, [r3, #14]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d106      	bne.n	801046e <pbuf_free+0x76>
 8010460:	4b2c      	ldr	r3, [pc, #176]	; (8010514 <pbuf_free+0x11c>)
 8010462:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010466:	492f      	ldr	r1, [pc, #188]	; (8010524 <pbuf_free+0x12c>)
 8010468:	482c      	ldr	r0, [pc, #176]	; (801051c <pbuf_free+0x124>)
 801046a:	f008 fca1 	bl	8018db0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	89db      	ldrh	r3, [r3, #14]
 8010472:	3b01      	subs	r3, #1
 8010474:	b29a      	uxth	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	81da      	strh	r2, [r3, #14]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	89db      	ldrh	r3, [r3, #14]
 801047e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010480:	69b8      	ldr	r0, [r7, #24]
 8010482:	f008 fc3f 	bl	8018d04 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010486:	8afb      	ldrh	r3, [r7, #22]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d139      	bne.n	8010500 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	7b1b      	ldrb	r3, [r3, #12]
 8010496:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	7b5b      	ldrb	r3, [r3, #13]
 801049c:	f003 0302 	and.w	r3, r3, #2
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d011      	beq.n	80104c8 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	691b      	ldr	r3, [r3, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d106      	bne.n	80104be <pbuf_free+0xc6>
 80104b0:	4b18      	ldr	r3, [pc, #96]	; (8010514 <pbuf_free+0x11c>)
 80104b2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80104b6:	491c      	ldr	r1, [pc, #112]	; (8010528 <pbuf_free+0x130>)
 80104b8:	4818      	ldr	r0, [pc, #96]	; (801051c <pbuf_free+0x124>)
 80104ba:	f008 fc79 	bl	8018db0 <iprintf>
        pc->custom_free_function(p);
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	691b      	ldr	r3, [r3, #16]
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	4798      	blx	r3
 80104c6:	e015      	b.n	80104f4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80104c8:	89fb      	ldrh	r3, [r7, #14]
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	d104      	bne.n	80104d8 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 80104ce:	6879      	ldr	r1, [r7, #4]
 80104d0:	200c      	movs	r0, #12
 80104d2:	f7ff f9f9 	bl	800f8c8 <memp_free>
 80104d6:	e00d      	b.n	80104f4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80104d8:	89fb      	ldrh	r3, [r7, #14]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d002      	beq.n	80104e4 <pbuf_free+0xec>
 80104de:	89fb      	ldrh	r3, [r7, #14]
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	d104      	bne.n	80104ee <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 80104e4:	6879      	ldr	r1, [r7, #4]
 80104e6:	200b      	movs	r0, #11
 80104e8:	f7ff f9ee 	bl	800f8c8 <memp_free>
 80104ec:	e002      	b.n	80104f4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7fe fe8a 	bl	800f208 <mem_free>
        }
      }
      count++;
 80104f4:	7ffb      	ldrb	r3, [r7, #31]
 80104f6:	3301      	adds	r3, #1
 80104f8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	607b      	str	r3, [r7, #4]
 80104fe:	e001      	b.n	8010504 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010500:	2300      	movs	r3, #0
 8010502:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d1a3      	bne.n	8010452 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801050a:	7ffb      	ldrb	r3, [r7, #31]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3720      	adds	r7, #32
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	0801aaf4 	.word	0x0801aaf4
 8010518:	0801ad50 	.word	0x0801ad50
 801051c:	0801ab64 	.word	0x0801ab64
 8010520:	0801ad8c 	.word	0x0801ad8c
 8010524:	0801ada4 	.word	0x0801ada4
 8010528:	0801adbc 	.word	0x0801adbc

0801052c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801052c:	b480      	push	{r7}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010534:	2300      	movs	r3, #0
 8010536:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010538:	e005      	b.n	8010546 <pbuf_clen+0x1a>
    ++len;
 801053a:	89fb      	ldrh	r3, [r7, #14]
 801053c:	3301      	adds	r3, #1
 801053e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1f6      	bne.n	801053a <pbuf_clen+0xe>
  }
  return len;
 801054c:	89fb      	ldrh	r3, [r7, #14]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3714      	adds	r7, #20
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
	...

0801055c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d016      	beq.n	8010598 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801056a:	f008 fbbd 	bl	8018ce8 <sys_arch_protect>
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	89db      	ldrh	r3, [r3, #14]
 8010574:	3301      	adds	r3, #1
 8010576:	b29a      	uxth	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	81da      	strh	r2, [r3, #14]
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f008 fbc1 	bl	8018d04 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	89db      	ldrh	r3, [r3, #14]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d106      	bne.n	8010598 <pbuf_ref+0x3c>
 801058a:	4b05      	ldr	r3, [pc, #20]	; (80105a0 <pbuf_ref+0x44>)
 801058c:	f240 3239 	movw	r2, #825	; 0x339
 8010590:	4904      	ldr	r1, [pc, #16]	; (80105a4 <pbuf_ref+0x48>)
 8010592:	4805      	ldr	r0, [pc, #20]	; (80105a8 <pbuf_ref+0x4c>)
 8010594:	f008 fc0c 	bl	8018db0 <iprintf>
  }
}
 8010598:	bf00      	nop
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	0801aaf4 	.word	0x0801aaf4
 80105a4:	0801ade0 	.word	0x0801ade0
 80105a8:	0801ab64 	.word	0x0801ab64

080105ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d002      	beq.n	80105c2 <pbuf_cat+0x16>
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d107      	bne.n	80105d2 <pbuf_cat+0x26>
 80105c2:	4b20      	ldr	r3, [pc, #128]	; (8010644 <pbuf_cat+0x98>)
 80105c4:	f240 324d 	movw	r2, #845	; 0x34d
 80105c8:	491f      	ldr	r1, [pc, #124]	; (8010648 <pbuf_cat+0x9c>)
 80105ca:	4820      	ldr	r0, [pc, #128]	; (801064c <pbuf_cat+0xa0>)
 80105cc:	f008 fbf0 	bl	8018db0 <iprintf>
 80105d0:	e034      	b.n	801063c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	60fb      	str	r3, [r7, #12]
 80105d6:	e00a      	b.n	80105ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	891a      	ldrh	r2, [r3, #8]
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	891b      	ldrh	r3, [r3, #8]
 80105e0:	4413      	add	r3, r2
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	60fb      	str	r3, [r7, #12]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1f0      	bne.n	80105d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	891a      	ldrh	r2, [r3, #8]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	895b      	ldrh	r3, [r3, #10]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d006      	beq.n	8010610 <pbuf_cat+0x64>
 8010602:	4b10      	ldr	r3, [pc, #64]	; (8010644 <pbuf_cat+0x98>)
 8010604:	f240 3255 	movw	r2, #853	; 0x355
 8010608:	4911      	ldr	r1, [pc, #68]	; (8010650 <pbuf_cat+0xa4>)
 801060a:	4810      	ldr	r0, [pc, #64]	; (801064c <pbuf_cat+0xa0>)
 801060c:	f008 fbd0 	bl	8018db0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d006      	beq.n	8010626 <pbuf_cat+0x7a>
 8010618:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <pbuf_cat+0x98>)
 801061a:	f240 3256 	movw	r2, #854	; 0x356
 801061e:	490d      	ldr	r1, [pc, #52]	; (8010654 <pbuf_cat+0xa8>)
 8010620:	480a      	ldr	r0, [pc, #40]	; (801064c <pbuf_cat+0xa0>)
 8010622:	f008 fbc5 	bl	8018db0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	891a      	ldrh	r2, [r3, #8]
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	891b      	ldrh	r3, [r3, #8]
 801062e:	4413      	add	r3, r2
 8010630:	b29a      	uxth	r2, r3
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	0801aaf4 	.word	0x0801aaf4
 8010648:	0801adf4 	.word	0x0801adf4
 801064c:	0801ab64 	.word	0x0801ab64
 8010650:	0801ae2c 	.word	0x0801ae2c
 8010654:	0801ae5c 	.word	0x0801ae5c

08010658 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010662:	2300      	movs	r3, #0
 8010664:	81fb      	strh	r3, [r7, #14]
 8010666:	2300      	movs	r3, #0
 8010668:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d008      	beq.n	8010682 <pbuf_copy+0x2a>
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d005      	beq.n	8010682 <pbuf_copy+0x2a>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	891a      	ldrh	r2, [r3, #8]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	891b      	ldrh	r3, [r3, #8]
 801067e:	429a      	cmp	r2, r3
 8010680:	d209      	bcs.n	8010696 <pbuf_copy+0x3e>
 8010682:	4b54      	ldr	r3, [pc, #336]	; (80107d4 <pbuf_copy+0x17c>)
 8010684:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010688:	4953      	ldr	r1, [pc, #332]	; (80107d8 <pbuf_copy+0x180>)
 801068a:	4854      	ldr	r0, [pc, #336]	; (80107dc <pbuf_copy+0x184>)
 801068c:	f008 fb90 	bl	8018db0 <iprintf>
 8010690:	f06f 030f 	mvn.w	r3, #15
 8010694:	e099      	b.n	80107ca <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	895b      	ldrh	r3, [r3, #10]
 801069a:	461a      	mov	r2, r3
 801069c:	89fb      	ldrh	r3, [r7, #14]
 801069e:	1ad2      	subs	r2, r2, r3
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	895b      	ldrh	r3, [r3, #10]
 80106a4:	4619      	mov	r1, r3
 80106a6:	89bb      	ldrh	r3, [r7, #12]
 80106a8:	1acb      	subs	r3, r1, r3
 80106aa:	429a      	cmp	r2, r3
 80106ac:	db05      	blt.n	80106ba <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	895a      	ldrh	r2, [r3, #10]
 80106b2:	89bb      	ldrh	r3, [r7, #12]
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	817b      	strh	r3, [r7, #10]
 80106b8:	e004      	b.n	80106c4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	895a      	ldrh	r2, [r3, #10]
 80106be:	89fb      	ldrh	r3, [r7, #14]
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685a      	ldr	r2, [r3, #4]
 80106c8:	89fb      	ldrh	r3, [r7, #14]
 80106ca:	18d0      	adds	r0, r2, r3
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	89bb      	ldrh	r3, [r7, #12]
 80106d2:	4413      	add	r3, r2
 80106d4:	897a      	ldrh	r2, [r7, #10]
 80106d6:	4619      	mov	r1, r3
 80106d8:	f008 fb57 	bl	8018d8a <memcpy>
    offset_to += len;
 80106dc:	89fa      	ldrh	r2, [r7, #14]
 80106de:	897b      	ldrh	r3, [r7, #10]
 80106e0:	4413      	add	r3, r2
 80106e2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80106e4:	89ba      	ldrh	r2, [r7, #12]
 80106e6:	897b      	ldrh	r3, [r7, #10]
 80106e8:	4413      	add	r3, r2
 80106ea:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	895b      	ldrh	r3, [r3, #10]
 80106f0:	89fa      	ldrh	r2, [r7, #14]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d906      	bls.n	8010704 <pbuf_copy+0xac>
 80106f6:	4b37      	ldr	r3, [pc, #220]	; (80107d4 <pbuf_copy+0x17c>)
 80106f8:	f240 32cd 	movw	r2, #973	; 0x3cd
 80106fc:	4938      	ldr	r1, [pc, #224]	; (80107e0 <pbuf_copy+0x188>)
 80106fe:	4837      	ldr	r0, [pc, #220]	; (80107dc <pbuf_copy+0x184>)
 8010700:	f008 fb56 	bl	8018db0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	895b      	ldrh	r3, [r3, #10]
 8010708:	89ba      	ldrh	r2, [r7, #12]
 801070a:	429a      	cmp	r2, r3
 801070c:	d906      	bls.n	801071c <pbuf_copy+0xc4>
 801070e:	4b31      	ldr	r3, [pc, #196]	; (80107d4 <pbuf_copy+0x17c>)
 8010710:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010714:	4933      	ldr	r1, [pc, #204]	; (80107e4 <pbuf_copy+0x18c>)
 8010716:	4831      	ldr	r0, [pc, #196]	; (80107dc <pbuf_copy+0x184>)
 8010718:	f008 fb4a 	bl	8018db0 <iprintf>
    if (offset_from >= p_from->len) {
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	895b      	ldrh	r3, [r3, #10]
 8010720:	89ba      	ldrh	r2, [r7, #12]
 8010722:	429a      	cmp	r2, r3
 8010724:	d304      	bcc.n	8010730 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010726:	2300      	movs	r3, #0
 8010728:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	895b      	ldrh	r3, [r3, #10]
 8010734:	89fa      	ldrh	r2, [r7, #14]
 8010736:	429a      	cmp	r2, r3
 8010738:	d114      	bne.n	8010764 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801073a:	2300      	movs	r3, #0
 801073c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d10c      	bne.n	8010764 <pbuf_copy+0x10c>
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d009      	beq.n	8010764 <pbuf_copy+0x10c>
 8010750:	4b20      	ldr	r3, [pc, #128]	; (80107d4 <pbuf_copy+0x17c>)
 8010752:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010756:	4924      	ldr	r1, [pc, #144]	; (80107e8 <pbuf_copy+0x190>)
 8010758:	4820      	ldr	r0, [pc, #128]	; (80107dc <pbuf_copy+0x184>)
 801075a:	f008 fb29 	bl	8018db0 <iprintf>
 801075e:	f06f 030f 	mvn.w	r3, #15
 8010762:	e032      	b.n	80107ca <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d013      	beq.n	8010792 <pbuf_copy+0x13a>
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	895a      	ldrh	r2, [r3, #10]
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	891b      	ldrh	r3, [r3, #8]
 8010772:	429a      	cmp	r2, r3
 8010774:	d10d      	bne.n	8010792 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d009      	beq.n	8010792 <pbuf_copy+0x13a>
 801077e:	4b15      	ldr	r3, [pc, #84]	; (80107d4 <pbuf_copy+0x17c>)
 8010780:	f240 32de 	movw	r2, #990	; 0x3de
 8010784:	4919      	ldr	r1, [pc, #100]	; (80107ec <pbuf_copy+0x194>)
 8010786:	4815      	ldr	r0, [pc, #84]	; (80107dc <pbuf_copy+0x184>)
 8010788:	f008 fb12 	bl	8018db0 <iprintf>
 801078c:	f06f 0305 	mvn.w	r3, #5
 8010790:	e01b      	b.n	80107ca <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d013      	beq.n	80107c0 <pbuf_copy+0x168>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	895a      	ldrh	r2, [r3, #10]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	891b      	ldrh	r3, [r3, #8]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d10d      	bne.n	80107c0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d009      	beq.n	80107c0 <pbuf_copy+0x168>
 80107ac:	4b09      	ldr	r3, [pc, #36]	; (80107d4 <pbuf_copy+0x17c>)
 80107ae:	f240 32e3 	movw	r2, #995	; 0x3e3
 80107b2:	490e      	ldr	r1, [pc, #56]	; (80107ec <pbuf_copy+0x194>)
 80107b4:	4809      	ldr	r0, [pc, #36]	; (80107dc <pbuf_copy+0x184>)
 80107b6:	f008 fafb 	bl	8018db0 <iprintf>
 80107ba:	f06f 0305 	mvn.w	r3, #5
 80107be:	e004      	b.n	80107ca <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f47f af67 	bne.w	8010696 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	0801aaf4 	.word	0x0801aaf4
 80107d8:	0801aea8 	.word	0x0801aea8
 80107dc:	0801ab64 	.word	0x0801ab64
 80107e0:	0801aed8 	.word	0x0801aed8
 80107e4:	0801aef0 	.word	0x0801aef0
 80107e8:	0801af0c 	.word	0x0801af0c
 80107ec:	0801af1c 	.word	0x0801af1c

080107f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b088      	sub	sp, #32
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	60f8      	str	r0, [r7, #12]
 80107f8:	60b9      	str	r1, [r7, #8]
 80107fa:	4611      	mov	r1, r2
 80107fc:	461a      	mov	r2, r3
 80107fe:	460b      	mov	r3, r1
 8010800:	80fb      	strh	r3, [r7, #6]
 8010802:	4613      	mov	r3, r2
 8010804:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d108      	bne.n	8010822 <pbuf_copy_partial+0x32>
 8010810:	4b30      	ldr	r3, [pc, #192]	; (80108d4 <pbuf_copy_partial+0xe4>)
 8010812:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010816:	4930      	ldr	r1, [pc, #192]	; (80108d8 <pbuf_copy_partial+0xe8>)
 8010818:	4830      	ldr	r0, [pc, #192]	; (80108dc <pbuf_copy_partial+0xec>)
 801081a:	f008 fac9 	bl	8018db0 <iprintf>
 801081e:	2300      	movs	r3, #0
 8010820:	e054      	b.n	80108cc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d108      	bne.n	801083a <pbuf_copy_partial+0x4a>
 8010828:	4b2a      	ldr	r3, [pc, #168]	; (80108d4 <pbuf_copy_partial+0xe4>)
 801082a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801082e:	492c      	ldr	r1, [pc, #176]	; (80108e0 <pbuf_copy_partial+0xf0>)
 8010830:	482a      	ldr	r0, [pc, #168]	; (80108dc <pbuf_copy_partial+0xec>)
 8010832:	f008 fabd 	bl	8018db0 <iprintf>
 8010836:	2300      	movs	r3, #0
 8010838:	e048      	b.n	80108cc <pbuf_copy_partial+0xdc>

  left = 0;
 801083a:	2300      	movs	r3, #0
 801083c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <pbuf_copy_partial+0x5a>
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <pbuf_copy_partial+0x5e>
    return 0;
 801084a:	2300      	movs	r3, #0
 801084c:	e03e      	b.n	80108cc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	61fb      	str	r3, [r7, #28]
 8010852:	e034      	b.n	80108be <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010854:	88bb      	ldrh	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00a      	beq.n	8010870 <pbuf_copy_partial+0x80>
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	895b      	ldrh	r3, [r3, #10]
 801085e:	88ba      	ldrh	r2, [r7, #4]
 8010860:	429a      	cmp	r2, r3
 8010862:	d305      	bcc.n	8010870 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	895b      	ldrh	r3, [r3, #10]
 8010868:	88ba      	ldrh	r2, [r7, #4]
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	80bb      	strh	r3, [r7, #4]
 801086e:	e023      	b.n	80108b8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	895a      	ldrh	r2, [r3, #10]
 8010874:	88bb      	ldrh	r3, [r7, #4]
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801087a:	8b3a      	ldrh	r2, [r7, #24]
 801087c:	88fb      	ldrh	r3, [r7, #6]
 801087e:	429a      	cmp	r2, r3
 8010880:	d901      	bls.n	8010886 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010882:	88fb      	ldrh	r3, [r7, #6]
 8010884:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8010886:	8b7b      	ldrh	r3, [r7, #26]
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	18d0      	adds	r0, r2, r3
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	685a      	ldr	r2, [r3, #4]
 8010890:	88bb      	ldrh	r3, [r7, #4]
 8010892:	4413      	add	r3, r2
 8010894:	8b3a      	ldrh	r2, [r7, #24]
 8010896:	4619      	mov	r1, r3
 8010898:	f008 fa77 	bl	8018d8a <memcpy>
      copied_total += buf_copy_len;
 801089c:	8afa      	ldrh	r2, [r7, #22]
 801089e:	8b3b      	ldrh	r3, [r7, #24]
 80108a0:	4413      	add	r3, r2
 80108a2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80108a4:	8b7a      	ldrh	r2, [r7, #26]
 80108a6:	8b3b      	ldrh	r3, [r7, #24]
 80108a8:	4413      	add	r3, r2
 80108aa:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80108ac:	88fa      	ldrh	r2, [r7, #6]
 80108ae:	8b3b      	ldrh	r3, [r7, #24]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80108b4:	2300      	movs	r3, #0
 80108b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	61fb      	str	r3, [r7, #28]
 80108be:	88fb      	ldrh	r3, [r7, #6]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <pbuf_copy_partial+0xda>
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1c4      	bne.n	8010854 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80108ca:	8afb      	ldrh	r3, [r7, #22]
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3720      	adds	r7, #32
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	0801aaf4 	.word	0x0801aaf4
 80108d8:	0801af48 	.word	0x0801af48
 80108dc:	0801ab64 	.word	0x0801ab64
 80108e0:	0801af68 	.word	0x0801af68

080108e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80108e4:	b480      	push	{r7}
 80108e6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80108e8:	bf00      	nop
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
	...

080108f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80108f8:	f000 ffb6 	bl	8011868 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80108fc:	4b07      	ldr	r3, [pc, #28]	; (801091c <tcp_tmr+0x28>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	3301      	adds	r3, #1
 8010902:	b2da      	uxtb	r2, r3
 8010904:	4b05      	ldr	r3, [pc, #20]	; (801091c <tcp_tmr+0x28>)
 8010906:	701a      	strb	r2, [r3, #0]
 8010908:	4b04      	ldr	r3, [pc, #16]	; (801091c <tcp_tmr+0x28>)
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	f003 0301 	and.w	r3, r3, #1
 8010910:	2b00      	cmp	r3, #0
 8010912:	d001      	beq.n	8010918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010914:	f000 fce8 	bl	80112e8 <tcp_slowtmr>
  }
}
 8010918:	bf00      	nop
 801091a:	bd80      	pop	{r7, pc}
 801091c:	200040b1 	.word	0x200040b1

08010920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010920:	b480      	push	{r7}
 8010922:	b085      	sub	sp, #20
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	60fb      	str	r3, [r7, #12]
 801092e:	e00a      	b.n	8010946 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	429a      	cmp	r2, r3
 8010938:	d102      	bne.n	8010940 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2200      	movs	r2, #0
 801093e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1f1      	bne.n	8010930 <tcp_remove_listener+0x10>
      }
   }
}
 801094c:	bf00      	nop
 801094e:	3714      	adds	r7, #20
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr

08010958 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d105      	bne.n	8010972 <tcp_listen_closed+0x1a>
 8010966:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <tcp_listen_closed+0x5c>)
 8010968:	22c0      	movs	r2, #192	; 0xc0
 801096a:	4913      	ldr	r1, [pc, #76]	; (80109b8 <tcp_listen_closed+0x60>)
 801096c:	4813      	ldr	r0, [pc, #76]	; (80109bc <tcp_listen_closed+0x64>)
 801096e:	f008 fa1f 	bl	8018db0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	7d1b      	ldrb	r3, [r3, #20]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d005      	beq.n	8010986 <tcp_listen_closed+0x2e>
 801097a:	4b0e      	ldr	r3, [pc, #56]	; (80109b4 <tcp_listen_closed+0x5c>)
 801097c:	22c1      	movs	r2, #193	; 0xc1
 801097e:	4910      	ldr	r1, [pc, #64]	; (80109c0 <tcp_listen_closed+0x68>)
 8010980:	480e      	ldr	r0, [pc, #56]	; (80109bc <tcp_listen_closed+0x64>)
 8010982:	f008 fa15 	bl	8018db0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010986:	2301      	movs	r3, #1
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	e00b      	b.n	80109a4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801098c:	4a0d      	ldr	r2, [pc, #52]	; (80109c4 <tcp_listen_closed+0x6c>)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6879      	ldr	r1, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	f7ff ffc1 	bl	8010920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3301      	adds	r3, #1
 80109a2:	60fb      	str	r3, [r7, #12]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d9f0      	bls.n	801098c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80109aa:	bf00      	nop
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	0801b09c 	.word	0x0801b09c
 80109b8:	0801b0f0 	.word	0x0801b0f0
 80109bc:	0801b0fc 	.word	0x0801b0fc
 80109c0:	0801b124 	.word	0x0801b124
 80109c4:	0801c680 	.word	0x0801c680

080109c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80109c8:	b5b0      	push	{r4, r5, r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af02      	add	r7, sp, #8
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80109d4:	78fb      	ldrb	r3, [r7, #3]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d075      	beq.n	8010ac6 <tcp_close_shutdown+0xfe>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	7d1b      	ldrb	r3, [r3, #20]
 80109de:	2b04      	cmp	r3, #4
 80109e0:	d003      	beq.n	80109ea <tcp_close_shutdown+0x22>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7d1b      	ldrb	r3, [r3, #20]
 80109e6:	2b07      	cmp	r3, #7
 80109e8:	d16d      	bne.n	8010ac6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d104      	bne.n	80109fc <tcp_close_shutdown+0x34>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109fa:	d064      	beq.n	8010ac6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	7e9b      	ldrb	r3, [r3, #26]
 8010a00:	f003 0310 	and.w	r3, r3, #16
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d106      	bne.n	8010a16 <tcp_close_shutdown+0x4e>
 8010a08:	4b59      	ldr	r3, [pc, #356]	; (8010b70 <tcp_close_shutdown+0x1a8>)
 8010a0a:	f240 120f 	movw	r2, #271	; 0x10f
 8010a0e:	4959      	ldr	r1, [pc, #356]	; (8010b74 <tcp_close_shutdown+0x1ac>)
 8010a10:	4859      	ldr	r0, [pc, #356]	; (8010b78 <tcp_close_shutdown+0x1b0>)
 8010a12:	f008 f9cd 	bl	8018db0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a1e:	687c      	ldr	r4, [r7, #4]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	1d1d      	adds	r5, r3, #4
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8adb      	ldrh	r3, [r3, #22]
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	8b12      	ldrh	r2, [r2, #24]
 8010a2c:	9201      	str	r2, [sp, #4]
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	462b      	mov	r3, r5
 8010a32:	4622      	mov	r2, r4
 8010a34:	f004 ff1a 	bl	801586c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f001 fa4b 	bl	8011ed4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010a3e:	4b4f      	ldr	r3, [pc, #316]	; (8010b7c <tcp_close_shutdown+0x1b4>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d105      	bne.n	8010a54 <tcp_close_shutdown+0x8c>
 8010a48:	4b4c      	ldr	r3, [pc, #304]	; (8010b7c <tcp_close_shutdown+0x1b4>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	4a4b      	ldr	r2, [pc, #300]	; (8010b7c <tcp_close_shutdown+0x1b4>)
 8010a50:	6013      	str	r3, [r2, #0]
 8010a52:	e013      	b.n	8010a7c <tcp_close_shutdown+0xb4>
 8010a54:	4b49      	ldr	r3, [pc, #292]	; (8010b7c <tcp_close_shutdown+0x1b4>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	60fb      	str	r3, [r7, #12]
 8010a5a:	e00c      	b.n	8010a76 <tcp_close_shutdown+0xae>
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d104      	bne.n	8010a70 <tcp_close_shutdown+0xa8>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	68da      	ldr	r2, [r3, #12]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	60da      	str	r2, [r3, #12]
 8010a6e:	e005      	b.n	8010a7c <tcp_close_shutdown+0xb4>
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	60fb      	str	r3, [r7, #12]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1ef      	bne.n	8010a5c <tcp_close_shutdown+0x94>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	60da      	str	r2, [r3, #12]
 8010a82:	4b3f      	ldr	r3, [pc, #252]	; (8010b80 <tcp_close_shutdown+0x1b8>)
 8010a84:	2201      	movs	r2, #1
 8010a86:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	7d1b      	ldrb	r3, [r3, #20]
 8010a8c:	2b04      	cmp	r3, #4
 8010a8e:	d10c      	bne.n	8010aaa <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	220a      	movs	r2, #10
 8010a94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a96:	4b3b      	ldr	r3, [pc, #236]	; (8010b84 <tcp_close_shutdown+0x1bc>)
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	60da      	str	r2, [r3, #12]
 8010a9e:	4a39      	ldr	r2, [pc, #228]	; (8010b84 <tcp_close_shutdown+0x1bc>)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6013      	str	r3, [r2, #0]
 8010aa4:	f005 f934 	bl	8015d10 <tcp_timer_needed>
 8010aa8:	e00b      	b.n	8010ac2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8010aaa:	4b37      	ldr	r3, [pc, #220]	; (8010b88 <tcp_close_shutdown+0x1c0>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d102      	bne.n	8010aba <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010ab4:	f003 fd72 	bl	801459c <tcp_trigger_input_pcb_close>
 8010ab8:	e003      	b.n	8010ac2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8010aba:	6879      	ldr	r1, [r7, #4]
 8010abc:	2001      	movs	r0, #1
 8010abe:	f7fe ff03 	bl	800f8c8 <memp_free>
        }
      }
      return ERR_OK;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	e050      	b.n	8010b68 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	7d1b      	ldrb	r3, [r3, #20]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d02e      	beq.n	8010b2c <tcp_close_shutdown+0x164>
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	d038      	beq.n	8010b44 <tcp_close_shutdown+0x17c>
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d142      	bne.n	8010b5c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8adb      	ldrh	r3, [r3, #22]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d021      	beq.n	8010b22 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010ade:	4b2b      	ldr	r3, [pc, #172]	; (8010b8c <tcp_close_shutdown+0x1c4>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d105      	bne.n	8010af4 <tcp_close_shutdown+0x12c>
 8010ae8:	4b28      	ldr	r3, [pc, #160]	; (8010b8c <tcp_close_shutdown+0x1c4>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	4a27      	ldr	r2, [pc, #156]	; (8010b8c <tcp_close_shutdown+0x1c4>)
 8010af0:	6013      	str	r3, [r2, #0]
 8010af2:	e013      	b.n	8010b1c <tcp_close_shutdown+0x154>
 8010af4:	4b25      	ldr	r3, [pc, #148]	; (8010b8c <tcp_close_shutdown+0x1c4>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60bb      	str	r3, [r7, #8]
 8010afa:	e00c      	b.n	8010b16 <tcp_close_shutdown+0x14e>
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d104      	bne.n	8010b10 <tcp_close_shutdown+0x148>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	68da      	ldr	r2, [r3, #12]
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	60da      	str	r2, [r3, #12]
 8010b0e:	e005      	b.n	8010b1c <tcp_close_shutdown+0x154>
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	60bb      	str	r3, [r7, #8]
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1ef      	bne.n	8010afc <tcp_close_shutdown+0x134>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8010b22:	6879      	ldr	r1, [r7, #4]
 8010b24:	2001      	movs	r0, #1
 8010b26:	f7fe fecf 	bl	800f8c8 <memp_free>
    break;
 8010b2a:	e01c      	b.n	8010b66 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff ff13 	bl	8010958 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010b32:	6879      	ldr	r1, [r7, #4]
 8010b34:	4816      	ldr	r0, [pc, #88]	; (8010b90 <tcp_close_shutdown+0x1c8>)
 8010b36:	f001 fa0f 	bl	8011f58 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	2002      	movs	r0, #2
 8010b3e:	f7fe fec3 	bl	800f8c8 <memp_free>
    break;
 8010b42:	e010      	b.n	8010b66 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8010b44:	6879      	ldr	r1, [r7, #4]
 8010b46:	480d      	ldr	r0, [pc, #52]	; (8010b7c <tcp_close_shutdown+0x1b4>)
 8010b48:	f001 fa06 	bl	8011f58 <tcp_pcb_remove>
 8010b4c:	4b0c      	ldr	r3, [pc, #48]	; (8010b80 <tcp_close_shutdown+0x1b8>)
 8010b4e:	2201      	movs	r2, #1
 8010b50:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8010b52:	6879      	ldr	r1, [r7, #4]
 8010b54:	2001      	movs	r0, #1
 8010b56:	f7fe feb7 	bl	800f8c8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8010b5a:	e004      	b.n	8010b66 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 f819 	bl	8010b94 <tcp_close_shutdown_fin>
 8010b62:	4603      	mov	r3, r0
 8010b64:	e000      	b.n	8010b68 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b70:	0801b09c 	.word	0x0801b09c
 8010b74:	0801b13c 	.word	0x0801b13c
 8010b78:	0801b0fc 	.word	0x0801b0fc
 8010b7c:	200079b0 	.word	0x200079b0
 8010b80:	200079ac 	.word	0x200079ac
 8010b84:	200079c0 	.word	0x200079c0
 8010b88:	200079c4 	.word	0x200079c4
 8010b8c:	200079bc 	.word	0x200079bc
 8010b90:	200079b8 	.word	0x200079b8

08010b94 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b084      	sub	sp, #16
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d106      	bne.n	8010bb0 <tcp_close_shutdown_fin+0x1c>
 8010ba2:	4b2c      	ldr	r3, [pc, #176]	; (8010c54 <tcp_close_shutdown_fin+0xc0>)
 8010ba4:	f240 124d 	movw	r2, #333	; 0x14d
 8010ba8:	492b      	ldr	r1, [pc, #172]	; (8010c58 <tcp_close_shutdown_fin+0xc4>)
 8010baa:	482c      	ldr	r0, [pc, #176]	; (8010c5c <tcp_close_shutdown_fin+0xc8>)
 8010bac:	f008 f900 	bl	8018db0 <iprintf>

  switch (pcb->state) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	7d1b      	ldrb	r3, [r3, #20]
 8010bb4:	2b04      	cmp	r3, #4
 8010bb6:	d010      	beq.n	8010bda <tcp_close_shutdown_fin+0x46>
 8010bb8:	2b07      	cmp	r3, #7
 8010bba:	d01b      	beq.n	8010bf4 <tcp_close_shutdown_fin+0x60>
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	d126      	bne.n	8010c0e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f003 fd77 	bl	80146b4 <tcp_send_fin>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d11f      	bne.n	8010c12 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2205      	movs	r2, #5
 8010bd6:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010bd8:	e01b      	b.n	8010c12 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f003 fd6a 	bl	80146b4 <tcp_send_fin>
 8010be0:	4603      	mov	r3, r0
 8010be2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d114      	bne.n	8010c16 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2205      	movs	r2, #5
 8010bf0:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010bf2:	e010      	b.n	8010c16 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f003 fd5d 	bl	80146b4 <tcp_send_fin>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d109      	bne.n	8010c1a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2209      	movs	r2, #9
 8010c0a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010c0c:	e005      	b.n	8010c1a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	e01c      	b.n	8010c4c <tcp_close_shutdown_fin+0xb8>
    break;
 8010c12:	bf00      	nop
 8010c14:	e002      	b.n	8010c1c <tcp_close_shutdown_fin+0x88>
    break;
 8010c16:	bf00      	nop
 8010c18:	e000      	b.n	8010c1c <tcp_close_shutdown_fin+0x88>
    break;
 8010c1a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d103      	bne.n	8010c2c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f004 fb97 	bl	8015358 <tcp_output>
 8010c2a:	e00d      	b.n	8010c48 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c34:	d108      	bne.n	8010c48 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	7e9b      	ldrb	r3, [r3, #26]
 8010c3a:	f043 0308 	orr.w	r3, r3, #8
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	e001      	b.n	8010c4c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8010c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	0801b09c 	.word	0x0801b09c
 8010c58:	0801b0f0 	.word	0x0801b0f0
 8010c5c:	0801b0fc 	.word	0x0801b0fc

08010c60 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	7d1b      	ldrb	r3, [r3, #20]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d006      	beq.n	8010c7e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	7e9b      	ldrb	r3, [r3, #26]
 8010c74:	f043 0310 	orr.w	r3, r3, #16
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010c7e:	2101      	movs	r1, #1
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fea1 	bl	80109c8 <tcp_close_shutdown>
 8010c86:	4603      	mov	r3, r0
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d102      	bne.n	8010caa <tcp_shutdown+0x1a>
    return ERR_CONN;
 8010ca4:	f06f 030a 	mvn.w	r3, #10
 8010ca8:	e035      	b.n	8010d16 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01b      	beq.n	8010ce8 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	7e9b      	ldrb	r3, [r3, #26]
 8010cb4:	f043 0310 	orr.w	r3, r3, #16
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d005      	beq.n	8010cd0 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	68f8      	ldr	r0, [r7, #12]
 8010cc8:	f7ff fe7e 	bl	80109c8 <tcp_close_shutdown>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	e022      	b.n	8010d16 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d007      	beq.n	8010ce8 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff fb8b 	bl	80103f8 <pbuf_free>
      pcb->refused_data = NULL;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d012      	beq.n	8010d14 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	7d1b      	ldrb	r3, [r3, #20]
 8010cf2:	2b03      	cmp	r3, #3
 8010cf4:	db0b      	blt.n	8010d0e <tcp_shutdown+0x7e>
 8010cf6:	2b04      	cmp	r3, #4
 8010cf8:	dd01      	ble.n	8010cfe <tcp_shutdown+0x6e>
 8010cfa:	2b07      	cmp	r3, #7
 8010cfc:	d107      	bne.n	8010d0e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	4619      	mov	r1, r3
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	f7ff fe5f 	bl	80109c8 <tcp_close_shutdown>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	e003      	b.n	8010d16 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 8010d0e:	f06f 030a 	mvn.w	r3, #10
 8010d12:	e000      	b.n	8010d16 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
	...

08010d20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b08c      	sub	sp, #48	; 0x30
 8010d24:	af02      	add	r7, sp, #8
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	7d1b      	ldrb	r3, [r3, #20]
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	d106      	bne.n	8010d40 <tcp_abandon+0x20>
 8010d32:	4b4d      	ldr	r3, [pc, #308]	; (8010e68 <tcp_abandon+0x148>)
 8010d34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010d38:	494c      	ldr	r1, [pc, #304]	; (8010e6c <tcp_abandon+0x14c>)
 8010d3a:	484d      	ldr	r0, [pc, #308]	; (8010e70 <tcp_abandon+0x150>)
 8010d3c:	f008 f838 	bl	8018db0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	7d1b      	ldrb	r3, [r3, #20]
 8010d44:	2b0a      	cmp	r3, #10
 8010d46:	d108      	bne.n	8010d5a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010d48:	6879      	ldr	r1, [r7, #4]
 8010d4a:	484a      	ldr	r0, [pc, #296]	; (8010e74 <tcp_abandon+0x154>)
 8010d4c:	f001 f904 	bl	8011f58 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8010d50:	6879      	ldr	r1, [r7, #4]
 8010d52:	2001      	movs	r0, #1
 8010d54:	f7fe fdb8 	bl	800f8c8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8010d58:	e081      	b.n	8010e5e <tcp_abandon+0x13e>
    int send_rst = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d66:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d74:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	691b      	ldr	r3, [r3, #16]
 8010d7a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d126      	bne.n	8010dd2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	8adb      	ldrh	r3, [r3, #22]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d02e      	beq.n	8010dea <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010d8c:	4b3a      	ldr	r3, [pc, #232]	; (8010e78 <tcp_abandon+0x158>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d105      	bne.n	8010da2 <tcp_abandon+0x82>
 8010d96:	4b38      	ldr	r3, [pc, #224]	; (8010e78 <tcp_abandon+0x158>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	4a36      	ldr	r2, [pc, #216]	; (8010e78 <tcp_abandon+0x158>)
 8010d9e:	6013      	str	r3, [r2, #0]
 8010da0:	e013      	b.n	8010dca <tcp_abandon+0xaa>
 8010da2:	4b35      	ldr	r3, [pc, #212]	; (8010e78 <tcp_abandon+0x158>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	61fb      	str	r3, [r7, #28]
 8010da8:	e00c      	b.n	8010dc4 <tcp_abandon+0xa4>
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d104      	bne.n	8010dbe <tcp_abandon+0x9e>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	68da      	ldr	r2, [r3, #12]
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	60da      	str	r2, [r3, #12]
 8010dbc:	e005      	b.n	8010dca <tcp_abandon+0xaa>
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	61fb      	str	r3, [r7, #28]
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1ef      	bne.n	8010daa <tcp_abandon+0x8a>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	60da      	str	r2, [r3, #12]
 8010dd0:	e00b      	b.n	8010dea <tcp_abandon+0xca>
      send_rst = reset;
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8adb      	ldrh	r3, [r3, #22]
 8010dda:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ddc:	6879      	ldr	r1, [r7, #4]
 8010dde:	4827      	ldr	r0, [pc, #156]	; (8010e7c <tcp_abandon+0x15c>)
 8010de0:	f001 f8ba 	bl	8011f58 <tcp_pcb_remove>
 8010de4:	4b26      	ldr	r3, [pc, #152]	; (8010e80 <tcp_abandon+0x160>)
 8010de6:	2201      	movs	r2, #1
 8010de8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d004      	beq.n	8010dfc <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 fe03 	bl	8011a02 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d004      	beq.n	8010e0e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f000 fdfa 	bl	8011a02 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d004      	beq.n	8010e20 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f000 fdf1 	bl	8011a02 <tcp_segs_free>
    if (send_rst) {
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00c      	beq.n	8010e40 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	1d19      	adds	r1, r3, #4
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	8b1b      	ldrh	r3, [r3, #24]
 8010e30:	9301      	str	r3, [sp, #4]
 8010e32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e34:	9300      	str	r3, [sp, #0]
 8010e36:	460b      	mov	r3, r1
 8010e38:	6979      	ldr	r1, [r7, #20]
 8010e3a:	69b8      	ldr	r0, [r7, #24]
 8010e3c:	f004 fd16 	bl	801586c <tcp_rst>
    last_state = pcb->state;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	7d1b      	ldrb	r3, [r3, #20]
 8010e44:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	2001      	movs	r0, #1
 8010e4a:	f7fe fd3d 	bl	800f8c8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d004      	beq.n	8010e5e <tcp_abandon+0x13e>
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	f06f 010c 	mvn.w	r1, #12
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	4798      	blx	r3
}
 8010e5e:	bf00      	nop
 8010e60:	3728      	adds	r7, #40	; 0x28
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	0801b09c 	.word	0x0801b09c
 8010e6c:	0801b158 	.word	0x0801b158
 8010e70:	0801b0fc 	.word	0x0801b0fc
 8010e74:	200079c0 	.word	0x200079c0
 8010e78:	200079bc 	.word	0x200079bc
 8010e7c:	200079b0 	.word	0x200079b0
 8010e80:	200079ac 	.word	0x200079ac

08010e84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff ff46 	bl	8010d20 <tcp_abandon>
}
 8010e94:	bf00      	nop
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b088      	sub	sp, #32
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010eaa:	2304      	movs	r3, #4
 8010eac:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d101      	bne.n	8010eb8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010eb4:	4b3c      	ldr	r3, [pc, #240]	; (8010fa8 <tcp_bind+0x10c>)
 8010eb6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d002      	beq.n	8010ec4 <tcp_bind+0x28>
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d102      	bne.n	8010eca <tcp_bind+0x2e>
    return ERR_VAL;
 8010ec4:	f06f 0305 	mvn.w	r3, #5
 8010ec8:	e06a      	b.n	8010fa0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	7d1b      	ldrb	r3, [r3, #20]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d009      	beq.n	8010ee6 <tcp_bind+0x4a>
 8010ed2:	4b36      	ldr	r3, [pc, #216]	; (8010fac <tcp_bind+0x110>)
 8010ed4:	f44f 7211 	mov.w	r2, #580	; 0x244
 8010ed8:	4935      	ldr	r1, [pc, #212]	; (8010fb0 <tcp_bind+0x114>)
 8010eda:	4836      	ldr	r0, [pc, #216]	; (8010fb4 <tcp_bind+0x118>)
 8010edc:	f007 ff68 	bl	8018db0 <iprintf>
 8010ee0:	f06f 0305 	mvn.w	r3, #5
 8010ee4:	e05c      	b.n	8010fa0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8010ee6:	88fb      	ldrh	r3, [r7, #6]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d109      	bne.n	8010f00 <tcp_bind+0x64>
    port = tcp_new_port();
 8010eec:	f000 f9b8 	bl	8011260 <tcp_new_port>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010ef4:	88fb      	ldrh	r3, [r7, #6]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d135      	bne.n	8010f66 <tcp_bind+0xca>
      return ERR_BUF;
 8010efa:	f06f 0301 	mvn.w	r3, #1
 8010efe:	e04f      	b.n	8010fa0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010f00:	2300      	movs	r3, #0
 8010f02:	61fb      	str	r3, [r7, #28]
 8010f04:	e02b      	b.n	8010f5e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010f06:	4a2c      	ldr	r2, [pc, #176]	; (8010fb8 <tcp_bind+0x11c>)
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	61bb      	str	r3, [r7, #24]
 8010f12:	e01e      	b.n	8010f52 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	8adb      	ldrh	r3, [r3, #22]
 8010f18:	88fa      	ldrh	r2, [r7, #6]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d116      	bne.n	8010f4c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010f1e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d010      	beq.n	8010f46 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00c      	beq.n	8010f46 <tcp_bind+0xaa>
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d009      	beq.n	8010f46 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d005      	beq.n	8010f46 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d102      	bne.n	8010f4c <tcp_bind+0xb0>
              return ERR_USE;
 8010f46:	f06f 0307 	mvn.w	r3, #7
 8010f4a:	e029      	b.n	8010fa0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	61bb      	str	r3, [r7, #24]
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1dd      	bne.n	8010f14 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	61fb      	str	r3, [r7, #28]
 8010f5e:	69fa      	ldr	r2, [r7, #28]
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	dbcf      	blt.n	8010f06 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00c      	beq.n	8010f86 <tcp_bind+0xea>
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d008      	beq.n	8010f86 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d002      	beq.n	8010f80 <tcp_bind+0xe4>
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	e000      	b.n	8010f82 <tcp_bind+0xe6>
 8010f80:	2300      	movs	r3, #0
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	88fa      	ldrh	r2, [r7, #6]
 8010f8a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010f8c:	4b0b      	ldr	r3, [pc, #44]	; (8010fbc <tcp_bind+0x120>)
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	60da      	str	r2, [r3, #12]
 8010f94:	4a09      	ldr	r2, [pc, #36]	; (8010fbc <tcp_bind+0x120>)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6013      	str	r3, [r2, #0]
 8010f9a:	f004 feb9 	bl	8015d10 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3720      	adds	r7, #32
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	0801c6a8 	.word	0x0801c6a8
 8010fac:	0801b09c 	.word	0x0801b09c
 8010fb0:	0801b18c 	.word	0x0801b18c
 8010fb4:	0801b0fc 	.word	0x0801b0fc
 8010fb8:	0801c680 	.word	0x0801c680
 8010fbc:	200079bc 	.word	0x200079bc

08010fc0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60f8      	str	r0, [r7, #12]
 8010fc8:	60b9      	str	r1, [r7, #8]
 8010fca:	4613      	mov	r3, r2
 8010fcc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8010fce:	68b8      	ldr	r0, [r7, #8]
 8010fd0:	f7ff ff58 	bl	8010e84 <tcp_abort>

  return ERR_ABRT;
 8010fd4:	f06f 030c 	mvn.w	r3, #12
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3710      	adds	r7, #16
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b088      	sub	sp, #32
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	460b      	mov	r3, r1
 8010fea:	607a      	str	r2, [r7, #4]
 8010fec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	7d1b      	ldrb	r3, [r3, #20]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d009      	beq.n	801100e <tcp_listen_with_backlog_and_err+0x2e>
 8010ffa:	4b3f      	ldr	r3, [pc, #252]	; (80110f8 <tcp_listen_with_backlog_and_err+0x118>)
 8010ffc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011000:	493e      	ldr	r1, [pc, #248]	; (80110fc <tcp_listen_with_backlog_and_err+0x11c>)
 8011002:	483f      	ldr	r0, [pc, #252]	; (8011100 <tcp_listen_with_backlog_and_err+0x120>)
 8011004:	f007 fed4 	bl	8018db0 <iprintf>
 8011008:	23f1      	movs	r3, #241	; 0xf1
 801100a:	76fb      	strb	r3, [r7, #27]
 801100c:	e069      	b.n	80110e2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	7d1b      	ldrb	r3, [r3, #20]
 8011012:	2b01      	cmp	r3, #1
 8011014:	d104      	bne.n	8011020 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801101a:	23f7      	movs	r3, #247	; 0xf7
 801101c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801101e:	e060      	b.n	80110e2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011020:	2002      	movs	r0, #2
 8011022:	f7fe fbdb 	bl	800f7dc <memp_malloc>
 8011026:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d102      	bne.n	8011034 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801102e:	23ff      	movs	r3, #255	; 0xff
 8011030:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011032:	e056      	b.n	80110e2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	691a      	ldr	r2, [r3, #16]
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	8ada      	ldrh	r2, [r3, #22]
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	2201      	movs	r2, #1
 8011048:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	7d5a      	ldrb	r2, [r3, #21]
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	7a1a      	ldrb	r2, [r3, #8]
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	7a9a      	ldrb	r2, [r3, #10]
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	7a5a      	ldrb	r2, [r3, #9]
 8011066:	69fb      	ldr	r3, [r7, #28]
 8011068:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	8adb      	ldrh	r3, [r3, #22]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d021      	beq.n	80110be <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801107a:	4b22      	ldr	r3, [pc, #136]	; (8011104 <tcp_listen_with_backlog_and_err+0x124>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	429a      	cmp	r2, r3
 8011082:	d105      	bne.n	8011090 <tcp_listen_with_backlog_and_err+0xb0>
 8011084:	4b1f      	ldr	r3, [pc, #124]	; (8011104 <tcp_listen_with_backlog_and_err+0x124>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	4a1e      	ldr	r2, [pc, #120]	; (8011104 <tcp_listen_with_backlog_and_err+0x124>)
 801108c:	6013      	str	r3, [r2, #0]
 801108e:	e013      	b.n	80110b8 <tcp_listen_with_backlog_and_err+0xd8>
 8011090:	4b1c      	ldr	r3, [pc, #112]	; (8011104 <tcp_listen_with_backlog_and_err+0x124>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	617b      	str	r3, [r7, #20]
 8011096:	e00c      	b.n	80110b2 <tcp_listen_with_backlog_and_err+0xd2>
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d104      	bne.n	80110ac <tcp_listen_with_backlog_and_err+0xcc>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	68da      	ldr	r2, [r3, #12]
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	60da      	str	r2, [r3, #12]
 80110aa:	e005      	b.n	80110b8 <tcp_listen_with_backlog_and_err+0xd8>
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	617b      	str	r3, [r7, #20]
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d1ef      	bne.n	8011098 <tcp_listen_with_backlog_and_err+0xb8>
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2200      	movs	r2, #0
 80110bc:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80110be:	68f9      	ldr	r1, [r7, #12]
 80110c0:	2001      	movs	r0, #1
 80110c2:	f7fe fc01 	bl	800f8c8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	4a0f      	ldr	r2, [pc, #60]	; (8011108 <tcp_listen_with_backlog_and_err+0x128>)
 80110ca:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80110cc:	4b0f      	ldr	r3, [pc, #60]	; (801110c <tcp_listen_with_backlog_and_err+0x12c>)
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	60da      	str	r2, [r3, #12]
 80110d4:	4a0d      	ldr	r2, [pc, #52]	; (801110c <tcp_listen_with_backlog_and_err+0x12c>)
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	f004 fe19 	bl	8015d10 <tcp_timer_needed>
  res = ERR_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	7efa      	ldrb	r2, [r7, #27]
 80110ec:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80110ee:	69fb      	ldr	r3, [r7, #28]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3720      	adds	r7, #32
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	0801b09c 	.word	0x0801b09c
 80110fc:	0801b1b4 	.word	0x0801b1b4
 8011100:	0801b0fc 	.word	0x0801b0fc
 8011104:	200079bc 	.word	0x200079bc
 8011108:	08010fc1 	.word	0x08010fc1
 801110c:	200079b8 	.word	0x200079b8

08011110 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011120:	4413      	add	r3, r2
 8011122:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801112c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011130:	bf28      	it	cs
 8011132:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011136:	b292      	uxth	r2, r2
 8011138:	4413      	add	r3, r2
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	1ad3      	subs	r3, r2, r3
 801113e:	2b00      	cmp	r3, #0
 8011140:	db08      	blt.n	8011154 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	e020      	b.n	8011196 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	dd03      	ble.n	801116a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011168:	e014      	b.n	8011194 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801117c:	d306      	bcc.n	801118c <tcp_update_rcv_ann_wnd+0x7c>
 801117e:	4b08      	ldr	r3, [pc, #32]	; (80111a0 <tcp_update_rcv_ann_wnd+0x90>)
 8011180:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011184:	4907      	ldr	r1, [pc, #28]	; (80111a4 <tcp_update_rcv_ann_wnd+0x94>)
 8011186:	4808      	ldr	r0, [pc, #32]	; (80111a8 <tcp_update_rcv_ann_wnd+0x98>)
 8011188:	f007 fe12 	bl	8018db0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	b29a      	uxth	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011194:	2300      	movs	r3, #0
  }
}
 8011196:	4618      	mov	r0, r3
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	0801b09c 	.word	0x0801b09c
 80111a4:	0801b1d8 	.word	0x0801b1d8
 80111a8:	0801b0fc 	.word	0x0801b0fc

080111ac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	7d1b      	ldrb	r3, [r3, #20]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d106      	bne.n	80111ce <tcp_recved+0x22>
 80111c0:	4b23      	ldr	r3, [pc, #140]	; (8011250 <tcp_recved+0xa4>)
 80111c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80111c6:	4923      	ldr	r1, [pc, #140]	; (8011254 <tcp_recved+0xa8>)
 80111c8:	4823      	ldr	r0, [pc, #140]	; (8011258 <tcp_recved+0xac>)
 80111ca:	f007 fdf1 	bl	8018db0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111d2:	887b      	ldrh	r3, [r7, #2]
 80111d4:	4413      	add	r3, r2
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80111e4:	d904      	bls.n	80111f0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80111ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80111ee:	e017      	b.n	8011220 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d113      	bne.n	8011220 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	7d1b      	ldrb	r3, [r3, #20]
 80111fc:	2b07      	cmp	r3, #7
 80111fe:	d003      	beq.n	8011208 <tcp_recved+0x5c>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	7d1b      	ldrb	r3, [r3, #20]
 8011204:	2b09      	cmp	r3, #9
 8011206:	d104      	bne.n	8011212 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801120e:	851a      	strh	r2, [r3, #40]	; 0x28
 8011210:	e006      	b.n	8011220 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011212:	4b0f      	ldr	r3, [pc, #60]	; (8011250 <tcp_recved+0xa4>)
 8011214:	f240 322d 	movw	r2, #813	; 0x32d
 8011218:	4910      	ldr	r1, [pc, #64]	; (801125c <tcp_recved+0xb0>)
 801121a:	480f      	ldr	r0, [pc, #60]	; (8011258 <tcp_recved+0xac>)
 801121c:	f007 fdc8 	bl	8018db0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff ff75 	bl	8011110 <tcp_update_rcv_ann_wnd>
 8011226:	4603      	mov	r3, r0
 8011228:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011230:	db09      	blt.n	8011246 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	7e9b      	ldrb	r3, [r3, #26]
 8011236:	f043 0302 	orr.w	r3, r3, #2
 801123a:	b2da      	uxtb	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f004 f889 	bl	8015358 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011246:	bf00      	nop
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	0801b09c 	.word	0x0801b09c
 8011254:	0801b1f4 	.word	0x0801b1f4
 8011258:	0801b0fc 	.word	0x0801b0fc
 801125c:	0801b21c 	.word	0x0801b21c

08011260 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011266:	2300      	movs	r3, #0
 8011268:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801126a:	4b1d      	ldr	r3, [pc, #116]	; (80112e0 <tcp_new_port+0x80>)
 801126c:	881b      	ldrh	r3, [r3, #0]
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	b291      	uxth	r1, r2
 8011272:	4a1b      	ldr	r2, [pc, #108]	; (80112e0 <tcp_new_port+0x80>)
 8011274:	8011      	strh	r1, [r2, #0]
 8011276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801127a:	4293      	cmp	r3, r2
 801127c:	d103      	bne.n	8011286 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801127e:	4b18      	ldr	r3, [pc, #96]	; (80112e0 <tcp_new_port+0x80>)
 8011280:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011284:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011286:	2300      	movs	r3, #0
 8011288:	71fb      	strb	r3, [r7, #7]
 801128a:	e01e      	b.n	80112ca <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801128c:	79fb      	ldrb	r3, [r7, #7]
 801128e:	4a15      	ldr	r2, [pc, #84]	; (80112e4 <tcp_new_port+0x84>)
 8011290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	603b      	str	r3, [r7, #0]
 8011298:	e011      	b.n	80112be <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	8ada      	ldrh	r2, [r3, #22]
 801129e:	4b10      	ldr	r3, [pc, #64]	; (80112e0 <tcp_new_port+0x80>)
 80112a0:	881b      	ldrh	r3, [r3, #0]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d108      	bne.n	80112b8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80112a6:	88bb      	ldrh	r3, [r7, #4]
 80112a8:	3301      	adds	r3, #1
 80112aa:	80bb      	strh	r3, [r7, #4]
 80112ac:	88bb      	ldrh	r3, [r7, #4]
 80112ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112b2:	d3da      	bcc.n	801126a <tcp_new_port+0xa>
          return 0;
 80112b4:	2300      	movs	r3, #0
 80112b6:	e00d      	b.n	80112d4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	603b      	str	r3, [r7, #0]
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1ea      	bne.n	801129a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80112c4:	79fb      	ldrb	r3, [r7, #7]
 80112c6:	3301      	adds	r3, #1
 80112c8:	71fb      	strb	r3, [r7, #7]
 80112ca:	79fb      	ldrb	r3, [r7, #7]
 80112cc:	2b03      	cmp	r3, #3
 80112ce:	d9dd      	bls.n	801128c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80112d0:	4b03      	ldr	r3, [pc, #12]	; (80112e0 <tcp_new_port+0x80>)
 80112d2:	881b      	ldrh	r3, [r3, #0]
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr
 80112e0:	20000028 	.word	0x20000028
 80112e4:	0801c680 	.word	0x0801c680

080112e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80112e8:	b5b0      	push	{r4, r5, r7, lr}
 80112ea:	b08c      	sub	sp, #48	; 0x30
 80112ec:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80112ee:	2300      	movs	r3, #0
 80112f0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80112f2:	4b96      	ldr	r3, [pc, #600]	; (801154c <tcp_slowtmr+0x264>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3301      	adds	r3, #1
 80112f8:	4a94      	ldr	r2, [pc, #592]	; (801154c <tcp_slowtmr+0x264>)
 80112fa:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80112fc:	4b94      	ldr	r3, [pc, #592]	; (8011550 <tcp_slowtmr+0x268>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	3301      	adds	r3, #1
 8011302:	b2da      	uxtb	r2, r3
 8011304:	4b92      	ldr	r3, [pc, #584]	; (8011550 <tcp_slowtmr+0x268>)
 8011306:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011308:	2300      	movs	r3, #0
 801130a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801130c:	4b91      	ldr	r3, [pc, #580]	; (8011554 <tcp_slowtmr+0x26c>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011312:	e227      	b.n	8011764 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	7d1b      	ldrb	r3, [r3, #20]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d106      	bne.n	801132a <tcp_slowtmr+0x42>
 801131c:	4b8e      	ldr	r3, [pc, #568]	; (8011558 <tcp_slowtmr+0x270>)
 801131e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8011322:	498e      	ldr	r1, [pc, #568]	; (801155c <tcp_slowtmr+0x274>)
 8011324:	488e      	ldr	r0, [pc, #568]	; (8011560 <tcp_slowtmr+0x278>)
 8011326:	f007 fd43 	bl	8018db0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	7d1b      	ldrb	r3, [r3, #20]
 801132e:	2b01      	cmp	r3, #1
 8011330:	d106      	bne.n	8011340 <tcp_slowtmr+0x58>
 8011332:	4b89      	ldr	r3, [pc, #548]	; (8011558 <tcp_slowtmr+0x270>)
 8011334:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011338:	498a      	ldr	r1, [pc, #552]	; (8011564 <tcp_slowtmr+0x27c>)
 801133a:	4889      	ldr	r0, [pc, #548]	; (8011560 <tcp_slowtmr+0x278>)
 801133c:	f007 fd38 	bl	8018db0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011342:	7d1b      	ldrb	r3, [r3, #20]
 8011344:	2b0a      	cmp	r3, #10
 8011346:	d106      	bne.n	8011356 <tcp_slowtmr+0x6e>
 8011348:	4b83      	ldr	r3, [pc, #524]	; (8011558 <tcp_slowtmr+0x270>)
 801134a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801134e:	4986      	ldr	r1, [pc, #536]	; (8011568 <tcp_slowtmr+0x280>)
 8011350:	4883      	ldr	r0, [pc, #524]	; (8011560 <tcp_slowtmr+0x278>)
 8011352:	f007 fd2d 	bl	8018db0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011358:	7f5a      	ldrb	r2, [r3, #29]
 801135a:	4b7d      	ldr	r3, [pc, #500]	; (8011550 <tcp_slowtmr+0x268>)
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	429a      	cmp	r2, r3
 8011360:	d103      	bne.n	801136a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8011368:	e1fc      	b.n	8011764 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801136a:	4b79      	ldr	r3, [pc, #484]	; (8011550 <tcp_slowtmr+0x268>)
 801136c:	781a      	ldrb	r2, [r3, #0]
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8011372:	2300      	movs	r3, #0
 8011374:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	7d1b      	ldrb	r3, [r3, #20]
 801137e:	2b02      	cmp	r3, #2
 8011380:	d108      	bne.n	8011394 <tcp_slowtmr+0xac>
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011388:	2b05      	cmp	r3, #5
 801138a:	d903      	bls.n	8011394 <tcp_slowtmr+0xac>
      ++pcb_remove;
 801138c:	7ffb      	ldrb	r3, [r7, #31]
 801138e:	3301      	adds	r3, #1
 8011390:	77fb      	strb	r3, [r7, #31]
 8011392:	e0a2      	b.n	80114da <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8011394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801139a:	2b0b      	cmp	r3, #11
 801139c:	d903      	bls.n	80113a6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801139e:	7ffb      	ldrb	r3, [r7, #31]
 80113a0:	3301      	adds	r3, #1
 80113a2:	77fb      	strb	r3, [r7, #31]
 80113a4:	e099      	b.n	80114da <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80113a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d032      	beq.n	8011416 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80113b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80113b6:	3b01      	subs	r3, #1
 80113b8:	4a6c      	ldr	r2, [pc, #432]	; (801156c <tcp_slowtmr+0x284>)
 80113ba:	5cd3      	ldrb	r3, [r2, r3]
 80113bc:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80113c4:	7cfa      	ldrb	r2, [r7, #19]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d907      	bls.n	80113da <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80113d0:	3301      	adds	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80113e0:	7cfa      	ldrb	r2, [r7, #19]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d879      	bhi.n	80114da <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80113e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113e8:	f004 fbd2 	bl	8015b90 <tcp_zero_window_probe>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d173      	bne.n	80114da <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011400:	2b06      	cmp	r3, #6
 8011402:	d86a      	bhi.n	80114da <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8011404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011406:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801140a:	3301      	adds	r3, #1
 801140c:	b2da      	uxtb	r2, r3
 801140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011410:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8011414:	e061      	b.n	80114da <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8011416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011418:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801141c:	2b00      	cmp	r3, #0
 801141e:	db08      	blt.n	8011432 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8011420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011422:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011426:	b29b      	uxth	r3, r3
 8011428:	3301      	adds	r3, #1
 801142a:	b29b      	uxth	r3, r3
 801142c:	b21a      	sxth	r2, r3
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8011432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011436:	2b00      	cmp	r3, #0
 8011438:	d04f      	beq.n	80114da <tcp_slowtmr+0x1f2>
 801143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011442:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011446:	429a      	cmp	r2, r3
 8011448:	db47      	blt.n	80114da <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144c:	7d1b      	ldrb	r3, [r3, #20]
 801144e:	2b02      	cmp	r3, #2
 8011450:	d018      	beq.n	8011484 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011458:	2b0c      	cmp	r3, #12
 801145a:	bf28      	it	cs
 801145c:	230c      	movcs	r3, #12
 801145e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011466:	10db      	asrs	r3, r3, #3
 8011468:	b21b      	sxth	r3, r3
 801146a:	461a      	mov	r2, r3
 801146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011472:	4413      	add	r3, r2
 8011474:	7dfa      	ldrb	r2, [r7, #23]
 8011476:	493e      	ldr	r1, [pc, #248]	; (8011570 <tcp_slowtmr+0x288>)
 8011478:	5c8a      	ldrb	r2, [r1, r2]
 801147a:	4093      	lsls	r3, r2
 801147c:	b21a      	sxth	r2, r3
 801147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8011484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011486:	2200      	movs	r2, #0
 8011488:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011492:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011496:	4293      	cmp	r3, r2
 8011498:	bf28      	it	cs
 801149a:	4613      	movcs	r3, r2
 801149c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 801149e:	8abb      	ldrh	r3, [r7, #20]
 80114a0:	085b      	lsrs	r3, r3, #1
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d206      	bcs.n	80114ca <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80114bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114c0:	005b      	lsls	r3, r3, #1
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80114ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80114d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114d6:	f004 fa3f 	bl	8015958 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80114da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114dc:	7d1b      	ldrb	r3, [r3, #20]
 80114de:	2b06      	cmp	r3, #6
 80114e0:	d10f      	bne.n	8011502 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	7e9b      	ldrb	r3, [r3, #26]
 80114e6:	f003 0310 	and.w	r3, r3, #16
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d009      	beq.n	8011502 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114ee:	4b17      	ldr	r3, [pc, #92]	; (801154c <tcp_slowtmr+0x264>)
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f4:	6a1b      	ldr	r3, [r3, #32]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	2b28      	cmp	r3, #40	; 0x28
 80114fa:	d902      	bls.n	8011502 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80114fc:	7ffb      	ldrb	r3, [r7, #31]
 80114fe:	3301      	adds	r3, #1
 8011500:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	7a1b      	ldrb	r3, [r3, #8]
 8011506:	f003 0308 	and.w	r3, r3, #8
 801150a:	2b00      	cmp	r3, #0
 801150c:	d05d      	beq.n	80115ca <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011512:	2b04      	cmp	r3, #4
 8011514:	d003      	beq.n	801151e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8011516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011518:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801151a:	2b07      	cmp	r3, #7
 801151c:	d155      	bne.n	80115ca <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801151e:	4b0b      	ldr	r3, [pc, #44]	; (801154c <tcp_slowtmr+0x264>)
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	6a1b      	ldr	r3, [r3, #32]
 8011526:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801152e:	4b11      	ldr	r3, [pc, #68]	; (8011574 <tcp_slowtmr+0x28c>)
 8011530:	440b      	add	r3, r1
 8011532:	4911      	ldr	r1, [pc, #68]	; (8011578 <tcp_slowtmr+0x290>)
 8011534:	fba1 1303 	umull	r1, r3, r1, r3
 8011538:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801153a:	429a      	cmp	r2, r3
 801153c:	d91e      	bls.n	801157c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801153e:	7ffb      	ldrb	r3, [r7, #31]
 8011540:	3301      	adds	r3, #1
 8011542:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8011544:	7fbb      	ldrb	r3, [r7, #30]
 8011546:	3301      	adds	r3, #1
 8011548:	77bb      	strb	r3, [r7, #30]
 801154a:	e03e      	b.n	80115ca <tcp_slowtmr+0x2e2>
 801154c:	200079b4 	.word	0x200079b4
 8011550:	200040b2 	.word	0x200040b2
 8011554:	200079b0 	.word	0x200079b0
 8011558:	0801b09c 	.word	0x0801b09c
 801155c:	0801b270 	.word	0x0801b270
 8011560:	0801b0fc 	.word	0x0801b0fc
 8011564:	0801b29c 	.word	0x0801b29c
 8011568:	0801b2c8 	.word	0x0801b2c8
 801156c:	0801c678 	.word	0x0801c678
 8011570:	0801c668 	.word	0x0801c668
 8011574:	000a4cb8 	.word	0x000a4cb8
 8011578:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801157c:	4b97      	ldr	r3, [pc, #604]	; (80117dc <tcp_slowtmr+0x4f4>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011582:	6a1b      	ldr	r3, [r3, #32]
 8011584:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011588:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011592:	4618      	mov	r0, r3
 8011594:	4b92      	ldr	r3, [pc, #584]	; (80117e0 <tcp_slowtmr+0x4f8>)
 8011596:	fb03 f300 	mul.w	r3, r3, r0
 801159a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801159c:	4991      	ldr	r1, [pc, #580]	; (80117e4 <tcp_slowtmr+0x4fc>)
 801159e:	fba1 1303 	umull	r1, r3, r1, r3
 80115a2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d910      	bls.n	80115ca <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80115a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115aa:	f004 fab4 	bl	8015b16 <tcp_keepalive>
 80115ae:	4603      	mov	r3, r0
 80115b0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80115b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d107      	bne.n	80115ca <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80115ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115bc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80115c0:	3301      	adds	r3, #1
 80115c2:	b2da      	uxtb	r2, r3
 80115c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d016      	beq.n	8011600 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80115d2:	4b82      	ldr	r3, [pc, #520]	; (80117dc <tcp_slowtmr+0x4f4>)
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d8:	6a1b      	ldr	r3, [r3, #32]
 80115da:	1ad2      	subs	r2, r2, r3
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80115e2:	4619      	mov	r1, r3
 80115e4:	460b      	mov	r3, r1
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	440b      	add	r3, r1
 80115ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d307      	bcc.n	8011600 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115f4:	4618      	mov	r0, r3
 80115f6:	f000 fa04 	bl	8011a02 <tcp_segs_free>
      pcb->ooseq = NULL;
 80115fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fc:	2200      	movs	r2, #0
 80115fe:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011602:	7d1b      	ldrb	r3, [r3, #20]
 8011604:	2b03      	cmp	r3, #3
 8011606:	d109      	bne.n	801161c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011608:	4b74      	ldr	r3, [pc, #464]	; (80117dc <tcp_slowtmr+0x4f4>)
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	6a1b      	ldr	r3, [r3, #32]
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	2b28      	cmp	r3, #40	; 0x28
 8011614:	d902      	bls.n	801161c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011616:	7ffb      	ldrb	r3, [r7, #31]
 8011618:	3301      	adds	r3, #1
 801161a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161e:	7d1b      	ldrb	r3, [r3, #20]
 8011620:	2b09      	cmp	r3, #9
 8011622:	d109      	bne.n	8011638 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011624:	4b6d      	ldr	r3, [pc, #436]	; (80117dc <tcp_slowtmr+0x4f4>)
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162a:	6a1b      	ldr	r3, [r3, #32]
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	2bf0      	cmp	r3, #240	; 0xf0
 8011630:	d902      	bls.n	8011638 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011632:	7ffb      	ldrb	r3, [r7, #31]
 8011634:	3301      	adds	r3, #1
 8011636:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011638:	7ffb      	ldrb	r3, [r7, #31]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d05d      	beq.n	80116fa <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011644:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011648:	f000 fc44 	bl	8011ed4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d010      	beq.n	8011674 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011652:	4b65      	ldr	r3, [pc, #404]	; (80117e8 <tcp_slowtmr+0x500>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011658:	429a      	cmp	r2, r3
 801165a:	d106      	bne.n	801166a <tcp_slowtmr+0x382>
 801165c:	4b63      	ldr	r3, [pc, #396]	; (80117ec <tcp_slowtmr+0x504>)
 801165e:	f240 4289 	movw	r2, #1161	; 0x489
 8011662:	4963      	ldr	r1, [pc, #396]	; (80117f0 <tcp_slowtmr+0x508>)
 8011664:	4863      	ldr	r0, [pc, #396]	; (80117f4 <tcp_slowtmr+0x50c>)
 8011666:	f007 fba3 	bl	8018db0 <iprintf>
        prev->next = pcb->next;
 801166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166c:	68da      	ldr	r2, [r3, #12]
 801166e:	6a3b      	ldr	r3, [r7, #32]
 8011670:	60da      	str	r2, [r3, #12]
 8011672:	e00f      	b.n	8011694 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011674:	4b5c      	ldr	r3, [pc, #368]	; (80117e8 <tcp_slowtmr+0x500>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801167a:	429a      	cmp	r2, r3
 801167c:	d006      	beq.n	801168c <tcp_slowtmr+0x3a4>
 801167e:	4b5b      	ldr	r3, [pc, #364]	; (80117ec <tcp_slowtmr+0x504>)
 8011680:	f240 428d 	movw	r2, #1165	; 0x48d
 8011684:	495c      	ldr	r1, [pc, #368]	; (80117f8 <tcp_slowtmr+0x510>)
 8011686:	485b      	ldr	r0, [pc, #364]	; (80117f4 <tcp_slowtmr+0x50c>)
 8011688:	f007 fb92 	bl	8018db0 <iprintf>
        tcp_active_pcbs = pcb->next;
 801168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	4a55      	ldr	r2, [pc, #340]	; (80117e8 <tcp_slowtmr+0x500>)
 8011692:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011694:	7fbb      	ldrb	r3, [r7, #30]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d010      	beq.n	80116bc <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80116a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80116a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a6:	1d1d      	adds	r5, r3, #4
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	8adb      	ldrh	r3, [r3, #22]
 80116ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116ae:	8b12      	ldrh	r2, [r2, #24]
 80116b0:	9201      	str	r2, [sp, #4]
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	462b      	mov	r3, r5
 80116b6:	4622      	mov	r2, r4
 80116b8:	f004 f8d8 	bl	801586c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80116bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116be:	691b      	ldr	r3, [r3, #16]
 80116c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	7d1b      	ldrb	r3, [r3, #20]
 80116c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80116c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80116d2:	6839      	ldr	r1, [r7, #0]
 80116d4:	2001      	movs	r0, #1
 80116d6:	f7fe f8f7 	bl	800f8c8 <memp_free>

      tcp_active_pcbs_changed = 0;
 80116da:	4b48      	ldr	r3, [pc, #288]	; (80117fc <tcp_slowtmr+0x514>)
 80116dc:	2200      	movs	r2, #0
 80116de:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d004      	beq.n	80116f0 <tcp_slowtmr+0x408>
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f06f 010c 	mvn.w	r1, #12
 80116ec:	68b8      	ldr	r0, [r7, #8]
 80116ee:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80116f0:	4b42      	ldr	r3, [pc, #264]	; (80117fc <tcp_slowtmr+0x514>)
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d035      	beq.n	8011764 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80116f8:	e606      	b.n	8011308 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80116fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011704:	6a3b      	ldr	r3, [r7, #32]
 8011706:	7edb      	ldrb	r3, [r3, #27]
 8011708:	3301      	adds	r3, #1
 801170a:	b2da      	uxtb	r2, r3
 801170c:	6a3b      	ldr	r3, [r7, #32]
 801170e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011710:	6a3b      	ldr	r3, [r7, #32]
 8011712:	7eda      	ldrb	r2, [r3, #27]
 8011714:	6a3b      	ldr	r3, [r7, #32]
 8011716:	7f1b      	ldrb	r3, [r3, #28]
 8011718:	429a      	cmp	r2, r3
 801171a:	d323      	bcc.n	8011764 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801171c:	6a3b      	ldr	r3, [r7, #32]
 801171e:	2200      	movs	r2, #0
 8011720:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011722:	4b36      	ldr	r3, [pc, #216]	; (80117fc <tcp_slowtmr+0x514>)
 8011724:	2200      	movs	r2, #0
 8011726:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011728:	6a3b      	ldr	r3, [r7, #32]
 801172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00a      	beq.n	8011748 <tcp_slowtmr+0x460>
 8011732:	6a3b      	ldr	r3, [r7, #32]
 8011734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011738:	6a3a      	ldr	r2, [r7, #32]
 801173a:	6912      	ldr	r2, [r2, #16]
 801173c:	6a39      	ldr	r1, [r7, #32]
 801173e:	4610      	mov	r0, r2
 8011740:	4798      	blx	r3
 8011742:	4603      	mov	r3, r0
 8011744:	777b      	strb	r3, [r7, #29]
 8011746:	e001      	b.n	801174c <tcp_slowtmr+0x464>
 8011748:	2300      	movs	r3, #0
 801174a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801174c:	4b2b      	ldr	r3, [pc, #172]	; (80117fc <tcp_slowtmr+0x514>)
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d000      	beq.n	8011756 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8011754:	e5d8      	b.n	8011308 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011756:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d102      	bne.n	8011764 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801175e:	6a38      	ldr	r0, [r7, #32]
 8011760:	f003 fdfa 	bl	8015358 <tcp_output>
  while (pcb != NULL) {
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	2b00      	cmp	r3, #0
 8011768:	f47f add4 	bne.w	8011314 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801176c:	2300      	movs	r3, #0
 801176e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011770:	4b23      	ldr	r3, [pc, #140]	; (8011800 <tcp_slowtmr+0x518>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011776:	e068      	b.n	801184a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177a:	7d1b      	ldrb	r3, [r3, #20]
 801177c:	2b0a      	cmp	r3, #10
 801177e:	d006      	beq.n	801178e <tcp_slowtmr+0x4a6>
 8011780:	4b1a      	ldr	r3, [pc, #104]	; (80117ec <tcp_slowtmr+0x504>)
 8011782:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011786:	491f      	ldr	r1, [pc, #124]	; (8011804 <tcp_slowtmr+0x51c>)
 8011788:	481a      	ldr	r0, [pc, #104]	; (80117f4 <tcp_slowtmr+0x50c>)
 801178a:	f007 fb11 	bl	8018db0 <iprintf>
    pcb_remove = 0;
 801178e:	2300      	movs	r3, #0
 8011790:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011792:	4b12      	ldr	r3, [pc, #72]	; (80117dc <tcp_slowtmr+0x4f4>)
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	2bf0      	cmp	r3, #240	; 0xf0
 801179e:	d902      	bls.n	80117a6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80117a0:	7ffb      	ldrb	r3, [r7, #31]
 80117a2:	3301      	adds	r3, #1
 80117a4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80117a6:	7ffb      	ldrb	r3, [r7, #31]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d049      	beq.n	8011840 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80117ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ae:	f000 fb91 	bl	8011ed4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80117b2:	6a3b      	ldr	r3, [r7, #32]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d029      	beq.n	801180c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80117b8:	4b11      	ldr	r3, [pc, #68]	; (8011800 <tcp_slowtmr+0x518>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117be:	429a      	cmp	r2, r3
 80117c0:	d106      	bne.n	80117d0 <tcp_slowtmr+0x4e8>
 80117c2:	4b0a      	ldr	r3, [pc, #40]	; (80117ec <tcp_slowtmr+0x504>)
 80117c4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80117c8:	490f      	ldr	r1, [pc, #60]	; (8011808 <tcp_slowtmr+0x520>)
 80117ca:	480a      	ldr	r0, [pc, #40]	; (80117f4 <tcp_slowtmr+0x50c>)
 80117cc:	f007 faf0 	bl	8018db0 <iprintf>
        prev->next = pcb->next;
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	68da      	ldr	r2, [r3, #12]
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	60da      	str	r2, [r3, #12]
 80117d8:	e028      	b.n	801182c <tcp_slowtmr+0x544>
 80117da:	bf00      	nop
 80117dc:	200079b4 	.word	0x200079b4
 80117e0:	000124f8 	.word	0x000124f8
 80117e4:	10624dd3 	.word	0x10624dd3
 80117e8:	200079b0 	.word	0x200079b0
 80117ec:	0801b09c 	.word	0x0801b09c
 80117f0:	0801b2f8 	.word	0x0801b2f8
 80117f4:	0801b0fc 	.word	0x0801b0fc
 80117f8:	0801b324 	.word	0x0801b324
 80117fc:	200079ac 	.word	0x200079ac
 8011800:	200079c0 	.word	0x200079c0
 8011804:	0801b350 	.word	0x0801b350
 8011808:	0801b380 	.word	0x0801b380
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801180c:	4b12      	ldr	r3, [pc, #72]	; (8011858 <tcp_slowtmr+0x570>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011812:	429a      	cmp	r2, r3
 8011814:	d006      	beq.n	8011824 <tcp_slowtmr+0x53c>
 8011816:	4b11      	ldr	r3, [pc, #68]	; (801185c <tcp_slowtmr+0x574>)
 8011818:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801181c:	4910      	ldr	r1, [pc, #64]	; (8011860 <tcp_slowtmr+0x578>)
 801181e:	4811      	ldr	r0, [pc, #68]	; (8011864 <tcp_slowtmr+0x57c>)
 8011820:	f007 fac6 	bl	8018db0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <tcp_slowtmr+0x570>)
 801182a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011836:	69b9      	ldr	r1, [r7, #24]
 8011838:	2001      	movs	r0, #1
 801183a:	f7fe f845 	bl	800f8c8 <memp_free>
 801183e:	e004      	b.n	801184a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8011840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011842:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184c:	2b00      	cmp	r3, #0
 801184e:	d193      	bne.n	8011778 <tcp_slowtmr+0x490>
    }
  }
}
 8011850:	bf00      	nop
 8011852:	3728      	adds	r7, #40	; 0x28
 8011854:	46bd      	mov	sp, r7
 8011856:	bdb0      	pop	{r4, r5, r7, pc}
 8011858:	200079c0 	.word	0x200079c0
 801185c:	0801b09c 	.word	0x0801b09c
 8011860:	0801b3a8 	.word	0x0801b3a8
 8011864:	0801b0fc 	.word	0x0801b0fc

08011868 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801186e:	4b2d      	ldr	r3, [pc, #180]	; (8011924 <tcp_fasttmr+0xbc>)
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	3301      	adds	r3, #1
 8011874:	b2da      	uxtb	r2, r3
 8011876:	4b2b      	ldr	r3, [pc, #172]	; (8011924 <tcp_fasttmr+0xbc>)
 8011878:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801187a:	4b2b      	ldr	r3, [pc, #172]	; (8011928 <tcp_fasttmr+0xc0>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011880:	e048      	b.n	8011914 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	7f5a      	ldrb	r2, [r3, #29]
 8011886:	4b27      	ldr	r3, [pc, #156]	; (8011924 <tcp_fasttmr+0xbc>)
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	429a      	cmp	r2, r3
 801188c:	d03f      	beq.n	801190e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801188e:	4b25      	ldr	r3, [pc, #148]	; (8011924 <tcp_fasttmr+0xbc>)
 8011890:	781a      	ldrb	r2, [r3, #0]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	7e9b      	ldrb	r3, [r3, #26]
 801189a:	f003 0301 	and.w	r3, r3, #1
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d010      	beq.n	80118c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	7e9b      	ldrb	r3, [r3, #26]
 80118a6:	f043 0302 	orr.w	r3, r3, #2
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f003 fd51 	bl	8015358 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	7e9b      	ldrb	r3, [r3, #26]
 80118ba:	f023 0303 	bic.w	r3, r3, #3
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	7e9b      	ldrb	r3, [r3, #26]
 80118c8:	f003 0308 	and.w	r3, r3, #8
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d009      	beq.n	80118e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	7e9b      	ldrb	r3, [r3, #26]
 80118d4:	f023 0308 	bic.w	r3, r3, #8
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff f958 	bl	8010b94 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d00a      	beq.n	8011908 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80118f2:	4b0e      	ldr	r3, [pc, #56]	; (801192c <tcp_fasttmr+0xc4>)
 80118f4:	2200      	movs	r2, #0
 80118f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 f819 	bl	8011930 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80118fe:	4b0b      	ldr	r3, [pc, #44]	; (801192c <tcp_fasttmr+0xc4>)
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d000      	beq.n	8011908 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011906:	e7b8      	b.n	801187a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	607b      	str	r3, [r7, #4]
 801190c:	e002      	b.n	8011914 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	68db      	ldr	r3, [r3, #12]
 8011912:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d1b3      	bne.n	8011882 <tcp_fasttmr+0x1a>
    }
  }
}
 801191a:	bf00      	nop
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	200040b2 	.word	0x200040b2
 8011928:	200079b0 	.word	0x200079b0
 801192c:	200079ac 	.word	0x200079ac

08011930 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011930:	b590      	push	{r4, r7, lr}
 8011932:	b085      	sub	sp, #20
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801193c:	7b5b      	ldrb	r3, [r3, #13]
 801193e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011944:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011952:	2b00      	cmp	r3, #0
 8011954:	d00b      	beq.n	801196e <tcp_process_refused_data+0x3e>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6918      	ldr	r0, [r3, #16]
 8011960:	2300      	movs	r3, #0
 8011962:	68ba      	ldr	r2, [r7, #8]
 8011964:	6879      	ldr	r1, [r7, #4]
 8011966:	47a0      	blx	r4
 8011968:	4603      	mov	r3, r0
 801196a:	73fb      	strb	r3, [r7, #15]
 801196c:	e007      	b.n	801197e <tcp_process_refused_data+0x4e>
 801196e:	2300      	movs	r3, #0
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	6879      	ldr	r1, [r7, #4]
 8011974:	2000      	movs	r0, #0
 8011976:	f000 f88c 	bl	8011a92 <tcp_recv_null>
 801197a:	4603      	mov	r3, r0
 801197c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d12a      	bne.n	80119dc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8011986:	7bbb      	ldrb	r3, [r7, #14]
 8011988:	f003 0320 	and.w	r3, r3, #32
 801198c:	2b00      	cmp	r3, #0
 801198e:	d033      	beq.n	80119f8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011994:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011998:	d005      	beq.n	80119a6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801199e:	3301      	adds	r3, #1
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d00b      	beq.n	80119c8 <tcp_process_refused_data+0x98>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6918      	ldr	r0, [r3, #16]
 80119ba:	2300      	movs	r3, #0
 80119bc:	2200      	movs	r2, #0
 80119be:	6879      	ldr	r1, [r7, #4]
 80119c0:	47a0      	blx	r4
 80119c2:	4603      	mov	r3, r0
 80119c4:	73fb      	strb	r3, [r7, #15]
 80119c6:	e001      	b.n	80119cc <tcp_process_refused_data+0x9c>
 80119c8:	2300      	movs	r3, #0
 80119ca:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80119cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119d0:	f113 0f0d 	cmn.w	r3, #13
 80119d4:	d110      	bne.n	80119f8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80119d6:	f06f 030c 	mvn.w	r3, #12
 80119da:	e00e      	b.n	80119fa <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80119dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119e0:	f113 0f0d 	cmn.w	r3, #13
 80119e4:	d102      	bne.n	80119ec <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80119e6:	f06f 030c 	mvn.w	r3, #12
 80119ea:	e006      	b.n	80119fa <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80119f2:	f06f 0304 	mvn.w	r3, #4
 80119f6:	e000      	b.n	80119fa <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3714      	adds	r7, #20
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd90      	pop	{r4, r7, pc}

08011a02 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b084      	sub	sp, #16
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011a0a:	e007      	b.n	8011a1c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f000 f809 	bl	8011a2a <tcp_seg_free>
    seg = next;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1f4      	bne.n	8011a0c <tcp_segs_free+0xa>
  }
}
 8011a22:	bf00      	nop
 8011a24:	3710      	adds	r7, #16
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}

08011a2a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011a2a:	b580      	push	{r7, lr}
 8011a2c:	b082      	sub	sp, #8
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d00c      	beq.n	8011a52 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d004      	beq.n	8011a4a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fe fcd7 	bl	80103f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011a4a:	6879      	ldr	r1, [r7, #4]
 8011a4c:	2003      	movs	r0, #3
 8011a4e:	f7fd ff3b 	bl	800f8c8 <memp_free>
  }
}
 8011a52:	bf00      	nop
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b084      	sub	sp, #16
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011a62:	2003      	movs	r0, #3
 8011a64:	f7fd feba 	bl	800f7dc <memp_malloc>
 8011a68:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d101      	bne.n	8011a74 <tcp_seg_copy+0x1a>
    return NULL;
 8011a70:	2300      	movs	r3, #0
 8011a72:	e00a      	b.n	8011a8a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011a74:	2210      	movs	r2, #16
 8011a76:	6879      	ldr	r1, [r7, #4]
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f007 f986 	bl	8018d8a <memcpy>
  pbuf_ref(cseg->p);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fe fd6a 	bl	801055c <pbuf_ref>
  return cseg;
 8011a88:	68fb      	ldr	r3, [r7, #12]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	607a      	str	r2, [r7, #4]
 8011a9e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d009      	beq.n	8011aba <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	891b      	ldrh	r3, [r3, #8]
 8011aaa:	4619      	mov	r1, r3
 8011aac:	68b8      	ldr	r0, [r7, #8]
 8011aae:	f7ff fb7d 	bl	80111ac <tcp_recved>
    pbuf_free(p);
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f7fe fca0 	bl	80103f8 <pbuf_free>
 8011ab8:	e008      	b.n	8011acc <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8011aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d104      	bne.n	8011acc <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8011ac2:	68b8      	ldr	r0, [r7, #8]
 8011ac4:	f7ff f8cc 	bl	8010c60 <tcp_close>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	e000      	b.n	8011ace <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8011acc:	2300      	movs	r3, #0
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b086      	sub	sp, #24
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	db01      	blt.n	8011aee <tcp_kill_prio+0x16>
 8011aea:	79fb      	ldrb	r3, [r7, #7]
 8011aec:	e000      	b.n	8011af0 <tcp_kill_prio+0x18>
 8011aee:	237f      	movs	r3, #127	; 0x7f
 8011af0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8011af2:	2300      	movs	r3, #0
 8011af4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011af6:	2300      	movs	r3, #0
 8011af8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011afa:	4b16      	ldr	r3, [pc, #88]	; (8011b54 <tcp_kill_prio+0x7c>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	617b      	str	r3, [r7, #20]
 8011b00:	e01a      	b.n	8011b38 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	7d5b      	ldrb	r3, [r3, #21]
 8011b06:	7afa      	ldrb	r2, [r7, #11]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d312      	bcc.n	8011b32 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b0c:	4b12      	ldr	r3, [pc, #72]	; (8011b58 <tcp_kill_prio+0x80>)
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	6a1b      	ldr	r3, [r3, #32]
 8011b14:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d80a      	bhi.n	8011b32 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8011b1c:	4b0e      	ldr	r3, [pc, #56]	; (8011b58 <tcp_kill_prio+0x80>)
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	6a1b      	ldr	r3, [r3, #32]
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	7d5b      	ldrb	r3, [r3, #21]
 8011b30:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	617b      	str	r3, [r7, #20]
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1e1      	bne.n	8011b02 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d002      	beq.n	8011b4a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b44:	6938      	ldr	r0, [r7, #16]
 8011b46:	f7ff f99d 	bl	8010e84 <tcp_abort>
  }
}
 8011b4a:	bf00      	nop
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	200079b0 	.word	0x200079b0
 8011b58:	200079b4 	.word	0x200079b4

08011b5c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b086      	sub	sp, #24
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	4603      	mov	r3, r0
 8011b64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	2b08      	cmp	r3, #8
 8011b6a:	d009      	beq.n	8011b80 <tcp_kill_state+0x24>
 8011b6c:	79fb      	ldrb	r3, [r7, #7]
 8011b6e:	2b09      	cmp	r3, #9
 8011b70:	d006      	beq.n	8011b80 <tcp_kill_state+0x24>
 8011b72:	4b1a      	ldr	r3, [pc, #104]	; (8011bdc <tcp_kill_state+0x80>)
 8011b74:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b78:	4919      	ldr	r1, [pc, #100]	; (8011be0 <tcp_kill_state+0x84>)
 8011b7a:	481a      	ldr	r0, [pc, #104]	; (8011be4 <tcp_kill_state+0x88>)
 8011b7c:	f007 f918 	bl	8018db0 <iprintf>

  inactivity = 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011b84:	2300      	movs	r3, #0
 8011b86:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b88:	4b17      	ldr	r3, [pc, #92]	; (8011be8 <tcp_kill_state+0x8c>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	617b      	str	r3, [r7, #20]
 8011b8e:	e017      	b.n	8011bc0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	7d1b      	ldrb	r3, [r3, #20]
 8011b94:	79fa      	ldrb	r2, [r7, #7]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d10f      	bne.n	8011bba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b9a:	4b14      	ldr	r3, [pc, #80]	; (8011bec <tcp_kill_state+0x90>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	6a1b      	ldr	r3, [r3, #32]
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	68fa      	ldr	r2, [r7, #12]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d807      	bhi.n	8011bba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011baa:	4b10      	ldr	r3, [pc, #64]	; (8011bec <tcp_kill_state+0x90>)
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	617b      	str	r3, [r7, #20]
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1e4      	bne.n	8011b90 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d003      	beq.n	8011bd4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011bcc:	2100      	movs	r1, #0
 8011bce:	6938      	ldr	r0, [r7, #16]
 8011bd0:	f7ff f8a6 	bl	8010d20 <tcp_abandon>
  }
}
 8011bd4:	bf00      	nop
 8011bd6:	3718      	adds	r7, #24
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	0801b09c 	.word	0x0801b09c
 8011be0:	0801b3d0 	.word	0x0801b3d0
 8011be4:	0801b0fc 	.word	0x0801b0fc
 8011be8:	200079b0 	.word	0x200079b0
 8011bec:	200079b4 	.word	0x200079b4

08011bf0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bfe:	4b12      	ldr	r3, [pc, #72]	; (8011c48 <tcp_kill_timewait+0x58>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	60fb      	str	r3, [r7, #12]
 8011c04:	e012      	b.n	8011c2c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011c06:	4b11      	ldr	r3, [pc, #68]	; (8011c4c <tcp_kill_timewait+0x5c>)
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	6a1b      	ldr	r3, [r3, #32]
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d807      	bhi.n	8011c26 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011c16:	4b0d      	ldr	r3, [pc, #52]	; (8011c4c <tcp_kill_timewait+0x5c>)
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6a1b      	ldr	r3, [r3, #32]
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	60fb      	str	r3, [r7, #12]
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d1e9      	bne.n	8011c06 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c38:	68b8      	ldr	r0, [r7, #8]
 8011c3a:	f7ff f923 	bl	8010e84 <tcp_abort>
  }
}
 8011c3e:	bf00      	nop
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	200079c0 	.word	0x200079c0
 8011c4c:	200079b4 	.word	0x200079b4

08011c50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	4603      	mov	r3, r0
 8011c58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c5a:	2001      	movs	r0, #1
 8011c5c:	f7fd fdbe 	bl	800f7dc <memp_malloc>
 8011c60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d124      	bne.n	8011cb2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011c68:	f7ff ffc2 	bl	8011bf0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	f7fd fdb5 	bl	800f7dc <memp_malloc>
 8011c72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d11b      	bne.n	8011cb2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011c7a:	2009      	movs	r0, #9
 8011c7c:	f7ff ff6e 	bl	8011b5c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c80:	2001      	movs	r0, #1
 8011c82:	f7fd fdab 	bl	800f7dc <memp_malloc>
 8011c86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d111      	bne.n	8011cb2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011c8e:	2008      	movs	r0, #8
 8011c90:	f7ff ff64 	bl	8011b5c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c94:	2001      	movs	r0, #1
 8011c96:	f7fd fda1 	bl	800f7dc <memp_malloc>
 8011c9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d107      	bne.n	8011cb2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011ca2:	79fb      	ldrb	r3, [r7, #7]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff ff17 	bl	8011ad8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011caa:	2001      	movs	r0, #1
 8011cac:	f7fd fd96 	bl	800f7dc <memp_malloc>
 8011cb0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d03f      	beq.n	8011d38 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011cb8:	2298      	movs	r2, #152	; 0x98
 8011cba:	2100      	movs	r1, #0
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f007 f86f 	bl	8018da0 <memset>
    pcb->prio = prio;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	79fa      	ldrb	r2, [r7, #7]
 8011cc6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011cce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	22ff      	movs	r2, #255	; 0xff
 8011ce6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011cee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2206      	movs	r2, #6
 8011cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2206      	movs	r2, #6
 8011cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d04:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2201      	movs	r2, #1
 8011d0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011d0e:	4b0d      	ldr	r3, [pc, #52]	; (8011d44 <tcp_alloc+0xf4>)
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011d16:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <tcp_alloc+0xf8>)
 8011d18:	781a      	ldrb	r2, [r3, #0]
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011d24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	4a08      	ldr	r2, [pc, #32]	; (8011d4c <tcp_alloc+0xfc>)
 8011d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	4a07      	ldr	r2, [pc, #28]	; (8011d50 <tcp_alloc+0x100>)
 8011d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011d38:	68fb      	ldr	r3, [r7, #12]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	200079b4 	.word	0x200079b4
 8011d48:	200040b2 	.word	0x200040b2
 8011d4c:	08011a93 	.word	0x08011a93
 8011d50:	006ddd00 	.word	0x006ddd00

08011d54 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011d5e:	2040      	movs	r0, #64	; 0x40
 8011d60:	f7ff ff76 	bl	8011c50 <tcp_alloc>
 8011d64:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011d66:	68fb      	ldr	r3, [r7, #12]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	611a      	str	r2, [r3, #16]
  }
}
 8011d86:	bf00      	nop
 8011d88:	370c      	adds	r7, #12
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr
	...

08011d94 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d00e      	beq.n	8011dc2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	7d1b      	ldrb	r3, [r3, #20]
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d106      	bne.n	8011dba <tcp_recv+0x26>
 8011dac:	4b07      	ldr	r3, [pc, #28]	; (8011dcc <tcp_recv+0x38>)
 8011dae:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8011db2:	4907      	ldr	r1, [pc, #28]	; (8011dd0 <tcp_recv+0x3c>)
 8011db4:	4807      	ldr	r0, [pc, #28]	; (8011dd4 <tcp_recv+0x40>)
 8011db6:	f006 fffb 	bl	8018db0 <iprintf>
    pcb->recv = recv;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	683a      	ldr	r2, [r7, #0]
 8011dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011dc2:	bf00      	nop
 8011dc4:	3708      	adds	r7, #8
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	0801b09c 	.word	0x0801b09c
 8011dd0:	0801b3e0 	.word	0x0801b3e0
 8011dd4:	0801b0fc 	.word	0x0801b0fc

08011dd8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d00d      	beq.n	8011e04 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	7d1b      	ldrb	r3, [r3, #20]
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d106      	bne.n	8011dfe <tcp_sent+0x26>
 8011df0:	4b06      	ldr	r3, [pc, #24]	; (8011e0c <tcp_sent+0x34>)
 8011df2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8011df6:	4906      	ldr	r1, [pc, #24]	; (8011e10 <tcp_sent+0x38>)
 8011df8:	4806      	ldr	r0, [pc, #24]	; (8011e14 <tcp_sent+0x3c>)
 8011dfa:	f006 ffd9 	bl	8018db0 <iprintf>
    pcb->sent = sent;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	683a      	ldr	r2, [r7, #0]
 8011e02:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	0801b09c 	.word	0x0801b09c
 8011e10:	0801b408 	.word	0x0801b408
 8011e14:	0801b0fc 	.word	0x0801b0fc

08011e18 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00e      	beq.n	8011e46 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	7d1b      	ldrb	r3, [r3, #20]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d106      	bne.n	8011e3e <tcp_err+0x26>
 8011e30:	4b07      	ldr	r3, [pc, #28]	; (8011e50 <tcp_err+0x38>)
 8011e32:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8011e36:	4907      	ldr	r1, [pc, #28]	; (8011e54 <tcp_err+0x3c>)
 8011e38:	4807      	ldr	r0, [pc, #28]	; (8011e58 <tcp_err+0x40>)
 8011e3a:	f006 ffb9 	bl	8018db0 <iprintf>
    pcb->errf = err;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	683a      	ldr	r2, [r7, #0]
 8011e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8011e46:	bf00      	nop
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	0801b09c 	.word	0x0801b09c
 8011e54:	0801b430 	.word	0x0801b430
 8011e58:	0801b0fc 	.word	0x0801b0fc

08011e5c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b085      	sub	sp, #20
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d008      	beq.n	8011e7e <tcp_accept+0x22>
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	7d1b      	ldrb	r3, [r3, #20]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d104      	bne.n	8011e7e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	683a      	ldr	r2, [r7, #0]
 8011e7c:	619a      	str	r2, [r3, #24]
  }
}
 8011e7e:	bf00      	nop
 8011e80:	3714      	adds	r7, #20
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
	...

08011e8c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	4613      	mov	r3, r2
 8011e98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	7d1b      	ldrb	r3, [r3, #20]
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d106      	bne.n	8011eb0 <tcp_poll+0x24>
 8011ea2:	4b09      	ldr	r3, [pc, #36]	; (8011ec8 <tcp_poll+0x3c>)
 8011ea4:	f240 7203 	movw	r2, #1795	; 0x703
 8011ea8:	4908      	ldr	r1, [pc, #32]	; (8011ecc <tcp_poll+0x40>)
 8011eaa:	4809      	ldr	r0, [pc, #36]	; (8011ed0 <tcp_poll+0x44>)
 8011eac:	f006 ff80 	bl	8018db0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	68ba      	ldr	r2, [r7, #8]
 8011eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	79fa      	ldrb	r2, [r7, #7]
 8011ebc:	771a      	strb	r2, [r3, #28]
}
 8011ebe:	bf00      	nop
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	0801b09c 	.word	0x0801b09c
 8011ecc:	0801b458 	.word	0x0801b458
 8011ed0:	0801b0fc 	.word	0x0801b0fc

08011ed4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	7d1b      	ldrb	r3, [r3, #20]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d034      	beq.n	8011f4e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011ee8:	2b0a      	cmp	r3, #10
 8011eea:	d030      	beq.n	8011f4e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d02c      	beq.n	8011f4e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d007      	beq.n	8011f0c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe fa79 	bl	80103f8 <pbuf_free>
      pcb->refused_data = NULL;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7ff fd76 	bl	8011a02 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f22:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7ff fd6a 	bl	8011a02 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7ff fd65 	bl	8011a02 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	669a      	str	r2, [r3, #104]	; 0x68
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8011f4e:	bf00      	nop
 8011f50:	3708      	adds	r7, #8
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
	...

08011f58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	683a      	ldr	r2, [r7, #0]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d105      	bne.n	8011f78 <tcp_pcb_remove+0x20>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	68da      	ldr	r2, [r3, #12]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	e013      	b.n	8011fa0 <tcp_pcb_remove+0x48>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	60fb      	str	r3, [r7, #12]
 8011f7e:	e00c      	b.n	8011f9a <tcp_pcb_remove+0x42>
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d104      	bne.n	8011f94 <tcp_pcb_remove+0x3c>
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	68da      	ldr	r2, [r3, #12]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	60da      	str	r2, [r3, #12]
 8011f92:	e005      	b.n	8011fa0 <tcp_pcb_remove+0x48>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	60fb      	str	r3, [r7, #12]
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1ef      	bne.n	8011f80 <tcp_pcb_remove+0x28>
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011fa6:	6838      	ldr	r0, [r7, #0]
 8011fa8:	f7ff ff94 	bl	8011ed4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	7d1b      	ldrb	r3, [r3, #20]
 8011fb0:	2b0a      	cmp	r3, #10
 8011fb2:	d013      	beq.n	8011fdc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011fb8:	2b01      	cmp	r3, #1
 8011fba:	d00f      	beq.n	8011fdc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	7e9b      	ldrb	r3, [r3, #26]
 8011fc0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d009      	beq.n	8011fdc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	7e9b      	ldrb	r3, [r3, #26]
 8011fcc:	f043 0302 	orr.w	r3, r3, #2
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011fd6:	6838      	ldr	r0, [r7, #0]
 8011fd8:	f003 f9be 	bl	8015358 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	7d1b      	ldrb	r3, [r3, #20]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d020      	beq.n	8012026 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d006      	beq.n	8011ffa <tcp_pcb_remove+0xa2>
 8011fec:	4b13      	ldr	r3, [pc, #76]	; (801203c <tcp_pcb_remove+0xe4>)
 8011fee:	f240 7253 	movw	r2, #1875	; 0x753
 8011ff2:	4913      	ldr	r1, [pc, #76]	; (8012040 <tcp_pcb_remove+0xe8>)
 8011ff4:	4813      	ldr	r0, [pc, #76]	; (8012044 <tcp_pcb_remove+0xec>)
 8011ff6:	f006 fedb 	bl	8018db0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d006      	beq.n	8012010 <tcp_pcb_remove+0xb8>
 8012002:	4b0e      	ldr	r3, [pc, #56]	; (801203c <tcp_pcb_remove+0xe4>)
 8012004:	f240 7254 	movw	r2, #1876	; 0x754
 8012008:	490f      	ldr	r1, [pc, #60]	; (8012048 <tcp_pcb_remove+0xf0>)
 801200a:	480e      	ldr	r0, [pc, #56]	; (8012044 <tcp_pcb_remove+0xec>)
 801200c:	f006 fed0 	bl	8018db0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012014:	2b00      	cmp	r3, #0
 8012016:	d006      	beq.n	8012026 <tcp_pcb_remove+0xce>
 8012018:	4b08      	ldr	r3, [pc, #32]	; (801203c <tcp_pcb_remove+0xe4>)
 801201a:	f240 7256 	movw	r2, #1878	; 0x756
 801201e:	490b      	ldr	r1, [pc, #44]	; (801204c <tcp_pcb_remove+0xf4>)
 8012020:	4808      	ldr	r0, [pc, #32]	; (8012044 <tcp_pcb_remove+0xec>)
 8012022:	f006 fec5 	bl	8018db0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	2200      	movs	r2, #0
 801202a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2200      	movs	r2, #0
 8012030:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012032:	bf00      	nop
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	0801b09c 	.word	0x0801b09c
 8012040:	0801b478 	.word	0x0801b478
 8012044:	0801b0fc 	.word	0x0801b0fc
 8012048:	0801b490 	.word	0x0801b490
 801204c:	0801b4ac 	.word	0x0801b4ac

08012050 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012058:	4b07      	ldr	r3, [pc, #28]	; (8012078 <tcp_next_iss+0x28>)
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	4b07      	ldr	r3, [pc, #28]	; (801207c <tcp_next_iss+0x2c>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4413      	add	r3, r2
 8012062:	4a05      	ldr	r2, [pc, #20]	; (8012078 <tcp_next_iss+0x28>)
 8012064:	6013      	str	r3, [r2, #0]
  return iss;
 8012066:	4b04      	ldr	r3, [pc, #16]	; (8012078 <tcp_next_iss+0x28>)
 8012068:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801206a:	4618      	mov	r0, r3
 801206c:	370c      	adds	r7, #12
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	2000002c 	.word	0x2000002c
 801207c:	200079b4 	.word	0x200079b4

08012080 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	4603      	mov	r3, r0
 8012088:	6039      	str	r1, [r7, #0]
 801208a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801208c:	6838      	ldr	r0, [r7, #0]
 801208e:	f005 faed 	bl	801766c <ip4_route>
 8012092:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d101      	bne.n	801209e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801209a:	88fb      	ldrh	r3, [r7, #6]
 801209c:	e010      	b.n	80120c0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80120a2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80120a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d008      	beq.n	80120be <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80120ac:	897b      	ldrh	r3, [r7, #10]
 80120ae:	3b28      	subs	r3, #40	; 0x28
 80120b0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80120b2:	893a      	ldrh	r2, [r7, #8]
 80120b4:	88fb      	ldrh	r3, [r7, #6]
 80120b6:	4293      	cmp	r3, r2
 80120b8:	bf28      	it	cs
 80120ba:	4613      	movcs	r3, r2
 80120bc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80120be:	88fb      	ldrh	r3, [r7, #6]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3710      	adds	r7, #16
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80120d6:	e011      	b.n	80120fc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d108      	bne.n	80120f6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	f7fe feca 	bl	8010e84 <tcp_abort>
      pcb = next;
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	60fb      	str	r3, [r7, #12]
 80120f4:	e002      	b.n	80120fc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d1ea      	bne.n	80120d8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8012102:	bf00      	nop
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
	...

0801210c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d02c      	beq.n	8012176 <tcp_netif_ip_addr_changed+0x6a>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d028      	beq.n	8012176 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012124:	4b16      	ldr	r3, [pc, #88]	; (8012180 <tcp_netif_ip_addr_changed+0x74>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4619      	mov	r1, r3
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff ffcc 	bl	80120c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012130:	4b14      	ldr	r3, [pc, #80]	; (8012184 <tcp_netif_ip_addr_changed+0x78>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	4619      	mov	r1, r3
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f7ff ffc6 	bl	80120c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d019      	beq.n	8012176 <tcp_netif_ip_addr_changed+0x6a>
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d015      	beq.n	8012176 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801214a:	4b0f      	ldr	r3, [pc, #60]	; (8012188 <tcp_netif_ip_addr_changed+0x7c>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60fb      	str	r3, [r7, #12]
 8012150:	e00e      	b.n	8012170 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	429a      	cmp	r2, r3
 8012162:	d103      	bne.n	801216c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	60fb      	str	r3, [r7, #12]
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1ed      	bne.n	8012152 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012176:	bf00      	nop
 8012178:	3710      	adds	r7, #16
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}
 801217e:	bf00      	nop
 8012180:	200079b0 	.word	0x200079b0
 8012184:	200079bc 	.word	0x200079bc
 8012188:	200079b8 	.word	0x200079b8

0801218c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801218c:	b590      	push	{r4, r7, lr}
 801218e:	b08b      	sub	sp, #44	; 0x2c
 8012190:	af02      	add	r7, sp, #8
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	4a82      	ldr	r2, [pc, #520]	; (80123a4 <tcp_input+0x218>)
 801219c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	895b      	ldrh	r3, [r3, #10]
 80121a2:	2b13      	cmp	r3, #19
 80121a4:	f240 838a 	bls.w	80128bc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121a8:	4b7f      	ldr	r3, [pc, #508]	; (80123a8 <tcp_input+0x21c>)
 80121aa:	695a      	ldr	r2, [r3, #20]
 80121ac:	4b7e      	ldr	r3, [pc, #504]	; (80123a8 <tcp_input+0x21c>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4619      	mov	r1, r3
 80121b2:	4610      	mov	r0, r2
 80121b4:	f005 fcd4 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f040 8380 	bne.w	80128c0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80121c0:	4b79      	ldr	r3, [pc, #484]	; (80123a8 <tcp_input+0x21c>)
 80121c2:	695b      	ldr	r3, [r3, #20]
 80121c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121c8:	2be0      	cmp	r3, #224	; 0xe0
 80121ca:	f000 8379 	beq.w	80128c0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80121ce:	4b75      	ldr	r3, [pc, #468]	; (80123a4 <tcp_input+0x218>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	899b      	ldrh	r3, [r3, #12]
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fc fef4 	bl	800efc4 <lwip_htons>
 80121dc:	4603      	mov	r3, r0
 80121de:	0b1b      	lsrs	r3, r3, #12
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80121e8:	7cbb      	ldrb	r3, [r7, #18]
 80121ea:	2b13      	cmp	r3, #19
 80121ec:	f240 8368 	bls.w	80128c0 <tcp_input+0x734>
 80121f0:	7cbb      	ldrb	r3, [r7, #18]
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	891b      	ldrh	r3, [r3, #8]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	f200 8361 	bhi.w	80128c0 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80121fe:	7cbb      	ldrb	r3, [r7, #18]
 8012200:	b29b      	uxth	r3, r3
 8012202:	3b14      	subs	r3, #20
 8012204:	b29a      	uxth	r2, r3
 8012206:	4b69      	ldr	r3, [pc, #420]	; (80123ac <tcp_input+0x220>)
 8012208:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801220a:	4b69      	ldr	r3, [pc, #420]	; (80123b0 <tcp_input+0x224>)
 801220c:	2200      	movs	r2, #0
 801220e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	895a      	ldrh	r2, [r3, #10]
 8012214:	7cbb      	ldrb	r3, [r7, #18]
 8012216:	b29b      	uxth	r3, r3
 8012218:	429a      	cmp	r2, r3
 801221a:	d30d      	bcc.n	8012238 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801221c:	4b63      	ldr	r3, [pc, #396]	; (80123ac <tcp_input+0x220>)
 801221e:	881a      	ldrh	r2, [r3, #0]
 8012220:	4b64      	ldr	r3, [pc, #400]	; (80123b4 <tcp_input+0x228>)
 8012222:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8012224:	7cbb      	ldrb	r3, [r7, #18]
 8012226:	b29b      	uxth	r3, r3
 8012228:	425b      	negs	r3, r3
 801222a:	b29b      	uxth	r3, r3
 801222c:	b21b      	sxth	r3, r3
 801222e:	4619      	mov	r1, r3
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7fe f8bd 	bl	80103b0 <pbuf_header>
 8012236:	e055      	b.n	80122e4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d105      	bne.n	801224c <tcp_input+0xc0>
 8012240:	4b5d      	ldr	r3, [pc, #372]	; (80123b8 <tcp_input+0x22c>)
 8012242:	22b2      	movs	r2, #178	; 0xb2
 8012244:	495d      	ldr	r1, [pc, #372]	; (80123bc <tcp_input+0x230>)
 8012246:	485e      	ldr	r0, [pc, #376]	; (80123c0 <tcp_input+0x234>)
 8012248:	f006 fdb2 	bl	8018db0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801224c:	f06f 0113 	mvn.w	r1, #19
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7fe f8ad 	bl	80103b0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	895a      	ldrh	r2, [r3, #10]
 801225a:	4b56      	ldr	r3, [pc, #344]	; (80123b4 <tcp_input+0x228>)
 801225c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801225e:	4b53      	ldr	r3, [pc, #332]	; (80123ac <tcp_input+0x220>)
 8012260:	881a      	ldrh	r2, [r3, #0]
 8012262:	4b54      	ldr	r3, [pc, #336]	; (80123b4 <tcp_input+0x228>)
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	1ad3      	subs	r3, r2, r3
 8012268:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801226a:	4b52      	ldr	r3, [pc, #328]	; (80123b4 <tcp_input+0x228>)
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	425b      	negs	r3, r3
 8012270:	b29b      	uxth	r3, r3
 8012272:	b21b      	sxth	r3, r3
 8012274:	4619      	mov	r1, r3
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7fe f89a 	bl	80103b0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	895b      	ldrh	r3, [r3, #10]
 8012282:	8a3a      	ldrh	r2, [r7, #16]
 8012284:	429a      	cmp	r2, r3
 8012286:	f200 831d 	bhi.w	80128c4 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	4a47      	ldr	r2, [pc, #284]	; (80123b0 <tcp_input+0x224>)
 8012292:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	8a3b      	ldrh	r3, [r7, #16]
 801229a:	425b      	negs	r3, r3
 801229c:	b29b      	uxth	r3, r3
 801229e:	b21b      	sxth	r3, r3
 80122a0:	4619      	mov	r1, r3
 80122a2:	4610      	mov	r0, r2
 80122a4:	f7fe f884 	bl	80103b0 <pbuf_header>
    p->tot_len -= opt2len;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	891a      	ldrh	r2, [r3, #8]
 80122ac:	8a3b      	ldrh	r3, [r7, #16]
 80122ae:	1ad3      	subs	r3, r2, r3
 80122b0:	b29a      	uxth	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	895b      	ldrh	r3, [r3, #10]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d005      	beq.n	80122ca <tcp_input+0x13e>
 80122be:	4b3e      	ldr	r3, [pc, #248]	; (80123b8 <tcp_input+0x22c>)
 80122c0:	22cf      	movs	r2, #207	; 0xcf
 80122c2:	4940      	ldr	r1, [pc, #256]	; (80123c4 <tcp_input+0x238>)
 80122c4:	483e      	ldr	r0, [pc, #248]	; (80123c0 <tcp_input+0x234>)
 80122c6:	f006 fd73 	bl	8018db0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	891a      	ldrh	r2, [r3, #8]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	891b      	ldrh	r3, [r3, #8]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d005      	beq.n	80122e4 <tcp_input+0x158>
 80122d8:	4b37      	ldr	r3, [pc, #220]	; (80123b8 <tcp_input+0x22c>)
 80122da:	22d0      	movs	r2, #208	; 0xd0
 80122dc:	493a      	ldr	r1, [pc, #232]	; (80123c8 <tcp_input+0x23c>)
 80122de:	4838      	ldr	r0, [pc, #224]	; (80123c0 <tcp_input+0x234>)
 80122e0:	f006 fd66 	bl	8018db0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80122e4:	4b2f      	ldr	r3, [pc, #188]	; (80123a4 <tcp_input+0x218>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	881b      	ldrh	r3, [r3, #0]
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	4b2d      	ldr	r3, [pc, #180]	; (80123a4 <tcp_input+0x218>)
 80122ee:	681c      	ldr	r4, [r3, #0]
 80122f0:	4610      	mov	r0, r2
 80122f2:	f7fc fe67 	bl	800efc4 <lwip_htons>
 80122f6:	4603      	mov	r3, r0
 80122f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80122fa:	4b2a      	ldr	r3, [pc, #168]	; (80123a4 <tcp_input+0x218>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	885b      	ldrh	r3, [r3, #2]
 8012300:	b29a      	uxth	r2, r3
 8012302:	4b28      	ldr	r3, [pc, #160]	; (80123a4 <tcp_input+0x218>)
 8012304:	681c      	ldr	r4, [r3, #0]
 8012306:	4610      	mov	r0, r2
 8012308:	f7fc fe5c 	bl	800efc4 <lwip_htons>
 801230c:	4603      	mov	r3, r0
 801230e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012310:	4b24      	ldr	r3, [pc, #144]	; (80123a4 <tcp_input+0x218>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	4b23      	ldr	r3, [pc, #140]	; (80123a4 <tcp_input+0x218>)
 8012318:	681c      	ldr	r4, [r3, #0]
 801231a:	4610      	mov	r0, r2
 801231c:	f7fc fe60 	bl	800efe0 <lwip_htonl>
 8012320:	4603      	mov	r3, r0
 8012322:	6063      	str	r3, [r4, #4]
 8012324:	6863      	ldr	r3, [r4, #4]
 8012326:	4a29      	ldr	r2, [pc, #164]	; (80123cc <tcp_input+0x240>)
 8012328:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801232a:	4b1e      	ldr	r3, [pc, #120]	; (80123a4 <tcp_input+0x218>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	689a      	ldr	r2, [r3, #8]
 8012330:	4b1c      	ldr	r3, [pc, #112]	; (80123a4 <tcp_input+0x218>)
 8012332:	681c      	ldr	r4, [r3, #0]
 8012334:	4610      	mov	r0, r2
 8012336:	f7fc fe53 	bl	800efe0 <lwip_htonl>
 801233a:	4603      	mov	r3, r0
 801233c:	60a3      	str	r3, [r4, #8]
 801233e:	68a3      	ldr	r3, [r4, #8]
 8012340:	4a23      	ldr	r2, [pc, #140]	; (80123d0 <tcp_input+0x244>)
 8012342:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012344:	4b17      	ldr	r3, [pc, #92]	; (80123a4 <tcp_input+0x218>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	89db      	ldrh	r3, [r3, #14]
 801234a:	b29a      	uxth	r2, r3
 801234c:	4b15      	ldr	r3, [pc, #84]	; (80123a4 <tcp_input+0x218>)
 801234e:	681c      	ldr	r4, [r3, #0]
 8012350:	4610      	mov	r0, r2
 8012352:	f7fc fe37 	bl	800efc4 <lwip_htons>
 8012356:	4603      	mov	r3, r0
 8012358:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801235a:	4b12      	ldr	r3, [pc, #72]	; (80123a4 <tcp_input+0x218>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	899b      	ldrh	r3, [r3, #12]
 8012360:	b29b      	uxth	r3, r3
 8012362:	4618      	mov	r0, r3
 8012364:	f7fc fe2e 	bl	800efc4 <lwip_htons>
 8012368:	4603      	mov	r3, r0
 801236a:	b2db      	uxtb	r3, r3
 801236c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012370:	b2da      	uxtb	r2, r3
 8012372:	4b18      	ldr	r3, [pc, #96]	; (80123d4 <tcp_input+0x248>)
 8012374:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	891a      	ldrh	r2, [r3, #8]
 801237a:	4b16      	ldr	r3, [pc, #88]	; (80123d4 <tcp_input+0x248>)
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	f003 0303 	and.w	r3, r3, #3
 8012382:	2b00      	cmp	r3, #0
 8012384:	bf14      	ite	ne
 8012386:	2301      	movne	r3, #1
 8012388:	2300      	moveq	r3, #0
 801238a:	b2db      	uxtb	r3, r3
 801238c:	b29b      	uxth	r3, r3
 801238e:	4413      	add	r3, r2
 8012390:	b29a      	uxth	r2, r3
 8012392:	4b11      	ldr	r3, [pc, #68]	; (80123d8 <tcp_input+0x24c>)
 8012394:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012396:	2300      	movs	r3, #0
 8012398:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801239a:	4b10      	ldr	r3, [pc, #64]	; (80123dc <tcp_input+0x250>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	61fb      	str	r3, [r7, #28]
 80123a0:	e082      	b.n	80124a8 <tcp_input+0x31c>
 80123a2:	bf00      	nop
 80123a4:	200040c4 	.word	0x200040c4
 80123a8:	200048f4 	.word	0x200048f4
 80123ac:	200040c8 	.word	0x200040c8
 80123b0:	200040cc 	.word	0x200040cc
 80123b4:	200040ca 	.word	0x200040ca
 80123b8:	0801b4c4 	.word	0x0801b4c4
 80123bc:	0801b51c 	.word	0x0801b51c
 80123c0:	0801b52c 	.word	0x0801b52c
 80123c4:	0801b554 	.word	0x0801b554
 80123c8:	0801b560 	.word	0x0801b560
 80123cc:	200040d4 	.word	0x200040d4
 80123d0:	200040d8 	.word	0x200040d8
 80123d4:	200040e0 	.word	0x200040e0
 80123d8:	200040de 	.word	0x200040de
 80123dc:	200079b0 	.word	0x200079b0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	7d1b      	ldrb	r3, [r3, #20]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d105      	bne.n	80123f4 <tcp_input+0x268>
 80123e8:	4b8f      	ldr	r3, [pc, #572]	; (8012628 <tcp_input+0x49c>)
 80123ea:	22e2      	movs	r2, #226	; 0xe2
 80123ec:	498f      	ldr	r1, [pc, #572]	; (801262c <tcp_input+0x4a0>)
 80123ee:	4890      	ldr	r0, [pc, #576]	; (8012630 <tcp_input+0x4a4>)
 80123f0:	f006 fcde 	bl	8018db0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	7d1b      	ldrb	r3, [r3, #20]
 80123f8:	2b0a      	cmp	r3, #10
 80123fa:	d105      	bne.n	8012408 <tcp_input+0x27c>
 80123fc:	4b8a      	ldr	r3, [pc, #552]	; (8012628 <tcp_input+0x49c>)
 80123fe:	22e3      	movs	r2, #227	; 0xe3
 8012400:	498c      	ldr	r1, [pc, #560]	; (8012634 <tcp_input+0x4a8>)
 8012402:	488b      	ldr	r0, [pc, #556]	; (8012630 <tcp_input+0x4a4>)
 8012404:	f006 fcd4 	bl	8018db0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	7d1b      	ldrb	r3, [r3, #20]
 801240c:	2b01      	cmp	r3, #1
 801240e:	d105      	bne.n	801241c <tcp_input+0x290>
 8012410:	4b85      	ldr	r3, [pc, #532]	; (8012628 <tcp_input+0x49c>)
 8012412:	22e4      	movs	r2, #228	; 0xe4
 8012414:	4988      	ldr	r1, [pc, #544]	; (8012638 <tcp_input+0x4ac>)
 8012416:	4886      	ldr	r0, [pc, #536]	; (8012630 <tcp_input+0x4a4>)
 8012418:	f006 fcca 	bl	8018db0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	8b1a      	ldrh	r2, [r3, #24]
 8012420:	4b86      	ldr	r3, [pc, #536]	; (801263c <tcp_input+0x4b0>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	b29b      	uxth	r3, r3
 8012428:	429a      	cmp	r2, r3
 801242a:	d138      	bne.n	801249e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	8ada      	ldrh	r2, [r3, #22]
 8012430:	4b82      	ldr	r3, [pc, #520]	; (801263c <tcp_input+0x4b0>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	885b      	ldrh	r3, [r3, #2]
 8012436:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012438:	429a      	cmp	r2, r3
 801243a:	d130      	bne.n	801249e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	685a      	ldr	r2, [r3, #4]
 8012440:	4b7f      	ldr	r3, [pc, #508]	; (8012640 <tcp_input+0x4b4>)
 8012442:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012444:	429a      	cmp	r2, r3
 8012446:	d12a      	bne.n	801249e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	4b7c      	ldr	r3, [pc, #496]	; (8012640 <tcp_input+0x4b4>)
 801244e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012450:	429a      	cmp	r2, r3
 8012452:	d124      	bne.n	801249e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	69fa      	ldr	r2, [r7, #28]
 801245a:	429a      	cmp	r2, r3
 801245c:	d105      	bne.n	801246a <tcp_input+0x2de>
 801245e:	4b72      	ldr	r3, [pc, #456]	; (8012628 <tcp_input+0x49c>)
 8012460:	22ec      	movs	r2, #236	; 0xec
 8012462:	4978      	ldr	r1, [pc, #480]	; (8012644 <tcp_input+0x4b8>)
 8012464:	4872      	ldr	r0, [pc, #456]	; (8012630 <tcp_input+0x4a4>)
 8012466:	f006 fca3 	bl	8018db0 <iprintf>
      if (prev != NULL) {
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00a      	beq.n	8012486 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	68da      	ldr	r2, [r3, #12]
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012478:	4b73      	ldr	r3, [pc, #460]	; (8012648 <tcp_input+0x4bc>)
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012480:	4a71      	ldr	r2, [pc, #452]	; (8012648 <tcp_input+0x4bc>)
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	68db      	ldr	r3, [r3, #12]
 801248a:	69fa      	ldr	r2, [r7, #28]
 801248c:	429a      	cmp	r2, r3
 801248e:	d10f      	bne.n	80124b0 <tcp_input+0x324>
 8012490:	4b65      	ldr	r3, [pc, #404]	; (8012628 <tcp_input+0x49c>)
 8012492:	22f4      	movs	r2, #244	; 0xf4
 8012494:	496d      	ldr	r1, [pc, #436]	; (801264c <tcp_input+0x4c0>)
 8012496:	4866      	ldr	r0, [pc, #408]	; (8012630 <tcp_input+0x4a4>)
 8012498:	f006 fc8a 	bl	8018db0 <iprintf>
      break;
 801249c:	e008      	b.n	80124b0 <tcp_input+0x324>
    }
    prev = pcb;
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	61fb      	str	r3, [r7, #28]
 80124a8:	69fb      	ldr	r3, [r7, #28]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d198      	bne.n	80123e0 <tcp_input+0x254>
 80124ae:	e000      	b.n	80124b2 <tcp_input+0x326>
      break;
 80124b0:	bf00      	nop
  }

  if (pcb == NULL) {
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d173      	bne.n	80125a0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124b8:	4b65      	ldr	r3, [pc, #404]	; (8012650 <tcp_input+0x4c4>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	61fb      	str	r3, [r7, #28]
 80124be:	e02f      	b.n	8012520 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	7d1b      	ldrb	r3, [r3, #20]
 80124c4:	2b0a      	cmp	r3, #10
 80124c6:	d005      	beq.n	80124d4 <tcp_input+0x348>
 80124c8:	4b57      	ldr	r3, [pc, #348]	; (8012628 <tcp_input+0x49c>)
 80124ca:	22fe      	movs	r2, #254	; 0xfe
 80124cc:	4961      	ldr	r1, [pc, #388]	; (8012654 <tcp_input+0x4c8>)
 80124ce:	4858      	ldr	r0, [pc, #352]	; (8012630 <tcp_input+0x4a4>)
 80124d0:	f006 fc6e 	bl	8018db0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	8b1a      	ldrh	r2, [r3, #24]
 80124d8:	4b58      	ldr	r3, [pc, #352]	; (801263c <tcp_input+0x4b0>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	b29b      	uxth	r3, r3
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d11a      	bne.n	801251a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	8ada      	ldrh	r2, [r3, #22]
 80124e8:	4b54      	ldr	r3, [pc, #336]	; (801263c <tcp_input+0x4b0>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	885b      	ldrh	r3, [r3, #2]
 80124ee:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d112      	bne.n	801251a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	4b51      	ldr	r3, [pc, #324]	; (8012640 <tcp_input+0x4b4>)
 80124fa:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d10c      	bne.n	801251a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	4b4e      	ldr	r3, [pc, #312]	; (8012640 <tcp_input+0x4b4>)
 8012506:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012508:	429a      	cmp	r2, r3
 801250a:	d106      	bne.n	801251a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801250c:	69f8      	ldr	r0, [r7, #28]
 801250e:	f000 fb15 	bl	8012b3c <tcp_timewait_input>
        pbuf_free(p);
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f7fd ff70 	bl	80103f8 <pbuf_free>
        return;
 8012518:	e1da      	b.n	80128d0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	68db      	ldr	r3, [r3, #12]
 801251e:	61fb      	str	r3, [r7, #28]
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1cc      	bne.n	80124c0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012526:	2300      	movs	r3, #0
 8012528:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801252a:	4b4b      	ldr	r3, [pc, #300]	; (8012658 <tcp_input+0x4cc>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	617b      	str	r3, [r7, #20]
 8012530:	e019      	b.n	8012566 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	8ada      	ldrh	r2, [r3, #22]
 8012536:	4b41      	ldr	r3, [pc, #260]	; (801263c <tcp_input+0x4b0>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	885b      	ldrh	r3, [r3, #2]
 801253c:	b29b      	uxth	r3, r3
 801253e:	429a      	cmp	r2, r3
 8012540:	d10c      	bne.n	801255c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	4b3e      	ldr	r3, [pc, #248]	; (8012640 <tcp_input+0x4b4>)
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	429a      	cmp	r2, r3
 801254c:	d00f      	beq.n	801256e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d00d      	beq.n	8012570 <tcp_input+0x3e4>
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d009      	beq.n	8012570 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	617b      	str	r3, [r7, #20]
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d1e2      	bne.n	8012532 <tcp_input+0x3a6>
 801256c:	e000      	b.n	8012570 <tcp_input+0x3e4>
            break;
 801256e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d014      	beq.n	80125a0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00a      	beq.n	8012592 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	68da      	ldr	r2, [r3, #12]
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012584:	4b34      	ldr	r3, [pc, #208]	; (8012658 <tcp_input+0x4cc>)
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801258c:	4a32      	ldr	r2, [pc, #200]	; (8012658 <tcp_input+0x4cc>)
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8012592:	6978      	ldr	r0, [r7, #20]
 8012594:	f000 f9f0 	bl	8012978 <tcp_listen_input>
      pbuf_free(p);
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f7fd ff2d 	bl	80103f8 <pbuf_free>
      return;
 801259e:	e197      	b.n	80128d0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 8164 	beq.w	8012870 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80125a8:	4b2c      	ldr	r3, [pc, #176]	; (801265c <tcp_input+0x4d0>)
 80125aa:	2200      	movs	r2, #0
 80125ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	891a      	ldrh	r2, [r3, #8]
 80125b2:	4b2a      	ldr	r3, [pc, #168]	; (801265c <tcp_input+0x4d0>)
 80125b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80125b6:	4a29      	ldr	r2, [pc, #164]	; (801265c <tcp_input+0x4d0>)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80125bc:	4b1f      	ldr	r3, [pc, #124]	; (801263c <tcp_input+0x4b0>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4a26      	ldr	r2, [pc, #152]	; (801265c <tcp_input+0x4d0>)
 80125c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80125c4:	4b26      	ldr	r3, [pc, #152]	; (8012660 <tcp_input+0x4d4>)
 80125c6:	2200      	movs	r2, #0
 80125c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80125ca:	4b26      	ldr	r3, [pc, #152]	; (8012664 <tcp_input+0x4d8>)
 80125cc:	2200      	movs	r2, #0
 80125ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80125d0:	4b25      	ldr	r3, [pc, #148]	; (8012668 <tcp_input+0x4dc>)
 80125d2:	2200      	movs	r2, #0
 80125d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80125d6:	4b25      	ldr	r3, [pc, #148]	; (801266c <tcp_input+0x4e0>)
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	f003 0308 	and.w	r3, r3, #8
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d006      	beq.n	80125f0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	7b5b      	ldrb	r3, [r3, #13]
 80125e6:	f043 0301 	orr.w	r3, r3, #1
 80125ea:	b2da      	uxtb	r2, r3
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d03d      	beq.n	8012674 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80125f8:	69f8      	ldr	r0, [r7, #28]
 80125fa:	f7ff f999 	bl	8011930 <tcp_process_refused_data>
 80125fe:	4603      	mov	r3, r0
 8012600:	f113 0f0d 	cmn.w	r3, #13
 8012604:	d007      	beq.n	8012616 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801260a:	2b00      	cmp	r3, #0
 801260c:	d032      	beq.n	8012674 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801260e:	4b18      	ldr	r3, [pc, #96]	; (8012670 <tcp_input+0x4e4>)
 8012610:	881b      	ldrh	r3, [r3, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d02e      	beq.n	8012674 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801261a:	2b00      	cmp	r3, #0
 801261c:	f040 8108 	bne.w	8012830 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012620:	69f8      	ldr	r0, [r7, #28]
 8012622:	f002 fe3d 	bl	80152a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012626:	e103      	b.n	8012830 <tcp_input+0x6a4>
 8012628:	0801b4c4 	.word	0x0801b4c4
 801262c:	0801b580 	.word	0x0801b580
 8012630:	0801b52c 	.word	0x0801b52c
 8012634:	0801b5a8 	.word	0x0801b5a8
 8012638:	0801b5d4 	.word	0x0801b5d4
 801263c:	200040c4 	.word	0x200040c4
 8012640:	200048f4 	.word	0x200048f4
 8012644:	0801b5fc 	.word	0x0801b5fc
 8012648:	200079b0 	.word	0x200079b0
 801264c:	0801b628 	.word	0x0801b628
 8012650:	200079c0 	.word	0x200079c0
 8012654:	0801b654 	.word	0x0801b654
 8012658:	200079b8 	.word	0x200079b8
 801265c:	200040b4 	.word	0x200040b4
 8012660:	200040e4 	.word	0x200040e4
 8012664:	200040e1 	.word	0x200040e1
 8012668:	200040dc 	.word	0x200040dc
 801266c:	200040e0 	.word	0x200040e0
 8012670:	200040de 	.word	0x200040de
      }
    }
    tcp_input_pcb = pcb;
 8012674:	4a98      	ldr	r2, [pc, #608]	; (80128d8 <tcp_input+0x74c>)
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801267a:	69f8      	ldr	r0, [r7, #28]
 801267c:	f000 fac6 	bl	8012c0c <tcp_process>
 8012680:	4603      	mov	r3, r0
 8012682:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012684:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012688:	f113 0f0d 	cmn.w	r3, #13
 801268c:	f000 80d2 	beq.w	8012834 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8012690:	4b92      	ldr	r3, [pc, #584]	; (80128dc <tcp_input+0x750>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	f003 0308 	and.w	r3, r3, #8
 8012698:	2b00      	cmp	r3, #0
 801269a:	d016      	beq.n	80126ca <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d008      	beq.n	80126b8 <tcp_input+0x52c>
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126ac:	69fa      	ldr	r2, [r7, #28]
 80126ae:	6912      	ldr	r2, [r2, #16]
 80126b0:	f06f 010d 	mvn.w	r1, #13
 80126b4:	4610      	mov	r0, r2
 80126b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80126b8:	69f9      	ldr	r1, [r7, #28]
 80126ba:	4889      	ldr	r0, [pc, #548]	; (80128e0 <tcp_input+0x754>)
 80126bc:	f7ff fc4c 	bl	8011f58 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80126c0:	69f9      	ldr	r1, [r7, #28]
 80126c2:	2001      	movs	r0, #1
 80126c4:	f7fd f900 	bl	800f8c8 <memp_free>
 80126c8:	e0bf      	b.n	801284a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 80126ca:	2300      	movs	r3, #0
 80126cc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80126ce:	4b85      	ldr	r3, [pc, #532]	; (80128e4 <tcp_input+0x758>)
 80126d0:	881b      	ldrh	r3, [r3, #0]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d01b      	beq.n	801270e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80126d6:	4b83      	ldr	r3, [pc, #524]	; (80128e4 <tcp_input+0x758>)
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d009      	beq.n	80126f8 <tcp_input+0x56c>
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126e8:	69fa      	ldr	r2, [r7, #28]
 80126ea:	6910      	ldr	r0, [r2, #16]
 80126ec:	89fa      	ldrh	r2, [r7, #14]
 80126ee:	69f9      	ldr	r1, [r7, #28]
 80126f0:	4798      	blx	r3
 80126f2:	4603      	mov	r3, r0
 80126f4:	74fb      	strb	r3, [r7, #19]
 80126f6:	e001      	b.n	80126fc <tcp_input+0x570>
 80126f8:	2300      	movs	r3, #0
 80126fa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80126fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012700:	f113 0f0d 	cmn.w	r3, #13
 8012704:	f000 8098 	beq.w	8012838 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012708:	4b76      	ldr	r3, [pc, #472]	; (80128e4 <tcp_input+0x758>)
 801270a:	2200      	movs	r2, #0
 801270c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801270e:	69f8      	ldr	r0, [r7, #28]
 8012710:	f000 f900 	bl	8012914 <tcp_input_delayed_close>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	f040 8090 	bne.w	801283c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801271c:	4b72      	ldr	r3, [pc, #456]	; (80128e8 <tcp_input+0x75c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d041      	beq.n	80127a8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012728:	2b00      	cmp	r3, #0
 801272a:	d006      	beq.n	801273a <tcp_input+0x5ae>
 801272c:	4b6f      	ldr	r3, [pc, #444]	; (80128ec <tcp_input+0x760>)
 801272e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012732:	496f      	ldr	r1, [pc, #444]	; (80128f0 <tcp_input+0x764>)
 8012734:	486f      	ldr	r0, [pc, #444]	; (80128f4 <tcp_input+0x768>)
 8012736:	f006 fb3b 	bl	8018db0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	7e9b      	ldrb	r3, [r3, #26]
 801273e:	f003 0310 	and.w	r3, r3, #16
 8012742:	2b00      	cmp	r3, #0
 8012744:	d008      	beq.n	8012758 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012746:	4b68      	ldr	r3, [pc, #416]	; (80128e8 <tcp_input+0x75c>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4618      	mov	r0, r3
 801274c:	f7fd fe54 	bl	80103f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012750:	69f8      	ldr	r0, [r7, #28]
 8012752:	f7fe fb97 	bl	8010e84 <tcp_abort>
            goto aborted;
 8012756:	e078      	b.n	801284a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00c      	beq.n	801277c <tcp_input+0x5f0>
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	6918      	ldr	r0, [r3, #16]
 801276c:	4b5e      	ldr	r3, [pc, #376]	; (80128e8 <tcp_input+0x75c>)
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	2300      	movs	r3, #0
 8012772:	69f9      	ldr	r1, [r7, #28]
 8012774:	47a0      	blx	r4
 8012776:	4603      	mov	r3, r0
 8012778:	74fb      	strb	r3, [r7, #19]
 801277a:	e008      	b.n	801278e <tcp_input+0x602>
 801277c:	4b5a      	ldr	r3, [pc, #360]	; (80128e8 <tcp_input+0x75c>)
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	2300      	movs	r3, #0
 8012782:	69f9      	ldr	r1, [r7, #28]
 8012784:	2000      	movs	r0, #0
 8012786:	f7ff f984 	bl	8011a92 <tcp_recv_null>
 801278a:	4603      	mov	r3, r0
 801278c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801278e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012792:	f113 0f0d 	cmn.w	r3, #13
 8012796:	d053      	beq.n	8012840 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012798:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d003      	beq.n	80127a8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80127a0:	4b51      	ldr	r3, [pc, #324]	; (80128e8 <tcp_input+0x75c>)
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80127a8:	4b4c      	ldr	r3, [pc, #304]	; (80128dc <tcp_input+0x750>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	f003 0320 	and.w	r3, r3, #32
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d030      	beq.n	8012816 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d009      	beq.n	80127d0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127c0:	7b5a      	ldrb	r2, [r3, #13]
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127c6:	f042 0220 	orr.w	r2, r2, #32
 80127ca:	b2d2      	uxtb	r2, r2
 80127cc:	735a      	strb	r2, [r3, #13]
 80127ce:	e022      	b.n	8012816 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80127d8:	d005      	beq.n	80127e6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127de:	3301      	adds	r3, #1
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00b      	beq.n	8012808 <tcp_input+0x67c>
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	6918      	ldr	r0, [r3, #16]
 80127fa:	2300      	movs	r3, #0
 80127fc:	2200      	movs	r2, #0
 80127fe:	69f9      	ldr	r1, [r7, #28]
 8012800:	47a0      	blx	r4
 8012802:	4603      	mov	r3, r0
 8012804:	74fb      	strb	r3, [r7, #19]
 8012806:	e001      	b.n	801280c <tcp_input+0x680>
 8012808:	2300      	movs	r3, #0
 801280a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801280c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012810:	f113 0f0d 	cmn.w	r3, #13
 8012814:	d016      	beq.n	8012844 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012816:	4b30      	ldr	r3, [pc, #192]	; (80128d8 <tcp_input+0x74c>)
 8012818:	2200      	movs	r2, #0
 801281a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801281c:	69f8      	ldr	r0, [r7, #28]
 801281e:	f000 f879 	bl	8012914 <tcp_input_delayed_close>
 8012822:	4603      	mov	r3, r0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d10f      	bne.n	8012848 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012828:	69f8      	ldr	r0, [r7, #28]
 801282a:	f002 fd95 	bl	8015358 <tcp_output>
 801282e:	e00c      	b.n	801284a <tcp_input+0x6be>
        goto aborted;
 8012830:	bf00      	nop
 8012832:	e00a      	b.n	801284a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012834:	bf00      	nop
 8012836:	e008      	b.n	801284a <tcp_input+0x6be>
              goto aborted;
 8012838:	bf00      	nop
 801283a:	e006      	b.n	801284a <tcp_input+0x6be>
          goto aborted;
 801283c:	bf00      	nop
 801283e:	e004      	b.n	801284a <tcp_input+0x6be>
            goto aborted;
 8012840:	bf00      	nop
 8012842:	e002      	b.n	801284a <tcp_input+0x6be>
              goto aborted;
 8012844:	bf00      	nop
 8012846:	e000      	b.n	801284a <tcp_input+0x6be>
          goto aborted;
 8012848:	bf00      	nop
    tcp_input_pcb = NULL;
 801284a:	4b23      	ldr	r3, [pc, #140]	; (80128d8 <tcp_input+0x74c>)
 801284c:	2200      	movs	r2, #0
 801284e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012850:	4b25      	ldr	r3, [pc, #148]	; (80128e8 <tcp_input+0x75c>)
 8012852:	2200      	movs	r2, #0
 8012854:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8012856:	4b28      	ldr	r3, [pc, #160]	; (80128f8 <tcp_input+0x76c>)
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d037      	beq.n	80128ce <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 801285e:	4b26      	ldr	r3, [pc, #152]	; (80128f8 <tcp_input+0x76c>)
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	f7fd fdc8 	bl	80103f8 <pbuf_free>
      inseg.p = NULL;
 8012868:	4b23      	ldr	r3, [pc, #140]	; (80128f8 <tcp_input+0x76c>)
 801286a:	2200      	movs	r2, #0
 801286c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801286e:	e02e      	b.n	80128ce <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012870:	4b22      	ldr	r3, [pc, #136]	; (80128fc <tcp_input+0x770>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	899b      	ldrh	r3, [r3, #12]
 8012876:	b29b      	uxth	r3, r3
 8012878:	4618      	mov	r0, r3
 801287a:	f7fc fba3 	bl	800efc4 <lwip_htons>
 801287e:	4603      	mov	r3, r0
 8012880:	f003 0304 	and.w	r3, r3, #4
 8012884:	2b00      	cmp	r3, #0
 8012886:	d115      	bne.n	80128b4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012888:	4b1d      	ldr	r3, [pc, #116]	; (8012900 <tcp_input+0x774>)
 801288a:	6818      	ldr	r0, [r3, #0]
 801288c:	4b1d      	ldr	r3, [pc, #116]	; (8012904 <tcp_input+0x778>)
 801288e:	881b      	ldrh	r3, [r3, #0]
 8012890:	461a      	mov	r2, r3
 8012892:	4b1d      	ldr	r3, [pc, #116]	; (8012908 <tcp_input+0x77c>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012898:	4b18      	ldr	r3, [pc, #96]	; (80128fc <tcp_input+0x770>)
 801289a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801289c:	885b      	ldrh	r3, [r3, #2]
 801289e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128a0:	4a16      	ldr	r2, [pc, #88]	; (80128fc <tcp_input+0x770>)
 80128a2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80128a4:	8812      	ldrh	r2, [r2, #0]
 80128a6:	b292      	uxth	r2, r2
 80128a8:	9201      	str	r2, [sp, #4]
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	4b17      	ldr	r3, [pc, #92]	; (801290c <tcp_input+0x780>)
 80128ae:	4a18      	ldr	r2, [pc, #96]	; (8012910 <tcp_input+0x784>)
 80128b0:	f002 ffdc 	bl	801586c <tcp_rst>
    pbuf_free(p);
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7fd fd9f 	bl	80103f8 <pbuf_free>
  return;
 80128ba:	e008      	b.n	80128ce <tcp_input+0x742>
    goto dropped;
 80128bc:	bf00      	nop
 80128be:	e002      	b.n	80128c6 <tcp_input+0x73a>
dropped:
 80128c0:	bf00      	nop
 80128c2:	e000      	b.n	80128c6 <tcp_input+0x73a>
      goto dropped;
 80128c4:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7fd fd96 	bl	80103f8 <pbuf_free>
 80128cc:	e000      	b.n	80128d0 <tcp_input+0x744>
  return;
 80128ce:	bf00      	nop
}
 80128d0:	3724      	adds	r7, #36	; 0x24
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd90      	pop	{r4, r7, pc}
 80128d6:	bf00      	nop
 80128d8:	200079c4 	.word	0x200079c4
 80128dc:	200040e1 	.word	0x200040e1
 80128e0:	200079b0 	.word	0x200079b0
 80128e4:	200040dc 	.word	0x200040dc
 80128e8:	200040e4 	.word	0x200040e4
 80128ec:	0801b4c4 	.word	0x0801b4c4
 80128f0:	0801b684 	.word	0x0801b684
 80128f4:	0801b52c 	.word	0x0801b52c
 80128f8:	200040b4 	.word	0x200040b4
 80128fc:	200040c4 	.word	0x200040c4
 8012900:	200040d8 	.word	0x200040d8
 8012904:	200040de 	.word	0x200040de
 8012908:	200040d4 	.word	0x200040d4
 801290c:	20004904 	.word	0x20004904
 8012910:	20004908 	.word	0x20004908

08012914 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801291c:	4b14      	ldr	r3, [pc, #80]	; (8012970 <tcp_input_delayed_close+0x5c>)
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	f003 0310 	and.w	r3, r3, #16
 8012924:	2b00      	cmp	r3, #0
 8012926:	d01d      	beq.n	8012964 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	7e9b      	ldrb	r3, [r3, #26]
 801292c:	f003 0310 	and.w	r3, r3, #16
 8012930:	2b00      	cmp	r3, #0
 8012932:	d10d      	bne.n	8012950 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801293a:	2b00      	cmp	r3, #0
 801293c:	d008      	beq.n	8012950 <tcp_input_delayed_close+0x3c>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	6912      	ldr	r2, [r2, #16]
 8012948:	f06f 010e 	mvn.w	r1, #14
 801294c:	4610      	mov	r0, r2
 801294e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012950:	6879      	ldr	r1, [r7, #4]
 8012952:	4808      	ldr	r0, [pc, #32]	; (8012974 <tcp_input_delayed_close+0x60>)
 8012954:	f7ff fb00 	bl	8011f58 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8012958:	6879      	ldr	r1, [r7, #4]
 801295a:	2001      	movs	r0, #1
 801295c:	f7fc ffb4 	bl	800f8c8 <memp_free>
    return 1;
 8012960:	2301      	movs	r3, #1
 8012962:	e000      	b.n	8012966 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8012964:	2300      	movs	r3, #0
}
 8012966:	4618      	mov	r0, r3
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	200040e1 	.word	0x200040e1
 8012974:	200079b0 	.word	0x200079b0

08012978 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b088      	sub	sp, #32
 801297c:	af02      	add	r7, sp, #8
 801297e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012980:	4b64      	ldr	r3, [pc, #400]	; (8012b14 <tcp_listen_input+0x19c>)
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	f003 0304 	and.w	r3, r3, #4
 8012988:	2b00      	cmp	r3, #0
 801298a:	f040 80bc 	bne.w	8012b06 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801298e:	4b61      	ldr	r3, [pc, #388]	; (8012b14 <tcp_listen_input+0x19c>)
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	f003 0310 	and.w	r3, r3, #16
 8012996:	2b00      	cmp	r3, #0
 8012998:	d016      	beq.n	80129c8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801299a:	4b5f      	ldr	r3, [pc, #380]	; (8012b18 <tcp_listen_input+0x1a0>)
 801299c:	6818      	ldr	r0, [r3, #0]
 801299e:	4b5f      	ldr	r3, [pc, #380]	; (8012b1c <tcp_listen_input+0x1a4>)
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	461a      	mov	r2, r3
 80129a4:	4b5e      	ldr	r3, [pc, #376]	; (8012b20 <tcp_listen_input+0x1a8>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129aa:	4b5e      	ldr	r3, [pc, #376]	; (8012b24 <tcp_listen_input+0x1ac>)
 80129ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ae:	885b      	ldrh	r3, [r3, #2]
 80129b0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129b2:	4a5c      	ldr	r2, [pc, #368]	; (8012b24 <tcp_listen_input+0x1ac>)
 80129b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129b6:	8812      	ldrh	r2, [r2, #0]
 80129b8:	b292      	uxth	r2, r2
 80129ba:	9201      	str	r2, [sp, #4]
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	4b5a      	ldr	r3, [pc, #360]	; (8012b28 <tcp_listen_input+0x1b0>)
 80129c0:	4a5a      	ldr	r2, [pc, #360]	; (8012b2c <tcp_listen_input+0x1b4>)
 80129c2:	f002 ff53 	bl	801586c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80129c6:	e0a0      	b.n	8012b0a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 80129c8:	4b52      	ldr	r3, [pc, #328]	; (8012b14 <tcp_listen_input+0x19c>)
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	f003 0302 	and.w	r3, r3, #2
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f000 809a 	beq.w	8012b0a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	7d5b      	ldrb	r3, [r3, #21]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7ff f938 	bl	8011c50 <tcp_alloc>
 80129e0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d111      	bne.n	8012a0c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	699b      	ldr	r3, [r3, #24]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00a      	beq.n	8012a06 <tcp_listen_input+0x8e>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	699b      	ldr	r3, [r3, #24]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	6910      	ldr	r0, [r2, #16]
 80129f8:	f04f 32ff 	mov.w	r2, #4294967295
 80129fc:	2100      	movs	r1, #0
 80129fe:	4798      	blx	r3
 8012a00:	4603      	mov	r3, r0
 8012a02:	73bb      	strb	r3, [r7, #14]
      return;
 8012a04:	e082      	b.n	8012b0c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012a06:	23f0      	movs	r3, #240	; 0xf0
 8012a08:	73bb      	strb	r3, [r7, #14]
      return;
 8012a0a:	e07f      	b.n	8012b0c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012a0c:	4b48      	ldr	r3, [pc, #288]	; (8012b30 <tcp_listen_input+0x1b8>)
 8012a0e:	695a      	ldr	r2, [r3, #20]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012a14:	4b46      	ldr	r3, [pc, #280]	; (8012b30 <tcp_listen_input+0x1b8>)
 8012a16:	691a      	ldr	r2, [r3, #16]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	8ada      	ldrh	r2, [r3, #22]
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012a24:	4b3f      	ldr	r3, [pc, #252]	; (8012b24 <tcp_listen_input+0x1ac>)
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	b29a      	uxth	r2, r3
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	2203      	movs	r2, #3
 8012a34:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012a36:	4b3a      	ldr	r3, [pc, #232]	; (8012b20 <tcp_listen_input+0x1a8>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	1c5a      	adds	r2, r3, #1
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012a48:	6978      	ldr	r0, [r7, #20]
 8012a4a:	f7ff fb01 	bl	8012050 <tcp_next_iss>
 8012a4e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	693a      	ldr	r2, [r7, #16]
 8012a54:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	693a      	ldr	r2, [r7, #16]
 8012a5a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012a68:	4b2d      	ldr	r3, [pc, #180]	; (8012b20 <tcp_listen_input+0x1a8>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	1e5a      	subs	r2, r3, #1
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	691a      	ldr	r2, [r3, #16]
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	7a1b      	ldrb	r3, [r3, #8]
 8012a84:	f003 030c 	and.w	r3, r3, #12
 8012a88:	b2da      	uxtb	r2, r3
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012a8e:	4b29      	ldr	r3, [pc, #164]	; (8012b34 <tcp_listen_input+0x1bc>)
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	60da      	str	r2, [r3, #12]
 8012a96:	4a27      	ldr	r2, [pc, #156]	; (8012b34 <tcp_listen_input+0x1bc>)
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	f003 f938 	bl	8015d10 <tcp_timer_needed>
 8012aa0:	4b25      	ldr	r3, [pc, #148]	; (8012b38 <tcp_listen_input+0x1c0>)
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012aa6:	6978      	ldr	r0, [r7, #20]
 8012aa8:	f001 fd14 	bl	80144d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012aac:	4b1d      	ldr	r3, [pc, #116]	; (8012b24 <tcp_listen_input+0x1ac>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	89db      	ldrh	r3, [r3, #14]
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	3304      	adds	r3, #4
 8012ace:	4619      	mov	r1, r3
 8012ad0:	4610      	mov	r0, r2
 8012ad2:	f7ff fad5 	bl	8012080 <tcp_eff_send_mss_impl>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	461a      	mov	r2, r3
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012ade:	2112      	movs	r1, #18
 8012ae0:	6978      	ldr	r0, [r7, #20]
 8012ae2:	f002 fae1 	bl	80150a8 <tcp_enqueue_flags>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d004      	beq.n	8012afc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8012af2:	2100      	movs	r1, #0
 8012af4:	6978      	ldr	r0, [r7, #20]
 8012af6:	f7fe f913 	bl	8010d20 <tcp_abandon>
      return;
 8012afa:	e007      	b.n	8012b0c <tcp_listen_input+0x194>
    tcp_output(npcb);
 8012afc:	6978      	ldr	r0, [r7, #20]
 8012afe:	f002 fc2b 	bl	8015358 <tcp_output>
  return;
 8012b02:	bf00      	nop
 8012b04:	e001      	b.n	8012b0a <tcp_listen_input+0x192>
    return;
 8012b06:	bf00      	nop
 8012b08:	e000      	b.n	8012b0c <tcp_listen_input+0x194>
  return;
 8012b0a:	bf00      	nop
}
 8012b0c:	3718      	adds	r7, #24
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	200040e0 	.word	0x200040e0
 8012b18:	200040d8 	.word	0x200040d8
 8012b1c:	200040de 	.word	0x200040de
 8012b20:	200040d4 	.word	0x200040d4
 8012b24:	200040c4 	.word	0x200040c4
 8012b28:	20004904 	.word	0x20004904
 8012b2c:	20004908 	.word	0x20004908
 8012b30:	200048f4 	.word	0x200048f4
 8012b34:	200079b0 	.word	0x200079b0
 8012b38:	200079ac 	.word	0x200079ac

08012b3c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af02      	add	r7, sp, #8
 8012b42:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012b44:	4b29      	ldr	r3, [pc, #164]	; (8012bec <tcp_timewait_input+0xb0>)
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	f003 0304 	and.w	r3, r3, #4
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d147      	bne.n	8012be0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012b50:	4b26      	ldr	r3, [pc, #152]	; (8012bec <tcp_timewait_input+0xb0>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	f003 0302 	and.w	r3, r3, #2
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d027      	beq.n	8012bac <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012b5c:	4b24      	ldr	r3, [pc, #144]	; (8012bf0 <tcp_timewait_input+0xb4>)
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	db2a      	blt.n	8012bc0 <tcp_timewait_input+0x84>
 8012b6a:	4b21      	ldr	r3, [pc, #132]	; (8012bf0 <tcp_timewait_input+0xb4>)
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b72:	6879      	ldr	r1, [r7, #4]
 8012b74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b76:	440b      	add	r3, r1
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	dc20      	bgt.n	8012bc0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b7e:	4b1d      	ldr	r3, [pc, #116]	; (8012bf4 <tcp_timewait_input+0xb8>)
 8012b80:	6818      	ldr	r0, [r3, #0]
 8012b82:	4b1d      	ldr	r3, [pc, #116]	; (8012bf8 <tcp_timewait_input+0xbc>)
 8012b84:	881b      	ldrh	r3, [r3, #0]
 8012b86:	461a      	mov	r2, r3
 8012b88:	4b19      	ldr	r3, [pc, #100]	; (8012bf0 <tcp_timewait_input+0xb4>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b8e:	4b1b      	ldr	r3, [pc, #108]	; (8012bfc <tcp_timewait_input+0xc0>)
 8012b90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b92:	885b      	ldrh	r3, [r3, #2]
 8012b94:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b96:	4a19      	ldr	r2, [pc, #100]	; (8012bfc <tcp_timewait_input+0xc0>)
 8012b98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b9a:	8812      	ldrh	r2, [r2, #0]
 8012b9c:	b292      	uxth	r2, r2
 8012b9e:	9201      	str	r2, [sp, #4]
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	4b17      	ldr	r3, [pc, #92]	; (8012c00 <tcp_timewait_input+0xc4>)
 8012ba4:	4a17      	ldr	r2, [pc, #92]	; (8012c04 <tcp_timewait_input+0xc8>)
 8012ba6:	f002 fe61 	bl	801586c <tcp_rst>
      return;
 8012baa:	e01c      	b.n	8012be6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8012bac:	4b0f      	ldr	r3, [pc, #60]	; (8012bec <tcp_timewait_input+0xb0>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	f003 0301 	and.w	r3, r3, #1
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d003      	beq.n	8012bc0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012bb8:	4b13      	ldr	r3, [pc, #76]	; (8012c08 <tcp_timewait_input+0xcc>)
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012bc0:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <tcp_timewait_input+0xbc>)
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d00d      	beq.n	8012be4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	7e9b      	ldrb	r3, [r3, #26]
 8012bcc:	f043 0302 	orr.w	r3, r3, #2
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f002 fbbe 	bl	8015358 <tcp_output>
  }
  return;
 8012bdc:	bf00      	nop
 8012bde:	e001      	b.n	8012be4 <tcp_timewait_input+0xa8>
    return;
 8012be0:	bf00      	nop
 8012be2:	e000      	b.n	8012be6 <tcp_timewait_input+0xaa>
  return;
 8012be4:	bf00      	nop
}
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}
 8012bec:	200040e0 	.word	0x200040e0
 8012bf0:	200040d4 	.word	0x200040d4
 8012bf4:	200040d8 	.word	0x200040d8
 8012bf8:	200040de 	.word	0x200040de
 8012bfc:	200040c4 	.word	0x200040c4
 8012c00:	20004904 	.word	0x20004904
 8012c04:	20004908 	.word	0x20004908
 8012c08:	200079b4 	.word	0x200079b4

08012c0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b08a      	sub	sp, #40	; 0x28
 8012c10:	af02      	add	r7, sp, #8
 8012c12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012c1c:	4ba4      	ldr	r3, [pc, #656]	; (8012eb0 <tcp_process+0x2a4>)
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	f003 0304 	and.w	r3, r3, #4
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d04e      	beq.n	8012cc6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	7d1b      	ldrb	r3, [r3, #20]
 8012c2c:	2b02      	cmp	r3, #2
 8012c2e:	d108      	bne.n	8012c42 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c34:	4b9f      	ldr	r3, [pc, #636]	; (8012eb4 <tcp_process+0x2a8>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d123      	bne.n	8012c84 <tcp_process+0x78>
        acceptable = 1;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	76fb      	strb	r3, [r7, #27]
 8012c40:	e020      	b.n	8012c84 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c46:	4b9c      	ldr	r3, [pc, #624]	; (8012eb8 <tcp_process+0x2ac>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d102      	bne.n	8012c54 <tcp_process+0x48>
        acceptable = 1;
 8012c4e:	2301      	movs	r3, #1
 8012c50:	76fb      	strb	r3, [r7, #27]
 8012c52:	e017      	b.n	8012c84 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c54:	4b98      	ldr	r3, [pc, #608]	; (8012eb8 <tcp_process+0x2ac>)
 8012c56:	681a      	ldr	r2, [r3, #0]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	db10      	blt.n	8012c84 <tcp_process+0x78>
 8012c62:	4b95      	ldr	r3, [pc, #596]	; (8012eb8 <tcp_process+0x2ac>)
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c6a:	6879      	ldr	r1, [r7, #4]
 8012c6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c6e:	440b      	add	r3, r1
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	dc06      	bgt.n	8012c84 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	7e9b      	ldrb	r3, [r3, #26]
 8012c7a:	f043 0302 	orr.w	r3, r3, #2
 8012c7e:	b2da      	uxtb	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012c84:	7efb      	ldrb	r3, [r7, #27]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d01b      	beq.n	8012cc2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	7d1b      	ldrb	r3, [r3, #20]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d106      	bne.n	8012ca0 <tcp_process+0x94>
 8012c92:	4b8a      	ldr	r3, [pc, #552]	; (8012ebc <tcp_process+0x2b0>)
 8012c94:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012c98:	4989      	ldr	r1, [pc, #548]	; (8012ec0 <tcp_process+0x2b4>)
 8012c9a:	488a      	ldr	r0, [pc, #552]	; (8012ec4 <tcp_process+0x2b8>)
 8012c9c:	f006 f888 	bl	8018db0 <iprintf>
      recv_flags |= TF_RESET;
 8012ca0:	4b89      	ldr	r3, [pc, #548]	; (8012ec8 <tcp_process+0x2bc>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	f043 0308 	orr.w	r3, r3, #8
 8012ca8:	b2da      	uxtb	r2, r3
 8012caa:	4b87      	ldr	r3, [pc, #540]	; (8012ec8 <tcp_process+0x2bc>)
 8012cac:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	7e9b      	ldrb	r3, [r3, #26]
 8012cb2:	f023 0301 	bic.w	r3, r3, #1
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8012cbc:	f06f 030d 	mvn.w	r3, #13
 8012cc0:	e34d      	b.n	801335e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	e34b      	b.n	801335e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012cc6:	4b7a      	ldr	r3, [pc, #488]	; (8012eb0 <tcp_process+0x2a4>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	f003 0302 	and.w	r3, r3, #2
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d010      	beq.n	8012cf4 <tcp_process+0xe8>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	7d1b      	ldrb	r3, [r3, #20]
 8012cd6:	2b02      	cmp	r3, #2
 8012cd8:	d00c      	beq.n	8012cf4 <tcp_process+0xe8>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	7d1b      	ldrb	r3, [r3, #20]
 8012cde:	2b03      	cmp	r3, #3
 8012ce0:	d008      	beq.n	8012cf4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	7e9b      	ldrb	r3, [r3, #26]
 8012ce6:	f043 0302 	orr.w	r3, r3, #2
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	e334      	b.n	801335e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	7e9b      	ldrb	r3, [r3, #26]
 8012cf8:	f003 0310 	and.w	r3, r3, #16
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d103      	bne.n	8012d08 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012d00:	4b72      	ldr	r3, [pc, #456]	; (8012ecc <tcp_process+0x2c0>)
 8012d02:	681a      	ldr	r2, [r3, #0]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f001 fbdf 	bl	80144d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	7d1b      	ldrb	r3, [r3, #20]
 8012d1a:	3b02      	subs	r3, #2
 8012d1c:	2b07      	cmp	r3, #7
 8012d1e:	f200 830e 	bhi.w	801333e <tcp_process+0x732>
 8012d22:	a201      	add	r2, pc, #4	; (adr r2, 8012d28 <tcp_process+0x11c>)
 8012d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d28:	08012d49 	.word	0x08012d49
 8012d2c:	08012f41 	.word	0x08012f41
 8012d30:	08013099 	.word	0x08013099
 8012d34:	080130c3 	.word	0x080130c3
 8012d38:	080131ed 	.word	0x080131ed
 8012d3c:	08013099 	.word	0x08013099
 8012d40:	08013279 	.word	0x08013279
 8012d44:	08013309 	.word	0x08013309
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012d48:	4b59      	ldr	r3, [pc, #356]	; (8012eb0 <tcp_process+0x2a4>)
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	f003 0310 	and.w	r3, r3, #16
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 80cb 	beq.w	8012eec <tcp_process+0x2e0>
 8012d56:	4b56      	ldr	r3, [pc, #344]	; (8012eb0 <tcp_process+0x2a4>)
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	f003 0302 	and.w	r3, r3, #2
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 80c4 	beq.w	8012eec <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	4b52      	ldr	r3, [pc, #328]	; (8012eb4 <tcp_process+0x2a8>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	f040 80bc 	bne.w	8012eec <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8012d74:	4b50      	ldr	r3, [pc, #320]	; (8012eb8 <tcp_process+0x2ac>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	1c5a      	adds	r2, r3, #1
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8012d86:	4b4b      	ldr	r3, [pc, #300]	; (8012eb4 <tcp_process+0x2a8>)
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8012d8e:	4b50      	ldr	r3, [pc, #320]	; (8012ed0 <tcp_process+0x2c4>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	89db      	ldrh	r3, [r3, #14]
 8012d94:	b29a      	uxth	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012da8:	4b43      	ldr	r3, [pc, #268]	; (8012eb8 <tcp_process+0x2ac>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	1e5a      	subs	r2, r3, #1
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2204      	movs	r2, #4
 8012db6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	4610      	mov	r0, r2
 8012dc4:	f7ff f95c 	bl	8012080 <tcp_eff_send_mss_impl>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	461a      	mov	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dd4:	005b      	lsls	r3, r3, #1
 8012dd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	bf38      	it	cc
 8012dde:	461a      	movcc	r2, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	4293      	cmp	r3, r2
 8012de8:	bf28      	it	cs
 8012dea:	4613      	movcs	r3, r2
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_process+0x200>
 8012dfe:	4b2f      	ldr	r3, [pc, #188]	; (8012ebc <tcp_process+0x2b0>)
 8012e00:	f240 321a 	movw	r2, #794	; 0x31a
 8012e04:	4933      	ldr	r1, [pc, #204]	; (8012ed4 <tcp_process+0x2c8>)
 8012e06:	482f      	ldr	r0, [pc, #188]	; (8012ec4 <tcp_process+0x2b8>)
 8012e08:	f005 ffd2 	bl	8018db0 <iprintf>
      --pcb->snd_queuelen;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e12:	3b01      	subs	r3, #1
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e20:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d111      	bne.n	8012e4c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e2c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d106      	bne.n	8012e42 <tcp_process+0x236>
 8012e34:	4b21      	ldr	r3, [pc, #132]	; (8012ebc <tcp_process+0x2b0>)
 8012e36:	f240 3222 	movw	r2, #802	; 0x322
 8012e3a:	4927      	ldr	r1, [pc, #156]	; (8012ed8 <tcp_process+0x2cc>)
 8012e3c:	4821      	ldr	r0, [pc, #132]	; (8012ec4 <tcp_process+0x2b8>)
 8012e3e:	f005 ffb7 	bl	8018db0 <iprintf>
        pcb->unsent = rseg->next;
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	681a      	ldr	r2, [r3, #0]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	669a      	str	r2, [r3, #104]	; 0x68
 8012e4a:	e003      	b.n	8012e54 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8012e54:	69f8      	ldr	r0, [r7, #28]
 8012e56:	f7fe fde8 	bl	8011a2a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d104      	bne.n	8012e6c <tcp_process+0x260>
        pcb->rtime = -1;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e68:	861a      	strh	r2, [r3, #48]	; 0x30
 8012e6a:	e006      	b.n	8012e7a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00a      	beq.n	8012e9a <tcp_process+0x28e>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	6910      	ldr	r0, [r2, #16]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	6879      	ldr	r1, [r7, #4]
 8012e92:	4798      	blx	r3
 8012e94:	4603      	mov	r3, r0
 8012e96:	76bb      	strb	r3, [r7, #26]
 8012e98:	e001      	b.n	8012e9e <tcp_process+0x292>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8012e9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ea2:	f113 0f0d 	cmn.w	r3, #13
 8012ea6:	d119      	bne.n	8012edc <tcp_process+0x2d0>
        return ERR_ABRT;
 8012ea8:	f06f 030c 	mvn.w	r3, #12
 8012eac:	e257      	b.n	801335e <tcp_process+0x752>
 8012eae:	bf00      	nop
 8012eb0:	200040e0 	.word	0x200040e0
 8012eb4:	200040d8 	.word	0x200040d8
 8012eb8:	200040d4 	.word	0x200040d4
 8012ebc:	0801b4c4 	.word	0x0801b4c4
 8012ec0:	0801b6a0 	.word	0x0801b6a0
 8012ec4:	0801b52c 	.word	0x0801b52c
 8012ec8:	200040e1 	.word	0x200040e1
 8012ecc:	200079b4 	.word	0x200079b4
 8012ed0:	200040c4 	.word	0x200040c4
 8012ed4:	0801b6c0 	.word	0x0801b6c0
 8012ed8:	0801b6d8 	.word	0x0801b6d8
      }
      tcp_ack_now(pcb);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	7e9b      	ldrb	r3, [r3, #26]
 8012ee0:	f043 0302 	orr.w	r3, r3, #2
 8012ee4:	b2da      	uxtb	r2, r3
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8012eea:	e22a      	b.n	8013342 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8012eec:	4b9f      	ldr	r3, [pc, #636]	; (801316c <tcp_process+0x560>)
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	f003 0310 	and.w	r3, r3, #16
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 8224 	beq.w	8013342 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012efa:	4b9d      	ldr	r3, [pc, #628]	; (8013170 <tcp_process+0x564>)
 8012efc:	6818      	ldr	r0, [r3, #0]
 8012efe:	4b9d      	ldr	r3, [pc, #628]	; (8013174 <tcp_process+0x568>)
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	461a      	mov	r2, r3
 8012f04:	4b9c      	ldr	r3, [pc, #624]	; (8013178 <tcp_process+0x56c>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f0a:	4b9c      	ldr	r3, [pc, #624]	; (801317c <tcp_process+0x570>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f0e:	885b      	ldrh	r3, [r3, #2]
 8012f10:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f12:	4a9a      	ldr	r2, [pc, #616]	; (801317c <tcp_process+0x570>)
 8012f14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f16:	8812      	ldrh	r2, [r2, #0]
 8012f18:	b292      	uxth	r2, r2
 8012f1a:	9201      	str	r2, [sp, #4]
 8012f1c:	9300      	str	r3, [sp, #0]
 8012f1e:	4b98      	ldr	r3, [pc, #608]	; (8013180 <tcp_process+0x574>)
 8012f20:	4a98      	ldr	r2, [pc, #608]	; (8013184 <tcp_process+0x578>)
 8012f22:	f002 fca3 	bl	801586c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f2c:	2b05      	cmp	r3, #5
 8012f2e:	f200 8208 	bhi.w	8013342 <tcp_process+0x736>
        pcb->rtime = 0;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2200      	movs	r2, #0
 8012f36:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f002 fd0d 	bl	8015958 <tcp_rexmit_rto>
    break;
 8012f3e:	e200      	b.n	8013342 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8012f40:	4b8a      	ldr	r3, [pc, #552]	; (801316c <tcp_process+0x560>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f003 0310 	and.w	r3, r3, #16
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	f000 8091 	beq.w	8013070 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8012f4e:	4b88      	ldr	r3, [pc, #544]	; (8013170 <tcp_process+0x564>)
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	db71      	blt.n	8013042 <tcp_process+0x436>
 8012f5e:	4b84      	ldr	r3, [pc, #528]	; (8013170 <tcp_process+0x564>)
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f66:	1ad3      	subs	r3, r2, r3
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	dc6a      	bgt.n	8013042 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2204      	movs	r2, #4
 8012f70:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00b      	beq.n	8012f92 <tcp_process+0x386>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f7e:	699b      	ldr	r3, [r3, #24]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d106      	bne.n	8012f92 <tcp_process+0x386>
 8012f84:	4b80      	ldr	r3, [pc, #512]	; (8013188 <tcp_process+0x57c>)
 8012f86:	f240 3251 	movw	r2, #849	; 0x351
 8012f8a:	4980      	ldr	r1, [pc, #512]	; (801318c <tcp_process+0x580>)
 8012f8c:	4880      	ldr	r0, [pc, #512]	; (8013190 <tcp_process+0x584>)
 8012f8e:	f005 ff0f 	bl	8018db0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d102      	bne.n	8012fa0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8012f9a:	23fa      	movs	r3, #250	; 0xfa
 8012f9c:	76bb      	strb	r3, [r7, #26]
 8012f9e:	e011      	b.n	8012fc4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fa4:	699b      	ldr	r3, [r3, #24]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d00a      	beq.n	8012fc0 <tcp_process+0x3b4>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fae:	699b      	ldr	r3, [r3, #24]
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	6910      	ldr	r0, [r2, #16]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	6879      	ldr	r1, [r7, #4]
 8012fb8:	4798      	blx	r3
 8012fba:	4603      	mov	r3, r0
 8012fbc:	76bb      	strb	r3, [r7, #26]
 8012fbe:	e001      	b.n	8012fc4 <tcp_process+0x3b8>
 8012fc0:	23f0      	movs	r3, #240	; 0xf0
 8012fc2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8012fc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00a      	beq.n	8012fe2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8012fcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012fd0:	f113 0f0d 	cmn.w	r3, #13
 8012fd4:	d002      	beq.n	8012fdc <tcp_process+0x3d0>
            tcp_abort(pcb);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7fd ff54 	bl	8010e84 <tcp_abort>
          }
          return ERR_ABRT;
 8012fdc:	f06f 030c 	mvn.w	r3, #12
 8012fe0:	e1bd      	b.n	801335e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f000 fa42 	bl	801346c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012fe8:	4b6a      	ldr	r3, [pc, #424]	; (8013194 <tcp_process+0x588>)
 8012fea:	881b      	ldrh	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d005      	beq.n	8012ffc <tcp_process+0x3f0>
          recv_acked--;
 8012ff0:	4b68      	ldr	r3, [pc, #416]	; (8013194 <tcp_process+0x588>)
 8012ff2:	881b      	ldrh	r3, [r3, #0]
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	4b66      	ldr	r3, [pc, #408]	; (8013194 <tcp_process+0x588>)
 8012ffa:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013000:	005b      	lsls	r3, r3, #1
 8013002:	f241 121c 	movw	r2, #4380	; 0x111c
 8013006:	429a      	cmp	r2, r3
 8013008:	bf38      	it	cc
 801300a:	461a      	movcc	r2, r3
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	4293      	cmp	r3, r2
 8013014:	bf28      	it	cs
 8013016:	4613      	movcs	r3, r2
 8013018:	b29a      	uxth	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8013020:	4b5d      	ldr	r3, [pc, #372]	; (8013198 <tcp_process+0x58c>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	f003 0320 	and.w	r3, r3, #32
 8013028:	2b00      	cmp	r3, #0
 801302a:	d034      	beq.n	8013096 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	7e9b      	ldrb	r3, [r3, #26]
 8013030:	f043 0302 	orr.w	r3, r3, #2
 8013034:	b2da      	uxtb	r2, r3
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2207      	movs	r2, #7
 801303e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8013040:	e029      	b.n	8013096 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013042:	4b4b      	ldr	r3, [pc, #300]	; (8013170 <tcp_process+0x564>)
 8013044:	6818      	ldr	r0, [r3, #0]
 8013046:	4b4b      	ldr	r3, [pc, #300]	; (8013174 <tcp_process+0x568>)
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	461a      	mov	r2, r3
 801304c:	4b4a      	ldr	r3, [pc, #296]	; (8013178 <tcp_process+0x56c>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013052:	4b4a      	ldr	r3, [pc, #296]	; (801317c <tcp_process+0x570>)
 8013054:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013056:	885b      	ldrh	r3, [r3, #2]
 8013058:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801305a:	4a48      	ldr	r2, [pc, #288]	; (801317c <tcp_process+0x570>)
 801305c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801305e:	8812      	ldrh	r2, [r2, #0]
 8013060:	b292      	uxth	r2, r2
 8013062:	9201      	str	r2, [sp, #4]
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	4b46      	ldr	r3, [pc, #280]	; (8013180 <tcp_process+0x574>)
 8013068:	4a46      	ldr	r2, [pc, #280]	; (8013184 <tcp_process+0x578>)
 801306a:	f002 fbff 	bl	801586c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801306e:	e16a      	b.n	8013346 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013070:	4b3e      	ldr	r3, [pc, #248]	; (801316c <tcp_process+0x560>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 0302 	and.w	r3, r3, #2
 8013078:	2b00      	cmp	r3, #0
 801307a:	f000 8164 	beq.w	8013346 <tcp_process+0x73a>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013082:	1e5a      	subs	r2, r3, #1
 8013084:	4b3c      	ldr	r3, [pc, #240]	; (8013178 <tcp_process+0x56c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	429a      	cmp	r2, r3
 801308a:	f040 815c 	bne.w	8013346 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f002 fc98 	bl	80159c4 <tcp_rexmit>
    break;
 8013094:	e157      	b.n	8013346 <tcp_process+0x73a>
 8013096:	e156      	b.n	8013346 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f000 f9e7 	bl	801346c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801309e:	4b3e      	ldr	r3, [pc, #248]	; (8013198 <tcp_process+0x58c>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	f003 0320 	and.w	r3, r3, #32
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	f000 814f 	beq.w	801334a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7e9b      	ldrb	r3, [r3, #26]
 80130b0:	f043 0302 	orr.w	r3, r3, #2
 80130b4:	b2da      	uxtb	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2207      	movs	r2, #7
 80130be:	751a      	strb	r2, [r3, #20]
    }
    break;
 80130c0:	e143      	b.n	801334a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 f9d2 	bl	801346c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80130c8:	4b33      	ldr	r3, [pc, #204]	; (8013198 <tcp_process+0x58c>)
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	f003 0320 	and.w	r3, r3, #32
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d074      	beq.n	80131be <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130d4:	4b25      	ldr	r3, [pc, #148]	; (801316c <tcp_process+0x560>)
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	f003 0310 	and.w	r3, r3, #16
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d063      	beq.n	80131a8 <tcp_process+0x59c>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130e4:	4b22      	ldr	r3, [pc, #136]	; (8013170 <tcp_process+0x564>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d15d      	bne.n	80131a8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d159      	bne.n	80131a8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7e9b      	ldrb	r3, [r3, #26]
 80130f8:	f043 0302 	orr.w	r3, r3, #2
 80130fc:	b2da      	uxtb	r2, r3
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7fe fee6 	bl	8011ed4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013108:	4b24      	ldr	r3, [pc, #144]	; (801319c <tcp_process+0x590>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	429a      	cmp	r2, r3
 8013110:	d105      	bne.n	801311e <tcp_process+0x512>
 8013112:	4b22      	ldr	r3, [pc, #136]	; (801319c <tcp_process+0x590>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	4a20      	ldr	r2, [pc, #128]	; (801319c <tcp_process+0x590>)
 801311a:	6013      	str	r3, [r2, #0]
 801311c:	e013      	b.n	8013146 <tcp_process+0x53a>
 801311e:	4b1f      	ldr	r3, [pc, #124]	; (801319c <tcp_process+0x590>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	617b      	str	r3, [r7, #20]
 8013124:	e00c      	b.n	8013140 <tcp_process+0x534>
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	429a      	cmp	r2, r3
 801312e:	d104      	bne.n	801313a <tcp_process+0x52e>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	68da      	ldr	r2, [r3, #12]
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	60da      	str	r2, [r3, #12]
 8013138:	e005      	b.n	8013146 <tcp_process+0x53a>
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	617b      	str	r3, [r7, #20]
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1ef      	bne.n	8013126 <tcp_process+0x51a>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	60da      	str	r2, [r3, #12]
 801314c:	4b14      	ldr	r3, [pc, #80]	; (80131a0 <tcp_process+0x594>)
 801314e:	2201      	movs	r2, #1
 8013150:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	220a      	movs	r2, #10
 8013156:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013158:	4b12      	ldr	r3, [pc, #72]	; (80131a4 <tcp_process+0x598>)
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	60da      	str	r2, [r3, #12]
 8013160:	4a10      	ldr	r2, [pc, #64]	; (80131a4 <tcp_process+0x598>)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6013      	str	r3, [r2, #0]
 8013166:	f002 fdd3 	bl	8015d10 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801316a:	e0f0      	b.n	801334e <tcp_process+0x742>
 801316c:	200040e0 	.word	0x200040e0
 8013170:	200040d8 	.word	0x200040d8
 8013174:	200040de 	.word	0x200040de
 8013178:	200040d4 	.word	0x200040d4
 801317c:	200040c4 	.word	0x200040c4
 8013180:	20004904 	.word	0x20004904
 8013184:	20004908 	.word	0x20004908
 8013188:	0801b4c4 	.word	0x0801b4c4
 801318c:	0801b6ec 	.word	0x0801b6ec
 8013190:	0801b52c 	.word	0x0801b52c
 8013194:	200040dc 	.word	0x200040dc
 8013198:	200040e1 	.word	0x200040e1
 801319c:	200079b0 	.word	0x200079b0
 80131a0:	200079ac 	.word	0x200079ac
 80131a4:	200079c0 	.word	0x200079c0
        tcp_ack_now(pcb);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7e9b      	ldrb	r3, [r3, #26]
 80131ac:	f043 0302 	orr.w	r3, r3, #2
 80131b0:	b2da      	uxtb	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2208      	movs	r2, #8
 80131ba:	751a      	strb	r2, [r3, #20]
    break;
 80131bc:	e0c7      	b.n	801334e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131be:	4b6a      	ldr	r3, [pc, #424]	; (8013368 <tcp_process+0x75c>)
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	f003 0310 	and.w	r3, r3, #16
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	f000 80c1 	beq.w	801334e <tcp_process+0x742>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131d0:	4b66      	ldr	r3, [pc, #408]	; (801336c <tcp_process+0x760>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	f040 80ba 	bne.w	801334e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80131de:	2b00      	cmp	r3, #0
 80131e0:	f040 80b5 	bne.w	801334e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2206      	movs	r2, #6
 80131e8:	751a      	strb	r2, [r3, #20]
    break;
 80131ea:	e0b0      	b.n	801334e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f000 f93d 	bl	801346c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80131f2:	4b5f      	ldr	r3, [pc, #380]	; (8013370 <tcp_process+0x764>)
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	f003 0320 	and.w	r3, r3, #32
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	f000 80a9 	beq.w	8013352 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	7e9b      	ldrb	r3, [r3, #26]
 8013204:	f043 0302 	orr.w	r3, r3, #2
 8013208:	b2da      	uxtb	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7fe fe60 	bl	8011ed4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013214:	4b57      	ldr	r3, [pc, #348]	; (8013374 <tcp_process+0x768>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	429a      	cmp	r2, r3
 801321c:	d105      	bne.n	801322a <tcp_process+0x61e>
 801321e:	4b55      	ldr	r3, [pc, #340]	; (8013374 <tcp_process+0x768>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	4a53      	ldr	r2, [pc, #332]	; (8013374 <tcp_process+0x768>)
 8013226:	6013      	str	r3, [r2, #0]
 8013228:	e013      	b.n	8013252 <tcp_process+0x646>
 801322a:	4b52      	ldr	r3, [pc, #328]	; (8013374 <tcp_process+0x768>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	613b      	str	r3, [r7, #16]
 8013230:	e00c      	b.n	801324c <tcp_process+0x640>
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	429a      	cmp	r2, r3
 801323a:	d104      	bne.n	8013246 <tcp_process+0x63a>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	68da      	ldr	r2, [r3, #12]
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	60da      	str	r2, [r3, #12]
 8013244:	e005      	b.n	8013252 <tcp_process+0x646>
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	613b      	str	r3, [r7, #16]
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1ef      	bne.n	8013232 <tcp_process+0x626>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2200      	movs	r2, #0
 8013256:	60da      	str	r2, [r3, #12]
 8013258:	4b47      	ldr	r3, [pc, #284]	; (8013378 <tcp_process+0x76c>)
 801325a:	2201      	movs	r2, #1
 801325c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	220a      	movs	r2, #10
 8013262:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013264:	4b45      	ldr	r3, [pc, #276]	; (801337c <tcp_process+0x770>)
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	60da      	str	r2, [r3, #12]
 801326c:	4a43      	ldr	r2, [pc, #268]	; (801337c <tcp_process+0x770>)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6013      	str	r3, [r2, #0]
 8013272:	f002 fd4d 	bl	8015d10 <tcp_timer_needed>
    }
    break;
 8013276:	e06c      	b.n	8013352 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f000 f8f7 	bl	801346c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801327e:	4b3a      	ldr	r3, [pc, #232]	; (8013368 <tcp_process+0x75c>)
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	f003 0310 	and.w	r3, r3, #16
 8013286:	2b00      	cmp	r3, #0
 8013288:	d065      	beq.n	8013356 <tcp_process+0x74a>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801328e:	4b37      	ldr	r3, [pc, #220]	; (801336c <tcp_process+0x760>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	429a      	cmp	r2, r3
 8013294:	d15f      	bne.n	8013356 <tcp_process+0x74a>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801329a:	2b00      	cmp	r3, #0
 801329c:	d15b      	bne.n	8013356 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f7fe fe18 	bl	8011ed4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80132a4:	4b33      	ldr	r3, [pc, #204]	; (8013374 <tcp_process+0x768>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d105      	bne.n	80132ba <tcp_process+0x6ae>
 80132ae:	4b31      	ldr	r3, [pc, #196]	; (8013374 <tcp_process+0x768>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	4a2f      	ldr	r2, [pc, #188]	; (8013374 <tcp_process+0x768>)
 80132b6:	6013      	str	r3, [r2, #0]
 80132b8:	e013      	b.n	80132e2 <tcp_process+0x6d6>
 80132ba:	4b2e      	ldr	r3, [pc, #184]	; (8013374 <tcp_process+0x768>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	60fb      	str	r3, [r7, #12]
 80132c0:	e00c      	b.n	80132dc <tcp_process+0x6d0>
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d104      	bne.n	80132d6 <tcp_process+0x6ca>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	68da      	ldr	r2, [r3, #12]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	60da      	str	r2, [r3, #12]
 80132d4:	e005      	b.n	80132e2 <tcp_process+0x6d6>
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	60fb      	str	r3, [r7, #12]
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d1ef      	bne.n	80132c2 <tcp_process+0x6b6>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2200      	movs	r2, #0
 80132e6:	60da      	str	r2, [r3, #12]
 80132e8:	4b23      	ldr	r3, [pc, #140]	; (8013378 <tcp_process+0x76c>)
 80132ea:	2201      	movs	r2, #1
 80132ec:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	220a      	movs	r2, #10
 80132f2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80132f4:	4b21      	ldr	r3, [pc, #132]	; (801337c <tcp_process+0x770>)
 80132f6:	681a      	ldr	r2, [r3, #0]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	60da      	str	r2, [r3, #12]
 80132fc:	4a1f      	ldr	r2, [pc, #124]	; (801337c <tcp_process+0x770>)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6013      	str	r3, [r2, #0]
 8013302:	f002 fd05 	bl	8015d10 <tcp_timer_needed>
    }
    break;
 8013306:	e026      	b.n	8013356 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f000 f8af 	bl	801346c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801330e:	4b16      	ldr	r3, [pc, #88]	; (8013368 <tcp_process+0x75c>)
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	f003 0310 	and.w	r3, r3, #16
 8013316:	2b00      	cmp	r3, #0
 8013318:	d01f      	beq.n	801335a <tcp_process+0x74e>
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801331e:	4b13      	ldr	r3, [pc, #76]	; (801336c <tcp_process+0x760>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	d119      	bne.n	801335a <tcp_process+0x74e>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801332a:	2b00      	cmp	r3, #0
 801332c:	d115      	bne.n	801335a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801332e:	4b10      	ldr	r3, [pc, #64]	; (8013370 <tcp_process+0x764>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	f043 0310 	orr.w	r3, r3, #16
 8013336:	b2da      	uxtb	r2, r3
 8013338:	4b0d      	ldr	r3, [pc, #52]	; (8013370 <tcp_process+0x764>)
 801333a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801333c:	e00d      	b.n	801335a <tcp_process+0x74e>
  default:
    break;
 801333e:	bf00      	nop
 8013340:	e00c      	b.n	801335c <tcp_process+0x750>
    break;
 8013342:	bf00      	nop
 8013344:	e00a      	b.n	801335c <tcp_process+0x750>
    break;
 8013346:	bf00      	nop
 8013348:	e008      	b.n	801335c <tcp_process+0x750>
    break;
 801334a:	bf00      	nop
 801334c:	e006      	b.n	801335c <tcp_process+0x750>
    break;
 801334e:	bf00      	nop
 8013350:	e004      	b.n	801335c <tcp_process+0x750>
    break;
 8013352:	bf00      	nop
 8013354:	e002      	b.n	801335c <tcp_process+0x750>
    break;
 8013356:	bf00      	nop
 8013358:	e000      	b.n	801335c <tcp_process+0x750>
    break;
 801335a:	bf00      	nop
  }
  return ERR_OK;
 801335c:	2300      	movs	r3, #0
}
 801335e:	4618      	mov	r0, r3
 8013360:	3720      	adds	r7, #32
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	200040e0 	.word	0x200040e0
 801336c:	200040d8 	.word	0x200040d8
 8013370:	200040e1 	.word	0x200040e1
 8013374:	200079b0 	.word	0x200079b0
 8013378:	200079ac 	.word	0x200079ac
 801337c:	200079c0 	.word	0x200079c0

08013380 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013380:	b590      	push	{r4, r7, lr}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	899b      	ldrh	r3, [r3, #12]
 8013390:	b29b      	uxth	r3, r3
 8013392:	4618      	mov	r0, r3
 8013394:	f7fb fe16 	bl	800efc4 <lwip_htons>
 8013398:	4603      	mov	r3, r0
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d027      	beq.n	80133f2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80133a2:	6838      	ldr	r0, [r7, #0]
 80133a4:	f7fe fb2d 	bl	8011a02 <tcp_segs_free>
    next = NULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	603b      	str	r3, [r7, #0]
 80133ac:	e055      	b.n	801345a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	899b      	ldrh	r3, [r3, #12]
 80133b4:	b29b      	uxth	r3, r3
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fb fe04 	bl	800efc4 <lwip_htons>
 80133bc:	4603      	mov	r3, r0
 80133be:	f003 0301 	and.w	r3, r3, #1
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d00d      	beq.n	80133e2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	899b      	ldrh	r3, [r3, #12]
 80133cc:	b29c      	uxth	r4, r3
 80133ce:	2001      	movs	r0, #1
 80133d0:	f7fb fdf8 	bl	800efc4 <lwip_htons>
 80133d4:	4603      	mov	r3, r0
 80133d6:	461a      	mov	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	4322      	orrs	r2, r4
 80133de:	b292      	uxth	r2, r2
 80133e0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f7fe fb1c 	bl	8011a2a <tcp_seg_free>
    while (next &&
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d00e      	beq.n	8013416 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	891b      	ldrh	r3, [r3, #8]
 80133fc:	461a      	mov	r2, r3
 80133fe:	4b1a      	ldr	r3, [pc, #104]	; (8013468 <tcp_oos_insert_segment+0xe8>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	441a      	add	r2, r3
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	6839      	ldr	r1, [r7, #0]
 801340c:	8909      	ldrh	r1, [r1, #8]
 801340e:	440b      	add	r3, r1
 8013410:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013412:	2b00      	cmp	r3, #0
 8013414:	dacb      	bge.n	80133ae <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d01e      	beq.n	801345a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	891b      	ldrh	r3, [r3, #8]
 8013420:	461a      	mov	r2, r3
 8013422:	4b11      	ldr	r3, [pc, #68]	; (8013468 <tcp_oos_insert_segment+0xe8>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	441a      	add	r2, r3
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013430:	2b00      	cmp	r3, #0
 8013432:	dd12      	ble.n	801345a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	b29a      	uxth	r2, r3
 801343c:	4b0a      	ldr	r3, [pc, #40]	; (8013468 <tcp_oos_insert_segment+0xe8>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	b29b      	uxth	r3, r3
 8013442:	1ad3      	subs	r3, r2, r3
 8013444:	b29a      	uxth	r2, r3
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	685a      	ldr	r2, [r3, #4]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	891b      	ldrh	r3, [r3, #8]
 8013452:	4619      	mov	r1, r3
 8013454:	4610      	mov	r0, r2
 8013456:	f7fc fe5b 	bl	8010110 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	683a      	ldr	r2, [r7, #0]
 801345e:	601a      	str	r2, [r3, #0]
}
 8013460:	bf00      	nop
 8013462:	3714      	adds	r7, #20
 8013464:	46bd      	mov	sp, r7
 8013466:	bd90      	pop	{r4, r7, pc}
 8013468:	200040d4 	.word	0x200040d4

0801346c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801346e:	b08d      	sub	sp, #52	; 0x34
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	7d1b      	ldrb	r3, [r3, #20]
 801347c:	2b03      	cmp	r3, #3
 801347e:	d806      	bhi.n	801348e <tcp_receive+0x22>
 8013480:	4ba6      	ldr	r3, [pc, #664]	; (801371c <tcp_receive+0x2b0>)
 8013482:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8013486:	49a6      	ldr	r1, [pc, #664]	; (8013720 <tcp_receive+0x2b4>)
 8013488:	48a6      	ldr	r0, [pc, #664]	; (8013724 <tcp_receive+0x2b8>)
 801348a:	f005 fc91 	bl	8018db0 <iprintf>

  if (flags & TCP_ACK) {
 801348e:	4ba6      	ldr	r3, [pc, #664]	; (8013728 <tcp_receive+0x2bc>)
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	f003 0310 	and.w	r3, r3, #16
 8013496:	2b00      	cmp	r3, #0
 8013498:	f000 82bf 	beq.w	8013a1a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80134a2:	461a      	mov	r2, r3
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134a8:	4413      	add	r3, r2
 80134aa:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134b0:	4b9e      	ldr	r3, [pc, #632]	; (801372c <tcp_receive+0x2c0>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	1ad3      	subs	r3, r2, r3
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	db1b      	blt.n	80134f2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134be:	4b9b      	ldr	r3, [pc, #620]	; (801372c <tcp_receive+0x2c0>)
 80134c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d106      	bne.n	80134d4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134ca:	4b99      	ldr	r3, [pc, #612]	; (8013730 <tcp_receive+0x2c4>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	db0e      	blt.n	80134f2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134d8:	4b95      	ldr	r3, [pc, #596]	; (8013730 <tcp_receive+0x2c4>)
 80134da:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80134dc:	429a      	cmp	r2, r3
 80134de:	d141      	bne.n	8013564 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80134e0:	4b94      	ldr	r3, [pc, #592]	; (8013734 <tcp_receive+0x2c8>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	89db      	ldrh	r3, [r3, #14]
 80134e6:	b29a      	uxth	r2, r3
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d938      	bls.n	8013564 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80134f2:	4b90      	ldr	r3, [pc, #576]	; (8013734 <tcp_receive+0x2c8>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	89db      	ldrh	r3, [r3, #14]
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801350c:	429a      	cmp	r2, r3
 801350e:	d205      	bcs.n	801351c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801351c:	4b83      	ldr	r3, [pc, #524]	; (801372c <tcp_receive+0x2c0>)
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8013524:	4b82      	ldr	r3, [pc, #520]	; (8013730 <tcp_receive+0x2c4>)
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013532:	2b00      	cmp	r3, #0
 8013534:	d10d      	bne.n	8013552 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801353c:	2b00      	cmp	r3, #0
 801353e:	d111      	bne.n	8013564 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2200      	movs	r2, #0
 8013544:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2201      	movs	r2, #1
 801354c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8013550:	e008      	b.n	8013564 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013558:	2b00      	cmp	r3, #0
 801355a:	d003      	beq.n	8013564 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2200      	movs	r2, #0
 8013560:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013564:	4b72      	ldr	r3, [pc, #456]	; (8013730 <tcp_receive+0x2c4>)
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801356c:	1ad3      	subs	r3, r2, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	dc53      	bgt.n	801361a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013572:	4b71      	ldr	r3, [pc, #452]	; (8013738 <tcp_receive+0x2cc>)
 8013574:	881b      	ldrh	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d146      	bne.n	8013608 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8013584:	4413      	add	r3, r2
 8013586:	697a      	ldr	r2, [r7, #20]
 8013588:	429a      	cmp	r2, r3
 801358a:	d13d      	bne.n	8013608 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013592:	2b00      	cmp	r3, #0
 8013594:	db38      	blt.n	8013608 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801359a:	4b65      	ldr	r3, [pc, #404]	; (8013730 <tcp_receive+0x2c4>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	429a      	cmp	r2, r3
 80135a0:	d132      	bne.n	8013608 <tcp_receive+0x19c>
              found_dupack = 1;
 80135a2:	2301      	movs	r3, #1
 80135a4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135ac:	2bff      	cmp	r3, #255	; 0xff
 80135ae:	d007      	beq.n	80135c0 <tcp_receive+0x154>
                ++pcb->dupacks;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135b6:	3301      	adds	r3, #1
 80135b8:	b2da      	uxtb	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135c6:	2b03      	cmp	r3, #3
 80135c8:	d916      	bls.n	80135f8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135d4:	4413      	add	r3, r2
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135de:	429a      	cmp	r2, r3
 80135e0:	d912      	bls.n	8013608 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135ec:	4413      	add	r3, r2
 80135ee:	b29a      	uxth	r2, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135f6:	e007      	b.n	8013608 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80135fe:	2b03      	cmp	r3, #3
 8013600:	d102      	bne.n	8013608 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f002 fa2e 	bl	8015a64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	2b00      	cmp	r3, #0
 801360c:	f040 8169 	bne.w	80138e2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2200      	movs	r2, #0
 8013614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013618:	e163      	b.n	80138e2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801361a:	4b45      	ldr	r3, [pc, #276]	; (8013730 <tcp_receive+0x2c4>)
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013622:	1ad3      	subs	r3, r2, r3
 8013624:	3b01      	subs	r3, #1
 8013626:	2b00      	cmp	r3, #0
 8013628:	f2c0 8107 	blt.w	801383a <tcp_receive+0x3ce>
 801362c:	4b40      	ldr	r3, [pc, #256]	; (8013730 <tcp_receive+0x2c4>)
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013634:	1ad3      	subs	r3, r2, r3
 8013636:	2b00      	cmp	r3, #0
 8013638:	f300 80ff 	bgt.w	801383a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	7e9b      	ldrb	r3, [r3, #26]
 8013640:	f003 0304 	and.w	r3, r3, #4
 8013644:	2b00      	cmp	r3, #0
 8013646:	d00c      	beq.n	8013662 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	7e9b      	ldrb	r3, [r3, #26]
 801364c:	f023 0304 	bic.w	r3, r3, #4
 8013650:	b2da      	uxtb	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013670:	10db      	asrs	r3, r3, #3
 8013672:	b21b      	sxth	r3, r3
 8013674:	b29a      	uxth	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801367c:	b29b      	uxth	r3, r3
 801367e:	4413      	add	r3, r2
 8013680:	b29b      	uxth	r3, r3
 8013682:	b21a      	sxth	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2200      	movs	r2, #0
 801368e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013692:	4b27      	ldr	r3, [pc, #156]	; (8013730 <tcp_receive+0x2c4>)
 8013694:	681a      	ldr	r2, [r3, #0]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	7d1b      	ldrb	r3, [r3, #20]
 801369e:	2b03      	cmp	r3, #3
 80136a0:	f240 8094 	bls.w	80137cc <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d216      	bcs.n	80136e2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136be:	4413      	add	r3, r2
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d97f      	bls.n	80137cc <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136d6:	4413      	add	r3, r2
 80136d8:	b29a      	uxth	r2, r3
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80136e0:	e074      	b.n	80137cc <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136ec:	4619      	mov	r1, r3
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136f2:	fb03 f301 	mul.w	r3, r3, r1
 80136f6:	6879      	ldr	r1, [r7, #4]
 80136f8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80136fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8013700:	b29b      	uxth	r3, r3
 8013702:	4413      	add	r3, r2
 8013704:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801370c:	8a7a      	ldrh	r2, [r7, #18]
 801370e:	429a      	cmp	r2, r3
 8013710:	d95c      	bls.n	80137cc <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	8a7a      	ldrh	r2, [r7, #18]
 8013716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801371a:	e057      	b.n	80137cc <tcp_receive+0x360>
 801371c:	0801b4c4 	.word	0x0801b4c4
 8013720:	0801b70c 	.word	0x0801b70c
 8013724:	0801b52c 	.word	0x0801b52c
 8013728:	200040e0 	.word	0x200040e0
 801372c:	200040d4 	.word	0x200040d4
 8013730:	200040d8 	.word	0x200040d8
 8013734:	200040c4 	.word	0x200040c4
 8013738:	200040de 	.word	0x200040de
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013740:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	4618      	mov	r0, r3
 8013758:	f7fc fee8 	bl	801052c <pbuf_clen>
 801375c:	4603      	mov	r3, r0
 801375e:	429c      	cmp	r4, r3
 8013760:	d206      	bcs.n	8013770 <tcp_receive+0x304>
 8013762:	4b70      	ldr	r3, [pc, #448]	; (8013924 <tcp_receive+0x4b8>)
 8013764:	f240 429e 	movw	r2, #1182	; 0x49e
 8013768:	496f      	ldr	r1, [pc, #444]	; (8013928 <tcp_receive+0x4bc>)
 801376a:	4870      	ldr	r0, [pc, #448]	; (801392c <tcp_receive+0x4c0>)
 801376c:	f005 fb20 	bl	8018db0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	f7fc fed9 	bl	801052c <pbuf_clen>
 801377a:	4603      	mov	r3, r0
 801377c:	461a      	mov	r2, r3
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013784:	1a9b      	subs	r3, r3, r2
 8013786:	b29a      	uxth	r2, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 801378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013790:	891a      	ldrh	r2, [r3, #8]
 8013792:	4b67      	ldr	r3, [pc, #412]	; (8013930 <tcp_receive+0x4c4>)
 8013794:	881b      	ldrh	r3, [r3, #0]
 8013796:	4413      	add	r3, r2
 8013798:	b29a      	uxth	r2, r3
 801379a:	4b65      	ldr	r3, [pc, #404]	; (8013930 <tcp_receive+0x4c4>)
 801379c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 801379e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137a0:	f7fe f943 	bl	8011a2a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00e      	beq.n	80137cc <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10a      	bne.n	80137cc <tcp_receive+0x360>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d106      	bne.n	80137cc <tcp_receive+0x360>
 80137be:	4b59      	ldr	r3, [pc, #356]	; (8013924 <tcp_receive+0x4b8>)
 80137c0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80137c4:	495b      	ldr	r1, [pc, #364]	; (8013934 <tcp_receive+0x4c8>)
 80137c6:	4859      	ldr	r0, [pc, #356]	; (801392c <tcp_receive+0x4c0>)
 80137c8:	f005 faf2 	bl	8018db0 <iprintf>
      while (pcb->unacked != NULL &&
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d022      	beq.n	801381a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d8:	68db      	ldr	r3, [r3, #12]
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fb fbff 	bl	800efe0 <lwip_htonl>
 80137e2:	4604      	mov	r4, r0
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137e8:	891b      	ldrh	r3, [r3, #8]
 80137ea:	461d      	mov	r5, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	899b      	ldrh	r3, [r3, #12]
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fb fbe4 	bl	800efc4 <lwip_htons>
 80137fc:	4603      	mov	r3, r0
 80137fe:	f003 0303 	and.w	r3, r3, #3
 8013802:	2b00      	cmp	r3, #0
 8013804:	d001      	beq.n	801380a <tcp_receive+0x39e>
 8013806:	2301      	movs	r3, #1
 8013808:	e000      	b.n	801380c <tcp_receive+0x3a0>
 801380a:	2300      	movs	r3, #0
 801380c:	442b      	add	r3, r5
 801380e:	18e2      	adds	r2, r4, r3
 8013810:	4b49      	ldr	r3, [pc, #292]	; (8013938 <tcp_receive+0x4cc>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013816:	2b00      	cmp	r3, #0
 8013818:	dd90      	ble.n	801373c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381e:	2b00      	cmp	r3, #0
 8013820:	d104      	bne.n	801382c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013828:	861a      	strh	r2, [r3, #48]	; 0x30
 801382a:	e002      	b.n	8013832 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2200      	movs	r2, #0
 8013830:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2200      	movs	r2, #0
 8013836:	76da      	strb	r2, [r3, #27]
 8013838:	e002      	b.n	8013840 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f001 fd30 	bl	80152a0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013840:	e04f      	b.n	80138e2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013846:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013856:	2b00      	cmp	r3, #0
 8013858:	d103      	bne.n	8013862 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	2200      	movs	r2, #0
 801385e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	4618      	mov	r0, r3
 801386e:	f7fc fe5d 	bl	801052c <pbuf_clen>
 8013872:	4603      	mov	r3, r0
 8013874:	429c      	cmp	r4, r3
 8013876:	d206      	bcs.n	8013886 <tcp_receive+0x41a>
 8013878:	4b2a      	ldr	r3, [pc, #168]	; (8013924 <tcp_receive+0x4b8>)
 801387a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801387e:	492a      	ldr	r1, [pc, #168]	; (8013928 <tcp_receive+0x4bc>)
 8013880:	482a      	ldr	r0, [pc, #168]	; (801392c <tcp_receive+0x4c0>)
 8013882:	f005 fa95 	bl	8018db0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8013886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	4618      	mov	r0, r3
 801388c:	f7fc fe4e 	bl	801052c <pbuf_clen>
 8013890:	4603      	mov	r3, r0
 8013892:	461a      	mov	r2, r3
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801389a:	1a9b      	subs	r3, r3, r2
 801389c:	b29a      	uxth	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80138a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a6:	891a      	ldrh	r2, [r3, #8]
 80138a8:	4b21      	ldr	r3, [pc, #132]	; (8013930 <tcp_receive+0x4c4>)
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	4413      	add	r3, r2
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	4b1f      	ldr	r3, [pc, #124]	; (8013930 <tcp_receive+0x4c4>)
 80138b2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80138b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138b6:	f7fe f8b8 	bl	8011a2a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00e      	beq.n	80138e2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10a      	bne.n	80138e2 <tcp_receive+0x476>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d106      	bne.n	80138e2 <tcp_receive+0x476>
 80138d4:	4b13      	ldr	r3, [pc, #76]	; (8013924 <tcp_receive+0x4b8>)
 80138d6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80138da:	4916      	ldr	r1, [pc, #88]	; (8013934 <tcp_receive+0x4c8>)
 80138dc:	4813      	ldr	r0, [pc, #76]	; (801392c <tcp_receive+0x4c0>)
 80138de:	f005 fa67 	bl	8018db0 <iprintf>
    while (pcb->unsent != NULL &&
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d036      	beq.n	8013958 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80138ea:	4b13      	ldr	r3, [pc, #76]	; (8013938 <tcp_receive+0x4cc>)
 80138ec:	681c      	ldr	r4, [r3, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fb fb72 	bl	800efe0 <lwip_htonl>
 80138fc:	4605      	mov	r5, r0
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013902:	891b      	ldrh	r3, [r3, #8]
 8013904:	461e      	mov	r6, r3
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	899b      	ldrh	r3, [r3, #12]
 801390e:	b29b      	uxth	r3, r3
 8013910:	4618      	mov	r0, r3
 8013912:	f7fb fb57 	bl	800efc4 <lwip_htons>
 8013916:	4603      	mov	r3, r0
 8013918:	f003 0303 	and.w	r3, r3, #3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d00d      	beq.n	801393c <tcp_receive+0x4d0>
 8013920:	2301      	movs	r3, #1
 8013922:	e00c      	b.n	801393e <tcp_receive+0x4d2>
 8013924:	0801b4c4 	.word	0x0801b4c4
 8013928:	0801b728 	.word	0x0801b728
 801392c:	0801b52c 	.word	0x0801b52c
 8013930:	200040dc 	.word	0x200040dc
 8013934:	0801b750 	.word	0x0801b750
 8013938:	200040d8 	.word	0x200040d8
 801393c:	2300      	movs	r3, #0
 801393e:	4433      	add	r3, r6
 8013940:	442b      	add	r3, r5
 8013942:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8013944:	2b00      	cmp	r3, #0
 8013946:	db07      	blt.n	8013958 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013948:	4b8d      	ldr	r3, [pc, #564]	; (8013b80 <tcp_receive+0x714>)
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	2b00      	cmp	r3, #0
 8013954:	f77f af75 	ble.w	8013842 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801395e:	4b89      	ldr	r3, [pc, #548]	; (8013b84 <tcp_receive+0x718>)
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	4413      	add	r3, r2
 8013964:	b29a      	uxth	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013970:	2b00      	cmp	r3, #0
 8013972:	d052      	beq.n	8013a1a <tcp_receive+0x5ae>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013978:	4b81      	ldr	r3, [pc, #516]	; (8013b80 <tcp_receive+0x714>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	da4b      	bge.n	8013a1a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013982:	4b81      	ldr	r3, [pc, #516]	; (8013b88 <tcp_receive+0x71c>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	b29a      	uxth	r2, r3
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801398c:	b29b      	uxth	r3, r3
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	b29b      	uxth	r3, r3
 8013992:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8013994:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801399c:	10db      	asrs	r3, r3, #3
 801399e:	b21b      	sxth	r3, r3
 80139a0:	b29b      	uxth	r3, r3
 80139a2:	1ad3      	subs	r3, r2, r3
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139b2:	4413      	add	r3, r2
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	b21a      	sxth	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80139bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	da03      	bge.n	80139cc <tcp_receive+0x560>
        m = -m;
 80139c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139c6:	425b      	negs	r3, r3
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80139cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80139d4:	109b      	asrs	r3, r3, #2
 80139d6:	b21b      	sxth	r3, r3
 80139d8:	b29b      	uxth	r3, r3
 80139da:	1ad3      	subs	r3, r2, r3
 80139dc:	b29b      	uxth	r3, r3
 80139de:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80139e6:	b29a      	uxth	r2, r3
 80139e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139ea:	4413      	add	r3, r2
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	b21a      	sxth	r2, r3
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139fa:	10db      	asrs	r3, r3, #3
 80139fc:	b21b      	sxth	r3, r3
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	4413      	add	r3, r2
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	b21a      	sxth	r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2200      	movs	r2, #0
 8013a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013a1a:	4b5c      	ldr	r3, [pc, #368]	; (8013b8c <tcp_receive+0x720>)
 8013a1c:	881b      	ldrh	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f000 84f1 	beq.w	8014406 <tcp_receive+0xf9a>
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	7d1b      	ldrb	r3, [r3, #20]
 8013a28:	2b06      	cmp	r3, #6
 8013a2a:	f200 84ec 	bhi.w	8014406 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a32:	4b57      	ldr	r3, [pc, #348]	; (8013b90 <tcp_receive+0x724>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	1ad3      	subs	r3, r2, r3
 8013a38:	3b01      	subs	r3, #1
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f2c0 80b8 	blt.w	8013bb0 <tcp_receive+0x744>
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a44:	4b51      	ldr	r3, [pc, #324]	; (8013b8c <tcp_receive+0x720>)
 8013a46:	881b      	ldrh	r3, [r3, #0]
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4b51      	ldr	r3, [pc, #324]	; (8013b90 <tcp_receive+0x724>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	440b      	add	r3, r1
 8013a50:	1ad3      	subs	r3, r2, r3
 8013a52:	3301      	adds	r3, #1
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	f300 80ab 	bgt.w	8013bb0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013a5a:	4b4e      	ldr	r3, [pc, #312]	; (8013b94 <tcp_receive+0x728>)
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a64:	4b4a      	ldr	r3, [pc, #296]	; (8013b90 <tcp_receive+0x724>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013a6c:	4b49      	ldr	r3, [pc, #292]	; (8013b94 <tcp_receive+0x728>)
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d106      	bne.n	8013a82 <tcp_receive+0x616>
 8013a74:	4b48      	ldr	r3, [pc, #288]	; (8013b98 <tcp_receive+0x72c>)
 8013a76:	f240 523c 	movw	r2, #1340	; 0x53c
 8013a7a:	4948      	ldr	r1, [pc, #288]	; (8013b9c <tcp_receive+0x730>)
 8013a7c:	4848      	ldr	r0, [pc, #288]	; (8013ba0 <tcp_receive+0x734>)
 8013a7e:	f005 f997 	bl	8018db0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	dd06      	ble.n	8013a9a <tcp_receive+0x62e>
 8013a8c:	4b42      	ldr	r3, [pc, #264]	; (8013b98 <tcp_receive+0x72c>)
 8013a8e:	f240 523d 	movw	r2, #1341	; 0x53d
 8013a92:	4944      	ldr	r1, [pc, #272]	; (8013ba4 <tcp_receive+0x738>)
 8013a94:	4842      	ldr	r0, [pc, #264]	; (8013ba0 <tcp_receive+0x734>)
 8013a96:	f005 f98b 	bl	8018db0 <iprintf>
      if (inseg.p->len < off) {
 8013a9a:	4b3e      	ldr	r3, [pc, #248]	; (8013b94 <tcp_receive+0x728>)
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	895b      	ldrh	r3, [r3, #10]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	dd3e      	ble.n	8013b26 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013aa8:	4b3a      	ldr	r3, [pc, #232]	; (8013b94 <tcp_receive+0x728>)
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	891b      	ldrh	r3, [r3, #8]
 8013aae:	461a      	mov	r2, r3
 8013ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	dd06      	ble.n	8013ac4 <tcp_receive+0x658>
 8013ab6:	4b38      	ldr	r3, [pc, #224]	; (8013b98 <tcp_receive+0x72c>)
 8013ab8:	f240 523f 	movw	r2, #1343	; 0x53f
 8013abc:	493a      	ldr	r1, [pc, #232]	; (8013ba8 <tcp_receive+0x73c>)
 8013abe:	4838      	ldr	r0, [pc, #224]	; (8013ba0 <tcp_receive+0x734>)
 8013ac0:	f005 f976 	bl	8018db0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013ac4:	4b33      	ldr	r3, [pc, #204]	; (8013b94 <tcp_receive+0x728>)
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	891a      	ldrh	r2, [r3, #8]
 8013aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013acc:	b29b      	uxth	r3, r3
 8013ace:	1ad3      	subs	r3, r2, r3
 8013ad0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8013ad2:	e00e      	b.n	8013af2 <tcp_receive+0x686>
          off -= p->len;
 8013ad4:	69bb      	ldr	r3, [r7, #24]
 8013ad6:	895b      	ldrh	r3, [r3, #10]
 8013ad8:	461a      	mov	r2, r3
 8013ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013adc:	1a9b      	subs	r3, r3, r2
 8013ade:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8013ae0:	69bb      	ldr	r3, [r7, #24]
 8013ae2:	8a3a      	ldrh	r2, [r7, #16]
 8013ae4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8013ae6:	69bb      	ldr	r3, [r7, #24]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8013aec:	69bb      	ldr	r3, [r7, #24]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	895b      	ldrh	r3, [r3, #10]
 8013af6:	461a      	mov	r2, r3
 8013af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afa:	4293      	cmp	r3, r2
 8013afc:	dcea      	bgt.n	8013ad4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	425b      	negs	r3, r3
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	b21b      	sxth	r3, r3
 8013b08:	4619      	mov	r1, r3
 8013b0a:	69b8      	ldr	r0, [r7, #24]
 8013b0c:	f7fc fc50 	bl	80103b0 <pbuf_header>
 8013b10:	4603      	mov	r3, r0
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d01c      	beq.n	8013b50 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013b16:	4b20      	ldr	r3, [pc, #128]	; (8013b98 <tcp_receive+0x72c>)
 8013b18:	f240 524c 	movw	r2, #1356	; 0x54c
 8013b1c:	4923      	ldr	r1, [pc, #140]	; (8013bac <tcp_receive+0x740>)
 8013b1e:	4820      	ldr	r0, [pc, #128]	; (8013ba0 <tcp_receive+0x734>)
 8013b20:	f005 f946 	bl	8018db0 <iprintf>
 8013b24:	e014      	b.n	8013b50 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8013b26:	4b1b      	ldr	r3, [pc, #108]	; (8013b94 <tcp_receive+0x728>)
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b2c:	b292      	uxth	r2, r2
 8013b2e:	4252      	negs	r2, r2
 8013b30:	b292      	uxth	r2, r2
 8013b32:	b212      	sxth	r2, r2
 8013b34:	4611      	mov	r1, r2
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fc fc3a 	bl	80103b0 <pbuf_header>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d006      	beq.n	8013b50 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013b42:	4b15      	ldr	r3, [pc, #84]	; (8013b98 <tcp_receive+0x72c>)
 8013b44:	f240 5251 	movw	r2, #1361	; 0x551
 8013b48:	4918      	ldr	r1, [pc, #96]	; (8013bac <tcp_receive+0x740>)
 8013b4a:	4815      	ldr	r0, [pc, #84]	; (8013ba0 <tcp_receive+0x734>)
 8013b4c:	f005 f930 	bl	8018db0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8013b50:	4b10      	ldr	r3, [pc, #64]	; (8013b94 <tcp_receive+0x728>)
 8013b52:	891a      	ldrh	r2, [r3, #8]
 8013b54:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <tcp_receive+0x724>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	b299      	uxth	r1, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	1acb      	subs	r3, r1, r3
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	4413      	add	r3, r2
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	4b0a      	ldr	r3, [pc, #40]	; (8013b94 <tcp_receive+0x728>)
 8013b6a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b70:	4a07      	ldr	r2, [pc, #28]	; (8013b90 <tcp_receive+0x724>)
 8013b72:	6013      	str	r3, [r2, #0]
 8013b74:	4b07      	ldr	r3, [pc, #28]	; (8013b94 <tcp_receive+0x728>)
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	4a05      	ldr	r2, [pc, #20]	; (8013b90 <tcp_receive+0x724>)
 8013b7a:	6812      	ldr	r2, [r2, #0]
 8013b7c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013b7e:	e025      	b.n	8013bcc <tcp_receive+0x760>
 8013b80:	200040d8 	.word	0x200040d8
 8013b84:	200040dc 	.word	0x200040dc
 8013b88:	200079b4 	.word	0x200079b4
 8013b8c:	200040de 	.word	0x200040de
 8013b90:	200040d4 	.word	0x200040d4
 8013b94:	200040b4 	.word	0x200040b4
 8013b98:	0801b4c4 	.word	0x0801b4c4
 8013b9c:	0801b770 	.word	0x0801b770
 8013ba0:	0801b52c 	.word	0x0801b52c
 8013ba4:	0801b780 	.word	0x0801b780
 8013ba8:	0801b790 	.word	0x0801b790
 8013bac:	0801b7a0 	.word	0x0801b7a0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013bb0:	4b87      	ldr	r3, [pc, #540]	; (8013dd0 <tcp_receive+0x964>)
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb8:	1ad3      	subs	r3, r2, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	da06      	bge.n	8013bcc <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	7e9b      	ldrb	r3, [r3, #26]
 8013bc2:	f043 0302 	orr.w	r3, r3, #2
 8013bc6:	b2da      	uxtb	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013bcc:	4b80      	ldr	r3, [pc, #512]	; (8013dd0 <tcp_receive+0x964>)
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd4:	1ad3      	subs	r3, r2, r3
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	f2c0 8410 	blt.w	80143fc <tcp_receive+0xf90>
 8013bdc:	4b7c      	ldr	r3, [pc, #496]	; (8013dd0 <tcp_receive+0x964>)
 8013bde:	681a      	ldr	r2, [r3, #0]
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be4:	6879      	ldr	r1, [r7, #4]
 8013be6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013be8:	440b      	add	r3, r1
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	3301      	adds	r3, #1
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f300 8404 	bgt.w	80143fc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013bf8:	4b75      	ldr	r3, [pc, #468]	; (8013dd0 <tcp_receive+0x964>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	f040 8287 	bne.w	8014110 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013c02:	4b74      	ldr	r3, [pc, #464]	; (8013dd4 <tcp_receive+0x968>)
 8013c04:	891c      	ldrh	r4, [r3, #8]
 8013c06:	4b73      	ldr	r3, [pc, #460]	; (8013dd4 <tcp_receive+0x968>)
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	899b      	ldrh	r3, [r3, #12]
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fb f9d8 	bl	800efc4 <lwip_htons>
 8013c14:	4603      	mov	r3, r0
 8013c16:	f003 0303 	and.w	r3, r3, #3
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d001      	beq.n	8013c22 <tcp_receive+0x7b6>
 8013c1e:	2301      	movs	r3, #1
 8013c20:	e000      	b.n	8013c24 <tcp_receive+0x7b8>
 8013c22:	2300      	movs	r3, #0
 8013c24:	4423      	add	r3, r4
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	4b6b      	ldr	r3, [pc, #428]	; (8013dd8 <tcp_receive+0x96c>)
 8013c2a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c30:	4b69      	ldr	r3, [pc, #420]	; (8013dd8 <tcp_receive+0x96c>)
 8013c32:	881b      	ldrh	r3, [r3, #0]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d26e      	bcs.n	8013d16 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c38:	4b66      	ldr	r3, [pc, #408]	; (8013dd4 <tcp_receive+0x968>)
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	899b      	ldrh	r3, [r3, #12]
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fb f9bf 	bl	800efc4 <lwip_htons>
 8013c46:	4603      	mov	r3, r0
 8013c48:	f003 0301 	and.w	r3, r3, #1
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d01b      	beq.n	8013c88 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013c50:	4b60      	ldr	r3, [pc, #384]	; (8013dd4 <tcp_receive+0x968>)
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	899b      	ldrh	r3, [r3, #12]
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c5c:	b29c      	uxth	r4, r3
 8013c5e:	4b5d      	ldr	r3, [pc, #372]	; (8013dd4 <tcp_receive+0x968>)
 8013c60:	68db      	ldr	r3, [r3, #12]
 8013c62:	899b      	ldrh	r3, [r3, #12]
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7fb f9ac 	bl	800efc4 <lwip_htons>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7fb f9a5 	bl	800efc4 <lwip_htons>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	4b55      	ldr	r3, [pc, #340]	; (8013dd4 <tcp_receive+0x968>)
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	4322      	orrs	r2, r4
 8013c84:	b292      	uxth	r2, r2
 8013c86:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c8c:	4b51      	ldr	r3, [pc, #324]	; (8013dd4 <tcp_receive+0x968>)
 8013c8e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013c90:	4b50      	ldr	r3, [pc, #320]	; (8013dd4 <tcp_receive+0x968>)
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	899b      	ldrh	r3, [r3, #12]
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7fb f993 	bl	800efc4 <lwip_htons>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	f003 0302 	and.w	r3, r3, #2
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d005      	beq.n	8013cb4 <tcp_receive+0x848>
            inseg.len -= 1;
 8013ca8:	4b4a      	ldr	r3, [pc, #296]	; (8013dd4 <tcp_receive+0x968>)
 8013caa:	891b      	ldrh	r3, [r3, #8]
 8013cac:	3b01      	subs	r3, #1
 8013cae:	b29a      	uxth	r2, r3
 8013cb0:	4b48      	ldr	r3, [pc, #288]	; (8013dd4 <tcp_receive+0x968>)
 8013cb2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013cb4:	4b47      	ldr	r3, [pc, #284]	; (8013dd4 <tcp_receive+0x968>)
 8013cb6:	685a      	ldr	r2, [r3, #4]
 8013cb8:	4b46      	ldr	r3, [pc, #280]	; (8013dd4 <tcp_receive+0x968>)
 8013cba:	891b      	ldrh	r3, [r3, #8]
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	4610      	mov	r0, r2
 8013cc0:	f7fc fa26 	bl	8010110 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013cc4:	4b43      	ldr	r3, [pc, #268]	; (8013dd4 <tcp_receive+0x968>)
 8013cc6:	891c      	ldrh	r4, [r3, #8]
 8013cc8:	4b42      	ldr	r3, [pc, #264]	; (8013dd4 <tcp_receive+0x968>)
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	899b      	ldrh	r3, [r3, #12]
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fb f977 	bl	800efc4 <lwip_htons>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	f003 0303 	and.w	r3, r3, #3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d001      	beq.n	8013ce4 <tcp_receive+0x878>
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	e000      	b.n	8013ce6 <tcp_receive+0x87a>
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	4423      	add	r3, r4
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	4b3b      	ldr	r3, [pc, #236]	; (8013dd8 <tcp_receive+0x96c>)
 8013cec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013cee:	4b3a      	ldr	r3, [pc, #232]	; (8013dd8 <tcp_receive+0x96c>)
 8013cf0:	881b      	ldrh	r3, [r3, #0]
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	4b36      	ldr	r3, [pc, #216]	; (8013dd0 <tcp_receive+0x964>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	441a      	add	r2, r3
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cfe:	6879      	ldr	r1, [r7, #4]
 8013d00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d02:	440b      	add	r3, r1
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d006      	beq.n	8013d16 <tcp_receive+0x8aa>
 8013d08:	4b34      	ldr	r3, [pc, #208]	; (8013ddc <tcp_receive+0x970>)
 8013d0a:	f240 527f 	movw	r2, #1407	; 0x57f
 8013d0e:	4934      	ldr	r1, [pc, #208]	; (8013de0 <tcp_receive+0x974>)
 8013d10:	4834      	ldr	r0, [pc, #208]	; (8013de4 <tcp_receive+0x978>)
 8013d12:	f005 f84d 	bl	8018db0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	f000 80e1 	beq.w	8013ee2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d20:	4b2c      	ldr	r3, [pc, #176]	; (8013dd4 <tcp_receive+0x968>)
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	899b      	ldrh	r3, [r3, #12]
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fb f94b 	bl	800efc4 <lwip_htons>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	f003 0301 	and.w	r3, r3, #1
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d010      	beq.n	8013d5a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013d38:	e00a      	b.n	8013d50 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d3e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8013d4a:	68b8      	ldr	r0, [r7, #8]
 8013d4c:	f7fd fe6d 	bl	8011a2a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d1f0      	bne.n	8013d3a <tcp_receive+0x8ce>
 8013d58:	e0c3      	b.n	8013ee2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013d60:	e04f      	b.n	8013e02 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	68db      	ldr	r3, [r3, #12]
 8013d66:	899b      	ldrh	r3, [r3, #12]
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7fb f92a 	bl	800efc4 <lwip_htons>
 8013d70:	4603      	mov	r3, r0
 8013d72:	f003 0301 	and.w	r3, r3, #1
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d03b      	beq.n	8013df2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013d7a:	4b16      	ldr	r3, [pc, #88]	; (8013dd4 <tcp_receive+0x968>)
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	899b      	ldrh	r3, [r3, #12]
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fb f91e 	bl	800efc4 <lwip_htons>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d12f      	bne.n	8013df2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013d92:	4b10      	ldr	r3, [pc, #64]	; (8013dd4 <tcp_receive+0x968>)
 8013d94:	68db      	ldr	r3, [r3, #12]
 8013d96:	899b      	ldrh	r3, [r3, #12]
 8013d98:	b29c      	uxth	r4, r3
 8013d9a:	2001      	movs	r0, #1
 8013d9c:	f7fb f912 	bl	800efc4 <lwip_htons>
 8013da0:	4603      	mov	r3, r0
 8013da2:	461a      	mov	r2, r3
 8013da4:	4b0b      	ldr	r3, [pc, #44]	; (8013dd4 <tcp_receive+0x968>)
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	4322      	orrs	r2, r4
 8013daa:	b292      	uxth	r2, r2
 8013dac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013dae:	4b09      	ldr	r3, [pc, #36]	; (8013dd4 <tcp_receive+0x968>)
 8013db0:	891c      	ldrh	r4, [r3, #8]
 8013db2:	4b08      	ldr	r3, [pc, #32]	; (8013dd4 <tcp_receive+0x968>)
 8013db4:	68db      	ldr	r3, [r3, #12]
 8013db6:	899b      	ldrh	r3, [r3, #12]
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7fb f902 	bl	800efc4 <lwip_htons>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	f003 0303 	and.w	r3, r3, #3
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d00e      	beq.n	8013de8 <tcp_receive+0x97c>
 8013dca:	2301      	movs	r3, #1
 8013dcc:	e00d      	b.n	8013dea <tcp_receive+0x97e>
 8013dce:	bf00      	nop
 8013dd0:	200040d4 	.word	0x200040d4
 8013dd4:	200040b4 	.word	0x200040b4
 8013dd8:	200040de 	.word	0x200040de
 8013ddc:	0801b4c4 	.word	0x0801b4c4
 8013de0:	0801b7b4 	.word	0x0801b7b4
 8013de4:	0801b52c 	.word	0x0801b52c
 8013de8:	2300      	movs	r3, #0
 8013dea:	4423      	add	r3, r4
 8013dec:	b29a      	uxth	r2, r3
 8013dee:	4b95      	ldr	r3, [pc, #596]	; (8014044 <tcp_receive+0xbd8>)
 8013df0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8013df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8013dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dfe:	f7fd fe14 	bl	8011a2a <tcp_seg_free>
            while (next &&
 8013e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d00e      	beq.n	8013e26 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013e08:	4b8e      	ldr	r3, [pc, #568]	; (8014044 <tcp_receive+0xbd8>)
 8013e0a:	881b      	ldrh	r3, [r3, #0]
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	4b8e      	ldr	r3, [pc, #568]	; (8014048 <tcp_receive+0xbdc>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	441a      	add	r2, r3
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	68db      	ldr	r3, [r3, #12]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e1c:	8909      	ldrh	r1, [r1, #8]
 8013e1e:	440b      	add	r3, r1
 8013e20:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	da9d      	bge.n	8013d62 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d057      	beq.n	8013edc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8013e2c:	4b85      	ldr	r3, [pc, #532]	; (8014044 <tcp_receive+0xbd8>)
 8013e2e:	881b      	ldrh	r3, [r3, #0]
 8013e30:	461a      	mov	r2, r3
 8013e32:	4b85      	ldr	r3, [pc, #532]	; (8014048 <tcp_receive+0xbdc>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	441a      	add	r2, r3
 8013e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dd4b      	ble.n	8013edc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	4b7e      	ldr	r3, [pc, #504]	; (8014048 <tcp_receive+0xbdc>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	4b7d      	ldr	r3, [pc, #500]	; (801404c <tcp_receive+0xbe0>)
 8013e58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013e5a:	4b7c      	ldr	r3, [pc, #496]	; (801404c <tcp_receive+0xbe0>)
 8013e5c:	68db      	ldr	r3, [r3, #12]
 8013e5e:	899b      	ldrh	r3, [r3, #12]
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fb f8ae 	bl	800efc4 <lwip_htons>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	f003 0302 	and.w	r3, r3, #2
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d005      	beq.n	8013e7e <tcp_receive+0xa12>
                inseg.len -= 1;
 8013e72:	4b76      	ldr	r3, [pc, #472]	; (801404c <tcp_receive+0xbe0>)
 8013e74:	891b      	ldrh	r3, [r3, #8]
 8013e76:	3b01      	subs	r3, #1
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	4b74      	ldr	r3, [pc, #464]	; (801404c <tcp_receive+0xbe0>)
 8013e7c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013e7e:	4b73      	ldr	r3, [pc, #460]	; (801404c <tcp_receive+0xbe0>)
 8013e80:	685a      	ldr	r2, [r3, #4]
 8013e82:	4b72      	ldr	r3, [pc, #456]	; (801404c <tcp_receive+0xbe0>)
 8013e84:	891b      	ldrh	r3, [r3, #8]
 8013e86:	4619      	mov	r1, r3
 8013e88:	4610      	mov	r0, r2
 8013e8a:	f7fc f941 	bl	8010110 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013e8e:	4b6f      	ldr	r3, [pc, #444]	; (801404c <tcp_receive+0xbe0>)
 8013e90:	891c      	ldrh	r4, [r3, #8]
 8013e92:	4b6e      	ldr	r3, [pc, #440]	; (801404c <tcp_receive+0xbe0>)
 8013e94:	68db      	ldr	r3, [r3, #12]
 8013e96:	899b      	ldrh	r3, [r3, #12]
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fb f892 	bl	800efc4 <lwip_htons>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	f003 0303 	and.w	r3, r3, #3
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d001      	beq.n	8013eae <tcp_receive+0xa42>
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e000      	b.n	8013eb0 <tcp_receive+0xa44>
 8013eae:	2300      	movs	r3, #0
 8013eb0:	4423      	add	r3, r4
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	4b63      	ldr	r3, [pc, #396]	; (8014044 <tcp_receive+0xbd8>)
 8013eb6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013eb8:	4b62      	ldr	r3, [pc, #392]	; (8014044 <tcp_receive+0xbd8>)
 8013eba:	881b      	ldrh	r3, [r3, #0]
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	4b62      	ldr	r3, [pc, #392]	; (8014048 <tcp_receive+0xbdc>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	441a      	add	r2, r3
 8013ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d006      	beq.n	8013edc <tcp_receive+0xa70>
 8013ece:	4b60      	ldr	r3, [pc, #384]	; (8014050 <tcp_receive+0xbe4>)
 8013ed0:	f240 52af 	movw	r2, #1455	; 0x5af
 8013ed4:	495f      	ldr	r1, [pc, #380]	; (8014054 <tcp_receive+0xbe8>)
 8013ed6:	4860      	ldr	r0, [pc, #384]	; (8014058 <tcp_receive+0xbec>)
 8013ed8:	f004 ff6a 	bl	8018db0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ee0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013ee2:	4b58      	ldr	r3, [pc, #352]	; (8014044 <tcp_receive+0xbd8>)
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	4b57      	ldr	r3, [pc, #348]	; (8014048 <tcp_receive+0xbdc>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	441a      	add	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ef6:	4b53      	ldr	r3, [pc, #332]	; (8014044 <tcp_receive+0xbd8>)
 8013ef8:	881b      	ldrh	r3, [r3, #0]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d206      	bcs.n	8013f0c <tcp_receive+0xaa0>
 8013efe:	4b54      	ldr	r3, [pc, #336]	; (8014050 <tcp_receive+0xbe4>)
 8013f00:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013f04:	4955      	ldr	r1, [pc, #340]	; (801405c <tcp_receive+0xbf0>)
 8013f06:	4854      	ldr	r0, [pc, #336]	; (8014058 <tcp_receive+0xbec>)
 8013f08:	f004 ff52 	bl	8018db0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f10:	4b4c      	ldr	r3, [pc, #304]	; (8014044 <tcp_receive+0xbd8>)
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	1ad3      	subs	r3, r2, r3
 8013f16:	b29a      	uxth	r2, r3
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7fd f8f7 	bl	8011110 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013f22:	4b4a      	ldr	r3, [pc, #296]	; (801404c <tcp_receive+0xbe0>)
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	891b      	ldrh	r3, [r3, #8]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d006      	beq.n	8013f3a <tcp_receive+0xace>
          recv_data = inseg.p;
 8013f2c:	4b47      	ldr	r3, [pc, #284]	; (801404c <tcp_receive+0xbe0>)
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	4a4b      	ldr	r2, [pc, #300]	; (8014060 <tcp_receive+0xbf4>)
 8013f32:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013f34:	4b45      	ldr	r3, [pc, #276]	; (801404c <tcp_receive+0xbe0>)
 8013f36:	2200      	movs	r2, #0
 8013f38:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f3a:	4b44      	ldr	r3, [pc, #272]	; (801404c <tcp_receive+0xbe0>)
 8013f3c:	68db      	ldr	r3, [r3, #12]
 8013f3e:	899b      	ldrh	r3, [r3, #12]
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fb f83e 	bl	800efc4 <lwip_htons>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	f003 0301 	and.w	r3, r3, #1
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 80b4 	beq.w	80140bc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013f54:	4b43      	ldr	r3, [pc, #268]	; (8014064 <tcp_receive+0xbf8>)
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	f043 0320 	orr.w	r3, r3, #32
 8013f5c:	b2da      	uxtb	r2, r3
 8013f5e:	4b41      	ldr	r3, [pc, #260]	; (8014064 <tcp_receive+0xbf8>)
 8013f60:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013f62:	e0ab      	b.n	80140bc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f68:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	4a35      	ldr	r2, [pc, #212]	; (8014048 <tcp_receive+0xbdc>)
 8013f74:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	891b      	ldrh	r3, [r3, #8]
 8013f7a:	461c      	mov	r4, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	899b      	ldrh	r3, [r3, #12]
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fb f81d 	bl	800efc4 <lwip_htons>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	f003 0303 	and.w	r3, r3, #3
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d001      	beq.n	8013f98 <tcp_receive+0xb2c>
 8013f94:	2301      	movs	r3, #1
 8013f96:	e000      	b.n	8013f9a <tcp_receive+0xb2e>
 8013f98:	2300      	movs	r3, #0
 8013f9a:	191a      	adds	r2, r3, r4
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa0:	441a      	add	r2, r3
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013faa:	461c      	mov	r4, r3
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	891b      	ldrh	r3, [r3, #8]
 8013fb0:	461d      	mov	r5, r3
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	899b      	ldrh	r3, [r3, #12]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fb f802 	bl	800efc4 <lwip_htons>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	f003 0303 	and.w	r3, r3, #3
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d001      	beq.n	8013fce <tcp_receive+0xb62>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e000      	b.n	8013fd0 <tcp_receive+0xb64>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	442b      	add	r3, r5
 8013fd2:	429c      	cmp	r4, r3
 8013fd4:	d206      	bcs.n	8013fe4 <tcp_receive+0xb78>
 8013fd6:	4b1e      	ldr	r3, [pc, #120]	; (8014050 <tcp_receive+0xbe4>)
 8013fd8:	f240 52de 	movw	r2, #1502	; 0x5de
 8013fdc:	4922      	ldr	r1, [pc, #136]	; (8014068 <tcp_receive+0xbfc>)
 8013fde:	481e      	ldr	r0, [pc, #120]	; (8014058 <tcp_receive+0xbec>)
 8013fe0:	f004 fee6 	bl	8018db0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	891b      	ldrh	r3, [r3, #8]
 8013fe8:	461c      	mov	r4, r3
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	899b      	ldrh	r3, [r3, #12]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fa ffe6 	bl	800efc4 <lwip_htons>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	f003 0303 	and.w	r3, r3, #3
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <tcp_receive+0xb9a>
 8014002:	2301      	movs	r3, #1
 8014004:	e000      	b.n	8014008 <tcp_receive+0xb9c>
 8014006:	2300      	movs	r3, #0
 8014008:	1919      	adds	r1, r3, r4
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801400e:	b28b      	uxth	r3, r1
 8014010:	1ad3      	subs	r3, r2, r3
 8014012:	b29a      	uxth	r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f7fd f879 	bl	8011110 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	891b      	ldrh	r3, [r3, #8]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d028      	beq.n	801407a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014028:	4b0d      	ldr	r3, [pc, #52]	; (8014060 <tcp_receive+0xbf4>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d01d      	beq.n	801406c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8014030:	4b0b      	ldr	r3, [pc, #44]	; (8014060 <tcp_receive+0xbf4>)
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	4619      	mov	r1, r3
 801403a:	4610      	mov	r0, r2
 801403c:	f7fc fab6 	bl	80105ac <pbuf_cat>
 8014040:	e018      	b.n	8014074 <tcp_receive+0xc08>
 8014042:	bf00      	nop
 8014044:	200040de 	.word	0x200040de
 8014048:	200040d4 	.word	0x200040d4
 801404c:	200040b4 	.word	0x200040b4
 8014050:	0801b4c4 	.word	0x0801b4c4
 8014054:	0801b7ec 	.word	0x0801b7ec
 8014058:	0801b52c 	.word	0x0801b52c
 801405c:	0801b828 	.word	0x0801b828
 8014060:	200040e4 	.word	0x200040e4
 8014064:	200040e1 	.word	0x200040e1
 8014068:	0801b848 	.word	0x0801b848
            } else {
              recv_data = cseg->p;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	4a71      	ldr	r2, [pc, #452]	; (8014238 <tcp_receive+0xdcc>)
 8014072:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2200      	movs	r2, #0
 8014078:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	899b      	ldrh	r3, [r3, #12]
 8014080:	b29b      	uxth	r3, r3
 8014082:	4618      	mov	r0, r3
 8014084:	f7fa ff9e 	bl	800efc4 <lwip_htons>
 8014088:	4603      	mov	r3, r0
 801408a:	f003 0301 	and.w	r3, r3, #1
 801408e:	2b00      	cmp	r3, #0
 8014090:	d00d      	beq.n	80140ae <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014092:	4b6a      	ldr	r3, [pc, #424]	; (801423c <tcp_receive+0xdd0>)
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	f043 0320 	orr.w	r3, r3, #32
 801409a:	b2da      	uxtb	r2, r3
 801409c:	4b67      	ldr	r3, [pc, #412]	; (801423c <tcp_receive+0xdd0>)
 801409e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	7d1b      	ldrb	r3, [r3, #20]
 80140a4:	2b04      	cmp	r3, #4
 80140a6:	d102      	bne.n	80140ae <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2207      	movs	r2, #7
 80140ac:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f7fd fcb7 	bl	8011a2a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d008      	beq.n	80140d6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c8:	68db      	ldr	r3, [r3, #12]
 80140ca:	685a      	ldr	r2, [r3, #4]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80140d0:	429a      	cmp	r2, r3
 80140d2:	f43f af47 	beq.w	8013f64 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	7e9b      	ldrb	r3, [r3, #26]
 80140da:	f003 0301 	and.w	r3, r3, #1
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00e      	beq.n	8014100 <tcp_receive+0xc94>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	7e9b      	ldrb	r3, [r3, #26]
 80140e6:	f023 0301 	bic.w	r3, r3, #1
 80140ea:	b2da      	uxtb	r2, r3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	769a      	strb	r2, [r3, #26]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	7e9b      	ldrb	r3, [r3, #26]
 80140f4:	f043 0302 	orr.w	r3, r3, #2
 80140f8:	b2da      	uxtb	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80140fe:	e181      	b.n	8014404 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	7e9b      	ldrb	r3, [r3, #26]
 8014104:	f043 0301 	orr.w	r3, r3, #1
 8014108:	b2da      	uxtb	r2, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801410e:	e179      	b.n	8014404 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f001 f8c5 	bl	80152a0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801411a:	2b00      	cmp	r3, #0
 801411c:	d106      	bne.n	801412c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801411e:	4848      	ldr	r0, [pc, #288]	; (8014240 <tcp_receive+0xdd4>)
 8014120:	f7fd fc9b 	bl	8011a5a <tcp_seg_copy>
 8014124:	4602      	mov	r2, r0
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801412a:	e16b      	b.n	8014404 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801412c:	2300      	movs	r3, #0
 801412e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014136:	e150      	b.n	80143da <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8014138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	685a      	ldr	r2, [r3, #4]
 801413e:	4b41      	ldr	r3, [pc, #260]	; (8014244 <tcp_receive+0xdd8>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	429a      	cmp	r2, r3
 8014144:	d11d      	bne.n	8014182 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014146:	4b3e      	ldr	r3, [pc, #248]	; (8014240 <tcp_receive+0xdd4>)
 8014148:	891a      	ldrh	r2, [r3, #8]
 801414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414c:	891b      	ldrh	r3, [r3, #8]
 801414e:	429a      	cmp	r2, r3
 8014150:	f240 8148 	bls.w	80143e4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8014154:	483a      	ldr	r0, [pc, #232]	; (8014240 <tcp_receive+0xdd4>)
 8014156:	f7fd fc80 	bl	8011a5a <tcp_seg_copy>
 801415a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2b00      	cmp	r3, #0
 8014160:	f000 8142 	beq.w	80143e8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8014164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014166:	2b00      	cmp	r3, #0
 8014168:	d003      	beq.n	8014172 <tcp_receive+0xd06>
                    prev->next = cseg;
 801416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416c:	68fa      	ldr	r2, [r7, #12]
 801416e:	601a      	str	r2, [r3, #0]
 8014170:	e002      	b.n	8014178 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	68fa      	ldr	r2, [r7, #12]
 8014176:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801417a:	68f8      	ldr	r0, [r7, #12]
 801417c:	f7ff f900 	bl	8013380 <tcp_oos_insert_segment>
                }
                break;
 8014180:	e132      	b.n	80143e8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014184:	2b00      	cmp	r3, #0
 8014186:	d117      	bne.n	80141b8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014188:	4b2e      	ldr	r3, [pc, #184]	; (8014244 <tcp_receive+0xdd8>)
 801418a:	681a      	ldr	r2, [r3, #0]
 801418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	2b00      	cmp	r3, #0
 8014196:	da57      	bge.n	8014248 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8014198:	4829      	ldr	r0, [pc, #164]	; (8014240 <tcp_receive+0xdd4>)
 801419a:	f7fd fc5e 	bl	8011a5a <tcp_seg_copy>
 801419e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f000 8122 	beq.w	80143ec <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	68fa      	ldr	r2, [r7, #12]
 80141ac:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80141ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	f7ff f8e5 	bl	8013380 <tcp_oos_insert_segment>
                  }
                  break;
 80141b6:	e119      	b.n	80143ec <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80141b8:	4b22      	ldr	r3, [pc, #136]	; (8014244 <tcp_receive+0xdd8>)
 80141ba:	681a      	ldr	r2, [r3, #0]
 80141bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141be:	68db      	ldr	r3, [r3, #12]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	1ad3      	subs	r3, r2, r3
 80141c4:	3b01      	subs	r3, #1
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	db3e      	blt.n	8014248 <tcp_receive+0xddc>
 80141ca:	4b1e      	ldr	r3, [pc, #120]	; (8014244 <tcp_receive+0xdd8>)
 80141cc:	681a      	ldr	r2, [r3, #0]
 80141ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d0:	68db      	ldr	r3, [r3, #12]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	1ad3      	subs	r3, r2, r3
 80141d6:	3301      	adds	r3, #1
 80141d8:	2b00      	cmp	r3, #0
 80141da:	dc35      	bgt.n	8014248 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80141dc:	4818      	ldr	r0, [pc, #96]	; (8014240 <tcp_receive+0xdd4>)
 80141de:	f7fd fc3c 	bl	8011a5a <tcp_seg_copy>
 80141e2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f000 8102 	beq.w	80143f0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80141ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141f4:	8912      	ldrh	r2, [r2, #8]
 80141f6:	441a      	add	r2, r3
 80141f8:	4b12      	ldr	r3, [pc, #72]	; (8014244 <tcp_receive+0xdd8>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	1ad3      	subs	r3, r2, r3
 80141fe:	2b00      	cmp	r3, #0
 8014200:	dd12      	ble.n	8014228 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014202:	4b10      	ldr	r3, [pc, #64]	; (8014244 <tcp_receive+0xdd8>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	b29a      	uxth	r2, r3
 8014208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	b29b      	uxth	r3, r3
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	b29a      	uxth	r2, r3
 8014214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014216:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	685a      	ldr	r2, [r3, #4]
 801421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421e:	891b      	ldrh	r3, [r3, #8]
 8014220:	4619      	mov	r1, r3
 8014222:	4610      	mov	r0, r2
 8014224:	f7fb ff74 	bl	8010110 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422a:	68fa      	ldr	r2, [r7, #12]
 801422c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801422e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014230:	68f8      	ldr	r0, [r7, #12]
 8014232:	f7ff f8a5 	bl	8013380 <tcp_oos_insert_segment>
                  }
                  break;
 8014236:	e0db      	b.n	80143f0 <tcp_receive+0xf84>
 8014238:	200040e4 	.word	0x200040e4
 801423c:	200040e1 	.word	0x200040e1
 8014240:	200040b4 	.word	0x200040b4
 8014244:	200040d4 	.word	0x200040d4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	f040 80bf 	bne.w	80143d0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014252:	4b7c      	ldr	r3, [pc, #496]	; (8014444 <tcp_receive+0xfd8>)
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014258:	68db      	ldr	r3, [r3, #12]
 801425a:	685b      	ldr	r3, [r3, #4]
 801425c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801425e:	2b00      	cmp	r3, #0
 8014260:	f340 80b6 	ble.w	80143d0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	899b      	ldrh	r3, [r3, #12]
 801426a:	b29b      	uxth	r3, r3
 801426c:	4618      	mov	r0, r3
 801426e:	f7fa fea9 	bl	800efc4 <lwip_htons>
 8014272:	4603      	mov	r3, r0
 8014274:	f003 0301 	and.w	r3, r3, #1
 8014278:	2b00      	cmp	r3, #0
 801427a:	f040 80bb 	bne.w	80143f4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801427e:	4872      	ldr	r0, [pc, #456]	; (8014448 <tcp_receive+0xfdc>)
 8014280:	f7fd fbeb 	bl	8011a5a <tcp_seg_copy>
 8014284:	4602      	mov	r2, r0
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	f000 80b2 	beq.w	80143f8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801429c:	8912      	ldrh	r2, [r2, #8]
 801429e:	441a      	add	r2, r3
 80142a0:	4b68      	ldr	r3, [pc, #416]	; (8014444 <tcp_receive+0xfd8>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	1ad3      	subs	r3, r2, r3
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	dd12      	ble.n	80142d0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80142aa:	4b66      	ldr	r3, [pc, #408]	; (8014444 <tcp_receive+0xfd8>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	1ad3      	subs	r3, r2, r3
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	685a      	ldr	r2, [r3, #4]
 80142c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c6:	891b      	ldrh	r3, [r3, #8]
 80142c8:	4619      	mov	r1, r3
 80142ca:	4610      	mov	r0, r2
 80142cc:	f7fb ff20 	bl	8010110 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80142d0:	4b5e      	ldr	r3, [pc, #376]	; (801444c <tcp_receive+0xfe0>)
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	461a      	mov	r2, r3
 80142d6:	4b5b      	ldr	r3, [pc, #364]	; (8014444 <tcp_receive+0xfd8>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	441a      	add	r2, r3
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e0:	6879      	ldr	r1, [r7, #4]
 80142e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142e4:	440b      	add	r3, r1
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f340 8085 	ble.w	80143f8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80142ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	68db      	ldr	r3, [r3, #12]
 80142f4:	899b      	ldrh	r3, [r3, #12]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fa fe63 	bl	800efc4 <lwip_htons>
 80142fe:	4603      	mov	r3, r0
 8014300:	f003 0301 	and.w	r3, r3, #1
 8014304:	2b00      	cmp	r3, #0
 8014306:	d01e      	beq.n	8014346 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	899b      	ldrh	r3, [r3, #12]
 8014310:	b29b      	uxth	r3, r3
 8014312:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014316:	b29c      	uxth	r4, r3
 8014318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	899b      	ldrh	r3, [r3, #12]
 8014320:	b29b      	uxth	r3, r3
 8014322:	4618      	mov	r0, r3
 8014324:	f7fa fe4e 	bl	800efc4 <lwip_htons>
 8014328:	4603      	mov	r3, r0
 801432a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801432e:	b29b      	uxth	r3, r3
 8014330:	4618      	mov	r0, r3
 8014332:	f7fa fe47 	bl	800efc4 <lwip_htons>
 8014336:	4603      	mov	r3, r0
 8014338:	461a      	mov	r2, r3
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	4322      	orrs	r2, r4
 8014342:	b292      	uxth	r2, r2
 8014344:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801434a:	b29a      	uxth	r2, r3
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014350:	4413      	add	r3, r2
 8014352:	b299      	uxth	r1, r3
 8014354:	4b3b      	ldr	r3, [pc, #236]	; (8014444 <tcp_receive+0xfd8>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	b29a      	uxth	r2, r3
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	1a8a      	subs	r2, r1, r2
 8014360:	b292      	uxth	r2, r2
 8014362:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	685a      	ldr	r2, [r3, #4]
 801436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	891b      	ldrh	r3, [r3, #8]
 8014370:	4619      	mov	r1, r3
 8014372:	4610      	mov	r0, r2
 8014374:	f7fb fecc 	bl	8010110 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	891c      	ldrh	r4, [r3, #8]
 801437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	899b      	ldrh	r3, [r3, #12]
 8014386:	b29b      	uxth	r3, r3
 8014388:	4618      	mov	r0, r3
 801438a:	f7fa fe1b 	bl	800efc4 <lwip_htons>
 801438e:	4603      	mov	r3, r0
 8014390:	f003 0303 	and.w	r3, r3, #3
 8014394:	2b00      	cmp	r3, #0
 8014396:	d001      	beq.n	801439c <tcp_receive+0xf30>
 8014398:	2301      	movs	r3, #1
 801439a:	e000      	b.n	801439e <tcp_receive+0xf32>
 801439c:	2300      	movs	r3, #0
 801439e:	4423      	add	r3, r4
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	4b2a      	ldr	r3, [pc, #168]	; (801444c <tcp_receive+0xfe0>)
 80143a4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80143a6:	4b29      	ldr	r3, [pc, #164]	; (801444c <tcp_receive+0xfe0>)
 80143a8:	881b      	ldrh	r3, [r3, #0]
 80143aa:	461a      	mov	r2, r3
 80143ac:	4b25      	ldr	r3, [pc, #148]	; (8014444 <tcp_receive+0xfd8>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	441a      	add	r2, r3
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b6:	6879      	ldr	r1, [r7, #4]
 80143b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80143ba:	440b      	add	r3, r1
 80143bc:	429a      	cmp	r2, r3
 80143be:	d01b      	beq.n	80143f8 <tcp_receive+0xf8c>
 80143c0:	4b23      	ldr	r3, [pc, #140]	; (8014450 <tcp_receive+0xfe4>)
 80143c2:	f240 627b 	movw	r2, #1659	; 0x67b
 80143c6:	4923      	ldr	r1, [pc, #140]	; (8014454 <tcp_receive+0xfe8>)
 80143c8:	4823      	ldr	r0, [pc, #140]	; (8014458 <tcp_receive+0xfec>)
 80143ca:	f004 fcf1 	bl	8018db0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80143ce:	e013      	b.n	80143f8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80143d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80143d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143dc:	2b00      	cmp	r3, #0
 80143de:	f47f aeab 	bne.w	8014138 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80143e2:	e00f      	b.n	8014404 <tcp_receive+0xf98>
                break;
 80143e4:	bf00      	nop
 80143e6:	e00d      	b.n	8014404 <tcp_receive+0xf98>
                break;
 80143e8:	bf00      	nop
 80143ea:	e00b      	b.n	8014404 <tcp_receive+0xf98>
                  break;
 80143ec:	bf00      	nop
 80143ee:	e009      	b.n	8014404 <tcp_receive+0xf98>
                  break;
 80143f0:	bf00      	nop
 80143f2:	e007      	b.n	8014404 <tcp_receive+0xf98>
                  break;
 80143f4:	bf00      	nop
 80143f6:	e005      	b.n	8014404 <tcp_receive+0xf98>
                break;
 80143f8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80143fa:	e003      	b.n	8014404 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 ff4f 	bl	80152a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014402:	e01a      	b.n	801443a <tcp_receive+0xfce>
 8014404:	e019      	b.n	801443a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014406:	4b0f      	ldr	r3, [pc, #60]	; (8014444 <tcp_receive+0xfd8>)
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440e:	1ad3      	subs	r3, r2, r3
 8014410:	2b00      	cmp	r3, #0
 8014412:	db0a      	blt.n	801442a <tcp_receive+0xfbe>
 8014414:	4b0b      	ldr	r3, [pc, #44]	; (8014444 <tcp_receive+0xfd8>)
 8014416:	681a      	ldr	r2, [r3, #0]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801441c:	6879      	ldr	r1, [r7, #4]
 801441e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014420:	440b      	add	r3, r1
 8014422:	1ad3      	subs	r3, r2, r3
 8014424:	3301      	adds	r3, #1
 8014426:	2b00      	cmp	r3, #0
 8014428:	dd07      	ble.n	801443a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	7e9b      	ldrb	r3, [r3, #26]
 801442e:	f043 0302 	orr.w	r3, r3, #2
 8014432:	b2da      	uxtb	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8014438:	e7ff      	b.n	801443a <tcp_receive+0xfce>
 801443a:	bf00      	nop
 801443c:	3734      	adds	r7, #52	; 0x34
 801443e:	46bd      	mov	sp, r7
 8014440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014442:	bf00      	nop
 8014444:	200040d4 	.word	0x200040d4
 8014448:	200040b4 	.word	0x200040b4
 801444c:	200040de 	.word	0x200040de
 8014450:	0801b4c4 	.word	0x0801b4c4
 8014454:	0801b7b4 	.word	0x0801b7b4
 8014458:	0801b52c 	.word	0x0801b52c

0801445c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801445c:	b480      	push	{r7}
 801445e:	b083      	sub	sp, #12
 8014460:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014462:	4b18      	ldr	r3, [pc, #96]	; (80144c4 <tcp_getoptbyte+0x68>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d005      	beq.n	8014476 <tcp_getoptbyte+0x1a>
 801446a:	4b17      	ldr	r3, [pc, #92]	; (80144c8 <tcp_getoptbyte+0x6c>)
 801446c:	881a      	ldrh	r2, [r3, #0]
 801446e:	4b17      	ldr	r3, [pc, #92]	; (80144cc <tcp_getoptbyte+0x70>)
 8014470:	881b      	ldrh	r3, [r3, #0]
 8014472:	429a      	cmp	r2, r3
 8014474:	d20e      	bcs.n	8014494 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014476:	4b16      	ldr	r3, [pc, #88]	; (80144d0 <tcp_getoptbyte+0x74>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	3314      	adds	r3, #20
 801447c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801447e:	4b12      	ldr	r3, [pc, #72]	; (80144c8 <tcp_getoptbyte+0x6c>)
 8014480:	881b      	ldrh	r3, [r3, #0]
 8014482:	1c5a      	adds	r2, r3, #1
 8014484:	b291      	uxth	r1, r2
 8014486:	4a10      	ldr	r2, [pc, #64]	; (80144c8 <tcp_getoptbyte+0x6c>)
 8014488:	8011      	strh	r1, [r2, #0]
 801448a:	461a      	mov	r2, r3
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	4413      	add	r3, r2
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	e010      	b.n	80144b6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8014494:	4b0c      	ldr	r3, [pc, #48]	; (80144c8 <tcp_getoptbyte+0x6c>)
 8014496:	881b      	ldrh	r3, [r3, #0]
 8014498:	1c5a      	adds	r2, r3, #1
 801449a:	b291      	uxth	r1, r2
 801449c:	4a0a      	ldr	r2, [pc, #40]	; (80144c8 <tcp_getoptbyte+0x6c>)
 801449e:	8011      	strh	r1, [r2, #0]
 80144a0:	b2da      	uxtb	r2, r3
 80144a2:	4b0a      	ldr	r3, [pc, #40]	; (80144cc <tcp_getoptbyte+0x70>)
 80144a4:	881b      	ldrh	r3, [r3, #0]
 80144a6:	b2db      	uxtb	r3, r3
 80144a8:	1ad3      	subs	r3, r2, r3
 80144aa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80144ac:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <tcp_getoptbyte+0x68>)
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	79fb      	ldrb	r3, [r7, #7]
 80144b2:	4413      	add	r3, r2
 80144b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	370c      	adds	r7, #12
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	200040cc 	.word	0x200040cc
 80144c8:	200040d0 	.word	0x200040d0
 80144cc:	200040ca 	.word	0x200040ca
 80144d0:	200040c4 	.word	0x200040c4

080144d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80144dc:	4b2d      	ldr	r3, [pc, #180]	; (8014594 <tcp_parseopt+0xc0>)
 80144de:	881b      	ldrh	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d053      	beq.n	801458c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80144e4:	4b2c      	ldr	r3, [pc, #176]	; (8014598 <tcp_parseopt+0xc4>)
 80144e6:	2200      	movs	r2, #0
 80144e8:	801a      	strh	r2, [r3, #0]
 80144ea:	e043      	b.n	8014574 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80144ec:	f7ff ffb6 	bl	801445c <tcp_getoptbyte>
 80144f0:	4603      	mov	r3, r0
 80144f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80144f4:	7bfb      	ldrb	r3, [r7, #15]
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	d03c      	beq.n	8014574 <tcp_parseopt+0xa0>
 80144fa:	2b02      	cmp	r3, #2
 80144fc:	d002      	beq.n	8014504 <tcp_parseopt+0x30>
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d03f      	beq.n	8014582 <tcp_parseopt+0xae>
 8014502:	e026      	b.n	8014552 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014504:	f7ff ffaa 	bl	801445c <tcp_getoptbyte>
 8014508:	4603      	mov	r3, r0
 801450a:	2b04      	cmp	r3, #4
 801450c:	d13b      	bne.n	8014586 <tcp_parseopt+0xb2>
 801450e:	4b22      	ldr	r3, [pc, #136]	; (8014598 <tcp_parseopt+0xc4>)
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	3302      	adds	r3, #2
 8014514:	4a1f      	ldr	r2, [pc, #124]	; (8014594 <tcp_parseopt+0xc0>)
 8014516:	8812      	ldrh	r2, [r2, #0]
 8014518:	4293      	cmp	r3, r2
 801451a:	dc34      	bgt.n	8014586 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801451c:	f7ff ff9e 	bl	801445c <tcp_getoptbyte>
 8014520:	4603      	mov	r3, r0
 8014522:	b29b      	uxth	r3, r3
 8014524:	021b      	lsls	r3, r3, #8
 8014526:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8014528:	f7ff ff98 	bl	801445c <tcp_getoptbyte>
 801452c:	4603      	mov	r3, r0
 801452e:	b29a      	uxth	r2, r3
 8014530:	89bb      	ldrh	r3, [r7, #12]
 8014532:	4313      	orrs	r3, r2
 8014534:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014536:	89bb      	ldrh	r3, [r7, #12]
 8014538:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801453c:	d804      	bhi.n	8014548 <tcp_parseopt+0x74>
 801453e:	89bb      	ldrh	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d001      	beq.n	8014548 <tcp_parseopt+0x74>
 8014544:	89ba      	ldrh	r2, [r7, #12]
 8014546:	e001      	b.n	801454c <tcp_parseopt+0x78>
 8014548:	f44f 7206 	mov.w	r2, #536	; 0x218
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8014550:	e010      	b.n	8014574 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014552:	f7ff ff83 	bl	801445c <tcp_getoptbyte>
 8014556:	4603      	mov	r3, r0
 8014558:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801455a:	7afb      	ldrb	r3, [r7, #11]
 801455c:	2b01      	cmp	r3, #1
 801455e:	d914      	bls.n	801458a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014560:	7afb      	ldrb	r3, [r7, #11]
 8014562:	b29a      	uxth	r2, r3
 8014564:	4b0c      	ldr	r3, [pc, #48]	; (8014598 <tcp_parseopt+0xc4>)
 8014566:	881b      	ldrh	r3, [r3, #0]
 8014568:	4413      	add	r3, r2
 801456a:	b29b      	uxth	r3, r3
 801456c:	3b02      	subs	r3, #2
 801456e:	b29a      	uxth	r2, r3
 8014570:	4b09      	ldr	r3, [pc, #36]	; (8014598 <tcp_parseopt+0xc4>)
 8014572:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014574:	4b08      	ldr	r3, [pc, #32]	; (8014598 <tcp_parseopt+0xc4>)
 8014576:	881a      	ldrh	r2, [r3, #0]
 8014578:	4b06      	ldr	r3, [pc, #24]	; (8014594 <tcp_parseopt+0xc0>)
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	429a      	cmp	r2, r3
 801457e:	d3b5      	bcc.n	80144ec <tcp_parseopt+0x18>
 8014580:	e004      	b.n	801458c <tcp_parseopt+0xb8>
        return;
 8014582:	bf00      	nop
 8014584:	e002      	b.n	801458c <tcp_parseopt+0xb8>
          return;
 8014586:	bf00      	nop
 8014588:	e000      	b.n	801458c <tcp_parseopt+0xb8>
          return;
 801458a:	bf00      	nop
      }
    }
  }
}
 801458c:	3710      	adds	r7, #16
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	200040c8 	.word	0x200040c8
 8014598:	200040d0 	.word	0x200040d0

0801459c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801459c:	b480      	push	{r7}
 801459e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80145a0:	4b05      	ldr	r3, [pc, #20]	; (80145b8 <tcp_trigger_input_pcb_close+0x1c>)
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	f043 0310 	orr.w	r3, r3, #16
 80145a8:	b2da      	uxtb	r2, r3
 80145aa:	4b03      	ldr	r3, [pc, #12]	; (80145b8 <tcp_trigger_input_pcb_close+0x1c>)
 80145ac:	701a      	strb	r2, [r3, #0]
}
 80145ae:	bf00      	nop
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr
 80145b8:	200040e1 	.word	0x200040e1

080145bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b086      	sub	sp, #24
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	60f8      	str	r0, [r7, #12]
 80145c4:	607b      	str	r3, [r7, #4]
 80145c6:	460b      	mov	r3, r1
 80145c8:	817b      	strh	r3, [r7, #10]
 80145ca:	4613      	mov	r3, r2
 80145cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80145ce:	897a      	ldrh	r2, [r7, #10]
 80145d0:	893b      	ldrh	r3, [r7, #8]
 80145d2:	4413      	add	r3, r2
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	3314      	adds	r3, #20
 80145d8:	b29b      	uxth	r3, r3
 80145da:	2200      	movs	r2, #0
 80145dc:	4619      	mov	r1, r3
 80145de:	2001      	movs	r0, #1
 80145e0:	f7fb fb98 	bl	800fd14 <pbuf_alloc>
 80145e4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d057      	beq.n	801469c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	895b      	ldrh	r3, [r3, #10]
 80145f0:	461a      	mov	r2, r3
 80145f2:	897b      	ldrh	r3, [r7, #10]
 80145f4:	3314      	adds	r3, #20
 80145f6:	429a      	cmp	r2, r3
 80145f8:	da05      	bge.n	8014606 <tcp_output_alloc_header+0x4a>
 80145fa:	4b2b      	ldr	r3, [pc, #172]	; (80146a8 <tcp_output_alloc_header+0xec>)
 80145fc:	2273      	movs	r2, #115	; 0x73
 80145fe:	492b      	ldr	r1, [pc, #172]	; (80146ac <tcp_output_alloc_header+0xf0>)
 8014600:	482b      	ldr	r0, [pc, #172]	; (80146b0 <tcp_output_alloc_header+0xf4>)
 8014602:	f004 fbd5 	bl	8018db0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	8adb      	ldrh	r3, [r3, #22]
 8014610:	4618      	mov	r0, r3
 8014612:	f7fa fcd7 	bl	800efc4 <lwip_htons>
 8014616:	4603      	mov	r3, r0
 8014618:	461a      	mov	r2, r3
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	8b1b      	ldrh	r3, [r3, #24]
 8014622:	4618      	mov	r0, r3
 8014624:	f7fa fcce 	bl	800efc4 <lwip_htons>
 8014628:	4603      	mov	r3, r0
 801462a:	461a      	mov	r2, r3
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801463a:	4618      	mov	r0, r3
 801463c:	f7fa fcd0 	bl	800efe0 <lwip_htonl>
 8014640:	4602      	mov	r2, r0
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014646:	897b      	ldrh	r3, [r7, #10]
 8014648:	089b      	lsrs	r3, r3, #2
 801464a:	b29b      	uxth	r3, r3
 801464c:	3305      	adds	r3, #5
 801464e:	b29b      	uxth	r3, r3
 8014650:	031b      	lsls	r3, r3, #12
 8014652:	b29b      	uxth	r3, r3
 8014654:	f043 0310 	orr.w	r3, r3, #16
 8014658:	b29b      	uxth	r3, r3
 801465a:	4618      	mov	r0, r3
 801465c:	f7fa fcb2 	bl	800efc4 <lwip_htons>
 8014660:	4603      	mov	r3, r0
 8014662:	461a      	mov	r2, r3
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801466c:	4618      	mov	r0, r3
 801466e:	f7fa fca9 	bl	800efc4 <lwip_htons>
 8014672:	4603      	mov	r3, r0
 8014674:	461a      	mov	r2, r3
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	2200      	movs	r2, #0
 801467e:	741a      	strb	r2, [r3, #16]
 8014680:	2200      	movs	r2, #0
 8014682:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	2200      	movs	r2, #0
 8014688:	749a      	strb	r2, [r3, #18]
 801468a:	2200      	movs	r2, #0
 801468c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014692:	68fa      	ldr	r2, [r7, #12]
 8014694:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014696:	441a      	add	r2, r3
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801469c:	697b      	ldr	r3, [r7, #20]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3718      	adds	r7, #24
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	0801b870 	.word	0x0801b870
 80146ac:	0801b8c8 	.word	0x0801b8c8
 80146b0:	0801b8f8 	.word	0x0801b8f8

080146b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80146b4:	b590      	push	{r4, r7, lr}
 80146b6:	b085      	sub	sp, #20
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d02d      	beq.n	8014720 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146c8:	60fb      	str	r3, [r7, #12]
 80146ca:	e002      	b.n	80146d2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d1f8      	bne.n	80146cc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	68db      	ldr	r3, [r3, #12]
 80146de:	899b      	ldrh	r3, [r3, #12]
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7fa fc6e 	bl	800efc4 <lwip_htons>
 80146e8:	4603      	mov	r3, r0
 80146ea:	f003 0307 	and.w	r3, r3, #7
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d116      	bne.n	8014720 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	899b      	ldrh	r3, [r3, #12]
 80146f8:	b29c      	uxth	r4, r3
 80146fa:	2001      	movs	r0, #1
 80146fc:	f7fa fc62 	bl	800efc4 <lwip_htons>
 8014700:	4603      	mov	r3, r0
 8014702:	461a      	mov	r2, r3
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	4322      	orrs	r2, r4
 801470a:	b292      	uxth	r2, r2
 801470c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	7e9b      	ldrb	r3, [r3, #26]
 8014712:	f043 0320 	orr.w	r3, r3, #32
 8014716:	b2da      	uxtb	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801471c:	2300      	movs	r3, #0
 801471e:	e004      	b.n	801472a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014720:	2101      	movs	r1, #1
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 fcc0 	bl	80150a8 <tcp_enqueue_flags>
 8014728:	4603      	mov	r3, r0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3714      	adds	r7, #20
 801472e:	46bd      	mov	sp, r7
 8014730:	bd90      	pop	{r4, r7, pc}
	...

08014734 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014734:	b590      	push	{r4, r7, lr}
 8014736:	b087      	sub	sp, #28
 8014738:	af00      	add	r7, sp, #0
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	60b9      	str	r1, [r7, #8]
 801473e:	603b      	str	r3, [r7, #0]
 8014740:	4613      	mov	r3, r2
 8014742:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014744:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	b2db      	uxtb	r3, r3
 801474c:	f003 0304 	and.w	r3, r3, #4
 8014750:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014752:	2003      	movs	r0, #3
 8014754:	f7fb f842 	bl	800f7dc <memp_malloc>
 8014758:	6138      	str	r0, [r7, #16]
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d104      	bne.n	801476a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014760:	68b8      	ldr	r0, [r7, #8]
 8014762:	f7fb fe49 	bl	80103f8 <pbuf_free>
    return NULL;
 8014766:	2300      	movs	r3, #0
 8014768:	e061      	b.n	801482e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014770:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	2200      	movs	r2, #0
 8014776:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	68ba      	ldr	r2, [r7, #8]
 801477c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	891a      	ldrh	r2, [r3, #8]
 8014782:	7dfb      	ldrb	r3, [r7, #23]
 8014784:	b29b      	uxth	r3, r3
 8014786:	429a      	cmp	r2, r3
 8014788:	d205      	bcs.n	8014796 <tcp_create_segment+0x62>
 801478a:	4b2b      	ldr	r3, [pc, #172]	; (8014838 <tcp_create_segment+0x104>)
 801478c:	22ba      	movs	r2, #186	; 0xba
 801478e:	492b      	ldr	r1, [pc, #172]	; (801483c <tcp_create_segment+0x108>)
 8014790:	482b      	ldr	r0, [pc, #172]	; (8014840 <tcp_create_segment+0x10c>)
 8014792:	f004 fb0d 	bl	8018db0 <iprintf>
  seg->len = p->tot_len - optlen;
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	891a      	ldrh	r2, [r3, #8]
 801479a:	7dfb      	ldrb	r3, [r7, #23]
 801479c:	b29b      	uxth	r3, r3
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80147a6:	2114      	movs	r1, #20
 80147a8:	68b8      	ldr	r0, [r7, #8]
 80147aa:	f7fb fe01 	bl	80103b0 <pbuf_header>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d004      	beq.n	80147be <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80147b4:	6938      	ldr	r0, [r7, #16]
 80147b6:	f7fd f938 	bl	8011a2a <tcp_seg_free>
    return NULL;
 80147ba:	2300      	movs	r3, #0
 80147bc:	e037      	b.n	801482e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	685a      	ldr	r2, [r3, #4]
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	8ada      	ldrh	r2, [r3, #22]
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	68dc      	ldr	r4, [r3, #12]
 80147d0:	4610      	mov	r0, r2
 80147d2:	f7fa fbf7 	bl	800efc4 <lwip_htons>
 80147d6:	4603      	mov	r3, r0
 80147d8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	8b1a      	ldrh	r2, [r3, #24]
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	68dc      	ldr	r4, [r3, #12]
 80147e2:	4610      	mov	r0, r2
 80147e4:	f7fa fbee 	bl	800efc4 <lwip_htons>
 80147e8:	4603      	mov	r3, r0
 80147ea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	68dc      	ldr	r4, [r3, #12]
 80147f0:	6838      	ldr	r0, [r7, #0]
 80147f2:	f7fa fbf5 	bl	800efe0 <lwip_htonl>
 80147f6:	4603      	mov	r3, r0
 80147f8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80147fa:	7dfb      	ldrb	r3, [r7, #23]
 80147fc:	089b      	lsrs	r3, r3, #2
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	b29b      	uxth	r3, r3
 8014802:	3305      	adds	r3, #5
 8014804:	b29b      	uxth	r3, r3
 8014806:	031b      	lsls	r3, r3, #12
 8014808:	b29a      	uxth	r2, r3
 801480a:	79fb      	ldrb	r3, [r7, #7]
 801480c:	b29b      	uxth	r3, r3
 801480e:	4313      	orrs	r3, r2
 8014810:	b29a      	uxth	r2, r3
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	68dc      	ldr	r4, [r3, #12]
 8014816:	4610      	mov	r0, r2
 8014818:	f7fa fbd4 	bl	800efc4 <lwip_htons>
 801481c:	4603      	mov	r3, r0
 801481e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	2200      	movs	r2, #0
 8014826:	749a      	strb	r2, [r3, #18]
 8014828:	2200      	movs	r2, #0
 801482a:	74da      	strb	r2, [r3, #19]
  return seg;
 801482c:	693b      	ldr	r3, [r7, #16]
}
 801482e:	4618      	mov	r0, r3
 8014830:	371c      	adds	r7, #28
 8014832:	46bd      	mov	sp, r7
 8014834:	bd90      	pop	{r4, r7, pc}
 8014836:	bf00      	nop
 8014838:	0801b870 	.word	0x0801b870
 801483c:	0801b920 	.word	0x0801b920
 8014840:	0801b8f8 	.word	0x0801b8f8

08014844 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	607b      	str	r3, [r7, #4]
 801484c:	4603      	mov	r3, r0
 801484e:	73fb      	strb	r3, [r7, #15]
 8014850:	460b      	mov	r3, r1
 8014852:	81bb      	strh	r3, [r7, #12]
 8014854:	4613      	mov	r3, r2
 8014856:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014858:	89bb      	ldrh	r3, [r7, #12]
 801485a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801485c:	89ba      	ldrh	r2, [r7, #12]
 801485e:	897b      	ldrh	r3, [r7, #10]
 8014860:	429a      	cmp	r2, r3
 8014862:	d221      	bcs.n	80148a8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014864:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014868:	f003 0302 	and.w	r3, r3, #2
 801486c:	2b00      	cmp	r3, #0
 801486e:	d111      	bne.n	8014894 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8014870:	6a3b      	ldr	r3, [r7, #32]
 8014872:	7e9b      	ldrb	r3, [r3, #26]
 8014874:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014878:	2b00      	cmp	r3, #0
 801487a:	d115      	bne.n	80148a8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801487c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014880:	2b00      	cmp	r3, #0
 8014882:	d007      	beq.n	8014894 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014884:	6a3b      	ldr	r3, [r7, #32]
 8014886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8014888:	2b00      	cmp	r3, #0
 801488a:	d103      	bne.n	8014894 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801488c:	6a3b      	ldr	r3, [r7, #32]
 801488e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8014890:	2b00      	cmp	r3, #0
 8014892:	d009      	beq.n	80148a8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014894:	89bb      	ldrh	r3, [r7, #12]
 8014896:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801489a:	f023 0203 	bic.w	r2, r3, #3
 801489e:	897b      	ldrh	r3, [r7, #10]
 80148a0:	4293      	cmp	r3, r2
 80148a2:	bf28      	it	cs
 80148a4:	4613      	movcs	r3, r2
 80148a6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80148a8:	8af9      	ldrh	r1, [r7, #22]
 80148aa:	7bfb      	ldrb	r3, [r7, #15]
 80148ac:	2200      	movs	r2, #0
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fb fa30 	bl	800fd14 <pbuf_alloc>
 80148b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d101      	bne.n	80148c0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80148bc:	2300      	movs	r3, #0
 80148be:	e019      	b.n	80148f4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d006      	beq.n	80148d6 <tcp_pbuf_prealloc+0x92>
 80148c8:	4b0c      	ldr	r3, [pc, #48]	; (80148fc <tcp_pbuf_prealloc+0xb8>)
 80148ca:	f44f 7288 	mov.w	r2, #272	; 0x110
 80148ce:	490c      	ldr	r1, [pc, #48]	; (8014900 <tcp_pbuf_prealloc+0xbc>)
 80148d0:	480c      	ldr	r0, [pc, #48]	; (8014904 <tcp_pbuf_prealloc+0xc0>)
 80148d2:	f004 fa6d 	bl	8018db0 <iprintf>
  *oversize = p->len - length;
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	895a      	ldrh	r2, [r3, #10]
 80148da:	89bb      	ldrh	r3, [r7, #12]
 80148dc:	1ad3      	subs	r3, r2, r3
 80148de:	b29a      	uxth	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	89ba      	ldrh	r2, [r7, #12]
 80148e8:	811a      	strh	r2, [r3, #8]
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	891a      	ldrh	r2, [r3, #8]
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	815a      	strh	r2, [r3, #10]
  return p;
 80148f2:	693b      	ldr	r3, [r7, #16]
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	3718      	adds	r7, #24
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	0801b870 	.word	0x0801b870
 8014900:	0801b938 	.word	0x0801b938
 8014904:	0801b8f8 	.word	0x0801b8f8

08014908 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	460b      	mov	r3, r1
 8014912:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	7d1b      	ldrb	r3, [r3, #20]
 8014918:	2b04      	cmp	r3, #4
 801491a:	d00e      	beq.n	801493a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014920:	2b07      	cmp	r3, #7
 8014922:	d00a      	beq.n	801493a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014928:	2b02      	cmp	r3, #2
 801492a:	d006      	beq.n	801493a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014930:	2b03      	cmp	r3, #3
 8014932:	d002      	beq.n	801493a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014934:	f06f 030a 	mvn.w	r3, #10
 8014938:	e04f      	b.n	80149da <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801493a:	887b      	ldrh	r3, [r7, #2]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d101      	bne.n	8014944 <tcp_write_checks+0x3c>
    return ERR_OK;
 8014940:	2300      	movs	r3, #0
 8014942:	e04a      	b.n	80149da <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801494a:	887a      	ldrh	r2, [r7, #2]
 801494c:	429a      	cmp	r2, r3
 801494e:	d909      	bls.n	8014964 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	7e9b      	ldrb	r3, [r3, #26]
 8014954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014958:	b2da      	uxtb	r2, r3
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801495e:	f04f 33ff 	mov.w	r3, #4294967295
 8014962:	e03a      	b.n	80149da <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801496a:	2b08      	cmp	r3, #8
 801496c:	d806      	bhi.n	801497c <tcp_write_checks+0x74>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014974:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014978:	4293      	cmp	r3, r2
 801497a:	d909      	bls.n	8014990 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	7e9b      	ldrb	r3, [r3, #26]
 8014980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014984:	b2da      	uxtb	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801498a:	f04f 33ff 	mov.w	r3, #4294967295
 801498e:	e024      	b.n	80149da <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014996:	2b00      	cmp	r3, #0
 8014998:	d00f      	beq.n	80149ba <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d11a      	bne.n	80149d8 <tcp_write_checks+0xd0>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d116      	bne.n	80149d8 <tcp_write_checks+0xd0>
 80149aa:	4b0e      	ldr	r3, [pc, #56]	; (80149e4 <tcp_write_checks+0xdc>)
 80149ac:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80149b0:	490d      	ldr	r1, [pc, #52]	; (80149e8 <tcp_write_checks+0xe0>)
 80149b2:	480e      	ldr	r0, [pc, #56]	; (80149ec <tcp_write_checks+0xe4>)
 80149b4:	f004 f9fc 	bl	8018db0 <iprintf>
 80149b8:	e00e      	b.n	80149d8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d103      	bne.n	80149ca <tcp_write_checks+0xc2>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d006      	beq.n	80149d8 <tcp_write_checks+0xd0>
 80149ca:	4b06      	ldr	r3, [pc, #24]	; (80149e4 <tcp_write_checks+0xdc>)
 80149cc:	f240 1259 	movw	r2, #345	; 0x159
 80149d0:	4907      	ldr	r1, [pc, #28]	; (80149f0 <tcp_write_checks+0xe8>)
 80149d2:	4806      	ldr	r0, [pc, #24]	; (80149ec <tcp_write_checks+0xe4>)
 80149d4:	f004 f9ec 	bl	8018db0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80149d8:	2300      	movs	r3, #0
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3708      	adds	r7, #8
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	0801b870 	.word	0x0801b870
 80149e8:	0801b94c 	.word	0x0801b94c
 80149ec:	0801b8f8 	.word	0x0801b8f8
 80149f0:	0801b988 	.word	0x0801b988

080149f4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80149f4:	b590      	push	{r4, r7, lr}
 80149f6:	b09b      	sub	sp, #108	; 0x6c
 80149f8:	af04      	add	r7, sp, #16
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	4611      	mov	r1, r2
 8014a00:	461a      	mov	r2, r3
 8014a02:	460b      	mov	r3, r1
 8014a04:	80fb      	strh	r3, [r7, #6]
 8014a06:	4613      	mov	r3, r2
 8014a08:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	653b      	str	r3, [r7, #80]	; 0x50
 8014a12:	2300      	movs	r3, #0
 8014a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a16:	2300      	movs	r3, #0
 8014a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014a1e:	2300      	movs	r3, #0
 8014a20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014a30:	2300      	movs	r3, #0
 8014a32:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014a34:	2300      	movs	r3, #0
 8014a36:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a42:	085b      	lsrs	r3, r3, #1
 8014a44:	b29a      	uxth	r2, r3
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a4a:	4293      	cmp	r3, r2
 8014a4c:	bf28      	it	cs
 8014a4e:	4613      	movcs	r3, r2
 8014a50:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d102      	bne.n	8014a5e <tcp_write+0x6a>
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a5c:	e000      	b.n	8014a60 <tcp_write+0x6c>
 8014a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a60:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d109      	bne.n	8014a7c <tcp_write+0x88>
 8014a68:	4b92      	ldr	r3, [pc, #584]	; (8014cb4 <tcp_write+0x2c0>)
 8014a6a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8014a6e:	4992      	ldr	r1, [pc, #584]	; (8014cb8 <tcp_write+0x2c4>)
 8014a70:	4892      	ldr	r0, [pc, #584]	; (8014cbc <tcp_write+0x2c8>)
 8014a72:	f004 f99d 	bl	8018db0 <iprintf>
 8014a76:	f06f 030f 	mvn.w	r3, #15
 8014a7a:	e30a      	b.n	8015092 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014a7c:	88fb      	ldrh	r3, [r7, #6]
 8014a7e:	4619      	mov	r1, r3
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f7ff ff41 	bl	8014908 <tcp_write_checks>
 8014a86:	4603      	mov	r3, r0
 8014a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014a8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <tcp_write+0xa6>
    return err;
 8014a94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014a98:	e2fb      	b.n	8015092 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014aa0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	f000 80f5 	beq.w	8014c98 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8014ab4:	e002      	b.n	8014abc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8014ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d1f8      	bne.n	8014ab6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8014ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ac6:	7a9b      	ldrb	r3, [r3, #10]
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	f003 0304 	and.w	r3, r3, #4
 8014ad0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ad6:	891b      	ldrh	r3, [r3, #8]
 8014ad8:	4619      	mov	r1, r3
 8014ada:	8c3b      	ldrh	r3, [r7, #32]
 8014adc:	440b      	add	r3, r1
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	da06      	bge.n	8014af0 <tcp_write+0xfc>
 8014ae2:	4b74      	ldr	r3, [pc, #464]	; (8014cb4 <tcp_write+0x2c0>)
 8014ae4:	f240 12c7 	movw	r2, #455	; 0x1c7
 8014ae8:	4975      	ldr	r1, [pc, #468]	; (8014cc0 <tcp_write+0x2cc>)
 8014aea:	4874      	ldr	r0, [pc, #464]	; (8014cbc <tcp_write+0x2c8>)
 8014aec:	f004 f960 	bl	8018db0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014af2:	891a      	ldrh	r2, [r3, #8]
 8014af4:	8c3b      	ldrh	r3, [r7, #32]
 8014af6:	4413      	add	r3, r2
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b06:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014b08:	8a7b      	ldrh	r3, [r7, #18]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d027      	beq.n	8014b5e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014b0e:	8a7b      	ldrh	r3, [r7, #18]
 8014b10:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d206      	bcs.n	8014b24 <tcp_write+0x130>
 8014b16:	4b67      	ldr	r3, [pc, #412]	; (8014cb4 <tcp_write+0x2c0>)
 8014b18:	f240 12d9 	movw	r2, #473	; 0x1d9
 8014b1c:	4969      	ldr	r1, [pc, #420]	; (8014cc4 <tcp_write+0x2d0>)
 8014b1e:	4867      	ldr	r0, [pc, #412]	; (8014cbc <tcp_write+0x2c8>)
 8014b20:	f004 f946 	bl	8018db0 <iprintf>
      seg = last_unsent;
 8014b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b26:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014b28:	8a7b      	ldrh	r3, [r7, #18]
 8014b2a:	88fa      	ldrh	r2, [r7, #6]
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d901      	bls.n	8014b34 <tcp_write+0x140>
 8014b30:	8a7b      	ldrh	r3, [r7, #18]
 8014b32:	e000      	b.n	8014b36 <tcp_write+0x142>
 8014b34:	88fb      	ldrh	r3, [r7, #6]
 8014b36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	bfa8      	it	ge
 8014b3c:	4613      	movge	r3, r2
 8014b3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014b40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b46:	4413      	add	r3, r2
 8014b48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014b4c:	8a7a      	ldrh	r2, [r7, #18]
 8014b4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014b56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b5a:	1ad3      	subs	r3, r2, r3
 8014b5c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014b5e:	8a7b      	ldrh	r3, [r7, #18]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d00b      	beq.n	8014b7c <tcp_write+0x188>
 8014b64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b68:	88fb      	ldrh	r3, [r7, #6]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d006      	beq.n	8014b7c <tcp_write+0x188>
 8014b6e:	4b51      	ldr	r3, [pc, #324]	; (8014cb4 <tcp_write+0x2c0>)
 8014b70:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014b74:	4954      	ldr	r1, [pc, #336]	; (8014cc8 <tcp_write+0x2d4>)
 8014b76:	4851      	ldr	r0, [pc, #324]	; (8014cbc <tcp_write+0x2c8>)
 8014b78:	f004 f91a 	bl	8018db0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014b7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b80:	88fb      	ldrh	r3, [r7, #6]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	f080 8168 	bcs.w	8014e58 <tcp_write+0x464>
 8014b88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	f000 8164 	beq.w	8014e58 <tcp_write+0x464>
 8014b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b92:	891b      	ldrh	r3, [r3, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	f000 815f 	beq.w	8014e58 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014b9a:	88fa      	ldrh	r2, [r7, #6]
 8014b9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ba0:	1ad2      	subs	r2, r2, r3
 8014ba2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	bfa8      	it	ge
 8014ba8:	4613      	movge	r3, r2
 8014baa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bae:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014bb0:	797b      	ldrb	r3, [r7, #5]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d027      	beq.n	8014c0a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014bba:	f107 0012 	add.w	r0, r7, #18
 8014bbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014bc0:	8bf9      	ldrh	r1, [r7, #30]
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	9302      	str	r3, [sp, #8]
 8014bc6:	797b      	ldrb	r3, [r7, #5]
 8014bc8:	9301      	str	r3, [sp, #4]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	4603      	mov	r3, r0
 8014bd0:	2004      	movs	r0, #4
 8014bd2:	f7ff fe37 	bl	8014844 <tcp_pbuf_prealloc>
 8014bd6:	6578      	str	r0, [r7, #84]	; 0x54
 8014bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f000 8227 	beq.w	801502e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014be2:	6858      	ldr	r0, [r3, #4]
 8014be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014be8:	68ba      	ldr	r2, [r7, #8]
 8014bea:	4413      	add	r3, r2
 8014bec:	8bfa      	ldrh	r2, [r7, #30]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	f004 f8cb 	bl	8018d8a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014bf4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014bf6:	f7fb fc99 	bl	801052c <pbuf_clen>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014c02:	4413      	add	r3, r2
 8014c04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014c08:	e03f      	b.n	8014c8a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8014c10:	e002      	b.n	8014c18 <tcp_write+0x224>
 8014c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	637b      	str	r3, [r7, #52]	; 0x34
 8014c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1f8      	bne.n	8014c12 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c22:	7b1b      	ldrb	r3, [r3, #12]
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	d115      	bne.n	8014c54 <tcp_write+0x260>
 8014c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c2e:	8952      	ldrh	r2, [r2, #10]
 8014c30:	4413      	add	r3, r2
 8014c32:	68ba      	ldr	r2, [r7, #8]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d10d      	bne.n	8014c54 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014c38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d006      	beq.n	8014c4e <tcp_write+0x25a>
 8014c40:	4b1c      	ldr	r3, [pc, #112]	; (8014cb4 <tcp_write+0x2c0>)
 8014c42:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8014c46:	4921      	ldr	r1, [pc, #132]	; (8014ccc <tcp_write+0x2d8>)
 8014c48:	481c      	ldr	r0, [pc, #112]	; (8014cbc <tcp_write+0x2c8>)
 8014c4a:	f004 f8b1 	bl	8018db0 <iprintf>
          extendlen = seglen;
 8014c4e:	8bfb      	ldrh	r3, [r7, #30]
 8014c50:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014c52:	e01a      	b.n	8014c8a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014c54:	8bfb      	ldrh	r3, [r7, #30]
 8014c56:	2201      	movs	r2, #1
 8014c58:	4619      	mov	r1, r3
 8014c5a:	2004      	movs	r0, #4
 8014c5c:	f7fb f85a 	bl	800fd14 <pbuf_alloc>
 8014c60:	6578      	str	r0, [r7, #84]	; 0x54
 8014c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	f000 81e4 	beq.w	8015032 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8014c6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c6e:	68ba      	ldr	r2, [r7, #8]
 8014c70:	441a      	add	r2, r3
 8014c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c74:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014c76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c78:	f7fb fc58 	bl	801052c <pbuf_clen>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	461a      	mov	r2, r3
 8014c80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014c84:	4413      	add	r3, r2
 8014c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014c8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014c8e:	8bfb      	ldrh	r3, [r7, #30]
 8014c90:	4413      	add	r3, r2
 8014c92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014c96:	e0df      	b.n	8014e58 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	f000 80da 	beq.w	8014e58 <tcp_write+0x464>
 8014ca4:	4b03      	ldr	r3, [pc, #12]	; (8014cb4 <tcp_write+0x2c0>)
 8014ca6:	f240 2225 	movw	r2, #549	; 0x225
 8014caa:	4909      	ldr	r1, [pc, #36]	; (8014cd0 <tcp_write+0x2dc>)
 8014cac:	4803      	ldr	r0, [pc, #12]	; (8014cbc <tcp_write+0x2c8>)
 8014cae:	f004 f87f 	bl	8018db0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014cb2:	e0d1      	b.n	8014e58 <tcp_write+0x464>
 8014cb4:	0801b870 	.word	0x0801b870
 8014cb8:	0801b9bc 	.word	0x0801b9bc
 8014cbc:	0801b8f8 	.word	0x0801b8f8
 8014cc0:	0801b9f0 	.word	0x0801b9f0
 8014cc4:	0801ba08 	.word	0x0801ba08
 8014cc8:	0801ba28 	.word	0x0801ba28
 8014ccc:	0801ba48 	.word	0x0801ba48
 8014cd0:	0801ba74 	.word	0x0801ba74
    struct pbuf *p;
    u16_t left = len - pos;
 8014cd4:	88fa      	ldrh	r2, [r7, #6]
 8014cd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014cda:	1ad3      	subs	r3, r2, r3
 8014cdc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ce6:	1ad3      	subs	r3, r2, r3
 8014ce8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014cea:	8b7a      	ldrh	r2, [r7, #26]
 8014cec:	8bbb      	ldrh	r3, [r7, #28]
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	bf28      	it	cs
 8014cf2:	4613      	movcs	r3, r2
 8014cf4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014cf6:	797b      	ldrb	r3, [r7, #5]
 8014cf8:	f003 0301 	and.w	r3, r3, #1
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d036      	beq.n	8014d6e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	8b3b      	ldrh	r3, [r7, #24]
 8014d08:	4413      	add	r3, r2
 8014d0a:	b299      	uxth	r1, r3
 8014d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	bf0c      	ite	eq
 8014d12:	2301      	moveq	r3, #1
 8014d14:	2300      	movne	r3, #0
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	f107 0012 	add.w	r0, r7, #18
 8014d1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d1e:	9302      	str	r3, [sp, #8]
 8014d20:	797b      	ldrb	r3, [r7, #5]
 8014d22:	9301      	str	r3, [sp, #4]
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	f7ff fd8a 	bl	8014844 <tcp_pbuf_prealloc>
 8014d30:	6338      	str	r0, [r7, #48]	; 0x30
 8014d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	f000 817e 	beq.w	8015036 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3c:	895b      	ldrh	r3, [r3, #10]
 8014d3e:	8b3a      	ldrh	r2, [r7, #24]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d906      	bls.n	8014d52 <tcp_write+0x35e>
 8014d44:	4b8f      	ldr	r3, [pc, #572]	; (8014f84 <tcp_write+0x590>)
 8014d46:	f240 2241 	movw	r2, #577	; 0x241
 8014d4a:	498f      	ldr	r1, [pc, #572]	; (8014f88 <tcp_write+0x594>)
 8014d4c:	488f      	ldr	r0, [pc, #572]	; (8014f8c <tcp_write+0x598>)
 8014d4e:	f004 f82f 	bl	8018db0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8014d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d54:	685a      	ldr	r2, [r3, #4]
 8014d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d5a:	18d0      	adds	r0, r2, r3
 8014d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d60:	68ba      	ldr	r2, [r7, #8]
 8014d62:	4413      	add	r3, r2
 8014d64:	8b3a      	ldrh	r2, [r7, #24]
 8014d66:	4619      	mov	r1, r3
 8014d68:	f004 f80f 	bl	8018d8a <memcpy>
 8014d6c:	e02e      	b.n	8014dcc <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014d6e:	8a7b      	ldrh	r3, [r7, #18]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d006      	beq.n	8014d82 <tcp_write+0x38e>
 8014d74:	4b83      	ldr	r3, [pc, #524]	; (8014f84 <tcp_write+0x590>)
 8014d76:	f240 224b 	movw	r2, #587	; 0x24b
 8014d7a:	4985      	ldr	r1, [pc, #532]	; (8014f90 <tcp_write+0x59c>)
 8014d7c:	4883      	ldr	r0, [pc, #524]	; (8014f8c <tcp_write+0x598>)
 8014d7e:	f004 f817 	bl	8018db0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014d82:	8b3b      	ldrh	r3, [r7, #24]
 8014d84:	2201      	movs	r2, #1
 8014d86:	4619      	mov	r1, r3
 8014d88:	2000      	movs	r0, #0
 8014d8a:	f7fa ffc3 	bl	800fd14 <pbuf_alloc>
 8014d8e:	6178      	str	r0, [r7, #20]
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	f000 8151 	beq.w	801503a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8014d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d9c:	68ba      	ldr	r2, [r7, #8]
 8014d9e:	441a      	add	r2, r3
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	2200      	movs	r2, #0
 8014dac:	4619      	mov	r1, r3
 8014dae:	2000      	movs	r0, #0
 8014db0:	f7fa ffb0 	bl	800fd14 <pbuf_alloc>
 8014db4:	6338      	str	r0, [r7, #48]	; 0x30
 8014db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d103      	bne.n	8014dc4 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014dbc:	6978      	ldr	r0, [r7, #20]
 8014dbe:	f7fb fb1b 	bl	80103f8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014dc2:	e13d      	b.n	8015040 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014dc4:	6979      	ldr	r1, [r7, #20]
 8014dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dc8:	f7fb fbf0 	bl	80105ac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dce:	f7fb fbad 	bl	801052c <pbuf_clen>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014dda:	4413      	add	r3, r2
 8014ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014de4:	2b09      	cmp	r3, #9
 8014de6:	d805      	bhi.n	8014df4 <tcp_write+0x400>
 8014de8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014dec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014df0:	4293      	cmp	r3, r2
 8014df2:	d903      	bls.n	8014dfc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014df6:	f7fb faff 	bl	80103f8 <pbuf_free>
      goto memerr;
 8014dfa:	e121      	b.n	8015040 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e04:	441a      	add	r2, r3
 8014e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	2200      	movs	r2, #0
 8014e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f7ff fc8e 	bl	8014734 <tcp_create_segment>
 8014e18:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	f000 810e 	beq.w	801503e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d102      	bne.n	8014e2e <tcp_write+0x43a>
      queue = seg;
 8014e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8014e2c:	e00c      	b.n	8014e48 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d106      	bne.n	8014e42 <tcp_write+0x44e>
 8014e34:	4b53      	ldr	r3, [pc, #332]	; (8014f84 <tcp_write+0x590>)
 8014e36:	f240 2285 	movw	r2, #645	; 0x285
 8014e3a:	4956      	ldr	r1, [pc, #344]	; (8014f94 <tcp_write+0x5a0>)
 8014e3c:	4853      	ldr	r0, [pc, #332]	; (8014f8c <tcp_write+0x598>)
 8014e3e:	f003 ffb7 	bl	8018db0 <iprintf>
      prev_seg->next = seg;
 8014e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e46:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e4a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014e4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e50:	8b3b      	ldrh	r3, [r7, #24]
 8014e52:	4413      	add	r3, r2
 8014e54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014e58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e5c:	88fb      	ldrh	r3, [r7, #6]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	f4ff af38 	bcc.w	8014cd4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014e64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d02c      	beq.n	8014ec4 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e70:	e01e      	b.n	8014eb0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8014e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e74:	891a      	ldrh	r2, [r3, #8]
 8014e76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e78:	4413      	add	r3, r2
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e7e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d110      	bne.n	8014eaa <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e8e:	8952      	ldrh	r2, [r2, #10]
 8014e90:	4413      	add	r3, r2
 8014e92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014e94:	68b9      	ldr	r1, [r7, #8]
 8014e96:	4618      	mov	r0, r3
 8014e98:	f003 ff77 	bl	8018d8a <memcpy>
        p->len += oversize_used;
 8014e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9e:	895a      	ldrh	r2, [r3, #10]
 8014ea0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ea2:	4413      	add	r3, r2
 8014ea4:	b29a      	uxth	r2, r3
 8014ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d1dd      	bne.n	8014e72 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8014eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014eb8:	891a      	ldrh	r2, [r3, #8]
 8014eba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ebc:	4413      	add	r3, r2
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ec2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014ec4:	8a7a      	ldrh	r2, [r7, #18]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d018      	beq.n	8014f04 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d106      	bne.n	8014ee6 <tcp_write+0x4f2>
 8014ed8:	4b2a      	ldr	r3, [pc, #168]	; (8014f84 <tcp_write+0x590>)
 8014eda:	f240 22bb 	movw	r2, #699	; 0x2bb
 8014ede:	492e      	ldr	r1, [pc, #184]	; (8014f98 <tcp_write+0x5a4>)
 8014ee0:	482a      	ldr	r0, [pc, #168]	; (8014f8c <tcp_write+0x598>)
 8014ee2:	f003 ff65 	bl	8018db0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fb fb5d 	bl	80105ac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ef4:	891a      	ldrh	r2, [r3, #8]
 8014ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ef8:	891b      	ldrh	r3, [r3, #8]
 8014efa:	4413      	add	r3, r2
 8014efc:	b29a      	uxth	r2, r3
 8014efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f00:	811a      	strh	r2, [r3, #8]
 8014f02:	e037      	b.n	8014f74 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8014f04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d034      	beq.n	8014f74 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d003      	beq.n	8014f18 <tcp_write+0x524>
 8014f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d106      	bne.n	8014f26 <tcp_write+0x532>
 8014f18:	4b1a      	ldr	r3, [pc, #104]	; (8014f84 <tcp_write+0x590>)
 8014f1a:	f240 22c1 	movw	r2, #705	; 0x2c1
 8014f1e:	491f      	ldr	r1, [pc, #124]	; (8014f9c <tcp_write+0x5a8>)
 8014f20:	481a      	ldr	r0, [pc, #104]	; (8014f8c <tcp_write+0x598>)
 8014f22:	f003 ff45 	bl	8018db0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f28:	685b      	ldr	r3, [r3, #4]
 8014f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f2c:	e009      	b.n	8014f42 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8014f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f30:	891a      	ldrh	r2, [r3, #8]
 8014f32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f34:	4413      	add	r3, r2
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f3a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d1f1      	bne.n	8014f2e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8014f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4c:	891a      	ldrh	r2, [r3, #8]
 8014f4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f50:	4413      	add	r3, r2
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f56:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5a:	895a      	ldrh	r2, [r3, #10]
 8014f5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f5e:	4413      	add	r3, r2
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f64:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f68:	891a      	ldrh	r2, [r3, #8]
 8014f6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f6c:	4413      	add	r3, r2
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f72:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d112      	bne.n	8014fa0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f7e:	669a      	str	r2, [r3, #104]	; 0x68
 8014f80:	e011      	b.n	8014fa6 <tcp_write+0x5b2>
 8014f82:	bf00      	nop
 8014f84:	0801b870 	.word	0x0801b870
 8014f88:	0801baa4 	.word	0x0801baa4
 8014f8c:	0801b8f8 	.word	0x0801b8f8
 8014f90:	0801bae4 	.word	0x0801bae4
 8014f94:	0801baf4 	.word	0x0801baf4
 8014f98:	0801bb08 	.word	0x0801bb08
 8014f9c:	0801bb40 	.word	0x0801bb40
  } else {
    last_unsent->next = queue;
 8014fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fa4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014faa:	88fb      	ldrh	r3, [r7, #6]
 8014fac:	441a      	add	r2, r3
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014fb8:	88fb      	ldrh	r3, [r7, #6]
 8014fba:	1ad3      	subs	r3, r2, r3
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014fca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d00e      	beq.n	8014ff6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d10a      	bne.n	8014ff6 <tcp_write+0x602>
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d106      	bne.n	8014ff6 <tcp_write+0x602>
 8014fe8:	4b2c      	ldr	r3, [pc, #176]	; (801509c <tcp_write+0x6a8>)
 8014fea:	f240 22ed 	movw	r2, #749	; 0x2ed
 8014fee:	492c      	ldr	r1, [pc, #176]	; (80150a0 <tcp_write+0x6ac>)
 8014ff0:	482c      	ldr	r0, [pc, #176]	; (80150a4 <tcp_write+0x6b0>)
 8014ff2:	f003 fedd 	bl	8018db0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8014ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d016      	beq.n	801502a <tcp_write+0x636>
 8014ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ffe:	68db      	ldr	r3, [r3, #12]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d012      	beq.n	801502a <tcp_write+0x636>
 8015004:	797b      	ldrb	r3, [r7, #5]
 8015006:	f003 0302 	and.w	r3, r3, #2
 801500a:	2b00      	cmp	r3, #0
 801500c:	d10d      	bne.n	801502a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801500e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	899b      	ldrh	r3, [r3, #12]
 8015014:	b29c      	uxth	r4, r3
 8015016:	2008      	movs	r0, #8
 8015018:	f7f9 ffd4 	bl	800efc4 <lwip_htons>
 801501c:	4603      	mov	r3, r0
 801501e:	461a      	mov	r2, r3
 8015020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	4322      	orrs	r2, r4
 8015026:	b292      	uxth	r2, r2
 8015028:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801502a:	2300      	movs	r3, #0
 801502c:	e031      	b.n	8015092 <tcp_write+0x69e>
          goto memerr;
 801502e:	bf00      	nop
 8015030:	e006      	b.n	8015040 <tcp_write+0x64c>
            goto memerr;
 8015032:	bf00      	nop
 8015034:	e004      	b.n	8015040 <tcp_write+0x64c>
        goto memerr;
 8015036:	bf00      	nop
 8015038:	e002      	b.n	8015040 <tcp_write+0x64c>
        goto memerr;
 801503a:	bf00      	nop
 801503c:	e000      	b.n	8015040 <tcp_write+0x64c>
      goto memerr;
 801503e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	7e9b      	ldrb	r3, [r3, #26]
 8015044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015048:	b2da      	uxtb	r2, r3
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801504e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015050:	2b00      	cmp	r3, #0
 8015052:	d002      	beq.n	801505a <tcp_write+0x666>
    pbuf_free(concat_p);
 8015054:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015056:	f7fb f9cf 	bl	80103f8 <pbuf_free>
  }
  if (queue != NULL) {
 801505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801505c:	2b00      	cmp	r3, #0
 801505e:	d002      	beq.n	8015066 <tcp_write+0x672>
    tcp_segs_free(queue);
 8015060:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015062:	f7fc fcce 	bl	8011a02 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801506c:	2b00      	cmp	r3, #0
 801506e:	d00e      	beq.n	801508e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015074:	2b00      	cmp	r3, #0
 8015076:	d10a      	bne.n	801508e <tcp_write+0x69a>
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801507c:	2b00      	cmp	r3, #0
 801507e:	d106      	bne.n	801508e <tcp_write+0x69a>
 8015080:	4b06      	ldr	r3, [pc, #24]	; (801509c <tcp_write+0x6a8>)
 8015082:	f240 3202 	movw	r2, #770	; 0x302
 8015086:	4906      	ldr	r1, [pc, #24]	; (80150a0 <tcp_write+0x6ac>)
 8015088:	4806      	ldr	r0, [pc, #24]	; (80150a4 <tcp_write+0x6b0>)
 801508a:	f003 fe91 	bl	8018db0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801508e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015092:	4618      	mov	r0, r3
 8015094:	375c      	adds	r7, #92	; 0x5c
 8015096:	46bd      	mov	sp, r7
 8015098:	bd90      	pop	{r4, r7, pc}
 801509a:	bf00      	nop
 801509c:	0801b870 	.word	0x0801b870
 80150a0:	0801bb78 	.word	0x0801bb78
 80150a4:	0801b8f8 	.word	0x0801b8f8

080150a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b08a      	sub	sp, #40	; 0x28
 80150ac:	af02      	add	r7, sp, #8
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	460b      	mov	r3, r1
 80150b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80150b4:	2300      	movs	r3, #0
 80150b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80150b8:	2300      	movs	r3, #0
 80150ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80150bc:	78fb      	ldrb	r3, [r7, #3]
 80150be:	f003 0303 	and.w	r3, r3, #3
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d106      	bne.n	80150d4 <tcp_enqueue_flags+0x2c>
 80150c6:	4b6f      	ldr	r3, [pc, #444]	; (8015284 <tcp_enqueue_flags+0x1dc>)
 80150c8:	f240 321b 	movw	r2, #795	; 0x31b
 80150cc:	496e      	ldr	r1, [pc, #440]	; (8015288 <tcp_enqueue_flags+0x1e0>)
 80150ce:	486f      	ldr	r0, [pc, #444]	; (801528c <tcp_enqueue_flags+0x1e4>)
 80150d0:	f003 fe6e 	bl	8018db0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150da:	2b08      	cmp	r3, #8
 80150dc:	d806      	bhi.n	80150ec <tcp_enqueue_flags+0x44>
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150e4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80150e8:	4293      	cmp	r3, r2
 80150ea:	d90e      	bls.n	801510a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80150ec:	78fb      	ldrb	r3, [r7, #3]
 80150ee:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d109      	bne.n	801510a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	7e9b      	ldrb	r3, [r3, #26]
 80150fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80150fe:	b2da      	uxtb	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015104:	f04f 33ff 	mov.w	r3, #4294967295
 8015108:	e0b7      	b.n	801527a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801510a:	78fb      	ldrb	r3, [r7, #3]
 801510c:	f003 0302 	and.w	r3, r3, #2
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015114:	2301      	movs	r3, #1
 8015116:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015118:	7ffb      	ldrb	r3, [r7, #31]
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	b2db      	uxtb	r3, r3
 801511e:	f003 0304 	and.w	r3, r3, #4
 8015122:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015124:	7dfb      	ldrb	r3, [r7, #23]
 8015126:	b29b      	uxth	r3, r3
 8015128:	2200      	movs	r2, #0
 801512a:	4619      	mov	r1, r3
 801512c:	2000      	movs	r0, #0
 801512e:	f7fa fdf1 	bl	800fd14 <pbuf_alloc>
 8015132:	6138      	str	r0, [r7, #16]
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d109      	bne.n	801514e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	7e9b      	ldrb	r3, [r3, #26]
 801513e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015142:	b2da      	uxtb	r2, r3
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015148:	f04f 33ff 	mov.w	r3, #4294967295
 801514c:	e095      	b.n	801527a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	895a      	ldrh	r2, [r3, #10]
 8015152:	7dfb      	ldrb	r3, [r7, #23]
 8015154:	b29b      	uxth	r3, r3
 8015156:	429a      	cmp	r2, r3
 8015158:	d206      	bcs.n	8015168 <tcp_enqueue_flags+0xc0>
 801515a:	4b4a      	ldr	r3, [pc, #296]	; (8015284 <tcp_enqueue_flags+0x1dc>)
 801515c:	f240 3241 	movw	r2, #833	; 0x341
 8015160:	494b      	ldr	r1, [pc, #300]	; (8015290 <tcp_enqueue_flags+0x1e8>)
 8015162:	484a      	ldr	r0, [pc, #296]	; (801528c <tcp_enqueue_flags+0x1e4>)
 8015164:	f003 fe24 	bl	8018db0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801516c:	78fa      	ldrb	r2, [r7, #3]
 801516e:	7ffb      	ldrb	r3, [r7, #31]
 8015170:	9300      	str	r3, [sp, #0]
 8015172:	460b      	mov	r3, r1
 8015174:	6939      	ldr	r1, [r7, #16]
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7ff fadc 	bl	8014734 <tcp_create_segment>
 801517c:	60f8      	str	r0, [r7, #12]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d109      	bne.n	8015198 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	7e9b      	ldrb	r3, [r3, #26]
 8015188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801518c:	b2da      	uxtb	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015192:	f04f 33ff 	mov.w	r3, #4294967295
 8015196:	e070      	b.n	801527a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	f003 0303 	and.w	r3, r3, #3
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d006      	beq.n	80151b2 <tcp_enqueue_flags+0x10a>
 80151a4:	4b37      	ldr	r3, [pc, #220]	; (8015284 <tcp_enqueue_flags+0x1dc>)
 80151a6:	f240 3249 	movw	r2, #841	; 0x349
 80151aa:	493a      	ldr	r1, [pc, #232]	; (8015294 <tcp_enqueue_flags+0x1ec>)
 80151ac:	4837      	ldr	r0, [pc, #220]	; (801528c <tcp_enqueue_flags+0x1e4>)
 80151ae:	f003 fdff 	bl	8018db0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	891b      	ldrh	r3, [r3, #8]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d006      	beq.n	80151c8 <tcp_enqueue_flags+0x120>
 80151ba:	4b32      	ldr	r3, [pc, #200]	; (8015284 <tcp_enqueue_flags+0x1dc>)
 80151bc:	f240 324a 	movw	r2, #842	; 0x34a
 80151c0:	4935      	ldr	r1, [pc, #212]	; (8015298 <tcp_enqueue_flags+0x1f0>)
 80151c2:	4832      	ldr	r0, [pc, #200]	; (801528c <tcp_enqueue_flags+0x1e4>)
 80151c4:	f003 fdf4 	bl	8018db0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d103      	bne.n	80151d8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	669a      	str	r2, [r3, #104]	; 0x68
 80151d6:	e00d      	b.n	80151f4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151dc:	61bb      	str	r3, [r7, #24]
 80151de:	e002      	b.n	80151e6 <tcp_enqueue_flags+0x13e>
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	61bb      	str	r3, [r7, #24]
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d1f8      	bne.n	80151e0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80151ee:	69bb      	ldr	r3, [r7, #24]
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2200      	movs	r2, #0
 80151f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80151fc:	78fb      	ldrb	r3, [r7, #3]
 80151fe:	f003 0302 	and.w	r3, r3, #2
 8015202:	2b00      	cmp	r3, #0
 8015204:	d104      	bne.n	8015210 <tcp_enqueue_flags+0x168>
 8015206:	78fb      	ldrb	r3, [r7, #3]
 8015208:	f003 0301 	and.w	r3, r3, #1
 801520c:	2b00      	cmp	r3, #0
 801520e:	d004      	beq.n	801521a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015214:	1c5a      	adds	r2, r3, #1
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801521a:	78fb      	ldrb	r3, [r7, #3]
 801521c:	f003 0301 	and.w	r3, r3, #1
 8015220:	2b00      	cmp	r3, #0
 8015222:	d006      	beq.n	8015232 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	7e9b      	ldrb	r3, [r3, #26]
 8015228:	f043 0320 	orr.w	r3, r3, #32
 801522c:	b2da      	uxtb	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	4618      	mov	r0, r3
 8015238:	f7fb f978 	bl	801052c <pbuf_clen>
 801523c:	4603      	mov	r3, r0
 801523e:	461a      	mov	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015246:	4413      	add	r3, r2
 8015248:	b29a      	uxth	r2, r3
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015256:	2b00      	cmp	r3, #0
 8015258:	d00e      	beq.n	8015278 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801525e:	2b00      	cmp	r3, #0
 8015260:	d10a      	bne.n	8015278 <tcp_enqueue_flags+0x1d0>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015266:	2b00      	cmp	r3, #0
 8015268:	d106      	bne.n	8015278 <tcp_enqueue_flags+0x1d0>
 801526a:	4b06      	ldr	r3, [pc, #24]	; (8015284 <tcp_enqueue_flags+0x1dc>)
 801526c:	f240 326d 	movw	r2, #877	; 0x36d
 8015270:	490a      	ldr	r1, [pc, #40]	; (801529c <tcp_enqueue_flags+0x1f4>)
 8015272:	4806      	ldr	r0, [pc, #24]	; (801528c <tcp_enqueue_flags+0x1e4>)
 8015274:	f003 fd9c 	bl	8018db0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015278:	2300      	movs	r3, #0
}
 801527a:	4618      	mov	r0, r3
 801527c:	3720      	adds	r7, #32
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	0801b870 	.word	0x0801b870
 8015288:	0801bb98 	.word	0x0801bb98
 801528c:	0801b8f8 	.word	0x0801b8f8
 8015290:	0801bbf0 	.word	0x0801bbf0
 8015294:	0801bc2c 	.word	0x0801bc2c
 8015298:	0801bc44 	.word	0x0801bc44
 801529c:	0801bc70 	.word	0x0801bc70

080152a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80152a0:	b590      	push	{r4, r7, lr}
 80152a2:	b08b      	sub	sp, #44	; 0x2c
 80152a4:	af04      	add	r7, sp, #16
 80152a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80152a8:	2300      	movs	r3, #0
 80152aa:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80152ac:	7dbb      	ldrb	r3, [r7, #22]
 80152ae:	b29c      	uxth	r4, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f9 fe93 	bl	800efe0 <lwip_htonl>
 80152ba:	4603      	mov	r3, r0
 80152bc:	2200      	movs	r2, #0
 80152be:	4621      	mov	r1, r4
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f7ff f97b 	bl	80145bc <tcp_output_alloc_header>
 80152c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d109      	bne.n	80152e2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	7e9b      	ldrb	r3, [r3, #26]
 80152d2:	f043 0303 	orr.w	r3, r3, #3
 80152d6:	b2da      	uxtb	r2, r3
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80152dc:	f06f 0301 	mvn.w	r3, #1
 80152e0:	e036      	b.n	8015350 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	3304      	adds	r3, #4
 80152e6:	4618      	mov	r0, r3
 80152e8:	f002 f9c0 	bl	801766c <ip4_route>
 80152ec:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d102      	bne.n	80152fa <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80152f4:	23fc      	movs	r3, #252	; 0xfc
 80152f6:	75fb      	strb	r3, [r7, #23]
 80152f8:	e012      	b.n	8015320 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80152fa:	6879      	ldr	r1, [r7, #4]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	1d18      	adds	r0, r3, #4
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	7a9c      	ldrb	r4, [r3, #10]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	7a5b      	ldrb	r3, [r3, #9]
 8015308:	68fa      	ldr	r2, [r7, #12]
 801530a:	9202      	str	r2, [sp, #8]
 801530c:	2206      	movs	r2, #6
 801530e:	9201      	str	r2, [sp, #4]
 8015310:	9300      	str	r3, [sp, #0]
 8015312:	4623      	mov	r3, r4
 8015314:	4602      	mov	r2, r0
 8015316:	6938      	ldr	r0, [r7, #16]
 8015318:	f002 fb50 	bl	80179bc <ip4_output_if>
 801531c:	4603      	mov	r3, r0
 801531e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015320:	6938      	ldr	r0, [r7, #16]
 8015322:	f7fb f869 	bl	80103f8 <pbuf_free>

  if (err != ERR_OK) {
 8015326:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d007      	beq.n	801533e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	7e9b      	ldrb	r3, [r3, #26]
 8015332:	f043 0303 	orr.w	r3, r3, #3
 8015336:	b2da      	uxtb	r2, r3
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	769a      	strb	r2, [r3, #26]
 801533c:	e006      	b.n	801534c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	7e9b      	ldrb	r3, [r3, #26]
 8015342:	f023 0303 	bic.w	r3, r3, #3
 8015346:	b2da      	uxtb	r2, r3
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801534c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015350:	4618      	mov	r0, r3
 8015352:	371c      	adds	r7, #28
 8015354:	46bd      	mov	sp, r7
 8015356:	bd90      	pop	{r4, r7, pc}

08015358 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015358:	b5b0      	push	{r4, r5, r7, lr}
 801535a:	b08a      	sub	sp, #40	; 0x28
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	7d1b      	ldrb	r3, [r3, #20]
 8015364:	2b01      	cmp	r3, #1
 8015366:	d106      	bne.n	8015376 <tcp_output+0x1e>
 8015368:	4b9b      	ldr	r3, [pc, #620]	; (80155d8 <tcp_output+0x280>)
 801536a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801536e:	499b      	ldr	r1, [pc, #620]	; (80155dc <tcp_output+0x284>)
 8015370:	489b      	ldr	r0, [pc, #620]	; (80155e0 <tcp_output+0x288>)
 8015372:	f003 fd1d 	bl	8018db0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015376:	4b9b      	ldr	r3, [pc, #620]	; (80155e4 <tcp_output+0x28c>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	429a      	cmp	r2, r3
 801537e:	d101      	bne.n	8015384 <tcp_output+0x2c>
    return ERR_OK;
 8015380:	2300      	movs	r3, #0
 8015382:	e1cf      	b.n	8015724 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015390:	429a      	cmp	r2, r3
 8015392:	d203      	bcs.n	801539c <tcp_output+0x44>
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801539a:	e002      	b.n	80153a2 <tcp_output+0x4a>
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153a2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80153a8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	7e9b      	ldrb	r3, [r3, #26]
 80153ae:	f003 0302 	and.w	r3, r3, #2
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d017      	beq.n	80153e6 <tcp_output+0x8e>
 80153b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d00f      	beq.n	80153dc <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80153bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	685b      	ldr	r3, [r3, #4]
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7f9 fe0c 	bl	800efe0 <lwip_htonl>
 80153c8:	4602      	mov	r2, r0
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153d2:	8912      	ldrh	r2, [r2, #8]
 80153d4:	4413      	add	r3, r2
     (seg == NULL ||
 80153d6:	69ba      	ldr	r2, [r7, #24]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d204      	bcs.n	80153e6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7ff ff5f 	bl	80152a0 <tcp_send_empty_ack>
 80153e2:	4603      	mov	r3, r0
 80153e4:	e19e      	b.n	8015724 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153ea:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80153ec:	6a3b      	ldr	r3, [r7, #32]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d007      	beq.n	8015402 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80153f2:	e002      	b.n	80153fa <tcp_output+0xa2>
 80153f4:	6a3b      	ldr	r3, [r7, #32]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	623b      	str	r3, [r7, #32]
 80153fa:	6a3b      	ldr	r3, [r7, #32]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d1f8      	bne.n	80153f4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	3304      	adds	r3, #4
 8015406:	4618      	mov	r0, r3
 8015408:	f002 f930 	bl	801766c <ip4_route>
 801540c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d102      	bne.n	801541a <tcp_output+0xc2>
    return ERR_RTE;
 8015414:	f06f 0303 	mvn.w	r3, #3
 8015418:	e184      	b.n	8015724 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d003      	beq.n	8015428 <tcp_output+0xd0>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d111      	bne.n	801544c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d002      	beq.n	8015434 <tcp_output+0xdc>
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	3304      	adds	r3, #4
 8015432:	e000      	b.n	8015436 <tcp_output+0xde>
 8015434:	2300      	movs	r3, #0
 8015436:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015438:	693b      	ldr	r3, [r7, #16]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d102      	bne.n	8015444 <tcp_output+0xec>
      return ERR_RTE;
 801543e:	f06f 0303 	mvn.w	r3, #3
 8015442:	e16f      	b.n	8015724 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	2b00      	cmp	r3, #0
 8015450:	f000 813e 	beq.w	80156d0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	4618      	mov	r0, r3
 801545c:	f7f9 fdc0 	bl	800efe0 <lwip_htonl>
 8015460:	4602      	mov	r2, r0
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801546a:	8912      	ldrh	r2, [r2, #8]
 801546c:	4413      	add	r3, r2
  if (seg != NULL &&
 801546e:	69ba      	ldr	r2, [r7, #24]
 8015470:	429a      	cmp	r2, r3
 8015472:	f080 812d 	bcs.w	80156d0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	2b00      	cmp	r3, #0
 801547a:	f000 8129 	beq.w	80156d0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015484:	461a      	mov	r2, r3
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	4293      	cmp	r3, r2
 801548a:	f040 8121 	bne.w	80156d0 <tcp_output+0x378>
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015492:	2b00      	cmp	r3, #0
 8015494:	f040 811c 	bne.w	80156d0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801549e:	2b00      	cmp	r3, #0
 80154a0:	f040 812b 	bne.w	80156fa <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2200      	movs	r2, #0
 80154a8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2201      	movs	r2, #1
 80154b0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80154b4:	e121      	b.n	80156fa <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80154b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	899b      	ldrh	r3, [r3, #12]
 80154bc:	b29b      	uxth	r3, r3
 80154be:	4618      	mov	r0, r3
 80154c0:	f7f9 fd80 	bl	800efc4 <lwip_htons>
 80154c4:	4603      	mov	r3, r0
 80154c6:	f003 0304 	and.w	r3, r3, #4
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d006      	beq.n	80154dc <tcp_output+0x184>
 80154ce:	4b42      	ldr	r3, [pc, #264]	; (80155d8 <tcp_output+0x280>)
 80154d0:	f240 4246 	movw	r2, #1094	; 0x446
 80154d4:	4944      	ldr	r1, [pc, #272]	; (80155e8 <tcp_output+0x290>)
 80154d6:	4842      	ldr	r0, [pc, #264]	; (80155e0 <tcp_output+0x288>)
 80154d8:	f003 fc6a 	bl	8018db0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d01f      	beq.n	8015524 <tcp_output+0x1cc>
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	7e9b      	ldrb	r3, [r3, #26]
 80154e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d119      	bne.n	8015524 <tcp_output+0x1cc>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00b      	beq.n	8015510 <tcp_output+0x1b8>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d110      	bne.n	8015524 <tcp_output+0x1cc>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015506:	891a      	ldrh	r2, [r3, #8]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801550c:	429a      	cmp	r2, r3
 801550e:	d209      	bcs.n	8015524 <tcp_output+0x1cc>
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015516:	2b00      	cmp	r3, #0
 8015518:	d004      	beq.n	8015524 <tcp_output+0x1cc>
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015520:	2b08      	cmp	r3, #8
 8015522:	d901      	bls.n	8015528 <tcp_output+0x1d0>
 8015524:	2301      	movs	r3, #1
 8015526:	e000      	b.n	801552a <tcp_output+0x1d2>
 8015528:	2300      	movs	r3, #0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d106      	bne.n	801553c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	7e9b      	ldrb	r3, [r3, #26]
 8015532:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015536:	2b00      	cmp	r3, #0
 8015538:	f000 80e1 	beq.w	80156fe <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	7d1b      	ldrb	r3, [r3, #20]
 8015540:	2b02      	cmp	r3, #2
 8015542:	d00d      	beq.n	8015560 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015546:	68db      	ldr	r3, [r3, #12]
 8015548:	899b      	ldrh	r3, [r3, #12]
 801554a:	b29c      	uxth	r4, r3
 801554c:	2010      	movs	r0, #16
 801554e:	f7f9 fd39 	bl	800efc4 <lwip_htons>
 8015552:	4603      	mov	r3, r0
 8015554:	461a      	mov	r2, r3
 8015556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	4322      	orrs	r2, r4
 801555c:	b292      	uxth	r2, r2
 801555e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015560:	697a      	ldr	r2, [r7, #20]
 8015562:	6879      	ldr	r1, [r7, #4]
 8015564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015566:	f000 f8e1 	bl	801572c <tcp_output_segment>
 801556a:	4603      	mov	r3, r0
 801556c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d009      	beq.n	801558a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	7e9b      	ldrb	r3, [r3, #26]
 801557a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801557e:	b2da      	uxtb	r2, r3
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	769a      	strb	r2, [r3, #26]
      return err;
 8015584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015588:	e0cc      	b.n	8015724 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	7d1b      	ldrb	r3, [r3, #20]
 8015596:	2b02      	cmp	r3, #2
 8015598:	d006      	beq.n	80155a8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	7e9b      	ldrb	r3, [r3, #26]
 801559e:	f023 0303 	bic.w	r3, r3, #3
 80155a2:	b2da      	uxtb	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80155a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f9 fd16 	bl	800efe0 <lwip_htonl>
 80155b4:	4604      	mov	r4, r0
 80155b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b8:	891b      	ldrh	r3, [r3, #8]
 80155ba:	461d      	mov	r5, r3
 80155bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	899b      	ldrh	r3, [r3, #12]
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7f9 fcfd 	bl	800efc4 <lwip_htons>
 80155ca:	4603      	mov	r3, r0
 80155cc:	f003 0303 	and.w	r3, r3, #3
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00b      	beq.n	80155ec <tcp_output+0x294>
 80155d4:	2301      	movs	r3, #1
 80155d6:	e00a      	b.n	80155ee <tcp_output+0x296>
 80155d8:	0801b870 	.word	0x0801b870
 80155dc:	0801bc98 	.word	0x0801bc98
 80155e0:	0801b8f8 	.word	0x0801b8f8
 80155e4:	200079c4 	.word	0x200079c4
 80155e8:	0801bcc0 	.word	0x0801bcc0
 80155ec:	2300      	movs	r3, #0
 80155ee:	442b      	add	r3, r5
 80155f0:	4423      	add	r3, r4
 80155f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	1ad3      	subs	r3, r2, r3
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	da02      	bge.n	8015606 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	68ba      	ldr	r2, [r7, #8]
 8015604:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	891b      	ldrh	r3, [r3, #8]
 801560a:	461c      	mov	r4, r3
 801560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	899b      	ldrh	r3, [r3, #12]
 8015612:	b29b      	uxth	r3, r3
 8015614:	4618      	mov	r0, r3
 8015616:	f7f9 fcd5 	bl	800efc4 <lwip_htons>
 801561a:	4603      	mov	r3, r0
 801561c:	f003 0303 	and.w	r3, r3, #3
 8015620:	2b00      	cmp	r3, #0
 8015622:	d001      	beq.n	8015628 <tcp_output+0x2d0>
 8015624:	2301      	movs	r3, #1
 8015626:	e000      	b.n	801562a <tcp_output+0x2d2>
 8015628:	2300      	movs	r3, #0
 801562a:	4423      	add	r3, r4
 801562c:	2b00      	cmp	r3, #0
 801562e:	d049      	beq.n	80156c4 <tcp_output+0x36c>
      seg->next = NULL;
 8015630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015632:	2200      	movs	r2, #0
 8015634:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801563a:	2b00      	cmp	r3, #0
 801563c:	d105      	bne.n	801564a <tcp_output+0x2f2>
        pcb->unacked = seg;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015642:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8015644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015646:	623b      	str	r3, [r7, #32]
 8015648:	e03f      	b.n	80156ca <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	685b      	ldr	r3, [r3, #4]
 8015650:	4618      	mov	r0, r3
 8015652:	f7f9 fcc5 	bl	800efe0 <lwip_htonl>
 8015656:	4604      	mov	r4, r0
 8015658:	6a3b      	ldr	r3, [r7, #32]
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	4618      	mov	r0, r3
 8015660:	f7f9 fcbe 	bl	800efe0 <lwip_htonl>
 8015664:	4603      	mov	r3, r0
 8015666:	1ae3      	subs	r3, r4, r3
 8015668:	2b00      	cmp	r3, #0
 801566a:	da24      	bge.n	80156b6 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	336c      	adds	r3, #108	; 0x6c
 8015670:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015672:	e002      	b.n	801567a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d011      	beq.n	80156a6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f7f9 fca8 	bl	800efe0 <lwip_htonl>
 8015690:	4604      	mov	r4, r0
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	68db      	ldr	r3, [r3, #12]
 8015696:	685b      	ldr	r3, [r3, #4]
 8015698:	4618      	mov	r0, r3
 801569a:	f7f9 fca1 	bl	800efe0 <lwip_htonl>
 801569e:	4603      	mov	r3, r0
 80156a0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	dbe6      	blt.n	8015674 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	681a      	ldr	r2, [r3, #0]
 80156aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ac:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156b2:	601a      	str	r2, [r3, #0]
 80156b4:	e009      	b.n	80156ca <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80156b6:	6a3b      	ldr	r3, [r7, #32]
 80156b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156ba:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80156bc:	6a3b      	ldr	r3, [r7, #32]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	623b      	str	r3, [r7, #32]
 80156c2:	e002      	b.n	80156ca <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80156c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156c6:	f7fc f9b0 	bl	8011a2a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80156d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d015      	beq.n	8015702 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80156d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	4618      	mov	r0, r3
 80156de:	f7f9 fc7f 	bl	800efe0 <lwip_htonl>
 80156e2:	4602      	mov	r2, r0
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156e8:	1ad3      	subs	r3, r2, r3
 80156ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156ec:	8912      	ldrh	r2, [r2, #8]
 80156ee:	4413      	add	r3, r2
  while (seg != NULL &&
 80156f0:	69ba      	ldr	r2, [r7, #24]
 80156f2:	429a      	cmp	r2, r3
 80156f4:	f4bf aedf 	bcs.w	80154b6 <tcp_output+0x15e>
  }
output_done:
 80156f8:	e003      	b.n	8015702 <tcp_output+0x3aa>
    goto output_done;
 80156fa:	bf00      	nop
 80156fc:	e002      	b.n	8015704 <tcp_output+0x3ac>
      break;
 80156fe:	bf00      	nop
 8015700:	e000      	b.n	8015704 <tcp_output+0x3ac>
output_done:
 8015702:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015708:	2b00      	cmp	r3, #0
 801570a:	d103      	bne.n	8015714 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2200      	movs	r2, #0
 8015710:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	7e9b      	ldrb	r3, [r3, #26]
 8015718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801571c:	b2da      	uxtb	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015722:	2300      	movs	r3, #0
}
 8015724:	4618      	mov	r0, r3
 8015726:	3728      	adds	r7, #40	; 0x28
 8015728:	46bd      	mov	sp, r7
 801572a:	bdb0      	pop	{r4, r5, r7, pc}

0801572c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801572c:	b5b0      	push	{r4, r5, r7, lr}
 801572e:	b08c      	sub	sp, #48	; 0x30
 8015730:	af04      	add	r7, sp, #16
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	60b9      	str	r1, [r7, #8]
 8015736:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	685b      	ldr	r3, [r3, #4]
 801573c:	89db      	ldrh	r3, [r3, #14]
 801573e:	2b01      	cmp	r3, #1
 8015740:	d001      	beq.n	8015746 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015742:	2300      	movs	r3, #0
 8015744:	e08b      	b.n	801585e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	68dc      	ldr	r4, [r3, #12]
 801574e:	4610      	mov	r0, r2
 8015750:	f7f9 fc46 	bl	800efe0 <lwip_htonl>
 8015754:	4603      	mov	r3, r0
 8015756:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	68dc      	ldr	r4, [r3, #12]
 8015760:	4610      	mov	r0, r2
 8015762:	f7f9 fc2f 	bl	800efc4 <lwip_htons>
 8015766:	4603      	mov	r3, r0
 8015768:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801576e:	68ba      	ldr	r2, [r7, #8]
 8015770:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015772:	441a      	add	r2, r3
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	3314      	adds	r3, #20
 801577e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	7a9b      	ldrb	r3, [r3, #10]
 8015784:	f003 0301 	and.w	r3, r3, #1
 8015788:	2b00      	cmp	r3, #0
 801578a:	d014      	beq.n	80157b6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	3304      	adds	r3, #4
 8015790:	4619      	mov	r1, r3
 8015792:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015796:	f7fc fc73 	bl	8012080 <tcp_eff_send_mss_impl>
 801579a:	4603      	mov	r3, r0
 801579c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801579e:	8b7b      	ldrh	r3, [r7, #26]
 80157a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f9 fc1b 	bl	800efe0 <lwip_htonl>
 80157aa:	4602      	mov	r2, r0
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	3304      	adds	r3, #4
 80157b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157bc:	2b00      	cmp	r3, #0
 80157be:	da02      	bge.n	80157c6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	2200      	movs	r2, #0
 80157c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d10c      	bne.n	80157e8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80157ce:	4b26      	ldr	r3, [pc, #152]	; (8015868 <tcp_output_segment+0x13c>)
 80157d0:	681a      	ldr	r2, [r3, #0]
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	68db      	ldr	r3, [r3, #12]
 80157da:	685b      	ldr	r3, [r3, #4]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7f9 fbff 	bl	800efe0 <lwip_htonl>
 80157e2:	4602      	mov	r2, r0
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	461a      	mov	r2, r3
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	685b      	ldr	r3, [r3, #4]
 80157f4:	1ad3      	subs	r3, r2, r3
 80157f6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	8959      	ldrh	r1, [r3, #10]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	8b3a      	ldrh	r2, [r7, #24]
 8015804:	1a8a      	subs	r2, r1, r2
 8015806:	b292      	uxth	r2, r2
 8015808:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	685b      	ldr	r3, [r3, #4]
 801580e:	8919      	ldrh	r1, [r3, #8]
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	8b3a      	ldrh	r2, [r7, #24]
 8015816:	1a8a      	subs	r2, r1, r2
 8015818:	b292      	uxth	r2, r2
 801581a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	68fa      	ldr	r2, [r7, #12]
 8015822:	68d2      	ldr	r2, [r2, #12]
 8015824:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	2200      	movs	r2, #0
 801582c:	741a      	strb	r2, [r3, #16]
 801582e:	2200      	movs	r2, #0
 8015830:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	6858      	ldr	r0, [r3, #4]
 8015836:	68b9      	ldr	r1, [r7, #8]
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	1d1c      	adds	r4, r3, #4
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	7a9d      	ldrb	r5, [r3, #10]
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	7a5b      	ldrb	r3, [r3, #9]
 8015844:	687a      	ldr	r2, [r7, #4]
 8015846:	9202      	str	r2, [sp, #8]
 8015848:	2206      	movs	r2, #6
 801584a:	9201      	str	r2, [sp, #4]
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	462b      	mov	r3, r5
 8015850:	4622      	mov	r2, r4
 8015852:	f002 f8b3 	bl	80179bc <ip4_output_if>
 8015856:	4603      	mov	r3, r0
 8015858:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801585a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801585e:	4618      	mov	r0, r3
 8015860:	3720      	adds	r7, #32
 8015862:	46bd      	mov	sp, r7
 8015864:	bdb0      	pop	{r4, r5, r7, pc}
 8015866:	bf00      	nop
 8015868:	200079b4 	.word	0x200079b4

0801586c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b08c      	sub	sp, #48	; 0x30
 8015870:	af04      	add	r7, sp, #16
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
 8015878:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801587a:	2200      	movs	r2, #0
 801587c:	2114      	movs	r1, #20
 801587e:	2001      	movs	r0, #1
 8015880:	f7fa fa48 	bl	800fd14 <pbuf_alloc>
 8015884:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d05b      	beq.n	8015944 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	895b      	ldrh	r3, [r3, #10]
 8015890:	2b13      	cmp	r3, #19
 8015892:	d806      	bhi.n	80158a2 <tcp_rst+0x36>
 8015894:	4b2d      	ldr	r3, [pc, #180]	; (801594c <tcp_rst+0xe0>)
 8015896:	f240 524d 	movw	r2, #1357	; 0x54d
 801589a:	492d      	ldr	r1, [pc, #180]	; (8015950 <tcp_rst+0xe4>)
 801589c:	482d      	ldr	r0, [pc, #180]	; (8015954 <tcp_rst+0xe8>)
 801589e:	f003 fa87 	bl	8018db0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80158a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7f9 fb8a 	bl	800efc4 <lwip_htons>
 80158b0:	4603      	mov	r3, r0
 80158b2:	461a      	mov	r2, r3
 80158b4:	69bb      	ldr	r3, [r7, #24]
 80158b6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80158b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7f9 fb82 	bl	800efc4 <lwip_htons>
 80158c0:	4603      	mov	r3, r0
 80158c2:	461a      	mov	r2, r3
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	f7f9 fb89 	bl	800efe0 <lwip_htonl>
 80158ce:	4602      	mov	r2, r0
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80158d4:	68b8      	ldr	r0, [r7, #8]
 80158d6:	f7f9 fb83 	bl	800efe0 <lwip_htonl>
 80158da:	4602      	mov	r2, r0
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80158e0:	f245 0014 	movw	r0, #20500	; 0x5014
 80158e4:	f7f9 fb6e 	bl	800efc4 <lwip_htons>
 80158e8:	4603      	mov	r3, r0
 80158ea:	461a      	mov	r2, r3
 80158ec:	69bb      	ldr	r3, [r7, #24]
 80158ee:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	2200      	movs	r2, #0
 80158f4:	f042 0208 	orr.w	r2, r2, #8
 80158f8:	739a      	strb	r2, [r3, #14]
 80158fa:	2200      	movs	r2, #0
 80158fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8015900:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8015902:	69bb      	ldr	r3, [r7, #24]
 8015904:	2200      	movs	r2, #0
 8015906:	741a      	strb	r2, [r3, #16]
 8015908:	2200      	movs	r2, #0
 801590a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	2200      	movs	r2, #0
 8015910:	749a      	strb	r2, [r3, #18]
 8015912:	2200      	movs	r2, #0
 8015914:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8015916:	6838      	ldr	r0, [r7, #0]
 8015918:	f001 fea8 	bl	801766c <ip4_route>
 801591c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00b      	beq.n	801593c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	9302      	str	r3, [sp, #8]
 8015928:	2306      	movs	r3, #6
 801592a:	9301      	str	r3, [sp, #4]
 801592c:	2300      	movs	r3, #0
 801592e:	9300      	str	r3, [sp, #0]
 8015930:	23ff      	movs	r3, #255	; 0xff
 8015932:	683a      	ldr	r2, [r7, #0]
 8015934:	6879      	ldr	r1, [r7, #4]
 8015936:	69f8      	ldr	r0, [r7, #28]
 8015938:	f002 f840 	bl	80179bc <ip4_output_if>
  }
  pbuf_free(p);
 801593c:	69f8      	ldr	r0, [r7, #28]
 801593e:	f7fa fd5b 	bl	80103f8 <pbuf_free>
 8015942:	e000      	b.n	8015946 <tcp_rst+0xda>
    return;
 8015944:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015946:	3720      	adds	r7, #32
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	0801b870 	.word	0x0801b870
 8015950:	0801b8c8 	.word	0x0801b8c8
 8015954:	0801b8f8 	.word	0x0801b8f8

08015958 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b084      	sub	sp, #16
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015964:	2b00      	cmp	r3, #0
 8015966:	d029      	beq.n	80159bc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801596c:	60fb      	str	r3, [r7, #12]
 801596e:	e002      	b.n	8015976 <tcp_rexmit_rto+0x1e>
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	60fb      	str	r3, [r7, #12]
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d1f8      	bne.n	8015970 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2200      	movs	r2, #0
 8015992:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801599a:	2bff      	cmp	r3, #255	; 0xff
 801599c:	d007      	beq.n	80159ae <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80159a4:	3301      	adds	r3, #1
 80159a6:	b2da      	uxtb	r2, r3
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2200      	movs	r2, #0
 80159b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7ff fccf 	bl	8015358 <tcp_output>
 80159ba:	e000      	b.n	80159be <tcp_rexmit_rto+0x66>
    return;
 80159bc:	bf00      	nop
}
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80159c4:	b590      	push	{r4, r7, lr}
 80159c6:	b085      	sub	sp, #20
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d043      	beq.n	8015a5c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	3368      	adds	r3, #104	; 0x68
 80159e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80159e8:	e002      	b.n	80159f0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d011      	beq.n	8015a1c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	4618      	mov	r0, r3
 8015a02:	f7f9 faed 	bl	800efe0 <lwip_htonl>
 8015a06:	4604      	mov	r4, r0
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7f9 fae6 	bl	800efe0 <lwip_htonl>
 8015a14:	4603      	mov	r3, r0
 8015a16:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dbe6      	blt.n	80159ea <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	681a      	ldr	r2, [r3, #0]
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	68ba      	ldr	r2, [r7, #8]
 8015a28:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d103      	bne.n	8015a3a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2200      	movs	r2, #0
 8015a36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a40:	2bff      	cmp	r3, #255	; 0xff
 8015a42:	d007      	beq.n	8015a54 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	b2da      	uxtb	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2200      	movs	r2, #0
 8015a58:	635a      	str	r2, [r3, #52]	; 0x34
 8015a5a:	e000      	b.n	8015a5e <tcp_rexmit+0x9a>
    return;
 8015a5c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8015a5e:	3714      	adds	r7, #20
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bd90      	pop	{r4, r7, pc}

08015a64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d04c      	beq.n	8015b0e <tcp_rexmit_fast+0xaa>
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	7e9b      	ldrb	r3, [r3, #26]
 8015a78:	f003 0304 	and.w	r3, r3, #4
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d146      	bne.n	8015b0e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f7ff ff9f 	bl	80159c4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d208      	bcs.n	8015aa8 <tcp_rexmit_fast+0x44>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	da00      	bge.n	8015aa2 <tcp_rexmit_fast+0x3e>
 8015aa0:	3301      	adds	r3, #1
 8015aa2:	105b      	asrs	r3, r3, #1
 8015aa4:	b29b      	uxth	r3, r3
 8015aa6:	e007      	b.n	8015ab8 <tcp_rexmit_fast+0x54>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	da00      	bge.n	8015ab4 <tcp_rexmit_fast+0x50>
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	105b      	asrs	r3, r3, #1
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d206      	bcs.n	8015ade <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ad4:	005b      	lsls	r3, r3, #1
 8015ad6:	b29a      	uxth	r2, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ae8:	4619      	mov	r1, r3
 8015aea:	0049      	lsls	r1, r1, #1
 8015aec:	440b      	add	r3, r1
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	4413      	add	r3, r2
 8015af2:	b29a      	uxth	r2, r3
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	7e9b      	ldrb	r3, [r3, #26]
 8015afe:	f043 0304 	orr.w	r3, r3, #4
 8015b02:	b2da      	uxtb	r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8015b0e:	bf00      	nop
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b08a      	sub	sp, #40	; 0x28
 8015b1a:	af04      	add	r7, sp, #16
 8015b1c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b22:	3b01      	subs	r3, #1
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7f9 fa5b 	bl	800efe0 <lwip_htonl>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	2100      	movs	r1, #0
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f7fe fd43 	bl	80145bc <tcp_output_alloc_header>
 8015b36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d102      	bne.n	8015b44 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b42:	e021      	b.n	8015b88 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	3304      	adds	r3, #4
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f001 fd8f 	bl	801766c <ip4_route>
 8015b4e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d102      	bne.n	8015b5c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8015b56:	23fc      	movs	r3, #252	; 0xfc
 8015b58:	75fb      	strb	r3, [r7, #23]
 8015b5a:	e010      	b.n	8015b7e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8015b5c:	6879      	ldr	r1, [r7, #4]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	1d1a      	adds	r2, r3, #4
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	7a98      	ldrb	r0, [r3, #10]
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	9302      	str	r3, [sp, #8]
 8015b6a:	2306      	movs	r3, #6
 8015b6c:	9301      	str	r3, [sp, #4]
 8015b6e:	2300      	movs	r3, #0
 8015b70:	9300      	str	r3, [sp, #0]
 8015b72:	4603      	mov	r3, r0
 8015b74:	6938      	ldr	r0, [r7, #16]
 8015b76:	f001 ff21 	bl	80179bc <ip4_output_if>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015b7e:	6938      	ldr	r0, [r7, #16]
 8015b80:	f7fa fc3a 	bl	80103f8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015b84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3718      	adds	r7, #24
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015b90:	b590      	push	{r4, r7, lr}
 8015b92:	b08f      	sub	sp, #60	; 0x3c
 8015b94:	af04      	add	r7, sp, #16
 8015b96:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b9c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8015b9e:	6a3b      	ldr	r3, [r7, #32]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d102      	bne.n	8015baa <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ba8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8015baa:	6a3b      	ldr	r3, [r7, #32]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d101      	bne.n	8015bb4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	e085      	b.n	8015cc0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015bb4:	6a3b      	ldr	r3, [r7, #32]
 8015bb6:	68db      	ldr	r3, [r3, #12]
 8015bb8:	899b      	ldrh	r3, [r3, #12]
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7f9 fa01 	bl	800efc4 <lwip_htons>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	f003 0301 	and.w	r3, r3, #1
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d005      	beq.n	8015bd8 <tcp_zero_window_probe+0x48>
 8015bcc:	6a3b      	ldr	r3, [r7, #32]
 8015bce:	891b      	ldrh	r3, [r3, #8]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d101      	bne.n	8015bd8 <tcp_zero_window_probe+0x48>
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e000      	b.n	8015bda <tcp_zero_window_probe+0x4a>
 8015bd8:	2300      	movs	r3, #0
 8015bda:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015bdc:	7ffb      	ldrb	r3, [r7, #31]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	bf0c      	ite	eq
 8015be2:	2301      	moveq	r3, #1
 8015be4:	2300      	movne	r3, #0
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	68db      	ldr	r3, [r3, #12]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	8bba      	ldrh	r2, [r7, #28]
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f7fe fce1 	bl	80145bc <tcp_output_alloc_header>
 8015bfa:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015bfc:	69bb      	ldr	r3, [r7, #24]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d102      	bne.n	8015c08 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015c02:	f04f 33ff 	mov.w	r3, #4294967295
 8015c06:	e05b      	b.n	8015cc0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	685b      	ldr	r3, [r3, #4]
 8015c0c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015c0e:	7ffb      	ldrb	r3, [r7, #31]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00e      	beq.n	8015c32 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	899b      	ldrh	r3, [r3, #12]
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015c1e:	b29c      	uxth	r4, r3
 8015c20:	2011      	movs	r0, #17
 8015c22:	f7f9 f9cf 	bl	800efc4 <lwip_htons>
 8015c26:	4603      	mov	r3, r0
 8015c28:	4323      	orrs	r3, r4
 8015c2a:	b29a      	uxth	r2, r3
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	819a      	strh	r2, [r3, #12]
 8015c30:	e010      	b.n	8015c54 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	3314      	adds	r3, #20
 8015c38:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015c3a:	6a3b      	ldr	r3, [r7, #32]
 8015c3c:	6858      	ldr	r0, [r3, #4]
 8015c3e:	6a3b      	ldr	r3, [r7, #32]
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	891a      	ldrh	r2, [r3, #8]
 8015c44:	6a3b      	ldr	r3, [r7, #32]
 8015c46:	891b      	ldrh	r3, [r3, #8]
 8015c48:	1ad3      	subs	r3, r2, r3
 8015c4a:	b29b      	uxth	r3, r3
 8015c4c:	2201      	movs	r2, #1
 8015c4e:	6939      	ldr	r1, [r7, #16]
 8015c50:	f7fa fdce 	bl	80107f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015c54:	6a3b      	ldr	r3, [r7, #32]
 8015c56:	68db      	ldr	r3, [r3, #12]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7f9 f9c0 	bl	800efe0 <lwip_htonl>
 8015c60:	4603      	mov	r3, r0
 8015c62:	3301      	adds	r3, #1
 8015c64:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	1ad3      	subs	r3, r2, r3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	da02      	bge.n	8015c78 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	68fa      	ldr	r2, [r7, #12]
 8015c76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	3304      	adds	r3, #4
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f001 fcf5 	bl	801766c <ip4_route>
 8015c82:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d103      	bne.n	8015c92 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8015c8a:	23fc      	movs	r3, #252	; 0xfc
 8015c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c90:	e011      	b.n	8015cb6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015c92:	6879      	ldr	r1, [r7, #4]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	1d1a      	adds	r2, r3, #4
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	7a98      	ldrb	r0, [r3, #10]
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	9302      	str	r3, [sp, #8]
 8015ca0:	2306      	movs	r3, #6
 8015ca2:	9301      	str	r3, [sp, #4]
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	4603      	mov	r3, r0
 8015caa:	69b8      	ldr	r0, [r7, #24]
 8015cac:	f001 fe86 	bl	80179bc <ip4_output_if>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8015cb6:	69b8      	ldr	r0, [r7, #24]
 8015cb8:	f7fa fb9e 	bl	80103f8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015cbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	372c      	adds	r7, #44	; 0x2c
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd90      	pop	{r4, r7, pc}

08015cc8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015cd0:	f7fa fe10 	bl	80108f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015cd4:	4b0a      	ldr	r3, [pc, #40]	; (8015d00 <tcpip_tcp_timer+0x38>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d103      	bne.n	8015ce4 <tcpip_tcp_timer+0x1c>
 8015cdc:	4b09      	ldr	r3, [pc, #36]	; (8015d04 <tcpip_tcp_timer+0x3c>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d005      	beq.n	8015cf0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	4908      	ldr	r1, [pc, #32]	; (8015d08 <tcpip_tcp_timer+0x40>)
 8015ce8:	20fa      	movs	r0, #250	; 0xfa
 8015cea:	f000 f86f 	bl	8015dcc <sys_timeout>
 8015cee:	e002      	b.n	8015cf6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015cf0:	4b06      	ldr	r3, [pc, #24]	; (8015d0c <tcpip_tcp_timer+0x44>)
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	601a      	str	r2, [r3, #0]
  }
}
 8015cf6:	bf00      	nop
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	200079b0 	.word	0x200079b0
 8015d04:	200079c0 	.word	0x200079c0
 8015d08:	08015cc9 	.word	0x08015cc9
 8015d0c:	200040f0 	.word	0x200040f0

08015d10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015d14:	4b0a      	ldr	r3, [pc, #40]	; (8015d40 <tcp_timer_needed+0x30>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d10f      	bne.n	8015d3c <tcp_timer_needed+0x2c>
 8015d1c:	4b09      	ldr	r3, [pc, #36]	; (8015d44 <tcp_timer_needed+0x34>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d103      	bne.n	8015d2c <tcp_timer_needed+0x1c>
 8015d24:	4b08      	ldr	r3, [pc, #32]	; (8015d48 <tcp_timer_needed+0x38>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d007      	beq.n	8015d3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015d2c:	4b04      	ldr	r3, [pc, #16]	; (8015d40 <tcp_timer_needed+0x30>)
 8015d2e:	2201      	movs	r2, #1
 8015d30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015d32:	2200      	movs	r2, #0
 8015d34:	4905      	ldr	r1, [pc, #20]	; (8015d4c <tcp_timer_needed+0x3c>)
 8015d36:	20fa      	movs	r0, #250	; 0xfa
 8015d38:	f000 f848 	bl	8015dcc <sys_timeout>
  }
}
 8015d3c:	bf00      	nop
 8015d3e:	bd80      	pop	{r7, pc}
 8015d40:	200040f0 	.word	0x200040f0
 8015d44:	200079b0 	.word	0x200079b0
 8015d48:	200079c0 	.word	0x200079c0
 8015d4c:	08015cc9 	.word	0x08015cc9

08015d50 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	4903      	ldr	r1, [pc, #12]	; (8015d78 <cyclic_timer+0x28>)
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f000 f82e 	bl	8015dcc <sys_timeout>
}
 8015d70:	bf00      	nop
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	08015d51 	.word	0x08015d51

08015d7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015d82:	2301      	movs	r3, #1
 8015d84:	607b      	str	r3, [r7, #4]
 8015d86:	e00e      	b.n	8015da6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8015d88:	4a0d      	ldr	r2, [pc, #52]	; (8015dc0 <sys_timeouts_init+0x44>)
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	00db      	lsls	r3, r3, #3
 8015d94:	4a0a      	ldr	r2, [pc, #40]	; (8015dc0 <sys_timeouts_init+0x44>)
 8015d96:	4413      	add	r3, r2
 8015d98:	461a      	mov	r2, r3
 8015d9a:	490a      	ldr	r1, [pc, #40]	; (8015dc4 <sys_timeouts_init+0x48>)
 8015d9c:	f000 f816 	bl	8015dcc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	3301      	adds	r3, #1
 8015da4:	607b      	str	r3, [r7, #4]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d9ed      	bls.n	8015d88 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8015dac:	f7f3 ff46 	bl	8009c3c <sys_now>
 8015db0:	4602      	mov	r2, r0
 8015db2:	4b05      	ldr	r3, [pc, #20]	; (8015dc8 <sys_timeouts_init+0x4c>)
 8015db4:	601a      	str	r2, [r3, #0]
}
 8015db6:	bf00      	nop
 8015db8:	3708      	adds	r7, #8
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	0801c690 	.word	0x0801c690
 8015dc4:	08015d51 	.word	0x08015d51
 8015dc8:	200040ec 	.word	0x200040ec

08015dcc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b088      	sub	sp, #32
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	60f8      	str	r0, [r7, #12]
 8015dd4:	60b9      	str	r1, [r7, #8]
 8015dd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015dd8:	200a      	movs	r0, #10
 8015dda:	f7f9 fcff 	bl	800f7dc <memp_malloc>
 8015dde:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d10a      	bne.n	8015dfc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	f040 8084 	bne.w	8015ef6 <sys_timeout+0x12a>
 8015dee:	4b44      	ldr	r3, [pc, #272]	; (8015f00 <sys_timeout+0x134>)
 8015df0:	22d4      	movs	r2, #212	; 0xd4
 8015df2:	4944      	ldr	r1, [pc, #272]	; (8015f04 <sys_timeout+0x138>)
 8015df4:	4844      	ldr	r0, [pc, #272]	; (8015f08 <sys_timeout+0x13c>)
 8015df6:	f002 ffdb 	bl	8018db0 <iprintf>
    return;
 8015dfa:	e07c      	b.n	8015ef6 <sys_timeout+0x12a>
  }

  now = sys_now();
 8015dfc:	f7f3 ff1e 	bl	8009c3c <sys_now>
 8015e00:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8015e02:	4b42      	ldr	r3, [pc, #264]	; (8015f0c <sys_timeout+0x140>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d105      	bne.n	8015e16 <sys_timeout+0x4a>
    diff = 0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8015e0e:	4a40      	ldr	r2, [pc, #256]	; (8015f10 <sys_timeout+0x144>)
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	6013      	str	r3, [r2, #0]
 8015e14:	e004      	b.n	8015e20 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8015e16:	4b3e      	ldr	r3, [pc, #248]	; (8015f10 <sys_timeout+0x144>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	693a      	ldr	r2, [r7, #16]
 8015e1c:	1ad3      	subs	r3, r2, r3
 8015e1e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	2200      	movs	r2, #0
 8015e24:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	68ba      	ldr	r2, [r7, #8]
 8015e2a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8015e32:	68fa      	ldr	r2, [r7, #12]
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	441a      	add	r2, r3
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015e3c:	4b33      	ldr	r3, [pc, #204]	; (8015f0c <sys_timeout+0x140>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d103      	bne.n	8015e4c <sys_timeout+0x80>
    next_timeout = timeout;
 8015e44:	4a31      	ldr	r2, [pc, #196]	; (8015f0c <sys_timeout+0x140>)
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	6013      	str	r3, [r2, #0]
    return;
 8015e4a:	e055      	b.n	8015ef8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8015e4c:	4b2f      	ldr	r3, [pc, #188]	; (8015f0c <sys_timeout+0x140>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	68fa      	ldr	r2, [r7, #12]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d20f      	bcs.n	8015e78 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8015e58:	4b2c      	ldr	r3, [pc, #176]	; (8015f0c <sys_timeout+0x140>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	6859      	ldr	r1, [r3, #4]
 8015e5e:	4b2b      	ldr	r3, [pc, #172]	; (8015f0c <sys_timeout+0x140>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	68fa      	ldr	r2, [r7, #12]
 8015e64:	1a8a      	subs	r2, r1, r2
 8015e66:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8015e68:	4b28      	ldr	r3, [pc, #160]	; (8015f0c <sys_timeout+0x140>)
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015e70:	4a26      	ldr	r2, [pc, #152]	; (8015f0c <sys_timeout+0x140>)
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	6013      	str	r3, [r2, #0]
 8015e76:	e03f      	b.n	8015ef8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015e78:	4b24      	ldr	r3, [pc, #144]	; (8015f0c <sys_timeout+0x140>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	61fb      	str	r3, [r7, #28]
 8015e7e:	e036      	b.n	8015eee <sys_timeout+0x122>
      timeout->time -= t->time;
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	685a      	ldr	r2, [r3, #4]
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	1ad2      	subs	r2, r2, r3
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d006      	beq.n	8015ea4 <sys_timeout+0xd8>
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	685a      	ldr	r2, [r3, #4]
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d921      	bls.n	8015ee8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d009      	beq.n	8015ec0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	6859      	ldr	r1, [r3, #4]
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	685a      	ldr	r2, [r3, #4]
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	1a8a      	subs	r2, r1, r2
 8015ebc:	605a      	str	r2, [r3, #4]
 8015ebe:	e00b      	b.n	8015ed8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	68fa      	ldr	r2, [r7, #12]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d206      	bcs.n	8015ed8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8015eca:	4b10      	ldr	r3, [pc, #64]	; (8015f0c <sys_timeout+0x140>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	685a      	ldr	r2, [r3, #4]
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	441a      	add	r2, r3
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8015ed8:	69fb      	ldr	r3, [r7, #28]
 8015eda:	681a      	ldr	r2, [r3, #0]
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015ee0:	69fb      	ldr	r3, [r7, #28]
 8015ee2:	697a      	ldr	r2, [r7, #20]
 8015ee4:	601a      	str	r2, [r3, #0]
        break;
 8015ee6:	e007      	b.n	8015ef8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	61fb      	str	r3, [r7, #28]
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d1c5      	bne.n	8015e80 <sys_timeout+0xb4>
 8015ef4:	e000      	b.n	8015ef8 <sys_timeout+0x12c>
    return;
 8015ef6:	bf00      	nop
      }
    }
  }
}
 8015ef8:	3720      	adds	r7, #32
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	0801bcd8 	.word	0x0801bcd8
 8015f04:	0801bd30 	.word	0x0801bd30
 8015f08:	0801bd70 	.word	0x0801bd70
 8015f0c:	200040e8 	.word	0x200040e8
 8015f10:	200040ec 	.word	0x200040ec

08015f14 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b086      	sub	sp, #24
 8015f18:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8015f1a:	4b24      	ldr	r3, [pc, #144]	; (8015fac <sys_check_timeouts+0x98>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d03f      	beq.n	8015fa2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8015f22:	f7f3 fe8b 	bl	8009c3c <sys_now>
 8015f26:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8015f28:	4b21      	ldr	r3, [pc, #132]	; (8015fb0 <sys_check_timeouts+0x9c>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	68fa      	ldr	r2, [r7, #12]
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8015f36:	4b1d      	ldr	r3, [pc, #116]	; (8015fac <sys_check_timeouts+0x98>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d02c      	beq.n	8015f9c <sys_check_timeouts+0x88>
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	697a      	ldr	r2, [r7, #20]
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d327      	bcc.n	8015f9c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	685a      	ldr	r2, [r3, #4]
 8015f54:	4b16      	ldr	r3, [pc, #88]	; (8015fb0 <sys_check_timeouts+0x9c>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4413      	add	r3, r2
 8015f5a:	4a15      	ldr	r2, [pc, #84]	; (8015fb0 <sys_check_timeouts+0x9c>)
 8015f5c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	697a      	ldr	r2, [r7, #20]
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4a0f      	ldr	r2, [pc, #60]	; (8015fac <sys_check_timeouts+0x98>)
 8015f6e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	689b      	ldr	r3, [r3, #8]
 8015f74:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015f7c:	68b9      	ldr	r1, [r7, #8]
 8015f7e:	200a      	movs	r0, #10
 8015f80:	f7f9 fca2 	bl	800f8c8 <memp_free>
        if (handler != NULL) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d008      	beq.n	8015f9c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8015f8a:	480a      	ldr	r0, [pc, #40]	; (8015fb4 <sys_check_timeouts+0xa0>)
 8015f8c:	f002 fe6a 	bl	8018c64 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6838      	ldr	r0, [r7, #0]
 8015f94:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8015f96:	4807      	ldr	r0, [pc, #28]	; (8015fb4 <sys_check_timeouts+0xa0>)
 8015f98:	f002 fe73 	bl	8018c82 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8015f9c:	7cfb      	ldrb	r3, [r7, #19]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d1c7      	bne.n	8015f32 <sys_check_timeouts+0x1e>
  }
}
 8015fa2:	bf00      	nop
 8015fa4:	3718      	adds	r7, #24
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}
 8015faa:	bf00      	nop
 8015fac:	200040e8 	.word	0x200040e8
 8015fb0:	200040ec 	.word	0x200040ec
 8015fb4:	200048f0 	.word	0x200048f0

08015fb8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b082      	sub	sp, #8
 8015fbc:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8015fbe:	4b0f      	ldr	r3, [pc, #60]	; (8015ffc <sys_timeouts_sleeptime+0x44>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d102      	bne.n	8015fcc <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8015fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015fca:	e013      	b.n	8015ff4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8015fcc:	f7f3 fe36 	bl	8009c3c <sys_now>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	4b0b      	ldr	r3, [pc, #44]	; (8016000 <sys_timeouts_sleeptime+0x48>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	1ad3      	subs	r3, r2, r3
 8015fd8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8015fda:	4b08      	ldr	r3, [pc, #32]	; (8015ffc <sys_timeouts_sleeptime+0x44>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d901      	bls.n	8015fea <sys_timeouts_sleeptime+0x32>
    return 0;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	e004      	b.n	8015ff4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8015fea:	4b04      	ldr	r3, [pc, #16]	; (8015ffc <sys_timeouts_sleeptime+0x44>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	685a      	ldr	r2, [r3, #4]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	1ad3      	subs	r3, r2, r3
  }
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3708      	adds	r7, #8
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}
 8015ffc:	200040e8 	.word	0x200040e8
 8016000:	200040ec 	.word	0x200040ec

08016004 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b084      	sub	sp, #16
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
 801600c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801600e:	4b0f      	ldr	r3, [pc, #60]	; (801604c <sys_timeouts_mbox_fetch+0x48>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d105      	bne.n	8016022 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016016:	2200      	movs	r2, #0
 8016018:	6839      	ldr	r1, [r7, #0]
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f002 fced 	bl	80189fa <sys_arch_mbox_fetch>
    return;
 8016020:	e011      	b.n	8016046 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016022:	f7ff ffc9 	bl	8015fb8 <sys_timeouts_sleeptime>
 8016026:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d008      	beq.n	8016040 <sys_timeouts_mbox_fetch+0x3c>
 801602e:	68fa      	ldr	r2, [r7, #12]
 8016030:	6839      	ldr	r1, [r7, #0]
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f002 fce1 	bl	80189fa <sys_arch_mbox_fetch>
 8016038:	4603      	mov	r3, r0
 801603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801603e:	d102      	bne.n	8016046 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016040:	f7ff ff68 	bl	8015f14 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016044:	e7e3      	b.n	801600e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8016046:	3710      	adds	r7, #16
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	200040e8 	.word	0x200040e8

08016050 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016050:	b480      	push	{r7}
 8016052:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016054:	bf00      	nop
 8016056:	46bd      	mov	sp, r7
 8016058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605c:	4770      	bx	lr
	...

08016060 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016060:	b480      	push	{r7}
 8016062:	b083      	sub	sp, #12
 8016064:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801606a:	4b17      	ldr	r3, [pc, #92]	; (80160c8 <udp_new_port+0x68>)
 801606c:	881b      	ldrh	r3, [r3, #0]
 801606e:	1c5a      	adds	r2, r3, #1
 8016070:	b291      	uxth	r1, r2
 8016072:	4a15      	ldr	r2, [pc, #84]	; (80160c8 <udp_new_port+0x68>)
 8016074:	8011      	strh	r1, [r2, #0]
 8016076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801607a:	4293      	cmp	r3, r2
 801607c:	d103      	bne.n	8016086 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801607e:	4b12      	ldr	r3, [pc, #72]	; (80160c8 <udp_new_port+0x68>)
 8016080:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016084:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016086:	4b11      	ldr	r3, [pc, #68]	; (80160cc <udp_new_port+0x6c>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	603b      	str	r3, [r7, #0]
 801608c:	e011      	b.n	80160b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	8a5a      	ldrh	r2, [r3, #18]
 8016092:	4b0d      	ldr	r3, [pc, #52]	; (80160c8 <udp_new_port+0x68>)
 8016094:	881b      	ldrh	r3, [r3, #0]
 8016096:	429a      	cmp	r2, r3
 8016098:	d108      	bne.n	80160ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801609a:	88fb      	ldrh	r3, [r7, #6]
 801609c:	3301      	adds	r3, #1
 801609e:	80fb      	strh	r3, [r7, #6]
 80160a0:	88fb      	ldrh	r3, [r7, #6]
 80160a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80160a6:	d3e0      	bcc.n	801606a <udp_new_port+0xa>
        return 0;
 80160a8:	2300      	movs	r3, #0
 80160aa:	e007      	b.n	80160bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	603b      	str	r3, [r7, #0]
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1ea      	bne.n	801608e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80160b8:	4b03      	ldr	r3, [pc, #12]	; (80160c8 <udp_new_port+0x68>)
 80160ba:	881b      	ldrh	r3, [r3, #0]
}
 80160bc:	4618      	mov	r0, r3
 80160be:	370c      	adds	r7, #12
 80160c0:	46bd      	mov	sp, r7
 80160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c6:	4770      	bx	lr
 80160c8:	20000030 	.word	0x20000030
 80160cc:	200079c8 	.word	0x200079c8

080160d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80160d0:	b480      	push	{r7}
 80160d2:	b085      	sub	sp, #20
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	60f8      	str	r0, [r7, #12]
 80160d8:	60b9      	str	r1, [r7, #8]
 80160da:	4613      	mov	r3, r2
 80160dc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80160de:	79fb      	ldrb	r3, [r7, #7]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d018      	beq.n	8016116 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d013      	beq.n	8016112 <udp_input_local_match+0x42>
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d00f      	beq.n	8016112 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80160f2:	4b14      	ldr	r3, [pc, #80]	; (8016144 <udp_input_local_match+0x74>)
 80160f4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80160f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160fa:	d00a      	beq.n	8016112 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	681a      	ldr	r2, [r3, #0]
 8016100:	4b10      	ldr	r3, [pc, #64]	; (8016144 <udp_input_local_match+0x74>)
 8016102:	695b      	ldr	r3, [r3, #20]
 8016104:	405a      	eors	r2, r3
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	3308      	adds	r3, #8
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801610e:	2b00      	cmp	r3, #0
 8016110:	d110      	bne.n	8016134 <udp_input_local_match+0x64>
          return 1;
 8016112:	2301      	movs	r3, #1
 8016114:	e00f      	b.n	8016136 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d009      	beq.n	8016130 <udp_input_local_match+0x60>
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d005      	beq.n	8016130 <udp_input_local_match+0x60>
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	681a      	ldr	r2, [r3, #0]
 8016128:	4b06      	ldr	r3, [pc, #24]	; (8016144 <udp_input_local_match+0x74>)
 801612a:	695b      	ldr	r3, [r3, #20]
 801612c:	429a      	cmp	r2, r3
 801612e:	d101      	bne.n	8016134 <udp_input_local_match+0x64>
      return 1;
 8016130:	2301      	movs	r3, #1
 8016132:	e000      	b.n	8016136 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016134:	2300      	movs	r3, #0
}
 8016136:	4618      	mov	r0, r3
 8016138:	3714      	adds	r7, #20
 801613a:	46bd      	mov	sp, r7
 801613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016140:	4770      	bx	lr
 8016142:	bf00      	nop
 8016144:	200048f4 	.word	0x200048f4

08016148 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016148:	b590      	push	{r4, r7, lr}
 801614a:	b08d      	sub	sp, #52	; 0x34
 801614c:	af02      	add	r7, sp, #8
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016152:	2300      	movs	r3, #0
 8016154:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	895b      	ldrh	r3, [r3, #10]
 801615a:	2b07      	cmp	r3, #7
 801615c:	d803      	bhi.n	8016166 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f7fa f94a 	bl	80103f8 <pbuf_free>
    goto end;
 8016164:	e0c6      	b.n	80162f4 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801616c:	4b63      	ldr	r3, [pc, #396]	; (80162fc <udp_input+0x1b4>)
 801616e:	695a      	ldr	r2, [r3, #20]
 8016170:	4b62      	ldr	r3, [pc, #392]	; (80162fc <udp_input+0x1b4>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	4619      	mov	r1, r3
 8016176:	4610      	mov	r0, r2
 8016178:	f001 fcf2 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 801617c:	4603      	mov	r3, r0
 801617e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	881b      	ldrh	r3, [r3, #0]
 8016184:	b29b      	uxth	r3, r3
 8016186:	4618      	mov	r0, r3
 8016188:	f7f8 ff1c 	bl	800efc4 <lwip_htons>
 801618c:	4603      	mov	r3, r0
 801618e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	885b      	ldrh	r3, [r3, #2]
 8016194:	b29b      	uxth	r3, r3
 8016196:	4618      	mov	r0, r3
 8016198:	f7f8 ff14 	bl	800efc4 <lwip_htons>
 801619c:	4603      	mov	r3, r0
 801619e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80161a0:	2300      	movs	r3, #0
 80161a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80161a4:	2300      	movs	r3, #0
 80161a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80161a8:	2300      	movs	r3, #0
 80161aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80161ac:	4b54      	ldr	r3, [pc, #336]	; (8016300 <udp_input+0x1b8>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	627b      	str	r3, [r7, #36]	; 0x24
 80161b2:	e03b      	b.n	801622c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80161b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b6:	8a5b      	ldrh	r3, [r3, #18]
 80161b8:	89fa      	ldrh	r2, [r7, #14]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	d131      	bne.n	8016222 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80161be:	7cfb      	ldrb	r3, [r7, #19]
 80161c0:	461a      	mov	r2, r3
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161c6:	f7ff ff83 	bl	80160d0 <udp_input_local_match>
 80161ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d028      	beq.n	8016222 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80161d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d2:	7c1b      	ldrb	r3, [r3, #16]
 80161d4:	f003 0304 	and.w	r3, r3, #4
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d104      	bne.n	80161e6 <udp_input+0x9e>
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d101      	bne.n	80161e6 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80161e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e8:	8a9b      	ldrh	r3, [r3, #20]
 80161ea:	8a3a      	ldrh	r2, [r7, #16]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d118      	bne.n	8016222 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80161f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d005      	beq.n	8016204 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80161f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fa:	685a      	ldr	r2, [r3, #4]
 80161fc:	4b3f      	ldr	r3, [pc, #252]	; (80162fc <udp_input+0x1b4>)
 80161fe:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016200:	429a      	cmp	r2, r3
 8016202:	d10e      	bne.n	8016222 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d014      	beq.n	8016234 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	68da      	ldr	r2, [r3, #12]
 801620e:	6a3b      	ldr	r3, [r7, #32]
 8016210:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016212:	4b3b      	ldr	r3, [pc, #236]	; (8016300 <udp_input+0x1b8>)
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016218:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801621a:	4a39      	ldr	r2, [pc, #228]	; (8016300 <udp_input+0x1b8>)
 801621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016220:	e008      	b.n	8016234 <udp_input+0xec>
      }
    }

    prev = pcb;
 8016222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016224:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016228:	68db      	ldr	r3, [r3, #12]
 801622a:	627b      	str	r3, [r7, #36]	; 0x24
 801622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622e:	2b00      	cmp	r3, #0
 8016230:	d1c0      	bne.n	80161b4 <udp_input+0x6c>
 8016232:	e000      	b.n	8016236 <udp_input+0xee>
        break;
 8016234:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	2b00      	cmp	r3, #0
 801623a:	d101      	bne.n	8016240 <udp_input+0xf8>
    pcb = uncon_pcb;
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	2b00      	cmp	r3, #0
 8016244:	d002      	beq.n	801624c <udp_input+0x104>
    for_us = 1;
 8016246:	2301      	movs	r3, #1
 8016248:	76fb      	strb	r3, [r7, #27]
 801624a:	e00a      	b.n	8016262 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	3304      	adds	r3, #4
 8016250:	681a      	ldr	r2, [r3, #0]
 8016252:	4b2a      	ldr	r3, [pc, #168]	; (80162fc <udp_input+0x1b4>)
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	429a      	cmp	r2, r3
 8016258:	bf0c      	ite	eq
 801625a:	2301      	moveq	r3, #1
 801625c:	2300      	movne	r3, #0
 801625e:	b2db      	uxtb	r3, r3
 8016260:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016262:	7efb      	ldrb	r3, [r7, #27]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d042      	beq.n	80162ee <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8016268:	f06f 0107 	mvn.w	r1, #7
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f7fa f89f 	bl	80103b0 <pbuf_header>
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d00a      	beq.n	801628e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8016278:	4b22      	ldr	r3, [pc, #136]	; (8016304 <udp_input+0x1bc>)
 801627a:	f240 1255 	movw	r2, #341	; 0x155
 801627e:	4922      	ldr	r1, [pc, #136]	; (8016308 <udp_input+0x1c0>)
 8016280:	4822      	ldr	r0, [pc, #136]	; (801630c <udp_input+0x1c4>)
 8016282:	f002 fd95 	bl	8018db0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f7fa f8b6 	bl	80103f8 <pbuf_free>
      goto end;
 801628c:	e032      	b.n	80162f4 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016290:	2b00      	cmp	r3, #0
 8016292:	d012      	beq.n	80162ba <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016296:	699b      	ldr	r3, [r3, #24]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d00a      	beq.n	80162b2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	699c      	ldr	r4, [r3, #24]
 80162a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a2:	69d8      	ldr	r0, [r3, #28]
 80162a4:	8a3b      	ldrh	r3, [r7, #16]
 80162a6:	9300      	str	r3, [sp, #0]
 80162a8:	4b19      	ldr	r3, [pc, #100]	; (8016310 <udp_input+0x1c8>)
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80162b0:	e021      	b.n	80162f6 <udp_input+0x1ae>
        pbuf_free(p);
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f7fa f8a0 	bl	80103f8 <pbuf_free>
        goto end;
 80162b8:	e01c      	b.n	80162f4 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80162ba:	7cfb      	ldrb	r3, [r7, #19]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d112      	bne.n	80162e6 <udp_input+0x19e>
 80162c0:	4b0e      	ldr	r3, [pc, #56]	; (80162fc <udp_input+0x1b4>)
 80162c2:	695b      	ldr	r3, [r3, #20]
 80162c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162c8:	2be0      	cmp	r3, #224	; 0xe0
 80162ca:	d00c      	beq.n	80162e6 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80162cc:	4b0b      	ldr	r3, [pc, #44]	; (80162fc <udp_input+0x1b4>)
 80162ce:	899b      	ldrh	r3, [r3, #12]
 80162d0:	3308      	adds	r3, #8
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	b21b      	sxth	r3, r3
 80162d6:	4619      	mov	r1, r3
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f7fa f87b 	bl	80103d4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80162de:	2103      	movs	r1, #3
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f001 f93b 	bl	801755c <icmp_dest_unreach>
      pbuf_free(p);
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7fa f886 	bl	80103f8 <pbuf_free>
  return;
 80162ec:	e003      	b.n	80162f6 <udp_input+0x1ae>
    pbuf_free(p);
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f7fa f882 	bl	80103f8 <pbuf_free>
  return;
 80162f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80162f6:	372c      	adds	r7, #44	; 0x2c
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd90      	pop	{r4, r7, pc}
 80162fc:	200048f4 	.word	0x200048f4
 8016300:	200079c8 	.word	0x200079c8
 8016304:	0801bd98 	.word	0x0801bd98
 8016308:	0801bdec 	.word	0x0801bdec
 801630c:	0801be00 	.word	0x0801be00
 8016310:	20004904 	.word	0x20004904

08016314 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b086      	sub	sp, #24
 8016318:	af00      	add	r7, sp, #0
 801631a:	60f8      	str	r0, [r7, #12]
 801631c:	60b9      	str	r1, [r7, #8]
 801631e:	4613      	mov	r3, r2
 8016320:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d101      	bne.n	801632c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016328:	4b30      	ldr	r3, [pc, #192]	; (80163ec <udp_bind+0xd8>)
 801632a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d002      	beq.n	8016338 <udp_bind+0x24>
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d102      	bne.n	801633e <udp_bind+0x2a>
    return ERR_VAL;
 8016338:	f06f 0305 	mvn.w	r3, #5
 801633c:	e052      	b.n	80163e4 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801633e:	2300      	movs	r3, #0
 8016340:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016342:	4b2b      	ldr	r3, [pc, #172]	; (80163f0 <udp_bind+0xdc>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	617b      	str	r3, [r7, #20]
 8016348:	e009      	b.n	801635e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801634a:	68fa      	ldr	r2, [r7, #12]
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	429a      	cmp	r2, r3
 8016350:	d102      	bne.n	8016358 <udp_bind+0x44>
      rebind = 1;
 8016352:	2301      	movs	r3, #1
 8016354:	74fb      	strb	r3, [r7, #19]
      break;
 8016356:	e005      	b.n	8016364 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	617b      	str	r3, [r7, #20]
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d1f2      	bne.n	801634a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016364:	88fb      	ldrh	r3, [r7, #6]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d109      	bne.n	801637e <udp_bind+0x6a>
    port = udp_new_port();
 801636a:	f7ff fe79 	bl	8016060 <udp_new_port>
 801636e:	4603      	mov	r3, r0
 8016370:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016372:	88fb      	ldrh	r3, [r7, #6]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d11e      	bne.n	80163b6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016378:	f06f 0307 	mvn.w	r3, #7
 801637c:	e032      	b.n	80163e4 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801637e:	4b1c      	ldr	r3, [pc, #112]	; (80163f0 <udp_bind+0xdc>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	617b      	str	r3, [r7, #20]
 8016384:	e014      	b.n	80163b0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8016386:	68fa      	ldr	r2, [r7, #12]
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	429a      	cmp	r2, r3
 801638c:	d00d      	beq.n	80163aa <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	8a5b      	ldrh	r3, [r3, #18]
 8016392:	88fa      	ldrh	r2, [r7, #6]
 8016394:	429a      	cmp	r2, r3
 8016396:	d108      	bne.n	80163aa <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8016398:	697b      	ldr	r3, [r7, #20]
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d102      	bne.n	80163aa <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80163a4:	f06f 0307 	mvn.w	r3, #7
 80163a8:	e01c      	b.n	80163e4 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	617b      	str	r3, [r7, #20]
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d1e7      	bne.n	8016386 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d002      	beq.n	80163c2 <udp_bind+0xae>
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	e000      	b.n	80163c4 <udp_bind+0xb0>
 80163c2:	2300      	movs	r3, #0
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	88fa      	ldrh	r2, [r7, #6]
 80163cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80163ce:	7cfb      	ldrb	r3, [r7, #19]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d106      	bne.n	80163e2 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80163d4:	4b06      	ldr	r3, [pc, #24]	; (80163f0 <udp_bind+0xdc>)
 80163d6:	681a      	ldr	r2, [r3, #0]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80163dc:	4a04      	ldr	r2, [pc, #16]	; (80163f0 <udp_bind+0xdc>)
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80163e2:	2300      	movs	r3, #0
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3718      	adds	r7, #24
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	0801c6a8 	.word	0x0801c6a8
 80163f0:	200079c8 	.word	0x200079c8

080163f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b085      	sub	sp, #20
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	68ba      	ldr	r2, [r7, #8]
 8016404:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	61da      	str	r2, [r3, #28]
}
 801640c:	bf00      	nop
 801640e:	3714      	adds	r7, #20
 8016410:	46bd      	mov	sp, r7
 8016412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016416:	4770      	bx	lr

08016418 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016420:	4b15      	ldr	r3, [pc, #84]	; (8016478 <udp_remove+0x60>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	429a      	cmp	r2, r3
 8016428:	d105      	bne.n	8016436 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801642a:	4b13      	ldr	r3, [pc, #76]	; (8016478 <udp_remove+0x60>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	4a11      	ldr	r2, [pc, #68]	; (8016478 <udp_remove+0x60>)
 8016432:	6013      	str	r3, [r2, #0]
 8016434:	e017      	b.n	8016466 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016436:	4b10      	ldr	r3, [pc, #64]	; (8016478 <udp_remove+0x60>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	60fb      	str	r3, [r7, #12]
 801643c:	e010      	b.n	8016460 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	68db      	ldr	r3, [r3, #12]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d009      	beq.n	801645a <udp_remove+0x42>
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	687a      	ldr	r2, [r7, #4]
 801644c:	429a      	cmp	r2, r3
 801644e:	d104      	bne.n	801645a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	68da      	ldr	r2, [r3, #12]
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	60da      	str	r2, [r3, #12]
        break;
 8016458:	e005      	b.n	8016466 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	68db      	ldr	r3, [r3, #12]
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d1eb      	bne.n	801643e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016466:	6879      	ldr	r1, [r7, #4]
 8016468:	2000      	movs	r0, #0
 801646a:	f7f9 fa2d 	bl	800f8c8 <memp_free>
}
 801646e:	bf00      	nop
 8016470:	3710      	adds	r7, #16
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}
 8016476:	bf00      	nop
 8016478:	200079c8 	.word	0x200079c8

0801647c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016482:	2000      	movs	r0, #0
 8016484:	f7f9 f9aa 	bl	800f7dc <memp_malloc>
 8016488:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d007      	beq.n	80164a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016490:	2220      	movs	r2, #32
 8016492:	2100      	movs	r1, #0
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f002 fc83 	bl	8018da0 <memset>
    pcb->ttl = UDP_TTL;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	22ff      	movs	r2, #255	; 0xff
 801649e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80164a0:	687b      	ldr	r3, [r7, #4]
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3708      	adds	r7, #8
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}

080164aa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80164aa:	b580      	push	{r7, lr}
 80164ac:	b084      	sub	sp, #16
 80164ae:	af00      	add	r7, sp, #0
 80164b0:	4603      	mov	r3, r0
 80164b2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80164b4:	f7ff ffe2 	bl	801647c <udp_new>
 80164b8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80164ba:	68fb      	ldr	r3, [r7, #12]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80164c4:	b480      	push	{r7}
 80164c6:	b085      	sub	sp, #20
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d01e      	beq.n	8016512 <udp_netif_ip_addr_changed+0x4e>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d01a      	beq.n	8016512 <udp_netif_ip_addr_changed+0x4e>
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d017      	beq.n	8016512 <udp_netif_ip_addr_changed+0x4e>
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d013      	beq.n	8016512 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80164ea:	4b0d      	ldr	r3, [pc, #52]	; (8016520 <udp_netif_ip_addr_changed+0x5c>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	60fb      	str	r3, [r7, #12]
 80164f0:	e00c      	b.n	801650c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681a      	ldr	r2, [r3, #0]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d103      	bne.n	8016506 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	68db      	ldr	r3, [r3, #12]
 801650a:	60fb      	str	r3, [r7, #12]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d1ef      	bne.n	80164f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016512:	bf00      	nop
 8016514:	3714      	adds	r7, #20
 8016516:	46bd      	mov	sp, r7
 8016518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651c:	4770      	bx	lr
 801651e:	bf00      	nop
 8016520:	200079c8 	.word	0x200079c8

08016524 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801652c:	4915      	ldr	r1, [pc, #84]	; (8016584 <etharp_free_entry+0x60>)
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	4613      	mov	r3, r2
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	4413      	add	r3, r2
 8016536:	00db      	lsls	r3, r3, #3
 8016538:	440b      	add	r3, r1
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d013      	beq.n	8016568 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016540:	4910      	ldr	r1, [pc, #64]	; (8016584 <etharp_free_entry+0x60>)
 8016542:	687a      	ldr	r2, [r7, #4]
 8016544:	4613      	mov	r3, r2
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	4413      	add	r3, r2
 801654a:	00db      	lsls	r3, r3, #3
 801654c:	440b      	add	r3, r1
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4618      	mov	r0, r3
 8016552:	f7f9 ff51 	bl	80103f8 <pbuf_free>
    arp_table[i].q = NULL;
 8016556:	490b      	ldr	r1, [pc, #44]	; (8016584 <etharp_free_entry+0x60>)
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	4613      	mov	r3, r2
 801655c:	005b      	lsls	r3, r3, #1
 801655e:	4413      	add	r3, r2
 8016560:	00db      	lsls	r3, r3, #3
 8016562:	440b      	add	r3, r1
 8016564:	2200      	movs	r2, #0
 8016566:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016568:	4906      	ldr	r1, [pc, #24]	; (8016584 <etharp_free_entry+0x60>)
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	4613      	mov	r3, r2
 801656e:	005b      	lsls	r3, r3, #1
 8016570:	4413      	add	r3, r2
 8016572:	00db      	lsls	r3, r3, #3
 8016574:	440b      	add	r3, r1
 8016576:	3314      	adds	r3, #20
 8016578:	2200      	movs	r2, #0
 801657a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801657c:	bf00      	nop
 801657e:	3708      	adds	r7, #8
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}
 8016584:	200040f4 	.word	0x200040f4

08016588 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b082      	sub	sp, #8
 801658c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801658e:	2300      	movs	r3, #0
 8016590:	71fb      	strb	r3, [r7, #7]
 8016592:	e096      	b.n	80166c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016594:	79fa      	ldrb	r2, [r7, #7]
 8016596:	494f      	ldr	r1, [pc, #316]	; (80166d4 <etharp_tmr+0x14c>)
 8016598:	4613      	mov	r3, r2
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	4413      	add	r3, r2
 801659e:	00db      	lsls	r3, r3, #3
 80165a0:	440b      	add	r3, r1
 80165a2:	3314      	adds	r3, #20
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80165a8:	79bb      	ldrb	r3, [r7, #6]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	f000 8086 	beq.w	80166bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80165b0:	79fa      	ldrb	r2, [r7, #7]
 80165b2:	4948      	ldr	r1, [pc, #288]	; (80166d4 <etharp_tmr+0x14c>)
 80165b4:	4613      	mov	r3, r2
 80165b6:	005b      	lsls	r3, r3, #1
 80165b8:	4413      	add	r3, r2
 80165ba:	00db      	lsls	r3, r3, #3
 80165bc:	440b      	add	r3, r1
 80165be:	3312      	adds	r3, #18
 80165c0:	881b      	ldrh	r3, [r3, #0]
 80165c2:	3301      	adds	r3, #1
 80165c4:	b298      	uxth	r0, r3
 80165c6:	4943      	ldr	r1, [pc, #268]	; (80166d4 <etharp_tmr+0x14c>)
 80165c8:	4613      	mov	r3, r2
 80165ca:	005b      	lsls	r3, r3, #1
 80165cc:	4413      	add	r3, r2
 80165ce:	00db      	lsls	r3, r3, #3
 80165d0:	440b      	add	r3, r1
 80165d2:	3312      	adds	r3, #18
 80165d4:	4602      	mov	r2, r0
 80165d6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165d8:	79fa      	ldrb	r2, [r7, #7]
 80165da:	493e      	ldr	r1, [pc, #248]	; (80166d4 <etharp_tmr+0x14c>)
 80165dc:	4613      	mov	r3, r2
 80165de:	005b      	lsls	r3, r3, #1
 80165e0:	4413      	add	r3, r2
 80165e2:	00db      	lsls	r3, r3, #3
 80165e4:	440b      	add	r3, r1
 80165e6:	3312      	adds	r3, #18
 80165e8:	881b      	ldrh	r3, [r3, #0]
 80165ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80165ee:	d215      	bcs.n	801661c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80165f0:	79fa      	ldrb	r2, [r7, #7]
 80165f2:	4938      	ldr	r1, [pc, #224]	; (80166d4 <etharp_tmr+0x14c>)
 80165f4:	4613      	mov	r3, r2
 80165f6:	005b      	lsls	r3, r3, #1
 80165f8:	4413      	add	r3, r2
 80165fa:	00db      	lsls	r3, r3, #3
 80165fc:	440b      	add	r3, r1
 80165fe:	3314      	adds	r3, #20
 8016600:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016602:	2b01      	cmp	r3, #1
 8016604:	d10f      	bne.n	8016626 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016606:	79fa      	ldrb	r2, [r7, #7]
 8016608:	4932      	ldr	r1, [pc, #200]	; (80166d4 <etharp_tmr+0x14c>)
 801660a:	4613      	mov	r3, r2
 801660c:	005b      	lsls	r3, r3, #1
 801660e:	4413      	add	r3, r2
 8016610:	00db      	lsls	r3, r3, #3
 8016612:	440b      	add	r3, r1
 8016614:	3312      	adds	r3, #18
 8016616:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016618:	2b04      	cmp	r3, #4
 801661a:	d904      	bls.n	8016626 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801661c:	79fb      	ldrb	r3, [r7, #7]
 801661e:	4618      	mov	r0, r3
 8016620:	f7ff ff80 	bl	8016524 <etharp_free_entry>
 8016624:	e04a      	b.n	80166bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016626:	79fa      	ldrb	r2, [r7, #7]
 8016628:	492a      	ldr	r1, [pc, #168]	; (80166d4 <etharp_tmr+0x14c>)
 801662a:	4613      	mov	r3, r2
 801662c:	005b      	lsls	r3, r3, #1
 801662e:	4413      	add	r3, r2
 8016630:	00db      	lsls	r3, r3, #3
 8016632:	440b      	add	r3, r1
 8016634:	3314      	adds	r3, #20
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	2b03      	cmp	r3, #3
 801663a:	d10a      	bne.n	8016652 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801663c:	79fa      	ldrb	r2, [r7, #7]
 801663e:	4925      	ldr	r1, [pc, #148]	; (80166d4 <etharp_tmr+0x14c>)
 8016640:	4613      	mov	r3, r2
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	4413      	add	r3, r2
 8016646:	00db      	lsls	r3, r3, #3
 8016648:	440b      	add	r3, r1
 801664a:	3314      	adds	r3, #20
 801664c:	2204      	movs	r2, #4
 801664e:	701a      	strb	r2, [r3, #0]
 8016650:	e034      	b.n	80166bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016652:	79fa      	ldrb	r2, [r7, #7]
 8016654:	491f      	ldr	r1, [pc, #124]	; (80166d4 <etharp_tmr+0x14c>)
 8016656:	4613      	mov	r3, r2
 8016658:	005b      	lsls	r3, r3, #1
 801665a:	4413      	add	r3, r2
 801665c:	00db      	lsls	r3, r3, #3
 801665e:	440b      	add	r3, r1
 8016660:	3314      	adds	r3, #20
 8016662:	781b      	ldrb	r3, [r3, #0]
 8016664:	2b04      	cmp	r3, #4
 8016666:	d10a      	bne.n	801667e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016668:	79fa      	ldrb	r2, [r7, #7]
 801666a:	491a      	ldr	r1, [pc, #104]	; (80166d4 <etharp_tmr+0x14c>)
 801666c:	4613      	mov	r3, r2
 801666e:	005b      	lsls	r3, r3, #1
 8016670:	4413      	add	r3, r2
 8016672:	00db      	lsls	r3, r3, #3
 8016674:	440b      	add	r3, r1
 8016676:	3314      	adds	r3, #20
 8016678:	2202      	movs	r2, #2
 801667a:	701a      	strb	r2, [r3, #0]
 801667c:	e01e      	b.n	80166bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801667e:	79fa      	ldrb	r2, [r7, #7]
 8016680:	4914      	ldr	r1, [pc, #80]	; (80166d4 <etharp_tmr+0x14c>)
 8016682:	4613      	mov	r3, r2
 8016684:	005b      	lsls	r3, r3, #1
 8016686:	4413      	add	r3, r2
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	440b      	add	r3, r1
 801668c:	3314      	adds	r3, #20
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d113      	bne.n	80166bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016694:	79fa      	ldrb	r2, [r7, #7]
 8016696:	490f      	ldr	r1, [pc, #60]	; (80166d4 <etharp_tmr+0x14c>)
 8016698:	4613      	mov	r3, r2
 801669a:	005b      	lsls	r3, r3, #1
 801669c:	4413      	add	r3, r2
 801669e:	00db      	lsls	r3, r3, #3
 80166a0:	440b      	add	r3, r1
 80166a2:	3308      	adds	r3, #8
 80166a4:	6818      	ldr	r0, [r3, #0]
 80166a6:	79fa      	ldrb	r2, [r7, #7]
 80166a8:	4613      	mov	r3, r2
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	4413      	add	r3, r2
 80166ae:	00db      	lsls	r3, r3, #3
 80166b0:	4a08      	ldr	r2, [pc, #32]	; (80166d4 <etharp_tmr+0x14c>)
 80166b2:	4413      	add	r3, r2
 80166b4:	3304      	adds	r3, #4
 80166b6:	4619      	mov	r1, r3
 80166b8:	f000 fe38 	bl	801732c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166bc:	79fb      	ldrb	r3, [r7, #7]
 80166be:	3301      	adds	r3, #1
 80166c0:	71fb      	strb	r3, [r7, #7]
 80166c2:	79fb      	ldrb	r3, [r7, #7]
 80166c4:	2b09      	cmp	r3, #9
 80166c6:	f67f af65 	bls.w	8016594 <etharp_tmr+0xc>
      }
    }
  }
}
 80166ca:	bf00      	nop
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	200040f4 	.word	0x200040f4

080166d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b088      	sub	sp, #32
 80166dc:	af00      	add	r7, sp, #0
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	460b      	mov	r3, r1
 80166e2:	607a      	str	r2, [r7, #4]
 80166e4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80166e6:	230a      	movs	r3, #10
 80166e8:	77fb      	strb	r3, [r7, #31]
 80166ea:	230a      	movs	r3, #10
 80166ec:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80166ee:	230a      	movs	r3, #10
 80166f0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80166f2:	2300      	movs	r3, #0
 80166f4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80166f6:	230a      	movs	r3, #10
 80166f8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80166fa:	2300      	movs	r3, #0
 80166fc:	833b      	strh	r3, [r7, #24]
 80166fe:	2300      	movs	r3, #0
 8016700:	82fb      	strh	r3, [r7, #22]
 8016702:	2300      	movs	r3, #0
 8016704:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016706:	2300      	movs	r3, #0
 8016708:	773b      	strb	r3, [r7, #28]
 801670a:	e093      	b.n	8016834 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801670c:	7f3a      	ldrb	r2, [r7, #28]
 801670e:	4990      	ldr	r1, [pc, #576]	; (8016950 <etharp_find_entry+0x278>)
 8016710:	4613      	mov	r3, r2
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	4413      	add	r3, r2
 8016716:	00db      	lsls	r3, r3, #3
 8016718:	440b      	add	r3, r1
 801671a:	3314      	adds	r3, #20
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016720:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016724:	2b0a      	cmp	r3, #10
 8016726:	d105      	bne.n	8016734 <etharp_find_entry+0x5c>
 8016728:	7cfb      	ldrb	r3, [r7, #19]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d102      	bne.n	8016734 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801672e:	7f3b      	ldrb	r3, [r7, #28]
 8016730:	777b      	strb	r3, [r7, #29]
 8016732:	e07c      	b.n	801682e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016734:	7cfb      	ldrb	r3, [r7, #19]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d079      	beq.n	801682e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801673a:	7cfb      	ldrb	r3, [r7, #19]
 801673c:	2b01      	cmp	r3, #1
 801673e:	d009      	beq.n	8016754 <etharp_find_entry+0x7c>
 8016740:	7cfb      	ldrb	r3, [r7, #19]
 8016742:	2b01      	cmp	r3, #1
 8016744:	d806      	bhi.n	8016754 <etharp_find_entry+0x7c>
 8016746:	4b83      	ldr	r3, [pc, #524]	; (8016954 <etharp_find_entry+0x27c>)
 8016748:	f44f 7293 	mov.w	r2, #294	; 0x126
 801674c:	4982      	ldr	r1, [pc, #520]	; (8016958 <etharp_find_entry+0x280>)
 801674e:	4883      	ldr	r0, [pc, #524]	; (801695c <etharp_find_entry+0x284>)
 8016750:	f002 fb2e 	bl	8018db0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d00f      	beq.n	801677a <etharp_find_entry+0xa2>
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	6819      	ldr	r1, [r3, #0]
 801675e:	7f3a      	ldrb	r2, [r7, #28]
 8016760:	487b      	ldr	r0, [pc, #492]	; (8016950 <etharp_find_entry+0x278>)
 8016762:	4613      	mov	r3, r2
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	4413      	add	r3, r2
 8016768:	00db      	lsls	r3, r3, #3
 801676a:	4403      	add	r3, r0
 801676c:	3304      	adds	r3, #4
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	4299      	cmp	r1, r3
 8016772:	d102      	bne.n	801677a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016774:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8016778:	e0e5      	b.n	8016946 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801677a:	7cfb      	ldrb	r3, [r7, #19]
 801677c:	2b01      	cmp	r3, #1
 801677e:	d13b      	bne.n	80167f8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016780:	7f3a      	ldrb	r2, [r7, #28]
 8016782:	4973      	ldr	r1, [pc, #460]	; (8016950 <etharp_find_entry+0x278>)
 8016784:	4613      	mov	r3, r2
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	4413      	add	r3, r2
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	440b      	add	r3, r1
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d018      	beq.n	80167c6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8016794:	7f3a      	ldrb	r2, [r7, #28]
 8016796:	496e      	ldr	r1, [pc, #440]	; (8016950 <etharp_find_entry+0x278>)
 8016798:	4613      	mov	r3, r2
 801679a:	005b      	lsls	r3, r3, #1
 801679c:	4413      	add	r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	440b      	add	r3, r1
 80167a2:	3312      	adds	r3, #18
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	8b3a      	ldrh	r2, [r7, #24]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d840      	bhi.n	801682e <etharp_find_entry+0x156>
            old_queue = i;
 80167ac:	7f3b      	ldrb	r3, [r7, #28]
 80167ae:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80167b0:	7f3a      	ldrb	r2, [r7, #28]
 80167b2:	4967      	ldr	r1, [pc, #412]	; (8016950 <etharp_find_entry+0x278>)
 80167b4:	4613      	mov	r3, r2
 80167b6:	005b      	lsls	r3, r3, #1
 80167b8:	4413      	add	r3, r2
 80167ba:	00db      	lsls	r3, r3, #3
 80167bc:	440b      	add	r3, r1
 80167be:	3312      	adds	r3, #18
 80167c0:	881b      	ldrh	r3, [r3, #0]
 80167c2:	833b      	strh	r3, [r7, #24]
 80167c4:	e033      	b.n	801682e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80167c6:	7f3a      	ldrb	r2, [r7, #28]
 80167c8:	4961      	ldr	r1, [pc, #388]	; (8016950 <etharp_find_entry+0x278>)
 80167ca:	4613      	mov	r3, r2
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	4413      	add	r3, r2
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	440b      	add	r3, r1
 80167d4:	3312      	adds	r3, #18
 80167d6:	881b      	ldrh	r3, [r3, #0]
 80167d8:	8afa      	ldrh	r2, [r7, #22]
 80167da:	429a      	cmp	r2, r3
 80167dc:	d827      	bhi.n	801682e <etharp_find_entry+0x156>
            old_pending = i;
 80167de:	7f3b      	ldrb	r3, [r7, #28]
 80167e0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80167e2:	7f3a      	ldrb	r2, [r7, #28]
 80167e4:	495a      	ldr	r1, [pc, #360]	; (8016950 <etharp_find_entry+0x278>)
 80167e6:	4613      	mov	r3, r2
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	4413      	add	r3, r2
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	440b      	add	r3, r1
 80167f0:	3312      	adds	r3, #18
 80167f2:	881b      	ldrh	r3, [r3, #0]
 80167f4:	82fb      	strh	r3, [r7, #22]
 80167f6:	e01a      	b.n	801682e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80167f8:	7cfb      	ldrb	r3, [r7, #19]
 80167fa:	2b01      	cmp	r3, #1
 80167fc:	d917      	bls.n	801682e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80167fe:	7f3a      	ldrb	r2, [r7, #28]
 8016800:	4953      	ldr	r1, [pc, #332]	; (8016950 <etharp_find_entry+0x278>)
 8016802:	4613      	mov	r3, r2
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	4413      	add	r3, r2
 8016808:	00db      	lsls	r3, r3, #3
 801680a:	440b      	add	r3, r1
 801680c:	3312      	adds	r3, #18
 801680e:	881b      	ldrh	r3, [r3, #0]
 8016810:	8aba      	ldrh	r2, [r7, #20]
 8016812:	429a      	cmp	r2, r3
 8016814:	d80b      	bhi.n	801682e <etharp_find_entry+0x156>
            old_stable = i;
 8016816:	7f3b      	ldrb	r3, [r7, #28]
 8016818:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801681a:	7f3a      	ldrb	r2, [r7, #28]
 801681c:	494c      	ldr	r1, [pc, #304]	; (8016950 <etharp_find_entry+0x278>)
 801681e:	4613      	mov	r3, r2
 8016820:	005b      	lsls	r3, r3, #1
 8016822:	4413      	add	r3, r2
 8016824:	00db      	lsls	r3, r3, #3
 8016826:	440b      	add	r3, r1
 8016828:	3312      	adds	r3, #18
 801682a:	881b      	ldrh	r3, [r3, #0]
 801682c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801682e:	7f3b      	ldrb	r3, [r7, #28]
 8016830:	3301      	adds	r3, #1
 8016832:	773b      	strb	r3, [r7, #28]
 8016834:	7f3b      	ldrb	r3, [r7, #28]
 8016836:	2b09      	cmp	r3, #9
 8016838:	f67f af68 	bls.w	801670c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801683c:	7afb      	ldrb	r3, [r7, #11]
 801683e:	f003 0302 	and.w	r3, r3, #2
 8016842:	2b00      	cmp	r3, #0
 8016844:	d108      	bne.n	8016858 <etharp_find_entry+0x180>
 8016846:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801684a:	2b0a      	cmp	r3, #10
 801684c:	d107      	bne.n	801685e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801684e:	7afb      	ldrb	r3, [r7, #11]
 8016850:	f003 0301 	and.w	r3, r3, #1
 8016854:	2b00      	cmp	r3, #0
 8016856:	d102      	bne.n	801685e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8016858:	f04f 33ff 	mov.w	r3, #4294967295
 801685c:	e073      	b.n	8016946 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801685e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016862:	2b09      	cmp	r3, #9
 8016864:	dc02      	bgt.n	801686c <etharp_find_entry+0x194>
    i = empty;
 8016866:	7f7b      	ldrb	r3, [r7, #29]
 8016868:	773b      	strb	r3, [r7, #28]
 801686a:	e036      	b.n	80168da <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801686c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016870:	2b09      	cmp	r3, #9
 8016872:	dc13      	bgt.n	801689c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8016874:	7fbb      	ldrb	r3, [r7, #30]
 8016876:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016878:	7f3a      	ldrb	r2, [r7, #28]
 801687a:	4935      	ldr	r1, [pc, #212]	; (8016950 <etharp_find_entry+0x278>)
 801687c:	4613      	mov	r3, r2
 801687e:	005b      	lsls	r3, r3, #1
 8016880:	4413      	add	r3, r2
 8016882:	00db      	lsls	r3, r3, #3
 8016884:	440b      	add	r3, r1
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d018      	beq.n	80168be <etharp_find_entry+0x1e6>
 801688c:	4b31      	ldr	r3, [pc, #196]	; (8016954 <etharp_find_entry+0x27c>)
 801688e:	f240 126f 	movw	r2, #367	; 0x16f
 8016892:	4933      	ldr	r1, [pc, #204]	; (8016960 <etharp_find_entry+0x288>)
 8016894:	4831      	ldr	r0, [pc, #196]	; (801695c <etharp_find_entry+0x284>)
 8016896:	f002 fa8b 	bl	8018db0 <iprintf>
 801689a:	e010      	b.n	80168be <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801689c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80168a0:	2b09      	cmp	r3, #9
 80168a2:	dc02      	bgt.n	80168aa <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80168a4:	7ffb      	ldrb	r3, [r7, #31]
 80168a6:	773b      	strb	r3, [r7, #28]
 80168a8:	e009      	b.n	80168be <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80168aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80168ae:	2b09      	cmp	r3, #9
 80168b0:	dc02      	bgt.n	80168b8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80168b2:	7efb      	ldrb	r3, [r7, #27]
 80168b4:	773b      	strb	r3, [r7, #28]
 80168b6:	e002      	b.n	80168be <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80168b8:	f04f 33ff 	mov.w	r3, #4294967295
 80168bc:	e043      	b.n	8016946 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168be:	7f3b      	ldrb	r3, [r7, #28]
 80168c0:	2b09      	cmp	r3, #9
 80168c2:	d906      	bls.n	80168d2 <etharp_find_entry+0x1fa>
 80168c4:	4b23      	ldr	r3, [pc, #140]	; (8016954 <etharp_find_entry+0x27c>)
 80168c6:	f240 1281 	movw	r2, #385	; 0x181
 80168ca:	4926      	ldr	r1, [pc, #152]	; (8016964 <etharp_find_entry+0x28c>)
 80168cc:	4823      	ldr	r0, [pc, #140]	; (801695c <etharp_find_entry+0x284>)
 80168ce:	f002 fa6f 	bl	8018db0 <iprintf>
    etharp_free_entry(i);
 80168d2:	7f3b      	ldrb	r3, [r7, #28]
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7ff fe25 	bl	8016524 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168da:	7f3b      	ldrb	r3, [r7, #28]
 80168dc:	2b09      	cmp	r3, #9
 80168de:	d906      	bls.n	80168ee <etharp_find_entry+0x216>
 80168e0:	4b1c      	ldr	r3, [pc, #112]	; (8016954 <etharp_find_entry+0x27c>)
 80168e2:	f240 1285 	movw	r2, #389	; 0x185
 80168e6:	491f      	ldr	r1, [pc, #124]	; (8016964 <etharp_find_entry+0x28c>)
 80168e8:	481c      	ldr	r0, [pc, #112]	; (801695c <etharp_find_entry+0x284>)
 80168ea:	f002 fa61 	bl	8018db0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80168ee:	7f3a      	ldrb	r2, [r7, #28]
 80168f0:	4917      	ldr	r1, [pc, #92]	; (8016950 <etharp_find_entry+0x278>)
 80168f2:	4613      	mov	r3, r2
 80168f4:	005b      	lsls	r3, r3, #1
 80168f6:	4413      	add	r3, r2
 80168f8:	00db      	lsls	r3, r3, #3
 80168fa:	440b      	add	r3, r1
 80168fc:	3314      	adds	r3, #20
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d006      	beq.n	8016912 <etharp_find_entry+0x23a>
 8016904:	4b13      	ldr	r3, [pc, #76]	; (8016954 <etharp_find_entry+0x27c>)
 8016906:	f240 1287 	movw	r2, #391	; 0x187
 801690a:	4917      	ldr	r1, [pc, #92]	; (8016968 <etharp_find_entry+0x290>)
 801690c:	4813      	ldr	r0, [pc, #76]	; (801695c <etharp_find_entry+0x284>)
 801690e:	f002 fa4f 	bl	8018db0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d00a      	beq.n	801692e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016918:	7f3a      	ldrb	r2, [r7, #28]
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	6819      	ldr	r1, [r3, #0]
 801691e:	480c      	ldr	r0, [pc, #48]	; (8016950 <etharp_find_entry+0x278>)
 8016920:	4613      	mov	r3, r2
 8016922:	005b      	lsls	r3, r3, #1
 8016924:	4413      	add	r3, r2
 8016926:	00db      	lsls	r3, r3, #3
 8016928:	4403      	add	r3, r0
 801692a:	3304      	adds	r3, #4
 801692c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801692e:	7f3a      	ldrb	r2, [r7, #28]
 8016930:	4907      	ldr	r1, [pc, #28]	; (8016950 <etharp_find_entry+0x278>)
 8016932:	4613      	mov	r3, r2
 8016934:	005b      	lsls	r3, r3, #1
 8016936:	4413      	add	r3, r2
 8016938:	00db      	lsls	r3, r3, #3
 801693a:	440b      	add	r3, r1
 801693c:	3312      	adds	r3, #18
 801693e:	2200      	movs	r2, #0
 8016940:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8016942:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8016946:	4618      	mov	r0, r3
 8016948:	3720      	adds	r7, #32
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	200040f4 	.word	0x200040f4
 8016954:	0801be58 	.word	0x0801be58
 8016958:	0801beb4 	.word	0x0801beb4
 801695c:	0801bef4 	.word	0x0801bef4
 8016960:	0801bf1c 	.word	0x0801bf1c
 8016964:	0801bf34 	.word	0x0801bf34
 8016968:	0801bf48 	.word	0x0801bf48

0801696c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b088      	sub	sp, #32
 8016970:	af02      	add	r7, sp, #8
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
 8016978:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016980:	2b06      	cmp	r3, #6
 8016982:	d006      	beq.n	8016992 <etharp_update_arp_entry+0x26>
 8016984:	4b48      	ldr	r3, [pc, #288]	; (8016aa8 <etharp_update_arp_entry+0x13c>)
 8016986:	f240 12ab 	movw	r2, #427	; 0x1ab
 801698a:	4948      	ldr	r1, [pc, #288]	; (8016aac <etharp_update_arp_entry+0x140>)
 801698c:	4848      	ldr	r0, [pc, #288]	; (8016ab0 <etharp_update_arp_entry+0x144>)
 801698e:	f002 fa0f 	bl	8018db0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d012      	beq.n	80169be <etharp_update_arp_entry+0x52>
 8016998:	68bb      	ldr	r3, [r7, #8]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d00e      	beq.n	80169be <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	68f9      	ldr	r1, [r7, #12]
 80169a6:	4618      	mov	r0, r3
 80169a8:	f001 f8da 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 80169ac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d105      	bne.n	80169be <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169ba:	2be0      	cmp	r3, #224	; 0xe0
 80169bc:	d102      	bne.n	80169c4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80169be:	f06f 030f 	mvn.w	r3, #15
 80169c2:	e06c      	b.n	8016a9e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80169c4:	78fb      	ldrb	r3, [r7, #3]
 80169c6:	68fa      	ldr	r2, [r7, #12]
 80169c8:	4619      	mov	r1, r3
 80169ca:	68b8      	ldr	r0, [r7, #8]
 80169cc:	f7ff fe84 	bl	80166d8 <etharp_find_entry>
 80169d0:	4603      	mov	r3, r0
 80169d2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80169d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	da02      	bge.n	80169e2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80169dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169e0:	e05d      	b.n	8016a9e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80169e2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80169e6:	4933      	ldr	r1, [pc, #204]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 80169e8:	4613      	mov	r3, r2
 80169ea:	005b      	lsls	r3, r3, #1
 80169ec:	4413      	add	r3, r2
 80169ee:	00db      	lsls	r3, r3, #3
 80169f0:	440b      	add	r3, r1
 80169f2:	3314      	adds	r3, #20
 80169f4:	2202      	movs	r2, #2
 80169f6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80169f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80169fc:	492d      	ldr	r1, [pc, #180]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 80169fe:	4613      	mov	r3, r2
 8016a00:	005b      	lsls	r3, r3, #1
 8016a02:	4413      	add	r3, r2
 8016a04:	00db      	lsls	r3, r3, #3
 8016a06:	440b      	add	r3, r1
 8016a08:	3308      	adds	r3, #8
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8016a0e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a12:	4613      	mov	r3, r2
 8016a14:	005b      	lsls	r3, r3, #1
 8016a16:	4413      	add	r3, r2
 8016a18:	00db      	lsls	r3, r3, #3
 8016a1a:	3308      	adds	r3, #8
 8016a1c:	4a25      	ldr	r2, [pc, #148]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 8016a1e:	4413      	add	r3, r2
 8016a20:	3304      	adds	r3, #4
 8016a22:	2206      	movs	r2, #6
 8016a24:	6879      	ldr	r1, [r7, #4]
 8016a26:	4618      	mov	r0, r3
 8016a28:	f002 f9af 	bl	8018d8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016a2c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a30:	4920      	ldr	r1, [pc, #128]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 8016a32:	4613      	mov	r3, r2
 8016a34:	005b      	lsls	r3, r3, #1
 8016a36:	4413      	add	r3, r2
 8016a38:	00db      	lsls	r3, r3, #3
 8016a3a:	440b      	add	r3, r1
 8016a3c:	3312      	adds	r3, #18
 8016a3e:	2200      	movs	r2, #0
 8016a40:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016a42:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a46:	491b      	ldr	r1, [pc, #108]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 8016a48:	4613      	mov	r3, r2
 8016a4a:	005b      	lsls	r3, r3, #1
 8016a4c:	4413      	add	r3, r2
 8016a4e:	00db      	lsls	r3, r3, #3
 8016a50:	440b      	add	r3, r1
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d021      	beq.n	8016a9c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016a58:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a5c:	4915      	ldr	r1, [pc, #84]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 8016a5e:	4613      	mov	r3, r2
 8016a60:	005b      	lsls	r3, r3, #1
 8016a62:	4413      	add	r3, r2
 8016a64:	00db      	lsls	r3, r3, #3
 8016a66:	440b      	add	r3, r1
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016a6c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016a70:	4910      	ldr	r1, [pc, #64]	; (8016ab4 <etharp_update_arp_entry+0x148>)
 8016a72:	4613      	mov	r3, r2
 8016a74:	005b      	lsls	r3, r3, #1
 8016a76:	4413      	add	r3, r2
 8016a78:	00db      	lsls	r3, r3, #3
 8016a7a:	440b      	add	r3, r1
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8016a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6939      	ldr	r1, [r7, #16]
 8016a90:	68f8      	ldr	r0, [r7, #12]
 8016a92:	f001 ff07 	bl	80188a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016a96:	6938      	ldr	r0, [r7, #16]
 8016a98:	f7f9 fcae 	bl	80103f8 <pbuf_free>
  }
  return ERR_OK;
 8016a9c:	2300      	movs	r3, #0
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3718      	adds	r7, #24
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	0801be58 	.word	0x0801be58
 8016aac:	0801bf74 	.word	0x0801bf74
 8016ab0:	0801bef4 	.word	0x0801bef4
 8016ab4:	200040f4 	.word	0x200040f4

08016ab8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b084      	sub	sp, #16
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	73fb      	strb	r3, [r7, #15]
 8016ac4:	e01f      	b.n	8016b06 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8016ac6:	7bfa      	ldrb	r2, [r7, #15]
 8016ac8:	4912      	ldr	r1, [pc, #72]	; (8016b14 <etharp_cleanup_netif+0x5c>)
 8016aca:	4613      	mov	r3, r2
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	4413      	add	r3, r2
 8016ad0:	00db      	lsls	r3, r3, #3
 8016ad2:	440b      	add	r3, r1
 8016ad4:	3314      	adds	r3, #20
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016ada:	7bbb      	ldrb	r3, [r7, #14]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00f      	beq.n	8016b00 <etharp_cleanup_netif+0x48>
 8016ae0:	7bfa      	ldrb	r2, [r7, #15]
 8016ae2:	490c      	ldr	r1, [pc, #48]	; (8016b14 <etharp_cleanup_netif+0x5c>)
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	005b      	lsls	r3, r3, #1
 8016ae8:	4413      	add	r3, r2
 8016aea:	00db      	lsls	r3, r3, #3
 8016aec:	440b      	add	r3, r1
 8016aee:	3308      	adds	r3, #8
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	687a      	ldr	r2, [r7, #4]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d103      	bne.n	8016b00 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8016af8:	7bfb      	ldrb	r3, [r7, #15]
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7ff fd12 	bl	8016524 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b00:	7bfb      	ldrb	r3, [r7, #15]
 8016b02:	3301      	adds	r3, #1
 8016b04:	73fb      	strb	r3, [r7, #15]
 8016b06:	7bfb      	ldrb	r3, [r7, #15]
 8016b08:	2b09      	cmp	r3, #9
 8016b0a:	d9dc      	bls.n	8016ac6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016b0c:	bf00      	nop
 8016b0e:	3710      	adds	r7, #16
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	200040f4 	.word	0x200040f4

08016b18 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016b18:	b5b0      	push	{r4, r5, r7, lr}
 8016b1a:	b08a      	sub	sp, #40	; 0x28
 8016b1c:	af04      	add	r7, sp, #16
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d107      	bne.n	8016b38 <etharp_input+0x20>
 8016b28:	4b3d      	ldr	r3, [pc, #244]	; (8016c20 <etharp_input+0x108>)
 8016b2a:	f44f 7222 	mov.w	r2, #648	; 0x288
 8016b2e:	493d      	ldr	r1, [pc, #244]	; (8016c24 <etharp_input+0x10c>)
 8016b30:	483d      	ldr	r0, [pc, #244]	; (8016c28 <etharp_input+0x110>)
 8016b32:	f002 f93d 	bl	8018db0 <iprintf>
 8016b36:	e06f      	b.n	8016c18 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	685b      	ldr	r3, [r3, #4]
 8016b3c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b48:	d10c      	bne.n	8016b64 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016b4e:	2b06      	cmp	r3, #6
 8016b50:	d108      	bne.n	8016b64 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b56:	2b04      	cmp	r3, #4
 8016b58:	d104      	bne.n	8016b64 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	885b      	ldrh	r3, [r3, #2]
 8016b5e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b60:	2b08      	cmp	r3, #8
 8016b62:	d003      	beq.n	8016b6c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f7f9 fc47 	bl	80103f8 <pbuf_free>
    return;
 8016b6a:	e055      	b.n	8016c18 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	330e      	adds	r3, #14
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8016b74:	693b      	ldr	r3, [r7, #16]
 8016b76:	3318      	adds	r3, #24
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	3304      	adds	r3, #4
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d102      	bne.n	8016b8c <etharp_input+0x74>
    for_us = 0;
 8016b86:	2300      	movs	r3, #0
 8016b88:	75fb      	strb	r3, [r7, #23]
 8016b8a:	e009      	b.n	8016ba0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016b8c:	68ba      	ldr	r2, [r7, #8]
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	3304      	adds	r3, #4
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	429a      	cmp	r2, r3
 8016b96:	bf0c      	ite	eq
 8016b98:	2301      	moveq	r3, #1
 8016b9a:	2300      	movne	r3, #0
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	f103 0208 	add.w	r2, r3, #8
 8016ba6:	7dfb      	ldrb	r3, [r7, #23]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d001      	beq.n	8016bb0 <etharp_input+0x98>
 8016bac:	2301      	movs	r3, #1
 8016bae:	e000      	b.n	8016bb2 <etharp_input+0x9a>
 8016bb0:	2302      	movs	r3, #2
 8016bb2:	f107 010c 	add.w	r1, r7, #12
 8016bb6:	6838      	ldr	r0, [r7, #0]
 8016bb8:	f7ff fed8 	bl	801696c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	88db      	ldrh	r3, [r3, #6]
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bc6:	d003      	beq.n	8016bd0 <etharp_input+0xb8>
 8016bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bcc:	d01e      	beq.n	8016c0c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8016bce:	e020      	b.n	8016c12 <etharp_input+0xfa>
    if (for_us) {
 8016bd0:	7dfb      	ldrb	r3, [r7, #23]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d01c      	beq.n	8016c10 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8016bec:	693a      	ldr	r2, [r7, #16]
 8016bee:	3208      	adds	r2, #8
      etharp_raw(netif,
 8016bf0:	2102      	movs	r1, #2
 8016bf2:	9103      	str	r1, [sp, #12]
 8016bf4:	f107 010c 	add.w	r1, r7, #12
 8016bf8:	9102      	str	r1, [sp, #8]
 8016bfa:	9201      	str	r2, [sp, #4]
 8016bfc:	9300      	str	r3, [sp, #0]
 8016bfe:	462b      	mov	r3, r5
 8016c00:	4622      	mov	r2, r4
 8016c02:	4601      	mov	r1, r0
 8016c04:	6838      	ldr	r0, [r7, #0]
 8016c06:	f000 fae3 	bl	80171d0 <etharp_raw>
    break;
 8016c0a:	e001      	b.n	8016c10 <etharp_input+0xf8>
    break;
 8016c0c:	bf00      	nop
 8016c0e:	e000      	b.n	8016c12 <etharp_input+0xfa>
    break;
 8016c10:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f7f9 fbf0 	bl	80103f8 <pbuf_free>
}
 8016c18:	3718      	adds	r7, #24
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8016c1e:	bf00      	nop
 8016c20:	0801be58 	.word	0x0801be58
 8016c24:	0801bfcc 	.word	0x0801bfcc
 8016c28:	0801bef4 	.word	0x0801bef4

08016c2c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b086      	sub	sp, #24
 8016c30:	af02      	add	r7, sp, #8
 8016c32:	60f8      	str	r0, [r7, #12]
 8016c34:	60b9      	str	r1, [r7, #8]
 8016c36:	4613      	mov	r3, r2
 8016c38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016c3a:	79fa      	ldrb	r2, [r7, #7]
 8016c3c:	4944      	ldr	r1, [pc, #272]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016c3e:	4613      	mov	r3, r2
 8016c40:	005b      	lsls	r3, r3, #1
 8016c42:	4413      	add	r3, r2
 8016c44:	00db      	lsls	r3, r3, #3
 8016c46:	440b      	add	r3, r1
 8016c48:	3314      	adds	r3, #20
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	2b01      	cmp	r3, #1
 8016c4e:	d806      	bhi.n	8016c5e <etharp_output_to_arp_index+0x32>
 8016c50:	4b40      	ldr	r3, [pc, #256]	; (8016d54 <etharp_output_to_arp_index+0x128>)
 8016c52:	f240 22ed 	movw	r2, #749	; 0x2ed
 8016c56:	4940      	ldr	r1, [pc, #256]	; (8016d58 <etharp_output_to_arp_index+0x12c>)
 8016c58:	4840      	ldr	r0, [pc, #256]	; (8016d5c <etharp_output_to_arp_index+0x130>)
 8016c5a:	f002 f8a9 	bl	8018db0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016c5e:	79fa      	ldrb	r2, [r7, #7]
 8016c60:	493b      	ldr	r1, [pc, #236]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016c62:	4613      	mov	r3, r2
 8016c64:	005b      	lsls	r3, r3, #1
 8016c66:	4413      	add	r3, r2
 8016c68:	00db      	lsls	r3, r3, #3
 8016c6a:	440b      	add	r3, r1
 8016c6c:	3314      	adds	r3, #20
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	2b02      	cmp	r3, #2
 8016c72:	d153      	bne.n	8016d1c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016c74:	79fa      	ldrb	r2, [r7, #7]
 8016c76:	4936      	ldr	r1, [pc, #216]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016c78:	4613      	mov	r3, r2
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	4413      	add	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	440b      	add	r3, r1
 8016c82:	3312      	adds	r3, #18
 8016c84:	881b      	ldrh	r3, [r3, #0]
 8016c86:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016c8a:	d919      	bls.n	8016cc0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016c8c:	79fa      	ldrb	r2, [r7, #7]
 8016c8e:	4613      	mov	r3, r2
 8016c90:	005b      	lsls	r3, r3, #1
 8016c92:	4413      	add	r3, r2
 8016c94:	00db      	lsls	r3, r3, #3
 8016c96:	4a2e      	ldr	r2, [pc, #184]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016c98:	4413      	add	r3, r2
 8016c9a:	3304      	adds	r3, #4
 8016c9c:	4619      	mov	r1, r3
 8016c9e:	68f8      	ldr	r0, [r7, #12]
 8016ca0:	f000 fb44 	bl	801732c <etharp_request>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d138      	bne.n	8016d1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016caa:	79fa      	ldrb	r2, [r7, #7]
 8016cac:	4928      	ldr	r1, [pc, #160]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016cae:	4613      	mov	r3, r2
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	4413      	add	r3, r2
 8016cb4:	00db      	lsls	r3, r3, #3
 8016cb6:	440b      	add	r3, r1
 8016cb8:	3314      	adds	r3, #20
 8016cba:	2203      	movs	r2, #3
 8016cbc:	701a      	strb	r2, [r3, #0]
 8016cbe:	e02d      	b.n	8016d1c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016cc0:	79fa      	ldrb	r2, [r7, #7]
 8016cc2:	4923      	ldr	r1, [pc, #140]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016cc4:	4613      	mov	r3, r2
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	4413      	add	r3, r2
 8016cca:	00db      	lsls	r3, r3, #3
 8016ccc:	440b      	add	r3, r1
 8016cce:	3312      	adds	r3, #18
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016cd6:	d321      	bcc.n	8016d1c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016cd8:	79fa      	ldrb	r2, [r7, #7]
 8016cda:	4613      	mov	r3, r2
 8016cdc:	005b      	lsls	r3, r3, #1
 8016cde:	4413      	add	r3, r2
 8016ce0:	00db      	lsls	r3, r3, #3
 8016ce2:	4a1b      	ldr	r2, [pc, #108]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016ce4:	4413      	add	r3, r2
 8016ce6:	1d19      	adds	r1, r3, #4
 8016ce8:	79fa      	ldrb	r2, [r7, #7]
 8016cea:	4613      	mov	r3, r2
 8016cec:	005b      	lsls	r3, r3, #1
 8016cee:	4413      	add	r3, r2
 8016cf0:	00db      	lsls	r3, r3, #3
 8016cf2:	3308      	adds	r3, #8
 8016cf4:	4a16      	ldr	r2, [pc, #88]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016cf6:	4413      	add	r3, r2
 8016cf8:	3304      	adds	r3, #4
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f000 faf3 	bl	80172e8 <etharp_request_dst>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d109      	bne.n	8016d1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016d08:	79fa      	ldrb	r2, [r7, #7]
 8016d0a:	4911      	ldr	r1, [pc, #68]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	440b      	add	r3, r1
 8016d16:	3314      	adds	r3, #20
 8016d18:	2203      	movs	r2, #3
 8016d1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8016d22:	79fa      	ldrb	r2, [r7, #7]
 8016d24:	4613      	mov	r3, r2
 8016d26:	005b      	lsls	r3, r3, #1
 8016d28:	4413      	add	r3, r2
 8016d2a:	00db      	lsls	r3, r3, #3
 8016d2c:	3308      	adds	r3, #8
 8016d2e:	4a08      	ldr	r2, [pc, #32]	; (8016d50 <etharp_output_to_arp_index+0x124>)
 8016d30:	4413      	add	r3, r2
 8016d32:	1d1a      	adds	r2, r3, #4
 8016d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d38:	9300      	str	r3, [sp, #0]
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	460a      	mov	r2, r1
 8016d3e:	68b9      	ldr	r1, [r7, #8]
 8016d40:	68f8      	ldr	r0, [r7, #12]
 8016d42:	f001 fdaf 	bl	80188a4 <ethernet_output>
 8016d46:	4603      	mov	r3, r0
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3710      	adds	r7, #16
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	200040f4 	.word	0x200040f4
 8016d54:	0801be58 	.word	0x0801be58
 8016d58:	0801bfec 	.word	0x0801bfec
 8016d5c:	0801bef4 	.word	0x0801bef4

08016d60 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b08a      	sub	sp, #40	; 0x28
 8016d64:	af02      	add	r7, sp, #8
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d106      	bne.n	8016d84 <etharp_output+0x24>
 8016d76:	4b69      	ldr	r3, [pc, #420]	; (8016f1c <etharp_output+0x1bc>)
 8016d78:	f240 321b 	movw	r2, #795	; 0x31b
 8016d7c:	4968      	ldr	r1, [pc, #416]	; (8016f20 <etharp_output+0x1c0>)
 8016d7e:	4869      	ldr	r0, [pc, #420]	; (8016f24 <etharp_output+0x1c4>)
 8016d80:	f002 f816 	bl	8018db0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d106      	bne.n	8016d98 <etharp_output+0x38>
 8016d8a:	4b64      	ldr	r3, [pc, #400]	; (8016f1c <etharp_output+0x1bc>)
 8016d8c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016d90:	4965      	ldr	r1, [pc, #404]	; (8016f28 <etharp_output+0x1c8>)
 8016d92:	4864      	ldr	r0, [pc, #400]	; (8016f24 <etharp_output+0x1c4>)
 8016d94:	f002 f80c 	bl	8018db0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d106      	bne.n	8016dac <etharp_output+0x4c>
 8016d9e:	4b5f      	ldr	r3, [pc, #380]	; (8016f1c <etharp_output+0x1bc>)
 8016da0:	f240 321d 	movw	r2, #797	; 0x31d
 8016da4:	4961      	ldr	r1, [pc, #388]	; (8016f2c <etharp_output+0x1cc>)
 8016da6:	485f      	ldr	r0, [pc, #380]	; (8016f24 <etharp_output+0x1c4>)
 8016da8:	f002 f802 	bl	8018db0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	68f9      	ldr	r1, [r7, #12]
 8016db2:	4618      	mov	r0, r3
 8016db4:	f000 fed4 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 8016db8:	4603      	mov	r3, r0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d002      	beq.n	8016dc4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016dbe:	4b5c      	ldr	r3, [pc, #368]	; (8016f30 <etharp_output+0x1d0>)
 8016dc0:	61fb      	str	r3, [r7, #28]
 8016dc2:	e09b      	b.n	8016efc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dcc:	2be0      	cmp	r3, #224	; 0xe0
 8016dce:	d118      	bne.n	8016e02 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016dd8:	235e      	movs	r3, #94	; 0x5e
 8016dda:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	3301      	adds	r3, #1
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016de6:	b2db      	uxtb	r3, r3
 8016de8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	3302      	adds	r3, #2
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	3303      	adds	r3, #3
 8016df6:	781b      	ldrb	r3, [r3, #0]
 8016df8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016dfa:	f107 0310 	add.w	r3, r7, #16
 8016dfe:	61fb      	str	r3, [r7, #28]
 8016e00:	e07c      	b.n	8016efc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681a      	ldr	r2, [r3, #0]
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	3304      	adds	r3, #4
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	405a      	eors	r2, r3
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	3308      	adds	r3, #8
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	4013      	ands	r3, r2
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d012      	beq.n	8016e40 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e20:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d00b      	beq.n	8016e40 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	330c      	adds	r3, #12
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d003      	beq.n	8016e3a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	330c      	adds	r3, #12
 8016e36:	61bb      	str	r3, [r7, #24]
 8016e38:	e002      	b.n	8016e40 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016e3a:	f06f 0303 	mvn.w	r3, #3
 8016e3e:	e069      	b.n	8016f14 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e40:	4b3c      	ldr	r3, [pc, #240]	; (8016f34 <etharp_output+0x1d4>)
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	4619      	mov	r1, r3
 8016e46:	4a3c      	ldr	r2, [pc, #240]	; (8016f38 <etharp_output+0x1d8>)
 8016e48:	460b      	mov	r3, r1
 8016e4a:	005b      	lsls	r3, r3, #1
 8016e4c:	440b      	add	r3, r1
 8016e4e:	00db      	lsls	r3, r3, #3
 8016e50:	4413      	add	r3, r2
 8016e52:	3314      	adds	r3, #20
 8016e54:	781b      	ldrb	r3, [r3, #0]
 8016e56:	2b01      	cmp	r3, #1
 8016e58:	d917      	bls.n	8016e8a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	681a      	ldr	r2, [r3, #0]
 8016e5e:	4b35      	ldr	r3, [pc, #212]	; (8016f34 <etharp_output+0x1d4>)
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	4618      	mov	r0, r3
 8016e64:	4934      	ldr	r1, [pc, #208]	; (8016f38 <etharp_output+0x1d8>)
 8016e66:	4603      	mov	r3, r0
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4403      	add	r3, r0
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	440b      	add	r3, r1
 8016e70:	3304      	adds	r3, #4
 8016e72:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d108      	bne.n	8016e8a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016e78:	4b2e      	ldr	r3, [pc, #184]	; (8016f34 <etharp_output+0x1d4>)
 8016e7a:	781b      	ldrb	r3, [r3, #0]
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	68b9      	ldr	r1, [r7, #8]
 8016e80:	68f8      	ldr	r0, [r7, #12]
 8016e82:	f7ff fed3 	bl	8016c2c <etharp_output_to_arp_index>
 8016e86:	4603      	mov	r3, r0
 8016e88:	e044      	b.n	8016f14 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	75fb      	strb	r3, [r7, #23]
 8016e8e:	e02a      	b.n	8016ee6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016e90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016e94:	4928      	ldr	r1, [pc, #160]	; (8016f38 <etharp_output+0x1d8>)
 8016e96:	4613      	mov	r3, r2
 8016e98:	005b      	lsls	r3, r3, #1
 8016e9a:	4413      	add	r3, r2
 8016e9c:	00db      	lsls	r3, r3, #3
 8016e9e:	440b      	add	r3, r1
 8016ea0:	3314      	adds	r3, #20
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	2b01      	cmp	r3, #1
 8016ea6:	d918      	bls.n	8016eda <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016ea8:	69bb      	ldr	r3, [r7, #24]
 8016eaa:	6819      	ldr	r1, [r3, #0]
 8016eac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016eb0:	4821      	ldr	r0, [pc, #132]	; (8016f38 <etharp_output+0x1d8>)
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	4413      	add	r3, r2
 8016eb8:	00db      	lsls	r3, r3, #3
 8016eba:	4403      	add	r3, r0
 8016ebc:	3304      	adds	r3, #4
 8016ebe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ec0:	4299      	cmp	r1, r3
 8016ec2:	d10a      	bne.n	8016eda <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8016ec4:	7dfa      	ldrb	r2, [r7, #23]
 8016ec6:	4b1b      	ldr	r3, [pc, #108]	; (8016f34 <etharp_output+0x1d4>)
 8016ec8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016eca:	7dfb      	ldrb	r3, [r7, #23]
 8016ecc:	461a      	mov	r2, r3
 8016ece:	68b9      	ldr	r1, [r7, #8]
 8016ed0:	68f8      	ldr	r0, [r7, #12]
 8016ed2:	f7ff feab 	bl	8016c2c <etharp_output_to_arp_index>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	e01c      	b.n	8016f14 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	b2db      	uxtb	r3, r3
 8016ee4:	75fb      	strb	r3, [r7, #23]
 8016ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016eea:	2b09      	cmp	r3, #9
 8016eec:	ddd0      	ble.n	8016e90 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016eee:	68ba      	ldr	r2, [r7, #8]
 8016ef0:	69b9      	ldr	r1, [r7, #24]
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f000 f822 	bl	8016f3c <etharp_query>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	e00b      	b.n	8016f14 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8016f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	68b9      	ldr	r1, [r7, #8]
 8016f0c:	68f8      	ldr	r0, [r7, #12]
 8016f0e:	f001 fcc9 	bl	80188a4 <ethernet_output>
 8016f12:	4603      	mov	r3, r0
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	3720      	adds	r7, #32
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	0801be58 	.word	0x0801be58
 8016f20:	0801bfcc 	.word	0x0801bfcc
 8016f24:	0801bef4 	.word	0x0801bef4
 8016f28:	0801c01c 	.word	0x0801c01c
 8016f2c:	0801bfbc 	.word	0x0801bfbc
 8016f30:	0801c6ac 	.word	0x0801c6ac
 8016f34:	200041e4 	.word	0x200041e4
 8016f38:	200040f4 	.word	0x200040f4

08016f3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b08c      	sub	sp, #48	; 0x30
 8016f40:	af02      	add	r7, sp, #8
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	3325      	adds	r3, #37	; 0x25
 8016f4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016f4e:	23ff      	movs	r3, #255	; 0xff
 8016f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016f54:	2300      	movs	r3, #0
 8016f56:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	68f9      	ldr	r1, [r7, #12]
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f000 fdfe 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d10c      	bne.n	8016f84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f72:	2be0      	cmp	r3, #224	; 0xe0
 8016f74:	d006      	beq.n	8016f84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d003      	beq.n	8016f84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d102      	bne.n	8016f8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f84:	f06f 030f 	mvn.w	r3, #15
 8016f88:	e10f      	b.n	80171aa <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016f8a:	68fa      	ldr	r2, [r7, #12]
 8016f8c:	2101      	movs	r1, #1
 8016f8e:	68b8      	ldr	r0, [r7, #8]
 8016f90:	f7ff fba2 	bl	80166d8 <etharp_find_entry>
 8016f94:	4603      	mov	r3, r0
 8016f96:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8016f98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	da02      	bge.n	8016fa6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8016fa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016fa4:	e101      	b.n	80171aa <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016fa6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016faa:	4982      	ldr	r1, [pc, #520]	; (80171b4 <etharp_query+0x278>)
 8016fac:	4613      	mov	r3, r2
 8016fae:	005b      	lsls	r3, r3, #1
 8016fb0:	4413      	add	r3, r2
 8016fb2:	00db      	lsls	r3, r3, #3
 8016fb4:	440b      	add	r3, r1
 8016fb6:	3314      	adds	r3, #20
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d117      	bne.n	8016fee <etharp_query+0xb2>
    is_new_entry = 1;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016fc2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016fc6:	497b      	ldr	r1, [pc, #492]	; (80171b4 <etharp_query+0x278>)
 8016fc8:	4613      	mov	r3, r2
 8016fca:	005b      	lsls	r3, r3, #1
 8016fcc:	4413      	add	r3, r2
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	440b      	add	r3, r1
 8016fd2:	3314      	adds	r3, #20
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016fd8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016fdc:	4975      	ldr	r1, [pc, #468]	; (80171b4 <etharp_query+0x278>)
 8016fde:	4613      	mov	r3, r2
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4413      	add	r3, r2
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	440b      	add	r3, r1
 8016fe8:	3308      	adds	r3, #8
 8016fea:	68fa      	ldr	r2, [r7, #12]
 8016fec:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016fee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016ff2:	4970      	ldr	r1, [pc, #448]	; (80171b4 <etharp_query+0x278>)
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	440b      	add	r3, r1
 8016ffe:	3314      	adds	r3, #20
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	2b01      	cmp	r3, #1
 8017004:	d012      	beq.n	801702c <etharp_query+0xf0>
 8017006:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801700a:	496a      	ldr	r1, [pc, #424]	; (80171b4 <etharp_query+0x278>)
 801700c:	4613      	mov	r3, r2
 801700e:	005b      	lsls	r3, r3, #1
 8017010:	4413      	add	r3, r2
 8017012:	00db      	lsls	r3, r3, #3
 8017014:	440b      	add	r3, r1
 8017016:	3314      	adds	r3, #20
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	2b01      	cmp	r3, #1
 801701c:	d806      	bhi.n	801702c <etharp_query+0xf0>
 801701e:	4b66      	ldr	r3, [pc, #408]	; (80171b8 <etharp_query+0x27c>)
 8017020:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017024:	4965      	ldr	r1, [pc, #404]	; (80171bc <etharp_query+0x280>)
 8017026:	4866      	ldr	r0, [pc, #408]	; (80171c0 <etharp_query+0x284>)
 8017028:	f001 fec2 	bl	8018db0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801702c:	6a3b      	ldr	r3, [r7, #32]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d102      	bne.n	8017038 <etharp_query+0xfc>
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d10c      	bne.n	8017052 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017038:	68b9      	ldr	r1, [r7, #8]
 801703a:	68f8      	ldr	r0, [r7, #12]
 801703c:	f000 f976 	bl	801732c <etharp_request>
 8017040:	4603      	mov	r3, r0
 8017042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d102      	bne.n	8017052 <etharp_query+0x116>
      return result;
 801704c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017050:	e0ab      	b.n	80171aa <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d106      	bne.n	8017066 <etharp_query+0x12a>
 8017058:	4b57      	ldr	r3, [pc, #348]	; (80171b8 <etharp_query+0x27c>)
 801705a:	f240 32db 	movw	r2, #987	; 0x3db
 801705e:	4959      	ldr	r1, [pc, #356]	; (80171c4 <etharp_query+0x288>)
 8017060:	4857      	ldr	r0, [pc, #348]	; (80171c0 <etharp_query+0x284>)
 8017062:	f001 fea5 	bl	8018db0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017066:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801706a:	4952      	ldr	r1, [pc, #328]	; (80171b4 <etharp_query+0x278>)
 801706c:	4613      	mov	r3, r2
 801706e:	005b      	lsls	r3, r3, #1
 8017070:	4413      	add	r3, r2
 8017072:	00db      	lsls	r3, r3, #3
 8017074:	440b      	add	r3, r1
 8017076:	3314      	adds	r3, #20
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d919      	bls.n	80170b2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801707e:	7cfa      	ldrb	r2, [r7, #19]
 8017080:	4b51      	ldr	r3, [pc, #324]	; (80171c8 <etharp_query+0x28c>)
 8017082:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017084:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017088:	4613      	mov	r3, r2
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	4413      	add	r3, r2
 801708e:	00db      	lsls	r3, r3, #3
 8017090:	3308      	adds	r3, #8
 8017092:	4a48      	ldr	r2, [pc, #288]	; (80171b4 <etharp_query+0x278>)
 8017094:	4413      	add	r3, r2
 8017096:	1d1a      	adds	r2, r3, #4
 8017098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801709c:	9300      	str	r3, [sp, #0]
 801709e:	4613      	mov	r3, r2
 80170a0:	697a      	ldr	r2, [r7, #20]
 80170a2:	6879      	ldr	r1, [r7, #4]
 80170a4:	68f8      	ldr	r0, [r7, #12]
 80170a6:	f001 fbfd 	bl	80188a4 <ethernet_output>
 80170aa:	4603      	mov	r3, r0
 80170ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170b0:	e079      	b.n	80171a6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80170b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80170b6:	493f      	ldr	r1, [pc, #252]	; (80171b4 <etharp_query+0x278>)
 80170b8:	4613      	mov	r3, r2
 80170ba:	005b      	lsls	r3, r3, #1
 80170bc:	4413      	add	r3, r2
 80170be:	00db      	lsls	r3, r3, #3
 80170c0:	440b      	add	r3, r1
 80170c2:	3314      	adds	r3, #20
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d16d      	bne.n	80171a6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80170ca:	2300      	movs	r3, #0
 80170cc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80170d2:	e01a      	b.n	801710a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	895a      	ldrh	r2, [r3, #10]
 80170d8:	69fb      	ldr	r3, [r7, #28]
 80170da:	891b      	ldrh	r3, [r3, #8]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d10a      	bne.n	80170f6 <etharp_query+0x1ba>
 80170e0:	69fb      	ldr	r3, [r7, #28]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d006      	beq.n	80170f6 <etharp_query+0x1ba>
 80170e8:	4b33      	ldr	r3, [pc, #204]	; (80171b8 <etharp_query+0x27c>)
 80170ea:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80170ee:	4937      	ldr	r1, [pc, #220]	; (80171cc <etharp_query+0x290>)
 80170f0:	4833      	ldr	r0, [pc, #204]	; (80171c0 <etharp_query+0x284>)
 80170f2:	f001 fe5d 	bl	8018db0 <iprintf>
      if (p->type != PBUF_ROM) {
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	7b1b      	ldrb	r3, [r3, #12]
 80170fa:	2b01      	cmp	r3, #1
 80170fc:	d002      	beq.n	8017104 <etharp_query+0x1c8>
        copy_needed = 1;
 80170fe:	2301      	movs	r3, #1
 8017100:	61bb      	str	r3, [r7, #24]
        break;
 8017102:	e005      	b.n	8017110 <etharp_query+0x1d4>
      }
      p = p->next;
 8017104:	69fb      	ldr	r3, [r7, #28]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	61fb      	str	r3, [r7, #28]
    while (p) {
 801710a:	69fb      	ldr	r3, [r7, #28]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d1e1      	bne.n	80170d4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d017      	beq.n	8017146 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8017116:	69fb      	ldr	r3, [r7, #28]
 8017118:	891b      	ldrh	r3, [r3, #8]
 801711a:	2200      	movs	r2, #0
 801711c:	4619      	mov	r1, r3
 801711e:	2002      	movs	r0, #2
 8017120:	f7f8 fdf8 	bl	800fd14 <pbuf_alloc>
 8017124:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8017126:	69fb      	ldr	r3, [r7, #28]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d011      	beq.n	8017150 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801712c:	6879      	ldr	r1, [r7, #4]
 801712e:	69f8      	ldr	r0, [r7, #28]
 8017130:	f7f9 fa92 	bl	8010658 <pbuf_copy>
 8017134:	4603      	mov	r3, r0
 8017136:	2b00      	cmp	r3, #0
 8017138:	d00a      	beq.n	8017150 <etharp_query+0x214>
          pbuf_free(p);
 801713a:	69f8      	ldr	r0, [r7, #28]
 801713c:	f7f9 f95c 	bl	80103f8 <pbuf_free>
          p = NULL;
 8017140:	2300      	movs	r3, #0
 8017142:	61fb      	str	r3, [r7, #28]
 8017144:	e004      	b.n	8017150 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801714a:	69f8      	ldr	r0, [r7, #28]
 801714c:	f7f9 fa06 	bl	801055c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017150:	69fb      	ldr	r3, [r7, #28]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d024      	beq.n	80171a0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017156:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801715a:	4916      	ldr	r1, [pc, #88]	; (80171b4 <etharp_query+0x278>)
 801715c:	4613      	mov	r3, r2
 801715e:	005b      	lsls	r3, r3, #1
 8017160:	4413      	add	r3, r2
 8017162:	00db      	lsls	r3, r3, #3
 8017164:	440b      	add	r3, r1
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d00b      	beq.n	8017184 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801716c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017170:	4910      	ldr	r1, [pc, #64]	; (80171b4 <etharp_query+0x278>)
 8017172:	4613      	mov	r3, r2
 8017174:	005b      	lsls	r3, r3, #1
 8017176:	4413      	add	r3, r2
 8017178:	00db      	lsls	r3, r3, #3
 801717a:	440b      	add	r3, r1
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	4618      	mov	r0, r3
 8017180:	f7f9 f93a 	bl	80103f8 <pbuf_free>
      }
      arp_table[i].q = p;
 8017184:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017188:	490a      	ldr	r1, [pc, #40]	; (80171b4 <etharp_query+0x278>)
 801718a:	4613      	mov	r3, r2
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	4413      	add	r3, r2
 8017190:	00db      	lsls	r3, r3, #3
 8017192:	440b      	add	r3, r1
 8017194:	69fa      	ldr	r2, [r7, #28]
 8017196:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017198:	2300      	movs	r3, #0
 801719a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801719e:	e002      	b.n	80171a6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80171a0:	23ff      	movs	r3, #255	; 0xff
 80171a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80171a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3728      	adds	r7, #40	; 0x28
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	200040f4 	.word	0x200040f4
 80171b8:	0801be58 	.word	0x0801be58
 80171bc:	0801c028 	.word	0x0801c028
 80171c0:	0801bef4 	.word	0x0801bef4
 80171c4:	0801c01c 	.word	0x0801c01c
 80171c8:	200041e4 	.word	0x200041e4
 80171cc:	0801c050 	.word	0x0801c050

080171d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b08a      	sub	sp, #40	; 0x28
 80171d4:	af02      	add	r7, sp, #8
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
 80171dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80171de:	2300      	movs	r3, #0
 80171e0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d106      	bne.n	80171f6 <etharp_raw+0x26>
 80171e8:	4b3a      	ldr	r3, [pc, #232]	; (80172d4 <etharp_raw+0x104>)
 80171ea:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80171ee:	493a      	ldr	r1, [pc, #232]	; (80172d8 <etharp_raw+0x108>)
 80171f0:	483a      	ldr	r0, [pc, #232]	; (80172dc <etharp_raw+0x10c>)
 80171f2:	f001 fddd 	bl	8018db0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80171f6:	2200      	movs	r2, #0
 80171f8:	211c      	movs	r1, #28
 80171fa:	2002      	movs	r0, #2
 80171fc:	f7f8 fd8a 	bl	800fd14 <pbuf_alloc>
 8017200:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017202:	69bb      	ldr	r3, [r7, #24]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d102      	bne.n	801720e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017208:	f04f 33ff 	mov.w	r3, #4294967295
 801720c:	e05d      	b.n	80172ca <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801720e:	69bb      	ldr	r3, [r7, #24]
 8017210:	895b      	ldrh	r3, [r3, #10]
 8017212:	2b1b      	cmp	r3, #27
 8017214:	d806      	bhi.n	8017224 <etharp_raw+0x54>
 8017216:	4b2f      	ldr	r3, [pc, #188]	; (80172d4 <etharp_raw+0x104>)
 8017218:	f240 4264 	movw	r2, #1124	; 0x464
 801721c:	4930      	ldr	r1, [pc, #192]	; (80172e0 <etharp_raw+0x110>)
 801721e:	482f      	ldr	r0, [pc, #188]	; (80172dc <etharp_raw+0x10c>)
 8017220:	f001 fdc6 	bl	8018db0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017224:	69bb      	ldr	r3, [r7, #24]
 8017226:	685b      	ldr	r3, [r3, #4]
 8017228:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801722a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801722c:	4618      	mov	r0, r3
 801722e:	f7f7 fec9 	bl	800efc4 <lwip_htons>
 8017232:	4603      	mov	r3, r0
 8017234:	461a      	mov	r2, r3
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017240:	2b06      	cmp	r3, #6
 8017242:	d006      	beq.n	8017252 <etharp_raw+0x82>
 8017244:	4b23      	ldr	r3, [pc, #140]	; (80172d4 <etharp_raw+0x104>)
 8017246:	f240 426b 	movw	r2, #1131	; 0x46b
 801724a:	4926      	ldr	r1, [pc, #152]	; (80172e4 <etharp_raw+0x114>)
 801724c:	4823      	ldr	r0, [pc, #140]	; (80172dc <etharp_raw+0x10c>)
 801724e:	f001 fdaf 	bl	8018db0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8017252:	697b      	ldr	r3, [r7, #20]
 8017254:	3308      	adds	r3, #8
 8017256:	2206      	movs	r2, #6
 8017258:	6839      	ldr	r1, [r7, #0]
 801725a:	4618      	mov	r0, r3
 801725c:	f001 fd95 	bl	8018d8a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	3312      	adds	r3, #18
 8017264:	2206      	movs	r2, #6
 8017266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017268:	4618      	mov	r0, r3
 801726a:	f001 fd8e 	bl	8018d8a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801726e:	697b      	ldr	r3, [r7, #20]
 8017270:	330e      	adds	r3, #14
 8017272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017274:	6812      	ldr	r2, [r2, #0]
 8017276:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	3318      	adds	r3, #24
 801727c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801727e:	6812      	ldr	r2, [r2, #0]
 8017280:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	2200      	movs	r2, #0
 8017286:	701a      	strb	r2, [r3, #0]
 8017288:	2200      	movs	r2, #0
 801728a:	f042 0201 	orr.w	r2, r2, #1
 801728e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	2200      	movs	r2, #0
 8017294:	f042 0208 	orr.w	r2, r2, #8
 8017298:	709a      	strb	r2, [r3, #2]
 801729a:	2200      	movs	r2, #0
 801729c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	2206      	movs	r2, #6
 80172a2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	2204      	movs	r2, #4
 80172a8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80172aa:	f640 0306 	movw	r3, #2054	; 0x806
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	68ba      	ldr	r2, [r7, #8]
 80172b4:	69b9      	ldr	r1, [r7, #24]
 80172b6:	68f8      	ldr	r0, [r7, #12]
 80172b8:	f001 faf4 	bl	80188a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80172bc:	69b8      	ldr	r0, [r7, #24]
 80172be:	f7f9 f89b 	bl	80103f8 <pbuf_free>
  p = NULL;
 80172c2:	2300      	movs	r3, #0
 80172c4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80172c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3720      	adds	r7, #32
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
 80172d2:	bf00      	nop
 80172d4:	0801be58 	.word	0x0801be58
 80172d8:	0801bfcc 	.word	0x0801bfcc
 80172dc:	0801bef4 	.word	0x0801bef4
 80172e0:	0801c06c 	.word	0x0801c06c
 80172e4:	0801c0a0 	.word	0x0801c0a0

080172e8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b088      	sub	sp, #32
 80172ec:	af04      	add	r7, sp, #16
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	60b9      	str	r1, [r7, #8]
 80172f2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017304:	2201      	movs	r2, #1
 8017306:	9203      	str	r2, [sp, #12]
 8017308:	68ba      	ldr	r2, [r7, #8]
 801730a:	9202      	str	r2, [sp, #8]
 801730c:	4a06      	ldr	r2, [pc, #24]	; (8017328 <etharp_request_dst+0x40>)
 801730e:	9201      	str	r2, [sp, #4]
 8017310:	9300      	str	r3, [sp, #0]
 8017312:	4603      	mov	r3, r0
 8017314:	687a      	ldr	r2, [r7, #4]
 8017316:	68f8      	ldr	r0, [r7, #12]
 8017318:	f7ff ff5a 	bl	80171d0 <etharp_raw>
 801731c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801731e:	4618      	mov	r0, r3
 8017320:	3710      	adds	r7, #16
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	0801c6b4 	.word	0x0801c6b4

0801732c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b082      	sub	sp, #8
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017336:	4a05      	ldr	r2, [pc, #20]	; (801734c <etharp_request+0x20>)
 8017338:	6839      	ldr	r1, [r7, #0]
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7ff ffd4 	bl	80172e8 <etharp_request_dst>
 8017340:	4603      	mov	r3, r0
}
 8017342:	4618      	mov	r0, r3
 8017344:	3708      	adds	r7, #8
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	0801c6ac 	.word	0x0801c6ac

08017350 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b08e      	sub	sp, #56	; 0x38
 8017354:	af04      	add	r7, sp, #16
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801735a:	4b7a      	ldr	r3, [pc, #488]	; (8017544 <icmp_input+0x1f4>)
 801735c:	689b      	ldr	r3, [r3, #8]
 801735e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8017360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	b29b      	uxth	r3, r3
 8017366:	f003 030f 	and.w	r3, r3, #15
 801736a:	b29b      	uxth	r3, r3
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017372:	2b13      	cmp	r3, #19
 8017374:	f240 80d1 	bls.w	801751a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	895b      	ldrh	r3, [r3, #10]
 801737c:	2b03      	cmp	r3, #3
 801737e:	f240 80ce 	bls.w	801751e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	685b      	ldr	r3, [r3, #4]
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801738c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017390:	2b00      	cmp	r3, #0
 8017392:	f000 80bb 	beq.w	801750c <icmp_input+0x1bc>
 8017396:	2b08      	cmp	r3, #8
 8017398:	f040 80bb 	bne.w	8017512 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801739c:	4b6a      	ldr	r3, [pc, #424]	; (8017548 <icmp_input+0x1f8>)
 801739e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173a0:	4b68      	ldr	r3, [pc, #416]	; (8017544 <icmp_input+0x1f4>)
 80173a2:	695b      	ldr	r3, [r3, #20]
 80173a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173a8:	2be0      	cmp	r3, #224	; 0xe0
 80173aa:	f000 80bf 	beq.w	801752c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80173ae:	4b65      	ldr	r3, [pc, #404]	; (8017544 <icmp_input+0x1f4>)
 80173b0:	695a      	ldr	r2, [r3, #20]
 80173b2:	4b64      	ldr	r3, [pc, #400]	; (8017544 <icmp_input+0x1f4>)
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	4619      	mov	r1, r3
 80173b8:	4610      	mov	r0, r2
 80173ba:	f000 fbd1 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 80173be:	4603      	mov	r3, r0
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	f040 80b5 	bne.w	8017530 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	891b      	ldrh	r3, [r3, #8]
 80173ca:	2b07      	cmp	r3, #7
 80173cc:	f240 80a9 	bls.w	8017522 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80173d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173d2:	330e      	adds	r3, #14
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	b21b      	sxth	r3, r3
 80173d8:	4619      	mov	r1, r3
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f7f8 ffe8 	bl	80103b0 <pbuf_header>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d046      	beq.n	8017474 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	891a      	ldrh	r2, [r3, #8]
 80173ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173ec:	4413      	add	r3, r2
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	2200      	movs	r2, #0
 80173f2:	4619      	mov	r1, r3
 80173f4:	2002      	movs	r0, #2
 80173f6:	f7f8 fc8d 	bl	800fd14 <pbuf_alloc>
 80173fa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80173fc:	69bb      	ldr	r3, [r7, #24]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	f000 8098 	beq.w	8017534 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017404:	69bb      	ldr	r3, [r7, #24]
 8017406:	895b      	ldrh	r3, [r3, #10]
 8017408:	461a      	mov	r2, r3
 801740a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801740c:	3308      	adds	r3, #8
 801740e:	429a      	cmp	r2, r3
 8017410:	d203      	bcs.n	801741a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8017412:	69b8      	ldr	r0, [r7, #24]
 8017414:	f7f8 fff0 	bl	80103f8 <pbuf_free>
        goto icmperr;
 8017418:	e08d      	b.n	8017536 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801741a:	69bb      	ldr	r3, [r7, #24]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017422:	4618      	mov	r0, r3
 8017424:	f001 fcb1 	bl	8018d8a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8017428:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801742a:	425b      	negs	r3, r3
 801742c:	b29b      	uxth	r3, r3
 801742e:	b21b      	sxth	r3, r3
 8017430:	4619      	mov	r1, r3
 8017432:	69b8      	ldr	r0, [r7, #24]
 8017434:	f7f8 ffbc 	bl	80103b0 <pbuf_header>
 8017438:	4603      	mov	r3, r0
 801743a:	2b00      	cmp	r3, #0
 801743c:	d009      	beq.n	8017452 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801743e:	4b43      	ldr	r3, [pc, #268]	; (801754c <icmp_input+0x1fc>)
 8017440:	22af      	movs	r2, #175	; 0xaf
 8017442:	4943      	ldr	r1, [pc, #268]	; (8017550 <icmp_input+0x200>)
 8017444:	4843      	ldr	r0, [pc, #268]	; (8017554 <icmp_input+0x204>)
 8017446:	f001 fcb3 	bl	8018db0 <iprintf>
        pbuf_free(r);
 801744a:	69b8      	ldr	r0, [r7, #24]
 801744c:	f7f8 ffd4 	bl	80103f8 <pbuf_free>
        goto icmperr;
 8017450:	e071      	b.n	8017536 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8017452:	6879      	ldr	r1, [r7, #4]
 8017454:	69b8      	ldr	r0, [r7, #24]
 8017456:	f7f9 f8ff 	bl	8010658 <pbuf_copy>
 801745a:	4603      	mov	r3, r0
 801745c:	2b00      	cmp	r3, #0
 801745e:	d003      	beq.n	8017468 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8017460:	69b8      	ldr	r0, [r7, #24]
 8017462:	f7f8 ffc9 	bl	80103f8 <pbuf_free>
        goto icmperr;
 8017466:	e066      	b.n	8017536 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f7f8 ffc5 	bl	80103f8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801746e:	69bb      	ldr	r3, [r7, #24]
 8017470:	607b      	str	r3, [r7, #4]
 8017472:	e015      	b.n	80174a0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017476:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801747a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801747e:	33f2      	adds	r3, #242	; 0xf2
 8017480:	b29b      	uxth	r3, r3
 8017482:	b21b      	sxth	r3, r3
 8017484:	4619      	mov	r1, r3
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f7f8 ff92 	bl	80103b0 <pbuf_header>
 801748c:	4603      	mov	r3, r0
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017492:	4b2e      	ldr	r3, [pc, #184]	; (801754c <icmp_input+0x1fc>)
 8017494:	22c0      	movs	r2, #192	; 0xc0
 8017496:	4930      	ldr	r1, [pc, #192]	; (8017558 <icmp_input+0x208>)
 8017498:	482e      	ldr	r0, [pc, #184]	; (8017554 <icmp_input+0x204>)
 801749a:	f001 fc89 	bl	8018db0 <iprintf>
        goto icmperr;
 801749e:	e04a      	b.n	8017536 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80174a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80174aa:	4619      	mov	r1, r3
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f7f8 ff7f 	bl	80103b0 <pbuf_header>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d12b      	bne.n	8017510 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	685b      	ldr	r3, [r3, #4]
 80174bc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80174be:	69fb      	ldr	r3, [r7, #28]
 80174c0:	681a      	ldr	r2, [r3, #0]
 80174c2:	693b      	ldr	r3, [r7, #16]
 80174c4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80174c6:	4b1f      	ldr	r3, [pc, #124]	; (8017544 <icmp_input+0x1f4>)
 80174c8:	691a      	ldr	r2, [r3, #16]
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	2200      	movs	r2, #0
 80174d2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80174d4:	697b      	ldr	r3, [r7, #20]
 80174d6:	2200      	movs	r2, #0
 80174d8:	709a      	strb	r2, [r3, #2]
 80174da:	2200      	movs	r2, #0
 80174dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	22ff      	movs	r2, #255	; 0xff
 80174e2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80174e4:	693b      	ldr	r3, [r7, #16]
 80174e6:	2200      	movs	r2, #0
 80174e8:	729a      	strb	r2, [r3, #10]
 80174ea:	2200      	movs	r2, #0
 80174ec:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	9302      	str	r3, [sp, #8]
 80174f2:	2301      	movs	r3, #1
 80174f4:	9301      	str	r3, [sp, #4]
 80174f6:	2300      	movs	r3, #0
 80174f8:	9300      	str	r3, [sp, #0]
 80174fa:	23ff      	movs	r3, #255	; 0xff
 80174fc:	2200      	movs	r2, #0
 80174fe:	69f9      	ldr	r1, [r7, #28]
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f000 fa5b 	bl	80179bc <ip4_output_if>
 8017506:	4603      	mov	r3, r0
 8017508:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801750a:	e001      	b.n	8017510 <icmp_input+0x1c0>
    break;
 801750c:	bf00      	nop
 801750e:	e000      	b.n	8017512 <icmp_input+0x1c2>
    break;
 8017510:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f7f8 ff70 	bl	80103f8 <pbuf_free>
  return;
 8017518:	e011      	b.n	801753e <icmp_input+0x1ee>
    goto lenerr;
 801751a:	bf00      	nop
 801751c:	e002      	b.n	8017524 <icmp_input+0x1d4>
    goto lenerr;
 801751e:	bf00      	nop
 8017520:	e000      	b.n	8017524 <icmp_input+0x1d4>
      goto lenerr;
 8017522:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f7f8 ff67 	bl	80103f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801752a:	e008      	b.n	801753e <icmp_input+0x1ee>
      goto icmperr;
 801752c:	bf00      	nop
 801752e:	e002      	b.n	8017536 <icmp_input+0x1e6>
      goto icmperr;
 8017530:	bf00      	nop
 8017532:	e000      	b.n	8017536 <icmp_input+0x1e6>
        goto icmperr;
 8017534:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	f7f8 ff5e 	bl	80103f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801753c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801753e:	3728      	adds	r7, #40	; 0x28
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	200048f4 	.word	0x200048f4
 8017548:	20004908 	.word	0x20004908
 801754c:	0801c0e4 	.word	0x0801c0e4
 8017550:	0801c13c 	.word	0x0801c13c
 8017554:	0801c174 	.word	0x0801c174
 8017558:	0801c19c 	.word	0x0801c19c

0801755c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	460b      	mov	r3, r1
 8017566:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017568:	78fb      	ldrb	r3, [r7, #3]
 801756a:	461a      	mov	r2, r3
 801756c:	2103      	movs	r1, #3
 801756e:	6878      	ldr	r0, [r7, #4]
 8017570:	f000 f814 	bl	801759c <icmp_send_response>
}
 8017574:	bf00      	nop
 8017576:	3708      	adds	r7, #8
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
 8017584:	460b      	mov	r3, r1
 8017586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017588:	78fb      	ldrb	r3, [r7, #3]
 801758a:	461a      	mov	r2, r3
 801758c:	210b      	movs	r1, #11
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f000 f804 	bl	801759c <icmp_send_response>
}
 8017594:	bf00      	nop
 8017596:	3708      	adds	r7, #8
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b08c      	sub	sp, #48	; 0x30
 80175a0:	af04      	add	r7, sp, #16
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	460b      	mov	r3, r1
 80175a6:	70fb      	strb	r3, [r7, #3]
 80175a8:	4613      	mov	r3, r2
 80175aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80175ac:	2200      	movs	r2, #0
 80175ae:	2124      	movs	r1, #36	; 0x24
 80175b0:	2001      	movs	r0, #1
 80175b2:	f7f8 fbaf 	bl	800fd14 <pbuf_alloc>
 80175b6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80175b8:	69fb      	ldr	r3, [r7, #28]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d04c      	beq.n	8017658 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	895b      	ldrh	r3, [r3, #10]
 80175c2:	2b23      	cmp	r3, #35	; 0x23
 80175c4:	d806      	bhi.n	80175d4 <icmp_send_response+0x38>
 80175c6:	4b26      	ldr	r3, [pc, #152]	; (8017660 <icmp_send_response+0xc4>)
 80175c8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80175cc:	4925      	ldr	r1, [pc, #148]	; (8017664 <icmp_send_response+0xc8>)
 80175ce:	4826      	ldr	r0, [pc, #152]	; (8017668 <icmp_send_response+0xcc>)
 80175d0:	f001 fbee 	bl	8018db0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	685b      	ldr	r3, [r3, #4]
 80175d8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80175da:	69fb      	ldr	r3, [r7, #28]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	78fa      	ldrb	r2, [r7, #3]
 80175e4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	78ba      	ldrb	r2, [r7, #2]
 80175ea:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	2200      	movs	r2, #0
 80175f0:	711a      	strb	r2, [r3, #4]
 80175f2:	2200      	movs	r2, #0
 80175f4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80175f6:	697b      	ldr	r3, [r7, #20]
 80175f8:	2200      	movs	r2, #0
 80175fa:	719a      	strb	r2, [r3, #6]
 80175fc:	2200      	movs	r2, #0
 80175fe:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	685b      	ldr	r3, [r3, #4]
 8017604:	f103 0008 	add.w	r0, r3, #8
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	221c      	movs	r2, #28
 801760e:	4619      	mov	r1, r3
 8017610:	f001 fbbb 	bl	8018d8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	68db      	ldr	r3, [r3, #12]
 8017618:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801761a:	f107 030c 	add.w	r3, r7, #12
 801761e:	4618      	mov	r0, r3
 8017620:	f000 f824 	bl	801766c <ip4_route>
 8017624:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d011      	beq.n	8017650 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	2200      	movs	r2, #0
 8017630:	709a      	strb	r2, [r3, #2]
 8017632:	2200      	movs	r2, #0
 8017634:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017636:	f107 020c 	add.w	r2, r7, #12
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	2301      	movs	r3, #1
 8017640:	9301      	str	r3, [sp, #4]
 8017642:	2300      	movs	r3, #0
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	23ff      	movs	r3, #255	; 0xff
 8017648:	2100      	movs	r1, #0
 801764a:	69f8      	ldr	r0, [r7, #28]
 801764c:	f000 f9b6 	bl	80179bc <ip4_output_if>
  }
  pbuf_free(q);
 8017650:	69f8      	ldr	r0, [r7, #28]
 8017652:	f7f8 fed1 	bl	80103f8 <pbuf_free>
 8017656:	e000      	b.n	801765a <icmp_send_response+0xbe>
    return;
 8017658:	bf00      	nop
}
 801765a:	3720      	adds	r7, #32
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	0801c0e4 	.word	0x0801c0e4
 8017664:	0801c1d0 	.word	0x0801c1d0
 8017668:	0801c174 	.word	0x0801c174

0801766c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801766c:	b480      	push	{r7}
 801766e:	b085      	sub	sp, #20
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017674:	4b30      	ldr	r3, [pc, #192]	; (8017738 <ip4_route+0xcc>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	60fb      	str	r3, [r7, #12]
 801767a:	e036      	b.n	80176ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017682:	f003 0301 	and.w	r3, r3, #1
 8017686:	b2db      	uxtb	r3, r3
 8017688:	2b00      	cmp	r3, #0
 801768a:	d02b      	beq.n	80176e4 <ip4_route+0x78>
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017692:	089b      	lsrs	r3, r3, #2
 8017694:	f003 0301 	and.w	r3, r3, #1
 8017698:	b2db      	uxtb	r3, r3
 801769a:	2b00      	cmp	r3, #0
 801769c:	d022      	beq.n	80176e4 <ip4_route+0x78>
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	3304      	adds	r3, #4
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d01d      	beq.n	80176e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3304      	adds	r3, #4
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	405a      	eors	r2, r3
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	3308      	adds	r3, #8
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	4013      	ands	r3, r2
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d101      	bne.n	80176c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	e033      	b.n	801772c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80176ca:	f003 0302 	and.w	r3, r3, #2
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d108      	bne.n	80176e4 <ip4_route+0x78>
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681a      	ldr	r2, [r3, #0]
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	330c      	adds	r3, #12
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	429a      	cmp	r2, r3
 80176de:	d101      	bne.n	80176e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	e023      	b.n	801772c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	60fb      	str	r3, [r7, #12]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d1c5      	bne.n	801767c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80176f0:	4b12      	ldr	r3, [pc, #72]	; (801773c <ip4_route+0xd0>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d015      	beq.n	8017724 <ip4_route+0xb8>
 80176f8:	4b10      	ldr	r3, [pc, #64]	; (801773c <ip4_route+0xd0>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017700:	f003 0301 	and.w	r3, r3, #1
 8017704:	2b00      	cmp	r3, #0
 8017706:	d00d      	beq.n	8017724 <ip4_route+0xb8>
 8017708:	4b0c      	ldr	r3, [pc, #48]	; (801773c <ip4_route+0xd0>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017710:	f003 0304 	and.w	r3, r3, #4
 8017714:	2b00      	cmp	r3, #0
 8017716:	d005      	beq.n	8017724 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017718:	4b08      	ldr	r3, [pc, #32]	; (801773c <ip4_route+0xd0>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	3304      	adds	r3, #4
 801771e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017720:	2b00      	cmp	r3, #0
 8017722:	d101      	bne.n	8017728 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017724:	2300      	movs	r3, #0
 8017726:	e001      	b.n	801772c <ip4_route+0xc0>
  }

  return netif_default;
 8017728:	4b04      	ldr	r3, [pc, #16]	; (801773c <ip4_route+0xd0>)
 801772a:	681b      	ldr	r3, [r3, #0]
}
 801772c:	4618      	mov	r0, r3
 801772e:	3714      	adds	r7, #20
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr
 8017738:	200079a0 	.word	0x200079a0
 801773c:	200079a4 	.word	0x200079a4

08017740 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b086      	sub	sp, #24
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017750:	697b      	ldr	r3, [r7, #20]
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	091b      	lsrs	r3, r3, #4
 8017756:	b2db      	uxtb	r3, r3
 8017758:	2b04      	cmp	r3, #4
 801775a:	d004      	beq.n	8017766 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f7f8 fe4b 	bl	80103f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017762:	2300      	movs	r3, #0
 8017764:	e122      	b.n	80179ac <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	b29b      	uxth	r3, r3
 801776c:	f003 030f 	and.w	r3, r3, #15
 8017770:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8017772:	897b      	ldrh	r3, [r7, #10]
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	885b      	ldrh	r3, [r3, #2]
 801777c:	b29b      	uxth	r3, r3
 801777e:	4618      	mov	r0, r3
 8017780:	f7f7 fc20 	bl	800efc4 <lwip_htons>
 8017784:	4603      	mov	r3, r0
 8017786:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	891b      	ldrh	r3, [r3, #8]
 801778c:	893a      	ldrh	r2, [r7, #8]
 801778e:	429a      	cmp	r2, r3
 8017790:	d204      	bcs.n	801779c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8017792:	893b      	ldrh	r3, [r7, #8]
 8017794:	4619      	mov	r1, r3
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f7f8 fcba 	bl	8010110 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	895b      	ldrh	r3, [r3, #10]
 80177a0:	897a      	ldrh	r2, [r7, #10]
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d807      	bhi.n	80177b6 <ip4_input+0x76>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	891b      	ldrh	r3, [r3, #8]
 80177aa:	893a      	ldrh	r2, [r7, #8]
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d802      	bhi.n	80177b6 <ip4_input+0x76>
 80177b0:	897b      	ldrh	r3, [r7, #10]
 80177b2:	2b13      	cmp	r3, #19
 80177b4:	d804      	bhi.n	80177c0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f7f8 fe1e 	bl	80103f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80177bc:	2300      	movs	r3, #0
 80177be:	e0f5      	b.n	80179ac <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	691b      	ldr	r3, [r3, #16]
 80177c4:	4a7b      	ldr	r2, [pc, #492]	; (80179b4 <ip4_input+0x274>)
 80177c6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	4a79      	ldr	r2, [pc, #484]	; (80179b4 <ip4_input+0x274>)
 80177ce:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177d0:	4b78      	ldr	r3, [pc, #480]	; (80179b4 <ip4_input+0x274>)
 80177d2:	695b      	ldr	r3, [r3, #20]
 80177d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177d8:	2be0      	cmp	r3, #224	; 0xe0
 80177da:	d112      	bne.n	8017802 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80177e2:	f003 0301 	and.w	r3, r3, #1
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d007      	beq.n	80177fc <ip4_input+0xbc>
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	3304      	adds	r3, #4
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d002      	beq.n	80177fc <ip4_input+0xbc>
      netif = inp;
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	613b      	str	r3, [r7, #16]
 80177fa:	e041      	b.n	8017880 <ip4_input+0x140>
    } else {
      netif = NULL;
 80177fc:	2300      	movs	r3, #0
 80177fe:	613b      	str	r3, [r7, #16]
 8017800:	e03e      	b.n	8017880 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017802:	2301      	movs	r3, #1
 8017804:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801780a:	693b      	ldr	r3, [r7, #16]
 801780c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017810:	f003 0301 	and.w	r3, r3, #1
 8017814:	b2db      	uxtb	r3, r3
 8017816:	2b00      	cmp	r3, #0
 8017818:	d014      	beq.n	8017844 <ip4_input+0x104>
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	3304      	adds	r3, #4
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00f      	beq.n	8017844 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017824:	4b63      	ldr	r3, [pc, #396]	; (80179b4 <ip4_input+0x274>)
 8017826:	695a      	ldr	r2, [r3, #20]
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	3304      	adds	r3, #4
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	429a      	cmp	r2, r3
 8017830:	d026      	beq.n	8017880 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017832:	4b60      	ldr	r3, [pc, #384]	; (80179b4 <ip4_input+0x274>)
 8017834:	695b      	ldr	r3, [r3, #20]
 8017836:	6939      	ldr	r1, [r7, #16]
 8017838:	4618      	mov	r0, r3
 801783a:	f000 f991 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 801783e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017840:	2b00      	cmp	r3, #0
 8017842:	d11d      	bne.n	8017880 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d00d      	beq.n	8017866 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801784a:	4b5a      	ldr	r3, [pc, #360]	; (80179b4 <ip4_input+0x274>)
 801784c:	695b      	ldr	r3, [r3, #20]
 801784e:	b2db      	uxtb	r3, r3
 8017850:	2b7f      	cmp	r3, #127	; 0x7f
 8017852:	d102      	bne.n	801785a <ip4_input+0x11a>
          netif = NULL;
 8017854:	2300      	movs	r3, #0
 8017856:	613b      	str	r3, [r7, #16]
          break;
 8017858:	e012      	b.n	8017880 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801785e:	4b56      	ldr	r3, [pc, #344]	; (80179b8 <ip4_input+0x278>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	613b      	str	r3, [r7, #16]
 8017864:	e002      	b.n	801786c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8017866:	693b      	ldr	r3, [r7, #16]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801786c:	693a      	ldr	r2, [r7, #16]
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	429a      	cmp	r2, r3
 8017872:	d102      	bne.n	801787a <ip4_input+0x13a>
        netif = netif->next;
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1c4      	bne.n	801780a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017880:	4b4c      	ldr	r3, [pc, #304]	; (80179b4 <ip4_input+0x274>)
 8017882:	691b      	ldr	r3, [r3, #16]
 8017884:	6839      	ldr	r1, [r7, #0]
 8017886:	4618      	mov	r0, r3
 8017888:	f000 f96a 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 801788c:	4603      	mov	r3, r0
 801788e:	2b00      	cmp	r3, #0
 8017890:	d105      	bne.n	801789e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017892:	4b48      	ldr	r3, [pc, #288]	; (80179b4 <ip4_input+0x274>)
 8017894:	691b      	ldr	r3, [r3, #16]
 8017896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801789a:	2be0      	cmp	r3, #224	; 0xe0
 801789c:	d104      	bne.n	80178a8 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f7f8 fdaa 	bl	80103f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80178a4:	2300      	movs	r3, #0
 80178a6:	e081      	b.n	80179ac <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d104      	bne.n	80178b8 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80178ae:	6878      	ldr	r0, [r7, #4]
 80178b0:	f7f8 fda2 	bl	80103f8 <pbuf_free>
    return ERR_OK;
 80178b4:	2300      	movs	r3, #0
 80178b6:	e079      	b.n	80179ac <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	88db      	ldrh	r3, [r3, #6]
 80178bc:	b29b      	uxth	r3, r3
 80178be:	461a      	mov	r2, r3
 80178c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80178c4:	4013      	ands	r3, r2
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d00b      	beq.n	80178e2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f000 fc8e 	bl	80181ec <ip4_reass>
 80178d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d101      	bne.n	80178dc <ip4_input+0x19c>
      return ERR_OK;
 80178d8:	2300      	movs	r3, #0
 80178da:	e067      	b.n	80179ac <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80178e2:	4a34      	ldr	r2, [pc, #208]	; (80179b4 <ip4_input+0x274>)
 80178e4:	693b      	ldr	r3, [r7, #16]
 80178e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80178e8:	4a32      	ldr	r2, [pc, #200]	; (80179b4 <ip4_input+0x274>)
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80178ee:	4a31      	ldr	r2, [pc, #196]	; (80179b4 <ip4_input+0x274>)
 80178f0:	697b      	ldr	r3, [r7, #20]
 80178f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	f003 030f 	and.w	r3, r3, #15
 80178fe:	b29b      	uxth	r3, r3
 8017900:	009b      	lsls	r3, r3, #2
 8017902:	b29a      	uxth	r2, r3
 8017904:	4b2b      	ldr	r3, [pc, #172]	; (80179b4 <ip4_input+0x274>)
 8017906:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8017908:	897b      	ldrh	r3, [r7, #10]
 801790a:	425b      	negs	r3, r3
 801790c:	b29b      	uxth	r3, r3
 801790e:	b21b      	sxth	r3, r3
 8017910:	4619      	mov	r1, r3
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f7f8 fd4c 	bl	80103b0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	7a5b      	ldrb	r3, [r3, #9]
 801791c:	2b06      	cmp	r3, #6
 801791e:	d009      	beq.n	8017934 <ip4_input+0x1f4>
 8017920:	2b11      	cmp	r3, #17
 8017922:	d002      	beq.n	801792a <ip4_input+0x1ea>
 8017924:	2b01      	cmp	r3, #1
 8017926:	d00a      	beq.n	801793e <ip4_input+0x1fe>
 8017928:	e00e      	b.n	8017948 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801792a:	6839      	ldr	r1, [r7, #0]
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	f7fe fc0b 	bl	8016148 <udp_input>
      break;
 8017932:	e028      	b.n	8017986 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8017934:	6839      	ldr	r1, [r7, #0]
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f7fa fc28 	bl	801218c <tcp_input>
      break;
 801793c:	e023      	b.n	8017986 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801793e:	6839      	ldr	r1, [r7, #0]
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f7ff fd05 	bl	8017350 <icmp_input>
      break;
 8017946:	e01e      	b.n	8017986 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017948:	4b1a      	ldr	r3, [pc, #104]	; (80179b4 <ip4_input+0x274>)
 801794a:	695b      	ldr	r3, [r3, #20]
 801794c:	6939      	ldr	r1, [r7, #16]
 801794e:	4618      	mov	r0, r3
 8017950:	f000 f906 	bl	8017b60 <ip4_addr_isbroadcast_u32>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d112      	bne.n	8017980 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801795a:	4b16      	ldr	r3, [pc, #88]	; (80179b4 <ip4_input+0x274>)
 801795c:	695b      	ldr	r3, [r3, #20]
 801795e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017962:	2be0      	cmp	r3, #224	; 0xe0
 8017964:	d00c      	beq.n	8017980 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8017966:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801796a:	4619      	mov	r1, r3
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f7f8 fd31 	bl	80103d4 <pbuf_header_force>
        p->payload = iphdr;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	697a      	ldr	r2, [r7, #20]
 8017976:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017978:	2102      	movs	r1, #2
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f7ff fdee 	bl	801755c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f7f8 fd39 	bl	80103f8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017986:	4b0b      	ldr	r3, [pc, #44]	; (80179b4 <ip4_input+0x274>)
 8017988:	2200      	movs	r2, #0
 801798a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801798c:	4b09      	ldr	r3, [pc, #36]	; (80179b4 <ip4_input+0x274>)
 801798e:	2200      	movs	r2, #0
 8017990:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017992:	4b08      	ldr	r3, [pc, #32]	; (80179b4 <ip4_input+0x274>)
 8017994:	2200      	movs	r2, #0
 8017996:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017998:	4b06      	ldr	r3, [pc, #24]	; (80179b4 <ip4_input+0x274>)
 801799a:	2200      	movs	r2, #0
 801799c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801799e:	4b05      	ldr	r3, [pc, #20]	; (80179b4 <ip4_input+0x274>)
 80179a0:	2200      	movs	r2, #0
 80179a2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80179a4:	4b03      	ldr	r3, [pc, #12]	; (80179b4 <ip4_input+0x274>)
 80179a6:	2200      	movs	r2, #0
 80179a8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80179aa:	2300      	movs	r3, #0
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	3718      	adds	r7, #24
 80179b0:	46bd      	mov	sp, r7
 80179b2:	bd80      	pop	{r7, pc}
 80179b4:	200048f4 	.word	0x200048f4
 80179b8:	200079a0 	.word	0x200079a0

080179bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b08a      	sub	sp, #40	; 0x28
 80179c0:	af04      	add	r7, sp, #16
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d009      	beq.n	80179e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d003      	beq.n	80179e2 <ip4_output_if+0x26>
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d102      	bne.n	80179e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80179e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e4:	3304      	adds	r3, #4
 80179e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80179e8:	78fa      	ldrb	r2, [r7, #3]
 80179ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ec:	9302      	str	r3, [sp, #8]
 80179ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80179f2:	9301      	str	r3, [sp, #4]
 80179f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80179f8:	9300      	str	r3, [sp, #0]
 80179fa:	4613      	mov	r3, r2
 80179fc:	687a      	ldr	r2, [r7, #4]
 80179fe:	6979      	ldr	r1, [r7, #20]
 8017a00:	68f8      	ldr	r0, [r7, #12]
 8017a02:	f000 f805 	bl	8017a10 <ip4_output_if_src>
 8017a06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3718      	adds	r7, #24
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}

08017a10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b088      	sub	sp, #32
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	60f8      	str	r0, [r7, #12]
 8017a18:	60b9      	str	r1, [r7, #8]
 8017a1a:	607a      	str	r2, [r7, #4]
 8017a1c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	89db      	ldrh	r3, [r3, #14]
 8017a22:	2b01      	cmp	r3, #1
 8017a24:	d006      	beq.n	8017a34 <ip4_output_if_src+0x24>
 8017a26:	4b48      	ldr	r3, [pc, #288]	; (8017b48 <ip4_output_if_src+0x138>)
 8017a28:	f240 3233 	movw	r2, #819	; 0x333
 8017a2c:	4947      	ldr	r1, [pc, #284]	; (8017b4c <ip4_output_if_src+0x13c>)
 8017a2e:	4848      	ldr	r0, [pc, #288]	; (8017b50 <ip4_output_if_src+0x140>)
 8017a30:	f001 f9be 	bl	8018db0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d060      	beq.n	8017afc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017a3a:	2314      	movs	r3, #20
 8017a3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8017a3e:	2114      	movs	r1, #20
 8017a40:	68f8      	ldr	r0, [r7, #12]
 8017a42:	f7f8 fcb5 	bl	80103b0 <pbuf_header>
 8017a46:	4603      	mov	r3, r0
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d002      	beq.n	8017a52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017a4c:	f06f 0301 	mvn.w	r3, #1
 8017a50:	e075      	b.n	8017b3e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	895b      	ldrh	r3, [r3, #10]
 8017a5c:	2b13      	cmp	r3, #19
 8017a5e:	d806      	bhi.n	8017a6e <ip4_output_if_src+0x5e>
 8017a60:	4b39      	ldr	r3, [pc, #228]	; (8017b48 <ip4_output_if_src+0x138>)
 8017a62:	f240 3261 	movw	r2, #865	; 0x361
 8017a66:	493b      	ldr	r1, [pc, #236]	; (8017b54 <ip4_output_if_src+0x144>)
 8017a68:	4839      	ldr	r0, [pc, #228]	; (8017b50 <ip4_output_if_src+0x140>)
 8017a6a:	f001 f9a1 	bl	8018db0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	78fa      	ldrb	r2, [r7, #3]
 8017a72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017a7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681a      	ldr	r2, [r3, #0]
 8017a80:	69fb      	ldr	r3, [r7, #28]
 8017a82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017a84:	8b7b      	ldrh	r3, [r7, #26]
 8017a86:	089b      	lsrs	r3, r3, #2
 8017a88:	b29b      	uxth	r3, r3
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a90:	b2da      	uxtb	r2, r3
 8017a92:	69fb      	ldr	r3, [r7, #28]
 8017a94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017a96:	69fb      	ldr	r3, [r7, #28]
 8017a98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017a9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	891b      	ldrh	r3, [r3, #8]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7f7 fa8e 	bl	800efc4 <lwip_htons>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	461a      	mov	r2, r3
 8017aac:	69fb      	ldr	r3, [r7, #28]
 8017aae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ab0:	69fb      	ldr	r3, [r7, #28]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	719a      	strb	r2, [r3, #6]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017aba:	4b27      	ldr	r3, [pc, #156]	; (8017b58 <ip4_output_if_src+0x148>)
 8017abc:	881b      	ldrh	r3, [r3, #0]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7f7 fa80 	bl	800efc4 <lwip_htons>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017acc:	4b22      	ldr	r3, [pc, #136]	; (8017b58 <ip4_output_if_src+0x148>)
 8017ace:	881b      	ldrh	r3, [r3, #0]
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	4b20      	ldr	r3, [pc, #128]	; (8017b58 <ip4_output_if_src+0x148>)
 8017ad6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d104      	bne.n	8017ae8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017ade:	4b1f      	ldr	r3, [pc, #124]	; (8017b5c <ip4_output_if_src+0x14c>)
 8017ae0:	681a      	ldr	r2, [r3, #0]
 8017ae2:	69fb      	ldr	r3, [r7, #28]
 8017ae4:	60da      	str	r2, [r3, #12]
 8017ae6:	e003      	b.n	8017af0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	681a      	ldr	r2, [r3, #0]
 8017aec:	69fb      	ldr	r3, [r7, #28]
 8017aee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	2200      	movs	r2, #0
 8017af4:	729a      	strb	r2, [r3, #10]
 8017af6:	2200      	movs	r2, #0
 8017af8:	72da      	strb	r2, [r3, #11]
 8017afa:	e008      	b.n	8017b0e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	685b      	ldr	r3, [r3, #4]
 8017b00:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	691b      	ldr	r3, [r3, #16]
 8017b06:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017b08:	f107 0314 	add.w	r3, r7, #20
 8017b0c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b10:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d00c      	beq.n	8017b30 <ip4_output_if_src+0x120>
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	891a      	ldrh	r2, [r3, #8]
 8017b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d906      	bls.n	8017b30 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8017b22:	687a      	ldr	r2, [r7, #4]
 8017b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b26:	68f8      	ldr	r0, [r7, #12]
 8017b28:	f000 fd0a 	bl	8018540 <ip4_frag>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	e006      	b.n	8017b3e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b32:	695b      	ldr	r3, [r3, #20]
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	68f9      	ldr	r1, [r7, #12]
 8017b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b3a:	4798      	blx	r3
 8017b3c:	4603      	mov	r3, r0
}
 8017b3e:	4618      	mov	r0, r3
 8017b40:	3720      	adds	r7, #32
 8017b42:	46bd      	mov	sp, r7
 8017b44:	bd80      	pop	{r7, pc}
 8017b46:	bf00      	nop
 8017b48:	0801c1fc 	.word	0x0801c1fc
 8017b4c:	0801c254 	.word	0x0801c254
 8017b50:	0801c260 	.word	0x0801c260
 8017b54:	0801c288 	.word	0x0801c288
 8017b58:	200041e6 	.word	0x200041e6
 8017b5c:	0801c6a8 	.word	0x0801c6a8

08017b60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b085      	sub	sp, #20
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b74:	d002      	beq.n	8017b7c <ip4_addr_isbroadcast_u32+0x1c>
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d101      	bne.n	8017b80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e02a      	b.n	8017bd6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017b86:	f003 0302 	and.w	r3, r3, #2
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d101      	bne.n	8017b92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	e021      	b.n	8017bd6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	3304      	adds	r3, #4
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	687a      	ldr	r2, [r7, #4]
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	d101      	bne.n	8017ba2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	e019      	b.n	8017bd6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	3304      	adds	r3, #4
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	405a      	eors	r2, r3
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	3308      	adds	r3, #8
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	4013      	ands	r3, r2
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d10d      	bne.n	8017bd4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	3308      	adds	r3, #8
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	43da      	mvns	r2, r3
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	3308      	adds	r3, #8
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d101      	bne.n	8017bd4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	e000      	b.n	8017bd6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017bd4:	2300      	movs	r3, #0
  }
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3714      	adds	r7, #20
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be0:	4770      	bx	lr
	...

08017be4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b084      	sub	sp, #16
 8017be8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017bea:	2300      	movs	r3, #0
 8017bec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017bee:	4b12      	ldr	r3, [pc, #72]	; (8017c38 <ip_reass_tmr+0x54>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017bf4:	e018      	b.n	8017c28 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	7fdb      	ldrb	r3, [r3, #31]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d00b      	beq.n	8017c16 <ip_reass_tmr+0x32>
      r->timer--;
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	7fdb      	ldrb	r3, [r3, #31]
 8017c02:	3b01      	subs	r3, #1
 8017c04:	b2da      	uxtb	r2, r3
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	60fb      	str	r3, [r7, #12]
 8017c14:	e008      	b.n	8017c28 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017c20:	68b9      	ldr	r1, [r7, #8]
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	f000 f80a 	bl	8017c3c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d1e3      	bne.n	8017bf6 <ip_reass_tmr+0x12>
     }
   }
}
 8017c2e:	bf00      	nop
 8017c30:	3710      	adds	r7, #16
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	200041e8 	.word	0x200041e8

08017c3c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b088      	sub	sp, #32
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017c46:	2300      	movs	r3, #0
 8017c48:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017c4a:	683a      	ldr	r2, [r7, #0]
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d105      	bne.n	8017c5e <ip_reass_free_complete_datagram+0x22>
 8017c52:	4b45      	ldr	r3, [pc, #276]	; (8017d68 <ip_reass_free_complete_datagram+0x12c>)
 8017c54:	22ab      	movs	r2, #171	; 0xab
 8017c56:	4945      	ldr	r1, [pc, #276]	; (8017d6c <ip_reass_free_complete_datagram+0x130>)
 8017c58:	4845      	ldr	r0, [pc, #276]	; (8017d70 <ip_reass_free_complete_datagram+0x134>)
 8017c5a:	f001 f8a9 	bl	8018db0 <iprintf>
  if (prev != NULL) {
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d00a      	beq.n	8017c7a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017c64:	683b      	ldr	r3, [r7, #0]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d005      	beq.n	8017c7a <ip_reass_free_complete_datagram+0x3e>
 8017c6e:	4b3e      	ldr	r3, [pc, #248]	; (8017d68 <ip_reass_free_complete_datagram+0x12c>)
 8017c70:	22ad      	movs	r2, #173	; 0xad
 8017c72:	4940      	ldr	r1, [pc, #256]	; (8017d74 <ip_reass_free_complete_datagram+0x138>)
 8017c74:	483e      	ldr	r0, [pc, #248]	; (8017d70 <ip_reass_free_complete_datagram+0x134>)
 8017c76:	f001 f89b 	bl	8018db0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	685b      	ldr	r3, [r3, #4]
 8017c80:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017c82:	697b      	ldr	r3, [r7, #20]
 8017c84:	889b      	ldrh	r3, [r3, #4]
 8017c86:	b29b      	uxth	r3, r3
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d12a      	bne.n	8017ce2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	685b      	ldr	r3, [r3, #4]
 8017c90:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	681a      	ldr	r2, [r3, #0]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017c9a:	69bb      	ldr	r3, [r7, #24]
 8017c9c:	6858      	ldr	r0, [r3, #4]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	3308      	adds	r3, #8
 8017ca2:	2214      	movs	r2, #20
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	f001 f870 	bl	8018d8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017caa:	2101      	movs	r1, #1
 8017cac:	69b8      	ldr	r0, [r7, #24]
 8017cae:	f7ff fc65 	bl	801757c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017cb2:	69b8      	ldr	r0, [r7, #24]
 8017cb4:	f7f8 fc3a 	bl	801052c <pbuf_clen>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017cbc:	8bfa      	ldrh	r2, [r7, #30]
 8017cbe:	8a7b      	ldrh	r3, [r7, #18]
 8017cc0:	4413      	add	r3, r2
 8017cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017cc6:	db05      	blt.n	8017cd4 <ip_reass_free_complete_datagram+0x98>
 8017cc8:	4b27      	ldr	r3, [pc, #156]	; (8017d68 <ip_reass_free_complete_datagram+0x12c>)
 8017cca:	22bc      	movs	r2, #188	; 0xbc
 8017ccc:	492a      	ldr	r1, [pc, #168]	; (8017d78 <ip_reass_free_complete_datagram+0x13c>)
 8017cce:	4828      	ldr	r0, [pc, #160]	; (8017d70 <ip_reass_free_complete_datagram+0x134>)
 8017cd0:	f001 f86e 	bl	8018db0 <iprintf>
    pbufs_freed += clen;
 8017cd4:	8bfa      	ldrh	r2, [r7, #30]
 8017cd6:	8a7b      	ldrh	r3, [r7, #18]
 8017cd8:	4413      	add	r3, r2
 8017cda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017cdc:	69b8      	ldr	r0, [r7, #24]
 8017cde:	f7f8 fb8b 	bl	80103f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	685b      	ldr	r3, [r3, #4]
 8017ce6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017ce8:	e01f      	b.n	8017d2a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017cea:	69bb      	ldr	r3, [r7, #24]
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017cf0:	69bb      	ldr	r3, [r7, #24]
 8017cf2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017cf4:	697b      	ldr	r3, [r7, #20]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017cfa:	68f8      	ldr	r0, [r7, #12]
 8017cfc:	f7f8 fc16 	bl	801052c <pbuf_clen>
 8017d00:	4603      	mov	r3, r0
 8017d02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d04:	8bfa      	ldrh	r2, [r7, #30]
 8017d06:	8a7b      	ldrh	r3, [r7, #18]
 8017d08:	4413      	add	r3, r2
 8017d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d0e:	db05      	blt.n	8017d1c <ip_reass_free_complete_datagram+0xe0>
 8017d10:	4b15      	ldr	r3, [pc, #84]	; (8017d68 <ip_reass_free_complete_datagram+0x12c>)
 8017d12:	22cc      	movs	r2, #204	; 0xcc
 8017d14:	4918      	ldr	r1, [pc, #96]	; (8017d78 <ip_reass_free_complete_datagram+0x13c>)
 8017d16:	4816      	ldr	r0, [pc, #88]	; (8017d70 <ip_reass_free_complete_datagram+0x134>)
 8017d18:	f001 f84a 	bl	8018db0 <iprintf>
    pbufs_freed += clen;
 8017d1c:	8bfa      	ldrh	r2, [r7, #30]
 8017d1e:	8a7b      	ldrh	r3, [r7, #18]
 8017d20:	4413      	add	r3, r2
 8017d22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017d24:	68f8      	ldr	r0, [r7, #12]
 8017d26:	f7f8 fb67 	bl	80103f8 <pbuf_free>
  while (p != NULL) {
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d1dc      	bne.n	8017cea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017d30:	6839      	ldr	r1, [r7, #0]
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f000 f8c2 	bl	8017ebc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017d38:	4b10      	ldr	r3, [pc, #64]	; (8017d7c <ip_reass_free_complete_datagram+0x140>)
 8017d3a:	881b      	ldrh	r3, [r3, #0]
 8017d3c:	8bfa      	ldrh	r2, [r7, #30]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d905      	bls.n	8017d4e <ip_reass_free_complete_datagram+0x112>
 8017d42:	4b09      	ldr	r3, [pc, #36]	; (8017d68 <ip_reass_free_complete_datagram+0x12c>)
 8017d44:	22d2      	movs	r2, #210	; 0xd2
 8017d46:	490e      	ldr	r1, [pc, #56]	; (8017d80 <ip_reass_free_complete_datagram+0x144>)
 8017d48:	4809      	ldr	r0, [pc, #36]	; (8017d70 <ip_reass_free_complete_datagram+0x134>)
 8017d4a:	f001 f831 	bl	8018db0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8017d4e:	4b0b      	ldr	r3, [pc, #44]	; (8017d7c <ip_reass_free_complete_datagram+0x140>)
 8017d50:	881a      	ldrh	r2, [r3, #0]
 8017d52:	8bfb      	ldrh	r3, [r7, #30]
 8017d54:	1ad3      	subs	r3, r2, r3
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	4b08      	ldr	r3, [pc, #32]	; (8017d7c <ip_reass_free_complete_datagram+0x140>)
 8017d5a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017d5c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3720      	adds	r7, #32
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}
 8017d66:	bf00      	nop
 8017d68:	0801c2b8 	.word	0x0801c2b8
 8017d6c:	0801c314 	.word	0x0801c314
 8017d70:	0801c320 	.word	0x0801c320
 8017d74:	0801c348 	.word	0x0801c348
 8017d78:	0801c35c 	.word	0x0801c35c
 8017d7c:	200041ec 	.word	0x200041ec
 8017d80:	0801c37c 	.word	0x0801c37c

08017d84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b08a      	sub	sp, #40	; 0x28
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017d92:	2300      	movs	r3, #0
 8017d94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017d96:	2300      	movs	r3, #0
 8017d98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017da2:	4b28      	ldr	r3, [pc, #160]	; (8017e44 <ip_reass_remove_oldest_datagram+0xc0>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017da8:	e030      	b.n	8017e0c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dac:	695a      	ldr	r2, [r3, #20]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d10c      	bne.n	8017dd0 <ip_reass_remove_oldest_datagram+0x4c>
 8017db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db8:	699a      	ldr	r2, [r3, #24]
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	691b      	ldr	r3, [r3, #16]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d106      	bne.n	8017dd0 <ip_reass_remove_oldest_datagram+0x4c>
 8017dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc4:	899a      	ldrh	r2, [r3, #12]
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	889b      	ldrh	r3, [r3, #4]
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d014      	beq.n	8017dfa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017dd6:	6a3b      	ldr	r3, [r7, #32]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d104      	bne.n	8017de6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dde:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	61bb      	str	r3, [r7, #24]
 8017de4:	e009      	b.n	8017dfa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de8:	7fda      	ldrb	r2, [r3, #31]
 8017dea:	6a3b      	ldr	r3, [r7, #32]
 8017dec:	7fdb      	ldrb	r3, [r3, #31]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d803      	bhi.n	8017dfa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017df6:	69fb      	ldr	r3, [r7, #28]
 8017df8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d001      	beq.n	8017e06 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e04:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d1cb      	bne.n	8017daa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017e12:	6a3b      	ldr	r3, [r7, #32]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d008      	beq.n	8017e2a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017e18:	69b9      	ldr	r1, [r7, #24]
 8017e1a:	6a38      	ldr	r0, [r7, #32]
 8017e1c:	f7ff ff0e 	bl	8017c3c <ip_reass_free_complete_datagram>
 8017e20:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017e22:	697a      	ldr	r2, [r7, #20]
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	4413      	add	r3, r2
 8017e28:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017e2a:	697a      	ldr	r2, [r7, #20]
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	da02      	bge.n	8017e38 <ip_reass_remove_oldest_datagram+0xb4>
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	2b01      	cmp	r3, #1
 8017e36:	dcac      	bgt.n	8017d92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017e38:	697b      	ldr	r3, [r7, #20]
}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	3728      	adds	r7, #40	; 0x28
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}
 8017e42:	bf00      	nop
 8017e44:	200041e8 	.word	0x200041e8

08017e48 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017e52:	2004      	movs	r0, #4
 8017e54:	f7f7 fcc2 	bl	800f7dc <memp_malloc>
 8017e58:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d110      	bne.n	8017e82 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017e60:	6839      	ldr	r1, [r7, #0]
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f7ff ff8e 	bl	8017d84 <ip_reass_remove_oldest_datagram>
 8017e68:	4602      	mov	r2, r0
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	dc03      	bgt.n	8017e78 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017e70:	2004      	movs	r0, #4
 8017e72:	f7f7 fcb3 	bl	800f7dc <memp_malloc>
 8017e76:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d101      	bne.n	8017e82 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	e016      	b.n	8017eb0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017e82:	2220      	movs	r2, #32
 8017e84:	2100      	movs	r1, #0
 8017e86:	68f8      	ldr	r0, [r7, #12]
 8017e88:	f000 ff8a 	bl	8018da0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	2203      	movs	r2, #3
 8017e90:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017e92:	4b09      	ldr	r3, [pc, #36]	; (8017eb8 <ip_reass_enqueue_new_datagram+0x70>)
 8017e94:	681a      	ldr	r2, [r3, #0]
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017e9a:	4a07      	ldr	r2, [pc, #28]	; (8017eb8 <ip_reass_enqueue_new_datagram+0x70>)
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	3308      	adds	r3, #8
 8017ea4:	2214      	movs	r2, #20
 8017ea6:	6879      	ldr	r1, [r7, #4]
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f000 ff6e 	bl	8018d8a <memcpy>
  return ipr;
 8017eae:	68fb      	ldr	r3, [r7, #12]
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3710      	adds	r7, #16
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}
 8017eb8:	200041e8 	.word	0x200041e8

08017ebc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b082      	sub	sp, #8
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017ec6:	4b10      	ldr	r3, [pc, #64]	; (8017f08 <ip_reass_dequeue_datagram+0x4c>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	687a      	ldr	r2, [r7, #4]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d104      	bne.n	8017eda <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	4a0c      	ldr	r2, [pc, #48]	; (8017f08 <ip_reass_dequeue_datagram+0x4c>)
 8017ed6:	6013      	str	r3, [r2, #0]
 8017ed8:	e00d      	b.n	8017ef6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d106      	bne.n	8017eee <ip_reass_dequeue_datagram+0x32>
 8017ee0:	4b0a      	ldr	r3, [pc, #40]	; (8017f0c <ip_reass_dequeue_datagram+0x50>)
 8017ee2:	f240 1245 	movw	r2, #325	; 0x145
 8017ee6:	490a      	ldr	r1, [pc, #40]	; (8017f10 <ip_reass_dequeue_datagram+0x54>)
 8017ee8:	480a      	ldr	r0, [pc, #40]	; (8017f14 <ip_reass_dequeue_datagram+0x58>)
 8017eea:	f000 ff61 	bl	8018db0 <iprintf>
    prev->next = ipr->next;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	681a      	ldr	r2, [r3, #0]
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017ef6:	6879      	ldr	r1, [r7, #4]
 8017ef8:	2004      	movs	r0, #4
 8017efa:	f7f7 fce5 	bl	800f8c8 <memp_free>
}
 8017efe:	bf00      	nop
 8017f00:	3708      	adds	r7, #8
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop
 8017f08:	200041e8 	.word	0x200041e8
 8017f0c:	0801c2b8 	.word	0x0801c2b8
 8017f10:	0801c398 	.word	0x0801c398
 8017f14:	0801c320 	.word	0x0801c320

08017f18 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b08c      	sub	sp, #48	; 0x30
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	60f8      	str	r0, [r7, #12]
 8017f20:	60b9      	str	r1, [r7, #8]
 8017f22:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8017f24:	2300      	movs	r3, #0
 8017f26:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017f28:	2301      	movs	r3, #1
 8017f2a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8017f2c:	68bb      	ldr	r3, [r7, #8]
 8017f2e:	685b      	ldr	r3, [r3, #4]
 8017f30:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017f32:	69fb      	ldr	r3, [r7, #28]
 8017f34:	885b      	ldrh	r3, [r3, #2]
 8017f36:	b29b      	uxth	r3, r3
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7f7 f843 	bl	800efc4 <lwip_htons>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	461a      	mov	r2, r3
 8017f42:	69fb      	ldr	r3, [r7, #28]
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	f003 030f 	and.w	r3, r3, #15
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	009b      	lsls	r3, r3, #2
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	1ad3      	subs	r3, r2, r3
 8017f54:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	88db      	ldrh	r3, [r3, #6]
 8017f5a:	b29b      	uxth	r3, r3
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7f7 f831 	bl	800efc4 <lwip_htons>
 8017f62:	4603      	mov	r3, r0
 8017f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	00db      	lsls	r3, r3, #3
 8017f6c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	685b      	ldr	r3, [r3, #4]
 8017f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f76:	2200      	movs	r2, #0
 8017f78:	701a      	strb	r2, [r3, #0]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	705a      	strb	r2, [r3, #1]
 8017f7e:	2200      	movs	r2, #0
 8017f80:	709a      	strb	r2, [r3, #2]
 8017f82:	2200      	movs	r2, #0
 8017f84:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f88:	8b3a      	ldrh	r2, [r7, #24]
 8017f8a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8017f8c:	8b3a      	ldrh	r2, [r7, #24]
 8017f8e:	8b7b      	ldrh	r3, [r7, #26]
 8017f90:	4413      	add	r3, r2
 8017f92:	b29a      	uxth	r2, r3
 8017f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f96:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	685b      	ldr	r3, [r3, #4]
 8017f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8017f9e:	e061      	b.n	8018064 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8017fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa2:	685b      	ldr	r3, [r3, #4]
 8017fa4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8017fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa8:	889b      	ldrh	r3, [r3, #4]
 8017faa:	b29a      	uxth	r2, r3
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	889b      	ldrh	r3, [r3, #4]
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d232      	bcs.n	801801c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fba:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d01f      	beq.n	8018002 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc4:	889b      	ldrh	r3, [r3, #4]
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fca:	88db      	ldrh	r3, [r3, #6]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	f0c0 80e3 	bcc.w	801819a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8017fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd6:	88db      	ldrh	r3, [r3, #6]
 8017fd8:	b29a      	uxth	r2, r3
 8017fda:	697b      	ldr	r3, [r7, #20]
 8017fdc:	889b      	ldrh	r3, [r3, #4]
 8017fde:	b29b      	uxth	r3, r3
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	f200 80da 	bhi.w	801819a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe8:	68ba      	ldr	r2, [r7, #8]
 8017fea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fee:	88db      	ldrh	r3, [r3, #6]
 8017ff0:	b29a      	uxth	r2, r3
 8017ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff4:	889b      	ldrh	r3, [r3, #4]
 8017ff6:	b29b      	uxth	r3, r3
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d037      	beq.n	801806c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018000:	e034      	b.n	801806c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8018002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018004:	88db      	ldrh	r3, [r3, #6]
 8018006:	b29a      	uxth	r2, r3
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	889b      	ldrh	r3, [r3, #4]
 801800c:	b29b      	uxth	r3, r3
 801800e:	429a      	cmp	r2, r3
 8018010:	f200 80c5 	bhi.w	801819e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	68ba      	ldr	r2, [r7, #8]
 8018018:	605a      	str	r2, [r3, #4]
      break;
 801801a:	e027      	b.n	801806c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801e:	889b      	ldrh	r3, [r3, #4]
 8018020:	b29a      	uxth	r2, r3
 8018022:	697b      	ldr	r3, [r7, #20]
 8018024:	889b      	ldrh	r3, [r3, #4]
 8018026:	b29b      	uxth	r3, r3
 8018028:	429a      	cmp	r2, r3
 801802a:	f000 80ba 	beq.w	80181a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018030:	889b      	ldrh	r3, [r3, #4]
 8018032:	b29a      	uxth	r2, r3
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	88db      	ldrh	r3, [r3, #6]
 8018038:	b29b      	uxth	r3, r3
 801803a:	429a      	cmp	r2, r3
 801803c:	f0c0 80b3 	bcc.w	80181a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	2b00      	cmp	r3, #0
 8018044:	d009      	beq.n	801805a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8018046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018048:	88db      	ldrh	r3, [r3, #6]
 801804a:	b29a      	uxth	r2, r3
 801804c:	697b      	ldr	r3, [r7, #20]
 801804e:	889b      	ldrh	r3, [r3, #4]
 8018050:	b29b      	uxth	r3, r3
 8018052:	429a      	cmp	r2, r3
 8018054:	d001      	beq.n	801805a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018056:	2300      	movs	r3, #0
 8018058:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801805a:	697b      	ldr	r3, [r7, #20]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018060:	697b      	ldr	r3, [r7, #20]
 8018062:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	2b00      	cmp	r3, #0
 8018068:	d19a      	bne.n	8017fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801806a:	e000      	b.n	801806e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801806c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018070:	2b00      	cmp	r3, #0
 8018072:	d12d      	bne.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8018074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018076:	2b00      	cmp	r3, #0
 8018078:	d01c      	beq.n	80180b4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801807c:	88db      	ldrh	r3, [r3, #6]
 801807e:	b29a      	uxth	r2, r3
 8018080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018082:	889b      	ldrh	r3, [r3, #4]
 8018084:	b29b      	uxth	r3, r3
 8018086:	429a      	cmp	r2, r3
 8018088:	d906      	bls.n	8018098 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801808a:	4b51      	ldr	r3, [pc, #324]	; (80181d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801808c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018090:	4950      	ldr	r1, [pc, #320]	; (80181d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018092:	4851      	ldr	r0, [pc, #324]	; (80181d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018094:	f000 fe8c 	bl	8018db0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809a:	68ba      	ldr	r2, [r7, #8]
 801809c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a0:	88db      	ldrh	r3, [r3, #6]
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a6:	889b      	ldrh	r3, [r3, #4]
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d010      	beq.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80180ae:	2300      	movs	r3, #0
 80180b0:	623b      	str	r3, [r7, #32]
 80180b2:	e00d      	b.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	685b      	ldr	r3, [r3, #4]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d006      	beq.n	80180ca <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80180bc:	4b44      	ldr	r3, [pc, #272]	; (80181d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80180be:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80180c2:	4946      	ldr	r1, [pc, #280]	; (80181dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180c4:	4844      	ldr	r0, [pc, #272]	; (80181d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80180c6:	f000 fe73 	bl	8018db0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	68ba      	ldr	r2, [r7, #8]
 80180ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d105      	bne.n	80180e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	7f9b      	ldrb	r3, [r3, #30]
 80180da:	f003 0301 	and.w	r3, r3, #1
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d059      	beq.n	8018196 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80180e2:	6a3b      	ldr	r3, [r7, #32]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d04f      	beq.n	8018188 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d006      	beq.n	80180fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	685b      	ldr	r3, [r3, #4]
 80180f6:	889b      	ldrh	r3, [r3, #4]
 80180f8:	b29b      	uxth	r3, r3
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d002      	beq.n	8018104 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80180fe:	2300      	movs	r3, #0
 8018100:	623b      	str	r3, [r7, #32]
 8018102:	e041      	b.n	8018188 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018106:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801810e:	e012      	b.n	8018136 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8018110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018118:	88db      	ldrh	r3, [r3, #6]
 801811a:	b29a      	uxth	r2, r3
 801811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811e:	889b      	ldrh	r3, [r3, #4]
 8018120:	b29b      	uxth	r3, r3
 8018122:	429a      	cmp	r2, r3
 8018124:	d002      	beq.n	801812c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8018126:	2300      	movs	r3, #0
 8018128:	623b      	str	r3, [r7, #32]
            break;
 801812a:	e007      	b.n	801813c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018138:	2b00      	cmp	r3, #0
 801813a:	d1e9      	bne.n	8018110 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801813c:	6a3b      	ldr	r3, [r7, #32]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d022      	beq.n	8018188 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d106      	bne.n	8018158 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801814a:	4b21      	ldr	r3, [pc, #132]	; (80181d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801814c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8018150:	4923      	ldr	r1, [pc, #140]	; (80181e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018152:	4821      	ldr	r0, [pc, #132]	; (80181d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018154:	f000 fe2c 	bl	8018db0 <iprintf>
          LWIP_ASSERT("sanity check",
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018160:	429a      	cmp	r2, r3
 8018162:	d106      	bne.n	8018172 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8018164:	4b1a      	ldr	r3, [pc, #104]	; (80181d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018166:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801816a:	491d      	ldr	r1, [pc, #116]	; (80181e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801816c:	481a      	ldr	r0, [pc, #104]	; (80181d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801816e:	f000 fe1f 	bl	8018db0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d006      	beq.n	8018188 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801817a:	4b15      	ldr	r3, [pc, #84]	; (80181d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801817c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018180:	4918      	ldr	r1, [pc, #96]	; (80181e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018182:	4815      	ldr	r0, [pc, #84]	; (80181d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018184:	f000 fe14 	bl	8018db0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018188:	6a3b      	ldr	r3, [r7, #32]
 801818a:	2b00      	cmp	r3, #0
 801818c:	bf14      	ite	ne
 801818e:	2301      	movne	r3, #1
 8018190:	2300      	moveq	r3, #0
 8018192:	b2db      	uxtb	r3, r3
 8018194:	e018      	b.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018196:	2300      	movs	r3, #0
 8018198:	e016      	b.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 801819a:	bf00      	nop
 801819c:	e004      	b.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801819e:	bf00      	nop
 80181a0:	e002      	b.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80181a2:	bf00      	nop
 80181a4:	e000      	b.n	80181a8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80181a6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80181a8:	68b8      	ldr	r0, [r7, #8]
 80181aa:	f7f8 f9bf 	bl	801052c <pbuf_clen>
 80181ae:	4603      	mov	r3, r0
 80181b0:	461a      	mov	r2, r3
 80181b2:	4b0d      	ldr	r3, [pc, #52]	; (80181e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80181b4:	881b      	ldrh	r3, [r3, #0]
 80181b6:	1a9b      	subs	r3, r3, r2
 80181b8:	b29a      	uxth	r2, r3
 80181ba:	4b0b      	ldr	r3, [pc, #44]	; (80181e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80181bc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80181be:	68b8      	ldr	r0, [r7, #8]
 80181c0:	f7f8 f91a 	bl	80103f8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181c4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	3730      	adds	r7, #48	; 0x30
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	0801c2b8 	.word	0x0801c2b8
 80181d4:	0801c3b4 	.word	0x0801c3b4
 80181d8:	0801c320 	.word	0x0801c320
 80181dc:	0801c3d4 	.word	0x0801c3d4
 80181e0:	0801c40c 	.word	0x0801c40c
 80181e4:	0801c41c 	.word	0x0801c41c
 80181e8:	200041ec 	.word	0x200041ec

080181ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b08e      	sub	sp, #56	; 0x38
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80181fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fc:	781b      	ldrb	r3, [r3, #0]
 80181fe:	f003 030f 	and.w	r3, r3, #15
 8018202:	009b      	lsls	r3, r3, #2
 8018204:	2b14      	cmp	r3, #20
 8018206:	f040 8131 	bne.w	801846c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801820c:	88db      	ldrh	r3, [r3, #6]
 801820e:	b29b      	uxth	r3, r3
 8018210:	4618      	mov	r0, r3
 8018212:	f7f6 fed7 	bl	800efc4 <lwip_htons>
 8018216:	4603      	mov	r3, r0
 8018218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801821c:	b29b      	uxth	r3, r3
 801821e:	00db      	lsls	r3, r3, #3
 8018220:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	885b      	ldrh	r3, [r3, #2]
 8018226:	b29b      	uxth	r3, r3
 8018228:	4618      	mov	r0, r3
 801822a:	f7f6 fecb 	bl	800efc4 <lwip_htons>
 801822e:	4603      	mov	r3, r0
 8018230:	461a      	mov	r2, r3
 8018232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	b29b      	uxth	r3, r3
 8018238:	f003 030f 	and.w	r3, r3, #15
 801823c:	b29b      	uxth	r3, r3
 801823e:	009b      	lsls	r3, r3, #2
 8018240:	b29b      	uxth	r3, r3
 8018242:	1ad3      	subs	r3, r2, r3
 8018244:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f7f8 f970 	bl	801052c <pbuf_clen>
 801824c:	4603      	mov	r3, r0
 801824e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018250:	4b8d      	ldr	r3, [pc, #564]	; (8018488 <ip4_reass+0x29c>)
 8018252:	881b      	ldrh	r3, [r3, #0]
 8018254:	461a      	mov	r2, r3
 8018256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018258:	4413      	add	r3, r2
 801825a:	2b0a      	cmp	r3, #10
 801825c:	dd10      	ble.n	8018280 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801825e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018260:	4619      	mov	r1, r3
 8018262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018264:	f7ff fd8e 	bl	8017d84 <ip_reass_remove_oldest_datagram>
 8018268:	4603      	mov	r3, r0
 801826a:	2b00      	cmp	r3, #0
 801826c:	f000 8100 	beq.w	8018470 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018270:	4b85      	ldr	r3, [pc, #532]	; (8018488 <ip4_reass+0x29c>)
 8018272:	881b      	ldrh	r3, [r3, #0]
 8018274:	461a      	mov	r2, r3
 8018276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018278:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801827a:	2b0a      	cmp	r3, #10
 801827c:	f300 80f8 	bgt.w	8018470 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018280:	4b82      	ldr	r3, [pc, #520]	; (801848c <ip4_reass+0x2a0>)
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	633b      	str	r3, [r7, #48]	; 0x30
 8018286:	e015      	b.n	80182b4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828a:	695a      	ldr	r2, [r3, #20]
 801828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	429a      	cmp	r2, r3
 8018292:	d10c      	bne.n	80182ae <ip4_reass+0xc2>
 8018294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018296:	699a      	ldr	r2, [r3, #24]
 8018298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801829a:	691b      	ldr	r3, [r3, #16]
 801829c:	429a      	cmp	r2, r3
 801829e:	d106      	bne.n	80182ae <ip4_reass+0xc2>
 80182a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a2:	899a      	ldrh	r2, [r3, #12]
 80182a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182a6:	889b      	ldrh	r3, [r3, #4]
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d006      	beq.n	80182bc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80182ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	633b      	str	r3, [r7, #48]	; 0x30
 80182b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d1e6      	bne.n	8018288 <ip4_reass+0x9c>
 80182ba:	e000      	b.n	80182be <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80182bc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80182be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d109      	bne.n	80182d8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80182c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80182c6:	4619      	mov	r1, r3
 80182c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182ca:	f7ff fdbd 	bl	8017e48 <ip_reass_enqueue_new_datagram>
 80182ce:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80182d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d11c      	bne.n	8018310 <ip4_reass+0x124>
      goto nullreturn;
 80182d6:	e0ce      	b.n	8018476 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80182d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182da:	88db      	ldrh	r3, [r3, #6]
 80182dc:	b29b      	uxth	r3, r3
 80182de:	4618      	mov	r0, r3
 80182e0:	f7f6 fe70 	bl	800efc4 <lwip_htons>
 80182e4:	4603      	mov	r3, r0
 80182e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d110      	bne.n	8018310 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80182ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f0:	89db      	ldrh	r3, [r3, #14]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7f6 fe66 	bl	800efc4 <lwip_htons>
 80182f8:	4603      	mov	r3, r0
 80182fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d006      	beq.n	8018310 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018304:	3308      	adds	r3, #8
 8018306:	2214      	movs	r2, #20
 8018308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801830a:	4618      	mov	r0, r3
 801830c:	f000 fd3d 	bl	8018d8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018312:	88db      	ldrh	r3, [r3, #6]
 8018314:	b29b      	uxth	r3, r3
 8018316:	f003 0320 	and.w	r3, r3, #32
 801831a:	2b00      	cmp	r3, #0
 801831c:	bf0c      	ite	eq
 801831e:	2301      	moveq	r3, #1
 8018320:	2300      	movne	r3, #0
 8018322:	b2db      	uxtb	r3, r3
 8018324:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d00e      	beq.n	801834a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801832c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801832e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018330:	4413      	add	r3, r2
 8018332:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018334:	8b7a      	ldrh	r2, [r7, #26]
 8018336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018338:	429a      	cmp	r2, r3
 801833a:	f0c0 8099 	bcc.w	8018470 <ip4_reass+0x284>
 801833e:	8b7b      	ldrh	r3, [r7, #26]
 8018340:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018344:	4293      	cmp	r3, r2
 8018346:	f200 8093 	bhi.w	8018470 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801834a:	69fa      	ldr	r2, [r7, #28]
 801834c:	6879      	ldr	r1, [r7, #4]
 801834e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018350:	f7ff fde2 	bl	8017f18 <ip_reass_chain_frag_into_datagram_and_validate>
 8018354:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018356:	697b      	ldr	r3, [r7, #20]
 8018358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801835c:	f000 808a 	beq.w	8018474 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018360:	4b49      	ldr	r3, [pc, #292]	; (8018488 <ip4_reass+0x29c>)
 8018362:	881a      	ldrh	r2, [r3, #0]
 8018364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018366:	4413      	add	r3, r2
 8018368:	b29a      	uxth	r2, r3
 801836a:	4b47      	ldr	r3, [pc, #284]	; (8018488 <ip4_reass+0x29c>)
 801836c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801836e:	69fb      	ldr	r3, [r7, #28]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d00d      	beq.n	8018390 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8018374:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018378:	4413      	add	r3, r2
 801837a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837e:	8a7a      	ldrh	r2, [r7, #18]
 8018380:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018384:	7f9b      	ldrb	r3, [r3, #30]
 8018386:	f043 0301 	orr.w	r3, r3, #1
 801838a:	b2da      	uxtb	r2, r3
 801838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d168      	bne.n	8018468 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8018396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018398:	8b9b      	ldrh	r3, [r3, #28]
 801839a:	3314      	adds	r3, #20
 801839c:	b29a      	uxth	r2, r3
 801839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80183a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80183ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ae:	685b      	ldr	r3, [r3, #4]
 80183b0:	685b      	ldr	r3, [r3, #4]
 80183b2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80183b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b6:	3308      	adds	r3, #8
 80183b8:	2214      	movs	r2, #20
 80183ba:	4619      	mov	r1, r3
 80183bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183be:	f000 fce4 	bl	8018d8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80183c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c4:	8b9b      	ldrh	r3, [r3, #28]
 80183c6:	4618      	mov	r0, r3
 80183c8:	f7f6 fdfc 	bl	800efc4 <lwip_htons>
 80183cc:	4603      	mov	r3, r0
 80183ce:	461a      	mov	r2, r3
 80183d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80183d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d6:	2200      	movs	r2, #0
 80183d8:	719a      	strb	r2, [r3, #6]
 80183da:	2200      	movs	r2, #0
 80183dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80183de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e0:	2200      	movs	r2, #0
 80183e2:	729a      	strb	r2, [r3, #10]
 80183e4:	2200      	movs	r2, #0
 80183e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80183e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80183ee:	e00e      	b.n	801840e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80183f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f2:	685b      	ldr	r3, [r3, #4]
 80183f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80183f6:	f06f 0113 	mvn.w	r1, #19
 80183fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80183fc:	f7f7 ffd8 	bl	80103b0 <pbuf_header>
      pbuf_cat(p, r);
 8018400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018402:	6878      	ldr	r0, [r7, #4]
 8018404:	f7f8 f8d2 	bl	80105ac <pbuf_cat>
      r = iprh->next_pbuf;
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018410:	2b00      	cmp	r3, #0
 8018412:	d1ed      	bne.n	80183f0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018414:	4b1d      	ldr	r3, [pc, #116]	; (801848c <ip4_reass+0x2a0>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801841a:	429a      	cmp	r2, r3
 801841c:	d102      	bne.n	8018424 <ip4_reass+0x238>
      ipr_prev = NULL;
 801841e:	2300      	movs	r3, #0
 8018420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018422:	e010      	b.n	8018446 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018424:	4b19      	ldr	r3, [pc, #100]	; (801848c <ip4_reass+0x2a0>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	62fb      	str	r3, [r7, #44]	; 0x2c
 801842a:	e007      	b.n	801843c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018432:	429a      	cmp	r2, r3
 8018434:	d006      	beq.n	8018444 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801843e:	2b00      	cmp	r3, #0
 8018440:	d1f4      	bne.n	801842c <ip4_reass+0x240>
 8018442:	e000      	b.n	8018446 <ip4_reass+0x25a>
          break;
 8018444:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801844a:	f7ff fd37 	bl	8017ebc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7f8 f86c 	bl	801052c <pbuf_clen>
 8018454:	4603      	mov	r3, r0
 8018456:	461a      	mov	r2, r3
 8018458:	4b0b      	ldr	r3, [pc, #44]	; (8018488 <ip4_reass+0x29c>)
 801845a:	881b      	ldrh	r3, [r3, #0]
 801845c:	1a9b      	subs	r3, r3, r2
 801845e:	b29a      	uxth	r2, r3
 8018460:	4b09      	ldr	r3, [pc, #36]	; (8018488 <ip4_reass+0x29c>)
 8018462:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	e00a      	b.n	801847e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018468:	2300      	movs	r3, #0
 801846a:	e008      	b.n	801847e <ip4_reass+0x292>
    goto nullreturn;
 801846c:	bf00      	nop
 801846e:	e002      	b.n	8018476 <ip4_reass+0x28a>

nullreturn:
 8018470:	bf00      	nop
 8018472:	e000      	b.n	8018476 <ip4_reass+0x28a>
    goto nullreturn;
 8018474:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7f7 ffbe 	bl	80103f8 <pbuf_free>
  return NULL;
 801847c:	2300      	movs	r3, #0
}
 801847e:	4618      	mov	r0, r3
 8018480:	3738      	adds	r7, #56	; 0x38
 8018482:	46bd      	mov	sp, r7
 8018484:	bd80      	pop	{r7, pc}
 8018486:	bf00      	nop
 8018488:	200041ec 	.word	0x200041ec
 801848c:	200041e8 	.word	0x200041e8

08018490 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8018494:	2005      	movs	r0, #5
 8018496:	f7f7 f9a1 	bl	800f7dc <memp_malloc>
 801849a:	4603      	mov	r3, r0
}
 801849c:	4618      	mov	r0, r3
 801849e:	bd80      	pop	{r7, pc}

080184a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d106      	bne.n	80184bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80184ae:	4b07      	ldr	r3, [pc, #28]	; (80184cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80184b0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80184b4:	4906      	ldr	r1, [pc, #24]	; (80184d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80184b6:	4807      	ldr	r0, [pc, #28]	; (80184d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80184b8:	f000 fc7a 	bl	8018db0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80184bc:	6879      	ldr	r1, [r7, #4]
 80184be:	2005      	movs	r0, #5
 80184c0:	f7f7 fa02 	bl	800f8c8 <memp_free>
}
 80184c4:	bf00      	nop
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	0801c2b8 	.word	0x0801c2b8
 80184d0:	0801c440 	.word	0x0801c440
 80184d4:	0801c320 	.word	0x0801c320

080184d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b084      	sub	sp, #16
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d106      	bne.n	80184f8 <ipfrag_free_pbuf_custom+0x20>
 80184ea:	4b11      	ldr	r3, [pc, #68]	; (8018530 <ipfrag_free_pbuf_custom+0x58>)
 80184ec:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80184f0:	4910      	ldr	r1, [pc, #64]	; (8018534 <ipfrag_free_pbuf_custom+0x5c>)
 80184f2:	4811      	ldr	r0, [pc, #68]	; (8018538 <ipfrag_free_pbuf_custom+0x60>)
 80184f4:	f000 fc5c 	bl	8018db0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80184f8:	68fa      	ldr	r2, [r7, #12]
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d006      	beq.n	801850e <ipfrag_free_pbuf_custom+0x36>
 8018500:	4b0b      	ldr	r3, [pc, #44]	; (8018530 <ipfrag_free_pbuf_custom+0x58>)
 8018502:	f240 22b9 	movw	r2, #697	; 0x2b9
 8018506:	490d      	ldr	r1, [pc, #52]	; (801853c <ipfrag_free_pbuf_custom+0x64>)
 8018508:	480b      	ldr	r0, [pc, #44]	; (8018538 <ipfrag_free_pbuf_custom+0x60>)
 801850a:	f000 fc51 	bl	8018db0 <iprintf>
  if (pcr->original != NULL) {
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	695b      	ldr	r3, [r3, #20]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d004      	beq.n	8018520 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	695b      	ldr	r3, [r3, #20]
 801851a:	4618      	mov	r0, r3
 801851c:	f7f7 ff6c 	bl	80103f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018520:	68f8      	ldr	r0, [r7, #12]
 8018522:	f7ff ffbd 	bl	80184a0 <ip_frag_free_pbuf_custom_ref>
}
 8018526:	bf00      	nop
 8018528:	3710      	adds	r7, #16
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}
 801852e:	bf00      	nop
 8018530:	0801c2b8 	.word	0x0801c2b8
 8018534:	0801c44c 	.word	0x0801c44c
 8018538:	0801c320 	.word	0x0801c320
 801853c:	0801c458 	.word	0x0801c458

08018540 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b092      	sub	sp, #72	; 0x48
 8018544:	af02      	add	r7, sp, #8
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801854c:	2300      	movs	r3, #0
 801854e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8018550:	68bb      	ldr	r3, [r7, #8]
 8018552:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018554:	3b14      	subs	r3, #20
 8018556:	2b00      	cmp	r3, #0
 8018558:	da00      	bge.n	801855c <ip4_frag+0x1c>
 801855a:	3307      	adds	r3, #7
 801855c:	10db      	asrs	r3, r3, #3
 801855e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018560:	2314      	movs	r3, #20
 8018562:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801856c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	f003 030f 	and.w	r3, r3, #15
 8018576:	009b      	lsls	r3, r3, #2
 8018578:	2b14      	cmp	r3, #20
 801857a:	d009      	beq.n	8018590 <ip4_frag+0x50>
 801857c:	4b79      	ldr	r3, [pc, #484]	; (8018764 <ip4_frag+0x224>)
 801857e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8018582:	4979      	ldr	r1, [pc, #484]	; (8018768 <ip4_frag+0x228>)
 8018584:	4879      	ldr	r0, [pc, #484]	; (801876c <ip4_frag+0x22c>)
 8018586:	f000 fc13 	bl	8018db0 <iprintf>
 801858a:	f06f 0305 	mvn.w	r3, #5
 801858e:	e0e5      	b.n	801875c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018592:	88db      	ldrh	r3, [r3, #6]
 8018594:	b29b      	uxth	r3, r3
 8018596:	4618      	mov	r0, r3
 8018598:	f7f6 fd14 	bl	800efc4 <lwip_htons>
 801859c:	4603      	mov	r3, r0
 801859e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80185a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80185a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185a6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80185a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80185aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d009      	beq.n	80185c6 <ip4_frag+0x86>
 80185b2:	4b6c      	ldr	r3, [pc, #432]	; (8018764 <ip4_frag+0x224>)
 80185b4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80185b8:	496d      	ldr	r1, [pc, #436]	; (8018770 <ip4_frag+0x230>)
 80185ba:	486c      	ldr	r0, [pc, #432]	; (801876c <ip4_frag+0x22c>)
 80185bc:	f000 fbf8 	bl	8018db0 <iprintf>
 80185c0:	f06f 0305 	mvn.w	r3, #5
 80185c4:	e0ca      	b.n	801875c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	891b      	ldrh	r3, [r3, #8]
 80185ca:	3b14      	subs	r3, #20
 80185cc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80185ce:	e0bc      	b.n	801874a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80185d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80185d2:	00da      	lsls	r2, r3, #3
 80185d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185d6:	4293      	cmp	r3, r2
 80185d8:	bfa8      	it	ge
 80185da:	4613      	movge	r3, r2
 80185dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80185de:	2200      	movs	r2, #0
 80185e0:	2114      	movs	r1, #20
 80185e2:	2002      	movs	r0, #2
 80185e4:	f7f7 fb96 	bl	800fd14 <pbuf_alloc>
 80185e8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80185ea:	6a3b      	ldr	r3, [r7, #32]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	f000 80b2 	beq.w	8018756 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	895b      	ldrh	r3, [r3, #10]
 80185f6:	2b13      	cmp	r3, #19
 80185f8:	d806      	bhi.n	8018608 <ip4_frag+0xc8>
 80185fa:	4b5a      	ldr	r3, [pc, #360]	; (8018764 <ip4_frag+0x224>)
 80185fc:	f240 3209 	movw	r2, #777	; 0x309
 8018600:	495c      	ldr	r1, [pc, #368]	; (8018774 <ip4_frag+0x234>)
 8018602:	485a      	ldr	r0, [pc, #360]	; (801876c <ip4_frag+0x22c>)
 8018604:	f000 fbd4 	bl	8018db0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018608:	6a3b      	ldr	r3, [r7, #32]
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	2214      	movs	r2, #20
 801860e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018610:	4618      	mov	r0, r3
 8018612:	f000 fbba 	bl	8018d8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018616:	6a3b      	ldr	r3, [r7, #32]
 8018618:	685b      	ldr	r3, [r3, #4]
 801861a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801861c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801861e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8018620:	e04f      	b.n	80186c2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	895a      	ldrh	r2, [r3, #10]
 8018626:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018628:	1ad3      	subs	r3, r2, r3
 801862a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801862c:	8b7a      	ldrh	r2, [r7, #26]
 801862e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018630:	4293      	cmp	r3, r2
 8018632:	bf28      	it	cs
 8018634:	4613      	movcs	r3, r2
 8018636:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018638:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801863a:	2b00      	cmp	r3, #0
 801863c:	d105      	bne.n	801864a <ip4_frag+0x10a>
        poff = 0;
 801863e:	2300      	movs	r3, #0
 8018640:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	60fb      	str	r3, [r7, #12]
        continue;
 8018648:	e03b      	b.n	80186c2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801864a:	f7ff ff21 	bl	8018490 <ip_frag_alloc_pbuf_custom_ref>
 801864e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d103      	bne.n	801865e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8018656:	6a38      	ldr	r0, [r7, #32]
 8018658:	f7f7 fece 	bl	80103f8 <pbuf_free>
        goto memerr;
 801865c:	e07c      	b.n	8018758 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801865e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018666:	4413      	add	r3, r2
 8018668:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801866a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801866c:	9201      	str	r2, [sp, #4]
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	4603      	mov	r3, r0
 8018672:	2202      	movs	r2, #2
 8018674:	2004      	movs	r0, #4
 8018676:	f7f7 fce1 	bl	801003c <pbuf_alloced_custom>
 801867a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801867c:	693b      	ldr	r3, [r7, #16]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d106      	bne.n	8018690 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018682:	6978      	ldr	r0, [r7, #20]
 8018684:	f7ff ff0c 	bl	80184a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018688:	6a38      	ldr	r0, [r7, #32]
 801868a:	f7f7 feb5 	bl	80103f8 <pbuf_free>
        goto memerr;
 801868e:	e063      	b.n	8018758 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8018690:	68f8      	ldr	r0, [r7, #12]
 8018692:	f7f7 ff63 	bl	801055c <pbuf_ref>
      pcr->original = p;
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	68fa      	ldr	r2, [r7, #12]
 801869a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	4a36      	ldr	r2, [pc, #216]	; (8018778 <ip4_frag+0x238>)
 80186a0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80186a2:	6939      	ldr	r1, [r7, #16]
 80186a4:	6a38      	ldr	r0, [r7, #32]
 80186a6:	f7f7 ff81 	bl	80105ac <pbuf_cat>
      left_to_copy -= newpbuflen;
 80186aa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80186ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80186ae:	1ad3      	subs	r3, r2, r3
 80186b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80186b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d004      	beq.n	80186c2 <ip4_frag+0x182>
        poff = 0;
 80186b8:	2300      	movs	r3, #0
 80186ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80186c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d1ac      	bne.n	8018622 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80186c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80186ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80186cc:	4413      	add	r3, r2
 80186ce:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80186d0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80186d6:	3b14      	subs	r3, #20
 80186d8:	429a      	cmp	r2, r3
 80186da:	bfd4      	ite	le
 80186dc:	2301      	movle	r3, #1
 80186de:	2300      	movgt	r3, #0
 80186e0:	b2db      	uxtb	r3, r3
 80186e2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80186e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80186e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186ea:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80186ec:	69fb      	ldr	r3, [r7, #28]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d103      	bne.n	80186fa <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80186f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80186f8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80186fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7f6 fc61 	bl	800efc4 <lwip_htons>
 8018702:	4603      	mov	r3, r0
 8018704:	461a      	mov	r2, r3
 8018706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018708:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801870a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801870c:	3314      	adds	r3, #20
 801870e:	b29b      	uxth	r3, r3
 8018710:	4618      	mov	r0, r3
 8018712:	f7f6 fc57 	bl	800efc4 <lwip_htons>
 8018716:	4603      	mov	r3, r0
 8018718:	461a      	mov	r2, r3
 801871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018720:	2200      	movs	r2, #0
 8018722:	729a      	strb	r2, [r3, #10]
 8018724:	2200      	movs	r2, #0
 8018726:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	695b      	ldr	r3, [r3, #20]
 801872c:	687a      	ldr	r2, [r7, #4]
 801872e:	6a39      	ldr	r1, [r7, #32]
 8018730:	68b8      	ldr	r0, [r7, #8]
 8018732:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018734:	6a38      	ldr	r0, [r7, #32]
 8018736:	f7f7 fe5f 	bl	80103f8 <pbuf_free>
    left -= fragsize;
 801873a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801873c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801873e:	1ad3      	subs	r3, r2, r3
 8018740:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8018742:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018744:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018746:	4413      	add	r3, r2
 8018748:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801874a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801874c:	2b00      	cmp	r3, #0
 801874e:	f47f af3f 	bne.w	80185d0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018752:	2300      	movs	r3, #0
 8018754:	e002      	b.n	801875c <ip4_frag+0x21c>
      goto memerr;
 8018756:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018758:	f04f 33ff 	mov.w	r3, #4294967295
}
 801875c:	4618      	mov	r0, r3
 801875e:	3740      	adds	r7, #64	; 0x40
 8018760:	46bd      	mov	sp, r7
 8018762:	bd80      	pop	{r7, pc}
 8018764:	0801c2b8 	.word	0x0801c2b8
 8018768:	0801c464 	.word	0x0801c464
 801876c:	0801c320 	.word	0x0801c320
 8018770:	0801c48c 	.word	0x0801c48c
 8018774:	0801c4a8 	.word	0x0801c4a8
 8018778:	080184d9 	.word	0x080184d9

0801877c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b086      	sub	sp, #24
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8018786:	230e      	movs	r3, #14
 8018788:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	895b      	ldrh	r3, [r3, #10]
 801878e:	2b0e      	cmp	r3, #14
 8018790:	d977      	bls.n	8018882 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	7b1a      	ldrb	r2, [r3, #12]
 801879c:	7b5b      	ldrb	r3, [r3, #13]
 801879e:	021b      	lsls	r3, r3, #8
 80187a0:	4313      	orrs	r3, r2
 80187a2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	781b      	ldrb	r3, [r3, #0]
 80187a8:	f003 0301 	and.w	r3, r3, #1
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d023      	beq.n	80187f8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80187b0:	693b      	ldr	r3, [r7, #16]
 80187b2:	781b      	ldrb	r3, [r3, #0]
 80187b4:	2b01      	cmp	r3, #1
 80187b6:	d10f      	bne.n	80187d8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80187b8:	693b      	ldr	r3, [r7, #16]
 80187ba:	785b      	ldrb	r3, [r3, #1]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d11b      	bne.n	80187f8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80187c4:	2b5e      	cmp	r3, #94	; 0x5e
 80187c6:	d117      	bne.n	80187f8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	7b5b      	ldrb	r3, [r3, #13]
 80187cc:	f043 0310 	orr.w	r3, r3, #16
 80187d0:	b2da      	uxtb	r2, r3
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	735a      	strb	r2, [r3, #13]
 80187d6:	e00f      	b.n	80187f8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	2206      	movs	r2, #6
 80187dc:	4930      	ldr	r1, [pc, #192]	; (80188a0 <ethernet_input+0x124>)
 80187de:	4618      	mov	r0, r3
 80187e0:	f000 fac4 	bl	8018d6c <memcmp>
 80187e4:	4603      	mov	r3, r0
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d106      	bne.n	80187f8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	7b5b      	ldrb	r3, [r3, #13]
 80187ee:	f043 0308 	orr.w	r3, r3, #8
 80187f2:	b2da      	uxtb	r2, r3
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80187f8:	89fb      	ldrh	r3, [r7, #14]
 80187fa:	2b08      	cmp	r3, #8
 80187fc:	d003      	beq.n	8018806 <ethernet_input+0x8a>
 80187fe:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018802:	d01e      	beq.n	8018842 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018804:	e044      	b.n	8018890 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801880c:	f003 0308 	and.w	r3, r3, #8
 8018810:	2b00      	cmp	r3, #0
 8018812:	d038      	beq.n	8018886 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	895b      	ldrh	r3, [r3, #10]
 8018818:	461a      	mov	r2, r3
 801881a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801881e:	429a      	cmp	r2, r3
 8018820:	db33      	blt.n	801888a <ethernet_input+0x10e>
 8018822:	8afb      	ldrh	r3, [r7, #22]
 8018824:	425b      	negs	r3, r3
 8018826:	b29b      	uxth	r3, r3
 8018828:	b21b      	sxth	r3, r3
 801882a:	4619      	mov	r1, r3
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f7f7 fdbf 	bl	80103b0 <pbuf_header>
 8018832:	4603      	mov	r3, r0
 8018834:	2b00      	cmp	r3, #0
 8018836:	d128      	bne.n	801888a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8018838:	6839      	ldr	r1, [r7, #0]
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f7fe ff80 	bl	8017740 <ip4_input>
      break;
 8018840:	e01d      	b.n	801887e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018848:	f003 0308 	and.w	r3, r3, #8
 801884c:	2b00      	cmp	r3, #0
 801884e:	d01e      	beq.n	801888e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	895b      	ldrh	r3, [r3, #10]
 8018854:	461a      	mov	r2, r3
 8018856:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801885a:	429a      	cmp	r2, r3
 801885c:	db15      	blt.n	801888a <ethernet_input+0x10e>
 801885e:	8afb      	ldrh	r3, [r7, #22]
 8018860:	425b      	negs	r3, r3
 8018862:	b29b      	uxth	r3, r3
 8018864:	b21b      	sxth	r3, r3
 8018866:	4619      	mov	r1, r3
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f7f7 fda1 	bl	80103b0 <pbuf_header>
 801886e:	4603      	mov	r3, r0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d10a      	bne.n	801888a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8018874:	6839      	ldr	r1, [r7, #0]
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f7fe f94e 	bl	8016b18 <etharp_input>
      break;
 801887c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801887e:	2300      	movs	r3, #0
 8018880:	e00a      	b.n	8018898 <ethernet_input+0x11c>
    goto free_and_return;
 8018882:	bf00      	nop
 8018884:	e004      	b.n	8018890 <ethernet_input+0x114>
        goto free_and_return;
 8018886:	bf00      	nop
 8018888:	e002      	b.n	8018890 <ethernet_input+0x114>

free_and_return:
 801888a:	bf00      	nop
 801888c:	e000      	b.n	8018890 <ethernet_input+0x114>
        goto free_and_return;
 801888e:	bf00      	nop
  pbuf_free(p);
 8018890:	6878      	ldr	r0, [r7, #4]
 8018892:	f7f7 fdb1 	bl	80103f8 <pbuf_free>
  return ERR_OK;
 8018896:	2300      	movs	r3, #0
}
 8018898:	4618      	mov	r0, r3
 801889a:	3718      	adds	r7, #24
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	0801c6ac 	.word	0x0801c6ac

080188a4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b086      	sub	sp, #24
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	60f8      	str	r0, [r7, #12]
 80188ac:	60b9      	str	r1, [r7, #8]
 80188ae:	607a      	str	r2, [r7, #4]
 80188b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80188b2:	8c3b      	ldrh	r3, [r7, #32]
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7f6 fb85 	bl	800efc4 <lwip_htons>
 80188ba:	4603      	mov	r3, r0
 80188bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80188be:	210e      	movs	r1, #14
 80188c0:	68b8      	ldr	r0, [r7, #8]
 80188c2:	f7f7 fd75 	bl	80103b0 <pbuf_header>
 80188c6:	4603      	mov	r3, r0
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d125      	bne.n	8018918 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80188d2:	693b      	ldr	r3, [r7, #16]
 80188d4:	8afa      	ldrh	r2, [r7, #22]
 80188d6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	2206      	movs	r2, #6
 80188dc:	6839      	ldr	r1, [r7, #0]
 80188de:	4618      	mov	r0, r3
 80188e0:	f000 fa53 	bl	8018d8a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80188e4:	693b      	ldr	r3, [r7, #16]
 80188e6:	3306      	adds	r3, #6
 80188e8:	2206      	movs	r2, #6
 80188ea:	6879      	ldr	r1, [r7, #4]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f000 fa4c 	bl	8018d8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80188f8:	2b06      	cmp	r3, #6
 80188fa:	d006      	beq.n	801890a <ethernet_output+0x66>
 80188fc:	4b0a      	ldr	r3, [pc, #40]	; (8018928 <ethernet_output+0x84>)
 80188fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018902:	490a      	ldr	r1, [pc, #40]	; (801892c <ethernet_output+0x88>)
 8018904:	480a      	ldr	r0, [pc, #40]	; (8018930 <ethernet_output+0x8c>)
 8018906:	f000 fa53 	bl	8018db0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	699b      	ldr	r3, [r3, #24]
 801890e:	68b9      	ldr	r1, [r7, #8]
 8018910:	68f8      	ldr	r0, [r7, #12]
 8018912:	4798      	blx	r3
 8018914:	4603      	mov	r3, r0
 8018916:	e002      	b.n	801891e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018918:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801891a:	f06f 0301 	mvn.w	r3, #1
}
 801891e:	4618      	mov	r0, r3
 8018920:	3718      	adds	r7, #24
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}
 8018926:	bf00      	nop
 8018928:	0801c4c8 	.word	0x0801c4c8
 801892c:	0801c520 	.word	0x0801c520
 8018930:	0801c554 	.word	0x0801c554

08018934 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b086      	sub	sp, #24
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	60bb      	str	r3, [r7, #8]
 8018942:	2304      	movs	r3, #4
 8018944:	60fb      	str	r3, [r7, #12]
 8018946:	2300      	movs	r3, #0
 8018948:	613b      	str	r3, [r7, #16]
 801894a:	2300      	movs	r3, #0
 801894c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801894e:	f107 0308 	add.w	r3, r7, #8
 8018952:	2100      	movs	r1, #0
 8018954:	4618      	mov	r0, r3
 8018956:	f7f1 fbce 	bl	800a0f6 <osMessageCreate>
 801895a:	4602      	mov	r2, r0
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d102      	bne.n	801896e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018968:	f04f 33ff 	mov.w	r3, #4294967295
 801896c:	e000      	b.n	8018970 <sys_mbox_new+0x3c>

  return ERR_OK;
 801896e:	2300      	movs	r3, #0
}
 8018970:	4618      	mov	r0, r3
 8018972:	3718      	adds	r7, #24
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}

08018978 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b082      	sub	sp, #8
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	4618      	mov	r0, r3
 8018986:	f7f1 fc93 	bl	800a2b0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	4618      	mov	r0, r3
 8018990:	f7f1 fca4 	bl	800a2dc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018994:	bf00      	nop
 8018996:	3708      	adds	r7, #8
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}

0801899c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
 80189a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80189a6:	bf00      	nop
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	6839      	ldr	r1, [r7, #0]
 80189ae:	f04f 32ff 	mov.w	r2, #4294967295
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7f1 fbc8 	bl	800a148 <osMessagePut>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d1f4      	bne.n	80189a8 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80189be:	bf00      	nop
 80189c0:	3708      	adds	r7, #8
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}

080189c6 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80189c6:	b580      	push	{r7, lr}
 80189c8:	b084      	sub	sp, #16
 80189ca:	af00      	add	r7, sp, #0
 80189cc:	6078      	str	r0, [r7, #4]
 80189ce:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	6839      	ldr	r1, [r7, #0]
 80189d6:	2200      	movs	r2, #0
 80189d8:	4618      	mov	r0, r3
 80189da:	f7f1 fbb5 	bl	800a148 <osMessagePut>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d102      	bne.n	80189ea <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80189e4:	2300      	movs	r3, #0
 80189e6:	73fb      	strb	r3, [r7, #15]
 80189e8:	e001      	b.n	80189ee <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80189ea:	23ff      	movs	r3, #255	; 0xff
 80189ec:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80189ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80189f2:	4618      	mov	r0, r3
 80189f4:	3710      	adds	r7, #16
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}

080189fa <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80189fa:	b580      	push	{r7, lr}
 80189fc:	b08c      	sub	sp, #48	; 0x30
 80189fe:	af00      	add	r7, sp, #0
 8018a00:	61f8      	str	r0, [r7, #28]
 8018a02:	61b9      	str	r1, [r7, #24]
 8018a04:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018a06:	f7f1 f99f 	bl	8009d48 <osKernelSysTick>
 8018a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d017      	beq.n	8018a42 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018a12:	69fb      	ldr	r3, [r7, #28]
 8018a14:	6819      	ldr	r1, [r3, #0]
 8018a16:	f107 0320 	add.w	r3, r7, #32
 8018a1a:	697a      	ldr	r2, [r7, #20]
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7f1 fbd3 	bl	800a1c8 <osMessageGet>

    if(event.status == osEventMessage)
 8018a22:	6a3b      	ldr	r3, [r7, #32]
 8018a24:	2b10      	cmp	r3, #16
 8018a26:	d109      	bne.n	8018a3c <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2a:	461a      	mov	r2, r3
 8018a2c:	69bb      	ldr	r3, [r7, #24]
 8018a2e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018a30:	f7f1 f98a 	bl	8009d48 <osKernelSysTick>
 8018a34:	4602      	mov	r2, r0
 8018a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a38:	1ad3      	subs	r3, r2, r3
 8018a3a:	e019      	b.n	8018a70 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018a40:	e016      	b.n	8018a70 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018a42:	69fb      	ldr	r3, [r7, #28]
 8018a44:	6819      	ldr	r1, [r3, #0]
 8018a46:	463b      	mov	r3, r7
 8018a48:	f04f 32ff 	mov.w	r2, #4294967295
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f7f1 fbbb 	bl	800a1c8 <osMessageGet>
 8018a52:	f107 0320 	add.w	r3, r7, #32
 8018a56:	463a      	mov	r2, r7
 8018a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8018a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a60:	461a      	mov	r2, r3
 8018a62:	69bb      	ldr	r3, [r7, #24]
 8018a64:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018a66:	f7f1 f96f 	bl	8009d48 <osKernelSysTick>
 8018a6a:	4602      	mov	r2, r0
 8018a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a6e:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018a70:	4618      	mov	r0, r3
 8018a72:	3730      	adds	r7, #48	; 0x30
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}

08018a78 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b086      	sub	sp, #24
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
 8018a80:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	6819      	ldr	r1, [r3, #0]
 8018a86:	f107 030c 	add.w	r3, r7, #12
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7f1 fb9b 	bl	800a1c8 <osMessageGet>

  if(event.status == osEventMessage)
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	2b10      	cmp	r3, #16
 8018a96:	d105      	bne.n	8018aa4 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018a98:	693b      	ldr	r3, [r7, #16]
 8018a9a:	461a      	mov	r2, r3
 8018a9c:	683b      	ldr	r3, [r7, #0]
 8018a9e:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	e001      	b.n	8018aa8 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018aa4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3718      	adds	r7, #24
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b083      	sub	sp, #12
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d101      	bne.n	8018ac4 <sys_mbox_valid+0x14>
    return 0;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	e000      	b.n	8018ac6 <sys_mbox_valid+0x16>
  else
    return 1;
 8018ac4:	2301      	movs	r3, #1
}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	370c      	adds	r7, #12
 8018aca:	46bd      	mov	sp, r7
 8018acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad0:	4770      	bx	lr

08018ad2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018ad2:	b480      	push	{r7}
 8018ad4:	b083      	sub	sp, #12
 8018ad6:	af00      	add	r7, sp, #0
 8018ad8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	2200      	movs	r2, #0
 8018ade:	601a      	str	r2, [r3, #0]
}
 8018ae0:	bf00      	nop
 8018ae2:	370c      	adds	r7, #12
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr

08018aec <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
 8018af4:	460b      	mov	r3, r1
 8018af6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018af8:	2300      	movs	r3, #0
 8018afa:	60bb      	str	r3, [r7, #8]
 8018afc:	2300      	movs	r3, #0
 8018afe:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018b00:	f107 0308 	add.w	r3, r7, #8
 8018b04:	2101      	movs	r1, #1
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7f1 fa2a 	bl	8009f60 <osSemaphoreCreate>
 8018b0c:	4602      	mov	r2, r0
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d102      	bne.n	8018b20 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b1e:	e009      	b.n	8018b34 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018b20:	78fb      	ldrb	r3, [r7, #3]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d105      	bne.n	8018b32 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7f1 fa4b 	bl	8009fc8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018b32:	2300      	movs	r3, #0
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3710      	adds	r7, #16
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}

08018b3c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b084      	sub	sp, #16
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
 8018b44:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018b46:	f7f1 f8ff 	bl	8009d48 <osKernelSysTick>
 8018b4a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018b4c:	683b      	ldr	r3, [r7, #0]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d011      	beq.n	8018b76 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	6839      	ldr	r1, [r7, #0]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f1 fa35 	bl	8009fc8 <osSemaphoreWait>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d105      	bne.n	8018b70 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018b64:	f7f1 f8f0 	bl	8009d48 <osKernelSysTick>
 8018b68:	4602      	mov	r2, r0
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	1ad3      	subs	r3, r2, r3
 8018b6e:	e012      	b.n	8018b96 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b70:	f04f 33ff 	mov.w	r3, #4294967295
 8018b74:	e00f      	b.n	8018b96 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018b76:	bf00      	nop
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7f1 fa21 	bl	8009fc8 <osSemaphoreWait>
 8018b86:	4603      	mov	r3, r0
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d1f5      	bne.n	8018b78 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018b8c:	f7f1 f8dc 	bl	8009d48 <osKernelSysTick>
 8018b90:	4602      	mov	r2, r0
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3710      	adds	r7, #16
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}

08018b9e <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018b9e:	b580      	push	{r7, lr}
 8018ba0:	b082      	sub	sp, #8
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	4618      	mov	r0, r3
 8018bac:	f7f1 fa5a 	bl	800a064 <osSemaphoreRelease>
}
 8018bb0:	bf00      	nop
 8018bb2:	3708      	adds	r7, #8
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f7f1 fa83 	bl	800a0d0 <osSemaphoreDelete>
}
 8018bca:	bf00      	nop
 8018bcc:	3708      	adds	r7, #8
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}

08018bd2 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018bd2:	b480      	push	{r7}
 8018bd4:	b083      	sub	sp, #12
 8018bd6:	af00      	add	r7, sp, #0
 8018bd8:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d101      	bne.n	8018be6 <sys_sem_valid+0x14>
    return 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	e000      	b.n	8018be8 <sys_sem_valid+0x16>
  else
    return 1;
 8018be6:	2301      	movs	r3, #1
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	370c      	adds	r7, #12
 8018bec:	46bd      	mov	sp, r7
 8018bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf2:	4770      	bx	lr

08018bf4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	b083      	sub	sp, #12
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	2200      	movs	r2, #0
 8018c00:	601a      	str	r2, [r3, #0]
}
 8018c02:	bf00      	nop
 8018c04:	370c      	adds	r7, #12
 8018c06:	46bd      	mov	sp, r7
 8018c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0c:	4770      	bx	lr
	...

08018c10 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018c14:	4803      	ldr	r0, [pc, #12]	; (8018c24 <sys_init+0x14>)
 8018c16:	f7f1 f907 	bl	8009e28 <osMutexCreate>
 8018c1a:	4602      	mov	r2, r0
 8018c1c:	4b02      	ldr	r3, [pc, #8]	; (8018c28 <sys_init+0x18>)
 8018c1e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018c20:	bf00      	nop
 8018c22:	bd80      	pop	{r7, pc}
 8018c24:	0801c6bc 	.word	0x0801c6bc
 8018c28:	200079d0 	.word	0x200079d0

08018c2c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018c34:	2300      	movs	r3, #0
 8018c36:	60bb      	str	r3, [r7, #8]
 8018c38:	2300      	movs	r3, #0
 8018c3a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018c3c:	f107 0308 	add.w	r3, r7, #8
 8018c40:	4618      	mov	r0, r3
 8018c42:	f7f1 f8f1 	bl	8009e28 <osMutexCreate>
 8018c46:	4602      	mov	r2, r0
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d102      	bne.n	8018c5a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c54:	f04f 33ff 	mov.w	r3, #4294967295
 8018c58:	e000      	b.n	8018c5c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018c5a:	2300      	movs	r3, #0
}
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3710      	adds	r7, #16
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	f04f 31ff 	mov.w	r1, #4294967295
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7f1 f8ef 	bl	8009e58 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018c7a:	bf00      	nop
 8018c7c:	3708      	adds	r7, #8
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}

08018c82 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018c82:	b580      	push	{r7, lr}
 8018c84:	b082      	sub	sp, #8
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f7f1 f930 	bl	8009ef4 <osMutexRelease>
}
 8018c94:	bf00      	nop
 8018c96:	3708      	adds	r7, #8
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}

08018c9c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b08c      	sub	sp, #48	; 0x30
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
 8018ca8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018caa:	f107 0314 	add.w	r3, r7, #20
 8018cae:	2200      	movs	r2, #0
 8018cb0:	601a      	str	r2, [r3, #0]
 8018cb2:	605a      	str	r2, [r3, #4]
 8018cb4:	609a      	str	r2, [r3, #8]
 8018cb6:	60da      	str	r2, [r3, #12]
 8018cb8:	611a      	str	r2, [r3, #16]
 8018cba:	615a      	str	r2, [r3, #20]
 8018cbc:	619a      	str	r2, [r3, #24]
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	617b      	str	r3, [r7, #20]
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	61bb      	str	r3, [r7, #24]
 8018cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cc8:	b21b      	sxth	r3, r3
 8018cca:	83bb      	strh	r3, [r7, #28]
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018cd0:	f107 0314 	add.w	r3, r7, #20
 8018cd4:	6879      	ldr	r1, [r7, #4]
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7f1 f846 	bl	8009d68 <osThreadCreate>
 8018cdc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	3730      	adds	r7, #48	; 0x30
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
	...

08018ce8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018cec:	4b04      	ldr	r3, [pc, #16]	; (8018d00 <sys_arch_protect+0x18>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f7f1 f8af 	bl	8009e58 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018cfa:	2301      	movs	r3, #1
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	bd80      	pop	{r7, pc}
 8018d00:	200079d0 	.word	0x200079d0

08018d04 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018d0c:	4b04      	ldr	r3, [pc, #16]	; (8018d20 <sys_arch_unprotect+0x1c>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7f1 f8ef 	bl	8009ef4 <osMutexRelease>
}
 8018d16:	bf00      	nop
 8018d18:	3708      	adds	r7, #8
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	200079d0 	.word	0x200079d0

08018d24 <__libc_init_array>:
 8018d24:	b570      	push	{r4, r5, r6, lr}
 8018d26:	4e0d      	ldr	r6, [pc, #52]	; (8018d5c <__libc_init_array+0x38>)
 8018d28:	4c0d      	ldr	r4, [pc, #52]	; (8018d60 <__libc_init_array+0x3c>)
 8018d2a:	1ba4      	subs	r4, r4, r6
 8018d2c:	10a4      	asrs	r4, r4, #2
 8018d2e:	2500      	movs	r5, #0
 8018d30:	42a5      	cmp	r5, r4
 8018d32:	d109      	bne.n	8018d48 <__libc_init_array+0x24>
 8018d34:	4e0b      	ldr	r6, [pc, #44]	; (8018d64 <__libc_init_array+0x40>)
 8018d36:	4c0c      	ldr	r4, [pc, #48]	; (8018d68 <__libc_init_array+0x44>)
 8018d38:	f000 ff1e 	bl	8019b78 <_init>
 8018d3c:	1ba4      	subs	r4, r4, r6
 8018d3e:	10a4      	asrs	r4, r4, #2
 8018d40:	2500      	movs	r5, #0
 8018d42:	42a5      	cmp	r5, r4
 8018d44:	d105      	bne.n	8018d52 <__libc_init_array+0x2e>
 8018d46:	bd70      	pop	{r4, r5, r6, pc}
 8018d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018d4c:	4798      	blx	r3
 8018d4e:	3501      	adds	r5, #1
 8018d50:	e7ee      	b.n	8018d30 <__libc_init_array+0xc>
 8018d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018d56:	4798      	blx	r3
 8018d58:	3501      	adds	r5, #1
 8018d5a:	e7f2      	b.n	8018d42 <__libc_init_array+0x1e>
 8018d5c:	0801c764 	.word	0x0801c764
 8018d60:	0801c764 	.word	0x0801c764
 8018d64:	0801c764 	.word	0x0801c764
 8018d68:	0801c768 	.word	0x0801c768

08018d6c <memcmp>:
 8018d6c:	b530      	push	{r4, r5, lr}
 8018d6e:	2400      	movs	r4, #0
 8018d70:	42a2      	cmp	r2, r4
 8018d72:	d101      	bne.n	8018d78 <memcmp+0xc>
 8018d74:	2000      	movs	r0, #0
 8018d76:	e007      	b.n	8018d88 <memcmp+0x1c>
 8018d78:	5d03      	ldrb	r3, [r0, r4]
 8018d7a:	3401      	adds	r4, #1
 8018d7c:	190d      	adds	r5, r1, r4
 8018d7e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018d82:	42ab      	cmp	r3, r5
 8018d84:	d0f4      	beq.n	8018d70 <memcmp+0x4>
 8018d86:	1b58      	subs	r0, r3, r5
 8018d88:	bd30      	pop	{r4, r5, pc}

08018d8a <memcpy>:
 8018d8a:	b510      	push	{r4, lr}
 8018d8c:	1e43      	subs	r3, r0, #1
 8018d8e:	440a      	add	r2, r1
 8018d90:	4291      	cmp	r1, r2
 8018d92:	d100      	bne.n	8018d96 <memcpy+0xc>
 8018d94:	bd10      	pop	{r4, pc}
 8018d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d9e:	e7f7      	b.n	8018d90 <memcpy+0x6>

08018da0 <memset>:
 8018da0:	4402      	add	r2, r0
 8018da2:	4603      	mov	r3, r0
 8018da4:	4293      	cmp	r3, r2
 8018da6:	d100      	bne.n	8018daa <memset+0xa>
 8018da8:	4770      	bx	lr
 8018daa:	f803 1b01 	strb.w	r1, [r3], #1
 8018dae:	e7f9      	b.n	8018da4 <memset+0x4>

08018db0 <iprintf>:
 8018db0:	b40f      	push	{r0, r1, r2, r3}
 8018db2:	4b0a      	ldr	r3, [pc, #40]	; (8018ddc <iprintf+0x2c>)
 8018db4:	b513      	push	{r0, r1, r4, lr}
 8018db6:	681c      	ldr	r4, [r3, #0]
 8018db8:	b124      	cbz	r4, 8018dc4 <iprintf+0x14>
 8018dba:	69a3      	ldr	r3, [r4, #24]
 8018dbc:	b913      	cbnz	r3, 8018dc4 <iprintf+0x14>
 8018dbe:	4620      	mov	r0, r4
 8018dc0:	f000 f84e 	bl	8018e60 <__sinit>
 8018dc4:	ab05      	add	r3, sp, #20
 8018dc6:	9a04      	ldr	r2, [sp, #16]
 8018dc8:	68a1      	ldr	r1, [r4, #8]
 8018dca:	9301      	str	r3, [sp, #4]
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f000 f955 	bl	801907c <_vfiprintf_r>
 8018dd2:	b002      	add	sp, #8
 8018dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dd8:	b004      	add	sp, #16
 8018dda:	4770      	bx	lr
 8018ddc:	20000034 	.word	0x20000034

08018de0 <std>:
 8018de0:	2300      	movs	r3, #0
 8018de2:	b510      	push	{r4, lr}
 8018de4:	4604      	mov	r4, r0
 8018de6:	e9c0 3300 	strd	r3, r3, [r0]
 8018dea:	6083      	str	r3, [r0, #8]
 8018dec:	8181      	strh	r1, [r0, #12]
 8018dee:	6643      	str	r3, [r0, #100]	; 0x64
 8018df0:	81c2      	strh	r2, [r0, #14]
 8018df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018df6:	6183      	str	r3, [r0, #24]
 8018df8:	4619      	mov	r1, r3
 8018dfa:	2208      	movs	r2, #8
 8018dfc:	305c      	adds	r0, #92	; 0x5c
 8018dfe:	f7ff ffcf 	bl	8018da0 <memset>
 8018e02:	4b05      	ldr	r3, [pc, #20]	; (8018e18 <std+0x38>)
 8018e04:	6263      	str	r3, [r4, #36]	; 0x24
 8018e06:	4b05      	ldr	r3, [pc, #20]	; (8018e1c <std+0x3c>)
 8018e08:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e0a:	4b05      	ldr	r3, [pc, #20]	; (8018e20 <std+0x40>)
 8018e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e0e:	4b05      	ldr	r3, [pc, #20]	; (8018e24 <std+0x44>)
 8018e10:	6224      	str	r4, [r4, #32]
 8018e12:	6323      	str	r3, [r4, #48]	; 0x30
 8018e14:	bd10      	pop	{r4, pc}
 8018e16:	bf00      	nop
 8018e18:	080195d9 	.word	0x080195d9
 8018e1c:	080195fb 	.word	0x080195fb
 8018e20:	08019633 	.word	0x08019633
 8018e24:	08019657 	.word	0x08019657

08018e28 <_cleanup_r>:
 8018e28:	4901      	ldr	r1, [pc, #4]	; (8018e30 <_cleanup_r+0x8>)
 8018e2a:	f000 b885 	b.w	8018f38 <_fwalk_reent>
 8018e2e:	bf00      	nop
 8018e30:	08019931 	.word	0x08019931

08018e34 <__sfmoreglue>:
 8018e34:	b570      	push	{r4, r5, r6, lr}
 8018e36:	1e4a      	subs	r2, r1, #1
 8018e38:	2568      	movs	r5, #104	; 0x68
 8018e3a:	4355      	muls	r5, r2
 8018e3c:	460e      	mov	r6, r1
 8018e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018e42:	f000 f897 	bl	8018f74 <_malloc_r>
 8018e46:	4604      	mov	r4, r0
 8018e48:	b140      	cbz	r0, 8018e5c <__sfmoreglue+0x28>
 8018e4a:	2100      	movs	r1, #0
 8018e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8018e50:	300c      	adds	r0, #12
 8018e52:	60a0      	str	r0, [r4, #8]
 8018e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018e58:	f7ff ffa2 	bl	8018da0 <memset>
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	bd70      	pop	{r4, r5, r6, pc}

08018e60 <__sinit>:
 8018e60:	6983      	ldr	r3, [r0, #24]
 8018e62:	b510      	push	{r4, lr}
 8018e64:	4604      	mov	r4, r0
 8018e66:	bb33      	cbnz	r3, 8018eb6 <__sinit+0x56>
 8018e68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018e6c:	6503      	str	r3, [r0, #80]	; 0x50
 8018e6e:	4b12      	ldr	r3, [pc, #72]	; (8018eb8 <__sinit+0x58>)
 8018e70:	4a12      	ldr	r2, [pc, #72]	; (8018ebc <__sinit+0x5c>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	6282      	str	r2, [r0, #40]	; 0x28
 8018e76:	4298      	cmp	r0, r3
 8018e78:	bf04      	itt	eq
 8018e7a:	2301      	moveq	r3, #1
 8018e7c:	6183      	streq	r3, [r0, #24]
 8018e7e:	f000 f81f 	bl	8018ec0 <__sfp>
 8018e82:	6060      	str	r0, [r4, #4]
 8018e84:	4620      	mov	r0, r4
 8018e86:	f000 f81b 	bl	8018ec0 <__sfp>
 8018e8a:	60a0      	str	r0, [r4, #8]
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f000 f817 	bl	8018ec0 <__sfp>
 8018e92:	2200      	movs	r2, #0
 8018e94:	60e0      	str	r0, [r4, #12]
 8018e96:	2104      	movs	r1, #4
 8018e98:	6860      	ldr	r0, [r4, #4]
 8018e9a:	f7ff ffa1 	bl	8018de0 <std>
 8018e9e:	2201      	movs	r2, #1
 8018ea0:	2109      	movs	r1, #9
 8018ea2:	68a0      	ldr	r0, [r4, #8]
 8018ea4:	f7ff ff9c 	bl	8018de0 <std>
 8018ea8:	2202      	movs	r2, #2
 8018eaa:	2112      	movs	r1, #18
 8018eac:	68e0      	ldr	r0, [r4, #12]
 8018eae:	f7ff ff97 	bl	8018de0 <std>
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	61a3      	str	r3, [r4, #24]
 8018eb6:	bd10      	pop	{r4, pc}
 8018eb8:	0801c6c4 	.word	0x0801c6c4
 8018ebc:	08018e29 	.word	0x08018e29

08018ec0 <__sfp>:
 8018ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ec2:	4b1b      	ldr	r3, [pc, #108]	; (8018f30 <__sfp+0x70>)
 8018ec4:	681e      	ldr	r6, [r3, #0]
 8018ec6:	69b3      	ldr	r3, [r6, #24]
 8018ec8:	4607      	mov	r7, r0
 8018eca:	b913      	cbnz	r3, 8018ed2 <__sfp+0x12>
 8018ecc:	4630      	mov	r0, r6
 8018ece:	f7ff ffc7 	bl	8018e60 <__sinit>
 8018ed2:	3648      	adds	r6, #72	; 0x48
 8018ed4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	d503      	bpl.n	8018ee4 <__sfp+0x24>
 8018edc:	6833      	ldr	r3, [r6, #0]
 8018ede:	b133      	cbz	r3, 8018eee <__sfp+0x2e>
 8018ee0:	6836      	ldr	r6, [r6, #0]
 8018ee2:	e7f7      	b.n	8018ed4 <__sfp+0x14>
 8018ee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018ee8:	b16d      	cbz	r5, 8018f06 <__sfp+0x46>
 8018eea:	3468      	adds	r4, #104	; 0x68
 8018eec:	e7f4      	b.n	8018ed8 <__sfp+0x18>
 8018eee:	2104      	movs	r1, #4
 8018ef0:	4638      	mov	r0, r7
 8018ef2:	f7ff ff9f 	bl	8018e34 <__sfmoreglue>
 8018ef6:	6030      	str	r0, [r6, #0]
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	d1f1      	bne.n	8018ee0 <__sfp+0x20>
 8018efc:	230c      	movs	r3, #12
 8018efe:	603b      	str	r3, [r7, #0]
 8018f00:	4604      	mov	r4, r0
 8018f02:	4620      	mov	r0, r4
 8018f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f06:	4b0b      	ldr	r3, [pc, #44]	; (8018f34 <__sfp+0x74>)
 8018f08:	6665      	str	r5, [r4, #100]	; 0x64
 8018f0a:	e9c4 5500 	strd	r5, r5, [r4]
 8018f0e:	60a5      	str	r5, [r4, #8]
 8018f10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018f14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018f18:	2208      	movs	r2, #8
 8018f1a:	4629      	mov	r1, r5
 8018f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f20:	f7ff ff3e 	bl	8018da0 <memset>
 8018f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018f2c:	e7e9      	b.n	8018f02 <__sfp+0x42>
 8018f2e:	bf00      	nop
 8018f30:	0801c6c4 	.word	0x0801c6c4
 8018f34:	ffff0001 	.word	0xffff0001

08018f38 <_fwalk_reent>:
 8018f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f3c:	4680      	mov	r8, r0
 8018f3e:	4689      	mov	r9, r1
 8018f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018f44:	2600      	movs	r6, #0
 8018f46:	b914      	cbnz	r4, 8018f4e <_fwalk_reent+0x16>
 8018f48:	4630      	mov	r0, r6
 8018f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018f52:	3f01      	subs	r7, #1
 8018f54:	d501      	bpl.n	8018f5a <_fwalk_reent+0x22>
 8018f56:	6824      	ldr	r4, [r4, #0]
 8018f58:	e7f5      	b.n	8018f46 <_fwalk_reent+0xe>
 8018f5a:	89ab      	ldrh	r3, [r5, #12]
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d907      	bls.n	8018f70 <_fwalk_reent+0x38>
 8018f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f64:	3301      	adds	r3, #1
 8018f66:	d003      	beq.n	8018f70 <_fwalk_reent+0x38>
 8018f68:	4629      	mov	r1, r5
 8018f6a:	4640      	mov	r0, r8
 8018f6c:	47c8      	blx	r9
 8018f6e:	4306      	orrs	r6, r0
 8018f70:	3568      	adds	r5, #104	; 0x68
 8018f72:	e7ee      	b.n	8018f52 <_fwalk_reent+0x1a>

08018f74 <_malloc_r>:
 8018f74:	b570      	push	{r4, r5, r6, lr}
 8018f76:	1ccd      	adds	r5, r1, #3
 8018f78:	f025 0503 	bic.w	r5, r5, #3
 8018f7c:	3508      	adds	r5, #8
 8018f7e:	2d0c      	cmp	r5, #12
 8018f80:	bf38      	it	cc
 8018f82:	250c      	movcc	r5, #12
 8018f84:	2d00      	cmp	r5, #0
 8018f86:	4606      	mov	r6, r0
 8018f88:	db01      	blt.n	8018f8e <_malloc_r+0x1a>
 8018f8a:	42a9      	cmp	r1, r5
 8018f8c:	d903      	bls.n	8018f96 <_malloc_r+0x22>
 8018f8e:	230c      	movs	r3, #12
 8018f90:	6033      	str	r3, [r6, #0]
 8018f92:	2000      	movs	r0, #0
 8018f94:	bd70      	pop	{r4, r5, r6, pc}
 8018f96:	f000 fd6b 	bl	8019a70 <__malloc_lock>
 8018f9a:	4a21      	ldr	r2, [pc, #132]	; (8019020 <_malloc_r+0xac>)
 8018f9c:	6814      	ldr	r4, [r2, #0]
 8018f9e:	4621      	mov	r1, r4
 8018fa0:	b991      	cbnz	r1, 8018fc8 <_malloc_r+0x54>
 8018fa2:	4c20      	ldr	r4, [pc, #128]	; (8019024 <_malloc_r+0xb0>)
 8018fa4:	6823      	ldr	r3, [r4, #0]
 8018fa6:	b91b      	cbnz	r3, 8018fb0 <_malloc_r+0x3c>
 8018fa8:	4630      	mov	r0, r6
 8018faa:	f000 fb05 	bl	80195b8 <_sbrk_r>
 8018fae:	6020      	str	r0, [r4, #0]
 8018fb0:	4629      	mov	r1, r5
 8018fb2:	4630      	mov	r0, r6
 8018fb4:	f000 fb00 	bl	80195b8 <_sbrk_r>
 8018fb8:	1c43      	adds	r3, r0, #1
 8018fba:	d124      	bne.n	8019006 <_malloc_r+0x92>
 8018fbc:	230c      	movs	r3, #12
 8018fbe:	6033      	str	r3, [r6, #0]
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	f000 fd56 	bl	8019a72 <__malloc_unlock>
 8018fc6:	e7e4      	b.n	8018f92 <_malloc_r+0x1e>
 8018fc8:	680b      	ldr	r3, [r1, #0]
 8018fca:	1b5b      	subs	r3, r3, r5
 8018fcc:	d418      	bmi.n	8019000 <_malloc_r+0x8c>
 8018fce:	2b0b      	cmp	r3, #11
 8018fd0:	d90f      	bls.n	8018ff2 <_malloc_r+0x7e>
 8018fd2:	600b      	str	r3, [r1, #0]
 8018fd4:	50cd      	str	r5, [r1, r3]
 8018fd6:	18cc      	adds	r4, r1, r3
 8018fd8:	4630      	mov	r0, r6
 8018fda:	f000 fd4a 	bl	8019a72 <__malloc_unlock>
 8018fde:	f104 000b 	add.w	r0, r4, #11
 8018fe2:	1d23      	adds	r3, r4, #4
 8018fe4:	f020 0007 	bic.w	r0, r0, #7
 8018fe8:	1ac3      	subs	r3, r0, r3
 8018fea:	d0d3      	beq.n	8018f94 <_malloc_r+0x20>
 8018fec:	425a      	negs	r2, r3
 8018fee:	50e2      	str	r2, [r4, r3]
 8018ff0:	e7d0      	b.n	8018f94 <_malloc_r+0x20>
 8018ff2:	428c      	cmp	r4, r1
 8018ff4:	684b      	ldr	r3, [r1, #4]
 8018ff6:	bf16      	itet	ne
 8018ff8:	6063      	strne	r3, [r4, #4]
 8018ffa:	6013      	streq	r3, [r2, #0]
 8018ffc:	460c      	movne	r4, r1
 8018ffe:	e7eb      	b.n	8018fd8 <_malloc_r+0x64>
 8019000:	460c      	mov	r4, r1
 8019002:	6849      	ldr	r1, [r1, #4]
 8019004:	e7cc      	b.n	8018fa0 <_malloc_r+0x2c>
 8019006:	1cc4      	adds	r4, r0, #3
 8019008:	f024 0403 	bic.w	r4, r4, #3
 801900c:	42a0      	cmp	r0, r4
 801900e:	d005      	beq.n	801901c <_malloc_r+0xa8>
 8019010:	1a21      	subs	r1, r4, r0
 8019012:	4630      	mov	r0, r6
 8019014:	f000 fad0 	bl	80195b8 <_sbrk_r>
 8019018:	3001      	adds	r0, #1
 801901a:	d0cf      	beq.n	8018fbc <_malloc_r+0x48>
 801901c:	6025      	str	r5, [r4, #0]
 801901e:	e7db      	b.n	8018fd8 <_malloc_r+0x64>
 8019020:	200041f0 	.word	0x200041f0
 8019024:	200041f4 	.word	0x200041f4

08019028 <__sfputc_r>:
 8019028:	6893      	ldr	r3, [r2, #8]
 801902a:	3b01      	subs	r3, #1
 801902c:	2b00      	cmp	r3, #0
 801902e:	b410      	push	{r4}
 8019030:	6093      	str	r3, [r2, #8]
 8019032:	da08      	bge.n	8019046 <__sfputc_r+0x1e>
 8019034:	6994      	ldr	r4, [r2, #24]
 8019036:	42a3      	cmp	r3, r4
 8019038:	db01      	blt.n	801903e <__sfputc_r+0x16>
 801903a:	290a      	cmp	r1, #10
 801903c:	d103      	bne.n	8019046 <__sfputc_r+0x1e>
 801903e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019042:	f000 bb0d 	b.w	8019660 <__swbuf_r>
 8019046:	6813      	ldr	r3, [r2, #0]
 8019048:	1c58      	adds	r0, r3, #1
 801904a:	6010      	str	r0, [r2, #0]
 801904c:	7019      	strb	r1, [r3, #0]
 801904e:	4608      	mov	r0, r1
 8019050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019054:	4770      	bx	lr

08019056 <__sfputs_r>:
 8019056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019058:	4606      	mov	r6, r0
 801905a:	460f      	mov	r7, r1
 801905c:	4614      	mov	r4, r2
 801905e:	18d5      	adds	r5, r2, r3
 8019060:	42ac      	cmp	r4, r5
 8019062:	d101      	bne.n	8019068 <__sfputs_r+0x12>
 8019064:	2000      	movs	r0, #0
 8019066:	e007      	b.n	8019078 <__sfputs_r+0x22>
 8019068:	463a      	mov	r2, r7
 801906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801906e:	4630      	mov	r0, r6
 8019070:	f7ff ffda 	bl	8019028 <__sfputc_r>
 8019074:	1c43      	adds	r3, r0, #1
 8019076:	d1f3      	bne.n	8019060 <__sfputs_r+0xa>
 8019078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801907c <_vfiprintf_r>:
 801907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019080:	460c      	mov	r4, r1
 8019082:	b09d      	sub	sp, #116	; 0x74
 8019084:	4617      	mov	r7, r2
 8019086:	461d      	mov	r5, r3
 8019088:	4606      	mov	r6, r0
 801908a:	b118      	cbz	r0, 8019094 <_vfiprintf_r+0x18>
 801908c:	6983      	ldr	r3, [r0, #24]
 801908e:	b90b      	cbnz	r3, 8019094 <_vfiprintf_r+0x18>
 8019090:	f7ff fee6 	bl	8018e60 <__sinit>
 8019094:	4b7c      	ldr	r3, [pc, #496]	; (8019288 <_vfiprintf_r+0x20c>)
 8019096:	429c      	cmp	r4, r3
 8019098:	d158      	bne.n	801914c <_vfiprintf_r+0xd0>
 801909a:	6874      	ldr	r4, [r6, #4]
 801909c:	89a3      	ldrh	r3, [r4, #12]
 801909e:	0718      	lsls	r0, r3, #28
 80190a0:	d55e      	bpl.n	8019160 <_vfiprintf_r+0xe4>
 80190a2:	6923      	ldr	r3, [r4, #16]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d05b      	beq.n	8019160 <_vfiprintf_r+0xe4>
 80190a8:	2300      	movs	r3, #0
 80190aa:	9309      	str	r3, [sp, #36]	; 0x24
 80190ac:	2320      	movs	r3, #32
 80190ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190b2:	2330      	movs	r3, #48	; 0x30
 80190b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190b8:	9503      	str	r5, [sp, #12]
 80190ba:	f04f 0b01 	mov.w	fp, #1
 80190be:	46b8      	mov	r8, r7
 80190c0:	4645      	mov	r5, r8
 80190c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80190c6:	b10b      	cbz	r3, 80190cc <_vfiprintf_r+0x50>
 80190c8:	2b25      	cmp	r3, #37	; 0x25
 80190ca:	d154      	bne.n	8019176 <_vfiprintf_r+0xfa>
 80190cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80190d0:	d00b      	beq.n	80190ea <_vfiprintf_r+0x6e>
 80190d2:	4653      	mov	r3, sl
 80190d4:	463a      	mov	r2, r7
 80190d6:	4621      	mov	r1, r4
 80190d8:	4630      	mov	r0, r6
 80190da:	f7ff ffbc 	bl	8019056 <__sfputs_r>
 80190de:	3001      	adds	r0, #1
 80190e0:	f000 80c2 	beq.w	8019268 <_vfiprintf_r+0x1ec>
 80190e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190e6:	4453      	add	r3, sl
 80190e8:	9309      	str	r3, [sp, #36]	; 0x24
 80190ea:	f898 3000 	ldrb.w	r3, [r8]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	f000 80ba 	beq.w	8019268 <_vfiprintf_r+0x1ec>
 80190f4:	2300      	movs	r3, #0
 80190f6:	f04f 32ff 	mov.w	r2, #4294967295
 80190fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190fe:	9304      	str	r3, [sp, #16]
 8019100:	9307      	str	r3, [sp, #28]
 8019102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019106:	931a      	str	r3, [sp, #104]	; 0x68
 8019108:	46a8      	mov	r8, r5
 801910a:	2205      	movs	r2, #5
 801910c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019110:	485e      	ldr	r0, [pc, #376]	; (801928c <_vfiprintf_r+0x210>)
 8019112:	f7e7 f8e5 	bl	80002e0 <memchr>
 8019116:	9b04      	ldr	r3, [sp, #16]
 8019118:	bb78      	cbnz	r0, 801917a <_vfiprintf_r+0xfe>
 801911a:	06d9      	lsls	r1, r3, #27
 801911c:	bf44      	itt	mi
 801911e:	2220      	movmi	r2, #32
 8019120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019124:	071a      	lsls	r2, r3, #28
 8019126:	bf44      	itt	mi
 8019128:	222b      	movmi	r2, #43	; 0x2b
 801912a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801912e:	782a      	ldrb	r2, [r5, #0]
 8019130:	2a2a      	cmp	r2, #42	; 0x2a
 8019132:	d02a      	beq.n	801918a <_vfiprintf_r+0x10e>
 8019134:	9a07      	ldr	r2, [sp, #28]
 8019136:	46a8      	mov	r8, r5
 8019138:	2000      	movs	r0, #0
 801913a:	250a      	movs	r5, #10
 801913c:	4641      	mov	r1, r8
 801913e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019142:	3b30      	subs	r3, #48	; 0x30
 8019144:	2b09      	cmp	r3, #9
 8019146:	d969      	bls.n	801921c <_vfiprintf_r+0x1a0>
 8019148:	b360      	cbz	r0, 80191a4 <_vfiprintf_r+0x128>
 801914a:	e024      	b.n	8019196 <_vfiprintf_r+0x11a>
 801914c:	4b50      	ldr	r3, [pc, #320]	; (8019290 <_vfiprintf_r+0x214>)
 801914e:	429c      	cmp	r4, r3
 8019150:	d101      	bne.n	8019156 <_vfiprintf_r+0xda>
 8019152:	68b4      	ldr	r4, [r6, #8]
 8019154:	e7a2      	b.n	801909c <_vfiprintf_r+0x20>
 8019156:	4b4f      	ldr	r3, [pc, #316]	; (8019294 <_vfiprintf_r+0x218>)
 8019158:	429c      	cmp	r4, r3
 801915a:	bf08      	it	eq
 801915c:	68f4      	ldreq	r4, [r6, #12]
 801915e:	e79d      	b.n	801909c <_vfiprintf_r+0x20>
 8019160:	4621      	mov	r1, r4
 8019162:	4630      	mov	r0, r6
 8019164:	f000 fae0 	bl	8019728 <__swsetup_r>
 8019168:	2800      	cmp	r0, #0
 801916a:	d09d      	beq.n	80190a8 <_vfiprintf_r+0x2c>
 801916c:	f04f 30ff 	mov.w	r0, #4294967295
 8019170:	b01d      	add	sp, #116	; 0x74
 8019172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019176:	46a8      	mov	r8, r5
 8019178:	e7a2      	b.n	80190c0 <_vfiprintf_r+0x44>
 801917a:	4a44      	ldr	r2, [pc, #272]	; (801928c <_vfiprintf_r+0x210>)
 801917c:	1a80      	subs	r0, r0, r2
 801917e:	fa0b f000 	lsl.w	r0, fp, r0
 8019182:	4318      	orrs	r0, r3
 8019184:	9004      	str	r0, [sp, #16]
 8019186:	4645      	mov	r5, r8
 8019188:	e7be      	b.n	8019108 <_vfiprintf_r+0x8c>
 801918a:	9a03      	ldr	r2, [sp, #12]
 801918c:	1d11      	adds	r1, r2, #4
 801918e:	6812      	ldr	r2, [r2, #0]
 8019190:	9103      	str	r1, [sp, #12]
 8019192:	2a00      	cmp	r2, #0
 8019194:	db01      	blt.n	801919a <_vfiprintf_r+0x11e>
 8019196:	9207      	str	r2, [sp, #28]
 8019198:	e004      	b.n	80191a4 <_vfiprintf_r+0x128>
 801919a:	4252      	negs	r2, r2
 801919c:	f043 0302 	orr.w	r3, r3, #2
 80191a0:	9207      	str	r2, [sp, #28]
 80191a2:	9304      	str	r3, [sp, #16]
 80191a4:	f898 3000 	ldrb.w	r3, [r8]
 80191a8:	2b2e      	cmp	r3, #46	; 0x2e
 80191aa:	d10e      	bne.n	80191ca <_vfiprintf_r+0x14e>
 80191ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80191b0:	2b2a      	cmp	r3, #42	; 0x2a
 80191b2:	d138      	bne.n	8019226 <_vfiprintf_r+0x1aa>
 80191b4:	9b03      	ldr	r3, [sp, #12]
 80191b6:	1d1a      	adds	r2, r3, #4
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	9203      	str	r2, [sp, #12]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	bfb8      	it	lt
 80191c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80191c4:	f108 0802 	add.w	r8, r8, #2
 80191c8:	9305      	str	r3, [sp, #20]
 80191ca:	4d33      	ldr	r5, [pc, #204]	; (8019298 <_vfiprintf_r+0x21c>)
 80191cc:	f898 1000 	ldrb.w	r1, [r8]
 80191d0:	2203      	movs	r2, #3
 80191d2:	4628      	mov	r0, r5
 80191d4:	f7e7 f884 	bl	80002e0 <memchr>
 80191d8:	b140      	cbz	r0, 80191ec <_vfiprintf_r+0x170>
 80191da:	2340      	movs	r3, #64	; 0x40
 80191dc:	1b40      	subs	r0, r0, r5
 80191de:	fa03 f000 	lsl.w	r0, r3, r0
 80191e2:	9b04      	ldr	r3, [sp, #16]
 80191e4:	4303      	orrs	r3, r0
 80191e6:	f108 0801 	add.w	r8, r8, #1
 80191ea:	9304      	str	r3, [sp, #16]
 80191ec:	f898 1000 	ldrb.w	r1, [r8]
 80191f0:	482a      	ldr	r0, [pc, #168]	; (801929c <_vfiprintf_r+0x220>)
 80191f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191f6:	2206      	movs	r2, #6
 80191f8:	f108 0701 	add.w	r7, r8, #1
 80191fc:	f7e7 f870 	bl	80002e0 <memchr>
 8019200:	2800      	cmp	r0, #0
 8019202:	d037      	beq.n	8019274 <_vfiprintf_r+0x1f8>
 8019204:	4b26      	ldr	r3, [pc, #152]	; (80192a0 <_vfiprintf_r+0x224>)
 8019206:	bb1b      	cbnz	r3, 8019250 <_vfiprintf_r+0x1d4>
 8019208:	9b03      	ldr	r3, [sp, #12]
 801920a:	3307      	adds	r3, #7
 801920c:	f023 0307 	bic.w	r3, r3, #7
 8019210:	3308      	adds	r3, #8
 8019212:	9303      	str	r3, [sp, #12]
 8019214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019216:	444b      	add	r3, r9
 8019218:	9309      	str	r3, [sp, #36]	; 0x24
 801921a:	e750      	b.n	80190be <_vfiprintf_r+0x42>
 801921c:	fb05 3202 	mla	r2, r5, r2, r3
 8019220:	2001      	movs	r0, #1
 8019222:	4688      	mov	r8, r1
 8019224:	e78a      	b.n	801913c <_vfiprintf_r+0xc0>
 8019226:	2300      	movs	r3, #0
 8019228:	f108 0801 	add.w	r8, r8, #1
 801922c:	9305      	str	r3, [sp, #20]
 801922e:	4619      	mov	r1, r3
 8019230:	250a      	movs	r5, #10
 8019232:	4640      	mov	r0, r8
 8019234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019238:	3a30      	subs	r2, #48	; 0x30
 801923a:	2a09      	cmp	r2, #9
 801923c:	d903      	bls.n	8019246 <_vfiprintf_r+0x1ca>
 801923e:	2b00      	cmp	r3, #0
 8019240:	d0c3      	beq.n	80191ca <_vfiprintf_r+0x14e>
 8019242:	9105      	str	r1, [sp, #20]
 8019244:	e7c1      	b.n	80191ca <_vfiprintf_r+0x14e>
 8019246:	fb05 2101 	mla	r1, r5, r1, r2
 801924a:	2301      	movs	r3, #1
 801924c:	4680      	mov	r8, r0
 801924e:	e7f0      	b.n	8019232 <_vfiprintf_r+0x1b6>
 8019250:	ab03      	add	r3, sp, #12
 8019252:	9300      	str	r3, [sp, #0]
 8019254:	4622      	mov	r2, r4
 8019256:	4b13      	ldr	r3, [pc, #76]	; (80192a4 <_vfiprintf_r+0x228>)
 8019258:	a904      	add	r1, sp, #16
 801925a:	4630      	mov	r0, r6
 801925c:	f3af 8000 	nop.w
 8019260:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019264:	4681      	mov	r9, r0
 8019266:	d1d5      	bne.n	8019214 <_vfiprintf_r+0x198>
 8019268:	89a3      	ldrh	r3, [r4, #12]
 801926a:	065b      	lsls	r3, r3, #25
 801926c:	f53f af7e 	bmi.w	801916c <_vfiprintf_r+0xf0>
 8019270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019272:	e77d      	b.n	8019170 <_vfiprintf_r+0xf4>
 8019274:	ab03      	add	r3, sp, #12
 8019276:	9300      	str	r3, [sp, #0]
 8019278:	4622      	mov	r2, r4
 801927a:	4b0a      	ldr	r3, [pc, #40]	; (80192a4 <_vfiprintf_r+0x228>)
 801927c:	a904      	add	r1, sp, #16
 801927e:	4630      	mov	r0, r6
 8019280:	f000 f888 	bl	8019394 <_printf_i>
 8019284:	e7ec      	b.n	8019260 <_vfiprintf_r+0x1e4>
 8019286:	bf00      	nop
 8019288:	0801c6e8 	.word	0x0801c6e8
 801928c:	0801c728 	.word	0x0801c728
 8019290:	0801c708 	.word	0x0801c708
 8019294:	0801c6c8 	.word	0x0801c6c8
 8019298:	0801c72e 	.word	0x0801c72e
 801929c:	0801c732 	.word	0x0801c732
 80192a0:	00000000 	.word	0x00000000
 80192a4:	08019057 	.word	0x08019057

080192a8 <_printf_common>:
 80192a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192ac:	4691      	mov	r9, r2
 80192ae:	461f      	mov	r7, r3
 80192b0:	688a      	ldr	r2, [r1, #8]
 80192b2:	690b      	ldr	r3, [r1, #16]
 80192b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80192b8:	4293      	cmp	r3, r2
 80192ba:	bfb8      	it	lt
 80192bc:	4613      	movlt	r3, r2
 80192be:	f8c9 3000 	str.w	r3, [r9]
 80192c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80192c6:	4606      	mov	r6, r0
 80192c8:	460c      	mov	r4, r1
 80192ca:	b112      	cbz	r2, 80192d2 <_printf_common+0x2a>
 80192cc:	3301      	adds	r3, #1
 80192ce:	f8c9 3000 	str.w	r3, [r9]
 80192d2:	6823      	ldr	r3, [r4, #0]
 80192d4:	0699      	lsls	r1, r3, #26
 80192d6:	bf42      	ittt	mi
 80192d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80192dc:	3302      	addmi	r3, #2
 80192de:	f8c9 3000 	strmi.w	r3, [r9]
 80192e2:	6825      	ldr	r5, [r4, #0]
 80192e4:	f015 0506 	ands.w	r5, r5, #6
 80192e8:	d107      	bne.n	80192fa <_printf_common+0x52>
 80192ea:	f104 0a19 	add.w	sl, r4, #25
 80192ee:	68e3      	ldr	r3, [r4, #12]
 80192f0:	f8d9 2000 	ldr.w	r2, [r9]
 80192f4:	1a9b      	subs	r3, r3, r2
 80192f6:	42ab      	cmp	r3, r5
 80192f8:	dc28      	bgt.n	801934c <_printf_common+0xa4>
 80192fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80192fe:	6822      	ldr	r2, [r4, #0]
 8019300:	3300      	adds	r3, #0
 8019302:	bf18      	it	ne
 8019304:	2301      	movne	r3, #1
 8019306:	0692      	lsls	r2, r2, #26
 8019308:	d42d      	bmi.n	8019366 <_printf_common+0xbe>
 801930a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801930e:	4639      	mov	r1, r7
 8019310:	4630      	mov	r0, r6
 8019312:	47c0      	blx	r8
 8019314:	3001      	adds	r0, #1
 8019316:	d020      	beq.n	801935a <_printf_common+0xb2>
 8019318:	6823      	ldr	r3, [r4, #0]
 801931a:	68e5      	ldr	r5, [r4, #12]
 801931c:	f8d9 2000 	ldr.w	r2, [r9]
 8019320:	f003 0306 	and.w	r3, r3, #6
 8019324:	2b04      	cmp	r3, #4
 8019326:	bf08      	it	eq
 8019328:	1aad      	subeq	r5, r5, r2
 801932a:	68a3      	ldr	r3, [r4, #8]
 801932c:	6922      	ldr	r2, [r4, #16]
 801932e:	bf0c      	ite	eq
 8019330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019334:	2500      	movne	r5, #0
 8019336:	4293      	cmp	r3, r2
 8019338:	bfc4      	itt	gt
 801933a:	1a9b      	subgt	r3, r3, r2
 801933c:	18ed      	addgt	r5, r5, r3
 801933e:	f04f 0900 	mov.w	r9, #0
 8019342:	341a      	adds	r4, #26
 8019344:	454d      	cmp	r5, r9
 8019346:	d11a      	bne.n	801937e <_printf_common+0xd6>
 8019348:	2000      	movs	r0, #0
 801934a:	e008      	b.n	801935e <_printf_common+0xb6>
 801934c:	2301      	movs	r3, #1
 801934e:	4652      	mov	r2, sl
 8019350:	4639      	mov	r1, r7
 8019352:	4630      	mov	r0, r6
 8019354:	47c0      	blx	r8
 8019356:	3001      	adds	r0, #1
 8019358:	d103      	bne.n	8019362 <_printf_common+0xba>
 801935a:	f04f 30ff 	mov.w	r0, #4294967295
 801935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019362:	3501      	adds	r5, #1
 8019364:	e7c3      	b.n	80192ee <_printf_common+0x46>
 8019366:	18e1      	adds	r1, r4, r3
 8019368:	1c5a      	adds	r2, r3, #1
 801936a:	2030      	movs	r0, #48	; 0x30
 801936c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019370:	4422      	add	r2, r4
 8019372:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801937a:	3302      	adds	r3, #2
 801937c:	e7c5      	b.n	801930a <_printf_common+0x62>
 801937e:	2301      	movs	r3, #1
 8019380:	4622      	mov	r2, r4
 8019382:	4639      	mov	r1, r7
 8019384:	4630      	mov	r0, r6
 8019386:	47c0      	blx	r8
 8019388:	3001      	adds	r0, #1
 801938a:	d0e6      	beq.n	801935a <_printf_common+0xb2>
 801938c:	f109 0901 	add.w	r9, r9, #1
 8019390:	e7d8      	b.n	8019344 <_printf_common+0x9c>
	...

08019394 <_printf_i>:
 8019394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019398:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801939c:	460c      	mov	r4, r1
 801939e:	7e09      	ldrb	r1, [r1, #24]
 80193a0:	b085      	sub	sp, #20
 80193a2:	296e      	cmp	r1, #110	; 0x6e
 80193a4:	4617      	mov	r7, r2
 80193a6:	4606      	mov	r6, r0
 80193a8:	4698      	mov	r8, r3
 80193aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193ac:	f000 80b3 	beq.w	8019516 <_printf_i+0x182>
 80193b0:	d822      	bhi.n	80193f8 <_printf_i+0x64>
 80193b2:	2963      	cmp	r1, #99	; 0x63
 80193b4:	d036      	beq.n	8019424 <_printf_i+0x90>
 80193b6:	d80a      	bhi.n	80193ce <_printf_i+0x3a>
 80193b8:	2900      	cmp	r1, #0
 80193ba:	f000 80b9 	beq.w	8019530 <_printf_i+0x19c>
 80193be:	2958      	cmp	r1, #88	; 0x58
 80193c0:	f000 8083 	beq.w	80194ca <_printf_i+0x136>
 80193c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80193c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80193cc:	e032      	b.n	8019434 <_printf_i+0xa0>
 80193ce:	2964      	cmp	r1, #100	; 0x64
 80193d0:	d001      	beq.n	80193d6 <_printf_i+0x42>
 80193d2:	2969      	cmp	r1, #105	; 0x69
 80193d4:	d1f6      	bne.n	80193c4 <_printf_i+0x30>
 80193d6:	6820      	ldr	r0, [r4, #0]
 80193d8:	6813      	ldr	r3, [r2, #0]
 80193da:	0605      	lsls	r5, r0, #24
 80193dc:	f103 0104 	add.w	r1, r3, #4
 80193e0:	d52a      	bpl.n	8019438 <_printf_i+0xa4>
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	6011      	str	r1, [r2, #0]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	da03      	bge.n	80193f2 <_printf_i+0x5e>
 80193ea:	222d      	movs	r2, #45	; 0x2d
 80193ec:	425b      	negs	r3, r3
 80193ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80193f2:	486f      	ldr	r0, [pc, #444]	; (80195b0 <_printf_i+0x21c>)
 80193f4:	220a      	movs	r2, #10
 80193f6:	e039      	b.n	801946c <_printf_i+0xd8>
 80193f8:	2973      	cmp	r1, #115	; 0x73
 80193fa:	f000 809d 	beq.w	8019538 <_printf_i+0x1a4>
 80193fe:	d808      	bhi.n	8019412 <_printf_i+0x7e>
 8019400:	296f      	cmp	r1, #111	; 0x6f
 8019402:	d020      	beq.n	8019446 <_printf_i+0xb2>
 8019404:	2970      	cmp	r1, #112	; 0x70
 8019406:	d1dd      	bne.n	80193c4 <_printf_i+0x30>
 8019408:	6823      	ldr	r3, [r4, #0]
 801940a:	f043 0320 	orr.w	r3, r3, #32
 801940e:	6023      	str	r3, [r4, #0]
 8019410:	e003      	b.n	801941a <_printf_i+0x86>
 8019412:	2975      	cmp	r1, #117	; 0x75
 8019414:	d017      	beq.n	8019446 <_printf_i+0xb2>
 8019416:	2978      	cmp	r1, #120	; 0x78
 8019418:	d1d4      	bne.n	80193c4 <_printf_i+0x30>
 801941a:	2378      	movs	r3, #120	; 0x78
 801941c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019420:	4864      	ldr	r0, [pc, #400]	; (80195b4 <_printf_i+0x220>)
 8019422:	e055      	b.n	80194d0 <_printf_i+0x13c>
 8019424:	6813      	ldr	r3, [r2, #0]
 8019426:	1d19      	adds	r1, r3, #4
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	6011      	str	r1, [r2, #0]
 801942c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019434:	2301      	movs	r3, #1
 8019436:	e08c      	b.n	8019552 <_printf_i+0x1be>
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	6011      	str	r1, [r2, #0]
 801943c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019440:	bf18      	it	ne
 8019442:	b21b      	sxthne	r3, r3
 8019444:	e7cf      	b.n	80193e6 <_printf_i+0x52>
 8019446:	6813      	ldr	r3, [r2, #0]
 8019448:	6825      	ldr	r5, [r4, #0]
 801944a:	1d18      	adds	r0, r3, #4
 801944c:	6010      	str	r0, [r2, #0]
 801944e:	0628      	lsls	r0, r5, #24
 8019450:	d501      	bpl.n	8019456 <_printf_i+0xc2>
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	e002      	b.n	801945c <_printf_i+0xc8>
 8019456:	0668      	lsls	r0, r5, #25
 8019458:	d5fb      	bpl.n	8019452 <_printf_i+0xbe>
 801945a:	881b      	ldrh	r3, [r3, #0]
 801945c:	4854      	ldr	r0, [pc, #336]	; (80195b0 <_printf_i+0x21c>)
 801945e:	296f      	cmp	r1, #111	; 0x6f
 8019460:	bf14      	ite	ne
 8019462:	220a      	movne	r2, #10
 8019464:	2208      	moveq	r2, #8
 8019466:	2100      	movs	r1, #0
 8019468:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801946c:	6865      	ldr	r5, [r4, #4]
 801946e:	60a5      	str	r5, [r4, #8]
 8019470:	2d00      	cmp	r5, #0
 8019472:	f2c0 8095 	blt.w	80195a0 <_printf_i+0x20c>
 8019476:	6821      	ldr	r1, [r4, #0]
 8019478:	f021 0104 	bic.w	r1, r1, #4
 801947c:	6021      	str	r1, [r4, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d13d      	bne.n	80194fe <_printf_i+0x16a>
 8019482:	2d00      	cmp	r5, #0
 8019484:	f040 808e 	bne.w	80195a4 <_printf_i+0x210>
 8019488:	4665      	mov	r5, ip
 801948a:	2a08      	cmp	r2, #8
 801948c:	d10b      	bne.n	80194a6 <_printf_i+0x112>
 801948e:	6823      	ldr	r3, [r4, #0]
 8019490:	07db      	lsls	r3, r3, #31
 8019492:	d508      	bpl.n	80194a6 <_printf_i+0x112>
 8019494:	6923      	ldr	r3, [r4, #16]
 8019496:	6862      	ldr	r2, [r4, #4]
 8019498:	429a      	cmp	r2, r3
 801949a:	bfde      	ittt	le
 801949c:	2330      	movle	r3, #48	; 0x30
 801949e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80194a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80194a6:	ebac 0305 	sub.w	r3, ip, r5
 80194aa:	6123      	str	r3, [r4, #16]
 80194ac:	f8cd 8000 	str.w	r8, [sp]
 80194b0:	463b      	mov	r3, r7
 80194b2:	aa03      	add	r2, sp, #12
 80194b4:	4621      	mov	r1, r4
 80194b6:	4630      	mov	r0, r6
 80194b8:	f7ff fef6 	bl	80192a8 <_printf_common>
 80194bc:	3001      	adds	r0, #1
 80194be:	d14d      	bne.n	801955c <_printf_i+0x1c8>
 80194c0:	f04f 30ff 	mov.w	r0, #4294967295
 80194c4:	b005      	add	sp, #20
 80194c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194ca:	4839      	ldr	r0, [pc, #228]	; (80195b0 <_printf_i+0x21c>)
 80194cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80194d0:	6813      	ldr	r3, [r2, #0]
 80194d2:	6821      	ldr	r1, [r4, #0]
 80194d4:	1d1d      	adds	r5, r3, #4
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	6015      	str	r5, [r2, #0]
 80194da:	060a      	lsls	r2, r1, #24
 80194dc:	d50b      	bpl.n	80194f6 <_printf_i+0x162>
 80194de:	07ca      	lsls	r2, r1, #31
 80194e0:	bf44      	itt	mi
 80194e2:	f041 0120 	orrmi.w	r1, r1, #32
 80194e6:	6021      	strmi	r1, [r4, #0]
 80194e8:	b91b      	cbnz	r3, 80194f2 <_printf_i+0x15e>
 80194ea:	6822      	ldr	r2, [r4, #0]
 80194ec:	f022 0220 	bic.w	r2, r2, #32
 80194f0:	6022      	str	r2, [r4, #0]
 80194f2:	2210      	movs	r2, #16
 80194f4:	e7b7      	b.n	8019466 <_printf_i+0xd2>
 80194f6:	064d      	lsls	r5, r1, #25
 80194f8:	bf48      	it	mi
 80194fa:	b29b      	uxthmi	r3, r3
 80194fc:	e7ef      	b.n	80194de <_printf_i+0x14a>
 80194fe:	4665      	mov	r5, ip
 8019500:	fbb3 f1f2 	udiv	r1, r3, r2
 8019504:	fb02 3311 	mls	r3, r2, r1, r3
 8019508:	5cc3      	ldrb	r3, [r0, r3]
 801950a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801950e:	460b      	mov	r3, r1
 8019510:	2900      	cmp	r1, #0
 8019512:	d1f5      	bne.n	8019500 <_printf_i+0x16c>
 8019514:	e7b9      	b.n	801948a <_printf_i+0xf6>
 8019516:	6813      	ldr	r3, [r2, #0]
 8019518:	6825      	ldr	r5, [r4, #0]
 801951a:	6961      	ldr	r1, [r4, #20]
 801951c:	1d18      	adds	r0, r3, #4
 801951e:	6010      	str	r0, [r2, #0]
 8019520:	0628      	lsls	r0, r5, #24
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	d501      	bpl.n	801952a <_printf_i+0x196>
 8019526:	6019      	str	r1, [r3, #0]
 8019528:	e002      	b.n	8019530 <_printf_i+0x19c>
 801952a:	066a      	lsls	r2, r5, #25
 801952c:	d5fb      	bpl.n	8019526 <_printf_i+0x192>
 801952e:	8019      	strh	r1, [r3, #0]
 8019530:	2300      	movs	r3, #0
 8019532:	6123      	str	r3, [r4, #16]
 8019534:	4665      	mov	r5, ip
 8019536:	e7b9      	b.n	80194ac <_printf_i+0x118>
 8019538:	6813      	ldr	r3, [r2, #0]
 801953a:	1d19      	adds	r1, r3, #4
 801953c:	6011      	str	r1, [r2, #0]
 801953e:	681d      	ldr	r5, [r3, #0]
 8019540:	6862      	ldr	r2, [r4, #4]
 8019542:	2100      	movs	r1, #0
 8019544:	4628      	mov	r0, r5
 8019546:	f7e6 fecb 	bl	80002e0 <memchr>
 801954a:	b108      	cbz	r0, 8019550 <_printf_i+0x1bc>
 801954c:	1b40      	subs	r0, r0, r5
 801954e:	6060      	str	r0, [r4, #4]
 8019550:	6863      	ldr	r3, [r4, #4]
 8019552:	6123      	str	r3, [r4, #16]
 8019554:	2300      	movs	r3, #0
 8019556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801955a:	e7a7      	b.n	80194ac <_printf_i+0x118>
 801955c:	6923      	ldr	r3, [r4, #16]
 801955e:	462a      	mov	r2, r5
 8019560:	4639      	mov	r1, r7
 8019562:	4630      	mov	r0, r6
 8019564:	47c0      	blx	r8
 8019566:	3001      	adds	r0, #1
 8019568:	d0aa      	beq.n	80194c0 <_printf_i+0x12c>
 801956a:	6823      	ldr	r3, [r4, #0]
 801956c:	079b      	lsls	r3, r3, #30
 801956e:	d413      	bmi.n	8019598 <_printf_i+0x204>
 8019570:	68e0      	ldr	r0, [r4, #12]
 8019572:	9b03      	ldr	r3, [sp, #12]
 8019574:	4298      	cmp	r0, r3
 8019576:	bfb8      	it	lt
 8019578:	4618      	movlt	r0, r3
 801957a:	e7a3      	b.n	80194c4 <_printf_i+0x130>
 801957c:	2301      	movs	r3, #1
 801957e:	464a      	mov	r2, r9
 8019580:	4639      	mov	r1, r7
 8019582:	4630      	mov	r0, r6
 8019584:	47c0      	blx	r8
 8019586:	3001      	adds	r0, #1
 8019588:	d09a      	beq.n	80194c0 <_printf_i+0x12c>
 801958a:	3501      	adds	r5, #1
 801958c:	68e3      	ldr	r3, [r4, #12]
 801958e:	9a03      	ldr	r2, [sp, #12]
 8019590:	1a9b      	subs	r3, r3, r2
 8019592:	42ab      	cmp	r3, r5
 8019594:	dcf2      	bgt.n	801957c <_printf_i+0x1e8>
 8019596:	e7eb      	b.n	8019570 <_printf_i+0x1dc>
 8019598:	2500      	movs	r5, #0
 801959a:	f104 0919 	add.w	r9, r4, #25
 801959e:	e7f5      	b.n	801958c <_printf_i+0x1f8>
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d1ac      	bne.n	80194fe <_printf_i+0x16a>
 80195a4:	7803      	ldrb	r3, [r0, #0]
 80195a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80195aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80195ae:	e76c      	b.n	801948a <_printf_i+0xf6>
 80195b0:	0801c739 	.word	0x0801c739
 80195b4:	0801c74a 	.word	0x0801c74a

080195b8 <_sbrk_r>:
 80195b8:	b538      	push	{r3, r4, r5, lr}
 80195ba:	4c06      	ldr	r4, [pc, #24]	; (80195d4 <_sbrk_r+0x1c>)
 80195bc:	2300      	movs	r3, #0
 80195be:	4605      	mov	r5, r0
 80195c0:	4608      	mov	r0, r1
 80195c2:	6023      	str	r3, [r4, #0]
 80195c4:	f7e7 fd3c 	bl	8001040 <_sbrk>
 80195c8:	1c43      	adds	r3, r0, #1
 80195ca:	d102      	bne.n	80195d2 <_sbrk_r+0x1a>
 80195cc:	6823      	ldr	r3, [r4, #0]
 80195ce:	b103      	cbz	r3, 80195d2 <_sbrk_r+0x1a>
 80195d0:	602b      	str	r3, [r5, #0]
 80195d2:	bd38      	pop	{r3, r4, r5, pc}
 80195d4:	200079cc 	.word	0x200079cc

080195d8 <__sread>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	460c      	mov	r4, r1
 80195dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195e0:	f000 fa96 	bl	8019b10 <_read_r>
 80195e4:	2800      	cmp	r0, #0
 80195e6:	bfab      	itete	ge
 80195e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80195ea:	89a3      	ldrhlt	r3, [r4, #12]
 80195ec:	181b      	addge	r3, r3, r0
 80195ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80195f2:	bfac      	ite	ge
 80195f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80195f6:	81a3      	strhlt	r3, [r4, #12]
 80195f8:	bd10      	pop	{r4, pc}

080195fa <__swrite>:
 80195fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195fe:	461f      	mov	r7, r3
 8019600:	898b      	ldrh	r3, [r1, #12]
 8019602:	05db      	lsls	r3, r3, #23
 8019604:	4605      	mov	r5, r0
 8019606:	460c      	mov	r4, r1
 8019608:	4616      	mov	r6, r2
 801960a:	d505      	bpl.n	8019618 <__swrite+0x1e>
 801960c:	2302      	movs	r3, #2
 801960e:	2200      	movs	r2, #0
 8019610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019614:	f000 f9b6 	bl	8019984 <_lseek_r>
 8019618:	89a3      	ldrh	r3, [r4, #12]
 801961a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801961e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019622:	81a3      	strh	r3, [r4, #12]
 8019624:	4632      	mov	r2, r6
 8019626:	463b      	mov	r3, r7
 8019628:	4628      	mov	r0, r5
 801962a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801962e:	f000 b869 	b.w	8019704 <_write_r>

08019632 <__sseek>:
 8019632:	b510      	push	{r4, lr}
 8019634:	460c      	mov	r4, r1
 8019636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801963a:	f000 f9a3 	bl	8019984 <_lseek_r>
 801963e:	1c43      	adds	r3, r0, #1
 8019640:	89a3      	ldrh	r3, [r4, #12]
 8019642:	bf15      	itete	ne
 8019644:	6560      	strne	r0, [r4, #84]	; 0x54
 8019646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801964a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801964e:	81a3      	strheq	r3, [r4, #12]
 8019650:	bf18      	it	ne
 8019652:	81a3      	strhne	r3, [r4, #12]
 8019654:	bd10      	pop	{r4, pc}

08019656 <__sclose>:
 8019656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801965a:	f000 b8d3 	b.w	8019804 <_close_r>
	...

08019660 <__swbuf_r>:
 8019660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019662:	460e      	mov	r6, r1
 8019664:	4614      	mov	r4, r2
 8019666:	4605      	mov	r5, r0
 8019668:	b118      	cbz	r0, 8019672 <__swbuf_r+0x12>
 801966a:	6983      	ldr	r3, [r0, #24]
 801966c:	b90b      	cbnz	r3, 8019672 <__swbuf_r+0x12>
 801966e:	f7ff fbf7 	bl	8018e60 <__sinit>
 8019672:	4b21      	ldr	r3, [pc, #132]	; (80196f8 <__swbuf_r+0x98>)
 8019674:	429c      	cmp	r4, r3
 8019676:	d12a      	bne.n	80196ce <__swbuf_r+0x6e>
 8019678:	686c      	ldr	r4, [r5, #4]
 801967a:	69a3      	ldr	r3, [r4, #24]
 801967c:	60a3      	str	r3, [r4, #8]
 801967e:	89a3      	ldrh	r3, [r4, #12]
 8019680:	071a      	lsls	r2, r3, #28
 8019682:	d52e      	bpl.n	80196e2 <__swbuf_r+0x82>
 8019684:	6923      	ldr	r3, [r4, #16]
 8019686:	b363      	cbz	r3, 80196e2 <__swbuf_r+0x82>
 8019688:	6923      	ldr	r3, [r4, #16]
 801968a:	6820      	ldr	r0, [r4, #0]
 801968c:	1ac0      	subs	r0, r0, r3
 801968e:	6963      	ldr	r3, [r4, #20]
 8019690:	b2f6      	uxtb	r6, r6
 8019692:	4283      	cmp	r3, r0
 8019694:	4637      	mov	r7, r6
 8019696:	dc04      	bgt.n	80196a2 <__swbuf_r+0x42>
 8019698:	4621      	mov	r1, r4
 801969a:	4628      	mov	r0, r5
 801969c:	f000 f948 	bl	8019930 <_fflush_r>
 80196a0:	bb28      	cbnz	r0, 80196ee <__swbuf_r+0x8e>
 80196a2:	68a3      	ldr	r3, [r4, #8]
 80196a4:	3b01      	subs	r3, #1
 80196a6:	60a3      	str	r3, [r4, #8]
 80196a8:	6823      	ldr	r3, [r4, #0]
 80196aa:	1c5a      	adds	r2, r3, #1
 80196ac:	6022      	str	r2, [r4, #0]
 80196ae:	701e      	strb	r6, [r3, #0]
 80196b0:	6963      	ldr	r3, [r4, #20]
 80196b2:	3001      	adds	r0, #1
 80196b4:	4283      	cmp	r3, r0
 80196b6:	d004      	beq.n	80196c2 <__swbuf_r+0x62>
 80196b8:	89a3      	ldrh	r3, [r4, #12]
 80196ba:	07db      	lsls	r3, r3, #31
 80196bc:	d519      	bpl.n	80196f2 <__swbuf_r+0x92>
 80196be:	2e0a      	cmp	r6, #10
 80196c0:	d117      	bne.n	80196f2 <__swbuf_r+0x92>
 80196c2:	4621      	mov	r1, r4
 80196c4:	4628      	mov	r0, r5
 80196c6:	f000 f933 	bl	8019930 <_fflush_r>
 80196ca:	b190      	cbz	r0, 80196f2 <__swbuf_r+0x92>
 80196cc:	e00f      	b.n	80196ee <__swbuf_r+0x8e>
 80196ce:	4b0b      	ldr	r3, [pc, #44]	; (80196fc <__swbuf_r+0x9c>)
 80196d0:	429c      	cmp	r4, r3
 80196d2:	d101      	bne.n	80196d8 <__swbuf_r+0x78>
 80196d4:	68ac      	ldr	r4, [r5, #8]
 80196d6:	e7d0      	b.n	801967a <__swbuf_r+0x1a>
 80196d8:	4b09      	ldr	r3, [pc, #36]	; (8019700 <__swbuf_r+0xa0>)
 80196da:	429c      	cmp	r4, r3
 80196dc:	bf08      	it	eq
 80196de:	68ec      	ldreq	r4, [r5, #12]
 80196e0:	e7cb      	b.n	801967a <__swbuf_r+0x1a>
 80196e2:	4621      	mov	r1, r4
 80196e4:	4628      	mov	r0, r5
 80196e6:	f000 f81f 	bl	8019728 <__swsetup_r>
 80196ea:	2800      	cmp	r0, #0
 80196ec:	d0cc      	beq.n	8019688 <__swbuf_r+0x28>
 80196ee:	f04f 37ff 	mov.w	r7, #4294967295
 80196f2:	4638      	mov	r0, r7
 80196f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196f6:	bf00      	nop
 80196f8:	0801c6e8 	.word	0x0801c6e8
 80196fc:	0801c708 	.word	0x0801c708
 8019700:	0801c6c8 	.word	0x0801c6c8

08019704 <_write_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4c07      	ldr	r4, [pc, #28]	; (8019724 <_write_r+0x20>)
 8019708:	4605      	mov	r5, r0
 801970a:	4608      	mov	r0, r1
 801970c:	4611      	mov	r1, r2
 801970e:	2200      	movs	r2, #0
 8019710:	6022      	str	r2, [r4, #0]
 8019712:	461a      	mov	r2, r3
 8019714:	f7e7 fc43 	bl	8000f9e <_write>
 8019718:	1c43      	adds	r3, r0, #1
 801971a:	d102      	bne.n	8019722 <_write_r+0x1e>
 801971c:	6823      	ldr	r3, [r4, #0]
 801971e:	b103      	cbz	r3, 8019722 <_write_r+0x1e>
 8019720:	602b      	str	r3, [r5, #0]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	200079cc 	.word	0x200079cc

08019728 <__swsetup_r>:
 8019728:	4b32      	ldr	r3, [pc, #200]	; (80197f4 <__swsetup_r+0xcc>)
 801972a:	b570      	push	{r4, r5, r6, lr}
 801972c:	681d      	ldr	r5, [r3, #0]
 801972e:	4606      	mov	r6, r0
 8019730:	460c      	mov	r4, r1
 8019732:	b125      	cbz	r5, 801973e <__swsetup_r+0x16>
 8019734:	69ab      	ldr	r3, [r5, #24]
 8019736:	b913      	cbnz	r3, 801973e <__swsetup_r+0x16>
 8019738:	4628      	mov	r0, r5
 801973a:	f7ff fb91 	bl	8018e60 <__sinit>
 801973e:	4b2e      	ldr	r3, [pc, #184]	; (80197f8 <__swsetup_r+0xd0>)
 8019740:	429c      	cmp	r4, r3
 8019742:	d10f      	bne.n	8019764 <__swsetup_r+0x3c>
 8019744:	686c      	ldr	r4, [r5, #4]
 8019746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801974a:	b29a      	uxth	r2, r3
 801974c:	0715      	lsls	r5, r2, #28
 801974e:	d42c      	bmi.n	80197aa <__swsetup_r+0x82>
 8019750:	06d0      	lsls	r0, r2, #27
 8019752:	d411      	bmi.n	8019778 <__swsetup_r+0x50>
 8019754:	2209      	movs	r2, #9
 8019756:	6032      	str	r2, [r6, #0]
 8019758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801975c:	81a3      	strh	r3, [r4, #12]
 801975e:	f04f 30ff 	mov.w	r0, #4294967295
 8019762:	e03e      	b.n	80197e2 <__swsetup_r+0xba>
 8019764:	4b25      	ldr	r3, [pc, #148]	; (80197fc <__swsetup_r+0xd4>)
 8019766:	429c      	cmp	r4, r3
 8019768:	d101      	bne.n	801976e <__swsetup_r+0x46>
 801976a:	68ac      	ldr	r4, [r5, #8]
 801976c:	e7eb      	b.n	8019746 <__swsetup_r+0x1e>
 801976e:	4b24      	ldr	r3, [pc, #144]	; (8019800 <__swsetup_r+0xd8>)
 8019770:	429c      	cmp	r4, r3
 8019772:	bf08      	it	eq
 8019774:	68ec      	ldreq	r4, [r5, #12]
 8019776:	e7e6      	b.n	8019746 <__swsetup_r+0x1e>
 8019778:	0751      	lsls	r1, r2, #29
 801977a:	d512      	bpl.n	80197a2 <__swsetup_r+0x7a>
 801977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801977e:	b141      	cbz	r1, 8019792 <__swsetup_r+0x6a>
 8019780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019784:	4299      	cmp	r1, r3
 8019786:	d002      	beq.n	801978e <__swsetup_r+0x66>
 8019788:	4630      	mov	r0, r6
 801978a:	f000 f973 	bl	8019a74 <_free_r>
 801978e:	2300      	movs	r3, #0
 8019790:	6363      	str	r3, [r4, #52]	; 0x34
 8019792:	89a3      	ldrh	r3, [r4, #12]
 8019794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019798:	81a3      	strh	r3, [r4, #12]
 801979a:	2300      	movs	r3, #0
 801979c:	6063      	str	r3, [r4, #4]
 801979e:	6923      	ldr	r3, [r4, #16]
 80197a0:	6023      	str	r3, [r4, #0]
 80197a2:	89a3      	ldrh	r3, [r4, #12]
 80197a4:	f043 0308 	orr.w	r3, r3, #8
 80197a8:	81a3      	strh	r3, [r4, #12]
 80197aa:	6923      	ldr	r3, [r4, #16]
 80197ac:	b94b      	cbnz	r3, 80197c2 <__swsetup_r+0x9a>
 80197ae:	89a3      	ldrh	r3, [r4, #12]
 80197b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80197b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197b8:	d003      	beq.n	80197c2 <__swsetup_r+0x9a>
 80197ba:	4621      	mov	r1, r4
 80197bc:	4630      	mov	r0, r6
 80197be:	f000 f917 	bl	80199f0 <__smakebuf_r>
 80197c2:	89a2      	ldrh	r2, [r4, #12]
 80197c4:	f012 0301 	ands.w	r3, r2, #1
 80197c8:	d00c      	beq.n	80197e4 <__swsetup_r+0xbc>
 80197ca:	2300      	movs	r3, #0
 80197cc:	60a3      	str	r3, [r4, #8]
 80197ce:	6963      	ldr	r3, [r4, #20]
 80197d0:	425b      	negs	r3, r3
 80197d2:	61a3      	str	r3, [r4, #24]
 80197d4:	6923      	ldr	r3, [r4, #16]
 80197d6:	b953      	cbnz	r3, 80197ee <__swsetup_r+0xc6>
 80197d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80197e0:	d1ba      	bne.n	8019758 <__swsetup_r+0x30>
 80197e2:	bd70      	pop	{r4, r5, r6, pc}
 80197e4:	0792      	lsls	r2, r2, #30
 80197e6:	bf58      	it	pl
 80197e8:	6963      	ldrpl	r3, [r4, #20]
 80197ea:	60a3      	str	r3, [r4, #8]
 80197ec:	e7f2      	b.n	80197d4 <__swsetup_r+0xac>
 80197ee:	2000      	movs	r0, #0
 80197f0:	e7f7      	b.n	80197e2 <__swsetup_r+0xba>
 80197f2:	bf00      	nop
 80197f4:	20000034 	.word	0x20000034
 80197f8:	0801c6e8 	.word	0x0801c6e8
 80197fc:	0801c708 	.word	0x0801c708
 8019800:	0801c6c8 	.word	0x0801c6c8

08019804 <_close_r>:
 8019804:	b538      	push	{r3, r4, r5, lr}
 8019806:	4c06      	ldr	r4, [pc, #24]	; (8019820 <_close_r+0x1c>)
 8019808:	2300      	movs	r3, #0
 801980a:	4605      	mov	r5, r0
 801980c:	4608      	mov	r0, r1
 801980e:	6023      	str	r3, [r4, #0]
 8019810:	f7e7 fbe1 	bl	8000fd6 <_close>
 8019814:	1c43      	adds	r3, r0, #1
 8019816:	d102      	bne.n	801981e <_close_r+0x1a>
 8019818:	6823      	ldr	r3, [r4, #0]
 801981a:	b103      	cbz	r3, 801981e <_close_r+0x1a>
 801981c:	602b      	str	r3, [r5, #0]
 801981e:	bd38      	pop	{r3, r4, r5, pc}
 8019820:	200079cc 	.word	0x200079cc

08019824 <__sflush_r>:
 8019824:	898a      	ldrh	r2, [r1, #12]
 8019826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801982a:	4605      	mov	r5, r0
 801982c:	0710      	lsls	r0, r2, #28
 801982e:	460c      	mov	r4, r1
 8019830:	d458      	bmi.n	80198e4 <__sflush_r+0xc0>
 8019832:	684b      	ldr	r3, [r1, #4]
 8019834:	2b00      	cmp	r3, #0
 8019836:	dc05      	bgt.n	8019844 <__sflush_r+0x20>
 8019838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801983a:	2b00      	cmp	r3, #0
 801983c:	dc02      	bgt.n	8019844 <__sflush_r+0x20>
 801983e:	2000      	movs	r0, #0
 8019840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019846:	2e00      	cmp	r6, #0
 8019848:	d0f9      	beq.n	801983e <__sflush_r+0x1a>
 801984a:	2300      	movs	r3, #0
 801984c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019850:	682f      	ldr	r7, [r5, #0]
 8019852:	6a21      	ldr	r1, [r4, #32]
 8019854:	602b      	str	r3, [r5, #0]
 8019856:	d032      	beq.n	80198be <__sflush_r+0x9a>
 8019858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801985a:	89a3      	ldrh	r3, [r4, #12]
 801985c:	075a      	lsls	r2, r3, #29
 801985e:	d505      	bpl.n	801986c <__sflush_r+0x48>
 8019860:	6863      	ldr	r3, [r4, #4]
 8019862:	1ac0      	subs	r0, r0, r3
 8019864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019866:	b10b      	cbz	r3, 801986c <__sflush_r+0x48>
 8019868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801986a:	1ac0      	subs	r0, r0, r3
 801986c:	2300      	movs	r3, #0
 801986e:	4602      	mov	r2, r0
 8019870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019872:	6a21      	ldr	r1, [r4, #32]
 8019874:	4628      	mov	r0, r5
 8019876:	47b0      	blx	r6
 8019878:	1c43      	adds	r3, r0, #1
 801987a:	89a3      	ldrh	r3, [r4, #12]
 801987c:	d106      	bne.n	801988c <__sflush_r+0x68>
 801987e:	6829      	ldr	r1, [r5, #0]
 8019880:	291d      	cmp	r1, #29
 8019882:	d848      	bhi.n	8019916 <__sflush_r+0xf2>
 8019884:	4a29      	ldr	r2, [pc, #164]	; (801992c <__sflush_r+0x108>)
 8019886:	40ca      	lsrs	r2, r1
 8019888:	07d6      	lsls	r6, r2, #31
 801988a:	d544      	bpl.n	8019916 <__sflush_r+0xf2>
 801988c:	2200      	movs	r2, #0
 801988e:	6062      	str	r2, [r4, #4]
 8019890:	04d9      	lsls	r1, r3, #19
 8019892:	6922      	ldr	r2, [r4, #16]
 8019894:	6022      	str	r2, [r4, #0]
 8019896:	d504      	bpl.n	80198a2 <__sflush_r+0x7e>
 8019898:	1c42      	adds	r2, r0, #1
 801989a:	d101      	bne.n	80198a0 <__sflush_r+0x7c>
 801989c:	682b      	ldr	r3, [r5, #0]
 801989e:	b903      	cbnz	r3, 80198a2 <__sflush_r+0x7e>
 80198a0:	6560      	str	r0, [r4, #84]	; 0x54
 80198a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198a4:	602f      	str	r7, [r5, #0]
 80198a6:	2900      	cmp	r1, #0
 80198a8:	d0c9      	beq.n	801983e <__sflush_r+0x1a>
 80198aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198ae:	4299      	cmp	r1, r3
 80198b0:	d002      	beq.n	80198b8 <__sflush_r+0x94>
 80198b2:	4628      	mov	r0, r5
 80198b4:	f000 f8de 	bl	8019a74 <_free_r>
 80198b8:	2000      	movs	r0, #0
 80198ba:	6360      	str	r0, [r4, #52]	; 0x34
 80198bc:	e7c0      	b.n	8019840 <__sflush_r+0x1c>
 80198be:	2301      	movs	r3, #1
 80198c0:	4628      	mov	r0, r5
 80198c2:	47b0      	blx	r6
 80198c4:	1c41      	adds	r1, r0, #1
 80198c6:	d1c8      	bne.n	801985a <__sflush_r+0x36>
 80198c8:	682b      	ldr	r3, [r5, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d0c5      	beq.n	801985a <__sflush_r+0x36>
 80198ce:	2b1d      	cmp	r3, #29
 80198d0:	d001      	beq.n	80198d6 <__sflush_r+0xb2>
 80198d2:	2b16      	cmp	r3, #22
 80198d4:	d101      	bne.n	80198da <__sflush_r+0xb6>
 80198d6:	602f      	str	r7, [r5, #0]
 80198d8:	e7b1      	b.n	801983e <__sflush_r+0x1a>
 80198da:	89a3      	ldrh	r3, [r4, #12]
 80198dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198e0:	81a3      	strh	r3, [r4, #12]
 80198e2:	e7ad      	b.n	8019840 <__sflush_r+0x1c>
 80198e4:	690f      	ldr	r7, [r1, #16]
 80198e6:	2f00      	cmp	r7, #0
 80198e8:	d0a9      	beq.n	801983e <__sflush_r+0x1a>
 80198ea:	0793      	lsls	r3, r2, #30
 80198ec:	680e      	ldr	r6, [r1, #0]
 80198ee:	bf08      	it	eq
 80198f0:	694b      	ldreq	r3, [r1, #20]
 80198f2:	600f      	str	r7, [r1, #0]
 80198f4:	bf18      	it	ne
 80198f6:	2300      	movne	r3, #0
 80198f8:	eba6 0807 	sub.w	r8, r6, r7
 80198fc:	608b      	str	r3, [r1, #8]
 80198fe:	f1b8 0f00 	cmp.w	r8, #0
 8019902:	dd9c      	ble.n	801983e <__sflush_r+0x1a>
 8019904:	4643      	mov	r3, r8
 8019906:	463a      	mov	r2, r7
 8019908:	6a21      	ldr	r1, [r4, #32]
 801990a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801990c:	4628      	mov	r0, r5
 801990e:	47b0      	blx	r6
 8019910:	2800      	cmp	r0, #0
 8019912:	dc06      	bgt.n	8019922 <__sflush_r+0xfe>
 8019914:	89a3      	ldrh	r3, [r4, #12]
 8019916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801991a:	81a3      	strh	r3, [r4, #12]
 801991c:	f04f 30ff 	mov.w	r0, #4294967295
 8019920:	e78e      	b.n	8019840 <__sflush_r+0x1c>
 8019922:	4407      	add	r7, r0
 8019924:	eba8 0800 	sub.w	r8, r8, r0
 8019928:	e7e9      	b.n	80198fe <__sflush_r+0xda>
 801992a:	bf00      	nop
 801992c:	20400001 	.word	0x20400001

08019930 <_fflush_r>:
 8019930:	b538      	push	{r3, r4, r5, lr}
 8019932:	690b      	ldr	r3, [r1, #16]
 8019934:	4605      	mov	r5, r0
 8019936:	460c      	mov	r4, r1
 8019938:	b1db      	cbz	r3, 8019972 <_fflush_r+0x42>
 801993a:	b118      	cbz	r0, 8019944 <_fflush_r+0x14>
 801993c:	6983      	ldr	r3, [r0, #24]
 801993e:	b90b      	cbnz	r3, 8019944 <_fflush_r+0x14>
 8019940:	f7ff fa8e 	bl	8018e60 <__sinit>
 8019944:	4b0c      	ldr	r3, [pc, #48]	; (8019978 <_fflush_r+0x48>)
 8019946:	429c      	cmp	r4, r3
 8019948:	d109      	bne.n	801995e <_fflush_r+0x2e>
 801994a:	686c      	ldr	r4, [r5, #4]
 801994c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019950:	b17b      	cbz	r3, 8019972 <_fflush_r+0x42>
 8019952:	4621      	mov	r1, r4
 8019954:	4628      	mov	r0, r5
 8019956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801995a:	f7ff bf63 	b.w	8019824 <__sflush_r>
 801995e:	4b07      	ldr	r3, [pc, #28]	; (801997c <_fflush_r+0x4c>)
 8019960:	429c      	cmp	r4, r3
 8019962:	d101      	bne.n	8019968 <_fflush_r+0x38>
 8019964:	68ac      	ldr	r4, [r5, #8]
 8019966:	e7f1      	b.n	801994c <_fflush_r+0x1c>
 8019968:	4b05      	ldr	r3, [pc, #20]	; (8019980 <_fflush_r+0x50>)
 801996a:	429c      	cmp	r4, r3
 801996c:	bf08      	it	eq
 801996e:	68ec      	ldreq	r4, [r5, #12]
 8019970:	e7ec      	b.n	801994c <_fflush_r+0x1c>
 8019972:	2000      	movs	r0, #0
 8019974:	bd38      	pop	{r3, r4, r5, pc}
 8019976:	bf00      	nop
 8019978:	0801c6e8 	.word	0x0801c6e8
 801997c:	0801c708 	.word	0x0801c708
 8019980:	0801c6c8 	.word	0x0801c6c8

08019984 <_lseek_r>:
 8019984:	b538      	push	{r3, r4, r5, lr}
 8019986:	4c07      	ldr	r4, [pc, #28]	; (80199a4 <_lseek_r+0x20>)
 8019988:	4605      	mov	r5, r0
 801998a:	4608      	mov	r0, r1
 801998c:	4611      	mov	r1, r2
 801998e:	2200      	movs	r2, #0
 8019990:	6022      	str	r2, [r4, #0]
 8019992:	461a      	mov	r2, r3
 8019994:	f7e7 fb46 	bl	8001024 <_lseek>
 8019998:	1c43      	adds	r3, r0, #1
 801999a:	d102      	bne.n	80199a2 <_lseek_r+0x1e>
 801999c:	6823      	ldr	r3, [r4, #0]
 801999e:	b103      	cbz	r3, 80199a2 <_lseek_r+0x1e>
 80199a0:	602b      	str	r3, [r5, #0]
 80199a2:	bd38      	pop	{r3, r4, r5, pc}
 80199a4:	200079cc 	.word	0x200079cc

080199a8 <__swhatbuf_r>:
 80199a8:	b570      	push	{r4, r5, r6, lr}
 80199aa:	460e      	mov	r6, r1
 80199ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199b0:	2900      	cmp	r1, #0
 80199b2:	b096      	sub	sp, #88	; 0x58
 80199b4:	4614      	mov	r4, r2
 80199b6:	461d      	mov	r5, r3
 80199b8:	da07      	bge.n	80199ca <__swhatbuf_r+0x22>
 80199ba:	2300      	movs	r3, #0
 80199bc:	602b      	str	r3, [r5, #0]
 80199be:	89b3      	ldrh	r3, [r6, #12]
 80199c0:	061a      	lsls	r2, r3, #24
 80199c2:	d410      	bmi.n	80199e6 <__swhatbuf_r+0x3e>
 80199c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199c8:	e00e      	b.n	80199e8 <__swhatbuf_r+0x40>
 80199ca:	466a      	mov	r2, sp
 80199cc:	f000 f8b2 	bl	8019b34 <_fstat_r>
 80199d0:	2800      	cmp	r0, #0
 80199d2:	dbf2      	blt.n	80199ba <__swhatbuf_r+0x12>
 80199d4:	9a01      	ldr	r2, [sp, #4]
 80199d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80199da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80199de:	425a      	negs	r2, r3
 80199e0:	415a      	adcs	r2, r3
 80199e2:	602a      	str	r2, [r5, #0]
 80199e4:	e7ee      	b.n	80199c4 <__swhatbuf_r+0x1c>
 80199e6:	2340      	movs	r3, #64	; 0x40
 80199e8:	2000      	movs	r0, #0
 80199ea:	6023      	str	r3, [r4, #0]
 80199ec:	b016      	add	sp, #88	; 0x58
 80199ee:	bd70      	pop	{r4, r5, r6, pc}

080199f0 <__smakebuf_r>:
 80199f0:	898b      	ldrh	r3, [r1, #12]
 80199f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199f4:	079d      	lsls	r5, r3, #30
 80199f6:	4606      	mov	r6, r0
 80199f8:	460c      	mov	r4, r1
 80199fa:	d507      	bpl.n	8019a0c <__smakebuf_r+0x1c>
 80199fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a00:	6023      	str	r3, [r4, #0]
 8019a02:	6123      	str	r3, [r4, #16]
 8019a04:	2301      	movs	r3, #1
 8019a06:	6163      	str	r3, [r4, #20]
 8019a08:	b002      	add	sp, #8
 8019a0a:	bd70      	pop	{r4, r5, r6, pc}
 8019a0c:	ab01      	add	r3, sp, #4
 8019a0e:	466a      	mov	r2, sp
 8019a10:	f7ff ffca 	bl	80199a8 <__swhatbuf_r>
 8019a14:	9900      	ldr	r1, [sp, #0]
 8019a16:	4605      	mov	r5, r0
 8019a18:	4630      	mov	r0, r6
 8019a1a:	f7ff faab 	bl	8018f74 <_malloc_r>
 8019a1e:	b948      	cbnz	r0, 8019a34 <__smakebuf_r+0x44>
 8019a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a24:	059a      	lsls	r2, r3, #22
 8019a26:	d4ef      	bmi.n	8019a08 <__smakebuf_r+0x18>
 8019a28:	f023 0303 	bic.w	r3, r3, #3
 8019a2c:	f043 0302 	orr.w	r3, r3, #2
 8019a30:	81a3      	strh	r3, [r4, #12]
 8019a32:	e7e3      	b.n	80199fc <__smakebuf_r+0xc>
 8019a34:	4b0d      	ldr	r3, [pc, #52]	; (8019a6c <__smakebuf_r+0x7c>)
 8019a36:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a38:	89a3      	ldrh	r3, [r4, #12]
 8019a3a:	6020      	str	r0, [r4, #0]
 8019a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a40:	81a3      	strh	r3, [r4, #12]
 8019a42:	9b00      	ldr	r3, [sp, #0]
 8019a44:	6163      	str	r3, [r4, #20]
 8019a46:	9b01      	ldr	r3, [sp, #4]
 8019a48:	6120      	str	r0, [r4, #16]
 8019a4a:	b15b      	cbz	r3, 8019a64 <__smakebuf_r+0x74>
 8019a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a50:	4630      	mov	r0, r6
 8019a52:	f000 f881 	bl	8019b58 <_isatty_r>
 8019a56:	b128      	cbz	r0, 8019a64 <__smakebuf_r+0x74>
 8019a58:	89a3      	ldrh	r3, [r4, #12]
 8019a5a:	f023 0303 	bic.w	r3, r3, #3
 8019a5e:	f043 0301 	orr.w	r3, r3, #1
 8019a62:	81a3      	strh	r3, [r4, #12]
 8019a64:	89a3      	ldrh	r3, [r4, #12]
 8019a66:	431d      	orrs	r5, r3
 8019a68:	81a5      	strh	r5, [r4, #12]
 8019a6a:	e7cd      	b.n	8019a08 <__smakebuf_r+0x18>
 8019a6c:	08018e29 	.word	0x08018e29

08019a70 <__malloc_lock>:
 8019a70:	4770      	bx	lr

08019a72 <__malloc_unlock>:
 8019a72:	4770      	bx	lr

08019a74 <_free_r>:
 8019a74:	b538      	push	{r3, r4, r5, lr}
 8019a76:	4605      	mov	r5, r0
 8019a78:	2900      	cmp	r1, #0
 8019a7a:	d045      	beq.n	8019b08 <_free_r+0x94>
 8019a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a80:	1f0c      	subs	r4, r1, #4
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	bfb8      	it	lt
 8019a86:	18e4      	addlt	r4, r4, r3
 8019a88:	f7ff fff2 	bl	8019a70 <__malloc_lock>
 8019a8c:	4a1f      	ldr	r2, [pc, #124]	; (8019b0c <_free_r+0x98>)
 8019a8e:	6813      	ldr	r3, [r2, #0]
 8019a90:	4610      	mov	r0, r2
 8019a92:	b933      	cbnz	r3, 8019aa2 <_free_r+0x2e>
 8019a94:	6063      	str	r3, [r4, #4]
 8019a96:	6014      	str	r4, [r2, #0]
 8019a98:	4628      	mov	r0, r5
 8019a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a9e:	f7ff bfe8 	b.w	8019a72 <__malloc_unlock>
 8019aa2:	42a3      	cmp	r3, r4
 8019aa4:	d90c      	bls.n	8019ac0 <_free_r+0x4c>
 8019aa6:	6821      	ldr	r1, [r4, #0]
 8019aa8:	1862      	adds	r2, r4, r1
 8019aaa:	4293      	cmp	r3, r2
 8019aac:	bf04      	itt	eq
 8019aae:	681a      	ldreq	r2, [r3, #0]
 8019ab0:	685b      	ldreq	r3, [r3, #4]
 8019ab2:	6063      	str	r3, [r4, #4]
 8019ab4:	bf04      	itt	eq
 8019ab6:	1852      	addeq	r2, r2, r1
 8019ab8:	6022      	streq	r2, [r4, #0]
 8019aba:	6004      	str	r4, [r0, #0]
 8019abc:	e7ec      	b.n	8019a98 <_free_r+0x24>
 8019abe:	4613      	mov	r3, r2
 8019ac0:	685a      	ldr	r2, [r3, #4]
 8019ac2:	b10a      	cbz	r2, 8019ac8 <_free_r+0x54>
 8019ac4:	42a2      	cmp	r2, r4
 8019ac6:	d9fa      	bls.n	8019abe <_free_r+0x4a>
 8019ac8:	6819      	ldr	r1, [r3, #0]
 8019aca:	1858      	adds	r0, r3, r1
 8019acc:	42a0      	cmp	r0, r4
 8019ace:	d10b      	bne.n	8019ae8 <_free_r+0x74>
 8019ad0:	6820      	ldr	r0, [r4, #0]
 8019ad2:	4401      	add	r1, r0
 8019ad4:	1858      	adds	r0, r3, r1
 8019ad6:	4282      	cmp	r2, r0
 8019ad8:	6019      	str	r1, [r3, #0]
 8019ada:	d1dd      	bne.n	8019a98 <_free_r+0x24>
 8019adc:	6810      	ldr	r0, [r2, #0]
 8019ade:	6852      	ldr	r2, [r2, #4]
 8019ae0:	605a      	str	r2, [r3, #4]
 8019ae2:	4401      	add	r1, r0
 8019ae4:	6019      	str	r1, [r3, #0]
 8019ae6:	e7d7      	b.n	8019a98 <_free_r+0x24>
 8019ae8:	d902      	bls.n	8019af0 <_free_r+0x7c>
 8019aea:	230c      	movs	r3, #12
 8019aec:	602b      	str	r3, [r5, #0]
 8019aee:	e7d3      	b.n	8019a98 <_free_r+0x24>
 8019af0:	6820      	ldr	r0, [r4, #0]
 8019af2:	1821      	adds	r1, r4, r0
 8019af4:	428a      	cmp	r2, r1
 8019af6:	bf04      	itt	eq
 8019af8:	6811      	ldreq	r1, [r2, #0]
 8019afa:	6852      	ldreq	r2, [r2, #4]
 8019afc:	6062      	str	r2, [r4, #4]
 8019afe:	bf04      	itt	eq
 8019b00:	1809      	addeq	r1, r1, r0
 8019b02:	6021      	streq	r1, [r4, #0]
 8019b04:	605c      	str	r4, [r3, #4]
 8019b06:	e7c7      	b.n	8019a98 <_free_r+0x24>
 8019b08:	bd38      	pop	{r3, r4, r5, pc}
 8019b0a:	bf00      	nop
 8019b0c:	200041f0 	.word	0x200041f0

08019b10 <_read_r>:
 8019b10:	b538      	push	{r3, r4, r5, lr}
 8019b12:	4c07      	ldr	r4, [pc, #28]	; (8019b30 <_read_r+0x20>)
 8019b14:	4605      	mov	r5, r0
 8019b16:	4608      	mov	r0, r1
 8019b18:	4611      	mov	r1, r2
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	6022      	str	r2, [r4, #0]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	f7e7 fa20 	bl	8000f64 <_read>
 8019b24:	1c43      	adds	r3, r0, #1
 8019b26:	d102      	bne.n	8019b2e <_read_r+0x1e>
 8019b28:	6823      	ldr	r3, [r4, #0]
 8019b2a:	b103      	cbz	r3, 8019b2e <_read_r+0x1e>
 8019b2c:	602b      	str	r3, [r5, #0]
 8019b2e:	bd38      	pop	{r3, r4, r5, pc}
 8019b30:	200079cc 	.word	0x200079cc

08019b34 <_fstat_r>:
 8019b34:	b538      	push	{r3, r4, r5, lr}
 8019b36:	4c07      	ldr	r4, [pc, #28]	; (8019b54 <_fstat_r+0x20>)
 8019b38:	2300      	movs	r3, #0
 8019b3a:	4605      	mov	r5, r0
 8019b3c:	4608      	mov	r0, r1
 8019b3e:	4611      	mov	r1, r2
 8019b40:	6023      	str	r3, [r4, #0]
 8019b42:	f7e7 fa54 	bl	8000fee <_fstat>
 8019b46:	1c43      	adds	r3, r0, #1
 8019b48:	d102      	bne.n	8019b50 <_fstat_r+0x1c>
 8019b4a:	6823      	ldr	r3, [r4, #0]
 8019b4c:	b103      	cbz	r3, 8019b50 <_fstat_r+0x1c>
 8019b4e:	602b      	str	r3, [r5, #0]
 8019b50:	bd38      	pop	{r3, r4, r5, pc}
 8019b52:	bf00      	nop
 8019b54:	200079cc 	.word	0x200079cc

08019b58 <_isatty_r>:
 8019b58:	b538      	push	{r3, r4, r5, lr}
 8019b5a:	4c06      	ldr	r4, [pc, #24]	; (8019b74 <_isatty_r+0x1c>)
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	4605      	mov	r5, r0
 8019b60:	4608      	mov	r0, r1
 8019b62:	6023      	str	r3, [r4, #0]
 8019b64:	f7e7 fa53 	bl	800100e <_isatty>
 8019b68:	1c43      	adds	r3, r0, #1
 8019b6a:	d102      	bne.n	8019b72 <_isatty_r+0x1a>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	b103      	cbz	r3, 8019b72 <_isatty_r+0x1a>
 8019b70:	602b      	str	r3, [r5, #0]
 8019b72:	bd38      	pop	{r3, r4, r5, pc}
 8019b74:	200079cc 	.word	0x200079cc

08019b78 <_init>:
 8019b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b7a:	bf00      	nop
 8019b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b7e:	bc08      	pop	{r3}
 8019b80:	469e      	mov	lr, r3
 8019b82:	4770      	bx	lr

08019b84 <_fini>:
 8019b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b86:	bf00      	nop
 8019b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b8a:	bc08      	pop	{r3}
 8019b8c:	469e      	mov	lr, r3
 8019b8e:	4770      	bx	lr
