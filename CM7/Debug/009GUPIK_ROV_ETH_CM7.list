
009GUPIK_ROV_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a374  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf0  0801a614  0801a614  0002a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d204  0801d204  0002d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d20c  0801d20c  0002d20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d210  0801d210  0002d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  0801d214  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010158  20000098  0801d2ac  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200101f0  0801d2ac  000301f0  2**0
                  ALLOC
  9 .lwip_sec     00041a00  30000000  0801d2ac  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005e0cb  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009af8  00000000  00000000  0008e191  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000028f8  00000000  00000000  00097c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002630  00000000  00000000  0009a588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004cf82  00000000  00000000  0009cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000360f4  00000000  00000000  000e9b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001a5828  00000000  00000000  0011fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002c5456  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000af54  00000000  00000000  002c54d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a5fc 	.word	0x0801a5fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	0801a5fc 	.word	0x0801a5fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <parse_eth_command>:

extern char uart3_send[200];


/* function parse received ethernet packet */
uint8_t parse_eth_command(char * eth_data, uint16_t eth_data_length, Eth_Packet * eth_packet){
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	460b      	mov	r3, r1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	817b      	strh	r3, [r7, #10]

	uint16_t index = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	83fb      	strh	r3, [r7, #30]
	uint16_t calc_checksum = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	83bb      	strh	r3, [r7, #28]

	// find start new packet in ethernet data
	while((index < eth_data_length) && (*(eth_data+index) != 's')) index++; calc_checksum += (uint8_t)'s';
 8000786:	e002      	b.n	800078e <parse_eth_command+0x1e>
 8000788:	8bfb      	ldrh	r3, [r7, #30]
 800078a:	3301      	adds	r3, #1
 800078c:	83fb      	strh	r3, [r7, #30]
 800078e:	8bfa      	ldrh	r2, [r7, #30]
 8000790:	897b      	ldrh	r3, [r7, #10]
 8000792:	429a      	cmp	r2, r3
 8000794:	d205      	bcs.n	80007a2 <parse_eth_command+0x32>
 8000796:	8bfb      	ldrh	r3, [r7, #30]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b73      	cmp	r3, #115	; 0x73
 80007a0:	d1f2      	bne.n	8000788 <parse_eth_command+0x18>
 80007a2:	8bbb      	ldrh	r3, [r7, #28]
 80007a4:	3373      	adds	r3, #115	; 0x73
 80007a6:	83bb      	strh	r3, [r7, #28]

	if(index >= eth_data_length) return no_packet_found;
 80007a8:	8bfa      	ldrh	r2, [r7, #30]
 80007aa:	897b      	ldrh	r3, [r7, #10]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d301      	bcc.n	80007b4 <parse_eth_command+0x44>
 80007b0:	2303      	movs	r3, #3
 80007b2:	e07b      	b.n	80008ac <parse_eth_command+0x13c>

	index++; if( *(eth_data+index) != 'n' ) return no_packet_found; calc_checksum += (uint8_t)'n';
 80007b4:	8bfb      	ldrh	r3, [r7, #30]
 80007b6:	3301      	adds	r3, #1
 80007b8:	83fb      	strh	r3, [r7, #30]
 80007ba:	8bfb      	ldrh	r3, [r7, #30]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b6e      	cmp	r3, #110	; 0x6e
 80007c4:	d001      	beq.n	80007ca <parse_eth_command+0x5a>
 80007c6:	2303      	movs	r3, #3
 80007c8:	e070      	b.n	80008ac <parse_eth_command+0x13c>
 80007ca:	8bbb      	ldrh	r3, [r7, #28]
 80007cc:	336e      	adds	r3, #110	; 0x6e
 80007ce:	83bb      	strh	r3, [r7, #28]
	index++; if( *(eth_data+index) != 'p' ) return no_packet_found; calc_checksum += (uint8_t)'p';
 80007d0:	8bfb      	ldrh	r3, [r7, #30]
 80007d2:	3301      	adds	r3, #1
 80007d4:	83fb      	strh	r3, [r7, #30]
 80007d6:	8bfb      	ldrh	r3, [r7, #30]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b70      	cmp	r3, #112	; 0x70
 80007e0:	d001      	beq.n	80007e6 <parse_eth_command+0x76>
 80007e2:	2303      	movs	r3, #3
 80007e4:	e062      	b.n	80008ac <parse_eth_command+0x13c>
 80007e6:	8bbb      	ldrh	r3, [r7, #28]
 80007e8:	3370      	adds	r3, #112	; 0x70
 80007ea:	83bb      	strh	r3, [r7, #28]

	//read command number and save in packet type variable
	index++; eth_packet->pacet_type = (uint8_t) *(eth_data+index); calc_checksum += (uint8_t)eth_packet->pacet_type;
 80007ec:	8bfb      	ldrh	r3, [r7, #30]
 80007ee:	3301      	adds	r3, #1
 80007f0:	83fb      	strh	r3, [r7, #30]
 80007f2:	8bfb      	ldrh	r3, [r7, #30]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	8bbb      	ldrh	r3, [r7, #28]
 8000806:	4413      	add	r3, r2
 8000808:	83bb      	strh	r3, [r7, #28]

	//read number of parameters
	index++; eth_packet->data_length = (uint8_t) *(eth_data+index); calc_checksum += (uint8_t)eth_packet->data_length;
 800080a:	8bfb      	ldrh	r3, [r7, #30]
 800080c:	3301      	adds	r3, #1
 800080e:	83fb      	strh	r3, [r7, #30]
 8000810:	8bfb      	ldrh	r3, [r7, #30]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	705a      	strb	r2, [r3, #1]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	b29a      	uxth	r2, r3
 8000822:	8bbb      	ldrh	r3, [r7, #28]
 8000824:	4413      	add	r3, r2
 8000826:	83bb      	strh	r3, [r7, #28]

	//read parameters value
	int i;
	for(i=0; i<eth_packet->data_length; i++){
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	e015      	b.n	800085a <parse_eth_command+0xea>
		index++;
 800082e:	8bfb      	ldrh	r3, [r7, #30]
 8000830:	3301      	adds	r3, #1
 8000832:	83fb      	strh	r3, [r7, #30]
		eth_packet->data[i] =  (uint8_t) *(eth_data+index); calc_checksum += (uint8_t)eth_packet->data_length;
 8000834:	8bfb      	ldrh	r3, [r7, #30]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	7819      	ldrb	r1, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	4413      	add	r3, r2
 8000842:	3302      	adds	r3, #2
 8000844:	460a      	mov	r2, r1
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	b29a      	uxth	r2, r3
 800084e:	8bbb      	ldrh	r3, [r7, #28]
 8000850:	4413      	add	r3, r2
 8000852:	83bb      	strh	r3, [r7, #28]
	for(i=0; i<eth_packet->data_length; i++){
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3301      	adds	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	461a      	mov	r2, r3
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	4293      	cmp	r3, r2
 8000864:	dbe3      	blt.n	800082e <parse_eth_command+0xbe>
	}

	// calcualte receive checksum
	uint16_t buf = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	82fb      	strh	r3, [r7, #22]
	index++; buf = (uint8_t) *(eth_data+index); buf = buf << 8;
 800086a:	8bfb      	ldrh	r3, [r7, #30]
 800086c:	3301      	adds	r3, #1
 800086e:	83fb      	strh	r3, [r7, #30]
 8000870:	8bfb      	ldrh	r3, [r7, #30]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	82fb      	strh	r3, [r7, #22]
 800087a:	8afb      	ldrh	r3, [r7, #22]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	82fb      	strh	r3, [r7, #22]
	index++; buf |= (uint8_t) *(eth_data+index);
 8000880:	8bfb      	ldrh	r3, [r7, #30]
 8000882:	3301      	adds	r3, #1
 8000884:	83fb      	strh	r3, [r7, #30]
 8000886:	8bfb      	ldrh	r3, [r7, #30]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29a      	uxth	r2, r3
 8000890:	8afb      	ldrh	r3, [r7, #22]
 8000892:	4313      	orrs	r3, r2
 8000894:	82fb      	strh	r3, [r7, #22]
	eth_packet->checksum = buf;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	8afa      	ldrh	r2, [r7, #22]
 800089a:	841a      	strh	r2, [r3, #32]

	if(calc_checksum != eth_packet->checksum) return checksum_error;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	8c1b      	ldrh	r3, [r3, #32]
 80008a0:	8bba      	ldrh	r2, [r7, #28]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d001      	beq.n	80008aa <parse_eth_command+0x13a>
 80008a6:	2302      	movs	r3, #2
 80008a8:	e000      	b.n	80008ac <parse_eth_command+0x13c>

//	sprintf(uart3_send, "Packet type: %d\n\rData length: %d\r\nPara: %d\r\nChecksum: %d\n\rCalc_checksum: %d\n\r", eth_packet->pacet_type, eth_packet->data_length, eth_packet->data[0], eth_packet->checksum, calc_checksum);
//	HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);

	return eth_packet_ok;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3724      	adds	r7, #36	; 0x24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <convert_eth_packet_to_tcp_array>:

}


/* convert struct tcp packet to array to be send */
void convert_eth_packet_to_tcp_array(char * eth_packet_data, uint16_t * eth_data_len,Eth_Packet * eth_packet){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]

	uint16_t index = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	82fb      	strh	r3, [r7, #22]
	uint16_t checksum = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	82bb      	strh	r3, [r7, #20]
	(*eth_data_len) = (char)3 + 1 + 1 + eth_packet->data_length + 2 + 1;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	3308      	adds	r3, #8
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	801a      	strh	r2, [r3, #0]

	*(eth_packet_data+index) = 's'; index++; checksum += (int)'s';
 80008da:	8afb      	ldrh	r3, [r7, #22]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	2273      	movs	r2, #115	; 0x73
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	3301      	adds	r3, #1
 80008e8:	82fb      	strh	r3, [r7, #22]
 80008ea:	8abb      	ldrh	r3, [r7, #20]
 80008ec:	3373      	adds	r3, #115	; 0x73
 80008ee:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = 'n';	index++; checksum += (int)'n';
 80008f0:	8afb      	ldrh	r3, [r7, #22]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4413      	add	r3, r2
 80008f6:	226e      	movs	r2, #110	; 0x6e
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	8afb      	ldrh	r3, [r7, #22]
 80008fc:	3301      	adds	r3, #1
 80008fe:	82fb      	strh	r3, [r7, #22]
 8000900:	8abb      	ldrh	r3, [r7, #20]
 8000902:	336e      	adds	r3, #110	; 0x6e
 8000904:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = 'p'; index++; checksum += (int)'p';
 8000906:	8afb      	ldrh	r3, [r7, #22]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	2270      	movs	r2, #112	; 0x70
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	8afb      	ldrh	r3, [r7, #22]
 8000912:	3301      	adds	r3, #1
 8000914:	82fb      	strh	r3, [r7, #22]
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	3370      	adds	r3, #112	; 0x70
 800091a:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = (char)eth_packet->pacet_type; index++; checksum += eth_packet->pacet_type;  // packet type
 800091c:	8afb      	ldrh	r3, [r7, #22]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3301      	adds	r3, #1
 800092c:	82fb      	strh	r3, [r7, #22]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b29a      	uxth	r2, r3
 8000934:	8abb      	ldrh	r3, [r7, #20]
 8000936:	4413      	add	r3, r2
 8000938:	82bb      	strh	r3, [r7, #20]
	*(eth_packet_data+index) = (char)eth_packet->data_length; index++; checksum += eth_packet->data_length; // packet lenght
 800093a:	8afb      	ldrh	r3, [r7, #22]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7852      	ldrb	r2, [r2, #1]
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	8afb      	ldrh	r3, [r7, #22]
 8000948:	3301      	adds	r3, #1
 800094a:	82fb      	strh	r3, [r7, #22]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	b29a      	uxth	r2, r3
 8000952:	8abb      	ldrh	r3, [r7, #20]
 8000954:	4413      	add	r3, r2
 8000956:	82bb      	strh	r3, [r7, #20]

	int i;
	for(i = 0; i<eth_packet->data_length; i++){
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	e017      	b.n	800098e <convert_eth_packet_to_tcp_array+0xd6>
		*(eth_packet_data+index) = (char)eth_packet->data[i]; index++; checksum += eth_packet->data[i]; // add data from eth packet
 800095e:	8afb      	ldrh	r3, [r7, #22]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	440a      	add	r2, r1
 800096a:	3202      	adds	r2, #2
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	8afb      	ldrh	r3, [r7, #22]
 8000972:	3301      	adds	r3, #1
 8000974:	82fb      	strh	r3, [r7, #22]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	4413      	add	r3, r2
 800097c:	3302      	adds	r3, #2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b29a      	uxth	r2, r3
 8000982:	8abb      	ldrh	r3, [r7, #20]
 8000984:	4413      	add	r3, r2
 8000986:	82bb      	strh	r3, [r7, #20]
	for(i = 0; i<eth_packet->data_length; i++){
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	3301      	adds	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	461a      	mov	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4293      	cmp	r3, r2
 8000998:	dbe1      	blt.n	800095e <convert_eth_packet_to_tcp_array+0xa6>
	}

	/* Calculate checksum of the packet */
	*(eth_packet_data+index) = (char)(checksum>>8); index++;
 800099a:	8abb      	ldrh	r3, [r7, #20]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b299      	uxth	r1, r3
 80009a0:	8afb      	ldrh	r3, [r7, #22]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	8afb      	ldrh	r3, [r7, #22]
 80009ac:	3301      	adds	r3, #1
 80009ae:	82fb      	strh	r3, [r7, #22]
	*(eth_packet_data+index) = (char)(checksum&0xFF); index++;
 80009b0:	8afb      	ldrh	r3, [r7, #22]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	8aba      	ldrh	r2, [r7, #20]
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	8afb      	ldrh	r3, [r7, #22]
 80009be:	3301      	adds	r3, #1
 80009c0:	82fb      	strh	r3, [r7, #22]

	*(eth_packet_data+index) = '\0';
 80009c2:	8afb      	ldrh	r3, [r7, #22]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]

	sprintf(uart3_send, "Calc_checksum: %d \n\r", checksum);
 80009cc:	8abb      	ldrh	r3, [r7, #20]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4909      	ldr	r1, [pc, #36]	; (80009f8 <convert_eth_packet_to_tcp_array+0x140>)
 80009d2:	480a      	ldr	r0, [pc, #40]	; (80009fc <convert_eth_packet_to_tcp_array+0x144>)
 80009d4:	f018 fd8c 	bl	80194f0 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <convert_eth_packet_to_tcp_array+0x144>)
 80009da:	f7ff fc81 	bl	80002e0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	4905      	ldr	r1, [pc, #20]	; (80009fc <convert_eth_packet_to_tcp_array+0x144>)
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <convert_eth_packet_to_tcp_array+0x148>)
 80009ea:	f006 f8b3 	bl	8006b54 <HAL_UART_Transmit>

}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	0801a614 	.word	0x0801a614
 80009fc:	2000c950 	.word	0x2000c950
 8000a00:	2000ca58 	.word	0x2000ca58

08000a04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <vApplicationGetIdleTaskMemory+0x30>)
 8000a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000b4 	.word	0x200000b4
 8000a34:	20000108 	.word	0x20000108

08000a38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_FREERTOS_Init+0x5c>)
 8000a40:	1d3c      	adds	r4, r7, #4
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f009 fd0f 	bl	800a478 <osThreadCreate>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_FREERTOS_Init+0x60>)
 8000a5e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vTaskEthReceiveCommand, "TaskEthReceiveCommand", 3000, NULL, 1, NULL);
 8000a60:	2300      	movs	r3, #0
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a6e:	490b      	ldr	r1, [pc, #44]	; (8000a9c <MX_FREERTOS_Init+0x64>)
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_FREERTOS_Init+0x68>)
 8000a72:	f00b f88b 	bl	800bb8c <xTaskCreate>

  xTaskCreate(vTaskEthSendData, "TaskEthSendData", 1000, NULL, 1, NULL);
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <MX_FREERTOS_Init+0x6c>)
 8000a86:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_FREERTOS_Init+0x70>)
 8000a88:	f00b f880 	bl	800bb8c <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bdb0      	pop	{r4, r5, r7, pc}
 8000a94:	0801a660 	.word	0x0801a660
 8000a98:	2000c948 	.word	0x2000c948
 8000a9c:	0801a62c 	.word	0x0801a62c
 8000aa0:	08000ac1 	.word	0x08000ac1
 8000aa4:	0801a644 	.word	0x0801a644
 8000aa8:	08000b8d 	.word	0x08000b8d

08000aac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f009 fd2a 	bl	800a510 <osDelay>
 8000abc:	e7fa      	b.n	8000ab4 <StartDefaultTask+0x8>
	...

08000ac0 <vTaskEthReceiveCommand>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     

/* task to hold tcp communication */
void vTaskEthReceiveCommand(void * argument){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	; 0x40
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	for(;;){

		/* Infinite loop */
		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_TCP);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	2010      	movs	r0, #16
 8000ace:	f00c fc43 	bl	800d358 <netconn_new_with_proto_and_callback>
 8000ad2:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (conn != NULL) {
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f6      	beq.n	8000ac8 <vTaskEthReceiveCommand+0x8>

			/* Bind connection to well known port number. */
			err = netconn_bind(conn, NULL, 4242);
 8000ada:	f241 0292 	movw	r2, #4242	; 0x1092
 8000ade:	2100      	movs	r1, #0
 8000ae0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ae2:	f00c fcd9 	bl	800d498 <netconn_bind>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			if (err == ERR_OK) {
 8000aec:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d143      	bne.n	8000b7c <vTaskEthReceiveCommand+0xbc>

				/* Tell connection to go into listening mode. */
				netconn_listen(conn);
 8000af4:	21ff      	movs	r1, #255	; 0xff
 8000af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000af8:	f00c fd06 	bl	800d508 <netconn_listen_with_backlog>

				while (1) {

					/* Grab new connection. */
					accept_err = netconn_accept(conn, &newconn);
 8000afc:	4922      	ldr	r1, [pc, #136]	; (8000b88 <vTaskEthReceiveCommand+0xc8>)
 8000afe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000b00:	f00c fd2e 	bl	800d560 <netconn_accept>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

					/* Process the new connection. */
					if (accept_err == ERR_OK) {
 8000b0a:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f4      	bne.n	8000afc <vTaskEthReceiveCommand+0x3c>

						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8000b12:	e019      	b.n	8000b48 <vTaskEthReceiveCommand+0x88>

							do {

								/* receive command from control station */
								netbuf_data(buf, &data, &len);
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8000b1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00e fbe8 	bl	800f2f4 <netbuf_data>

								/* parse received command that control ROV */
								parse_eth_command((char *) data, len, &tcp_command);
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b26:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000b28:	f107 020c 	add.w	r2, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fe1f 	bl	8000770 <parse_eth_command>

							} while (netbuf_next(buf) >= 0);
 8000b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b34:	4618      	mov	r0, r3
 8000b36:	f00e fc27 	bl	800f388 <netbuf_next>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	dae9      	bge.n	8000b14 <vTaskEthReceiveCommand+0x54>

							netbuf_delete(buf);
 8000b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00e fbb6 	bl	800f2b4 <netbuf_delete>
						while ((recv_err = netconn_recv(newconn, &buf)) == ERR_OK) {
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <vTaskEthReceiveCommand+0xc8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00c fe52 	bl	800d7fc <netconn_recv>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8000b5e:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0d6      	beq.n	8000b14 <vTaskEthReceiveCommand+0x54>

						}

						/* Close connection and discard connection identifier. */
						netconn_close(newconn);
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <vTaskEthReceiveCommand+0xc8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c ff66 	bl	800da3c <netconn_close>
						netconn_delete(newconn);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <vTaskEthReceiveCommand+0xc8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00c fc69 	bl	800d44c <netconn_delete>
					accept_err = netconn_accept(conn, &newconn);
 8000b7a:	e7bf      	b.n	8000afc <vTaskEthReceiveCommand+0x3c>
					}
				}

			} else {
				netconn_delete(newconn);
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <vTaskEthReceiveCommand+0xc8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00c fc63 	bl	800d44c <netconn_delete>
		conn = netconn_new(NETCONN_TCP);
 8000b86:	e79f      	b.n	8000ac8 <vTaskEthReceiveCommand+0x8>
 8000b88:	2000c94c 	.word	0x2000c94c

08000b8c <vTaskEthSendData>:
	vTaskDelete(NULL);

}


void vTaskEthSendData(void * argument){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0c0      	sub	sp, #256	; 0x100
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
	// status of netconn send
	err_t tcp_send_data_status;

	// data to be send
	char eth_packet_data[200];
	uint16_t eth_packet_data_len = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	857b      	strh	r3, [r7, #42]	; 0x2a

		/* queue which contain ethernet packet to be send */


		/* convert eth packet to tcp data array to be send */
		pacekt.pacet_type = motor_data_standard;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	723b      	strb	r3, [r7, #8]
		pacekt.data_length = 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	727b      	strb	r3, [r7, #9]
		pacekt.data[0] = 50;
 8000ba0:	2332      	movs	r3, #50	; 0x32
 8000ba2:	72bb      	strb	r3, [r7, #10]

		convert_eth_packet_to_tcp_array(eth_packet_data, &eth_packet_data_len, &pacekt);
 8000ba4:	f107 0208 	add.w	r2, r7, #8
 8000ba8:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8000bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe81 	bl	80008b8 <convert_eth_packet_to_tcp_array>


		/* send data packet with netconn_write function */
		tcp_send_data_status = netconn_write(newconn, eth_packet_data, eth_packet_data_len, NETCONN_COPY);
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <vTaskEthSendData+0x58>)
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f00c fe90 	bl	800d8ec <netconn_write_partly>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

//		sprintf(uart3_send, "Netconn write status: %s \n\r", eth_packet_data);
//		HAL_UART_Transmit(&huart3, (uint8_t*) uart3_send, strlen(uart3_send), HAL_MAX_DELAY);


		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <vTaskEthSendData+0x5c>)
 8000bd6:	f003 f884 	bl	8003ce2 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000bda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bde:	f00b f90b 	bl	800bdf8 <vTaskDelay>
		pacekt.pacet_type = motor_data_standard;
 8000be2:	e7d9      	b.n	8000b98 <vTaskEthSendData+0xc>
 8000be4:	2000c94c 	.word	0x2000c94c
 8000be8:	58021000 	.word	0x58021000

08000bec <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c20:	4b42      	ldr	r3, [pc, #264]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c30:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cda:	4815      	ldr	r0, [pc, #84]	; (8000d30 <MX_GPIO_Init+0x144>)
 8000cdc:	f002 ffe8 	bl	8003cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <MX_GPIO_Init+0x148>)
 8000ce6:	f002 ffe3 	bl	8003cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cea:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <MX_GPIO_Init+0x144>)
 8000d04:	f002 fe24 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_GPIO_Init+0x148>)
 8000d20:	f002 fe16 	bl	8003950 <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58021000 	.word	0x58021000

08000d38 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d40:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <SCB_EnableICache+0x3c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d50:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <SCB_EnableICache+0x3c>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <SCB_EnableICache+0x3c>)
 8000d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d64:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <SCB_EnableDCache+0x7c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d86:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <SCB_EnableDCache+0x7c>)
 8000d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d90:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0b5b      	lsrs	r3, r3, #13
 8000d96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d9a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000da4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	015a      	lsls	r2, r3, #5
 8000daa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000dae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000db4:	490f      	ldr	r1, [pc, #60]	; (8000df4 <SCB_EnableDCache+0x7c>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1ef      	bne.n	8000da6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e5      	bne.n	8000d9c <SCB_EnableDCache+0x24>
 8000dd0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <SCB_EnableDCache+0x7c>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <SCB_EnableDCache+0x7c>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dde:	6153      	str	r3, [r2, #20]
 8000de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000de4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0

	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8000dfe:	f000 ff03 	bl	8001c08 <HAL_MPU_Disable>

	/* Configure the MPU attributes as Device not cacheable
	 for ETH DMA descriptors */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MPU_Config+0x80>)
 8000e08:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 ff1d 	bl	8001c70 <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes as Normal Non Cacheable
	 for LwIP RAM heap which contains the Tx buffers */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30044000;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MPU_Config+0x84>)
 8000e3c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000e3e:	230d      	movs	r3, #13
 8000e40:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e42:	2303      	movs	r3, #3
 8000e44:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e62:	463b      	mov	r3, r7
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 ff03 	bl	8001c70 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f000 fee2 	bl	8001c34 <HAL_MPU_Enable>

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	30040000 	.word	0x30040000
 8000e7c:	30044000 	.word	0x30044000

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	MPU_Config();
 8000e86:	f7ff ffb7 	bl	8000df8 <MPU_Config>
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e8a:	f7ff ff55 	bl	8000d38 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e8e:	f7ff ff73 	bl	8000d78 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e96:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e98:	bf00      	nop
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <main+0xb0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <main+0x30>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dcf4      	bgt.n	8000e9a <main+0x1a>
  if ( timeout < 0 )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da01      	bge.n	8000eba <main+0x3a>
  {
  Error_Handler();
 8000eb6:	f000 f933 	bl	8001120 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fd27 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f839 	bl	8000f34 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0xb0>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <main+0xb0>)
 8000eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <main+0xb0>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f002 ff19 	bl	8003d18 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f002 ff2f 	bl	8003d4c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ef4:	bf00      	nop
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <main+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d104      	bne.n	8000f0c <main+0x8c>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dcf4      	bgt.n	8000ef6 <main+0x76>
if ( timeout < 0 )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da01      	bge.n	8000f16 <main+0x96>
{
Error_Handler();
 8000f12:	f000 f905 	bl	8001120 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f7ff fe69 	bl	8000bec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f1a:	f000 fa4d 	bl	80013b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f1e:	f000 fae1 	bl	80014e4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 8000f22:	f008 fd5d 	bl	80099e0 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000f26:	f7ff fd87 	bl	8000a38 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f2a:	f009 fa8e 	bl	800a44a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <main+0xae>
 8000f30:	58024400 	.word	0x58024400

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0cc      	sub	sp, #304	; 0x130
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f3e:	224c      	movs	r2, #76	; 0x4c
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f018 fab4 	bl	80194b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f018 faad 	bl	80194b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	23bc      	movs	r3, #188	; 0xbc
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	f018 faa5 	bl	80194b0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f66:	2004      	movs	r0, #4
 8000f68:	f003 f84c 	bl	8004004 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <SystemClock_Config+0x1b8>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a5d      	ldr	r2, [pc, #372]	; (80010ec <SystemClock_Config+0x1b8>)
 8000f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <SystemClock_Config+0x1b8>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <SystemClock_Config+0x1bc>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <SystemClock_Config+0x1bc>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <SystemClock_Config+0x1bc>)
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa6:	bf00      	nop
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <SystemClock_Config+0x1b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb4:	d1f8      	bne.n	8000fa8 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000fb6:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <SystemClock_Config+0x1c0>)
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	4a4d      	ldr	r2, [pc, #308]	; (80010f4 <SystemClock_Config+0x1c0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000fe6:	2378      	movs	r3, #120	; 0x78
 8000fe8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ffe:	230c      	movs	r3, #12
 8001000:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001014:	4618      	mov	r0, r3
 8001016:	f003 f85f 	bl	80040d8 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001020:	f000 f87e 	bl	8001120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	233f      	movs	r3, #63	; 0x3f
 8001026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001036:	2308      	movs	r3, #8
 8001038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800103c:	2340      	movs	r3, #64	; 0x40
 800103e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001042:	2340      	movs	r3, #64	; 0x40
 8001044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001056:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800105a:	2104      	movs	r1, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fc13 	bl	8004888 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8001068:	f000 f85a 	bl	8001120 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <SystemClock_Config+0x1c4>)
 8001072:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2201      	movs	r2, #1
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2218      	movs	r2, #24
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	2202      	movs	r2, #2
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2204      	movs	r2, #4
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2202      	movs	r2, #2
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	2200      	movs	r2, #0
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 ffa0 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 80010da:	f000 f821 	bl	8001120 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80010de:	f002 ffeb 	bl	80040b8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80010e2:	bf00      	nop
 80010e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024800 	.word	0x58024800
 80010f0:	58000400 	.word	0x58000400
 80010f4:	58024400 	.word	0x58024400
 80010f8:	00040002 	.word	0x00040002

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110e:	f000 fc39 	bl	8001984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010000 	.word	0x40010000

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x38>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_MspInit+0x38>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x38>)
 8001148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	210f      	movs	r1, #15
 8001158:	f06f 0001 	mvn.w	r0, #1
 800115c:	f000 fd2c 	bl	8001bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	2019      	movs	r0, #25
 8001182:	f000 fd19 	bl	8001bb8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001186:	2019      	movs	r0, #25
 8001188:	f000 fd30 	bl	8001bec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_InitTick+0xa8>)
 800118e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <HAL_InitTick+0xa8>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_InitTick+0xa8>)
 800119e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 feeb 	bl	8004f90 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011ba:	f003 fed3 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_InitTick+0xac>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	3b01      	subs	r3, #1
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0xb0>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <HAL_InitTick+0xb4>)
 80011d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_InitTick+0xb0>)
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_InitTick+0xb0>)
 80011e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_InitTick+0xb0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_InitTick+0xb0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <HAL_InitTick+0xb0>)
 80011f4:	f005 f9fe 	bl	80065f4 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d104      	bne.n	8001208 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <HAL_InitTick+0xb0>)
 8001200:	f005 fa2e 	bl	8006660 <HAL_TIM_Base_Start_IT>
 8001204:	4603      	mov	r3, r0
 8001206:	e000      	b.n	800120a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	3738      	adds	r7, #56	; 0x38
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58024400 	.word	0x58024400
 8001218:	431bde83 	.word	0x431bde83
 800121c:	2000ca18 	.word	0x2000ca18
 8001220:	40010000 	.word	0x40010000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <ETH_IRQHandler+0x10>)
 800125e:	f001 f9bf 	bl	80025e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000d024 	.word	0x2000d024

0800126c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM1_UP_IRQHandler+0x10>)
 8001272:	f005 fa1f 	bl	80066b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000ca18 	.word	0x2000ca18

08001280 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001292:	f3af 8000 	nop.w
 8001296:	4601      	mov	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
	}

return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e009      	b.n	80012e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf1      	blt.n	80012cc <_write+0x12>
	}
	return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:

int _close(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131a:	605a      	str	r2, [r3, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_isatty>:

int _isatty(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x50>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x16>
		heap_end = &end;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <_sbrk+0x50>)
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_sbrk+0x54>)
 8001370:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <_sbrk+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <_sbrk+0x50>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	466a      	mov	r2, sp
 8001382:	4293      	cmp	r3, r2
 8001384:	d905      	bls.n	8001392 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <_sbrk+0x58>)
 8001388:	220c      	movs	r2, #12
 800138a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	e006      	b.n	80013a0 <_sbrk+0x44>
	}

	heap_end += incr;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <_sbrk+0x50>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <_sbrk+0x50>)
 800139c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000308 	.word	0x20000308
 80013b0:	200101f0 	.word	0x200101f0
 80013b4:	200101e8 	.word	0x200101e8

080013b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <MX_USART3_UART_Init+0x94>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001402:	f005 fb57 	bl	8006ab4 <HAL_UART_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800140c:	f7ff fe88 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001410:	2100      	movs	r1, #0
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001414:	f007 ff55 	bl	80092c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800141e:	f7ff fe7f 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001426:	f007 ff8a 	bl	800933e <HAL_UARTEx_SetRxFifoThreshold>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001430:	f7ff fe76 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001436:	f007 ff0b 	bl	8009250 <HAL_UARTEx_DisableFifoMode>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001440:	f7ff fe6e 	bl	8001120 <Error_Handler>
  }

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000ca58 	.word	0x2000ca58
 800144c:	40004800 	.word	0x40004800

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_UART_MspInit+0x88>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12e      	bne.n	80014d0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <HAL_UART_MspInit+0x8c>)
 800147a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_UART_MspInit+0x8c>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_UART_MspInit+0x8c>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_UART_MspInit+0x90>)
 80014cc:	f002 fa40 	bl	8003950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40004800 	.word	0x40004800
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020c00 	.word	0x58020c00

080014e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f0:	2209      	movs	r2, #9
 80014f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001502:	2202      	movs	r2, #2
 8001504:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800151a:	2201      	movs	r2, #1
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001520:	2201      	movs	r2, #1
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800152c:	f002 fc22 	bl	8003d74 <HAL_PCD_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001536:	f7ff fdf3 	bl	8001120 <Error_Handler>
  }

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000cae4 	.word	0x2000cae4
 8001544:	40080000 	.word	0x40080000

08001548 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <HAL_PCD_MspInit+0xa4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d13b      	bne.n	80015e2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001588:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800159a:	230a      	movs	r3, #10
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <HAL_PCD_MspInit+0xac>)
 80015a6:	f002 f9d3 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <HAL_PCD_MspInit+0xac>)
 80015c0:	f002 f9c6 	bl	8003950 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 80015c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 80015cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 80015d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40080000 	.word	0x40080000
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020000 	.word	0x58020000

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015fe:	e003      	b.n	8001608 <LoopCopyDataInit>

08001600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001606:	3104      	adds	r1, #4

08001608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800160c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001610:	d3f6      	bcc.n	8001600 <CopyDataInit>
  ldr  r2, =_sbss
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001614:	e002      	b.n	800161c <LoopFillZerobss>

08001616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001618:	f842 3b04 	str.w	r3, [r2], #4

0800161c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800161e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001620:	d3f9      	bcc.n	8001616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001622:	f7ff f835 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f017 ff05 	bl	8019434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fc29 	bl	8000e80 <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001634:	0801d214 	.word	0x0801d214
  ldr  r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800163c:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8001640:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001644:	200101f0 	.word	0x200101f0

08001648 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC3_IRQHandler>

0800164a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <LAN8742_RegisterBusIO+0x28>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <LAN8742_RegisterBusIO+0x28>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <LAN8742_RegisterBusIO+0x28>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e014      	b.n	80016a2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d17c      	bne.n	80017c8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e01c      	b.n	8001722 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f107 0208 	add.w	r2, r7, #8
 80016f0:	2112      	movs	r1, #18
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	4798      	blx	r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da03      	bge.n	8001704 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80016fc:	f06f 0304 	mvn.w	r3, #4
 8001700:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001702:	e00b      	b.n	800171c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d105      	bne.n	800171c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
         break;
 800171a:	e005      	b.n	8001728 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b1f      	cmp	r3, #31
 8001726:	d9df      	bls.n	80016e8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b1f      	cmp	r3, #31
 800172e:	d902      	bls.n	8001736 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001730:	f06f 0302 	mvn.w	r3, #2
 8001734:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d145      	bne.n	80017c8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6810      	ldr	r0, [r2, #0]
 8001744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001748:	2100      	movs	r1, #0
 800174a:	4798      	blx	r3
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	db37      	blt.n	80017c2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6810      	ldr	r0, [r2, #0]
 800175a:	f107 0208 	add.w	r2, r7, #8
 800175e:	2100      	movs	r1, #0
 8001760:	4798      	blx	r3
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	db28      	blt.n	80017ba <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4798      	blx	r3
 800176e:	4603      	mov	r3, r0
 8001770:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001772:	e01c      	b.n	80017ae <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4798      	blx	r3
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001786:	d80e      	bhi.n	80017a6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6810      	ldr	r0, [r2, #0]
 8001790:	f107 0208 	add.w	r2, r7, #8
 8001794:	2100      	movs	r1, #0
 8001796:	4798      	blx	r3
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	da07      	bge.n	80017ae <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800179e:	f06f 0304 	mvn.w	r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
                 break;
 80017a4:	e010      	b.n	80017c8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017a6:	f06f 0301 	mvn.w	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
               break;
 80017ac:	e00c      	b.n	80017c8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1dd      	bne.n	8001774 <LAN8742_Init+0xc6>
 80017b8:	e006      	b.n	80017c8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80017ba:	f06f 0304 	mvn.w	r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	e002      	b.n	80017c8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80017c2:	f06f 0303 	mvn.w	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d112      	bne.n	80017f4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4798      	blx	r3
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80017d8:	bf00      	nop
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4798      	blx	r3
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017ec:	d9f5      	bls.n	80017da <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80017f4:	693b      	ldr	r3, [r7, #16]
 }
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6810      	ldr	r0, [r2, #0]
 8001812:	f107 020c 	add.w	r2, r7, #12
 8001816:	2101      	movs	r1, #1
 8001818:	4798      	blx	r3
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	da02      	bge.n	8001826 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001820:	f06f 0304 	mvn.w	r3, #4
 8001824:	e06e      	b.n	8001904 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6810      	ldr	r0, [r2, #0]
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	2101      	movs	r1, #1
 8001834:	4798      	blx	r3
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	da02      	bge.n	8001842 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800183c:	f06f 0304 	mvn.w	r3, #4
 8001840:	e060      	b.n	8001904 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800184c:	2301      	movs	r3, #1
 800184e:	e059      	b.n	8001904 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	f107 020c 	add.w	r2, r7, #12
 800185c:	2100      	movs	r1, #0
 800185e:	4798      	blx	r3
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001866:	f06f 0304 	mvn.w	r3, #4
 800186a:	e04b      	b.n	8001904 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d11b      	bne.n	80018ae <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <LAN8742_GetLinkState+0x90>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800188a:	2302      	movs	r3, #2
 800188c:	e03a      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001898:	2303      	movs	r3, #3
 800189a:	e033      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018a6:	2304      	movs	r3, #4
 80018a8:	e02c      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018aa:	2305      	movs	r3, #5
 80018ac:	e02a      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6810      	ldr	r0, [r2, #0]
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	211f      	movs	r1, #31
 80018bc:	4798      	blx	r3
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da02      	bge.n	80018ca <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80018c4:	f06f 0304 	mvn.w	r3, #4
 80018c8:	e01c      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80018d4:	2306      	movs	r3, #6
 80018d6:	e015      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 031c 	and.w	r3, r3, #28
 80018de:	2b18      	cmp	r3, #24
 80018e0:	d101      	bne.n	80018e6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018e2:	2302      	movs	r3, #2
 80018e4:	e00e      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 031c 	and.w	r3, r3, #28
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d101      	bne.n	80018f4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e007      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 031c 	and.w	r3, r3, #28
 80018fa:	2b14      	cmp	r3, #20
 80018fc:	d101      	bne.n	8001902 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018fe:	2304      	movs	r3, #4
 8001900:	e000      	b.n	8001904 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001902:	2305      	movs	r3, #5
    }				
  }
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001912:	2003      	movs	r0, #3
 8001914:	f000 f945 	bl	8001ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001918:	f003 f96c 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 800191c:	4601      	mov	r1, r0
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_Init+0x68>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_Init+0x6c>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa21 f303 	lsr.w	r3, r1, r3
 8001934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_Init+0x68>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_Init+0x6c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_Init+0x70>)
 800194e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_Init+0x74>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fc08 	bl	800116c <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e002      	b.n	800196c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001966:	f7ff fbe3 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024400 	.word	0x58024400
 8001978:	0801d024 	.word	0x0801d024
 800197c:	20000004 	.word	0x20000004
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	2000ceec 	.word	0x2000ceec

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000ceec 	.word	0x2000ceec

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_Delay+0x40>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000000c 	.word	0x2000000c

08001a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetREVID+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0c1b      	lsrs	r3, r3, #16
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	5c001000 	.word	0x5c001000

08001a20 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	58000400 	.word	0x58000400

08001a48 <__NVIC_SetPriorityGrouping>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <__NVIC_SetPriorityGrouping+0x40>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x40>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00
 8001a8c:	05fa0000 	.word	0x05fa0000

08001a90 <__NVIC_GetPriorityGrouping>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff4c 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc6:	f7ff ff63 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001bca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	6978      	ldr	r0, [r7, #20]
 8001bd2:	f7ff ffb3 	bl	8001b3c <NVIC_EncodePriority>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff82 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff56 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c0c:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_MPU_Disable+0x24>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <HAL_MPU_Disable+0x24>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_MPU_Disable+0x28>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00
 8001c30:	e000ed90 	.word	0xe000ed90

08001c34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_MPU_Enable+0x34>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_MPU_Enable+0x38>)
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_MPU_Enable+0x38>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c56:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed90 	.word	0xe000ed90
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	785a      	ldrb	r2, [r3, #1]
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001c7e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d029      	beq.n	8001cdc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7b1b      	ldrb	r3, [r3, #12]
 8001c94:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7adb      	ldrb	r3, [r3, #11]
 8001c9a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7a9b      	ldrb	r3, [r3, #10]
 8001ca2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ca4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b5b      	ldrb	r3, [r3, #13]
 8001caa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7b9b      	ldrb	r3, [r3, #14]
 8001cb2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7bdb      	ldrb	r3, [r3, #15]
 8001cba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7a5b      	ldrb	r3, [r3, #9]
 8001cc2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7a1b      	ldrb	r3, [r3, #8]
 8001cca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ccc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cd6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001cda:	e005      	b.n	8001ce8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_MPU_ConfigRegion+0x84>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed90 	.word	0xe000ed90

08001cf8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_GetCurrentCPUID+0x24>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	2b07      	cmp	r3, #7
 8001d08:	d101      	bne.n	8001d0e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e000      	b.n	8001d10 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001d0e:	2301      	movs	r3, #1
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0c6      	b.n	8001ec0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f007 ffa8 	bl	8009c90 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2223      	movs	r2, #35	; 0x23
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b60      	ldr	r3, [pc, #384]	; (8001ec8 <HAL_ETH_Init+0x1a8>)
 8001d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d4c:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <HAL_ETH_Init+0x1a8>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_ETH_Init+0x1a8>)
 8001d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7a1b      	ldrb	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fe57 	bl	8001a20 <HAL_SYSCFG_ETHInterfaceSelect>
 8001d72:	e003      	b.n	8001d7c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d74:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d78:	f7ff fe52 	bl	8001a20 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff fe0a 	bl	80019ac <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d9a:	e00f      	b.n	8001dbc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001d9c:	f7ff fe06 	bl	80019ac <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001daa:	d907      	bls.n	8001dbc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2204      	movs	r2, #4
 8001db0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	22e0      	movs	r2, #224	; 0xe0
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e081      	b.n	8001ec0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e6      	bne.n	8001d9c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f001 fa6e 	bl	80032b0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001dd4:	f003 f880 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_ETH_Init+0x1ac>)
 8001ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8001de0:	0c9a      	lsrs	r2, r3, #18
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3a01      	subs	r2, #1
 8001de8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f001 f9c1 	bl	8003174 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e08:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	22e0      	movs	r2, #224	; 0xe0
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e04a      	b.n	8001ec0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e32:	4413      	add	r3, r2
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_ETH_Init+0x1b0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6952      	ldr	r2, [r2, #20]
 8001e3e:	0052      	lsls	r2, r2, #1
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	6809      	ldr	r1, [r1, #0]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e4a:	440b      	add	r3, r1
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f001 fa86 	bl	8003360 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f001 faca 	bl	80033ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	3305      	adds	r3, #5
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	061a      	lsls	r2, r3, #24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	3302      	adds	r3, #2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	041b      	lsls	r3, r3, #16
 8001e8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ea6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ea8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2210      	movs	r2, #16
 8001ebc:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	58024400 	.word	0x58024400
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	ffff8001 	.word	0xffff8001

08001ed4 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	330a      	adds	r3, #10
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_ETH_DescAssignMemory+0x28>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d904      	bls.n	8001f06 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e021      	b.n	8001f4a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	330a      	adds	r3, #10
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d17d      	bne.n	8002074 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2223      	movs	r2, #35	; 0x23
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e018      	b.n	8001fb6 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d902      	bls.n	8001fa2 <HAL_ETH_Start_IT+0x4c>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	330a      	adds	r3, #10
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d9e3      	bls.n	8001f84 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0202 	orr.w	r2, r2, #2
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ffe:	4413      	add	r3, r2
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6811      	ldr	r1, [r2, #0]
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	f241 1304 	movw	r3, #4356	; 0x1104
 800200e:	440b      	add	r3, r1
 8002010:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f241 1308 	movw	r3, #4360	; 0x1108
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6811      	ldr	r1, [r2, #0]
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	f241 1308 	movw	r3, #4360	; 0x1108
 800202a:	440b      	add	r3, r1
 800202c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002040:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002044:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2210      	movs	r2, #16
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2222      	movs	r2, #34	; 0x22
 8002050:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f241 1334 	movw	r3, #4404	; 0x1134
 800205a:	4413      	add	r3, r2
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	f24d 0241 	movw	r2, #53313	; 0xd041
 8002066:	431a      	orrs	r2, r3
 8002068:	f241 1334 	movw	r3, #4404	; 0x1134
 800206c:	440b      	add	r3, r1
 800206e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e076      	b.n	8002192 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d171      	bne.n	8002190 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80020ac:	2200      	movs	r2, #0
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f001 f9f9 	bl	80034a8 <ETH_Prepare_Tx_Descriptors>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	f043 0202 	orr.w	r2, r3, #2
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e062      	b.n	8002192 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3206      	adds	r2, #6
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d904      	bls.n	80020f6 <HAL_ETH_Transmit+0x74>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	1f1a      	subs	r2, r3, #4
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	3106      	adds	r1, #6
 8002102:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002106:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800210a:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800210c:	f7ff fc4e 	bl	80019ac <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002112:	e034      	b.n	800217e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d011      	beq.n	800214a <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	f043 0208 	orr.w	r2, r3, #8
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	22e0      	movs	r2, #224	; 0xe0
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e023      	b.n	8002192 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d015      	beq.n	800217e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002152:	f7ff fc2b 	bl	80019ac <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <HAL_ETH_Transmit+0xe6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2210      	movs	r2, #16
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e009      	b.n	8002192 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	dbc6      	blt.n	8002114 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2210      	movs	r2, #16
 800218a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800219a:	b480      	push	{r7}
 800219c:	b089      	sub	sp, #36	; 0x24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	332c      	adds	r3, #44	; 0x2c
 80021a6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d06b      	beq.n	80022a4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e0bc      	b.n	800234a <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d036      	beq.n	8002250 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	3301      	adds	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d902      	bls.n	8002204 <HAL_ETH_IsRxDataAvailable+0x6a>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b04      	subs	r3, #4
 8002202:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db11      	blt.n	800223a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2201      	movs	r2, #1
 8002226:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3301      	adds	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d902      	bls.n	800223a <HAL_ETH_IsRxDataAvailable+0xa0>
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3b04      	subs	r3, #4
 8002238:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800224c:	2301      	movs	r3, #1
 800224e:	e07c      	b.n	800234a <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d902      	bls.n	8002276 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3b04      	subs	r3, #4
 8002274:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	e010      	b.n	80022a4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3301      	adds	r3, #1
 8002286:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	3301      	adds	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d902      	bls.n	800229a <HAL_ETH_IsRxDataAvailable+0x100>
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3b04      	subs	r3, #4
 8002298:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db02      	blt.n	80022b2 <HAL_ETH_IsRxDataAvailable+0x118>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d98e      	bls.n	80021d0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d044      	beq.n	8002342 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e036      	b.n	800233a <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022da:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3301      	adds	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d902      	bls.n	800232a <HAL_ETH_IsRxDataAvailable+0x190>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3b04      	subs	r3, #4
 8002328:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3c4      	bcc.n	80022cc <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]

  return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b08a      	sub	sp, #40	; 0x28
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	332c      	adds	r3, #44	; 0x2c
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002378:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d104      	bne.n	800238e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07d      	b.n	800248a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff feff 	bl	800219a <HAL_ETH_IsRxDataAvailable>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e071      	b.n	800248a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
 80023ba:	e031      	b.n	8002420 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	461a      	mov	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023f6:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3301      	adds	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	2b03      	cmp	r3, #3
 8002402:	d902      	bls.n	800240a <HAL_ETH_GetRxDataBuffer+0xb4>
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	3b04      	subs	r3, #4
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	3301      	adds	r3, #1
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	3b01      	subs	r3, #1
 8002426:	6a3a      	ldr	r2, [r7, #32]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3c7      	bcc.n	80023bc <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	461a      	mov	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	429a      	cmp	r2, r3
 800244c:	d803      	bhi.n	8002456 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	e018      	b.n	8002488 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	461a      	mov	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	1ad2      	subs	r2, r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e001      	b.n	8002488 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	332c      	adds	r3, #44	; 0x2c
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fe72 	bl	800219a <HAL_ETH_IsRxDataAvailable>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e017      	b.n	80024f0 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4413      	add	r3, r2
 80024c8:	3b01      	subs	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d902      	bls.n	80024d8 <HAL_ETH_GetRxDataLength+0x46>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3b04      	subs	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	332c      	adds	r3, #44	; 0x2c
 8002504:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e055      	b.n	80025d4 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e03c      	b.n	80025b6 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254a:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	3b01      	subs	r3, #1
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d20d      	bcs.n	80025b0 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	3301      	adds	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d902      	bls.n	80025a6 <HAL_ETH_BuildRxDescriptors+0xae>
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3b04      	subs	r3, #4
 80025a4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ae:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	3301      	adds	r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3be      	bcc.n	800253c <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	f241 1328 	movw	r3, #4392	; 0x1128
 80025c8:	440b      	add	r3, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3724      	adds	r7, #36	; 0x24
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d113      	bne.n	8002622 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d109      	bne.n	8002622 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f007 fc14 	bl	8009e3c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800261c:	f248 0240 	movw	r2, #32832	; 0x8040
 8002620:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d113      	bne.n	800265c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f241 1334 	movw	r3, #4404	; 0x1134
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d109      	bne.n	800265c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8c7 	bl	80027dc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002656:	f248 0201 	movw	r2, #32769	; 0x8001
 800265a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266e:	d149      	bne.n	8002704 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f241 1334 	movw	r3, #4404	; 0x1134
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002684:	d13e      	bne.n	8002704 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f043 0208 	orr.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a4:	d11b      	bne.n	80026de <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f241 1302 	movw	r3, #4354	; 0x1102
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f241 1334 	movw	r3, #4404	; 0x1134
 80026c2:	4413      	add	r3, r2
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6811      	ldr	r1, [r2, #0]
 80026ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026ce:	f241 1334 	movw	r3, #4404	; 0x1134
 80026d2:	440b      	add	r3, r1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	22e0      	movs	r2, #224	; 0xe0
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
 80026dc:	e00f      	b.n	80026fe <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026f8:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80026fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f876 	bl	80027f0 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800270c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002710:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002714:	d10e      	bne.n	8002734 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	22e0      	movs	r2, #224	; 0xe0
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f86b 	bl	8002804 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b10      	cmp	r3, #16
 8002742:	d10d      	bne.n	8002760 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800274c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f85f 	bl	8002818 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b20      	cmp	r3, #32
 800276e:	d10d      	bne.n	800278c <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f853 	bl	800282c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800278c:	f7ff fab4 	bl	8001cf8 <HAL_GetCurrentCPUID>
 8002790:	4603      	mov	r3, r0
 8002792:	2b03      	cmp	r3, #3
 8002794:	d10d      	bne.n	80027b2 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_ETH_IRQHandler+0x1f4>)
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_ETH_IRQHandler+0x1f4>)
 80027a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f848 	bl	8002840 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 80027b0:	e00c      	b.n	80027cc <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_ETH_IRQHandler+0x1f8>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_ETH_IRQHandler+0x1f8>)
 80027c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f83a 	bl	8002840 <HAL_ETH_WakeUpCallback>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58000080 	.word	0x58000080
 80027d8:	580000c0 	.word	0x580000c0

080027dc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e03e      	b.n	80028f4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800287e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	055b      	lsls	r3, r3, #21
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f043 030c 	orr.w	r3, r3, #12
 80028a2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80028b6:	f7ff f879 	bl	80019ac <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028bc:	e009      	b.n	80028d2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80028be:	f7ff f875 	bl	80019ac <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028cc:	d901      	bls.n	80028d2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e010      	b.n	80028f4 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ed      	bne.n	80028be <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e03c      	b.n	8002998 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002926:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	055b      	lsls	r3, r3, #21
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 030c 	bic.w	r3, r3, #12
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b29a      	uxth	r2, r3
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_ETH_WritePHYRegister+0xa4>)
 800295e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800296a:	f7ff f81f 	bl	80019ac <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002970:	e009      	b.n	8002986 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002972:	f7ff f81b 	bl	80019ac <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002980:	d901      	bls.n	8002986 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e008      	b.n	8002998 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ed      	bne.n	8002972 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40028000 	.word	0x40028000

080029a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e1c3      	b.n	8002d40 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0e5b      	lsrs	r3, r3, #25
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf14      	ite	ne
 8002c18:	2301      	movne	r3, #1
 8002c1a:	2300      	moveq	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 020f 	and.w	r2, r3, #15
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ccc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cdc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00a      	b.n	8002d76 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d105      	bne.n	8002d74 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f860 	bl	8002e30 <ETH_SetMACConfig>

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d90:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d98:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d9a:	f002 f89d 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8002d9e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d908      	bls.n	8002dba <HAL_ETH_SetMDIOClockRange+0x3a>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d804      	bhi.n	8002dba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e027      	b.n	8002e0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x54>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d804      	bhi.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e01a      	b.n	8002e0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d903      	bls.n	8002de4 <HAL_ETH_SetMDIOClockRange+0x64>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d911      	bls.n	8002e08 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d908      	bls.n	8002dfe <HAL_ETH_SetMDIOClockRange+0x7e>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d804      	bhi.n	8002dfe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e005      	b.n	8002e0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e000      	b.n	8002e0a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002e08:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	01312cff 	.word	0x01312cff
 8002e20:	02160ebf 	.word	0x02160ebf
 8002e24:	039386ff 	.word	0x039386ff
 8002e28:	05f5e0ff 	.word	0x05f5e0ff
 8002e2c:	08f0d17f 	.word	0x08f0d17f

08002e30 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002e42:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	791b      	ldrb	r3, [r3, #4]
 8002e48:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002e4a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	7b1b      	ldrb	r3, [r3, #12]
 8002e50:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002e52:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	7b5b      	ldrb	r3, [r3, #13]
 8002e58:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e5a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	7b9b      	ldrb	r3, [r3, #14]
 8002e60:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	7bdb      	ldrb	r3, [r3, #15]
 8002e68:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e6a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	7c12      	ldrb	r2, [r2, #16]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d102      	bne.n	8002e7a <ETH_SetMACConfig+0x4a>
 8002e74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e78:	e000      	b.n	8002e7c <ETH_SetMACConfig+0x4c>
 8002e7a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e7c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	7c52      	ldrb	r2, [r2, #17]
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetMACConfig+0x5c>
 8002e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetMACConfig+0x5e>
 8002e8c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e8e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7c9b      	ldrb	r3, [r3, #18]
 8002e94:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e96:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002e9c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002ea2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	7f1b      	ldrb	r3, [r3, #28]
 8002ea8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002eaa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7f5b      	ldrb	r3, [r3, #29]
 8002eb0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002eb2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	7f92      	ldrb	r2, [r2, #30]
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d102      	bne.n	8002ec2 <ETH_SetMACConfig+0x92>
 8002ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec0:	e000      	b.n	8002ec4 <ETH_SetMACConfig+0x94>
 8002ec2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ec4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	7fdb      	ldrb	r3, [r3, #31]
 8002eca:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ecc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ed4:	2a00      	cmp	r2, #0
 8002ed6:	d102      	bne.n	8002ede <ETH_SetMACConfig+0xae>
 8002ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002edc:	e000      	b.n	8002ee0 <ETH_SetMACConfig+0xb0>
 8002ede:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002ee0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002ee6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eee:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002ef0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b56      	ldr	r3, [pc, #344]	; (800305c <ETH_SetMACConfig+0x22c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f1a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f1c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f24:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002f26:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f2e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002f30:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d102      	bne.n	8002f42 <ETH_SetMACConfig+0x112>
 8002f3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f40:	e000      	b.n	8002f44 <ETH_SetMACConfig+0x114>
 8002f42:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002f44:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <ETH_SetMACConfig+0x230>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f68:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <ETH_SetMACConfig+0x234>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f8c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f92:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	d101      	bne.n	8002fa2 <ETH_SetMACConfig+0x172>
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	e000      	b.n	8002fa4 <ETH_SetMACConfig+0x174>
 8002fa2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002fa4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002fba:	4013      	ands	r3, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002fcc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002fd4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f023 0103 	bic.w	r1, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ffa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003016:	2a00      	cmp	r2, #0
 8003018:	d101      	bne.n	800301e <ETH_SetMACConfig+0x1ee>
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	e000      	b.n	8003020 <ETH_SetMACConfig+0x1f0>
 800301e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003020:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003028:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800302a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003032:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003040:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	430a      	orrs	r2, r1
 800304c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	00048083 	.word	0x00048083
 8003060:	c0f88000 	.word	0xc0f88000
 8003064:	fffffef0 	.word	0xfffffef0

08003068 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <ETH_SetDMAConfig+0xf8>)
 800307e:	4013      	ands	r3, r2
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6809      	ldr	r1, [r1, #0]
 8003088:	431a      	orrs	r2, r3
 800308a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800308e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	791b      	ldrb	r3, [r3, #4]
 8003094:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800309a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	7b1b      	ldrb	r3, [r3, #12]
 80030a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80030ae:	4413      	add	r3, r2
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <ETH_SetDMAConfig+0xfc>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6811      	ldr	r1, [r2, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	431a      	orrs	r2, r3
 80030be:	f241 0304 	movw	r3, #4100	; 0x1004
 80030c2:	440b      	add	r3, r1
 80030c4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	7b5b      	ldrb	r3, [r3, #13]
 80030ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <ETH_SetDMAConfig+0x100>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6811      	ldr	r1, [r2, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80030ee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	7d1b      	ldrb	r3, [r3, #20]
 80030f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80030fa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	7f5b      	ldrb	r3, [r3, #29]
 8003100:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f241 1304 	movw	r3, #4356	; 0x1104
 800310e:	4413      	add	r3, r2
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <ETH_SetDMAConfig+0x104>)
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	431a      	orrs	r2, r3
 800311e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003122:	440b      	add	r3, r1
 8003124:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	7f1b      	ldrb	r3, [r3, #28]
 800312a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	f241 1308 	movw	r3, #4360	; 0x1108
 800313c:	4413      	add	r3, r2
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <ETH_SetDMAConfig+0x108>)
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6811      	ldr	r1, [r2, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	431a      	orrs	r2, r3
 800314c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003150:	440b      	add	r3, r1
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	ffff87fd 	.word	0xffff87fd
 8003164:	ffff2ffe 	.word	0xffff2ffe
 8003168:	fffec000 	.word	0xfffec000
 800316c:	ffc0efef 	.word	0xffc0efef
 8003170:	7fc0ffff 	.word	0x7fc0ffff

08003174 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0a4      	sub	sp, #144	; 0x90
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003182:	2300      	movs	r3, #0
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80031bc:	2300      	movs	r3, #0
 80031be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80031cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80031d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80031d8:	2300      	movs	r3, #0
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80031ee:	2300      	movs	r3, #0
 80031f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80031f6:	2300      	movs	r3, #0
 80031f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800320c:	2320      	movs	r3, #32
 800320e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800321e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003228:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003230:	2302      	movs	r3, #2
 8003232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800324e:	2300      	movs	r3, #0
 8003250:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fde6 	bl	8002e30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003264:	2301      	movs	r3, #1
 8003266:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003268:	2301      	movs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800327a:	2300      	movs	r3, #0
 800327c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800327e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003282:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800328c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003294:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800329a:	f107 0308 	add.w	r3, r7, #8
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fee1 	bl	8003068 <ETH_SetDMAConfig>
}
 80032a6:	bf00      	nop
 80032a8:	3790      	adds	r7, #144	; 0x90
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032ca:	f001 fe05 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 80032ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d908      	bls.n	80032ea <ETH_MAC_MDIO_ClkConfig+0x3a>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d804      	bhi.n	80032ea <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e027      	b.n	800333a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d908      	bls.n	8003304 <ETH_MAC_MDIO_ClkConfig+0x54>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d804      	bhi.n	8003304 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e01a      	b.n	800333a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a13      	ldr	r2, [pc, #76]	; (8003354 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d903      	bls.n	8003314 <ETH_MAC_MDIO_ClkConfig+0x64>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d911      	bls.n	8003338 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d908      	bls.n	800332e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d804      	bhi.n	800332e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e005      	b.n	800333a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e000      	b.n	800333a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003338:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	01312cff 	.word	0x01312cff
 8003350:	02160ebf 	.word	0x02160ebf
 8003354:	039386ff 	.word	0x039386ff
 8003358:	05f5e0ff 	.word	0x05f5e0ff
 800335c:	08f0d17f 	.word	0x08f0d17f

08003360 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e01d      	b.n	80033aa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	3206      	adds	r2, #6
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d9de      	bls.n	800336e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f241 132c 	movw	r3, #4396	; 0x112c
 80033be:	4413      	add	r3, r2
 80033c0:	2203      	movs	r2, #3
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68d9      	ldr	r1, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f241 1314 	movw	r3, #4372	; 0x1114
 80033d0:	4413      	add	r3, r2
 80033d2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	e024      	b.n	8003446 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6919      	ldr	r1, [r3, #16]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2200      	movs	r2, #0
 8003418:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2200      	movs	r2, #0
 8003424:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	330a      	adds	r3, #10
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d9d7      	bls.n	80033fc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003472:	4413      	add	r3, r2
 8003474:	2203      	movs	r2, #3
 8003476:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6919      	ldr	r1, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	f241 131c 	movw	r3, #4380	; 0x111c
 8003484:	4413      	add	r3, r2
 8003486:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	f241 1328 	movw	r3, #4392	; 0x1128
 8003498:	4413      	add	r3, r2
 800349a:	6019      	str	r1, [r3, #0]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b08d      	sub	sp, #52	; 0x34
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3318      	adds	r3, #24
 80034b8:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e6:	d101      	bne.n	80034ec <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80034e8:	2302      	movs	r3, #2
 80034ea:	e223      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d044      	beq.n	8003582 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b72      	ldr	r3, [pc, #456]	; (80036c8 <ETH_Prepare_Tx_Descriptors+0x220>)
 80034fe:	4013      	ands	r3, r2
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003504:	431a      	orrs	r2, r3
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003524:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d027      	beq.n	8003582 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	b29a      	uxth	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	431a      	orrs	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003570:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00e      	beq.n	80035ac <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <ETH_Prepare_Tx_Descriptors+0x224>)
 8003594:	4013      	ands	r3, r2
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	6992      	ldr	r2, [r2, #24]
 800359a:	431a      	orrs	r2, r3
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <ETH_Prepare_Tx_Descriptors+0x11c>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d030      	beq.n	8003626 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	3301      	adds	r3, #1
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d902      	bls.n	80035ee <ETH_Prepare_Tx_Descriptors+0x146>
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	3b04      	subs	r3, #4
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	3301      	adds	r3, #1
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800360a:	d10c      	bne.n	8003626 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003614:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	e186      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	3301      	adds	r3, #1
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <ETH_Prepare_Tx_Descriptors+0x224>)
 800363c:	4013      	ands	r3, r2
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	6852      	ldr	r2, [r2, #4]
 8003642:	431a      	orrs	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003666:	4013      	ands	r3, r2
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	6852      	ldr	r2, [r2, #4]
 800366c:	0412      	lsls	r2, r2, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	e008      	b.n	8003688 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003682:	4013      	ands	r3, r2
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d021      	beq.n	80036d8 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	04db      	lsls	r3, r3, #19
 80036a2:	431a      	orrs	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	69d2      	ldr	r2, [r2, #28]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	e02e      	b.n	8003726 <ETH_Prepare_Tx_Descriptors+0x27e>
 80036c8:	ffff0000 	.word	0xffff0000
 80036cc:	ffffc000 	.word	0xffffc000
 80036d0:	c000ffff 	.word	0xc000ffff
 80036d4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	4b98      	ldr	r3, [pc, #608]	; (8003940 <ETH_Prepare_Tx_Descriptors+0x498>)
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	6852      	ldr	r2, [r2, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	431a      	orrs	r2, r3
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	431a      	orrs	r2, r3
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80c0 	beq.w	80038f6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	431a      	orrs	r2, r3
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003788:	e0b5      	b.n	80038f6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	3301      	adds	r3, #1
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d902      	bls.n	80037a8 <ETH_Prepare_Tx_Descriptors+0x300>
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	3b04      	subs	r3, #4
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ca:	d126      	bne.n	800381a <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e016      	b.n	800380e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	3301      	adds	r3, #1
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d902      	bls.n	80037fe <ETH_Prepare_Tx_Descriptors+0x356>
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	3b04      	subs	r3, #4
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	3301      	adds	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	429a      	cmp	r2, r3
 8003814:	d3e4      	bcc.n	80037e0 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	e08c      	b.n	8003934 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	3301      	adds	r3, #1
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003836:	4013      	ands	r3, r2
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	431a      	orrs	r2, r3
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003860:	4013      	ands	r3, r2
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	6852      	ldr	r2, [r2, #4]
 8003866:	0412      	lsls	r2, r2, #16
 8003868:	431a      	orrs	r2, r3
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	e008      	b.n	8003882 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2200      	movs	r2, #0
 8003874:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800387c:	4013      	ands	r3, r2
 800387e:	6a3a      	ldr	r2, [r7, #32]
 8003880:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00f      	beq.n	80038ae <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	4b2e      	ldr	r3, [pc, #184]	; (800394c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003894:	4013      	ands	r3, r2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	69d2      	ldr	r2, [r2, #28]
 800389a:	431a      	orrs	r2, r3
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	e017      	b.n	80038de <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <ETH_Prepare_Tx_Descriptors+0x498>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	431a      	orrs	r2, r3
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f47f af45 	bne.w	800378a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	e005      	b.n	8003920 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003930:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3734      	adds	r7, #52	; 0x34
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	ffff8000 	.word	0xffff8000
 8003944:	ffffc000 	.word	0xffffc000
 8003948:	c000ffff 	.word	0xc000ffff
 800394c:	fffc0000 	.word	0xfffc0000

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800395e:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_GPIO_Init+0x234>)
 8003960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003962:	e194      	b.n	8003c8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2101      	movs	r1, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8186 	beq.w	8003c88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d00b      	beq.n	800399c <HAL_GPIO_Init+0x4c>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d007      	beq.n	800399c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003990:	2b11      	cmp	r3, #17
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b12      	cmp	r3, #18
 800399a:	d130      	bne.n	80039fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039d2:	2201      	movs	r2, #1
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0201 	and.w	r2, r3, #1
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0xee>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b12      	cmp	r3, #18
 8003a3c:	d123      	bne.n	8003a86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	08da      	lsrs	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3208      	adds	r2, #8
 8003a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	69b9      	ldr	r1, [r7, #24]
 8003a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2203      	movs	r2, #3
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80e0 	beq.w	8003c88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac8:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <HAL_GPIO_Init+0x238>)
 8003aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ace:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_GPIO_Init+0x238>)
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_GPIO_Init+0x238>)
 8003ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae6:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <HAL_GPIO_Init+0x23c>)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_GPIO_Init+0x240>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d052      	beq.n	8003bb8 <HAL_GPIO_Init+0x268>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_GPIO_Init+0x244>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d031      	beq.n	8003b7e <HAL_GPIO_Init+0x22e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_GPIO_Init+0x248>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d02b      	beq.n	8003b7a <HAL_GPIO_Init+0x22a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_GPIO_Init+0x24c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d025      	beq.n	8003b76 <HAL_GPIO_Init+0x226>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_GPIO_Init+0x250>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01f      	beq.n	8003b72 <HAL_GPIO_Init+0x222>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_GPIO_Init+0x254>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x21e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <HAL_GPIO_Init+0x258>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x21a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_GPIO_Init+0x25c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x216>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_GPIO_Init+0x260>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x212>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_GPIO_Init+0x264>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x20e>
 8003b5a:	2309      	movs	r3, #9
 8003b5c:	e02d      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b5e:	230a      	movs	r3, #10
 8003b60:	e02b      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b62:	2308      	movs	r3, #8
 8003b64:	e029      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b66:	2307      	movs	r3, #7
 8003b68:	e027      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	e025      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b6e:	2305      	movs	r3, #5
 8003b70:	e023      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b72:	2304      	movs	r3, #4
 8003b74:	e021      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b76:	2303      	movs	r3, #3
 8003b78:	e01f      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e01d      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e01b      	b.n	8003bba <HAL_GPIO_Init+0x26a>
 8003b82:	bf00      	nop
 8003b84:	58000080 	.word	0x58000080
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	58000400 	.word	0x58000400
 8003b90:	58020000 	.word	0x58020000
 8003b94:	58020400 	.word	0x58020400
 8003b98:	58020800 	.word	0x58020800
 8003b9c:	58020c00 	.word	0x58020c00
 8003ba0:	58021000 	.word	0x58021000
 8003ba4:	58021400 	.word	0x58021400
 8003ba8:	58021800 	.word	0x58021800
 8003bac:	58021c00 	.word	0x58021c00
 8003bb0:	58022000 	.word	0x58022000
 8003bb4:	58022400 	.word	0x58022400
 8003bb8:	2300      	movs	r3, #0
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	f002 0203 	and.w	r2, r2, #3
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4093      	lsls	r3, r2
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bca:	4938      	ldr	r1, [pc, #224]	; (8003cac <HAL_GPIO_Init+0x35c>)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f ae63 	bne.w	8003964 <HAL_GPIO_Init+0x14>
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	58000400 	.word	0x58000400

08003cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc0:	787b      	ldrb	r3, [r7, #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ccc:	e003      	b.n	8003cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	041a      	lsls	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	619a      	str	r2, [r3, #24]
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d104      	bne.n	8003d06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	041a      	lsls	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003d04:	e002      	b.n	8003d0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	619a      	str	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_HSEM_FastTake+0x2c>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3320      	adds	r3, #32
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_HSEM_FastTake+0x30>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	58026400 	.word	0x58026400
 8003d48:	80000300 	.word	0x80000300

08003d4c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003d56:	4906      	ldr	r1, [pc, #24]	; (8003d70 <HAL_HSEM_Release+0x24>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	58026400 	.word	0x58026400

08003d74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b08f      	sub	sp, #60	; 0x3c
 8003d78:	af0a      	add	r7, sp, #40	; 0x28
 8003d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e116      	b.n	8003fb4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd fbd1 	bl	8001548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f005 fbc3 	bl	8009550 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	687e      	ldr	r6, [r7, #4]
 8003dd2:	466d      	mov	r5, sp
 8003dd4:	f106 0410 	add.w	r4, r6, #16
 8003dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003de8:	1d33      	adds	r3, r6, #4
 8003dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dec:	6838      	ldr	r0, [r7, #0]
 8003dee:	f005 fb4d 	bl	800948c <USB_CoreInit>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0d7      	b.n	8003fb4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f005 fbb1 	bl	8009572 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e04a      	b.n	8003eac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	333d      	adds	r3, #61	; 0x3d
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	333c      	adds	r3, #60	; 0x3c
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	b298      	uxth	r0, r3
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3342      	adds	r3, #66	; 0x42
 8003e52:	4602      	mov	r2, r0
 8003e54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	333f      	adds	r3, #63	; 0x3f
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3344      	adds	r3, #68	; 0x44
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3348      	adds	r3, #72	; 0x48
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3350      	adds	r3, #80	; 0x50
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3af      	bcc.n	8003e16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e044      	b.n	8003f46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f14:	7bfa      	ldrb	r2, [r7, #15]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3b5      	bcc.n	8003ebc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	687e      	ldr	r6, [r7, #4]
 8003f58:	466d      	mov	r5, sp
 8003f5a:	f106 0410 	add.w	r4, r6, #16
 8003f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f6e:	1d33      	adds	r3, r6, #4
 8003f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	f005 fb28 	bl	80095c8 <USB_DevInit>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e014      	b.n	8003fb4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f80a 	bl	8003fbc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f005 fcca 	bl	8009946 <USB_DevDisconnect>

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	10000003 	.word	0x10000003

08004004 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	2b06      	cmp	r3, #6
 8004016:	d00a      	beq.n	800402e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d001      	beq.n	800402a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e040      	b.n	80040ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e03e      	b.n	80040ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004036:	491f      	ldr	r1, [pc, #124]	; (80040b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4313      	orrs	r3, r2
 800403c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800403e:	f7fd fcb5 	bl	80019ac <HAL_GetTick>
 8004042:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004044:	e009      	b.n	800405a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004046:	f7fd fcb1 	bl	80019ac <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004054:	d901      	bls.n	800405a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e028      	b.n	80040ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800405a:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	d1ee      	bne.n	8004046 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b1e      	cmp	r3, #30
 800406c:	d008      	beq.n	8004080 <HAL_PWREx_ConfigSupply+0x7c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b2e      	cmp	r3, #46	; 0x2e
 8004072:	d005      	beq.n	8004080 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b1d      	cmp	r3, #29
 8004078:	d002      	beq.n	8004080 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b2d      	cmp	r3, #45	; 0x2d
 800407e:	d114      	bne.n	80040aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004080:	f7fd fc94 	bl	80019ac <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004086:	e009      	b.n	800409c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004088:	f7fd fc90 	bl	80019ac <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004096:	d901      	bls.n	800409c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d1ee      	bne.n	8004088 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	58024800 	.word	0x58024800

080040b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c6:	60d3      	str	r3, [r2, #12]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	58024800 	.word	0x58024800

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e3c4      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8087 	beq.w	8004206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f8:	4ba2      	ldr	r3, [pc, #648]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004102:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b10      	cmp	r3, #16
 800410c:	d007      	beq.n	800411e <HAL_RCC_OscConfig+0x46>
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2b18      	cmp	r3, #24
 8004112:	d110      	bne.n	8004136 <HAL_RCC_OscConfig+0x5e>
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d10b      	bne.n	8004136 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411e:	4b99      	ldr	r3, [pc, #612]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d06c      	beq.n	8004204 <HAL_RCC_OscConfig+0x12c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d168      	bne.n	8004204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e39e      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x76>
 8004140:	4b90      	ldr	r3, [pc, #576]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a8f      	ldr	r2, [pc, #572]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e02e      	b.n	80041ac <HAL_RCC_OscConfig+0xd4>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x98>
 8004156:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a8a      	ldr	r2, [pc, #552]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a87      	ldr	r2, [pc, #540]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e01d      	b.n	80041ac <HAL_RCC_OscConfig+0xd4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0xbc>
 800417a:	4b82      	ldr	r3, [pc, #520]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a81      	ldr	r2, [pc, #516]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7e      	ldr	r2, [pc, #504]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0xd4>
 8004194:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a7a      	ldr	r2, [pc, #488]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b78      	ldr	r3, [pc, #480]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a77      	ldr	r2, [pc, #476]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fbfa 	bl	80019ac <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fbf6 	bl	80019ac <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	; 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e352      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ce:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0xe4>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fbe6 	bl	80019ac <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fbe2 	bl	80019ac <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e33e      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x10c>
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8092 	beq.w	8004338 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004214:	4b5b      	ldr	r3, [pc, #364]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800421e:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_RCC_OscConfig+0x162>
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b18      	cmp	r3, #24
 800422e:	d12d      	bne.n	800428c <HAL_RCC_OscConfig+0x1b4>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d128      	bne.n	800428c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x17a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e310      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	f7fd fbd9 	bl	8001a08 <HAL_GetREVID>
 8004256:	4602      	mov	r2, r0
 8004258:	f241 0303 	movw	r3, #4099	; 0x1003
 800425c:	429a      	cmp	r2, r3
 800425e:	d80a      	bhi.n	8004276 <HAL_RCC_OscConfig+0x19e>
 8004260:	4b48      	ldr	r3, [pc, #288]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	4945      	ldr	r1, [pc, #276]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	4313      	orrs	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004274:	e060      	b.n	8004338 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	493f      	ldr	r1, [pc, #252]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428a:	e055      	b.n	8004338 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d038      	beq.n	8004306 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004294:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 0219 	bic.w	r2, r3, #25
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4938      	ldr	r1, [pc, #224]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd fb81 	bl	80019ac <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ae:	f7fd fb7d 	bl	80019ac <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e2d9      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	f7fd fb9c 	bl	8001a08 <HAL_GetREVID>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d80a      	bhi.n	80042f0 <HAL_RCC_OscConfig+0x218>
 80042da:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	031b      	lsls	r3, r3, #12
 80042e8:	4926      	ldr	r1, [pc, #152]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
 80042ee:	e023      	b.n	8004338 <HAL_RCC_OscConfig+0x260>
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	4921      	ldr	r1, [pc, #132]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
 8004304:	e018      	b.n	8004338 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd fb4b 	bl	80019ac <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431a:	f7fd fb47 	bl	80019ac <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e2a3      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800432c:	4b15      	ldr	r3, [pc, #84]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f0      	bne.n	800431a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8091 	beq.w	8004468 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d007      	beq.n	800436c <HAL_RCC_OscConfig+0x294>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b18      	cmp	r3, #24
 8004360:	d12f      	bne.n	80043c2 <HAL_RCC_OscConfig+0x2ea>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d12a      	bne.n	80043c2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0x2b0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d003      	beq.n	8004388 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e277      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
 8004384:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004388:	f7fd fb3e 	bl	8001a08 <HAL_GetREVID>
 800438c:	4602      	mov	r2, r0
 800438e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004392:	429a      	cmp	r2, r3
 8004394:	d80a      	bhi.n	80043ac <HAL_RCC_OscConfig+0x2d4>
 8004396:	4ba2      	ldr	r3, [pc, #648]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	069b      	lsls	r3, r3, #26
 80043a4:	499e      	ldr	r1, [pc, #632]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043aa:	e05d      	b.n	8004468 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043ac:	4b9c      	ldr	r3, [pc, #624]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	4999      	ldr	r1, [pc, #612]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c0:	e052      	b.n	8004468 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d035      	beq.n	8004436 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043ca:	4b95      	ldr	r3, [pc, #596]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a94      	ldr	r2, [pc, #592]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80043d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd fae9 	bl	80019ac <HAL_GetTick>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043de:	f7fd fae5 	bl	80019ac <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e241      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043f0:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043fc:	f7fd fb04 	bl	8001a08 <HAL_GetREVID>
 8004400:	4602      	mov	r2, r0
 8004402:	f241 0303 	movw	r3, #4099	; 0x1003
 8004406:	429a      	cmp	r2, r3
 8004408:	d80a      	bhi.n	8004420 <HAL_RCC_OscConfig+0x348>
 800440a:	4b85      	ldr	r3, [pc, #532]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	069b      	lsls	r3, r3, #26
 8004418:	4981      	ldr	r1, [pc, #516]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
 800441e:	e023      	b.n	8004468 <HAL_RCC_OscConfig+0x390>
 8004420:	4b7f      	ldr	r3, [pc, #508]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	497c      	ldr	r1, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004430:	4313      	orrs	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
 8004434:	e018      	b.n	8004468 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004436:	4b7a      	ldr	r3, [pc, #488]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a79      	ldr	r2, [pc, #484]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800443c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fd fab3 	bl	80019ac <HAL_GetTick>
 8004446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800444a:	f7fd faaf 	bl	80019ac <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e20b      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800445c:	4b70      	ldr	r3, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d036      	beq.n	80044e2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d019      	beq.n	80044b0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447c:	4b68      	ldr	r3, [pc, #416]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	4a67      	ldr	r2, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fd fa90 	bl	80019ac <HAL_GetTick>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004490:	f7fd fa8c 	bl	80019ac <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1e8      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044a2:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80044a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x3b8>
 80044ae:	e018      	b.n	80044e2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	4a5a      	ldr	r2, [pc, #360]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fd fa76 	bl	80019ac <HAL_GetTick>
 80044c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fd fa72 	bl	80019ac <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1ce      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044d6:	4b52      	ldr	r3, [pc, #328]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d036      	beq.n	800455c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d019      	beq.n	800452a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044f6:	4b4a      	ldr	r3, [pc, #296]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a49      	ldr	r2, [pc, #292]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80044fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004500:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004502:	f7fd fa53 	bl	80019ac <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800450a:	f7fd fa4f 	bl	80019ac <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e1ab      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800451c:	4b40      	ldr	r3, [pc, #256]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x432>
 8004528:	e018      	b.n	800455c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3c      	ldr	r2, [pc, #240]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004534:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004536:	f7fd fa39 	bl	80019ac <HAL_GetTick>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800453e:	f7fd fa35 	bl	80019ac <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e191      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8086 	beq.w	8004676 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800456a:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCC_OscConfig+0x54c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2d      	ldr	r2, [pc, #180]	; (8004624 <HAL_RCC_OscConfig+0x54c>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004576:	f7fd fa19 	bl	80019ac <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fd fa15 	bl	80019ac <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e171      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <HAL_RCC_OscConfig+0x54c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4da>
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
 80045b0:	e02d      	b.n	800460e <HAL_RCC_OscConfig+0x536>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x4fc>
 80045ba:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
 80045d2:	e01c      	b.n	800460e <HAL_RCC_OscConfig+0x536>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x51e>
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	; 0x70
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x536>
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <HAL_RCC_OscConfig+0x548>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01a      	beq.n	800464c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd f9c9 	bl	80019ac <HAL_GetTick>
 800461a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800461c:	e00f      	b.n	800463e <HAL_RCC_OscConfig+0x566>
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
 8004624:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd f9c0 	bl	80019ac <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e11a      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800463e:	4b8f      	ldr	r3, [pc, #572]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ee      	beq.n	8004628 <HAL_RCC_OscConfig+0x550>
 800464a:	e014      	b.n	8004676 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fd f9ae 	bl	80019ac <HAL_GetTick>
 8004650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fd f9aa 	bl	80019ac <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e104      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800466a:	4b84      	ldr	r3, [pc, #528]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ee      	bne.n	8004654 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80f9 	beq.w	8004872 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004680:	4b7e      	ldr	r3, [pc, #504]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004688:	2b18      	cmp	r3, #24
 800468a:	f000 80b4 	beq.w	80047f6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	2b02      	cmp	r3, #2
 8004694:	f040 8095 	bne.w	80047c2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b78      	ldr	r3, [pc, #480]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a77      	ldr	r2, [pc, #476]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd f982 	bl	80019ac <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd f97e 	bl	80019ac <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0da      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046be:	4b6f      	ldr	r3, [pc, #444]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ca:	4b6c      	ldr	r3, [pc, #432]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80046cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ce:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x7a8>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	430a      	orrs	r2, r1
 80046de:	4967      	ldr	r1, [pc, #412]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	628b      	str	r3, [r1, #40]	; 0x28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	3b01      	subs	r3, #1
 80046ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	3b01      	subs	r3, #1
 80046f4:	025b      	lsls	r3, r3, #9
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	3b01      	subs	r3, #1
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004714:	4959      	ldr	r1, [pc, #356]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800471a:	4b58      	ldr	r3, [pc, #352]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4a57      	ldr	r2, [pc, #348]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004726:	4b55      	ldr	r3, [pc, #340]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472a:	4b56      	ldr	r3, [pc, #344]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004732:	00d2      	lsls	r2, r2, #3
 8004734:	4951      	ldr	r1, [pc, #324]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800473a:	4b50      	ldr	r3, [pc, #320]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f023 020c 	bic.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	494d      	ldr	r1, [pc, #308]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800474c:	4b4b      	ldr	r3, [pc, #300]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	f023 0202 	bic.w	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	4948      	ldr	r1, [pc, #288]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800475e:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4a46      	ldr	r2, [pc, #280]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476a:	4b44      	ldr	r3, [pc, #272]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4a43      	ldr	r2, [pc, #268]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004776:	4b41      	ldr	r3, [pc, #260]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	4a40      	ldr	r2, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	4a3d      	ldr	r2, [pc, #244]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 8004794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fd f907 	bl	80019ac <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a2:	f7fd f903 	bl	80019ac <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e05f      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047b4:	4b31      	ldr	r3, [pc, #196]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x6ca>
 80047c0:	e057      	b.n	8004872 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2d      	ldr	r2, [pc, #180]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80047c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd f8ed 	bl	80019ac <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fd f8e9 	bl	80019ac <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e045      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e8:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x6fe>
 80047f4:	e03d      	b.n	8004872 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047fc:	4b1f      	ldr	r3, [pc, #124]	; (800487c <HAL_RCC_OscConfig+0x7a4>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b01      	cmp	r3, #1
 8004808:	d031      	beq.n	800486e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d12a      	bne.n	800486e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d122      	bne.n	800486e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d11a      	bne.n	800486e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d111      	bne.n	800486e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d108      	bne.n	800486e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	0e1b      	lsrs	r3, r3, #24
 8004860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d001      	beq.n	8004872 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3730      	adds	r7, #48	; 0x30
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	58024400 	.word	0x58024400
 8004880:	fffffc0c 	.word	0xfffffc0c
 8004884:	ffff0007 	.word	0xffff0007

08004888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e19c      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d910      	bls.n	80048cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	4985      	ldr	r1, [pc, #532]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b83      	ldr	r3, [pc, #524]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e184      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	4b7b      	ldr	r3, [pc, #492]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d908      	bls.n	80048fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048e8:	4b78      	ldr	r3, [pc, #480]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4975      	ldr	r1, [pc, #468]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	4b70      	ldr	r3, [pc, #448]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004912:	429a      	cmp	r2, r3
 8004914:	d908      	bls.n	8004928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004916:	4b6d      	ldr	r3, [pc, #436]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	496a      	ldr	r1, [pc, #424]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004924:	4313      	orrs	r3, r2
 8004926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	4b64      	ldr	r3, [pc, #400]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004940:	429a      	cmp	r2, r3
 8004942:	d908      	bls.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	495e      	ldr	r1, [pc, #376]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004952:	4313      	orrs	r3, r2
 8004954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	4b59      	ldr	r3, [pc, #356]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800496e:	429a      	cmp	r2, r3
 8004970:	d908      	bls.n	8004984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004972:	4b56      	ldr	r3, [pc, #344]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4953      	ldr	r1, [pc, #332]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004980:	4313      	orrs	r3, r2
 8004982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	429a      	cmp	r2, r3
 800499e:	d908      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f023 020f 	bic.w	r2, r3, #15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4947      	ldr	r1, [pc, #284]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d055      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049be:	4b43      	ldr	r3, [pc, #268]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4940      	ldr	r1, [pc, #256]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d121      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0f6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d115      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0ea      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a08:	4b30      	ldr	r3, [pc, #192]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0de      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f023 0207 	bic.w	r2, r3, #7
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4925      	ldr	r1, [pc, #148]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fc ffb7 	bl	80019ac <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a42:	f7fc ffb3 	bl	80019ac <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0be      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a58:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d1eb      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d208      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f023 020f 	bic.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	490e      	ldr	r1, [pc, #56]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d214      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 020f 	bic.w	r2, r3, #15
 8004aae:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e086      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
 8004ac8:	52002000 	.word	0x52002000
 8004acc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d208      	bcs.n	8004afe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004aec:	4b3c      	ldr	r3, [pc, #240]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	4939      	ldr	r1, [pc, #228]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d208      	bcs.n	8004b2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	492e      	ldr	r1, [pc, #184]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699a      	ldr	r2, [r3, #24]
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d208      	bcs.n	8004b5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4922      	ldr	r1, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d208      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4917      	ldr	r1, [pc, #92]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b88:	f000 f834 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004b8c:	4601      	mov	r1, r0
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x35c>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa21 f303 	lsr.w	r3, r1, r3
 8004ba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <HAL_RCC_ClockConfig+0x35c>)
 8004bb0:	5cd3      	ldrb	r3, [r2, r3]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x360>)
 8004bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x364>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x368>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc face 	bl	800116c <HAL_InitTick>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	0801d024 	.word	0x0801d024
 8004be8:	20000004 	.word	0x20000004
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000008 	.word	0x20000008

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfa:	4baf      	ldr	r3, [pc, #700]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c02:	2b18      	cmp	r3, #24
 8004c04:	f200 814e 	bhi.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004ea5 	.word	0x08004ea5
 8004c18:	08004ea5 	.word	0x08004ea5
 8004c1c:	08004ea5 	.word	0x08004ea5
 8004c20:	08004ea5 	.word	0x08004ea5
 8004c24:	08004ea5 	.word	0x08004ea5
 8004c28:	08004ea5 	.word	0x08004ea5
 8004c2c:	08004ea5 	.word	0x08004ea5
 8004c30:	08004c9b 	.word	0x08004c9b
 8004c34:	08004ea5 	.word	0x08004ea5
 8004c38:	08004ea5 	.word	0x08004ea5
 8004c3c:	08004ea5 	.word	0x08004ea5
 8004c40:	08004ea5 	.word	0x08004ea5
 8004c44:	08004ea5 	.word	0x08004ea5
 8004c48:	08004ea5 	.word	0x08004ea5
 8004c4c:	08004ea5 	.word	0x08004ea5
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004ea5 	.word	0x08004ea5
 8004c58:	08004ea5 	.word	0x08004ea5
 8004c5c:	08004ea5 	.word	0x08004ea5
 8004c60:	08004ea5 	.word	0x08004ea5
 8004c64:	08004ea5 	.word	0x08004ea5
 8004c68:	08004ea5 	.word	0x08004ea5
 8004c6c:	08004ea5 	.word	0x08004ea5
 8004c70:	08004ca7 	.word	0x08004ca7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c74:	4b90      	ldr	r3, [pc, #576]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c80:	4b8d      	ldr	r3, [pc, #564]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a8c      	ldr	r2, [pc, #560]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c92:	e10a      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c94:	4b89      	ldr	r3, [pc, #548]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c96:	61bb      	str	r3, [r7, #24]
    break;
 8004c98:	e107      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c9a:	4b89      	ldr	r3, [pc, #548]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004c9c:	61bb      	str	r3, [r7, #24]
    break;
 8004c9e:	e104      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ca0:	4b88      	ldr	r3, [pc, #544]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004ca2:	61bb      	str	r3, [r7, #24]
    break;
 8004ca4:	e101      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca6:	4b84      	ldr	r3, [pc, #528]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004cb0:	4b81      	ldr	r3, [pc, #516]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80da 	beq.w	8004e9e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d05a      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d302      	bcc.n	8004cfa <HAL_RCC_GetSysClockFreq+0x106>
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d078      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x1f6>
 8004cf8:	e099      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cfa:	4b6f      	ldr	r3, [pc, #444]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02d      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d06:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	4a6a      	ldr	r2, [pc, #424]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d30:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d44:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d60:	e087      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>
 8004d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d74:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d88:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da4:	e065      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004ed0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db8:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dcc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004de8:	e043      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004ed4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e10:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2c:	e021      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e38:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004ed0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e50:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e54:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e70:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	0a5b      	lsrs	r3, r3, #9
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e96:	ee17 3a90 	vmov	r3, s15
 8004e9a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004e9c:	e005      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
    break;
 8004ea2:	e002      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004ea6:	61bb      	str	r3, [r7, #24]
    break;
 8004ea8:	bf00      	nop
  }

  return sysclockfreq;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3724      	adds	r7, #36	; 0x24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	03d09000 	.word	0x03d09000
 8004ec0:	003d0900 	.word	0x003d0900
 8004ec4:	007a1200 	.word	0x007a1200
 8004ec8:	46000000 	.word	0x46000000
 8004ecc:	4c742400 	.word	0x4c742400
 8004ed0:	4a742400 	.word	0x4a742400
 8004ed4:	4af42400 	.word	0x4af42400

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ede:	f7ff fe89 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8004ef0:	5cd3      	ldrb	r3, [r2, r3]
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8004efa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f06:	5cd3      	ldrb	r3, [r2, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f16:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	0801d024 	.word	0x0801d024
 8004f30:	20000004 	.word	0x20000004
 8004f34:	20000000 	.word	0x20000000

08004f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f3c:	f7ff ffcc 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004f40:	4601      	mov	r1, r0
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	0801d024 	.word	0x0801d024

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f68:	f7ff ffb6 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f7a:	5cd3      	ldrb	r3, [r2, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	0801d024 	.word	0x0801d024

08004f90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223f      	movs	r2, #63	; 0x3f
 8004f9e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0207 	and.w	r2, r3, #7
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004fac:	4b17      	ldr	r3, [pc, #92]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004fb8:	4b14      	ldr	r3, [pc, #80]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 020f 	and.w	r2, r3, #15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_RCC_GetClockConfig+0x7c>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_GetClockConfig+0x80>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	601a      	str	r2, [r3, #0]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	58024400 	.word	0x58024400
 8005010:	52002000 	.word	0x52002000

08005014 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800501c:	2300      	movs	r3, #0
 800501e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005020:	2300      	movs	r3, #0
 8005022:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d03d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005038:	d013      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503e:	d802      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005044:	e01f      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504a:	d013      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800504c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005050:	d01c      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005052:	e018      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005054:	4baf      	ldr	r3, [pc, #700]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4aae      	ldr	r2, [pc, #696]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800505a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005060:	e015      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3304      	adds	r3, #4
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f95f 	bl	800632c <RCCEx_PLL2_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005072:	e00c      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3324      	adds	r3, #36	; 0x24
 8005078:	2102      	movs	r1, #2
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fa08 	bl	8006490 <RCCEx_PLL3_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005084:	e003      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
      break;
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800508c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005094:	4b9f      	ldr	r3, [pc, #636]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a0:	499c      	ldr	r1, [pc, #624]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	650b      	str	r3, [r1, #80]	; 0x50
 80050a6:	e001      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d03d      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d826      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050dd 	.word	0x080050dd
 80050cc:	080050eb 	.word	0x080050eb
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005115 	.word	0x08005115
 80050d8:	08005115 	.word	0x08005115
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050dc:	4b8d      	ldr	r3, [pc, #564]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	4a8c      	ldr	r2, [pc, #560]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050e8:	e015      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 f91b 	bl	800632c <RCCEx_PLL2_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050fa:	e00c      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3324      	adds	r3, #36	; 0x24
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f001 f9c4 	bl	8006490 <RCCEx_PLL3_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800510c:	e003      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
      break;
 8005112:	e000      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005116:	7dfb      	ldrb	r3, [r7, #23]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800511c:	4b7d      	ldr	r3, [pc, #500]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	f023 0207 	bic.w	r2, r3, #7
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	497a      	ldr	r1, [pc, #488]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800512a:	4313      	orrs	r3, r2
 800512c:	650b      	str	r3, [r1, #80]	; 0x50
 800512e:	e001      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800513c:	2b00      	cmp	r3, #0
 800513e:	d03e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d01c      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d804      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d00d      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005154:	e01e      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005156:	2bc0      	cmp	r3, #192	; 0xc0
 8005158:	d01f      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d01e      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005160:	e018      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005162:	4b6c      	ldr	r3, [pc, #432]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a6b      	ldr	r2, [pc, #428]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800516e:	e017      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 f8d8 	bl	800632c <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005180:	e00e      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3324      	adds	r3, #36	; 0x24
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f981 	bl	8006490 <RCCEx_PLL3_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005192:	e005      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
      break;
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800519e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051a6:	4b5b      	ldr	r3, [pc, #364]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	4958      	ldr	r1, [pc, #352]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	650b      	str	r3, [r1, #80]	; 0x50
 80051b8:	e001      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d044      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d4:	d01f      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80051d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051da:	d805      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e4:	d00e      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80051e6:	e01f      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80051e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051ec:	d01f      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80051ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051f2:	d01e      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80051f4:	e018      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f6:	4b47      	ldr	r3, [pc, #284]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	4a46      	ldr	r2, [pc, #280]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005202:	e017      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f001 f88e 	bl	800632c <RCCEx_PLL2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005214:	e00e      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3324      	adds	r3, #36	; 0x24
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f001 f937 	bl	8006490 <RCCEx_PLL3_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005226:	e005      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
      break;
 800522c:	e002      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800523a:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800523c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005248:	4932      	ldr	r1, [pc, #200]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800524a:	4313      	orrs	r3, r2
 800524c:	658b      	str	r3, [r1, #88]	; 0x58
 800524e:	e001      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	2b00      	cmp	r3, #0
 800525e:	d044      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800526a:	d01f      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800526c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005270:	d805      	bhi.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800527a:	d00e      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800527c:	e01f      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800527e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005282:	d01f      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005288:	d01e      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800528a:	e018      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a20      	ldr	r2, [pc, #128]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005298:	e017      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 f843 	bl	800632c <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80052aa:	e00e      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f8ec 	bl	8006490 <RCCEx_PLL3_Config>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052bc:	e005      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
      break;
 80052c2:	e002      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80052c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052d0:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052de:	490d      	ldr	r1, [pc, #52]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	658b      	str	r3, [r1, #88]	; 0x58
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d035      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d00c      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d802      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01b      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005306:	e017      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d00c      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800530c:	2b30      	cmp	r3, #48	; 0x30
 800530e:	d018      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005310:	e012      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005312:	bf00      	nop
 8005314:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005318:	4baf      	ldr	r3, [pc, #700]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	4aae      	ldr	r2, [pc, #696]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800531e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005324:	e00e      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	2102      	movs	r1, #2
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fffd 	bl	800632c <RCCEx_PLL2_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005336:	e005      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
      break;
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800534a:	4ba3      	ldr	r3, [pc, #652]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	49a0      	ldr	r1, [pc, #640]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005358:	4313      	orrs	r3, r2
 800535a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800535c:	e001      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d042      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005376:	d01f      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537c:	d805      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d00e      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005388:	e01f      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800538a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800538e:	d01f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005394:	d01e      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005396:	e018      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4b8f      	ldr	r3, [pc, #572]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	4a8e      	ldr	r2, [pc, #568]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800539e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053a4:	e017      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 ffbd 	bl	800632c <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053b6:	e00e      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3324      	adds	r3, #36	; 0x24
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 f866 	bl	8006490 <RCCEx_PLL3_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053c8:	e005      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
      break;
 80053ce:	e002      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80053d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053dc:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	497b      	ldr	r1, [pc, #492]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	650b      	str	r3, [r1, #80]	; 0x50
 80053ee:	e001      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d042      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005408:	d01b      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800540a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540e:	d805      	bhi.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d022      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800541a:	e01b      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800541c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005420:	d01d      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005422:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005426:	d01c      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005428:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800542c:	d01b      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800542e:	e011      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f000 ff78 	bl	800632c <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005440:	e012      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f821 	bl	8006490 <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005452:	e009      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	e006      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800545a:	bf00      	nop
 800545c:	e004      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800546e:	4b5a      	ldr	r3, [pc, #360]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005472:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	4957      	ldr	r1, [pc, #348]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	650b      	str	r3, [r1, #80]	; 0x50
 8005480:	e001      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
 8005484:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d044      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549c:	d01b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800549e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a2:	d805      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d022      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80054a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80054ae:	e01b      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d01d      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ba:	d01c      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80054bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054c0:	d01b      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	2101      	movs	r1, #1
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 ff2e 	bl	800632c <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054d4:	e012      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3324      	adds	r3, #36	; 0x24
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 ffd7 	bl	8006490 <RCCEx_PLL3_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054e6:	e009      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
      break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054ee:	bf00      	nop
 80054f0:	e004      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80054fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005502:	4b35      	ldr	r3, [pc, #212]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005510:	4931      	ldr	r1, [pc, #196]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005512:	4313      	orrs	r3, r2
 8005514:	658b      	str	r3, [r1, #88]	; 0x58
 8005516:	e001      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02d      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800552c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005530:	d005      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005536:	d009      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800553c:	e00f      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553e:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800554a:	e00c      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f000 feea 	bl	800632c <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800555c:	e003      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	e000      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800556c:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005578:	4917      	ldr	r1, [pc, #92]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	650b      	str	r3, [r1, #80]	; 0x50
 800557e:	e001      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d035      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	2b03      	cmp	r3, #3
 8005596:	d81b      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055dd 	.word	0x080055dd
 80055a4:	080055b1 	.word	0x080055b1
 80055a8:	080055bf 	.word	0x080055bf
 80055ac:	080055dd 	.word	0x080055dd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055bc:	e00f      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2102      	movs	r1, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 feb1 	bl	800632c <RCCEx_PLL2_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055ce:	e006      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80055d6:	bf00      	nop
 80055d8:	58024400 	.word	0x58024400
      break;
 80055dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055e4:	4bba      	ldr	r3, [pc, #744]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e8:	f023 0203 	bic.w	r2, r3, #3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	49b7      	ldr	r1, [pc, #732]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055f6:	e001      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
 80055fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8086 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800560a:	4bb2      	ldr	r3, [pc, #712]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4ab1      	ldr	r2, [pc, #708]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005616:	f7fc f9c9 	bl	80019ac <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561c:	e009      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561e:	f7fc f9c5 	bl	80019ac <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b64      	cmp	r3, #100	; 0x64
 800562a:	d902      	bls.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	75fb      	strb	r3, [r7, #23]
        break;
 8005630:	e005      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005632:	4ba8      	ldr	r3, [pc, #672]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ef      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d166      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005644:	4ba2      	ldr	r3, [pc, #648]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800564e:	4053      	eors	r3, r2
 8005650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005654:	2b00      	cmp	r3, #0
 8005656:	d013      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005658:	4b9d      	ldr	r3, [pc, #628]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005662:	4b9b      	ldr	r3, [pc, #620]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	4a9a      	ldr	r2, [pc, #616]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800566e:	4b98      	ldr	r3, [pc, #608]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a97      	ldr	r2, [pc, #604]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800567a:	4a95      	ldr	r2, [pc, #596]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568a:	d115      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc f98e 	bl	80019ac <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005692:	e00b      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fc f98a 	bl	80019ac <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d902      	bls.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	75fb      	strb	r3, [r7, #23]
            break;
 80056aa:	e005      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ac:	4b88      	ldr	r3, [pc, #544]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0ed      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d126      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056cc:	d10d      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80056ce:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056dc:	0919      	lsrs	r1, r3, #4
 80056de:	4b7e      	ldr	r3, [pc, #504]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80056e0:	400b      	ands	r3, r1
 80056e2:	497b      	ldr	r1, [pc, #492]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]
 80056e8:	e005      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80056ea:	4b79      	ldr	r3, [pc, #484]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	4a78      	ldr	r2, [pc, #480]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056f4:	6113      	str	r3, [r2, #16]
 80056f6:	4b76      	ldr	r3, [pc, #472]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005704:	4972      	ldr	r1, [pc, #456]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	670b      	str	r3, [r1, #112]	; 0x70
 800570a:	e004      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800570c:	7dfb      	ldrb	r3, [r7, #23]
 800570e:	75bb      	strb	r3, [r7, #22]
 8005710:	e001      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d07d      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005726:	2b28      	cmp	r3, #40	; 0x28
 8005728:	d866      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	080057ff 	.word	0x080057ff
 8005734:	080057f9 	.word	0x080057f9
 8005738:	080057f9 	.word	0x080057f9
 800573c:	080057f9 	.word	0x080057f9
 8005740:	080057f9 	.word	0x080057f9
 8005744:	080057f9 	.word	0x080057f9
 8005748:	080057f9 	.word	0x080057f9
 800574c:	080057f9 	.word	0x080057f9
 8005750:	080057d5 	.word	0x080057d5
 8005754:	080057f9 	.word	0x080057f9
 8005758:	080057f9 	.word	0x080057f9
 800575c:	080057f9 	.word	0x080057f9
 8005760:	080057f9 	.word	0x080057f9
 8005764:	080057f9 	.word	0x080057f9
 8005768:	080057f9 	.word	0x080057f9
 800576c:	080057f9 	.word	0x080057f9
 8005770:	080057e7 	.word	0x080057e7
 8005774:	080057f9 	.word	0x080057f9
 8005778:	080057f9 	.word	0x080057f9
 800577c:	080057f9 	.word	0x080057f9
 8005780:	080057f9 	.word	0x080057f9
 8005784:	080057f9 	.word	0x080057f9
 8005788:	080057f9 	.word	0x080057f9
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080057ff 	.word	0x080057ff
 8005794:	080057f9 	.word	0x080057f9
 8005798:	080057f9 	.word	0x080057f9
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	080057f9 	.word	0x080057f9
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	080057f9 	.word	0x080057f9
 80057ac:	080057f9 	.word	0x080057f9
 80057b0:	080057ff 	.word	0x080057ff
 80057b4:	080057f9 	.word	0x080057f9
 80057b8:	080057f9 	.word	0x080057f9
 80057bc:	080057f9 	.word	0x080057f9
 80057c0:	080057f9 	.word	0x080057f9
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	080057f9 	.word	0x080057f9
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	080057ff 	.word	0x080057ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2101      	movs	r1, #1
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fda6 	bl	800632c <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057e4:	e00c      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	2101      	movs	r1, #1
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fe4f 	bl	8006490 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80057fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005806:	4b32      	ldr	r3, [pc, #200]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005812:	492f      	ldr	r1, [pc, #188]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	654b      	str	r3, [r1, #84]	; 0x54
 8005818:	e001      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d037      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582e:	2b05      	cmp	r3, #5
 8005830:	d820      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800587b 	.word	0x0800587b
 800583c:	08005851 	.word	0x08005851
 8005840:	08005863 	.word	0x08005863
 8005844:	0800587b 	.word	0x0800587b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	0800587b 	.word	0x0800587b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	2101      	movs	r1, #1
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd68 	bl	800632c <RCCEx_PLL2_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005860:	e00c      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3324      	adds	r3, #36	; 0x24
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fe11 	bl	8006490 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
      break;
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800587a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f023 0207 	bic.w	r2, r3, #7
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	4910      	ldr	r1, [pc, #64]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	654b      	str	r3, [r1, #84]	; 0x54
 8005894:	e001      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d040      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d827      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	08005907 	.word	0x08005907
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	080058ef 	.word	0x080058ef
 80058c4:	08005907 	.word	0x08005907
 80058c8:	08005907 	.word	0x08005907
 80058cc:	08005907 	.word	0x08005907
 80058d0:	58024400 	.word	0x58024400
 80058d4:	58024800 	.word	0x58024800
 80058d8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd22 	bl	800632c <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80058ec:	e00c      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3324      	adds	r3, #36	; 0x24
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fdcb 	bl	8006490 <RCCEx_PLL3_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80058fe:	e003      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
      break;
 8005904:	e000      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800590e:	4bb2      	ldr	r3, [pc, #712]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	f023 0207 	bic.w	r2, r3, #7
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	49ae      	ldr	r1, [pc, #696]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800591e:	4313      	orrs	r3, r2
 8005920:	658b      	str	r3, [r1, #88]	; 0x58
 8005922:	e001      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d044      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593e:	d01b      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005944:	d805      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d022      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594e:	d00a      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005950:	e01b      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d01d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800595c:	d01c      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800595e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005962:	d01b      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005964:	e011      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fcdd 	bl	800632c <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005976:	e012      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3324      	adds	r3, #36	; 0x24
 800597c:	2102      	movs	r1, #2
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fd86 	bl	8006490 <RCCEx_PLL3_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005988:	e009      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	75fb      	strb	r3, [r7, #23]
      break;
 800598e:	e006      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005990:	bf00      	nop
 8005992:	e004      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005994:	bf00      	nop
 8005996:	e002      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005998:	bf00      	nop
 800599a:	e000      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800599c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a4:	4b8c      	ldr	r3, [pc, #560]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b2:	4989      	ldr	r1, [pc, #548]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	654b      	str	r3, [r1, #84]	; 0x54
 80059b8:	e001      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d044      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d4:	d01b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80059d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059da:	d805      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d022      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80059e6:	e01b      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80059e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ec:	d01d      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80059ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059f2:	d01c      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80059f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059f8:	d01b      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80059fa:	e011      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fc92 	bl	800632c <RCCEx_PLL2_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a0c:	e012      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3324      	adds	r3, #36	; 0x24
 8005a12:	2102      	movs	r1, #2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fd3b 	bl	8006490 <RCCEx_PLL3_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a1e:	e009      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	e006      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a26:	bf00      	nop
 8005a28:	e004      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a3a:	4b67      	ldr	r3, [pc, #412]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a48:	4963      	ldr	r1, [pc, #396]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a4e:	e001      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d044      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a6a:	d01b      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a70:	d805      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d022      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005a7c:	e01b      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a82:	d01d      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005a84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a88:	d01c      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005a8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a8e:	d01b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005a90:	e011      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fc47 	bl	800632c <RCCEx_PLL2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005aa2:	e012      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fcf0 	bl	8006490 <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ab4:	e009      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aba:	e006      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005abc:	bf00      	nop
 8005abe:	e004      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005ac0:	bf00      	nop
 8005ac2:	e002      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005ac4:	bf00      	nop
 8005ac6:	e000      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ad0:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ade:	493e      	ldr	r1, [pc, #248]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	658b      	str	r3, [r1, #88]	; 0x58
 8005ae4:	e001      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b00:	d10a      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3324      	adds	r3, #36	; 0x24
 8005b06:	2102      	movs	r1, #2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fcc1 	bl	8006490 <RCCEx_PLL3_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b18:	4b2f      	ldr	r3, [pc, #188]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b26:	492c      	ldr	r1, [pc, #176]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b42:	d10a      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3324      	adds	r3, #36	; 0x24
 8005b48:	2102      	movs	r1, #2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fca0 	bl	8006490 <RCCEx_PLL3_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b5a:	4b1f      	ldr	r3, [pc, #124]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b68:	491b      	ldr	r1, [pc, #108]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d032      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d00d      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8a:	d016      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d111      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fbc8 	bl	800632c <RCCEx_PLL2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ba0:	e00c      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3324      	adds	r3, #36	; 0x24
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fc71 	bl	8006490 <RCCEx_PLL3_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005bb2:	e003      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb8:	e000      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bd0:	4901      	ldr	r1, [pc, #4]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	658b      	str	r3, [r1, #88]	; 0x58
 8005bd6:	e003      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02f      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bf6:	d00c      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bfc:	d015      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c02:	d10f      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c04:	4b71      	ldr	r3, [pc, #452]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a70      	ldr	r2, [pc, #448]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c10:	e00c      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3324      	adds	r3, #36	; 0x24
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fc39 	bl	8006490 <RCCEx_PLL3_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
      break;
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c32:	4b66      	ldr	r3, [pc, #408]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c40:	4962      	ldr	r1, [pc, #392]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	654b      	str	r3, [r1, #84]	; 0x54
 8005c46:	e001      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d029      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d007      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005c66:	e00f      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b58      	ldr	r3, [pc, #352]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a57      	ldr	r2, [pc, #348]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c74:	e00b      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fb55 	bl	800632c <RCCEx_PLL2_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c86:	e002      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c94:	4b4d      	ldr	r3, [pc, #308]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca0:	494a      	ldr	r1, [pc, #296]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ca6:	e001      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3324      	adds	r3, #36	; 0x24
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fbe6 	bl	8006490 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d02f      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce2:	d00c      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce8:	d802      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d011      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005cee:	e00d      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf4:	d00f      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfa:	d00e      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfe:	4b33      	ldr	r3, [pc, #204]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a32      	ldr	r2, [pc, #200]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005d0a:	e007      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d22:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2e:	4927      	ldr	r1, [pc, #156]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	654b      	str	r3, [r1, #84]	; 0x54
 8005d34:	e001      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d46:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	491e      	ldr	r1, [pc, #120]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d64:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d70:	4916      	ldr	r1, [pc, #88]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d8c:	6113      	str	r3, [r2, #16]
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d98:	490c      	ldr	r1, [pc, #48]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da08      	bge.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db2:	4906      	ldr	r1, [pc, #24]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005db8:	7dbb      	ldrb	r3, [r7, #22]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	58024400 	.word	0x58024400

08005dd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005dd4:	f7ff f880 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005de6:	5cd3      	ldrb	r3, [r2, r3]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	58024400 	.word	0x58024400
 8005df8:	0801d024 	.word	0x0801d024

08005dfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b089      	sub	sp, #36	; 0x24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e04:	4b9d      	ldr	r3, [pc, #628]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005e0e:	4b9b      	ldr	r3, [pc, #620]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	0b1b      	lsrs	r3, r3, #12
 8005e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e1a:	4b98      	ldr	r3, [pc, #608]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	091b      	lsrs	r3, r3, #4
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005e26:	4b95      	ldr	r3, [pc, #596]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2a:	08db      	lsrs	r3, r3, #3
 8005e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 810a 	beq.w	800605e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d05a      	beq.n	8005f06 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d302      	bcc.n	8005e5a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d078      	beq.n	8005f4a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005e58:	e099      	b.n	8005f8e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e5a:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d02d      	beq.n	8005ec2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e66:	4b85      	ldr	r3, [pc, #532]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	4a83      	ldr	r2, [pc, #524]	; (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e90:	4b7a      	ldr	r3, [pc, #488]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ec0:	e087      	b.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ecc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed4:	4b69      	ldr	r3, [pc, #420]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f04:	e065      	b.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800608c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f18:	4b58      	ldr	r3, [pc, #352]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f48:	e043      	b.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006090 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5c:	4b47      	ldr	r3, [pc, #284]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f8c:	e021      	b.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800608c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa0:	4b36      	ldr	r3, [pc, #216]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fd0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	0a5b      	lsrs	r3, r3, #9
 8005fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff8:	ee17 2a90 	vmov	r2, s15
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800601a:	edd7 6a07 	vldr	s13, [r7, #28]
 800601e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006026:	ee17 2a90 	vmov	r2, s15
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	0e1b      	lsrs	r3, r3, #24
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006048:	edd7 6a07 	vldr	s13, [r7, #28]
 800604c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006054:	ee17 2a90 	vmov	r2, s15
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	3724      	adds	r7, #36	; 0x24
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	58024400 	.word	0x58024400
 8006080:	03d09000 	.word	0x03d09000
 8006084:	46000000 	.word	0x46000000
 8006088:	4c742400 	.word	0x4c742400
 800608c:	4a742400 	.word	0x4a742400
 8006090:	4af42400 	.word	0x4af42400

08006094 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800609c:	4b9d      	ldr	r3, [pc, #628]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80060a6:	4b9b      	ldr	r3, [pc, #620]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	0d1b      	lsrs	r3, r3, #20
 80060ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060b2:	4b98      	ldr	r3, [pc, #608]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80060be:	4b95      	ldr	r3, [pc, #596]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	08db      	lsrs	r3, r3, #3
 80060c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 810a 	beq.w	80062f6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d05a      	beq.n	800619e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d302      	bcc.n	80060f2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d078      	beq.n	80061e2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80060f0:	e099      	b.n	8006226 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f2:	4b88      	ldr	r3, [pc, #544]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d02d      	beq.n	800615a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060fe:	4b85      	ldr	r3, [pc, #532]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	08db      	lsrs	r3, r3, #3
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	4a83      	ldr	r2, [pc, #524]	; (8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006128:	4b7a      	ldr	r3, [pc, #488]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006138:	ed97 6a03 	vldr	s12, [r7, #12]
 800613c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006154:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006158:	e087      	b.n	800626a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616c:	4b69      	ldr	r3, [pc, #420]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006180:	eddf 5a66 	vldr	s11, [pc, #408]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006198:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800619c:	e065      	b.n	800626a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80061ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b0:	4b58      	ldr	r3, [pc, #352]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e0:	e043      	b.n	800626a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80061f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f4:	4b47      	ldr	r3, [pc, #284]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006204:	ed97 6a03 	vldr	s12, [r7, #12]
 8006208:	eddf 5a44 	vldr	s11, [pc, #272]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800620c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006224:	e021      	b.n	800626a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006238:	4b36      	ldr	r3, [pc, #216]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006248:	ed97 6a03 	vldr	s12, [r7, #12]
 800624c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006268:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800626a:	4b2a      	ldr	r3, [pc, #168]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	0a5b      	lsrs	r3, r3, #9
 8006270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006284:	edd7 6a07 	vldr	s13, [r7, #28]
 8006288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006290:	ee17 2a90 	vmov	r2, s15
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006298:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	0c1b      	lsrs	r3, r3, #16
 800629e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062be:	ee17 2a90 	vmov	r2, s15
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	0e1b      	lsrs	r3, r3, #24
 80062cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ec:	ee17 2a90 	vmov	r2, s15
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062f4:	e008      	b.n	8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
}
 8006308:	bf00      	nop
 800630a:	3724      	adds	r7, #36	; 0x24
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	58024400 	.word	0x58024400
 8006318:	03d09000 	.word	0x03d09000
 800631c:	46000000 	.word	0x46000000
 8006320:	4c742400 	.word	0x4c742400
 8006324:	4a742400 	.word	0x4a742400
 8006328:	4af42400 	.word	0x4af42400

0800632c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800633a:	4b53      	ldr	r3, [pc, #332]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d101      	bne.n	800634a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e099      	b.n	800647e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800634a:	4b4f      	ldr	r3, [pc, #316]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006356:	f7fb fb29 	bl	80019ac <HAL_GetTick>
 800635a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800635c:	e008      	b.n	8006370 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800635e:	f7fb fb25 	bl	80019ac <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e086      	b.n	800647e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006370:	4b45      	ldr	r3, [pc, #276]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800637c:	4b42      	ldr	r3, [pc, #264]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	493f      	ldr	r1, [pc, #252]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	628b      	str	r3, [r1, #40]	; 0x28
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	3b01      	subs	r3, #1
 80063a0:	025b      	lsls	r3, r3, #9
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063c0:	4931      	ldr	r1, [pc, #196]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063c6:	4b30      	ldr	r3, [pc, #192]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	492d      	ldr	r1, [pc, #180]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f023 0220 	bic.w	r2, r3, #32
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	4928      	ldr	r1, [pc, #160]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063ea:	4b27      	ldr	r3, [pc, #156]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063f0:	f023 0310 	bic.w	r3, r3, #16
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <RCCEx_PLL2_Config+0x160>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	69d2      	ldr	r2, [r2, #28]
 8006402:	00d2      	lsls	r2, r2, #3
 8006404:	4920      	ldr	r1, [pc, #128]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800640a:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006410:	f043 0310 	orr.w	r3, r3, #16
 8006414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a19      	ldr	r2, [pc, #100]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006428:	e00f      	b.n	800644a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d106      	bne.n	800643e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800643c:	e005      	b.n	800644a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a11      	ldr	r2, [pc, #68]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006456:	f7fb faa9 	bl	80019ac <HAL_GetTick>
 800645a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800645c:	e008      	b.n	8006470 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800645e:	f7fb faa5 	bl	80019ac <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e006      	b.n	800647e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	58024400 	.word	0x58024400
 800648c:	ffff0007 	.word	0xffff0007

08006490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800649e:	4b53      	ldr	r3, [pc, #332]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d101      	bne.n	80064ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e099      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ae:	4b4f      	ldr	r3, [pc, #316]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a4e      	ldr	r2, [pc, #312]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ba:	f7fb fa77 	bl	80019ac <HAL_GetTick>
 80064be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064c2:	f7fb fa73 	bl	80019ac <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e086      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064d4:	4b45      	ldr	r3, [pc, #276]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064e0:	4b42      	ldr	r3, [pc, #264]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	051b      	lsls	r3, r3, #20
 80064ee:	493f      	ldr	r1, [pc, #252]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	628b      	str	r3, [r1, #40]	; 0x28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	025b      	lsls	r3, r3, #9
 8006506:	b29b      	uxth	r3, r3
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	3b01      	subs	r3, #1
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	3b01      	subs	r3, #1
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006524:	4931      	ldr	r1, [pc, #196]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	492d      	ldr	r1, [pc, #180]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006538:	4313      	orrs	r3, r2
 800653a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800653c:	4b2b      	ldr	r3, [pc, #172]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	4928      	ldr	r1, [pc, #160]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800654e:	4b27      	ldr	r3, [pc, #156]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	4a26      	ldr	r2, [pc, #152]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800655a:	4b24      	ldr	r3, [pc, #144]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800655c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <RCCEx_PLL3_Config+0x160>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	69d2      	ldr	r2, [r2, #28]
 8006566:	00d2      	lsls	r2, r2, #3
 8006568:	4920      	ldr	r1, [pc, #128]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800656e:	4b1f      	ldr	r3, [pc, #124]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006580:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800658a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800658c:	e00f      	b.n	80065ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006594:	4b15      	ldr	r3, [pc, #84]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800659a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065a0:	e005      	b.n	80065ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ba:	f7fb f9f7 	bl	80019ac <HAL_GetTick>
 80065be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065c0:	e008      	b.n	80065d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065c2:	f7fb f9f3 	bl	80019ac <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	ffff0007 	.word	0xffff0007

080065f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e01d      	b.n	8006642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f815 	bl	800664a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f000 f986 	bl	8006944 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_TIM_Base_Start_IT+0x50>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b06      	cmp	r3, #6
 8006688:	d00b      	beq.n	80066a2 <HAL_TIM_Base_Start_IT+0x42>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d007      	beq.n	80066a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0201 	orr.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	00010007 	.word	0x00010007

080066b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d122      	bne.n	8006710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d11b      	bne.n	8006710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0202 	mvn.w	r2, #2
 80066e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f905 	bl	8006906 <HAL_TIM_IC_CaptureCallback>
 80066fc:	e005      	b.n	800670a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8f7 	bl	80068f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f908 	bl	800691a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b04      	cmp	r3, #4
 800671c:	d122      	bne.n	8006764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b04      	cmp	r3, #4
 800672a:	d11b      	bne.n	8006764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0204 	mvn.w	r2, #4
 8006734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8db 	bl	8006906 <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8cd 	bl	80068f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8de 	bl	800691a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b08      	cmp	r3, #8
 8006770:	d122      	bne.n	80067b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b08      	cmp	r3, #8
 800677e:	d11b      	bne.n	80067b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f06f 0208 	mvn.w	r2, #8
 8006788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2204      	movs	r2, #4
 800678e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f8b1 	bl	8006906 <HAL_TIM_IC_CaptureCallback>
 80067a4:	e005      	b.n	80067b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8a3 	bl	80068f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8b4 	bl	800691a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d122      	bne.n	800680c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d11b      	bne.n	800680c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0210 	mvn.w	r2, #16
 80067dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2208      	movs	r2, #8
 80067e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f887 	bl	8006906 <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f879 	bl	80068f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f88a 	bl	800691a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b01      	cmp	r3, #1
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b01      	cmp	r3, #1
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0201 	mvn.w	r2, #1
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fa fc62 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006850:	2b80      	cmp	r3, #128	; 0x80
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f914 	bl	8006a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006872:	d10e      	bne.n	8006892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d107      	bne.n	8006892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800688a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f907 	bl	8006aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d10e      	bne.n	80068be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	d107      	bne.n	80068be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f838 	bl	800692e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d10e      	bne.n	80068ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d107      	bne.n	80068ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f06f 0220 	mvn.w	r2, #32
 80068e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f8c7 	bl	8006a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a40      	ldr	r2, [pc, #256]	; (8006a58 <TIM_Base_SetConfig+0x114>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a3d      	ldr	r2, [pc, #244]	; (8006a5c <TIM_Base_SetConfig+0x118>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a3c      	ldr	r2, [pc, #240]	; (8006a60 <TIM_Base_SetConfig+0x11c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a3b      	ldr	r2, [pc, #236]	; (8006a64 <TIM_Base_SetConfig+0x120>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a3a      	ldr	r2, [pc, #232]	; (8006a68 <TIM_Base_SetConfig+0x124>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <TIM_Base_SetConfig+0x114>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01f      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d01b      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <TIM_Base_SetConfig+0x118>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d017      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <TIM_Base_SetConfig+0x11c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <TIM_Base_SetConfig+0x120>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00f      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <TIM_Base_SetConfig+0x124>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <TIM_Base_SetConfig+0x128>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <TIM_Base_SetConfig+0x12c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_Base_SetConfig+0x9a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a26      	ldr	r2, [pc, #152]	; (8006a74 <TIM_Base_SetConfig+0x130>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a10      	ldr	r2, [pc, #64]	; (8006a58 <TIM_Base_SetConfig+0x114>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00f      	beq.n	8006a3c <TIM_Base_SetConfig+0xf8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a12      	ldr	r2, [pc, #72]	; (8006a68 <TIM_Base_SetConfig+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00b      	beq.n	8006a3c <TIM_Base_SetConfig+0xf8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a11      	ldr	r2, [pc, #68]	; (8006a6c <TIM_Base_SetConfig+0x128>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_Base_SetConfig+0xf8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a10      	ldr	r2, [pc, #64]	; (8006a70 <TIM_Base_SetConfig+0x12c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_Base_SetConfig+0xf8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a0f      	ldr	r2, [pc, #60]	; (8006a74 <TIM_Base_SetConfig+0x130>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	615a      	str	r2, [r3, #20]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40010400 	.word	0x40010400
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800

08006a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e042      	b.n	8006b4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7fa fcb9 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2224      	movs	r2, #36	; 0x24
 8006ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8c2 	bl	8006c80 <UART_SetConfig>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e022      	b.n	8006b4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 fa34 	bl	8008f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f002 fabb 	bl	80090c0 <UART_CheckIdleState>
 8006b4a:	4603      	mov	r3, r0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	; 0x28
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	f040 8083 	bne.w	8006c76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_UART_Transmit+0x28>
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e07b      	b.n	8006c78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_UART_Transmit+0x3a>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e074      	b.n	8006c78 <HAL_UART_Transmit+0x124>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2221      	movs	r2, #33	; 0x21
 8006ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006ba6:	f7fa ff01 	bl	80019ac <HAL_GetTick>
 8006baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc4:	d108      	bne.n	8006bd8 <HAL_UART_Transmit+0x84>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	e003      	b.n	8006be0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006be0:	e02c      	b.n	8006c3c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	2180      	movs	r1, #128	; 0x80
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f002 faaf 	bl	8009150 <UART_WaitOnFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e03d      	b.n	8006c78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10b      	bne.n	8006c1a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	3302      	adds	r3, #2
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	e007      	b.n	8006c2a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	3301      	adds	r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1cc      	bne.n	8006be2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f002 fa7c 	bl	8009150 <UART_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00a      	b.n	8006c78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e000      	b.n	8006c78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006c76:	2302      	movs	r3, #2
  }
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006c84:	b090      	sub	sp, #64	; 0x40
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	4bc1      	ldr	r3, [pc, #772]	; (8006fc8 <UART_SetConfig+0x348>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4ab7      	ldr	r2, [pc, #732]	; (8006fcc <UART_SetConfig+0x34c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	4bb2      	ldr	r3, [pc, #712]	; (8006fd0 <UART_SetConfig+0x350>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	f023 010f 	bic.w	r1, r3, #15
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4aa9      	ldr	r2, [pc, #676]	; (8006fd4 <UART_SetConfig+0x354>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d177      	bne.n	8006e22 <UART_SetConfig+0x1a2>
 8006d32:	4ba9      	ldr	r3, [pc, #676]	; (8006fd8 <UART_SetConfig+0x358>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d3a:	2b28      	cmp	r3, #40	; 0x28
 8006d3c:	d86c      	bhi.n	8006e18 <UART_SetConfig+0x198>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0xc4>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006de9 	.word	0x08006de9
 8006d48:	08006e19 	.word	0x08006e19
 8006d4c:	08006e19 	.word	0x08006e19
 8006d50:	08006e19 	.word	0x08006e19
 8006d54:	08006e19 	.word	0x08006e19
 8006d58:	08006e19 	.word	0x08006e19
 8006d5c:	08006e19 	.word	0x08006e19
 8006d60:	08006e19 	.word	0x08006e19
 8006d64:	08006df1 	.word	0x08006df1
 8006d68:	08006e19 	.word	0x08006e19
 8006d6c:	08006e19 	.word	0x08006e19
 8006d70:	08006e19 	.word	0x08006e19
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006e19 	.word	0x08006e19
 8006d7c:	08006e19 	.word	0x08006e19
 8006d80:	08006e19 	.word	0x08006e19
 8006d84:	08006df9 	.word	0x08006df9
 8006d88:	08006e19 	.word	0x08006e19
 8006d8c:	08006e19 	.word	0x08006e19
 8006d90:	08006e19 	.word	0x08006e19
 8006d94:	08006e19 	.word	0x08006e19
 8006d98:	08006e19 	.word	0x08006e19
 8006d9c:	08006e19 	.word	0x08006e19
 8006da0:	08006e19 	.word	0x08006e19
 8006da4:	08006e01 	.word	0x08006e01
 8006da8:	08006e19 	.word	0x08006e19
 8006dac:	08006e19 	.word	0x08006e19
 8006db0:	08006e19 	.word	0x08006e19
 8006db4:	08006e19 	.word	0x08006e19
 8006db8:	08006e19 	.word	0x08006e19
 8006dbc:	08006e19 	.word	0x08006e19
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e09 	.word	0x08006e09
 8006dc8:	08006e19 	.word	0x08006e19
 8006dcc:	08006e19 	.word	0x08006e19
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e19 	.word	0x08006e19
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dee:	e233      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006df6:	e22f      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dfe:	e22b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e06:	e227      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e08:	2320      	movs	r3, #32
 8006e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e0e:	e223      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e10:	2340      	movs	r3, #64	; 0x40
 8006e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e16:	e21f      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e1e:	bf00      	nop
 8006e20:	e21a      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a6d      	ldr	r2, [pc, #436]	; (8006fdc <UART_SetConfig+0x35c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d132      	bne.n	8006e92 <UART_SetConfig+0x212>
 8006e2c:	4b6a      	ldr	r3, [pc, #424]	; (8006fd8 <UART_SetConfig+0x358>)
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	2b05      	cmp	r3, #5
 8006e36:	d827      	bhi.n	8006e88 <UART_SetConfig+0x208>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <UART_SetConfig+0x1c0>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e59 	.word	0x08006e59
 8006e44:	08006e61 	.word	0x08006e61
 8006e48:	08006e69 	.word	0x08006e69
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e81 	.word	0x08006e81
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e5e:	e1fb      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e66:	e1f7      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e6e:	e1f3      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e76:	e1ef      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e7e:	e1eb      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e86:	e1e7      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e8e:	bf00      	nop
 8006e90:	e1e2      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a52      	ldr	r2, [pc, #328]	; (8006fe0 <UART_SetConfig+0x360>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d132      	bne.n	8006f02 <UART_SetConfig+0x282>
 8006e9c:	4b4e      	ldr	r3, [pc, #312]	; (8006fd8 <UART_SetConfig+0x358>)
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	2b05      	cmp	r3, #5
 8006ea6:	d827      	bhi.n	8006ef8 <UART_SetConfig+0x278>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x230>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ec9 	.word	0x08006ec9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ed9 	.word	0x08006ed9
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ece:	e1c3      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ed6:	e1bf      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ede:	e1bb      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ee6:	e1b7      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eee:	e1b3      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ef6:	e1af      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006efe:	bf00      	nop
 8006f00:	e1aa      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a37      	ldr	r2, [pc, #220]	; (8006fe4 <UART_SetConfig+0x364>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d132      	bne.n	8006f72 <UART_SetConfig+0x2f2>
 8006f0c:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <UART_SetConfig+0x358>)
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	2b05      	cmp	r3, #5
 8006f16:	d827      	bhi.n	8006f68 <UART_SetConfig+0x2e8>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0x2a0>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f39 	.word	0x08006f39
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f49 	.word	0x08006f49
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f3e:	e18b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f46:	e187      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f4e:	e183      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f56:	e17f      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f58:	2320      	movs	r3, #32
 8006f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f5e:	e17b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f60:	2340      	movs	r3, #64	; 0x40
 8006f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f66:	e177      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f6e:	bf00      	nop
 8006f70:	e172      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <UART_SetConfig+0x368>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d144      	bne.n	8007006 <UART_SetConfig+0x386>
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <UART_SetConfig+0x358>)
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d839      	bhi.n	8006ffc <UART_SetConfig+0x37c>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <UART_SetConfig+0x310>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fa9 	.word	0x08006fa9
 8006f94:	08006fb1 	.word	0x08006fb1
 8006f98:	08006fb9 	.word	0x08006fb9
 8006f9c:	08006fc1 	.word	0x08006fc1
 8006fa0:	08006fed 	.word	0x08006fed
 8006fa4:	08006ff5 	.word	0x08006ff5
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fae:	e153      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fb6:	e14f      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fbe:	e14b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fc6:	e147      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006fc8:	cfff69f3 	.word	0xcfff69f3
 8006fcc:	58000c00 	.word	0x58000c00
 8006fd0:	11fff4ff 	.word	0x11fff4ff
 8006fd4:	40011000 	.word	0x40011000
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	40004400 	.word	0x40004400
 8006fe0:	40004800 	.word	0x40004800
 8006fe4:	40004c00 	.word	0x40004c00
 8006fe8:	40005000 	.word	0x40005000
 8006fec:	2320      	movs	r3, #32
 8006fee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ff2:	e131      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ff4:	2340      	movs	r3, #64	; 0x40
 8006ff6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ffa:	e12d      	b.n	8007258 <UART_SetConfig+0x5d8>
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007002:	bf00      	nop
 8007004:	e128      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4ac3      	ldr	r2, [pc, #780]	; (8007318 <UART_SetConfig+0x698>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d178      	bne.n	8007102 <UART_SetConfig+0x482>
 8007010:	4bc2      	ldr	r3, [pc, #776]	; (800731c <UART_SetConfig+0x69c>)
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007018:	2b28      	cmp	r3, #40	; 0x28
 800701a:	d86d      	bhi.n	80070f8 <UART_SetConfig+0x478>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0x3a4>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	080070c9 	.word	0x080070c9
 8007028:	080070f9 	.word	0x080070f9
 800702c:	080070f9 	.word	0x080070f9
 8007030:	080070f9 	.word	0x080070f9
 8007034:	080070f9 	.word	0x080070f9
 8007038:	080070f9 	.word	0x080070f9
 800703c:	080070f9 	.word	0x080070f9
 8007040:	080070f9 	.word	0x080070f9
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070f9 	.word	0x080070f9
 800704c:	080070f9 	.word	0x080070f9
 8007050:	080070f9 	.word	0x080070f9
 8007054:	080070f9 	.word	0x080070f9
 8007058:	080070f9 	.word	0x080070f9
 800705c:	080070f9 	.word	0x080070f9
 8007060:	080070f9 	.word	0x080070f9
 8007064:	080070d9 	.word	0x080070d9
 8007068:	080070f9 	.word	0x080070f9
 800706c:	080070f9 	.word	0x080070f9
 8007070:	080070f9 	.word	0x080070f9
 8007074:	080070f9 	.word	0x080070f9
 8007078:	080070f9 	.word	0x080070f9
 800707c:	080070f9 	.word	0x080070f9
 8007080:	080070f9 	.word	0x080070f9
 8007084:	080070e1 	.word	0x080070e1
 8007088:	080070f9 	.word	0x080070f9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080070f9 	.word	0x080070f9
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080070f9 	.word	0x080070f9
 800709c:	080070f9 	.word	0x080070f9
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070f9 	.word	0x080070f9
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070f9 	.word	0x080070f9
 80070b4:	080070f9 	.word	0x080070f9
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070ce:	e0c3      	b.n	8007258 <UART_SetConfig+0x5d8>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070d6:	e0bf      	b.n	8007258 <UART_SetConfig+0x5d8>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070de:	e0bb      	b.n	8007258 <UART_SetConfig+0x5d8>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070e6:	e0b7      	b.n	8007258 <UART_SetConfig+0x5d8>
 80070e8:	2320      	movs	r3, #32
 80070ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070ee:	e0b3      	b.n	8007258 <UART_SetConfig+0x5d8>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070f6:	e0af      	b.n	8007258 <UART_SetConfig+0x5d8>
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070fe:	bf00      	nop
 8007100:	e0aa      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a86      	ldr	r2, [pc, #536]	; (8007320 <UART_SetConfig+0x6a0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d132      	bne.n	8007172 <UART_SetConfig+0x4f2>
 800710c:	4b83      	ldr	r3, [pc, #524]	; (800731c <UART_SetConfig+0x69c>)
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	2b05      	cmp	r3, #5
 8007116:	d827      	bhi.n	8007168 <UART_SetConfig+0x4e8>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <UART_SetConfig+0x4a0>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007139 	.word	0x08007139
 8007124:	08007141 	.word	0x08007141
 8007128:	08007149 	.word	0x08007149
 800712c:	08007151 	.word	0x08007151
 8007130:	08007159 	.word	0x08007159
 8007134:	08007161 	.word	0x08007161
 8007138:	2300      	movs	r3, #0
 800713a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800713e:	e08b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007146:	e087      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800714e:	e083      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007156:	e07f      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007158:	2320      	movs	r3, #32
 800715a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800715e:	e07b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007166:	e077      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800716e:	bf00      	nop
 8007170:	e072      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a6b      	ldr	r2, [pc, #428]	; (8007324 <UART_SetConfig+0x6a4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d132      	bne.n	80071e2 <UART_SetConfig+0x562>
 800717c:	4b67      	ldr	r3, [pc, #412]	; (800731c <UART_SetConfig+0x69c>)
 800717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	2b05      	cmp	r3, #5
 8007186:	d827      	bhi.n	80071d8 <UART_SetConfig+0x558>
 8007188:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0x510>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071b9 	.word	0x080071b9
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071ae:	e053      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071b0:	2304      	movs	r3, #4
 80071b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071b6:	e04f      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071b8:	2308      	movs	r3, #8
 80071ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071be:	e04b      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071c0:	2310      	movs	r3, #16
 80071c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071c6:	e047      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071c8:	2320      	movs	r3, #32
 80071ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071ce:	e043      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071d6:	e03f      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071de:	bf00      	nop
 80071e0:	e03a      	b.n	8007258 <UART_SetConfig+0x5d8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a50      	ldr	r2, [pc, #320]	; (8007328 <UART_SetConfig+0x6a8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d132      	bne.n	8007252 <UART_SetConfig+0x5d2>
 80071ec:	4b4b      	ldr	r3, [pc, #300]	; (800731c <UART_SetConfig+0x69c>)
 80071ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d827      	bhi.n	8007248 <UART_SetConfig+0x5c8>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x580>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007219 	.word	0x08007219
 8007204:	08007221 	.word	0x08007221
 8007208:	08007229 	.word	0x08007229
 800720c:	08007231 	.word	0x08007231
 8007210:	08007239 	.word	0x08007239
 8007214:	08007241 	.word	0x08007241
 8007218:	2302      	movs	r3, #2
 800721a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800721e:	e01b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007226:	e017      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800722e:	e013      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007236:	e00f      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007238:	2320      	movs	r3, #32
 800723a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800723e:	e00b      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007240:	2340      	movs	r3, #64	; 0x40
 8007242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007246:	e007      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800724e:	bf00      	nop
 8007250:	e002      	b.n	8007258 <UART_SetConfig+0x5d8>
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a32      	ldr	r2, [pc, #200]	; (8007328 <UART_SetConfig+0x6a8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	f040 86f7 	bne.w	8008052 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007264:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007268:	2b08      	cmp	r3, #8
 800726a:	f000 80c0 	beq.w	80073ee <UART_SetConfig+0x76e>
 800726e:	2b08      	cmp	r3, #8
 8007270:	dc04      	bgt.n	800727c <UART_SetConfig+0x5fc>
 8007272:	2b02      	cmp	r3, #2
 8007274:	d00c      	beq.n	8007290 <UART_SetConfig+0x610>
 8007276:	2b04      	cmp	r3, #4
 8007278:	d065      	beq.n	8007346 <UART_SetConfig+0x6c6>
 800727a:	e27a      	b.n	8007772 <UART_SetConfig+0xaf2>
 800727c:	2b20      	cmp	r3, #32
 800727e:	f000 81b0 	beq.w	80075e2 <UART_SetConfig+0x962>
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	f000 821e 	beq.w	80076c4 <UART_SetConfig+0xa44>
 8007288:	2b10      	cmp	r3, #16
 800728a:	f000 8104 	beq.w	8007496 <UART_SetConfig+0x816>
 800728e:	e270      	b.n	8007772 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007290:	f7fe fd9e 	bl	8005dd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007294:	4602      	mov	r2, r0
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d04e      	beq.n	800733c <UART_SetConfig+0x6bc>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d048      	beq.n	8007338 <UART_SetConfig+0x6b8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d042      	beq.n	8007334 <UART_SetConfig+0x6b4>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d03c      	beq.n	8007330 <UART_SetConfig+0x6b0>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d036      	beq.n	800732c <UART_SetConfig+0x6ac>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d026      	beq.n	8007314 <UART_SetConfig+0x694>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b06      	cmp	r3, #6
 80072cc:	d020      	beq.n	8007310 <UART_SetConfig+0x690>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b07      	cmp	r3, #7
 80072d4:	d01a      	beq.n	800730c <UART_SetConfig+0x68c>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d014      	beq.n	8007308 <UART_SetConfig+0x688>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d00e      	beq.n	8007304 <UART_SetConfig+0x684>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b0a      	cmp	r3, #10
 80072ec:	d008      	beq.n	8007300 <UART_SetConfig+0x680>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b0b      	cmp	r3, #11
 80072f4:	d102      	bne.n	80072fc <UART_SetConfig+0x67c>
 80072f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fa:	e020      	b.n	800733e <UART_SetConfig+0x6be>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e01e      	b.n	800733e <UART_SetConfig+0x6be>
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	e01c      	b.n	800733e <UART_SetConfig+0x6be>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	e01a      	b.n	800733e <UART_SetConfig+0x6be>
 8007308:	2320      	movs	r3, #32
 800730a:	e018      	b.n	800733e <UART_SetConfig+0x6be>
 800730c:	2310      	movs	r3, #16
 800730e:	e016      	b.n	800733e <UART_SetConfig+0x6be>
 8007310:	230c      	movs	r3, #12
 8007312:	e014      	b.n	800733e <UART_SetConfig+0x6be>
 8007314:	230a      	movs	r3, #10
 8007316:	e012      	b.n	800733e <UART_SetConfig+0x6be>
 8007318:	40011400 	.word	0x40011400
 800731c:	58024400 	.word	0x58024400
 8007320:	40007800 	.word	0x40007800
 8007324:	40007c00 	.word	0x40007c00
 8007328:	58000c00 	.word	0x58000c00
 800732c:	2308      	movs	r3, #8
 800732e:	e006      	b.n	800733e <UART_SetConfig+0x6be>
 8007330:	2306      	movs	r3, #6
 8007332:	e004      	b.n	800733e <UART_SetConfig+0x6be>
 8007334:	2304      	movs	r3, #4
 8007336:	e002      	b.n	800733e <UART_SetConfig+0x6be>
 8007338:	2302      	movs	r3, #2
 800733a:	e000      	b.n	800733e <UART_SetConfig+0x6be>
 800733c:	2301      	movs	r3, #1
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007344:	e219      	b.n	800777a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007346:	f107 0318 	add.w	r3, r7, #24
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fd56 	bl	8005dfc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d044      	beq.n	80073e4 <UART_SetConfig+0x764>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b01      	cmp	r3, #1
 8007360:	d03e      	beq.n	80073e0 <UART_SetConfig+0x760>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	2b02      	cmp	r3, #2
 8007368:	d038      	beq.n	80073dc <UART_SetConfig+0x75c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2b03      	cmp	r3, #3
 8007370:	d032      	beq.n	80073d8 <UART_SetConfig+0x758>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	2b04      	cmp	r3, #4
 8007378:	d02c      	beq.n	80073d4 <UART_SetConfig+0x754>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b05      	cmp	r3, #5
 8007380:	d026      	beq.n	80073d0 <UART_SetConfig+0x750>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b06      	cmp	r3, #6
 8007388:	d020      	beq.n	80073cc <UART_SetConfig+0x74c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b07      	cmp	r3, #7
 8007390:	d01a      	beq.n	80073c8 <UART_SetConfig+0x748>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b08      	cmp	r3, #8
 8007398:	d014      	beq.n	80073c4 <UART_SetConfig+0x744>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b09      	cmp	r3, #9
 80073a0:	d00e      	beq.n	80073c0 <UART_SetConfig+0x740>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b0a      	cmp	r3, #10
 80073a8:	d008      	beq.n	80073bc <UART_SetConfig+0x73c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b0b      	cmp	r3, #11
 80073b0:	d102      	bne.n	80073b8 <UART_SetConfig+0x738>
 80073b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073b6:	e016      	b.n	80073e6 <UART_SetConfig+0x766>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e014      	b.n	80073e6 <UART_SetConfig+0x766>
 80073bc:	2380      	movs	r3, #128	; 0x80
 80073be:	e012      	b.n	80073e6 <UART_SetConfig+0x766>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	e010      	b.n	80073e6 <UART_SetConfig+0x766>
 80073c4:	2320      	movs	r3, #32
 80073c6:	e00e      	b.n	80073e6 <UART_SetConfig+0x766>
 80073c8:	2310      	movs	r3, #16
 80073ca:	e00c      	b.n	80073e6 <UART_SetConfig+0x766>
 80073cc:	230c      	movs	r3, #12
 80073ce:	e00a      	b.n	80073e6 <UART_SetConfig+0x766>
 80073d0:	230a      	movs	r3, #10
 80073d2:	e008      	b.n	80073e6 <UART_SetConfig+0x766>
 80073d4:	2308      	movs	r3, #8
 80073d6:	e006      	b.n	80073e6 <UART_SetConfig+0x766>
 80073d8:	2306      	movs	r3, #6
 80073da:	e004      	b.n	80073e6 <UART_SetConfig+0x766>
 80073dc:	2304      	movs	r3, #4
 80073de:	e002      	b.n	80073e6 <UART_SetConfig+0x766>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e000      	b.n	80073e6 <UART_SetConfig+0x766>
 80073e4:	2301      	movs	r3, #1
 80073e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073ec:	e1c5      	b.n	800777a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ee:	f107 030c 	add.w	r3, r7, #12
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fe4e 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d044      	beq.n	800748c <UART_SetConfig+0x80c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2b01      	cmp	r3, #1
 8007408:	d03e      	beq.n	8007488 <UART_SetConfig+0x808>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	2b02      	cmp	r3, #2
 8007410:	d038      	beq.n	8007484 <UART_SetConfig+0x804>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	2b03      	cmp	r3, #3
 8007418:	d032      	beq.n	8007480 <UART_SetConfig+0x800>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	2b04      	cmp	r3, #4
 8007420:	d02c      	beq.n	800747c <UART_SetConfig+0x7fc>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b05      	cmp	r3, #5
 8007428:	d026      	beq.n	8007478 <UART_SetConfig+0x7f8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b06      	cmp	r3, #6
 8007430:	d020      	beq.n	8007474 <UART_SetConfig+0x7f4>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b07      	cmp	r3, #7
 8007438:	d01a      	beq.n	8007470 <UART_SetConfig+0x7f0>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b08      	cmp	r3, #8
 8007440:	d014      	beq.n	800746c <UART_SetConfig+0x7ec>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b09      	cmp	r3, #9
 8007448:	d00e      	beq.n	8007468 <UART_SetConfig+0x7e8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b0a      	cmp	r3, #10
 8007450:	d008      	beq.n	8007464 <UART_SetConfig+0x7e4>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b0b      	cmp	r3, #11
 8007458:	d102      	bne.n	8007460 <UART_SetConfig+0x7e0>
 800745a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745e:	e016      	b.n	800748e <UART_SetConfig+0x80e>
 8007460:	2301      	movs	r3, #1
 8007462:	e014      	b.n	800748e <UART_SetConfig+0x80e>
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	e012      	b.n	800748e <UART_SetConfig+0x80e>
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	e010      	b.n	800748e <UART_SetConfig+0x80e>
 800746c:	2320      	movs	r3, #32
 800746e:	e00e      	b.n	800748e <UART_SetConfig+0x80e>
 8007470:	2310      	movs	r3, #16
 8007472:	e00c      	b.n	800748e <UART_SetConfig+0x80e>
 8007474:	230c      	movs	r3, #12
 8007476:	e00a      	b.n	800748e <UART_SetConfig+0x80e>
 8007478:	230a      	movs	r3, #10
 800747a:	e008      	b.n	800748e <UART_SetConfig+0x80e>
 800747c:	2308      	movs	r3, #8
 800747e:	e006      	b.n	800748e <UART_SetConfig+0x80e>
 8007480:	2306      	movs	r3, #6
 8007482:	e004      	b.n	800748e <UART_SetConfig+0x80e>
 8007484:	2304      	movs	r3, #4
 8007486:	e002      	b.n	800748e <UART_SetConfig+0x80e>
 8007488:	2302      	movs	r3, #2
 800748a:	e000      	b.n	800748e <UART_SetConfig+0x80e>
 800748c:	2301      	movs	r3, #1
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007494:	e171      	b.n	800777a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007496:	4b7a      	ldr	r3, [pc, #488]	; (8007680 <UART_SetConfig+0xa00>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d054      	beq.n	800754c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074a2:	4b77      	ldr	r3, [pc, #476]	; (8007680 <UART_SetConfig+0xa00>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	4a75      	ldr	r2, [pc, #468]	; (8007684 <UART_SetConfig+0xa04>)
 80074ae:	40da      	lsrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d044      	beq.n	8007542 <UART_SetConfig+0x8c2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d03e      	beq.n	800753e <UART_SetConfig+0x8be>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d038      	beq.n	800753a <UART_SetConfig+0x8ba>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d032      	beq.n	8007536 <UART_SetConfig+0x8b6>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d02c      	beq.n	8007532 <UART_SetConfig+0x8b2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d026      	beq.n	800752e <UART_SetConfig+0x8ae>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d020      	beq.n	800752a <UART_SetConfig+0x8aa>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b07      	cmp	r3, #7
 80074ee:	d01a      	beq.n	8007526 <UART_SetConfig+0x8a6>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d014      	beq.n	8007522 <UART_SetConfig+0x8a2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d00e      	beq.n	800751e <UART_SetConfig+0x89e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b0a      	cmp	r3, #10
 8007506:	d008      	beq.n	800751a <UART_SetConfig+0x89a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b0b      	cmp	r3, #11
 800750e:	d102      	bne.n	8007516 <UART_SetConfig+0x896>
 8007510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007514:	e016      	b.n	8007544 <UART_SetConfig+0x8c4>
 8007516:	2301      	movs	r3, #1
 8007518:	e014      	b.n	8007544 <UART_SetConfig+0x8c4>
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	e012      	b.n	8007544 <UART_SetConfig+0x8c4>
 800751e:	2340      	movs	r3, #64	; 0x40
 8007520:	e010      	b.n	8007544 <UART_SetConfig+0x8c4>
 8007522:	2320      	movs	r3, #32
 8007524:	e00e      	b.n	8007544 <UART_SetConfig+0x8c4>
 8007526:	2310      	movs	r3, #16
 8007528:	e00c      	b.n	8007544 <UART_SetConfig+0x8c4>
 800752a:	230c      	movs	r3, #12
 800752c:	e00a      	b.n	8007544 <UART_SetConfig+0x8c4>
 800752e:	230a      	movs	r3, #10
 8007530:	e008      	b.n	8007544 <UART_SetConfig+0x8c4>
 8007532:	2308      	movs	r3, #8
 8007534:	e006      	b.n	8007544 <UART_SetConfig+0x8c4>
 8007536:	2306      	movs	r3, #6
 8007538:	e004      	b.n	8007544 <UART_SetConfig+0x8c4>
 800753a:	2304      	movs	r3, #4
 800753c:	e002      	b.n	8007544 <UART_SetConfig+0x8c4>
 800753e:	2302      	movs	r3, #2
 8007540:	e000      	b.n	8007544 <UART_SetConfig+0x8c4>
 8007542:	2301      	movs	r3, #1
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800754a:	e116      	b.n	800777a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d043      	beq.n	80075dc <UART_SetConfig+0x95c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b01      	cmp	r3, #1
 800755a:	d03d      	beq.n	80075d8 <UART_SetConfig+0x958>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b02      	cmp	r3, #2
 8007562:	d037      	beq.n	80075d4 <UART_SetConfig+0x954>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2b03      	cmp	r3, #3
 800756a:	d031      	beq.n	80075d0 <UART_SetConfig+0x950>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b04      	cmp	r3, #4
 8007572:	d02b      	beq.n	80075cc <UART_SetConfig+0x94c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b05      	cmp	r3, #5
 800757a:	d025      	beq.n	80075c8 <UART_SetConfig+0x948>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2b06      	cmp	r3, #6
 8007582:	d01f      	beq.n	80075c4 <UART_SetConfig+0x944>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b07      	cmp	r3, #7
 800758a:	d019      	beq.n	80075c0 <UART_SetConfig+0x940>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b08      	cmp	r3, #8
 8007592:	d013      	beq.n	80075bc <UART_SetConfig+0x93c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b09      	cmp	r3, #9
 800759a:	d00d      	beq.n	80075b8 <UART_SetConfig+0x938>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b0a      	cmp	r3, #10
 80075a2:	d007      	beq.n	80075b4 <UART_SetConfig+0x934>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b0b      	cmp	r3, #11
 80075aa:	d101      	bne.n	80075b0 <UART_SetConfig+0x930>
 80075ac:	4b36      	ldr	r3, [pc, #216]	; (8007688 <UART_SetConfig+0xa08>)
 80075ae:	e016      	b.n	80075de <UART_SetConfig+0x95e>
 80075b0:	4b34      	ldr	r3, [pc, #208]	; (8007684 <UART_SetConfig+0xa04>)
 80075b2:	e014      	b.n	80075de <UART_SetConfig+0x95e>
 80075b4:	4b35      	ldr	r3, [pc, #212]	; (800768c <UART_SetConfig+0xa0c>)
 80075b6:	e012      	b.n	80075de <UART_SetConfig+0x95e>
 80075b8:	4b35      	ldr	r3, [pc, #212]	; (8007690 <UART_SetConfig+0xa10>)
 80075ba:	e010      	b.n	80075de <UART_SetConfig+0x95e>
 80075bc:	4b35      	ldr	r3, [pc, #212]	; (8007694 <UART_SetConfig+0xa14>)
 80075be:	e00e      	b.n	80075de <UART_SetConfig+0x95e>
 80075c0:	4b35      	ldr	r3, [pc, #212]	; (8007698 <UART_SetConfig+0xa18>)
 80075c2:	e00c      	b.n	80075de <UART_SetConfig+0x95e>
 80075c4:	4b35      	ldr	r3, [pc, #212]	; (800769c <UART_SetConfig+0xa1c>)
 80075c6:	e00a      	b.n	80075de <UART_SetConfig+0x95e>
 80075c8:	4b35      	ldr	r3, [pc, #212]	; (80076a0 <UART_SetConfig+0xa20>)
 80075ca:	e008      	b.n	80075de <UART_SetConfig+0x95e>
 80075cc:	4b35      	ldr	r3, [pc, #212]	; (80076a4 <UART_SetConfig+0xa24>)
 80075ce:	e006      	b.n	80075de <UART_SetConfig+0x95e>
 80075d0:	4b35      	ldr	r3, [pc, #212]	; (80076a8 <UART_SetConfig+0xa28>)
 80075d2:	e004      	b.n	80075de <UART_SetConfig+0x95e>
 80075d4:	4b35      	ldr	r3, [pc, #212]	; (80076ac <UART_SetConfig+0xa2c>)
 80075d6:	e002      	b.n	80075de <UART_SetConfig+0x95e>
 80075d8:	4b35      	ldr	r3, [pc, #212]	; (80076b0 <UART_SetConfig+0xa30>)
 80075da:	e000      	b.n	80075de <UART_SetConfig+0x95e>
 80075dc:	4b29      	ldr	r3, [pc, #164]	; (8007684 <UART_SetConfig+0xa04>)
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075e0:	e0cb      	b.n	800777a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d046      	beq.n	8007678 <UART_SetConfig+0x9f8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d040      	beq.n	8007674 <UART_SetConfig+0x9f4>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d03a      	beq.n	8007670 <UART_SetConfig+0x9f0>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d034      	beq.n	800766c <UART_SetConfig+0x9ec>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b04      	cmp	r3, #4
 8007608:	d02e      	beq.n	8007668 <UART_SetConfig+0x9e8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b05      	cmp	r3, #5
 8007610:	d028      	beq.n	8007664 <UART_SetConfig+0x9e4>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b06      	cmp	r3, #6
 8007618:	d022      	beq.n	8007660 <UART_SetConfig+0x9e0>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b07      	cmp	r3, #7
 8007620:	d01c      	beq.n	800765c <UART_SetConfig+0x9dc>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b08      	cmp	r3, #8
 8007628:	d016      	beq.n	8007658 <UART_SetConfig+0x9d8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b09      	cmp	r3, #9
 8007630:	d00f      	beq.n	8007652 <UART_SetConfig+0x9d2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b0a      	cmp	r3, #10
 8007638:	d008      	beq.n	800764c <UART_SetConfig+0x9cc>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b0b      	cmp	r3, #11
 8007640:	d102      	bne.n	8007648 <UART_SetConfig+0x9c8>
 8007642:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007646:	e018      	b.n	800767a <UART_SetConfig+0x9fa>
 8007648:	4b13      	ldr	r3, [pc, #76]	; (8007698 <UART_SetConfig+0xa18>)
 800764a:	e016      	b.n	800767a <UART_SetConfig+0x9fa>
 800764c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007650:	e013      	b.n	800767a <UART_SetConfig+0x9fa>
 8007652:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007656:	e010      	b.n	800767a <UART_SetConfig+0x9fa>
 8007658:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <UART_SetConfig+0xa34>)
 800765a:	e00e      	b.n	800767a <UART_SetConfig+0x9fa>
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <UART_SetConfig+0xa08>)
 800765e:	e00c      	b.n	800767a <UART_SetConfig+0x9fa>
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <UART_SetConfig+0xa38>)
 8007662:	e00a      	b.n	800767a <UART_SetConfig+0x9fa>
 8007664:	4b15      	ldr	r3, [pc, #84]	; (80076bc <UART_SetConfig+0xa3c>)
 8007666:	e008      	b.n	800767a <UART_SetConfig+0x9fa>
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <UART_SetConfig+0xa0c>)
 800766a:	e006      	b.n	800767a <UART_SetConfig+0x9fa>
 800766c:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <UART_SetConfig+0xa40>)
 800766e:	e004      	b.n	800767a <UART_SetConfig+0x9fa>
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <UART_SetConfig+0xa10>)
 8007672:	e002      	b.n	800767a <UART_SetConfig+0x9fa>
 8007674:	4b07      	ldr	r3, [pc, #28]	; (8007694 <UART_SetConfig+0xa14>)
 8007676:	e000      	b.n	800767a <UART_SetConfig+0x9fa>
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <UART_SetConfig+0xa18>)
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800767c:	e07d      	b.n	800777a <UART_SetConfig+0xafa>
 800767e:	bf00      	nop
 8007680:	58024400 	.word	0x58024400
 8007684:	03d09000 	.word	0x03d09000
 8007688:	0003d090 	.word	0x0003d090
 800768c:	0007a120 	.word	0x0007a120
 8007690:	000f4240 	.word	0x000f4240
 8007694:	001e8480 	.word	0x001e8480
 8007698:	003d0900 	.word	0x003d0900
 800769c:	00516155 	.word	0x00516155
 80076a0:	0061a800 	.word	0x0061a800
 80076a4:	007a1200 	.word	0x007a1200
 80076a8:	00a2c2aa 	.word	0x00a2c2aa
 80076ac:	00f42400 	.word	0x00f42400
 80076b0:	01e84800 	.word	0x01e84800
 80076b4:	0001e848 	.word	0x0001e848
 80076b8:	00051615 	.word	0x00051615
 80076bc:	00061a80 	.word	0x00061a80
 80076c0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d04e      	beq.n	800776a <UART_SetConfig+0xaea>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d047      	beq.n	8007764 <UART_SetConfig+0xae4>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d040      	beq.n	800775e <UART_SetConfig+0xade>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d039      	beq.n	8007758 <UART_SetConfig+0xad8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d032      	beq.n	8007752 <UART_SetConfig+0xad2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b05      	cmp	r3, #5
 80076f2:	d02b      	beq.n	800774c <UART_SetConfig+0xacc>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	d024      	beq.n	8007746 <UART_SetConfig+0xac6>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	2b07      	cmp	r3, #7
 8007702:	d01d      	beq.n	8007740 <UART_SetConfig+0xac0>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b08      	cmp	r3, #8
 800770a:	d016      	beq.n	800773a <UART_SetConfig+0xaba>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b09      	cmp	r3, #9
 8007712:	d00f      	beq.n	8007734 <UART_SetConfig+0xab4>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b0a      	cmp	r3, #10
 800771a:	d008      	beq.n	800772e <UART_SetConfig+0xaae>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b0b      	cmp	r3, #11
 8007722:	d101      	bne.n	8007728 <UART_SetConfig+0xaa8>
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	e022      	b.n	800776e <UART_SetConfig+0xaee>
 8007728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772c:	e01f      	b.n	800776e <UART_SetConfig+0xaee>
 800772e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007732:	e01c      	b.n	800776e <UART_SetConfig+0xaee>
 8007734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007738:	e019      	b.n	800776e <UART_SetConfig+0xaee>
 800773a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773e:	e016      	b.n	800776e <UART_SetConfig+0xaee>
 8007740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007744:	e013      	b.n	800776e <UART_SetConfig+0xaee>
 8007746:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800774a:	e010      	b.n	800776e <UART_SetConfig+0xaee>
 800774c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007750:	e00d      	b.n	800776e <UART_SetConfig+0xaee>
 8007752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007756:	e00a      	b.n	800776e <UART_SetConfig+0xaee>
 8007758:	f241 5355 	movw	r3, #5461	; 0x1555
 800775c:	e007      	b.n	800776e <UART_SetConfig+0xaee>
 800775e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007762:	e004      	b.n	800776e <UART_SetConfig+0xaee>
 8007764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007768:	e001      	b.n	800776e <UART_SetConfig+0xaee>
 800776a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007770:	e003      	b.n	800777a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007778:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f001 83e8 	beq.w	8008f52 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	4413      	add	r3, r2
 800778c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778e:	429a      	cmp	r2, r3
 8007790:	d305      	bcc.n	800779e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779a:	429a      	cmp	r2, r3
 800779c:	d904      	bls.n	80077a8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a4:	f001 bbd5 	b.w	8008f52 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80077a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	f000 8154 	beq.w	8007a5a <UART_SetConfig+0xdda>
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	dc06      	bgt.n	80077c4 <UART_SetConfig+0xb44>
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d00f      	beq.n	80077da <UART_SetConfig+0xb5a>
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	f000 80ac 	beq.w	8007918 <UART_SetConfig+0xc98>
 80077c0:	f000 bc30 	b.w	8008024 <UART_SetConfig+0x13a4>
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	f000 832d 	beq.w	8007e24 <UART_SetConfig+0x11a4>
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	f000 83a5 	beq.w	8007f1a <UART_SetConfig+0x129a>
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	f000 81e3 	beq.w	8007b9c <UART_SetConfig+0xf1c>
 80077d6:	f000 bc25 	b.w	8008024 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077da:	f7fe faf9 	bl	8005dd0 <HAL_RCCEx_GetD3PCLK1Freq>
 80077de:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	4618      	mov	r0, r3
 80077e4:	f04f 0100 	mov.w	r1, #0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d067      	beq.n	80078c0 <UART_SetConfig+0xc40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d05e      	beq.n	80078b6 <UART_SetConfig+0xc36>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d055      	beq.n	80078ac <UART_SetConfig+0xc2c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	2b03      	cmp	r3, #3
 8007806:	d04c      	beq.n	80078a2 <UART_SetConfig+0xc22>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	2b04      	cmp	r3, #4
 800780e:	d043      	beq.n	8007898 <UART_SetConfig+0xc18>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b05      	cmp	r3, #5
 8007816:	d03a      	beq.n	800788e <UART_SetConfig+0xc0e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	2b06      	cmp	r3, #6
 800781e:	d031      	beq.n	8007884 <UART_SetConfig+0xc04>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b07      	cmp	r3, #7
 8007826:	d028      	beq.n	800787a <UART_SetConfig+0xbfa>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b08      	cmp	r3, #8
 800782e:	d01f      	beq.n	8007870 <UART_SetConfig+0xbf0>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b09      	cmp	r3, #9
 8007836:	d016      	beq.n	8007866 <UART_SetConfig+0xbe6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b0a      	cmp	r3, #10
 800783e:	d00d      	beq.n	800785c <UART_SetConfig+0xbdc>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b0b      	cmp	r3, #11
 8007846:	d104      	bne.n	8007852 <UART_SetConfig+0xbd2>
 8007848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800784c:	f04f 0400 	mov.w	r4, #0
 8007850:	e03a      	b.n	80078c8 <UART_SetConfig+0xc48>
 8007852:	f04f 0301 	mov.w	r3, #1
 8007856:	f04f 0400 	mov.w	r4, #0
 800785a:	e035      	b.n	80078c8 <UART_SetConfig+0xc48>
 800785c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007860:	f04f 0400 	mov.w	r4, #0
 8007864:	e030      	b.n	80078c8 <UART_SetConfig+0xc48>
 8007866:	f04f 0340 	mov.w	r3, #64	; 0x40
 800786a:	f04f 0400 	mov.w	r4, #0
 800786e:	e02b      	b.n	80078c8 <UART_SetConfig+0xc48>
 8007870:	f04f 0320 	mov.w	r3, #32
 8007874:	f04f 0400 	mov.w	r4, #0
 8007878:	e026      	b.n	80078c8 <UART_SetConfig+0xc48>
 800787a:	f04f 0310 	mov.w	r3, #16
 800787e:	f04f 0400 	mov.w	r4, #0
 8007882:	e021      	b.n	80078c8 <UART_SetConfig+0xc48>
 8007884:	f04f 030c 	mov.w	r3, #12
 8007888:	f04f 0400 	mov.w	r4, #0
 800788c:	e01c      	b.n	80078c8 <UART_SetConfig+0xc48>
 800788e:	f04f 030a 	mov.w	r3, #10
 8007892:	f04f 0400 	mov.w	r4, #0
 8007896:	e017      	b.n	80078c8 <UART_SetConfig+0xc48>
 8007898:	f04f 0308 	mov.w	r3, #8
 800789c:	f04f 0400 	mov.w	r4, #0
 80078a0:	e012      	b.n	80078c8 <UART_SetConfig+0xc48>
 80078a2:	f04f 0306 	mov.w	r3, #6
 80078a6:	f04f 0400 	mov.w	r4, #0
 80078aa:	e00d      	b.n	80078c8 <UART_SetConfig+0xc48>
 80078ac:	f04f 0304 	mov.w	r3, #4
 80078b0:	f04f 0400 	mov.w	r4, #0
 80078b4:	e008      	b.n	80078c8 <UART_SetConfig+0xc48>
 80078b6:	f04f 0302 	mov.w	r3, #2
 80078ba:	f04f 0400 	mov.w	r4, #0
 80078be:	e003      	b.n	80078c8 <UART_SetConfig+0xc48>
 80078c0:	f04f 0301 	mov.w	r3, #1
 80078c4:	f04f 0400 	mov.w	r4, #0
 80078c8:	461a      	mov	r2, r3
 80078ca:	4623      	mov	r3, r4
 80078cc:	f7f8 fd60 	bl	8000390 <__aeabi_uldivmod>
 80078d0:	4603      	mov	r3, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4619      	mov	r1, r3
 80078d6:	4622      	mov	r2, r4
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	f04f 0400 	mov.w	r4, #0
 80078e0:	0214      	lsls	r4, r2, #8
 80078e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80078e6:	020b      	lsls	r3, r1, #8
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6852      	ldr	r2, [r2, #4]
 80078ec:	0852      	lsrs	r2, r2, #1
 80078ee:	4611      	mov	r1, r2
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	eb13 0b01 	adds.w	fp, r3, r1
 80078f8:	eb44 0c02 	adc.w	ip, r4, r2
 80078fc:	4658      	mov	r0, fp
 80078fe:	4661      	mov	r1, ip
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f04f 0400 	mov.w	r4, #0
 8007908:	461a      	mov	r2, r3
 800790a:	4623      	mov	r3, r4
 800790c:	f7f8 fd40 	bl	8000390 <__aeabi_uldivmod>
 8007910:	4603      	mov	r3, r0
 8007912:	460c      	mov	r4, r1
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007916:	e389      	b.n	800802c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007918:	f107 0318 	add.w	r3, r7, #24
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fa6d 	bl	8005dfc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4618      	mov	r0, r3
 8007926:	f04f 0100 	mov.w	r1, #0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d067      	beq.n	8007a02 <UART_SetConfig+0xd82>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b01      	cmp	r3, #1
 8007938:	d05e      	beq.n	80079f8 <UART_SetConfig+0xd78>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b02      	cmp	r3, #2
 8007940:	d055      	beq.n	80079ee <UART_SetConfig+0xd6e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b03      	cmp	r3, #3
 8007948:	d04c      	beq.n	80079e4 <UART_SetConfig+0xd64>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b04      	cmp	r3, #4
 8007950:	d043      	beq.n	80079da <UART_SetConfig+0xd5a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b05      	cmp	r3, #5
 8007958:	d03a      	beq.n	80079d0 <UART_SetConfig+0xd50>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b06      	cmp	r3, #6
 8007960:	d031      	beq.n	80079c6 <UART_SetConfig+0xd46>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b07      	cmp	r3, #7
 8007968:	d028      	beq.n	80079bc <UART_SetConfig+0xd3c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	2b08      	cmp	r3, #8
 8007970:	d01f      	beq.n	80079b2 <UART_SetConfig+0xd32>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	2b09      	cmp	r3, #9
 8007978:	d016      	beq.n	80079a8 <UART_SetConfig+0xd28>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	2b0a      	cmp	r3, #10
 8007980:	d00d      	beq.n	800799e <UART_SetConfig+0xd1e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b0b      	cmp	r3, #11
 8007988:	d104      	bne.n	8007994 <UART_SetConfig+0xd14>
 800798a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800798e:	f04f 0400 	mov.w	r4, #0
 8007992:	e03a      	b.n	8007a0a <UART_SetConfig+0xd8a>
 8007994:	f04f 0301 	mov.w	r3, #1
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	e035      	b.n	8007a0a <UART_SetConfig+0xd8a>
 800799e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079a2:	f04f 0400 	mov.w	r4, #0
 80079a6:	e030      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079ac:	f04f 0400 	mov.w	r4, #0
 80079b0:	e02b      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079b2:	f04f 0320 	mov.w	r3, #32
 80079b6:	f04f 0400 	mov.w	r4, #0
 80079ba:	e026      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079bc:	f04f 0310 	mov.w	r3, #16
 80079c0:	f04f 0400 	mov.w	r4, #0
 80079c4:	e021      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079c6:	f04f 030c 	mov.w	r3, #12
 80079ca:	f04f 0400 	mov.w	r4, #0
 80079ce:	e01c      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079d0:	f04f 030a 	mov.w	r3, #10
 80079d4:	f04f 0400 	mov.w	r4, #0
 80079d8:	e017      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079da:	f04f 0308 	mov.w	r3, #8
 80079de:	f04f 0400 	mov.w	r4, #0
 80079e2:	e012      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079e4:	f04f 0306 	mov.w	r3, #6
 80079e8:	f04f 0400 	mov.w	r4, #0
 80079ec:	e00d      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079ee:	f04f 0304 	mov.w	r3, #4
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	e008      	b.n	8007a0a <UART_SetConfig+0xd8a>
 80079f8:	f04f 0302 	mov.w	r3, #2
 80079fc:	f04f 0400 	mov.w	r4, #0
 8007a00:	e003      	b.n	8007a0a <UART_SetConfig+0xd8a>
 8007a02:	f04f 0301 	mov.w	r3, #1
 8007a06:	f04f 0400 	mov.w	r4, #0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4623      	mov	r3, r4
 8007a0e:	f7f8 fcbf 	bl	8000390 <__aeabi_uldivmod>
 8007a12:	4603      	mov	r3, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	4619      	mov	r1, r3
 8007a18:	4622      	mov	r2, r4
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	f04f 0400 	mov.w	r4, #0
 8007a22:	0214      	lsls	r4, r2, #8
 8007a24:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a28:	020b      	lsls	r3, r1, #8
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6852      	ldr	r2, [r2, #4]
 8007a2e:	0852      	lsrs	r2, r2, #1
 8007a30:	4611      	mov	r1, r2
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	eb13 0b01 	adds.w	fp, r3, r1
 8007a3a:	eb44 0c02 	adc.w	ip, r4, r2
 8007a3e:	4658      	mov	r0, fp
 8007a40:	4661      	mov	r1, ip
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f04f 0400 	mov.w	r4, #0
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	f7f8 fc9f 	bl	8000390 <__aeabi_uldivmod>
 8007a52:	4603      	mov	r3, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a58:	e2e8      	b.n	800802c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5a:	f107 030c 	add.w	r3, r7, #12
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fb18 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f04f 0100 	mov.w	r1, #0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d067      	beq.n	8007b44 <UART_SetConfig+0xec4>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d05e      	beq.n	8007b3a <UART_SetConfig+0xeba>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d055      	beq.n	8007b30 <UART_SetConfig+0xeb0>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d04c      	beq.n	8007b26 <UART_SetConfig+0xea6>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d043      	beq.n	8007b1c <UART_SetConfig+0xe9c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d03a      	beq.n	8007b12 <UART_SetConfig+0xe92>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	d031      	beq.n	8007b08 <UART_SetConfig+0xe88>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b07      	cmp	r3, #7
 8007aaa:	d028      	beq.n	8007afe <UART_SetConfig+0xe7e>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d01f      	beq.n	8007af4 <UART_SetConfig+0xe74>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b09      	cmp	r3, #9
 8007aba:	d016      	beq.n	8007aea <UART_SetConfig+0xe6a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b0a      	cmp	r3, #10
 8007ac2:	d00d      	beq.n	8007ae0 <UART_SetConfig+0xe60>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b0b      	cmp	r3, #11
 8007aca:	d104      	bne.n	8007ad6 <UART_SetConfig+0xe56>
 8007acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ad0:	f04f 0400 	mov.w	r4, #0
 8007ad4:	e03a      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007ad6:	f04f 0301 	mov.w	r3, #1
 8007ada:	f04f 0400 	mov.w	r4, #0
 8007ade:	e035      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ae4:	f04f 0400 	mov.w	r4, #0
 8007ae8:	e030      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007aea:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007aee:	f04f 0400 	mov.w	r4, #0
 8007af2:	e02b      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007af4:	f04f 0320 	mov.w	r3, #32
 8007af8:	f04f 0400 	mov.w	r4, #0
 8007afc:	e026      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007afe:	f04f 0310 	mov.w	r3, #16
 8007b02:	f04f 0400 	mov.w	r4, #0
 8007b06:	e021      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b08:	f04f 030c 	mov.w	r3, #12
 8007b0c:	f04f 0400 	mov.w	r4, #0
 8007b10:	e01c      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b12:	f04f 030a 	mov.w	r3, #10
 8007b16:	f04f 0400 	mov.w	r4, #0
 8007b1a:	e017      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b1c:	f04f 0308 	mov.w	r3, #8
 8007b20:	f04f 0400 	mov.w	r4, #0
 8007b24:	e012      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b26:	f04f 0306 	mov.w	r3, #6
 8007b2a:	f04f 0400 	mov.w	r4, #0
 8007b2e:	e00d      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b30:	f04f 0304 	mov.w	r3, #4
 8007b34:	f04f 0400 	mov.w	r4, #0
 8007b38:	e008      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b3a:	f04f 0302 	mov.w	r3, #2
 8007b3e:	f04f 0400 	mov.w	r4, #0
 8007b42:	e003      	b.n	8007b4c <UART_SetConfig+0xecc>
 8007b44:	f04f 0301 	mov.w	r3, #1
 8007b48:	f04f 0400 	mov.w	r4, #0
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4623      	mov	r3, r4
 8007b50:	f7f8 fc1e 	bl	8000390 <__aeabi_uldivmod>
 8007b54:	4603      	mov	r3, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	f04f 0400 	mov.w	r4, #0
 8007b64:	0214      	lsls	r4, r2, #8
 8007b66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007b6a:	020b      	lsls	r3, r1, #8
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6852      	ldr	r2, [r2, #4]
 8007b70:	0852      	lsrs	r2, r2, #1
 8007b72:	4611      	mov	r1, r2
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	eb13 0b01 	adds.w	fp, r3, r1
 8007b7c:	eb44 0c02 	adc.w	ip, r4, r2
 8007b80:	4658      	mov	r0, fp
 8007b82:	4661      	mov	r1, ip
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f04f 0400 	mov.w	r4, #0
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4623      	mov	r3, r4
 8007b90:	f7f8 fbfe 	bl	8000390 <__aeabi_uldivmod>
 8007b94:	4603      	mov	r3, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b9a:	e247      	b.n	800802c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b9c:	4b96      	ldr	r3, [pc, #600]	; (8007df8 <UART_SetConfig+0x1178>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80a3 	beq.w	8007cf0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007baa:	4b93      	ldr	r3, [pc, #588]	; (8007df8 <UART_SetConfig+0x1178>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	08db      	lsrs	r3, r3, #3
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	4a91      	ldr	r2, [pc, #580]	; (8007dfc <UART_SetConfig+0x117c>)
 8007bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f04f 0100 	mov.w	r1, #0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d067      	beq.n	8007c98 <UART_SetConfig+0x1018>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d05e      	beq.n	8007c8e <UART_SetConfig+0x100e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d055      	beq.n	8007c84 <UART_SetConfig+0x1004>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d04c      	beq.n	8007c7a <UART_SetConfig+0xffa>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d043      	beq.n	8007c70 <UART_SetConfig+0xff0>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b05      	cmp	r3, #5
 8007bee:	d03a      	beq.n	8007c66 <UART_SetConfig+0xfe6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	2b06      	cmp	r3, #6
 8007bf6:	d031      	beq.n	8007c5c <UART_SetConfig+0xfdc>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2b07      	cmp	r3, #7
 8007bfe:	d028      	beq.n	8007c52 <UART_SetConfig+0xfd2>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d01f      	beq.n	8007c48 <UART_SetConfig+0xfc8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d016      	beq.n	8007c3e <UART_SetConfig+0xfbe>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b0a      	cmp	r3, #10
 8007c16:	d00d      	beq.n	8007c34 <UART_SetConfig+0xfb4>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b0b      	cmp	r3, #11
 8007c1e:	d104      	bne.n	8007c2a <UART_SetConfig+0xfaa>
 8007c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	e03a      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c2a:	f04f 0301 	mov.w	r3, #1
 8007c2e:	f04f 0400 	mov.w	r4, #0
 8007c32:	e035      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c34:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007c38:	f04f 0400 	mov.w	r4, #0
 8007c3c:	e030      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c3e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007c42:	f04f 0400 	mov.w	r4, #0
 8007c46:	e02b      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c48:	f04f 0320 	mov.w	r3, #32
 8007c4c:	f04f 0400 	mov.w	r4, #0
 8007c50:	e026      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c52:	f04f 0310 	mov.w	r3, #16
 8007c56:	f04f 0400 	mov.w	r4, #0
 8007c5a:	e021      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c5c:	f04f 030c 	mov.w	r3, #12
 8007c60:	f04f 0400 	mov.w	r4, #0
 8007c64:	e01c      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c66:	f04f 030a 	mov.w	r3, #10
 8007c6a:	f04f 0400 	mov.w	r4, #0
 8007c6e:	e017      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c70:	f04f 0308 	mov.w	r3, #8
 8007c74:	f04f 0400 	mov.w	r4, #0
 8007c78:	e012      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c7a:	f04f 0306 	mov.w	r3, #6
 8007c7e:	f04f 0400 	mov.w	r4, #0
 8007c82:	e00d      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c84:	f04f 0304 	mov.w	r3, #4
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	e008      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c8e:	f04f 0302 	mov.w	r3, #2
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	e003      	b.n	8007ca0 <UART_SetConfig+0x1020>
 8007c98:	f04f 0301 	mov.w	r3, #1
 8007c9c:	f04f 0400 	mov.w	r4, #0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4623      	mov	r3, r4
 8007ca4:	f7f8 fb74 	bl	8000390 <__aeabi_uldivmod>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	4619      	mov	r1, r3
 8007cae:	4622      	mov	r2, r4
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	f04f 0400 	mov.w	r4, #0
 8007cb8:	0214      	lsls	r4, r2, #8
 8007cba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007cbe:	020b      	lsls	r3, r1, #8
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6852      	ldr	r2, [r2, #4]
 8007cc4:	0852      	lsrs	r2, r2, #1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	eb13 0b01 	adds.w	fp, r3, r1
 8007cd0:	eb44 0c02 	adc.w	ip, r4, r2
 8007cd4:	4658      	mov	r0, fp
 8007cd6:	4661      	mov	r1, ip
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f04f 0400 	mov.w	r4, #0
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4623      	mov	r3, r4
 8007ce4:	f7f8 fb54 	bl	8000390 <__aeabi_uldivmod>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007cee:	e19d      	b.n	800802c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d05b      	beq.n	8007db0 <UART_SetConfig+0x1130>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d053      	beq.n	8007da8 <UART_SetConfig+0x1128>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d04b      	beq.n	8007da0 <UART_SetConfig+0x1120>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d043      	beq.n	8007d98 <UART_SetConfig+0x1118>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d03b      	beq.n	8007d90 <UART_SetConfig+0x1110>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2b05      	cmp	r3, #5
 8007d1e:	d033      	beq.n	8007d88 <UART_SetConfig+0x1108>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	2b06      	cmp	r3, #6
 8007d26:	d02b      	beq.n	8007d80 <UART_SetConfig+0x1100>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	2b07      	cmp	r3, #7
 8007d2e:	d023      	beq.n	8007d78 <UART_SetConfig+0x10f8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d01b      	beq.n	8007d70 <UART_SetConfig+0x10f0>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b09      	cmp	r3, #9
 8007d3e:	d013      	beq.n	8007d68 <UART_SetConfig+0x10e8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2b0a      	cmp	r3, #10
 8007d46:	d00b      	beq.n	8007d60 <UART_SetConfig+0x10e0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2b0b      	cmp	r3, #11
 8007d4e:	d103      	bne.n	8007d58 <UART_SetConfig+0x10d8>
 8007d50:	4b2a      	ldr	r3, [pc, #168]	; (8007dfc <UART_SetConfig+0x117c>)
 8007d52:	f04f 0400 	mov.w	r4, #0
 8007d56:	e02e      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d58:	4b29      	ldr	r3, [pc, #164]	; (8007e00 <UART_SetConfig+0x1180>)
 8007d5a:	f04f 0403 	mov.w	r4, #3
 8007d5e:	e02a      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <UART_SetConfig+0x1184>)
 8007d62:	f04f 0400 	mov.w	r4, #0
 8007d66:	e026      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d68:	4b27      	ldr	r3, [pc, #156]	; (8007e08 <UART_SetConfig+0x1188>)
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	e022      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d70:	4b26      	ldr	r3, [pc, #152]	; (8007e0c <UART_SetConfig+0x118c>)
 8007d72:	f04f 0400 	mov.w	r4, #0
 8007d76:	e01e      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d78:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <UART_SetConfig+0x1190>)
 8007d7a:	f04f 0400 	mov.w	r4, #0
 8007d7e:	e01a      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d80:	a419      	add	r4, pc, #100	; (adr r4, 8007de8 <UART_SetConfig+0x1168>)
 8007d82:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d86:	e016      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d88:	4b22      	ldr	r3, [pc, #136]	; (8007e14 <UART_SetConfig+0x1194>)
 8007d8a:	f04f 0400 	mov.w	r4, #0
 8007d8e:	e012      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d90:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <UART_SetConfig+0x1198>)
 8007d92:	f04f 0400 	mov.w	r4, #0
 8007d96:	e00e      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007d98:	a415      	add	r4, pc, #84	; (adr r4, 8007df0 <UART_SetConfig+0x1170>)
 8007d9a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d9e:	e00a      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007da0:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <UART_SetConfig+0x119c>)
 8007da2:	f04f 0400 	mov.w	r4, #0
 8007da6:	e006      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007da8:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <UART_SetConfig+0x11a0>)
 8007daa:	f04f 0401 	mov.w	r4, #1
 8007dae:	e002      	b.n	8007db6 <UART_SetConfig+0x1136>
 8007db0:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <UART_SetConfig+0x1180>)
 8007db2:	f04f 0403 	mov.w	r4, #3
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6852      	ldr	r2, [r2, #4]
 8007dba:	0852      	lsrs	r2, r2, #1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	eb13 0b01 	adds.w	fp, r3, r1
 8007dc6:	eb44 0c02 	adc.w	ip, r4, r2
 8007dca:	4658      	mov	r0, fp
 8007dcc:	4661      	mov	r1, ip
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f04f 0400 	mov.w	r4, #0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4623      	mov	r3, r4
 8007dda:	f7f8 fad9 	bl	8000390 <__aeabi_uldivmod>
 8007dde:	4603      	mov	r3, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007de4:	e122      	b.n	800802c <UART_SetConfig+0x13ac>
 8007de6:	bf00      	nop
 8007de8:	51615500 	.word	0x51615500
 8007dec:	00000000 	.word	0x00000000
 8007df0:	a2c2aa00 	.word	0xa2c2aa00
 8007df4:	00000000 	.word	0x00000000
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	03d09000 	.word	0x03d09000
 8007e00:	d0900000 	.word	0xd0900000
 8007e04:	07a12000 	.word	0x07a12000
 8007e08:	0f424000 	.word	0x0f424000
 8007e0c:	1e848000 	.word	0x1e848000
 8007e10:	3d090000 	.word	0x3d090000
 8007e14:	61a80000 	.word	0x61a80000
 8007e18:	7a120000 	.word	0x7a120000
 8007e1c:	f4240000 	.word	0xf4240000
 8007e20:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d05b      	beq.n	8007ee4 <UART_SetConfig+0x1264>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d053      	beq.n	8007edc <UART_SetConfig+0x125c>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d04b      	beq.n	8007ed4 <UART_SetConfig+0x1254>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d043      	beq.n	8007ecc <UART_SetConfig+0x124c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d03b      	beq.n	8007ec4 <UART_SetConfig+0x1244>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	d033      	beq.n	8007ebc <UART_SetConfig+0x123c>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b06      	cmp	r3, #6
 8007e5a:	d02b      	beq.n	8007eb4 <UART_SetConfig+0x1234>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b07      	cmp	r3, #7
 8007e62:	d023      	beq.n	8007eac <UART_SetConfig+0x122c>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d01b      	beq.n	8007ea4 <UART_SetConfig+0x1224>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b09      	cmp	r3, #9
 8007e72:	d013      	beq.n	8007e9c <UART_SetConfig+0x121c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	2b0a      	cmp	r3, #10
 8007e7a:	d00b      	beq.n	8007e94 <UART_SetConfig+0x1214>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b0b      	cmp	r3, #11
 8007e82:	d103      	bne.n	8007e8c <UART_SetConfig+0x120c>
 8007e84:	4bc0      	ldr	r3, [pc, #768]	; (8008188 <UART_SetConfig+0x1508>)
 8007e86:	f04f 0400 	mov.w	r4, #0
 8007e8a:	e02e      	b.n	8007eea <UART_SetConfig+0x126a>
 8007e8c:	4bbf      	ldr	r3, [pc, #764]	; (800818c <UART_SetConfig+0x150c>)
 8007e8e:	f04f 0400 	mov.w	r4, #0
 8007e92:	e02a      	b.n	8007eea <UART_SetConfig+0x126a>
 8007e94:	4bbe      	ldr	r3, [pc, #760]	; (8008190 <UART_SetConfig+0x1510>)
 8007e96:	f04f 0400 	mov.w	r4, #0
 8007e9a:	e026      	b.n	8007eea <UART_SetConfig+0x126a>
 8007e9c:	4bbd      	ldr	r3, [pc, #756]	; (8008194 <UART_SetConfig+0x1514>)
 8007e9e:	f04f 0400 	mov.w	r4, #0
 8007ea2:	e022      	b.n	8007eea <UART_SetConfig+0x126a>
 8007ea4:	4bbc      	ldr	r3, [pc, #752]	; (8008198 <UART_SetConfig+0x1518>)
 8007ea6:	f04f 0400 	mov.w	r4, #0
 8007eaa:	e01e      	b.n	8007eea <UART_SetConfig+0x126a>
 8007eac:	4bbb      	ldr	r3, [pc, #748]	; (800819c <UART_SetConfig+0x151c>)
 8007eae:	f04f 0400 	mov.w	r4, #0
 8007eb2:	e01a      	b.n	8007eea <UART_SetConfig+0x126a>
 8007eb4:	a4b0      	add	r4, pc, #704	; (adr r4, 8008178 <UART_SetConfig+0x14f8>)
 8007eb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007eba:	e016      	b.n	8007eea <UART_SetConfig+0x126a>
 8007ebc:	4bb8      	ldr	r3, [pc, #736]	; (80081a0 <UART_SetConfig+0x1520>)
 8007ebe:	f04f 0400 	mov.w	r4, #0
 8007ec2:	e012      	b.n	8007eea <UART_SetConfig+0x126a>
 8007ec4:	4bb7      	ldr	r3, [pc, #732]	; (80081a4 <UART_SetConfig+0x1524>)
 8007ec6:	f04f 0400 	mov.w	r4, #0
 8007eca:	e00e      	b.n	8007eea <UART_SetConfig+0x126a>
 8007ecc:	a4ac      	add	r4, pc, #688	; (adr r4, 8008180 <UART_SetConfig+0x1500>)
 8007ece:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ed2:	e00a      	b.n	8007eea <UART_SetConfig+0x126a>
 8007ed4:	4bb4      	ldr	r3, [pc, #720]	; (80081a8 <UART_SetConfig+0x1528>)
 8007ed6:	f04f 0400 	mov.w	r4, #0
 8007eda:	e006      	b.n	8007eea <UART_SetConfig+0x126a>
 8007edc:	4bb3      	ldr	r3, [pc, #716]	; (80081ac <UART_SetConfig+0x152c>)
 8007ede:	f04f 0400 	mov.w	r4, #0
 8007ee2:	e002      	b.n	8007eea <UART_SetConfig+0x126a>
 8007ee4:	4ba9      	ldr	r3, [pc, #676]	; (800818c <UART_SetConfig+0x150c>)
 8007ee6:	f04f 0400 	mov.w	r4, #0
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6852      	ldr	r2, [r2, #4]
 8007eee:	0852      	lsrs	r2, r2, #1
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	eb13 0b01 	adds.w	fp, r3, r1
 8007efa:	eb44 0c02 	adc.w	ip, r4, r2
 8007efe:	4658      	mov	r0, fp
 8007f00:	4661      	mov	r1, ip
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f04f 0400 	mov.w	r4, #0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	f7f8 fa3f 	bl	8000390 <__aeabi_uldivmod>
 8007f12:	4603      	mov	r3, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f18:	e088      	b.n	800802c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d064      	beq.n	8007fec <UART_SetConfig+0x136c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d05b      	beq.n	8007fe2 <UART_SetConfig+0x1362>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d052      	beq.n	8007fd8 <UART_SetConfig+0x1358>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d04a      	beq.n	8007fd0 <UART_SetConfig+0x1350>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d041      	beq.n	8007fc6 <UART_SetConfig+0x1346>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d039      	beq.n	8007fbe <UART_SetConfig+0x133e>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d031      	beq.n	8007fb6 <UART_SetConfig+0x1336>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b07      	cmp	r3, #7
 8007f58:	d028      	beq.n	8007fac <UART_SetConfig+0x132c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b08      	cmp	r3, #8
 8007f60:	d01f      	beq.n	8007fa2 <UART_SetConfig+0x1322>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d016      	beq.n	8007f98 <UART_SetConfig+0x1318>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b0a      	cmp	r3, #10
 8007f70:	d00d      	beq.n	8007f8e <UART_SetConfig+0x130e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b0b      	cmp	r3, #11
 8007f78:	d104      	bne.n	8007f84 <UART_SetConfig+0x1304>
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	f04f 0400 	mov.w	r4, #0
 8007f82:	e037      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007f84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f88:	f04f 0400 	mov.w	r4, #0
 8007f8c:	e032      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f92:	f04f 0400 	mov.w	r4, #0
 8007f96:	e02d      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f9c:	f04f 0400 	mov.w	r4, #0
 8007fa0:	e028      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007fa6:	f04f 0400 	mov.w	r4, #0
 8007faa:	e023      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fb0:	f04f 0400 	mov.w	r4, #0
 8007fb4:	e01e      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fb6:	4b7e      	ldr	r3, [pc, #504]	; (80081b0 <UART_SetConfig+0x1530>)
 8007fb8:	f04f 0400 	mov.w	r4, #0
 8007fbc:	e01a      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fbe:	4b7d      	ldr	r3, [pc, #500]	; (80081b4 <UART_SetConfig+0x1534>)
 8007fc0:	f04f 0400 	mov.w	r4, #0
 8007fc4:	e016      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007fca:	f04f 0400 	mov.w	r4, #0
 8007fce:	e011      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fd0:	4b79      	ldr	r3, [pc, #484]	; (80081b8 <UART_SetConfig+0x1538>)
 8007fd2:	f04f 0400 	mov.w	r4, #0
 8007fd6:	e00d      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	e008      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007fe6:	f04f 0400 	mov.w	r4, #0
 8007fea:	e003      	b.n	8007ff4 <UART_SetConfig+0x1374>
 8007fec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ff0:	f04f 0400 	mov.w	r4, #0
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6852      	ldr	r2, [r2, #4]
 8007ff8:	0852      	lsrs	r2, r2, #1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	eb13 0b01 	adds.w	fp, r3, r1
 8008004:	eb44 0c02 	adc.w	ip, r4, r2
 8008008:	4658      	mov	r0, fp
 800800a:	4661      	mov	r1, ip
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f04f 0400 	mov.w	r4, #0
 8008014:	461a      	mov	r2, r3
 8008016:	4623      	mov	r3, r4
 8008018:	f7f8 f9ba 	bl	8000390 <__aeabi_uldivmod>
 800801c:	4603      	mov	r3, r0
 800801e:	460c      	mov	r4, r1
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008022:	e003      	b.n	800802c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800802a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008032:	d309      	bcc.n	8008048 <UART_SetConfig+0x13c8>
 8008034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800803a:	d205      	bcs.n	8008048 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008042:	60da      	str	r2, [r3, #12]
 8008044:	f000 bf85 	b.w	8008f52 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	f000 bf80 	b.w	8008f52 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805a:	f040 83da 	bne.w	8008812 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800805e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	f200 83b3 	bhi.w	80087ce <UART_SetConfig+0x1b4e>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <UART_SetConfig+0x13f0>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	080081bd 	.word	0x080081bd
 8008074:	08008275 	.word	0x08008275
 8008078:	080087cf 	.word	0x080087cf
 800807c:	080087cf 	.word	0x080087cf
 8008080:	0800832d 	.word	0x0800832d
 8008084:	080087cf 	.word	0x080087cf
 8008088:	080087cf 	.word	0x080087cf
 800808c:	080087cf 	.word	0x080087cf
 8008090:	080083e9 	.word	0x080083e9
 8008094:	080087cf 	.word	0x080087cf
 8008098:	080087cf 	.word	0x080087cf
 800809c:	080087cf 	.word	0x080087cf
 80080a0:	080087cf 	.word	0x080087cf
 80080a4:	080087cf 	.word	0x080087cf
 80080a8:	080087cf 	.word	0x080087cf
 80080ac:	080087cf 	.word	0x080087cf
 80080b0:	080084a5 	.word	0x080084a5
 80080b4:	080087cf 	.word	0x080087cf
 80080b8:	080087cf 	.word	0x080087cf
 80080bc:	080087cf 	.word	0x080087cf
 80080c0:	080087cf 	.word	0x080087cf
 80080c4:	080087cf 	.word	0x080087cf
 80080c8:	080087cf 	.word	0x080087cf
 80080cc:	080087cf 	.word	0x080087cf
 80080d0:	080087cf 	.word	0x080087cf
 80080d4:	080087cf 	.word	0x080087cf
 80080d8:	080087cf 	.word	0x080087cf
 80080dc:	080087cf 	.word	0x080087cf
 80080e0:	080087cf 	.word	0x080087cf
 80080e4:	080087cf 	.word	0x080087cf
 80080e8:	080087cf 	.word	0x080087cf
 80080ec:	080087cf 	.word	0x080087cf
 80080f0:	08008617 	.word	0x08008617
 80080f4:	080087cf 	.word	0x080087cf
 80080f8:	080087cf 	.word	0x080087cf
 80080fc:	080087cf 	.word	0x080087cf
 8008100:	080087cf 	.word	0x080087cf
 8008104:	080087cf 	.word	0x080087cf
 8008108:	080087cf 	.word	0x080087cf
 800810c:	080087cf 	.word	0x080087cf
 8008110:	080087cf 	.word	0x080087cf
 8008114:	080087cf 	.word	0x080087cf
 8008118:	080087cf 	.word	0x080087cf
 800811c:	080087cf 	.word	0x080087cf
 8008120:	080087cf 	.word	0x080087cf
 8008124:	080087cf 	.word	0x080087cf
 8008128:	080087cf 	.word	0x080087cf
 800812c:	080087cf 	.word	0x080087cf
 8008130:	080087cf 	.word	0x080087cf
 8008134:	080087cf 	.word	0x080087cf
 8008138:	080087cf 	.word	0x080087cf
 800813c:	080087cf 	.word	0x080087cf
 8008140:	080087cf 	.word	0x080087cf
 8008144:	080087cf 	.word	0x080087cf
 8008148:	080087cf 	.word	0x080087cf
 800814c:	080087cf 	.word	0x080087cf
 8008150:	080087cf 	.word	0x080087cf
 8008154:	080087cf 	.word	0x080087cf
 8008158:	080087cf 	.word	0x080087cf
 800815c:	080087cf 	.word	0x080087cf
 8008160:	080087cf 	.word	0x080087cf
 8008164:	080087cf 	.word	0x080087cf
 8008168:	080087cf 	.word	0x080087cf
 800816c:	080087cf 	.word	0x080087cf
 8008170:	0800870d 	.word	0x0800870d
 8008174:	f3af 8000 	nop.w
 8008178:	05161500 	.word	0x05161500
 800817c:	00000000 	.word	0x00000000
 8008180:	0a2c2a00 	.word	0x0a2c2a00
 8008184:	00000000 	.word	0x00000000
 8008188:	003d0900 	.word	0x003d0900
 800818c:	3d090000 	.word	0x3d090000
 8008190:	007a1200 	.word	0x007a1200
 8008194:	00f42400 	.word	0x00f42400
 8008198:	01e84800 	.word	0x01e84800
 800819c:	03d09000 	.word	0x03d09000
 80081a0:	061a8000 	.word	0x061a8000
 80081a4:	07a12000 	.word	0x07a12000
 80081a8:	0f424000 	.word	0x0f424000
 80081ac:	1e848000 	.word	0x1e848000
 80081b0:	000aaa00 	.word	0x000aaa00
 80081b4:	000ccc00 	.word	0x000ccc00
 80081b8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081bc:	f7fc febc 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 80081c0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d044      	beq.n	8008254 <UART_SetConfig+0x15d4>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d03e      	beq.n	8008250 <UART_SetConfig+0x15d0>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d038      	beq.n	800824c <UART_SetConfig+0x15cc>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d032      	beq.n	8008248 <UART_SetConfig+0x15c8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d02c      	beq.n	8008244 <UART_SetConfig+0x15c4>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b05      	cmp	r3, #5
 80081f0:	d026      	beq.n	8008240 <UART_SetConfig+0x15c0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	2b06      	cmp	r3, #6
 80081f8:	d020      	beq.n	800823c <UART_SetConfig+0x15bc>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b07      	cmp	r3, #7
 8008200:	d01a      	beq.n	8008238 <UART_SetConfig+0x15b8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b08      	cmp	r3, #8
 8008208:	d014      	beq.n	8008234 <UART_SetConfig+0x15b4>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b09      	cmp	r3, #9
 8008210:	d00e      	beq.n	8008230 <UART_SetConfig+0x15b0>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b0a      	cmp	r3, #10
 8008218:	d008      	beq.n	800822c <UART_SetConfig+0x15ac>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b0b      	cmp	r3, #11
 8008220:	d102      	bne.n	8008228 <UART_SetConfig+0x15a8>
 8008222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008226:	e016      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008228:	2301      	movs	r3, #1
 800822a:	e014      	b.n	8008256 <UART_SetConfig+0x15d6>
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	e012      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008230:	2340      	movs	r3, #64	; 0x40
 8008232:	e010      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008234:	2320      	movs	r3, #32
 8008236:	e00e      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008238:	2310      	movs	r3, #16
 800823a:	e00c      	b.n	8008256 <UART_SetConfig+0x15d6>
 800823c:	230c      	movs	r3, #12
 800823e:	e00a      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008240:	230a      	movs	r3, #10
 8008242:	e008      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008244:	2308      	movs	r3, #8
 8008246:	e006      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008248:	2306      	movs	r3, #6
 800824a:	e004      	b.n	8008256 <UART_SetConfig+0x15d6>
 800824c:	2304      	movs	r3, #4
 800824e:	e002      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008250:	2302      	movs	r3, #2
 8008252:	e000      	b.n	8008256 <UART_SetConfig+0x15d6>
 8008254:	2301      	movs	r3, #1
 8008256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	005a      	lsls	r2, r3, #1
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	fbb2 f3f3 	udiv	r3, r2, r3
 800826e:	b29b      	uxth	r3, r3
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008272:	e2b0      	b.n	80087d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fc fe76 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8008278:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d044      	beq.n	800830c <UART_SetConfig+0x168c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b01      	cmp	r3, #1
 8008288:	d03e      	beq.n	8008308 <UART_SetConfig+0x1688>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b02      	cmp	r3, #2
 8008290:	d038      	beq.n	8008304 <UART_SetConfig+0x1684>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b03      	cmp	r3, #3
 8008298:	d032      	beq.n	8008300 <UART_SetConfig+0x1680>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d02c      	beq.n	80082fc <UART_SetConfig+0x167c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d026      	beq.n	80082f8 <UART_SetConfig+0x1678>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	2b06      	cmp	r3, #6
 80082b0:	d020      	beq.n	80082f4 <UART_SetConfig+0x1674>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d01a      	beq.n	80082f0 <UART_SetConfig+0x1670>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d014      	beq.n	80082ec <UART_SetConfig+0x166c>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	d00e      	beq.n	80082e8 <UART_SetConfig+0x1668>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b0a      	cmp	r3, #10
 80082d0:	d008      	beq.n	80082e4 <UART_SetConfig+0x1664>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b0b      	cmp	r3, #11
 80082d8:	d102      	bne.n	80082e0 <UART_SetConfig+0x1660>
 80082da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082de:	e016      	b.n	800830e <UART_SetConfig+0x168e>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e014      	b.n	800830e <UART_SetConfig+0x168e>
 80082e4:	2380      	movs	r3, #128	; 0x80
 80082e6:	e012      	b.n	800830e <UART_SetConfig+0x168e>
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	e010      	b.n	800830e <UART_SetConfig+0x168e>
 80082ec:	2320      	movs	r3, #32
 80082ee:	e00e      	b.n	800830e <UART_SetConfig+0x168e>
 80082f0:	2310      	movs	r3, #16
 80082f2:	e00c      	b.n	800830e <UART_SetConfig+0x168e>
 80082f4:	230c      	movs	r3, #12
 80082f6:	e00a      	b.n	800830e <UART_SetConfig+0x168e>
 80082f8:	230a      	movs	r3, #10
 80082fa:	e008      	b.n	800830e <UART_SetConfig+0x168e>
 80082fc:	2308      	movs	r3, #8
 80082fe:	e006      	b.n	800830e <UART_SetConfig+0x168e>
 8008300:	2306      	movs	r3, #6
 8008302:	e004      	b.n	800830e <UART_SetConfig+0x168e>
 8008304:	2304      	movs	r3, #4
 8008306:	e002      	b.n	800830e <UART_SetConfig+0x168e>
 8008308:	2302      	movs	r3, #2
 800830a:	e000      	b.n	800830e <UART_SetConfig+0x168e>
 800830c:	2301      	movs	r3, #1
 800830e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	005a      	lsls	r2, r3, #1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	085b      	lsrs	r3, r3, #1
 800831c:	441a      	add	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	fbb2 f3f3 	udiv	r3, r2, r3
 8008326:	b29b      	uxth	r3, r3
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800832a:	e254      	b.n	80087d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832c:	f107 0318 	add.w	r3, r7, #24
 8008330:	4618      	mov	r0, r3
 8008332:	f7fd fd63 	bl	8005dfc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	d044      	beq.n	80083ca <UART_SetConfig+0x174a>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	2b01      	cmp	r3, #1
 8008346:	d03e      	beq.n	80083c6 <UART_SetConfig+0x1746>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b02      	cmp	r3, #2
 800834e:	d038      	beq.n	80083c2 <UART_SetConfig+0x1742>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b03      	cmp	r3, #3
 8008356:	d032      	beq.n	80083be <UART_SetConfig+0x173e>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	2b04      	cmp	r3, #4
 800835e:	d02c      	beq.n	80083ba <UART_SetConfig+0x173a>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b05      	cmp	r3, #5
 8008366:	d026      	beq.n	80083b6 <UART_SetConfig+0x1736>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	2b06      	cmp	r3, #6
 800836e:	d020      	beq.n	80083b2 <UART_SetConfig+0x1732>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b07      	cmp	r3, #7
 8008376:	d01a      	beq.n	80083ae <UART_SetConfig+0x172e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b08      	cmp	r3, #8
 800837e:	d014      	beq.n	80083aa <UART_SetConfig+0x172a>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b09      	cmp	r3, #9
 8008386:	d00e      	beq.n	80083a6 <UART_SetConfig+0x1726>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b0a      	cmp	r3, #10
 800838e:	d008      	beq.n	80083a2 <UART_SetConfig+0x1722>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b0b      	cmp	r3, #11
 8008396:	d102      	bne.n	800839e <UART_SetConfig+0x171e>
 8008398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800839c:	e016      	b.n	80083cc <UART_SetConfig+0x174c>
 800839e:	2301      	movs	r3, #1
 80083a0:	e014      	b.n	80083cc <UART_SetConfig+0x174c>
 80083a2:	2380      	movs	r3, #128	; 0x80
 80083a4:	e012      	b.n	80083cc <UART_SetConfig+0x174c>
 80083a6:	2340      	movs	r3, #64	; 0x40
 80083a8:	e010      	b.n	80083cc <UART_SetConfig+0x174c>
 80083aa:	2320      	movs	r3, #32
 80083ac:	e00e      	b.n	80083cc <UART_SetConfig+0x174c>
 80083ae:	2310      	movs	r3, #16
 80083b0:	e00c      	b.n	80083cc <UART_SetConfig+0x174c>
 80083b2:	230c      	movs	r3, #12
 80083b4:	e00a      	b.n	80083cc <UART_SetConfig+0x174c>
 80083b6:	230a      	movs	r3, #10
 80083b8:	e008      	b.n	80083cc <UART_SetConfig+0x174c>
 80083ba:	2308      	movs	r3, #8
 80083bc:	e006      	b.n	80083cc <UART_SetConfig+0x174c>
 80083be:	2306      	movs	r3, #6
 80083c0:	e004      	b.n	80083cc <UART_SetConfig+0x174c>
 80083c2:	2304      	movs	r3, #4
 80083c4:	e002      	b.n	80083cc <UART_SetConfig+0x174c>
 80083c6:	2302      	movs	r3, #2
 80083c8:	e000      	b.n	80083cc <UART_SetConfig+0x174c>
 80083ca:	2301      	movs	r3, #1
 80083cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d0:	005a      	lsls	r2, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	441a      	add	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083e6:	e1f6      	b.n	80087d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e8:	f107 030c 	add.w	r3, r7, #12
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fd fe51 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d044      	beq.n	8008486 <UART_SetConfig+0x1806>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b01      	cmp	r3, #1
 8008402:	d03e      	beq.n	8008482 <UART_SetConfig+0x1802>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b02      	cmp	r3, #2
 800840a:	d038      	beq.n	800847e <UART_SetConfig+0x17fe>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b03      	cmp	r3, #3
 8008412:	d032      	beq.n	800847a <UART_SetConfig+0x17fa>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	2b04      	cmp	r3, #4
 800841a:	d02c      	beq.n	8008476 <UART_SetConfig+0x17f6>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b05      	cmp	r3, #5
 8008422:	d026      	beq.n	8008472 <UART_SetConfig+0x17f2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2b06      	cmp	r3, #6
 800842a:	d020      	beq.n	800846e <UART_SetConfig+0x17ee>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b07      	cmp	r3, #7
 8008432:	d01a      	beq.n	800846a <UART_SetConfig+0x17ea>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b08      	cmp	r3, #8
 800843a:	d014      	beq.n	8008466 <UART_SetConfig+0x17e6>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b09      	cmp	r3, #9
 8008442:	d00e      	beq.n	8008462 <UART_SetConfig+0x17e2>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b0a      	cmp	r3, #10
 800844a:	d008      	beq.n	800845e <UART_SetConfig+0x17de>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b0b      	cmp	r3, #11
 8008452:	d102      	bne.n	800845a <UART_SetConfig+0x17da>
 8008454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008458:	e016      	b.n	8008488 <UART_SetConfig+0x1808>
 800845a:	2301      	movs	r3, #1
 800845c:	e014      	b.n	8008488 <UART_SetConfig+0x1808>
 800845e:	2380      	movs	r3, #128	; 0x80
 8008460:	e012      	b.n	8008488 <UART_SetConfig+0x1808>
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	e010      	b.n	8008488 <UART_SetConfig+0x1808>
 8008466:	2320      	movs	r3, #32
 8008468:	e00e      	b.n	8008488 <UART_SetConfig+0x1808>
 800846a:	2310      	movs	r3, #16
 800846c:	e00c      	b.n	8008488 <UART_SetConfig+0x1808>
 800846e:	230c      	movs	r3, #12
 8008470:	e00a      	b.n	8008488 <UART_SetConfig+0x1808>
 8008472:	230a      	movs	r3, #10
 8008474:	e008      	b.n	8008488 <UART_SetConfig+0x1808>
 8008476:	2308      	movs	r3, #8
 8008478:	e006      	b.n	8008488 <UART_SetConfig+0x1808>
 800847a:	2306      	movs	r3, #6
 800847c:	e004      	b.n	8008488 <UART_SetConfig+0x1808>
 800847e:	2304      	movs	r3, #4
 8008480:	e002      	b.n	8008488 <UART_SetConfig+0x1808>
 8008482:	2302      	movs	r3, #2
 8008484:	e000      	b.n	8008488 <UART_SetConfig+0x1808>
 8008486:	2301      	movs	r3, #1
 8008488:	fbb2 f3f3 	udiv	r3, r2, r3
 800848c:	005a      	lsls	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	fbb2 f3f3 	udiv	r3, r2, r3
 800849e:	b29b      	uxth	r3, r3
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084a2:	e198      	b.n	80087d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084a4:	4b87      	ldr	r3, [pc, #540]	; (80086c4 <UART_SetConfig+0x1a44>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d05e      	beq.n	800856e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b0:	4b84      	ldr	r3, [pc, #528]	; (80086c4 <UART_SetConfig+0x1a44>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	08db      	lsrs	r3, r3, #3
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	4a83      	ldr	r2, [pc, #524]	; (80086c8 <UART_SetConfig+0x1a48>)
 80084bc:	40da      	lsrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d044      	beq.n	8008550 <UART_SetConfig+0x18d0>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d03e      	beq.n	800854c <UART_SetConfig+0x18cc>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d038      	beq.n	8008548 <UART_SetConfig+0x18c8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d032      	beq.n	8008544 <UART_SetConfig+0x18c4>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d02c      	beq.n	8008540 <UART_SetConfig+0x18c0>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	2b05      	cmp	r3, #5
 80084ec:	d026      	beq.n	800853c <UART_SetConfig+0x18bc>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b06      	cmp	r3, #6
 80084f4:	d020      	beq.n	8008538 <UART_SetConfig+0x18b8>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b07      	cmp	r3, #7
 80084fc:	d01a      	beq.n	8008534 <UART_SetConfig+0x18b4>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b08      	cmp	r3, #8
 8008504:	d014      	beq.n	8008530 <UART_SetConfig+0x18b0>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b09      	cmp	r3, #9
 800850c:	d00e      	beq.n	800852c <UART_SetConfig+0x18ac>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b0a      	cmp	r3, #10
 8008514:	d008      	beq.n	8008528 <UART_SetConfig+0x18a8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b0b      	cmp	r3, #11
 800851c:	d102      	bne.n	8008524 <UART_SetConfig+0x18a4>
 800851e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008522:	e016      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008524:	2301      	movs	r3, #1
 8008526:	e014      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008528:	2380      	movs	r3, #128	; 0x80
 800852a:	e012      	b.n	8008552 <UART_SetConfig+0x18d2>
 800852c:	2340      	movs	r3, #64	; 0x40
 800852e:	e010      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008530:	2320      	movs	r3, #32
 8008532:	e00e      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008534:	2310      	movs	r3, #16
 8008536:	e00c      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008538:	230c      	movs	r3, #12
 800853a:	e00a      	b.n	8008552 <UART_SetConfig+0x18d2>
 800853c:	230a      	movs	r3, #10
 800853e:	e008      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008540:	2308      	movs	r3, #8
 8008542:	e006      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008544:	2306      	movs	r3, #6
 8008546:	e004      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008548:	2304      	movs	r3, #4
 800854a:	e002      	b.n	8008552 <UART_SetConfig+0x18d2>
 800854c:	2302      	movs	r3, #2
 800854e:	e000      	b.n	8008552 <UART_SetConfig+0x18d2>
 8008550:	2301      	movs	r3, #1
 8008552:	fbb2 f3f3 	udiv	r3, r2, r3
 8008556:	005a      	lsls	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800856c:	e133      	b.n	80087d6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d043      	beq.n	80085fe <UART_SetConfig+0x197e>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	2b01      	cmp	r3, #1
 800857c:	d03d      	beq.n	80085fa <UART_SetConfig+0x197a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	2b02      	cmp	r3, #2
 8008584:	d037      	beq.n	80085f6 <UART_SetConfig+0x1976>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	2b03      	cmp	r3, #3
 800858c:	d031      	beq.n	80085f2 <UART_SetConfig+0x1972>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	2b04      	cmp	r3, #4
 8008594:	d02b      	beq.n	80085ee <UART_SetConfig+0x196e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	2b05      	cmp	r3, #5
 800859c:	d025      	beq.n	80085ea <UART_SetConfig+0x196a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d01f      	beq.n	80085e6 <UART_SetConfig+0x1966>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	2b07      	cmp	r3, #7
 80085ac:	d019      	beq.n	80085e2 <UART_SetConfig+0x1962>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	2b08      	cmp	r3, #8
 80085b4:	d013      	beq.n	80085de <UART_SetConfig+0x195e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b09      	cmp	r3, #9
 80085bc:	d00d      	beq.n	80085da <UART_SetConfig+0x195a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b0a      	cmp	r3, #10
 80085c4:	d007      	beq.n	80085d6 <UART_SetConfig+0x1956>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b0b      	cmp	r3, #11
 80085cc:	d101      	bne.n	80085d2 <UART_SetConfig+0x1952>
 80085ce:	4b3f      	ldr	r3, [pc, #252]	; (80086cc <UART_SetConfig+0x1a4c>)
 80085d0:	e016      	b.n	8008600 <UART_SetConfig+0x1980>
 80085d2:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <UART_SetConfig+0x1a50>)
 80085d4:	e014      	b.n	8008600 <UART_SetConfig+0x1980>
 80085d6:	4b3f      	ldr	r3, [pc, #252]	; (80086d4 <UART_SetConfig+0x1a54>)
 80085d8:	e012      	b.n	8008600 <UART_SetConfig+0x1980>
 80085da:	4b3f      	ldr	r3, [pc, #252]	; (80086d8 <UART_SetConfig+0x1a58>)
 80085dc:	e010      	b.n	8008600 <UART_SetConfig+0x1980>
 80085de:	4b3f      	ldr	r3, [pc, #252]	; (80086dc <UART_SetConfig+0x1a5c>)
 80085e0:	e00e      	b.n	8008600 <UART_SetConfig+0x1980>
 80085e2:	4b3f      	ldr	r3, [pc, #252]	; (80086e0 <UART_SetConfig+0x1a60>)
 80085e4:	e00c      	b.n	8008600 <UART_SetConfig+0x1980>
 80085e6:	4b3f      	ldr	r3, [pc, #252]	; (80086e4 <UART_SetConfig+0x1a64>)
 80085e8:	e00a      	b.n	8008600 <UART_SetConfig+0x1980>
 80085ea:	4b3f      	ldr	r3, [pc, #252]	; (80086e8 <UART_SetConfig+0x1a68>)
 80085ec:	e008      	b.n	8008600 <UART_SetConfig+0x1980>
 80085ee:	4b3f      	ldr	r3, [pc, #252]	; (80086ec <UART_SetConfig+0x1a6c>)
 80085f0:	e006      	b.n	8008600 <UART_SetConfig+0x1980>
 80085f2:	4b3f      	ldr	r3, [pc, #252]	; (80086f0 <UART_SetConfig+0x1a70>)
 80085f4:	e004      	b.n	8008600 <UART_SetConfig+0x1980>
 80085f6:	4b3f      	ldr	r3, [pc, #252]	; (80086f4 <UART_SetConfig+0x1a74>)
 80085f8:	e002      	b.n	8008600 <UART_SetConfig+0x1980>
 80085fa:	4b33      	ldr	r3, [pc, #204]	; (80086c8 <UART_SetConfig+0x1a48>)
 80085fc:	e000      	b.n	8008600 <UART_SetConfig+0x1980>
 80085fe:	4b34      	ldr	r3, [pc, #208]	; (80086d0 <UART_SetConfig+0x1a50>)
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	0852      	lsrs	r2, r2, #1
 8008606:	441a      	add	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	b29b      	uxth	r3, r3
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008614:	e0df      	b.n	80087d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	d045      	beq.n	80086aa <UART_SetConfig+0x1a2a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	2b01      	cmp	r3, #1
 8008624:	d03f      	beq.n	80086a6 <UART_SetConfig+0x1a26>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	2b02      	cmp	r3, #2
 800862c:	d039      	beq.n	80086a2 <UART_SetConfig+0x1a22>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	2b03      	cmp	r3, #3
 8008634:	d033      	beq.n	800869e <UART_SetConfig+0x1a1e>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	2b04      	cmp	r3, #4
 800863c:	d02d      	beq.n	800869a <UART_SetConfig+0x1a1a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	2b05      	cmp	r3, #5
 8008644:	d027      	beq.n	8008696 <UART_SetConfig+0x1a16>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	2b06      	cmp	r3, #6
 800864c:	d021      	beq.n	8008692 <UART_SetConfig+0x1a12>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	2b07      	cmp	r3, #7
 8008654:	d01b      	beq.n	800868e <UART_SetConfig+0x1a0e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b08      	cmp	r3, #8
 800865c:	d015      	beq.n	800868a <UART_SetConfig+0x1a0a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b09      	cmp	r3, #9
 8008664:	d00f      	beq.n	8008686 <UART_SetConfig+0x1a06>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b0a      	cmp	r3, #10
 800866c:	d008      	beq.n	8008680 <UART_SetConfig+0x1a00>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b0b      	cmp	r3, #11
 8008674:	d102      	bne.n	800867c <UART_SetConfig+0x19fc>
 8008676:	f647 2312 	movw	r3, #31250	; 0x7a12
 800867a:	e017      	b.n	80086ac <UART_SetConfig+0x1a2c>
 800867c:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <UART_SetConfig+0x1a60>)
 800867e:	e015      	b.n	80086ac <UART_SetConfig+0x1a2c>
 8008680:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008684:	e012      	b.n	80086ac <UART_SetConfig+0x1a2c>
 8008686:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <UART_SetConfig+0x1a78>)
 8008688:	e010      	b.n	80086ac <UART_SetConfig+0x1a2c>
 800868a:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <UART_SetConfig+0x1a7c>)
 800868c:	e00e      	b.n	80086ac <UART_SetConfig+0x1a2c>
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <UART_SetConfig+0x1a4c>)
 8008690:	e00c      	b.n	80086ac <UART_SetConfig+0x1a2c>
 8008692:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <UART_SetConfig+0x1a80>)
 8008694:	e00a      	b.n	80086ac <UART_SetConfig+0x1a2c>
 8008696:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <UART_SetConfig+0x1a84>)
 8008698:	e008      	b.n	80086ac <UART_SetConfig+0x1a2c>
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <UART_SetConfig+0x1a54>)
 800869c:	e006      	b.n	80086ac <UART_SetConfig+0x1a2c>
 800869e:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <UART_SetConfig+0x1a88>)
 80086a0:	e004      	b.n	80086ac <UART_SetConfig+0x1a2c>
 80086a2:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <UART_SetConfig+0x1a58>)
 80086a4:	e002      	b.n	80086ac <UART_SetConfig+0x1a2c>
 80086a6:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <UART_SetConfig+0x1a5c>)
 80086a8:	e000      	b.n	80086ac <UART_SetConfig+0x1a2c>
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <UART_SetConfig+0x1a60>)
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6852      	ldr	r2, [r2, #4]
 80086b0:	0852      	lsrs	r2, r2, #1
 80086b2:	441a      	add	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	b29b      	uxth	r3, r3
 80086be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086c0:	e089      	b.n	80087d6 <UART_SetConfig+0x1b56>
 80086c2:	bf00      	nop
 80086c4:	58024400 	.word	0x58024400
 80086c8:	03d09000 	.word	0x03d09000
 80086cc:	0007a120 	.word	0x0007a120
 80086d0:	07a12000 	.word	0x07a12000
 80086d4:	000f4240 	.word	0x000f4240
 80086d8:	001e8480 	.word	0x001e8480
 80086dc:	003d0900 	.word	0x003d0900
 80086e0:	007a1200 	.word	0x007a1200
 80086e4:	00a2c2aa 	.word	0x00a2c2aa
 80086e8:	00c35000 	.word	0x00c35000
 80086ec:	00f42400 	.word	0x00f42400
 80086f0:	01458554 	.word	0x01458554
 80086f4:	01e84800 	.word	0x01e84800
 80086f8:	0001e848 	.word	0x0001e848
 80086fc:	0003d090 	.word	0x0003d090
 8008700:	000a2c2a 	.word	0x000a2c2a
 8008704:	000c3500 	.word	0x000c3500
 8008708:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d04f      	beq.n	80087b4 <UART_SetConfig+0x1b34>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b01      	cmp	r3, #1
 800871a:	d048      	beq.n	80087ae <UART_SetConfig+0x1b2e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b02      	cmp	r3, #2
 8008722:	d041      	beq.n	80087a8 <UART_SetConfig+0x1b28>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b03      	cmp	r3, #3
 800872a:	d03a      	beq.n	80087a2 <UART_SetConfig+0x1b22>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b04      	cmp	r3, #4
 8008732:	d033      	beq.n	800879c <UART_SetConfig+0x1b1c>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b05      	cmp	r3, #5
 800873a:	d02c      	beq.n	8008796 <UART_SetConfig+0x1b16>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	2b06      	cmp	r3, #6
 8008742:	d025      	beq.n	8008790 <UART_SetConfig+0x1b10>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b07      	cmp	r3, #7
 800874a:	d01e      	beq.n	800878a <UART_SetConfig+0x1b0a>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b08      	cmp	r3, #8
 8008752:	d017      	beq.n	8008784 <UART_SetConfig+0x1b04>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b09      	cmp	r3, #9
 800875a:	d010      	beq.n	800877e <UART_SetConfig+0x1afe>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	2b0a      	cmp	r3, #10
 8008762:	d009      	beq.n	8008778 <UART_SetConfig+0x1af8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b0b      	cmp	r3, #11
 800876a:	d102      	bne.n	8008772 <UART_SetConfig+0x1af2>
 800876c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008770:	e022      	b.n	80087b8 <UART_SetConfig+0x1b38>
 8008772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008776:	e01f      	b.n	80087b8 <UART_SetConfig+0x1b38>
 8008778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800877c:	e01c      	b.n	80087b8 <UART_SetConfig+0x1b38>
 800877e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008782:	e019      	b.n	80087b8 <UART_SetConfig+0x1b38>
 8008784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008788:	e016      	b.n	80087b8 <UART_SetConfig+0x1b38>
 800878a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800878e:	e013      	b.n	80087b8 <UART_SetConfig+0x1b38>
 8008790:	f241 5354 	movw	r3, #5460	; 0x1554
 8008794:	e010      	b.n	80087b8 <UART_SetConfig+0x1b38>
 8008796:	f641 1398 	movw	r3, #6552	; 0x1998
 800879a:	e00d      	b.n	80087b8 <UART_SetConfig+0x1b38>
 800879c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087a0:	e00a      	b.n	80087b8 <UART_SetConfig+0x1b38>
 80087a2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80087a6:	e007      	b.n	80087b8 <UART_SetConfig+0x1b38>
 80087a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087ac:	e004      	b.n	80087b8 <UART_SetConfig+0x1b38>
 80087ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b2:	e001      	b.n	80087b8 <UART_SetConfig+0x1b38>
 80087b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6852      	ldr	r2, [r2, #4]
 80087bc:	0852      	lsrs	r2, r2, #1
 80087be:	441a      	add	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087cc:	e003      	b.n	80087d6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80087d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	2b0f      	cmp	r3, #15
 80087da:	d916      	bls.n	800880a <UART_SetConfig+0x1b8a>
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e2:	d212      	bcs.n	800880a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f023 030f 	bic.w	r3, r3, #15
 80087ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	085b      	lsrs	r3, r3, #1
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087fc:	4313      	orrs	r3, r2
 80087fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008806:	60da      	str	r2, [r3, #12]
 8008808:	e3a3      	b.n	8008f52 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008810:	e39f      	b.n	8008f52 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008812:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	f200 8388 	bhi.w	8008f2c <UART_SetConfig+0x22ac>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x1ba4>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008929 	.word	0x08008929
 8008828:	080089df 	.word	0x080089df
 800882c:	08008f2d 	.word	0x08008f2d
 8008830:	08008f2d 	.word	0x08008f2d
 8008834:	08008a95 	.word	0x08008a95
 8008838:	08008f2d 	.word	0x08008f2d
 800883c:	08008f2d 	.word	0x08008f2d
 8008840:	08008f2d 	.word	0x08008f2d
 8008844:	08008b4f 	.word	0x08008b4f
 8008848:	08008f2d 	.word	0x08008f2d
 800884c:	08008f2d 	.word	0x08008f2d
 8008850:	08008f2d 	.word	0x08008f2d
 8008854:	08008f2d 	.word	0x08008f2d
 8008858:	08008f2d 	.word	0x08008f2d
 800885c:	08008f2d 	.word	0x08008f2d
 8008860:	08008f2d 	.word	0x08008f2d
 8008864:	08008c09 	.word	0x08008c09
 8008868:	08008f2d 	.word	0x08008f2d
 800886c:	08008f2d 	.word	0x08008f2d
 8008870:	08008f2d 	.word	0x08008f2d
 8008874:	08008f2d 	.word	0x08008f2d
 8008878:	08008f2d 	.word	0x08008f2d
 800887c:	08008f2d 	.word	0x08008f2d
 8008880:	08008f2d 	.word	0x08008f2d
 8008884:	08008f2d 	.word	0x08008f2d
 8008888:	08008f2d 	.word	0x08008f2d
 800888c:	08008f2d 	.word	0x08008f2d
 8008890:	08008f2d 	.word	0x08008f2d
 8008894:	08008f2d 	.word	0x08008f2d
 8008898:	08008f2d 	.word	0x08008f2d
 800889c:	08008f2d 	.word	0x08008f2d
 80088a0:	08008f2d 	.word	0x08008f2d
 80088a4:	08008d79 	.word	0x08008d79
 80088a8:	08008f2d 	.word	0x08008f2d
 80088ac:	08008f2d 	.word	0x08008f2d
 80088b0:	08008f2d 	.word	0x08008f2d
 80088b4:	08008f2d 	.word	0x08008f2d
 80088b8:	08008f2d 	.word	0x08008f2d
 80088bc:	08008f2d 	.word	0x08008f2d
 80088c0:	08008f2d 	.word	0x08008f2d
 80088c4:	08008f2d 	.word	0x08008f2d
 80088c8:	08008f2d 	.word	0x08008f2d
 80088cc:	08008f2d 	.word	0x08008f2d
 80088d0:	08008f2d 	.word	0x08008f2d
 80088d4:	08008f2d 	.word	0x08008f2d
 80088d8:	08008f2d 	.word	0x08008f2d
 80088dc:	08008f2d 	.word	0x08008f2d
 80088e0:	08008f2d 	.word	0x08008f2d
 80088e4:	08008f2d 	.word	0x08008f2d
 80088e8:	08008f2d 	.word	0x08008f2d
 80088ec:	08008f2d 	.word	0x08008f2d
 80088f0:	08008f2d 	.word	0x08008f2d
 80088f4:	08008f2d 	.word	0x08008f2d
 80088f8:	08008f2d 	.word	0x08008f2d
 80088fc:	08008f2d 	.word	0x08008f2d
 8008900:	08008f2d 	.word	0x08008f2d
 8008904:	08008f2d 	.word	0x08008f2d
 8008908:	08008f2d 	.word	0x08008f2d
 800890c:	08008f2d 	.word	0x08008f2d
 8008910:	08008f2d 	.word	0x08008f2d
 8008914:	08008f2d 	.word	0x08008f2d
 8008918:	08008f2d 	.word	0x08008f2d
 800891c:	08008f2d 	.word	0x08008f2d
 8008920:	08008f2d 	.word	0x08008f2d
 8008924:	08008e6d 	.word	0x08008e6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008928:	f7fc fb06 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 800892c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	2b00      	cmp	r3, #0
 8008934:	d044      	beq.n	80089c0 <UART_SetConfig+0x1d40>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	2b01      	cmp	r3, #1
 800893c:	d03e      	beq.n	80089bc <UART_SetConfig+0x1d3c>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	2b02      	cmp	r3, #2
 8008944:	d038      	beq.n	80089b8 <UART_SetConfig+0x1d38>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2b03      	cmp	r3, #3
 800894c:	d032      	beq.n	80089b4 <UART_SetConfig+0x1d34>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	2b04      	cmp	r3, #4
 8008954:	d02c      	beq.n	80089b0 <UART_SetConfig+0x1d30>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	2b05      	cmp	r3, #5
 800895c:	d026      	beq.n	80089ac <UART_SetConfig+0x1d2c>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2b06      	cmp	r3, #6
 8008964:	d020      	beq.n	80089a8 <UART_SetConfig+0x1d28>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2b07      	cmp	r3, #7
 800896c:	d01a      	beq.n	80089a4 <UART_SetConfig+0x1d24>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2b08      	cmp	r3, #8
 8008974:	d014      	beq.n	80089a0 <UART_SetConfig+0x1d20>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b09      	cmp	r3, #9
 800897c:	d00e      	beq.n	800899c <UART_SetConfig+0x1d1c>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b0a      	cmp	r3, #10
 8008984:	d008      	beq.n	8008998 <UART_SetConfig+0x1d18>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b0b      	cmp	r3, #11
 800898c:	d102      	bne.n	8008994 <UART_SetConfig+0x1d14>
 800898e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008992:	e016      	b.n	80089c2 <UART_SetConfig+0x1d42>
 8008994:	2301      	movs	r3, #1
 8008996:	e014      	b.n	80089c2 <UART_SetConfig+0x1d42>
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	e012      	b.n	80089c2 <UART_SetConfig+0x1d42>
 800899c:	2340      	movs	r3, #64	; 0x40
 800899e:	e010      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089a0:	2320      	movs	r3, #32
 80089a2:	e00e      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089a4:	2310      	movs	r3, #16
 80089a6:	e00c      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089a8:	230c      	movs	r3, #12
 80089aa:	e00a      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089ac:	230a      	movs	r3, #10
 80089ae:	e008      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089b0:	2308      	movs	r3, #8
 80089b2:	e006      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089b4:	2306      	movs	r3, #6
 80089b6:	e004      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089b8:	2304      	movs	r3, #4
 80089ba:	e002      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089bc:	2302      	movs	r3, #2
 80089be:	e000      	b.n	80089c2 <UART_SetConfig+0x1d42>
 80089c0:	2301      	movs	r3, #1
 80089c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	441a      	add	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d8:	b29b      	uxth	r3, r3
 80089da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089dc:	e2aa      	b.n	8008f34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089de:	f7fc fac1 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80089e2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d044      	beq.n	8008a76 <UART_SetConfig+0x1df6>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d03e      	beq.n	8008a72 <UART_SetConfig+0x1df2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d038      	beq.n	8008a6e <UART_SetConfig+0x1dee>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d032      	beq.n	8008a6a <UART_SetConfig+0x1dea>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d02c      	beq.n	8008a66 <UART_SetConfig+0x1de6>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b05      	cmp	r3, #5
 8008a12:	d026      	beq.n	8008a62 <UART_SetConfig+0x1de2>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	d020      	beq.n	8008a5e <UART_SetConfig+0x1dde>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b07      	cmp	r3, #7
 8008a22:	d01a      	beq.n	8008a5a <UART_SetConfig+0x1dda>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d014      	beq.n	8008a56 <UART_SetConfig+0x1dd6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b09      	cmp	r3, #9
 8008a32:	d00e      	beq.n	8008a52 <UART_SetConfig+0x1dd2>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b0a      	cmp	r3, #10
 8008a3a:	d008      	beq.n	8008a4e <UART_SetConfig+0x1dce>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b0b      	cmp	r3, #11
 8008a42:	d102      	bne.n	8008a4a <UART_SetConfig+0x1dca>
 8008a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a48:	e016      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e014      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	e012      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a52:	2340      	movs	r3, #64	; 0x40
 8008a54:	e010      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a56:	2320      	movs	r3, #32
 8008a58:	e00e      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a5a:	2310      	movs	r3, #16
 8008a5c:	e00c      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	e00a      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a62:	230a      	movs	r3, #10
 8008a64:	e008      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a66:	2308      	movs	r3, #8
 8008a68:	e006      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a6a:	2306      	movs	r3, #6
 8008a6c:	e004      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a6e:	2304      	movs	r3, #4
 8008a70:	e002      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e000      	b.n	8008a78 <UART_SetConfig+0x1df8>
 8008a76:	2301      	movs	r3, #1
 8008a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	085b      	lsrs	r3, r3, #1
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a92:	e24f      	b.n	8008f34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a94:	f107 0318 	add.w	r3, r7, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fd f9af 	bl	8005dfc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d044      	beq.n	8008b32 <UART_SetConfig+0x1eb2>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d03e      	beq.n	8008b2e <UART_SetConfig+0x1eae>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d038      	beq.n	8008b2a <UART_SetConfig+0x1eaa>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d032      	beq.n	8008b26 <UART_SetConfig+0x1ea6>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d02c      	beq.n	8008b22 <UART_SetConfig+0x1ea2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	d026      	beq.n	8008b1e <UART_SetConfig+0x1e9e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	2b06      	cmp	r3, #6
 8008ad6:	d020      	beq.n	8008b1a <UART_SetConfig+0x1e9a>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	d01a      	beq.n	8008b16 <UART_SetConfig+0x1e96>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d014      	beq.n	8008b12 <UART_SetConfig+0x1e92>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b09      	cmp	r3, #9
 8008aee:	d00e      	beq.n	8008b0e <UART_SetConfig+0x1e8e>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b0a      	cmp	r3, #10
 8008af6:	d008      	beq.n	8008b0a <UART_SetConfig+0x1e8a>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b0b      	cmp	r3, #11
 8008afe:	d102      	bne.n	8008b06 <UART_SetConfig+0x1e86>
 8008b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b04:	e016      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e014      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b0a:	2380      	movs	r3, #128	; 0x80
 8008b0c:	e012      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b0e:	2340      	movs	r3, #64	; 0x40
 8008b10:	e010      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b12:	2320      	movs	r3, #32
 8008b14:	e00e      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b16:	2310      	movs	r3, #16
 8008b18:	e00c      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	e00a      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b1e:	230a      	movs	r3, #10
 8008b20:	e008      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b22:	2308      	movs	r3, #8
 8008b24:	e006      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b26:	2306      	movs	r3, #6
 8008b28:	e004      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b2a:	2304      	movs	r3, #4
 8008b2c:	e002      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e000      	b.n	8008b34 <UART_SetConfig+0x1eb4>
 8008b32:	2301      	movs	r3, #1
 8008b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	085b      	lsrs	r3, r3, #1
 8008b3e:	441a      	add	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b4c:	e1f2      	b.n	8008f34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b4e:	f107 030c 	add.w	r3, r7, #12
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fd fa9e 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d044      	beq.n	8008bec <UART_SetConfig+0x1f6c>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d03e      	beq.n	8008be8 <UART_SetConfig+0x1f68>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d038      	beq.n	8008be4 <UART_SetConfig+0x1f64>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d032      	beq.n	8008be0 <UART_SetConfig+0x1f60>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d02c      	beq.n	8008bdc <UART_SetConfig+0x1f5c>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	d026      	beq.n	8008bd8 <UART_SetConfig+0x1f58>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	2b06      	cmp	r3, #6
 8008b90:	d020      	beq.n	8008bd4 <UART_SetConfig+0x1f54>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b07      	cmp	r3, #7
 8008b98:	d01a      	beq.n	8008bd0 <UART_SetConfig+0x1f50>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d014      	beq.n	8008bcc <UART_SetConfig+0x1f4c>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b09      	cmp	r3, #9
 8008ba8:	d00e      	beq.n	8008bc8 <UART_SetConfig+0x1f48>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b0a      	cmp	r3, #10
 8008bb0:	d008      	beq.n	8008bc4 <UART_SetConfig+0x1f44>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	2b0b      	cmp	r3, #11
 8008bb8:	d102      	bne.n	8008bc0 <UART_SetConfig+0x1f40>
 8008bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bbe:	e016      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e014      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	e012      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bc8:	2340      	movs	r3, #64	; 0x40
 8008bca:	e010      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	e00e      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	e00c      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	e00a      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bd8:	230a      	movs	r3, #10
 8008bda:	e008      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bdc:	2308      	movs	r3, #8
 8008bde:	e006      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008be0:	2306      	movs	r3, #6
 8008be2:	e004      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008be4:	2304      	movs	r3, #4
 8008be6:	e002      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e000      	b.n	8008bee <UART_SetConfig+0x1f6e>
 8008bec:	2301      	movs	r3, #1
 8008bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	441a      	add	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c06:	e195      	b.n	8008f34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c08:	4b87      	ldr	r3, [pc, #540]	; (8008e28 <UART_SetConfig+0x21a8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05d      	beq.n	8008cd0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c14:	4b84      	ldr	r3, [pc, #528]	; (8008e28 <UART_SetConfig+0x21a8>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	08db      	lsrs	r3, r3, #3
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	4a83      	ldr	r2, [pc, #524]	; (8008e2c <UART_SetConfig+0x21ac>)
 8008c20:	40da      	lsrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d044      	beq.n	8008cb4 <UART_SetConfig+0x2034>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d03e      	beq.n	8008cb0 <UART_SetConfig+0x2030>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d038      	beq.n	8008cac <UART_SetConfig+0x202c>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d032      	beq.n	8008ca8 <UART_SetConfig+0x2028>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d02c      	beq.n	8008ca4 <UART_SetConfig+0x2024>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d026      	beq.n	8008ca0 <UART_SetConfig+0x2020>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b06      	cmp	r3, #6
 8008c58:	d020      	beq.n	8008c9c <UART_SetConfig+0x201c>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b07      	cmp	r3, #7
 8008c60:	d01a      	beq.n	8008c98 <UART_SetConfig+0x2018>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d014      	beq.n	8008c94 <UART_SetConfig+0x2014>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d00e      	beq.n	8008c90 <UART_SetConfig+0x2010>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b0a      	cmp	r3, #10
 8008c78:	d008      	beq.n	8008c8c <UART_SetConfig+0x200c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b0b      	cmp	r3, #11
 8008c80:	d102      	bne.n	8008c88 <UART_SetConfig+0x2008>
 8008c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c86:	e016      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e014      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008c8c:	2380      	movs	r3, #128	; 0x80
 8008c8e:	e012      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008c90:	2340      	movs	r3, #64	; 0x40
 8008c92:	e010      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008c94:	2320      	movs	r3, #32
 8008c96:	e00e      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	e00c      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	e00a      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008ca0:	230a      	movs	r3, #10
 8008ca2:	e008      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	e006      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008ca8:	2306      	movs	r3, #6
 8008caa:	e004      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008cac:	2304      	movs	r3, #4
 8008cae:	e002      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e000      	b.n	8008cb6 <UART_SetConfig+0x2036>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	441a      	add	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008cce:	e131      	b.n	8008f34 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d043      	beq.n	8008d60 <UART_SetConfig+0x20e0>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d03d      	beq.n	8008d5c <UART_SetConfig+0x20dc>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d037      	beq.n	8008d58 <UART_SetConfig+0x20d8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d031      	beq.n	8008d54 <UART_SetConfig+0x20d4>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d02b      	beq.n	8008d50 <UART_SetConfig+0x20d0>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d025      	beq.n	8008d4c <UART_SetConfig+0x20cc>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	2b06      	cmp	r3, #6
 8008d06:	d01f      	beq.n	8008d48 <UART_SetConfig+0x20c8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b07      	cmp	r3, #7
 8008d0e:	d019      	beq.n	8008d44 <UART_SetConfig+0x20c4>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d013      	beq.n	8008d40 <UART_SetConfig+0x20c0>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d00d      	beq.n	8008d3c <UART_SetConfig+0x20bc>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b0a      	cmp	r3, #10
 8008d26:	d007      	beq.n	8008d38 <UART_SetConfig+0x20b8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	2b0b      	cmp	r3, #11
 8008d2e:	d101      	bne.n	8008d34 <UART_SetConfig+0x20b4>
 8008d30:	4b3f      	ldr	r3, [pc, #252]	; (8008e30 <UART_SetConfig+0x21b0>)
 8008d32:	e016      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d34:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <UART_SetConfig+0x21ac>)
 8008d36:	e014      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d38:	4b3e      	ldr	r3, [pc, #248]	; (8008e34 <UART_SetConfig+0x21b4>)
 8008d3a:	e012      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d3c:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <UART_SetConfig+0x21b8>)
 8008d3e:	e010      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d40:	4b3e      	ldr	r3, [pc, #248]	; (8008e3c <UART_SetConfig+0x21bc>)
 8008d42:	e00e      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d44:	4b3e      	ldr	r3, [pc, #248]	; (8008e40 <UART_SetConfig+0x21c0>)
 8008d46:	e00c      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d48:	4b3e      	ldr	r3, [pc, #248]	; (8008e44 <UART_SetConfig+0x21c4>)
 8008d4a:	e00a      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d4c:	4b3e      	ldr	r3, [pc, #248]	; (8008e48 <UART_SetConfig+0x21c8>)
 8008d4e:	e008      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d50:	4b3e      	ldr	r3, [pc, #248]	; (8008e4c <UART_SetConfig+0x21cc>)
 8008d52:	e006      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d54:	4b3e      	ldr	r3, [pc, #248]	; (8008e50 <UART_SetConfig+0x21d0>)
 8008d56:	e004      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d58:	4b3e      	ldr	r3, [pc, #248]	; (8008e54 <UART_SetConfig+0x21d4>)
 8008d5a:	e002      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d5c:	4b3e      	ldr	r3, [pc, #248]	; (8008e58 <UART_SetConfig+0x21d8>)
 8008d5e:	e000      	b.n	8008d62 <UART_SetConfig+0x20e2>
 8008d60:	4b32      	ldr	r3, [pc, #200]	; (8008e2c <UART_SetConfig+0x21ac>)
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6852      	ldr	r2, [r2, #4]
 8008d66:	0852      	lsrs	r2, r2, #1
 8008d68:	441a      	add	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d76:	e0dd      	b.n	8008f34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d046      	beq.n	8008e0e <UART_SetConfig+0x218e>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d040      	beq.n	8008e0a <UART_SetConfig+0x218a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d03a      	beq.n	8008e06 <UART_SetConfig+0x2186>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d034      	beq.n	8008e02 <UART_SetConfig+0x2182>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d02e      	beq.n	8008dfe <UART_SetConfig+0x217e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	d028      	beq.n	8008dfa <UART_SetConfig+0x217a>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	d022      	beq.n	8008df6 <UART_SetConfig+0x2176>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b07      	cmp	r3, #7
 8008db6:	d01c      	beq.n	8008df2 <UART_SetConfig+0x2172>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d016      	beq.n	8008dee <UART_SetConfig+0x216e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	d00f      	beq.n	8008de8 <UART_SetConfig+0x2168>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	2b0a      	cmp	r3, #10
 8008dce:	d008      	beq.n	8008de2 <UART_SetConfig+0x2162>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b0b      	cmp	r3, #11
 8008dd6:	d102      	bne.n	8008dde <UART_SetConfig+0x215e>
 8008dd8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008ddc:	e018      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008dde:	4b18      	ldr	r3, [pc, #96]	; (8008e40 <UART_SetConfig+0x21c0>)
 8008de0:	e016      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008de2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008de6:	e013      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008de8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008dec:	e010      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008dee:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <UART_SetConfig+0x21dc>)
 8008df0:	e00e      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <UART_SetConfig+0x21b0>)
 8008df4:	e00c      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008df6:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <UART_SetConfig+0x21e0>)
 8008df8:	e00a      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008dfa:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <UART_SetConfig+0x21e4>)
 8008dfc:	e008      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <UART_SetConfig+0x21b4>)
 8008e00:	e006      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008e02:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <UART_SetConfig+0x21e8>)
 8008e04:	e004      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <UART_SetConfig+0x21b8>)
 8008e08:	e002      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <UART_SetConfig+0x21bc>)
 8008e0c:	e000      	b.n	8008e10 <UART_SetConfig+0x2190>
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <UART_SetConfig+0x21c0>)
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6852      	ldr	r2, [r2, #4]
 8008e14:	0852      	lsrs	r2, r2, #1
 8008e16:	441a      	add	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e24:	e086      	b.n	8008f34 <UART_SetConfig+0x22b4>
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	03d09000 	.word	0x03d09000
 8008e30:	0003d090 	.word	0x0003d090
 8008e34:	0007a120 	.word	0x0007a120
 8008e38:	000f4240 	.word	0x000f4240
 8008e3c:	001e8480 	.word	0x001e8480
 8008e40:	003d0900 	.word	0x003d0900
 8008e44:	00516155 	.word	0x00516155
 8008e48:	0061a800 	.word	0x0061a800
 8008e4c:	007a1200 	.word	0x007a1200
 8008e50:	00a2c2aa 	.word	0x00a2c2aa
 8008e54:	00f42400 	.word	0x00f42400
 8008e58:	01e84800 	.word	0x01e84800
 8008e5c:	0001e848 	.word	0x0001e848
 8008e60:	00051615 	.word	0x00051615
 8008e64:	00061a80 	.word	0x00061a80
 8008e68:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d04e      	beq.n	8008f12 <UART_SetConfig+0x2292>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d047      	beq.n	8008f0c <UART_SetConfig+0x228c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d040      	beq.n	8008f06 <UART_SetConfig+0x2286>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d039      	beq.n	8008f00 <UART_SetConfig+0x2280>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d032      	beq.n	8008efa <UART_SetConfig+0x227a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b05      	cmp	r3, #5
 8008e9a:	d02b      	beq.n	8008ef4 <UART_SetConfig+0x2274>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b06      	cmp	r3, #6
 8008ea2:	d024      	beq.n	8008eee <UART_SetConfig+0x226e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b07      	cmp	r3, #7
 8008eaa:	d01d      	beq.n	8008ee8 <UART_SetConfig+0x2268>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d016      	beq.n	8008ee2 <UART_SetConfig+0x2262>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b09      	cmp	r3, #9
 8008eba:	d00f      	beq.n	8008edc <UART_SetConfig+0x225c>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b0a      	cmp	r3, #10
 8008ec2:	d008      	beq.n	8008ed6 <UART_SetConfig+0x2256>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b0b      	cmp	r3, #11
 8008eca:	d101      	bne.n	8008ed0 <UART_SetConfig+0x2250>
 8008ecc:	2380      	movs	r3, #128	; 0x80
 8008ece:	e022      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed4:	e01f      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eda:	e01c      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ee0:	e019      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee6:	e016      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eec:	e013      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008eee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008ef2:	e010      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008ef4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008ef8:	e00d      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008efe:	e00a      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008f00:	f241 5355 	movw	r3, #5461	; 0x1555
 8008f04:	e007      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f0a:	e004      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f10:	e001      	b.n	8008f16 <UART_SetConfig+0x2296>
 8008f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6852      	ldr	r2, [r2, #4]
 8008f1a:	0852      	lsrs	r2, r2, #1
 8008f1c:	441a      	add	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f2a:	e003      	b.n	8008f34 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d908      	bls.n	8008f4c <UART_SetConfig+0x22cc>
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f40:	d204      	bcs.n	8008f4c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f48:	60da      	str	r2, [r3, #12]
 8008f4a:	e002      	b.n	8008f52 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3740      	adds	r7, #64	; 0x40
 8008f76:	46bd      	mov	sp, r7
 8008f78:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01a      	beq.n	8009092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907a:	d10a      	bne.n	8009092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	605a      	str	r2, [r3, #4]
  }
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80090d0:	f7f8 fc6c 	bl	80019ac <HAL_GetTick>
 80090d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d10e      	bne.n	8009102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f82c 	bl	8009150 <UART_WaitOnFlagUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e022      	b.n	8009148 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b04      	cmp	r3, #4
 800910e:	d10e      	bne.n	800912e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f816 	bl	8009150 <UART_WaitOnFlagUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e00c      	b.n	8009148 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2220      	movs	r2, #32
 8009132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	4613      	mov	r3, r2
 800915e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009160:	e062      	b.n	8009228 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d05e      	beq.n	8009228 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800916a:	f7f8 fc1f 	bl	80019ac <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <UART_WaitOnFlagUntilTimeout+0x30>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d11d      	bne.n	80091bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800918e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0201 	bic.w	r2, r2, #1
 800919e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e045      	b.n	8009248 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d02e      	beq.n	8009228 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091d8:	d126      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 0201 	bic.w	r2, r2, #1
 8009202:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2220      	movs	r2, #32
 8009210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e00f      	b.n	8009248 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69da      	ldr	r2, [r3, #28]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4013      	ands	r3, r2
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	429a      	cmp	r2, r3
 8009236:	bf0c      	ite	eq
 8009238:	2301      	moveq	r3, #1
 800923a:	2300      	movne	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	429a      	cmp	r2, r3
 8009244:	d08d      	beq.n	8009162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <HAL_UARTEx_DisableFifoMode+0x16>
 8009262:	2302      	movs	r3, #2
 8009264:	e027      	b.n	80092b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 0201 	bic.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e02d      	b.n	8009336 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	; 0x24
 80092e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f850 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009352:	2302      	movs	r3, #2
 8009354:	e02d      	b.n	80093b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2224      	movs	r2, #36	; 0x24
 8009362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0201 	bic.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f812 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b089      	sub	sp, #36	; 0x24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80093c4:	4a2f      	ldr	r2, [pc, #188]	; (8009484 <UARTEx_SetNbDataToProcess+0xc8>)
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093ce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80093d2:	4a2d      	ldr	r2, [pc, #180]	; (8009488 <UARTEx_SetNbDataToProcess+0xcc>)
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093dc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093f8:	e03d      	b.n	8009476 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093fa:	2308      	movs	r3, #8
 80093fc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093fe:	2308      	movs	r3, #8
 8009400:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	0e5b      	lsrs	r3, r3, #25
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009422:	7fbb      	ldrb	r3, [r7, #30]
 8009424:	7f3a      	ldrb	r2, [r7, #28]
 8009426:	f107 0120 	add.w	r1, r7, #32
 800942a:	440a      	add	r2, r1
 800942c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
 8009434:	7f3a      	ldrb	r2, [r7, #28]
 8009436:	f107 0120 	add.w	r1, r7, #32
 800943a:	440a      	add	r2, r1
 800943c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009440:	fb93 f3f2 	sdiv	r3, r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	7f7a      	ldrb	r2, [r7, #29]
 8009450:	f107 0120 	add.w	r1, r7, #32
 8009454:	440a      	add	r2, r1
 8009456:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	7f7a      	ldrb	r2, [r7, #29]
 8009460:	f107 0120 	add.w	r1, r7, #32
 8009464:	440a      	add	r2, r1
 8009466:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800946a:	fb93 f3f2 	sdiv	r3, r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009476:	bf00      	nop
 8009478:	3724      	adds	r7, #36	; 0x24
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	0801a67c 	.word	0x0801a67c
 8009488:	0801a684 	.word	0x0801a684

0800948c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800948c:	b084      	sub	sp, #16
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	f107 001c 	add.w	r0, r7, #28
 800949a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d120      	bne.n	80094e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	4b25      	ldr	r3, [pc, #148]	; (800954c <USB_CoreInit+0xc0>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d105      	bne.n	80094da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa4c 	bl	8009978 <USB_CoreReset>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]
 80094e4:	e01a      	b.n	800951c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa40 	bl	8009978 <USB_CoreReset>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
 800950e:	e005      	b.n	800951c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2b01      	cmp	r3, #1
 8009520:	d10b      	bne.n	800953a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f043 0206 	orr.w	r2, r3, #6
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f043 0220 	orr.w	r2, r3, #32
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009546:	b004      	add	sp, #16
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	ffbdffbf 	.word	0xffbdffbf

08009550 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f023 0201 	bic.w	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d106      	bne.n	800959e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
 800959c:	e00b      	b.n	80095b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60da      	str	r2, [r3, #12]
 80095b0:	e001      	b.n	80095b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e003      	b.n	80095be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80095b6:	2032      	movs	r0, #50	; 0x32
 80095b8:	f7f8 fa04 	bl	80019c4 <HAL_Delay>

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095c8:	b084      	sub	sp, #16
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
 80095e6:	e009      	b.n	80095fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3340      	adds	r3, #64	; 0x40
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	2200      	movs	r2, #0
 80095f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	2b0e      	cmp	r3, #14
 8009600:	d9f2      	bls.n	80095e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d11c      	bne.n	8009642 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009616:	f043 0302 	orr.w	r3, r3, #2
 800961a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e005      	b.n	800964e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009654:	461a      	mov	r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	4619      	mov	r1, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009668:	461a      	mov	r2, r3
 800966a:	680b      	ldr	r3, [r1, #0]
 800966c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10c      	bne.n	800968e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f949 	bl	8009914 <USB_SetDevSpeed>
 8009682:	e008      	b.n	8009696 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009684:	2101      	movs	r1, #1
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f944 	bl	8009914 <USB_SetDevSpeed>
 800968c:	e003      	b.n	8009696 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800968e:	2103      	movs	r1, #3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f93f 	bl	8009914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009696:	2110      	movs	r1, #16
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8f3 	bl	8009884 <USB_FlushTxFifo>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f911 	bl	80098d0 <USB_FlushRxFifo>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096be:	461a      	mov	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	461a      	mov	r2, r3
 80096cc:	2300      	movs	r3, #0
 80096ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d6:	461a      	mov	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	e043      	b.n	800976a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f8:	d118      	bne.n	800972c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970c:	461a      	mov	r2, r3
 800970e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e013      	b.n	800973e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	461a      	mov	r2, r3
 8009724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e008      	b.n	800973e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	461a      	mov	r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974a:	461a      	mov	r2, r3
 800974c:	2300      	movs	r3, #0
 800974e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975c:	461a      	mov	r2, r3
 800975e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3301      	adds	r3, #1
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d3b7      	bcc.n	80096e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e043      	b.n	8009800 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800978a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800978e:	d118      	bne.n	80097c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	461a      	mov	r2, r3
 80097a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e013      	b.n	80097d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b8:	461a      	mov	r2, r3
 80097ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	e008      	b.n	80097d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	461a      	mov	r2, r3
 80097d0:	2300      	movs	r3, #0
 80097d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e0:	461a      	mov	r2, r3
 80097e2:	2300      	movs	r3, #0
 80097e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f2:	461a      	mov	r2, r3
 80097f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3301      	adds	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	429a      	cmp	r2, r3
 8009806:	d3b7      	bcc.n	8009778 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800981a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f043 0210 	orr.w	r2, r3, #16
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <USB_DevInit+0x2b4>)
 8009842:	4313      	orrs	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f043 0208 	orr.w	r2, r3, #8
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d105      	bne.n	800986c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	4b06      	ldr	r3, [pc, #24]	; (8009880 <USB_DevInit+0x2b8>)
 8009866:	4313      	orrs	r3, r2
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009878:	b004      	add	sp, #16
 800987a:	4770      	bx	lr
 800987c:	803c3800 	.word	0x803c3800
 8009880:	40000004 	.word	0x40000004

08009884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	019b      	lsls	r3, r3, #6
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a09      	ldr	r2, [pc, #36]	; (80098cc <USB_FlushTxFifo+0x48>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d901      	bls.n	80098b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e006      	b.n	80098be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d0f0      	beq.n	800989e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	00030d40 	.word	0x00030d40

080098d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2210      	movs	r2, #16
 80098e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a09      	ldr	r2, [pc, #36]	; (8009910 <USB_FlushRxFifo+0x40>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d901      	bls.n	80098f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e006      	b.n	8009902 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	d0f0      	beq.n	80098e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	00030d40 	.word	0x00030d40

08009914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009934:	4313      	orrs	r3, r2
 8009936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009960:	f043 0302 	orr.w	r3, r3, #2
 8009964:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009966:	2003      	movs	r0, #3
 8009968:	f7f8 f82c 	bl	80019c4 <HAL_Delay>

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4a13      	ldr	r2, [pc, #76]	; (80099dc <USB_CoreReset+0x64>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d901      	bls.n	8009996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e01b      	b.n	80099ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	daf2      	bge.n	8009984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f043 0201 	orr.w	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4a09      	ldr	r2, [pc, #36]	; (80099dc <USB_CoreReset+0x64>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d901      	bls.n	80099c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e006      	b.n	80099ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d0f0      	beq.n	80099ae <USB_CoreReset+0x36>

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	00030d40 	.word	0x00030d40

080099e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80099e6:	4b8c      	ldr	r3, [pc, #560]	; (8009c18 <MX_LWIP_Init+0x238>)
 80099e8:	22a9      	movs	r2, #169	; 0xa9
 80099ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 80099ec:	4b8a      	ldr	r3, [pc, #552]	; (8009c18 <MX_LWIP_Init+0x238>)
 80099ee:	22fe      	movs	r2, #254	; 0xfe
 80099f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80099f2:	4b89      	ldr	r3, [pc, #548]	; (8009c18 <MX_LWIP_Init+0x238>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 80099f8:	4b87      	ldr	r3, [pc, #540]	; (8009c18 <MX_LWIP_Init+0x238>)
 80099fa:	2214      	movs	r2, #20
 80099fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80099fe:	4b87      	ldr	r3, [pc, #540]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009a00:	22ff      	movs	r2, #255	; 0xff
 8009a02:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009a04:	4b85      	ldr	r3, [pc, #532]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009a06:	22ff      	movs	r2, #255	; 0xff
 8009a08:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8009a0a:	4b84      	ldr	r3, [pc, #528]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009a10:	4b82      	ldr	r3, [pc, #520]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009a16:	4b82      	ldr	r3, [pc, #520]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009a1c:	4b80      	ldr	r3, [pc, #512]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009a22:	4b7f      	ldr	r3, [pc, #508]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009a28:	4b7d      	ldr	r3, [pc, #500]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009a2e:	2100      	movs	r1, #0
 8009a30:	2000      	movs	r0, #0
 8009a32:	f005 fe05 	bl	800f640 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009a36:	4b78      	ldr	r3, [pc, #480]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	061a      	lsls	r2, r3, #24
 8009a3c:	4b76      	ldr	r3, [pc, #472]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	431a      	orrs	r2, r3
 8009a44:	4b74      	ldr	r3, [pc, #464]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a46:	789b      	ldrb	r3, [r3, #2]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	4a72      	ldr	r2, [pc, #456]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a4e:	78d2      	ldrb	r2, [r2, #3]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	061a      	lsls	r2, r3, #24
 8009a54:	4b70      	ldr	r3, [pc, #448]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	0619      	lsls	r1, r3, #24
 8009a5a:	4b6f      	ldr	r3, [pc, #444]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a5c:	785b      	ldrb	r3, [r3, #1]
 8009a5e:	041b      	lsls	r3, r3, #16
 8009a60:	4319      	orrs	r1, r3
 8009a62:	4b6d      	ldr	r3, [pc, #436]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a64:	789b      	ldrb	r3, [r3, #2]
 8009a66:	021b      	lsls	r3, r3, #8
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	496b      	ldr	r1, [pc, #428]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a6c:	78c9      	ldrb	r1, [r1, #3]
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a76:	431a      	orrs	r2, r3
 8009a78:	4b67      	ldr	r3, [pc, #412]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	0619      	lsls	r1, r3, #24
 8009a7e:	4b66      	ldr	r3, [pc, #408]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	041b      	lsls	r3, r3, #16
 8009a84:	4319      	orrs	r1, r3
 8009a86:	4b64      	ldr	r3, [pc, #400]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a88:	789b      	ldrb	r3, [r3, #2]
 8009a8a:	021b      	lsls	r3, r3, #8
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	4962      	ldr	r1, [pc, #392]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a90:	78c9      	ldrb	r1, [r1, #3]
 8009a92:	430b      	orrs	r3, r1
 8009a94:	0a1b      	lsrs	r3, r3, #8
 8009a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	4b5e      	ldr	r3, [pc, #376]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	0619      	lsls	r1, r3, #24
 8009aa2:	4b5d      	ldr	r3, [pc, #372]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	4319      	orrs	r1, r3
 8009aaa:	4b5b      	ldr	r3, [pc, #364]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009aac:	789b      	ldrb	r3, [r3, #2]
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	4959      	ldr	r1, [pc, #356]	; (8009c18 <MX_LWIP_Init+0x238>)
 8009ab4:	78c9      	ldrb	r1, [r1, #3]
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	0e1b      	lsrs	r3, r3, #24
 8009aba:	4313      	orrs	r3, r2
 8009abc:	4a59      	ldr	r2, [pc, #356]	; (8009c24 <MX_LWIP_Init+0x244>)
 8009abe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009ac0:	4b56      	ldr	r3, [pc, #344]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	061a      	lsls	r2, r3, #24
 8009ac6:	4b55      	ldr	r3, [pc, #340]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009ac8:	785b      	ldrb	r3, [r3, #1]
 8009aca:	041b      	lsls	r3, r3, #16
 8009acc:	431a      	orrs	r2, r3
 8009ace:	4b53      	ldr	r3, [pc, #332]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009ad0:	789b      	ldrb	r3, [r3, #2]
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	4a51      	ldr	r2, [pc, #324]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009ad8:	78d2      	ldrb	r2, [r2, #3]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	061a      	lsls	r2, r3, #24
 8009ade:	4b4f      	ldr	r3, [pc, #316]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	0619      	lsls	r1, r3, #24
 8009ae4:	4b4d      	ldr	r3, [pc, #308]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	4319      	orrs	r1, r3
 8009aec:	4b4b      	ldr	r3, [pc, #300]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009aee:	789b      	ldrb	r3, [r3, #2]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	430b      	orrs	r3, r1
 8009af4:	4949      	ldr	r1, [pc, #292]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009af6:	78c9      	ldrb	r1, [r1, #3]
 8009af8:	430b      	orrs	r3, r1
 8009afa:	021b      	lsls	r3, r3, #8
 8009afc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b00:	431a      	orrs	r2, r3
 8009b02:	4b46      	ldr	r3, [pc, #280]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	0619      	lsls	r1, r3, #24
 8009b08:	4b44      	ldr	r3, [pc, #272]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	041b      	lsls	r3, r3, #16
 8009b0e:	4319      	orrs	r1, r3
 8009b10:	4b42      	ldr	r3, [pc, #264]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b12:	789b      	ldrb	r3, [r3, #2]
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	430b      	orrs	r3, r1
 8009b18:	4940      	ldr	r1, [pc, #256]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b1a:	78c9      	ldrb	r1, [r1, #3]
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	0a1b      	lsrs	r3, r3, #8
 8009b20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b24:	431a      	orrs	r2, r3
 8009b26:	4b3d      	ldr	r3, [pc, #244]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	0619      	lsls	r1, r3, #24
 8009b2c:	4b3b      	ldr	r3, [pc, #236]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b2e:	785b      	ldrb	r3, [r3, #1]
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	4319      	orrs	r1, r3
 8009b34:	4b39      	ldr	r3, [pc, #228]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b36:	789b      	ldrb	r3, [r3, #2]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	4937      	ldr	r1, [pc, #220]	; (8009c1c <MX_LWIP_Init+0x23c>)
 8009b3e:	78c9      	ldrb	r1, [r1, #3]
 8009b40:	430b      	orrs	r3, r1
 8009b42:	0e1b      	lsrs	r3, r3, #24
 8009b44:	4313      	orrs	r3, r2
 8009b46:	4a38      	ldr	r2, [pc, #224]	; (8009c28 <MX_LWIP_Init+0x248>)
 8009b48:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009b4a:	4b35      	ldr	r3, [pc, #212]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	061a      	lsls	r2, r3, #24
 8009b50:	4b33      	ldr	r3, [pc, #204]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	041b      	lsls	r3, r3, #16
 8009b56:	431a      	orrs	r2, r3
 8009b58:	4b31      	ldr	r3, [pc, #196]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	4a2f      	ldr	r2, [pc, #188]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b62:	78d2      	ldrb	r2, [r2, #3]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	061a      	lsls	r2, r3, #24
 8009b68:	4b2d      	ldr	r3, [pc, #180]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	0619      	lsls	r1, r3, #24
 8009b6e:	4b2c      	ldr	r3, [pc, #176]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	041b      	lsls	r3, r3, #16
 8009b74:	4319      	orrs	r1, r3
 8009b76:	4b2a      	ldr	r3, [pc, #168]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b78:	789b      	ldrb	r3, [r3, #2]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	4928      	ldr	r1, [pc, #160]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b80:	78c9      	ldrb	r1, [r1, #3]
 8009b82:	430b      	orrs	r3, r1
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	4b24      	ldr	r3, [pc, #144]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	0619      	lsls	r1, r3, #24
 8009b92:	4b23      	ldr	r3, [pc, #140]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	041b      	lsls	r3, r3, #16
 8009b98:	4319      	orrs	r1, r3
 8009b9a:	4b21      	ldr	r3, [pc, #132]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009b9c:	789b      	ldrb	r3, [r3, #2]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	491f      	ldr	r1, [pc, #124]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009ba4:	78c9      	ldrb	r1, [r1, #3]
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	4b1b      	ldr	r3, [pc, #108]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	0619      	lsls	r1, r3, #24
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	041b      	lsls	r3, r3, #16
 8009bbc:	4319      	orrs	r1, r3
 8009bbe:	4b18      	ldr	r3, [pc, #96]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009bc0:	789b      	ldrb	r3, [r3, #2]
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	430b      	orrs	r3, r1
 8009bc6:	4916      	ldr	r1, [pc, #88]	; (8009c20 <MX_LWIP_Init+0x240>)
 8009bc8:	78c9      	ldrb	r1, [r1, #3]
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	0e1b      	lsrs	r3, r3, #24
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	4a16      	ldr	r2, [pc, #88]	; (8009c2c <MX_LWIP_Init+0x24c>)
 8009bd2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009bd4:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <MX_LWIP_Init+0x250>)
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <MX_LWIP_Init+0x254>)
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	4b12      	ldr	r3, [pc, #72]	; (8009c2c <MX_LWIP_Init+0x24c>)
 8009be2:	4a11      	ldr	r2, [pc, #68]	; (8009c28 <MX_LWIP_Init+0x248>)
 8009be4:	490f      	ldr	r1, [pc, #60]	; (8009c24 <MX_LWIP_Init+0x244>)
 8009be6:	4814      	ldr	r0, [pc, #80]	; (8009c38 <MX_LWIP_Init+0x258>)
 8009be8:	f006 fa28 	bl	801003c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009bec:	4812      	ldr	r0, [pc, #72]	; (8009c38 <MX_LWIP_Init+0x258>)
 8009bee:	f006 fb05 	bl	80101fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009bf2:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <MX_LWIP_Init+0x258>)
 8009bf4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009bf8:	089b      	lsrs	r3, r3, #2
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009c04:	480c      	ldr	r0, [pc, #48]	; (8009c38 <MX_LWIP_Init+0x258>)
 8009c06:	f006 fb09 	bl	801021c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009c0a:	e002      	b.n	8009c12 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8009c0c:	480a      	ldr	r0, [pc, #40]	; (8009c38 <MX_LWIP_Init+0x258>)
 8009c0e:	f006 fb49 	bl	80102a4 <netif_set_down>
}
 8009c12:	bf00      	nop
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	2000cf2c 	.word	0x2000cf2c
 8009c1c:	2000cf28 	.word	0x2000cf28
 8009c20:	2000cef0 	.word	0x2000cef0
 8009c24:	2000cf24 	.word	0x2000cf24
 8009c28:	2000cf30 	.word	0x2000cf30
 8009c2c:	2000cf34 	.word	0x2000cf34
 8009c30:	0800f53d 	.word	0x0800f53d
 8009c34:	0800a2c1 	.word	0x0800a2c1
 8009c38:	2000cef4 	.word	0x2000cef4

08009c3c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009c4e:	2320      	movs	r3, #32
 8009c50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c52:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8009c56:	e00b      	b.n	8009c70 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <SCB_InvalidateDCache_by_Addr+0x50>)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4413      	add	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	dcf0      	bgt.n	8009c58 <SCB_InvalidateDCache_by_Addr+0x1c>
 8009c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c7a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	e000ed00 	.word	0xe000ed00

08009c90 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08e      	sub	sp, #56	; 0x38
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	609a      	str	r2, [r3, #8]
 8009ca4:	60da      	str	r2, [r3, #12]
 8009ca6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a5d      	ldr	r2, [pc, #372]	; (8009e24 <HAL_ETH_MspInit+0x194>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	f040 80b3 	bne.w	8009e1a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009cb4:	4b5c      	ldr	r3, [pc, #368]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cba:	4a5b      	ldr	r2, [pc, #364]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009cc4:	4b58      	ldr	r3, [pc, #352]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cce:	623b      	str	r3, [r7, #32]
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009cd2:	4b55      	ldr	r3, [pc, #340]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cd8:	4a53      	ldr	r2, [pc, #332]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009ce2:	4b51      	ldr	r3, [pc, #324]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cec:	61fb      	str	r3, [r7, #28]
 8009cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009cf0:	4b4d      	ldr	r3, [pc, #308]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009cf6:	4a4c      	ldr	r2, [pc, #304]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009d00:	4b49      	ldr	r3, [pc, #292]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0a:	61bb      	str	r3, [r7, #24]
 8009d0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d0e:	4b46      	ldr	r3, [pc, #280]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d14:	4a44      	ldr	r2, [pc, #272]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d16:	f043 0304 	orr.w	r3, r3, #4
 8009d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d1e:	4b42      	ldr	r3, [pc, #264]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d2c:	4b3e      	ldr	r3, [pc, #248]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d32:	4a3d      	ldr	r2, [pc, #244]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d34:	f043 0301 	orr.w	r3, r3, #1
 8009d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d3c:	4b3a      	ldr	r3, [pc, #232]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d4a:	4b37      	ldr	r3, [pc, #220]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d50:	4a35      	ldr	r2, [pc, #212]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d52:	f043 0302 	orr.w	r3, r3, #2
 8009d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d5a:	4b33      	ldr	r3, [pc, #204]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009d68:	4b2f      	ldr	r3, [pc, #188]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d6e:	4a2e      	ldr	r2, [pc, #184]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d78:	4b2b      	ldr	r3, [pc, #172]	; (8009e28 <HAL_ETH_MspInit+0x198>)
 8009d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	60bb      	str	r3, [r7, #8]
 8009d84:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009d86:	2332      	movs	r3, #50	; 0x32
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d92:	2300      	movs	r3, #0
 8009d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d96:	230b      	movs	r3, #11
 8009d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4822      	ldr	r0, [pc, #136]	; (8009e2c <HAL_ETH_MspInit+0x19c>)
 8009da2:	f7f9 fdd5 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009da6:	2386      	movs	r3, #134	; 0x86
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009daa:	2302      	movs	r3, #2
 8009dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009db2:	2300      	movs	r3, #0
 8009db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009db6:	230b      	movs	r3, #11
 8009db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	481b      	ldr	r0, [pc, #108]	; (8009e30 <HAL_ETH_MspInit+0x1a0>)
 8009dc2:	f7f9 fdc5 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dd8:	230b      	movs	r3, #11
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de0:	4619      	mov	r1, r3
 8009de2:	4814      	ldr	r0, [pc, #80]	; (8009e34 <HAL_ETH_MspInit+0x1a4>)
 8009de4:	f7f9 fdb4 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009de8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dee:	2302      	movs	r3, #2
 8009df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009df6:	2300      	movs	r3, #0
 8009df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dfa:	230b      	movs	r3, #11
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e02:	4619      	mov	r1, r3
 8009e04:	480c      	ldr	r0, [pc, #48]	; (8009e38 <HAL_ETH_MspInit+0x1a8>)
 8009e06:	f7f9 fda3 	bl	8003950 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2105      	movs	r1, #5
 8009e0e:	203d      	movs	r0, #61	; 0x3d
 8009e10:	f7f7 fed2 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009e14:	203d      	movs	r0, #61	; 0x3d
 8009e16:	f7f7 fee9 	bl	8001bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3738      	adds	r7, #56	; 0x38
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	40028000 	.word	0x40028000
 8009e28:	58024400 	.word	0x58024400
 8009e2c:	58020800 	.word	0x58020800
 8009e30:	58020000 	.word	0x58020000
 8009e34:	58020400 	.word	0x58020400
 8009e38:	58021800 	.word	0x58021800

08009e3c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009e44:	4b04      	ldr	r3, [pc, #16]	; (8009e58 <HAL_ETH_RxCpltCallback+0x1c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fc93 	bl	800a774 <osSemaphoreRelease>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	2000030c 	.word	0x2000030c

08009e5c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009e5c:	b5b0      	push	{r4, r5, r7, lr}
 8009e5e:	b0ac      	sub	sp, #176	; 0xb0
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009e70:	4b90      	ldr	r3, [pc, #576]	; (800a0b4 <low_level_init+0x258>)
 8009e72:	4a91      	ldr	r2, [pc, #580]	; (800a0b8 <low_level_init+0x25c>)
 8009e74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009e76:	2300      	movs	r3, #0
 8009e78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009e7c:	2380      	movs	r3, #128	; 0x80
 8009e7e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009e82:	23e1      	movs	r3, #225	; 0xe1
 8009e84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009e9a:	4a86      	ldr	r2, [pc, #536]	; (800a0b4 <low_level_init+0x258>)
 8009e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ea0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009ea2:	4b84      	ldr	r3, [pc, #528]	; (800a0b4 <low_level_init+0x258>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009ea8:	4b82      	ldr	r3, [pc, #520]	; (800a0b4 <low_level_init+0x258>)
 8009eaa:	4a84      	ldr	r2, [pc, #528]	; (800a0bc <low_level_init+0x260>)
 8009eac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009eae:	4b81      	ldr	r3, [pc, #516]	; (800a0b4 <low_level_init+0x258>)
 8009eb0:	4a83      	ldr	r2, [pc, #524]	; (800a0c0 <low_level_init+0x264>)
 8009eb2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8009eb4:	4b7f      	ldr	r3, [pc, #508]	; (800a0b4 <low_level_init+0x258>)
 8009eb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009eba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009ebc:	487d      	ldr	r0, [pc, #500]	; (800a0b4 <low_level_init+0x258>)
 8009ebe:	f7f7 ff2f 	bl	8001d20 <HAL_ETH_Init>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009ec8:	2234      	movs	r2, #52	; 0x34
 8009eca:	2100      	movs	r1, #0
 8009ecc:	487d      	ldr	r0, [pc, #500]	; (800a0c4 <low_level_init+0x268>)
 8009ece:	f00f faef 	bl	80194b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009ed2:	4b7c      	ldr	r3, [pc, #496]	; (800a0c4 <low_level_init+0x268>)
 8009ed4:	2221      	movs	r2, #33	; 0x21
 8009ed6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009ed8:	4b7a      	ldr	r3, [pc, #488]	; (800a0c4 <low_level_init+0x268>)
 8009eda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009ede:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009ee0:	4b78      	ldr	r3, [pc, #480]	; (800a0c4 <low_level_init+0x268>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009ee6:	4878      	ldr	r0, [pc, #480]	; (800a0c8 <low_level_init+0x26c>)
 8009ee8:	f005 ff62 	bl	800fdb0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2206      	movs	r2, #6
 8009ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009ef4:	4b6f      	ldr	r3, [pc, #444]	; (800a0b4 <low_level_init+0x258>)
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009f00:	4b6c      	ldr	r3, [pc, #432]	; (800a0b4 <low_level_init+0x258>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	785a      	ldrb	r2, [r3, #1]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009f0c:	4b69      	ldr	r3, [pc, #420]	; (800a0b4 <low_level_init+0x258>)
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	789a      	ldrb	r2, [r3, #2]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009f18:	4b66      	ldr	r3, [pc, #408]	; (800a0b4 <low_level_init+0x258>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	78da      	ldrb	r2, [r3, #3]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009f24:	4b63      	ldr	r3, [pc, #396]	; (800a0b4 <low_level_init+0x258>)
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	791a      	ldrb	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009f30:	4b60      	ldr	r3, [pc, #384]	; (800a0b4 <low_level_init+0x258>)
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	795a      	ldrb	r2, [r3, #5]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009f42:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009f4a:	f043 030a 	orr.w	r3, r3, #10
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009f56:	2300      	movs	r3, #0
 8009f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f5c:	e012      	b.n	8009f84 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8009f5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f62:	4613      	mov	r3, r2
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	4413      	add	r3, r2
 8009f68:	025b      	lsls	r3, r3, #9
 8009f6a:	4a58      	ldr	r2, [pc, #352]	; (800a0cc <low_level_init+0x270>)
 8009f6c:	441a      	add	r2, r3
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009f74:	484f      	ldr	r0, [pc, #316]	; (800a0b4 <low_level_init+0x258>)
 8009f76:	f7f7 ffad 	bl	8001ed4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f7e:	3301      	adds	r3, #1
 8009f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d9e8      	bls.n	8009f5e <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f90:	2300      	movs	r3, #0
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8009f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f98:	2101      	movs	r1, #1
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fb68 	bl	800a670 <osSemaphoreCreate>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	4b4b      	ldr	r3, [pc, #300]	; (800a0d0 <low_level_init+0x274>)
 8009fa4:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009fa6:	4b4b      	ldr	r3, [pc, #300]	; (800a0d4 <low_level_init+0x278>)
 8009fa8:	f107 040c 	add.w	r4, r7, #12
 8009fac:	461d      	mov	r5, r3
 8009fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009fba:	f107 030c 	add.w	r3, r7, #12
 8009fbe:	6879      	ldr	r1, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fa59 	bl	800a478 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009fc6:	4944      	ldr	r1, [pc, #272]	; (800a0d8 <low_level_init+0x27c>)
 8009fc8:	4844      	ldr	r0, [pc, #272]	; (800a0dc <low_level_init+0x280>)
 8009fca:	f7f7 fb3e 	bl	800164a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009fce:	4843      	ldr	r0, [pc, #268]	; (800a0dc <low_level_init+0x280>)
 8009fd0:	f7f7 fb6d 	bl	80016ae <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009fd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d164      	bne.n	800a0a6 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009fdc:	483f      	ldr	r0, [pc, #252]	; (800a0dc <low_level_init+0x280>)
 8009fde:	f7f7 fc0e 	bl	80017fe <LAN8742_GetLinkState>
 8009fe2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	dc06      	bgt.n	8009ffc <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f006 f99d 	bl	801032e <netif_set_link_down>
      netif_set_down(netif);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f006 f955 	bl	80102a4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009ffa:	e056      	b.n	800a0aa <low_level_init+0x24e>
      switch (PHYLinkState)
 8009ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a000:	3b02      	subs	r3, #2
 800a002:	2b03      	cmp	r3, #3
 800a004:	d82a      	bhi.n	800a05c <low_level_init+0x200>
 800a006:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <low_level_init+0x1b0>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a01d 	.word	0x0800a01d
 800a010:	0800a02f 	.word	0x0800a02f
 800a014:	0800a03f 	.word	0x0800a03f
 800a018:	0800a04f 	.word	0x0800a04f
        duplex = ETH_FULLDUPLEX_MODE;
 800a01c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a024:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a02c:	e01f      	b.n	800a06e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800a02e:	2300      	movs	r3, #0
 800a030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a03c:	e017      	b.n	800a06e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800a03e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a046:	2300      	movs	r3, #0
 800a048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a04c:	e00f      	b.n	800a06e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800a04e:	2300      	movs	r3, #0
 800a050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a054:	2300      	movs	r3, #0
 800a056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a05a:	e008      	b.n	800a06e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800a05c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800a06c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800a06e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a072:	4619      	mov	r1, r3
 800a074:	480f      	ldr	r0, [pc, #60]	; (800a0b4 <low_level_init+0x258>)
 800a076:	f7f8 fc95 	bl	80029a4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a07a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a07e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a080:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a084:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a08a:	4619      	mov	r1, r3
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <low_level_init+0x258>)
 800a08e:	f7f8 fe5d 	bl	8002d4c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a092:	4808      	ldr	r0, [pc, #32]	; (800a0b4 <low_level_init+0x258>)
 800a094:	f7f7 ff5f 	bl	8001f56 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f006 f8bf 	bl	801021c <netif_set_up>
    netif_set_link_up(netif);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f006 f922 	bl	80102e8 <netif_set_link_up>
}
 800a0a4:	e001      	b.n	800a0aa <low_level_init+0x24e>
    Error_Handler();
 800a0a6:	f7f7 f83b 	bl	8001120 <Error_Handler>
}
 800a0aa:	bf00      	nop
 800a0ac:	37b0      	adds	r7, #176	; 0xb0
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000d024 	.word	0x2000d024
 800a0b8:	40028000 	.word	0x40028000
 800a0bc:	30040060 	.word	0x30040060
 800a0c0:	30040000 	.word	0x30040000
 800a0c4:	2000d094 	.word	0x2000d094
 800a0c8:	0801d034 	.word	0x0801d034
 800a0cc:	30040200 	.word	0x30040200
 800a0d0:	2000030c 	.word	0x2000030c
 800a0d4:	0801a694 	.word	0x0801a694
 800a0d8:	20000010 	.word	0x20000010
 800a0dc:	2000d004 	.word	0x2000d004

0800a0e0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b092      	sub	sp, #72	; 0x48
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a0f8:	f107 0308 	add.w	r3, r7, #8
 800a0fc:	2230      	movs	r2, #48	; 0x30
 800a0fe:	2100      	movs	r1, #0
 800a100:	4618      	mov	r0, r3
 800a102:	f00f f9d5 	bl	80194b0 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a10a:	e04f      	b.n	800a1ac <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800a10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d902      	bls.n	800a118 <low_level_output+0x38>
      return ERR_IF;
 800a112:	f06f 030b 	mvn.w	r3, #11
 800a116:	e05a      	b.n	800a1ce <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800a118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a11a:	6859      	ldr	r1, [r3, #4]
 800a11c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a11e:	4613      	mov	r3, r2
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	4413      	add	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a12a:	4413      	add	r3, r2
 800a12c:	3b40      	subs	r3, #64	; 0x40
 800a12e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a132:	895b      	ldrh	r3, [r3, #10]
 800a134:	4619      	mov	r1, r3
 800a136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a138:	4613      	mov	r3, r2
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a144:	4413      	add	r3, r2
 800a146:	3b3c      	subs	r3, #60	; 0x3c
 800a148:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14c:	895b      	ldrh	r3, [r3, #10]
 800a14e:	461a      	mov	r2, r3
 800a150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a152:	4413      	add	r3, r2
 800a154:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800a156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d012      	beq.n	800a182 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15e:	1e5a      	subs	r2, r3, #1
 800a160:	f107 0008 	add.w	r0, r7, #8
 800a164:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a166:	460b      	mov	r3, r1
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	440b      	add	r3, r1
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	18c1      	adds	r1, r0, r3
 800a170:	4613      	mov	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a17c:	4413      	add	r3, r2
 800a17e:	3b38      	subs	r3, #56	; 0x38
 800a180:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800a182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800a18a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a18c:	4613      	mov	r3, r2
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a198:	4413      	add	r3, r2
 800a19a:	3b38      	subs	r3, #56	; 0x38
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800a1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1ac      	bne.n	800a10c <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <low_level_output+0xf8>)
 800a1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b6:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a1b8:	4a07      	ldr	r2, [pc, #28]	; (800a1d8 <low_level_output+0xf8>)
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a1c0:	2214      	movs	r2, #20
 800a1c2:	4905      	ldr	r1, [pc, #20]	; (800a1d8 <low_level_output+0xf8>)
 800a1c4:	4805      	ldr	r0, [pc, #20]	; (800a1dc <low_level_output+0xfc>)
 800a1c6:	f7f7 ff5c 	bl	8002082 <HAL_ETH_Transmit>
  
  return errval;
 800a1ca:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3748      	adds	r7, #72	; 0x48
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2000d094 	.word	0x2000d094
 800a1dc:	2000d024 	.word	0x2000d024

0800a1e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	; 0x28
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800a1f0:	f107 030c 	add.w	r3, r7, #12
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4817      	ldr	r0, [pc, #92]	; (800a254 <low_level_input+0x74>)
 800a1f8:	f7f8 f8ad 	bl	8002356 <HAL_ETH_GetRxDataBuffer>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d122      	bne.n	800a248 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800a202:	f107 0308 	add.w	r3, r7, #8
 800a206:	4619      	mov	r1, r3
 800a208:	4812      	ldr	r0, [pc, #72]	; (800a254 <low_level_input+0x74>)
 800a20a:	f7f8 f942 	bl	8002492 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800a20e:	4811      	ldr	r0, [pc, #68]	; (800a254 <low_level_input+0x74>)
 800a210:	f7f8 f972 	bl	80024f8 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff fd0e 	bl	8009c3c <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a220:	480d      	ldr	r0, [pc, #52]	; (800a258 <low_level_input+0x78>)
 800a222:	f005 fe41 	bl	800fea8 <memp_malloc_pool>
 800a226:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	4a0c      	ldr	r2, [pc, #48]	; (800a25c <low_level_input+0x7c>)
 800a22c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	b299      	uxth	r1, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a238:	9201      	str	r2, [sp, #4]
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2202      	movs	r2, #2
 800a240:	2004      	movs	r0, #4
 800a242:	f006 fa83 	bl	801074c <pbuf_alloced_custom>
 800a246:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800a248:	69fb      	ldr	r3, [r7, #28]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	2000d024 	.word	0x2000d024
 800a258:	0801d034 	.word	0x0801d034
 800a25c:	0800a31d 	.word	0x0800a31d

0800a260 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a26c:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <ethernetif_input+0x58>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f04f 31ff 	mov.w	r1, #4294967295
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fa2f 	bl	800a6d8 <osSemaphoreWait>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1f5      	bne.n	800a26c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a280:	480e      	ldr	r0, [pc, #56]	; (800a2bc <ethernetif_input+0x5c>)
 800a282:	f00f f877 	bl	8019374 <sys_mutex_lock>
        p = low_level_input( netif );
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7ff ffaa 	bl	800a1e0 <low_level_input>
 800a28c:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00a      	beq.n	800a2aa <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	68f9      	ldr	r1, [r7, #12]
 800a29a:	68b8      	ldr	r0, [r7, #8]
 800a29c:	4798      	blx	r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800a2a4:	68b8      	ldr	r0, [r7, #8]
 800a2a6:	f006 fc2f 	bl	8010b08 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a2aa:	4804      	ldr	r0, [pc, #16]	; (800a2bc <ethernetif_input+0x5c>)
 800a2ac:	f00f f871 	bl	8019392 <sys_mutex_unlock>
      } while(p!=NULL);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e4      	bne.n	800a280 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a2b6:	e7d9      	b.n	800a26c <ethernetif_input+0xc>
 800a2b8:	2000030c 	.word	0x2000030c
 800a2bc:	2000d10c 	.word	0x2000d10c

0800a2c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <ethernetif_init+0x1c>
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <ethernetif_init+0x48>)
 800a2d0:	f240 2241 	movw	r2, #577	; 0x241
 800a2d4:	490d      	ldr	r1, [pc, #52]	; (800a30c <ethernetif_init+0x4c>)
 800a2d6:	480e      	ldr	r0, [pc, #56]	; (800a310 <ethernetif_init+0x50>)
 800a2d8:	f00f f8f2 	bl	80194c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2273      	movs	r2, #115	; 0x73
 800a2e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2274      	movs	r2, #116	; 0x74
 800a2e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <ethernetif_init+0x54>)
 800a2f0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a08      	ldr	r2, [pc, #32]	; (800a318 <ethernetif_init+0x58>)
 800a2f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fdaf 	bl	8009e5c <low_level_init>

  return ERR_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	0801a6b0 	.word	0x0801a6b0
 800a30c:	0801a6cc 	.word	0x0801a6cc
 800a310:	0801a6dc 	.word	0x0801a6dc
 800a314:	08017471 	.word	0x08017471
 800a318:	0800a0e1 	.word	0x0800a0e1

0800a31c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	891b      	ldrh	r3, [r3, #8]
 800a330:	4619      	mov	r1, r3
 800a332:	4610      	mov	r0, r2
 800a334:	f7ff fc82 	bl	8009c3c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a338:	68f9      	ldr	r1, [r7, #12]
 800a33a:	4803      	ldr	r0, [pc, #12]	; (800a348 <pbuf_free_custom+0x2c>)
 800a33c:	f005 fe28 	bl	800ff90 <memp_free_pool>
}
 800a340:	bf00      	nop
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	0801d034 	.word	0x0801d034

0800a34c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a350:	f7f7 fb2c 	bl	80019ac <HAL_GetTick>
 800a354:	4603      	mov	r3, r0
}
 800a356:	4618      	mov	r0, r3
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a360:	4802      	ldr	r0, [pc, #8]	; (800a36c <ETH_PHY_IO_Init+0x10>)
 800a362:	f7f8 fd0d 	bl	8002d80 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	2000d024 	.word	0x2000d024

0800a370 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
  return 0;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	68f9      	ldr	r1, [r7, #12]
 800a392:	4807      	ldr	r0, [pc, #28]	; (800a3b0 <ETH_PHY_IO_ReadReg+0x30>)
 800a394:	f7f8 fa5e 	bl	8002854 <HAL_ETH_ReadPHYRegister>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	e000      	b.n	800a3a6 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	2000d024 	.word	0x2000d024

0800a3b4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	68f9      	ldr	r1, [r7, #12]
 800a3c6:	4807      	ldr	r0, [pc, #28]	; (800a3e4 <ETH_PHY_IO_WriteReg+0x30>)
 800a3c8:	f7f8 fa98 	bl	80028fc <HAL_ETH_WritePHYRegister>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d6:	e000      	b.n	800a3da <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000d024 	.word	0x2000d024

0800a3e8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a3ec:	f7f7 fade 	bl	80019ac <HAL_GetTick>
 800a3f0:	4603      	mov	r3, r0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a408:	2b84      	cmp	r3, #132	; 0x84
 800a40a:	d005      	beq.n	800a418 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a40c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	3303      	adds	r3, #3
 800a416:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a418:	68fb      	ldr	r3, [r7, #12]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a42c:	f3ef 8305 	mrs	r3, IPSR
 800a430:	607b      	str	r3, [r7, #4]
  return(result);
 800a432:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a434:	2b00      	cmp	r3, #0
 800a436:	bf14      	ite	ne
 800a438:	2301      	movne	r3, #1
 800a43a:	2300      	moveq	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
}
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a44e:	f001 fd07 	bl	800be60 <vTaskStartScheduler>
  
  return osOK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	bd80      	pop	{r7, pc}

0800a458 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a45c:	f7ff ffe3 	bl	800a426 <inHandlerMode>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a466:	f001 fe13 	bl	800c090 <xTaskGetTickCountFromISR>
 800a46a:	4603      	mov	r3, r0
 800a46c:	e002      	b.n	800a474 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a46e:	f001 fdff 	bl	800c070 <xTaskGetTickCount>
 800a472:	4603      	mov	r3, r0
  }
}
 800a474:	4618      	mov	r0, r3
 800a476:	bd80      	pop	{r7, pc}

0800a478 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47a:	b089      	sub	sp, #36	; 0x24
 800a47c:	af04      	add	r7, sp, #16
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d020      	beq.n	800a4cc <osThreadCreate+0x54>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d01c      	beq.n	800a4cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685c      	ldr	r4, [r3, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681d      	ldr	r5, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691e      	ldr	r6, [r3, #16]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff ffa6 	bl	800a3f6 <makeFreeRtosPriority>
 800a4aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4b4:	9202      	str	r2, [sp, #8]
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	9100      	str	r1, [sp, #0]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	4632      	mov	r2, r6
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f001 fb09 	bl	800bad8 <xTaskCreateStatic>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	e01c      	b.n	800a506 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685c      	ldr	r4, [r3, #4]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4d8:	b29e      	uxth	r6, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff ff88 	bl	800a3f6 <makeFreeRtosPriority>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	f107 030c 	add.w	r3, r7, #12
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	9200      	str	r2, [sp, #0]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f001 fb48 	bl	800bb8c <xTaskCreate>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d001      	beq.n	800a506 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a502:	2300      	movs	r3, #0
 800a504:	e000      	b.n	800a508 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a506:	68fb      	ldr	r3, [r7, #12]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a510 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <osDelay+0x16>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	e000      	b.n	800a528 <osDelay+0x18>
 800a526:	2301      	movs	r3, #1
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 fc65 	bl	800bdf8 <vTaskDelay>
  
  return osOK;
 800a52e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d007      	beq.n	800a558 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4619      	mov	r1, r3
 800a54e:	2001      	movs	r0, #1
 800a550:	f000 fc7f 	bl	800ae52 <xQueueCreateMutexStatic>
 800a554:	4603      	mov	r3, r0
 800a556:	e003      	b.n	800a560 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a558:	2001      	movs	r0, #1
 800a55a:	f000 fc62 	bl	800ae22 <xQueueCreateMutex>
 800a55e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a572:	2300      	movs	r3, #0
 800a574:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <osMutexWait+0x18>
    return osErrorParameter;
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	e03a      	b.n	800a5f6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d103      	bne.n	800a594 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e009      	b.n	800a5a8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d006      	beq.n	800a5a8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <osMutexWait+0x40>
      ticks = 1;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a5a8:	f7ff ff3d 	bl	800a426 <inHandlerMode>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d017      	beq.n	800a5e2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a5b2:	f107 0308 	add.w	r3, r7, #8
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 f860 	bl	800b680 <xQueueReceiveFromISR>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d001      	beq.n	800a5ca <osMutexWait+0x62>
      return osErrorOS;
 800a5c6:	23ff      	movs	r3, #255	; 0xff
 800a5c8:	e015      	b.n	800a5f6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d011      	beq.n	800a5f4 <osMutexWait+0x8c>
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <osMutexWait+0x98>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	e008      	b.n	800a5f4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 ff43 	bl	800b470 <xQueueSemaphoreTake>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d001      	beq.n	800a5f4 <osMutexWait+0x8c>
    return osErrorOS;
 800a5f0:	23ff      	movs	r3, #255	; 0xff
 800a5f2:	e000      	b.n	800a5f6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a610:	2300      	movs	r3, #0
 800a612:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a614:	f7ff ff07 	bl	800a426 <inHandlerMode>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d016      	beq.n	800a64c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a61e:	f107 0308 	add.w	r3, r7, #8
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fdbd 	bl	800b1a4 <xQueueGiveFromISR>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d001      	beq.n	800a634 <osMutexRelease+0x30>
      return osErrorOS;
 800a630:	23ff      	movs	r3, #255	; 0xff
 800a632:	e017      	b.n	800a664 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d013      	beq.n	800a662 <osMutexRelease+0x5e>
 800a63a:	4b0c      	ldr	r3, [pc, #48]	; (800a66c <osMutexRelease+0x68>)
 800a63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	e00a      	b.n	800a662 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a64c:	2300      	movs	r3, #0
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fc18 	bl	800ae88 <xQueueGenericSend>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d001      	beq.n	800a662 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a65e:	23ff      	movs	r3, #255	; 0xff
 800a660:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a662:	68fb      	ldr	r3, [r7, #12]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	e000ed04 	.word	0xe000ed04

0800a670 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d010      	beq.n	800a6a4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d10b      	bne.n	800a6a0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	2303      	movs	r3, #3
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	4613      	mov	r3, r2
 800a692:	2200      	movs	r2, #0
 800a694:	2100      	movs	r1, #0
 800a696:	2001      	movs	r0, #1
 800a698:	f000 fad8 	bl	800ac4c <xQueueGenericCreateStatic>
 800a69c:	4603      	mov	r3, r0
 800a69e:	e016      	b.n	800a6ce <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e014      	b.n	800a6ce <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d110      	bne.n	800a6cc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	f000 fb3f 	bl	800ad32 <xQueueGenericCreate>
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <osSemaphoreCreate+0x58>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 fbe0 	bl	800ae88 <xQueueGenericSend>
      return sema;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	e000      	b.n	800a6ce <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a6cc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a6ec:	2380      	movs	r3, #128	; 0x80
 800a6ee:	e03a      	b.n	800a766 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d103      	bne.n	800a704 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a700:	60fb      	str	r3, [r7, #12]
 800a702:	e009      	b.n	800a718 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d006      	beq.n	800a718 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <osSemaphoreWait+0x40>
      ticks = 1;
 800a714:	2301      	movs	r3, #1
 800a716:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a718:	f7ff fe85 	bl	800a426 <inHandlerMode>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d017      	beq.n	800a752 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a722:	f107 0308 	add.w	r3, r7, #8
 800a726:	461a      	mov	r2, r3
 800a728:	2100      	movs	r1, #0
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 ffa8 	bl	800b680 <xQueueReceiveFromISR>
 800a730:	4603      	mov	r3, r0
 800a732:	2b01      	cmp	r3, #1
 800a734:	d001      	beq.n	800a73a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a736:	23ff      	movs	r3, #255	; 0xff
 800a738:	e015      	b.n	800a766 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d011      	beq.n	800a764 <osSemaphoreWait+0x8c>
 800a740:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <osSemaphoreWait+0x98>)
 800a742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	e008      	b.n	800a764 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a752:	68f9      	ldr	r1, [r7, #12]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fe8b 	bl	800b470 <xQueueSemaphoreTake>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d001      	beq.n	800a764 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a760:	23ff      	movs	r3, #255	; 0xff
 800a762:	e000      	b.n	800a766 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a780:	2300      	movs	r3, #0
 800a782:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a784:	f7ff fe4f 	bl	800a426 <inHandlerMode>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d016      	beq.n	800a7bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a78e:	f107 0308 	add.w	r3, r7, #8
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fd05 	bl	800b1a4 <xQueueGiveFromISR>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d001      	beq.n	800a7a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a7a0:	23ff      	movs	r3, #255	; 0xff
 800a7a2:	e017      	b.n	800a7d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d013      	beq.n	800a7d2 <osSemaphoreRelease+0x5e>
 800a7aa:	4b0c      	ldr	r3, [pc, #48]	; (800a7dc <osSemaphoreRelease+0x68>)
 800a7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	e00a      	b.n	800a7d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a7bc:	2300      	movs	r3, #0
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fb60 	bl	800ae88 <xQueueGenericSend>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d001      	beq.n	800a7d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a7ce:	23ff      	movs	r3, #255	; 0xff
 800a7d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	e000ed04 	.word	0xe000ed04

0800a7e0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a7e8:	f7ff fe1d 	bl	800a426 <inHandlerMode>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a7f2:	2382      	movs	r3, #130	; 0x82
 800a7f4:	e003      	b.n	800a7fe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fff9 	bl	800b7ee <vQueueDelete>

  return osOK; 
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a806:	b590      	push	{r4, r7, lr}
 800a808:	b085      	sub	sp, #20
 800a80a:	af02      	add	r7, sp, #8
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d012      	beq.n	800a83e <osMessageCreate+0x38>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00e      	beq.n	800a83e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6818      	ldr	r0, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6859      	ldr	r1, [r3, #4]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689a      	ldr	r2, [r3, #8]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68dc      	ldr	r4, [r3, #12]
 800a830:	2300      	movs	r3, #0
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	4623      	mov	r3, r4
 800a836:	f000 fa09 	bl	800ac4c <xQueueGenericCreateStatic>
 800a83a:	4603      	mov	r3, r0
 800a83c:	e008      	b.n	800a850 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	4619      	mov	r1, r3
 800a84a:	f000 fa72 	bl	800ad32 <xQueueGenericCreate>
 800a84e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bd90      	pop	{r4, r7, pc}

0800a858 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a864:	2300      	movs	r3, #0
 800a866:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <osMessagePut+0x1e>
    ticks = 1;
 800a872:	2301      	movs	r3, #1
 800a874:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a876:	f7ff fdd6 	bl	800a426 <inHandlerMode>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d018      	beq.n	800a8b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a880:	f107 0210 	add.w	r2, r7, #16
 800a884:	f107 0108 	add.w	r1, r7, #8
 800a888:	2300      	movs	r3, #0
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 fbf6 	bl	800b07c <xQueueGenericSendFromISR>
 800a890:	4603      	mov	r3, r0
 800a892:	2b01      	cmp	r3, #1
 800a894:	d001      	beq.n	800a89a <osMessagePut+0x42>
      return osErrorOS;
 800a896:	23ff      	movs	r3, #255	; 0xff
 800a898:	e018      	b.n	800a8cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d014      	beq.n	800a8ca <osMessagePut+0x72>
 800a8a0:	4b0c      	ldr	r3, [pc, #48]	; (800a8d4 <osMessagePut+0x7c>)
 800a8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a6:	601a      	str	r2, [r3, #0]
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	e00b      	b.n	800a8ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a8b2:	f107 0108 	add.w	r1, r7, #8
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 fae4 	bl	800ae88 <xQueueGenericSend>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d001      	beq.n	800a8ca <osMessagePut+0x72>
      return osErrorOS;
 800a8c6:	23ff      	movs	r3, #255	; 0xff
 800a8c8:	e000      	b.n	800a8cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b08b      	sub	sp, #44	; 0x2c
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a8f2:	2380      	movs	r3, #128	; 0x80
 800a8f4:	617b      	str	r3, [r7, #20]
    return event;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	461c      	mov	r4, r3
 800a8fa:	f107 0314 	add.w	r3, r7, #20
 800a8fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a906:	e054      	b.n	800a9b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a908:	2300      	movs	r3, #0
 800a90a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d103      	bne.n	800a920 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a918:	f04f 33ff 	mov.w	r3, #4294967295
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
 800a91e:	e009      	b.n	800a934 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <osMessageGet+0x5c>
      ticks = 1;
 800a930:	2301      	movs	r3, #1
 800a932:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a934:	f7ff fd77 	bl	800a426 <inHandlerMode>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d01c      	beq.n	800a978 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a93e:	f107 0220 	add.w	r2, r7, #32
 800a942:	f107 0314 	add.w	r3, r7, #20
 800a946:	3304      	adds	r3, #4
 800a948:	4619      	mov	r1, r3
 800a94a:	68b8      	ldr	r0, [r7, #8]
 800a94c:	f000 fe98 	bl	800b680 <xQueueReceiveFromISR>
 800a950:	4603      	mov	r3, r0
 800a952:	2b01      	cmp	r3, #1
 800a954:	d102      	bne.n	800a95c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a956:	2310      	movs	r3, #16
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	e001      	b.n	800a960 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01d      	beq.n	800a9a2 <osMessageGet+0xca>
 800a966:	4b15      	ldr	r3, [pc, #84]	; (800a9bc <osMessageGet+0xe4>)
 800a968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	e014      	b.n	800a9a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	3304      	adds	r3, #4
 800a97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a980:	4619      	mov	r1, r3
 800a982:	68b8      	ldr	r0, [r7, #8]
 800a984:	f000 fc98 	bl	800b2b8 <xQueueReceive>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d102      	bne.n	800a994 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a98e:	2310      	movs	r3, #16
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	e006      	b.n	800a9a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <osMessageGet+0xc6>
 800a99a:	2300      	movs	r3, #0
 800a99c:	e000      	b.n	800a9a0 <osMessageGet+0xc8>
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	461c      	mov	r4, r3
 800a9a6:	f107 0314 	add.w	r3, r7, #20
 800a9aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	372c      	adds	r7, #44	; 0x2c
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd90      	pop	{r4, r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a9c8:	f7ff fd2d 	bl	800a426 <inHandlerMode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d004      	beq.n	800a9dc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 feee 	bl	800b7b4 <uxQueueMessagesWaitingFromISR>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	e003      	b.n	800a9e4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fecc 	bl	800b77a <uxQueueMessagesWaiting>
 800a9e2:	4603      	mov	r3, r0
  }
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a9f4:	f7ff fd17 	bl	800a426 <inHandlerMode>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <osMessageDelete+0x16>
    return osErrorISR;
 800a9fe:	2382      	movs	r3, #130	; 0x82
 800aa00:	e003      	b.n	800aa0a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fef3 	bl	800b7ee <vQueueDelete>

  return osOK; 
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f103 0208 	add.w	r2, r3, #8
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f103 0208 	add.w	r2, r3, #8
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f103 0208 	add.w	r2, r3, #8
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	601a      	str	r2, [r3, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaca:	d103      	bne.n	800aad4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	60fb      	str	r3, [r7, #12]
 800aad2:	e00c      	b.n	800aaee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3308      	adds	r3, #8
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e002      	b.n	800aae2 <vListInsert+0x2e>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d2f6      	bcs.n	800aadc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	601a      	str	r2, [r3, #0]
}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab26:	b480      	push	{r7}
 800ab28:	b085      	sub	sp, #20
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	6892      	ldr	r2, [r2, #8]
 800ab3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6852      	ldr	r2, [r2, #4]
 800ab46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d103      	bne.n	800ab5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689a      	ldr	r2, [r3, #8]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d109      	bne.n	800aba4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	60bb      	str	r3, [r7, #8]
 800aba2:	e7fe      	b.n	800aba2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800aba4:	f002 f8ca 	bl	800cd3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb0:	68f9      	ldr	r1, [r7, #12]
 800abb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abb4:	fb01 f303 	mul.w	r3, r1, r3
 800abb8:	441a      	add	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd4:	3b01      	subs	r3, #1
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abda:	fb01 f303 	mul.w	r3, r1, r3
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	22ff      	movs	r2, #255	; 0xff
 800abe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	22ff      	movs	r2, #255	; 0xff
 800abf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d114      	bne.n	800ac24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d01a      	beq.n	800ac38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3310      	adds	r3, #16
 800ac06:	4618      	mov	r0, r3
 800ac08:	f001 fb8a 	bl	800c320 <xTaskRemoveFromEventList>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d012      	beq.n	800ac38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac12:	4b0d      	ldr	r3, [pc, #52]	; (800ac48 <xQueueGenericReset+0xcc>)
 800ac14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	e009      	b.n	800ac38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3310      	adds	r3, #16
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff fef2 	bl	800aa12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3324      	adds	r3, #36	; 0x24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff feed 	bl	800aa12 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac38:	f002 f8ae 	bl	800cd98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac3c:	2301      	movs	r3, #1
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	e000ed04 	.word	0xe000ed04

0800ac4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08e      	sub	sp, #56	; 0x38
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d109      	bne.n	800ac74 <xQueueGenericCreateStatic+0x28>
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac72:	e7fe      	b.n	800ac72 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d109      	bne.n	800ac8e <xQueueGenericCreateStatic+0x42>
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <xQueueGenericCreateStatic+0x4e>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <xQueueGenericCreateStatic+0x52>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <xQueueGenericCreateStatic+0x54>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d109      	bne.n	800acb8 <xQueueGenericCreateStatic+0x6c>
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	623b      	str	r3, [r7, #32]
 800acb6:	e7fe      	b.n	800acb6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <xQueueGenericCreateStatic+0x78>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <xQueueGenericCreateStatic+0x7c>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <xQueueGenericCreateStatic+0x7e>
 800acc8:	2300      	movs	r3, #0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <xQueueGenericCreateStatic+0x96>
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	61fb      	str	r3, [r7, #28]
 800ace0:	e7fe      	b.n	800ace0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ace2:	2348      	movs	r3, #72	; 0x48
 800ace4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b48      	cmp	r3, #72	; 0x48
 800acea:	d009      	beq.n	800ad00 <xQueueGenericCreateStatic+0xb4>
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e7fe      	b.n	800acfe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00d      	beq.n	800ad28 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f844 	bl	800adb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3730      	adds	r7, #48	; 0x30
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b08a      	sub	sp, #40	; 0x28
 800ad36:	af02      	add	r7, sp, #8
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d109      	bne.n	800ad5a <xQueueGenericCreate+0x28>
 800ad46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	613b      	str	r3, [r7, #16]
 800ad58:	e7fe      	b.n	800ad58 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d102      	bne.n	800ad66 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	e004      	b.n	800ad70 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	3348      	adds	r3, #72	; 0x48
 800ad74:	4618      	mov	r0, r3
 800ad76:	f002 f8fb 	bl	800cf70 <pvPortMalloc>
 800ad7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d011      	beq.n	800ada6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	3348      	adds	r3, #72	; 0x48
 800ad8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad94:	79fa      	ldrb	r2, [r7, #7]
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	68b9      	ldr	r1, [r7, #8]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 f805 	bl	800adb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ada6:	69bb      	ldr	r3, [r7, #24]
	}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	e002      	b.n	800add2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adde:	2101      	movs	r1, #1
 800ade0:	69b8      	ldr	r0, [r7, #24]
 800ade2:	f7ff fecb 	bl	800ab7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00e      	beq.n	800ae1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2200      	movs	r2, #0
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f837 	bl	800ae88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ae1a:	bf00      	nop
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b086      	sub	sp, #24
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	4603      	mov	r3, r0
 800ae2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ae34:	79fb      	ldrb	r3, [r7, #7]
 800ae36:	461a      	mov	r2, r3
 800ae38:	6939      	ldr	r1, [r7, #16]
 800ae3a:	6978      	ldr	r0, [r7, #20]
 800ae3c:	f7ff ff79 	bl	800ad32 <xQueueGenericCreate>
 800ae40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff ffd3 	bl	800adee <prvInitialiseMutex>

		return xNewQueue;
 800ae48:	68fb      	ldr	r3, [r7, #12]
	}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b088      	sub	sp, #32
 800ae56:	af02      	add	r7, sp, #8
 800ae58:	4603      	mov	r3, r0
 800ae5a:	6039      	str	r1, [r7, #0]
 800ae5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	617b      	str	r3, [r7, #20]
 800ae62:	2300      	movs	r3, #0
 800ae64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ae66:	79fb      	ldrb	r3, [r7, #7]
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	6939      	ldr	r1, [r7, #16]
 800ae70:	6978      	ldr	r0, [r7, #20]
 800ae72:	f7ff feeb 	bl	800ac4c <xQueueGenericCreateStatic>
 800ae76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7ff ffb8 	bl	800adee <prvInitialiseMutex>

		return xNewQueue;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
	}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08e      	sub	sp, #56	; 0x38
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae96:	2300      	movs	r3, #0
 800ae98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d109      	bne.n	800aeb8 <xQueueGenericSend+0x30>
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeb6:	e7fe      	b.n	800aeb6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <xQueueGenericSend+0x3e>
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <xQueueGenericSend+0x42>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <xQueueGenericSend+0x44>
 800aeca:	2300      	movs	r3, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d109      	bne.n	800aee4 <xQueueGenericSend+0x5c>
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24
 800aee2:	e7fe      	b.n	800aee2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d103      	bne.n	800aef2 <xQueueGenericSend+0x6a>
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d101      	bne.n	800aef6 <xQueueGenericSend+0x6e>
 800aef2:	2301      	movs	r3, #1
 800aef4:	e000      	b.n	800aef8 <xQueueGenericSend+0x70>
 800aef6:	2300      	movs	r3, #0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d109      	bne.n	800af10 <xQueueGenericSend+0x88>
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	623b      	str	r3, [r7, #32]
 800af0e:	e7fe      	b.n	800af0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af10:	f001 fbbc 	bl	800c68c <xTaskGetSchedulerState>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d102      	bne.n	800af20 <xQueueGenericSend+0x98>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <xQueueGenericSend+0x9c>
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <xQueueGenericSend+0x9e>
 800af24:	2300      	movs	r3, #0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d109      	bne.n	800af3e <xQueueGenericSend+0xb6>
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	61fb      	str	r3, [r7, #28]
 800af3c:	e7fe      	b.n	800af3c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af3e:	f001 fefd 	bl	800cd3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d302      	bcc.n	800af54 <xQueueGenericSend+0xcc>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d129      	bne.n	800afa8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	68b9      	ldr	r1, [r7, #8]
 800af58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af5a:	f000 fc82 	bl	800b862 <prvCopyDataToQueue>
 800af5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	2b00      	cmp	r3, #0
 800af66:	d010      	beq.n	800af8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	3324      	adds	r3, #36	; 0x24
 800af6c:	4618      	mov	r0, r3
 800af6e:	f001 f9d7 	bl	800c320 <xTaskRemoveFromEventList>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d013      	beq.n	800afa0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af78:	4b3f      	ldr	r3, [pc, #252]	; (800b078 <xQueueGenericSend+0x1f0>)
 800af7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	e00a      	b.n	800afa0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af90:	4b39      	ldr	r3, [pc, #228]	; (800b078 <xQueueGenericSend+0x1f0>)
 800af92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af96:	601a      	str	r2, [r3, #0]
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800afa0:	f001 fefa 	bl	800cd98 <vPortExitCritical>
				return pdPASS;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e063      	b.n	800b070 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afae:	f001 fef3 	bl	800cd98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e05c      	b.n	800b070 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d106      	bne.n	800afca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afbc:	f107 0314 	add.w	r3, r7, #20
 800afc0:	4618      	mov	r0, r3
 800afc2:	f001 fa0f 	bl	800c3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afc6:	2301      	movs	r3, #1
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afca:	f001 fee5 	bl	800cd98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afce:	f000 ffa5 	bl	800bf1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afd2:	f001 feb3 	bl	800cd3c <vPortEnterCritical>
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afdc:	b25b      	sxtb	r3, r3
 800afde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe2:	d103      	bne.n	800afec <xQueueGenericSend+0x164>
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aff2:	b25b      	sxtb	r3, r3
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff8:	d103      	bne.n	800b002 <xQueueGenericSend+0x17a>
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b002:	f001 fec9 	bl	800cd98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b006:	1d3a      	adds	r2, r7, #4
 800b008:	f107 0314 	add.w	r3, r7, #20
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 f9fe 	bl	800c410 <xTaskCheckForTimeOut>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d124      	bne.n	800b064 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b01c:	f000 fd19 	bl	800ba52 <prvIsQueueFull>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d018      	beq.n	800b058 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	3310      	adds	r3, #16
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f001 f952 	bl	800c2d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b036:	f000 fca4 	bl	800b982 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b03a:	f000 ff7d 	bl	800bf38 <xTaskResumeAll>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	f47f af7c 	bne.w	800af3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b046:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <xQueueGenericSend+0x1f0>)
 800b048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	e772      	b.n	800af3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b05a:	f000 fc92 	bl	800b982 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b05e:	f000 ff6b 	bl	800bf38 <xTaskResumeAll>
 800b062:	e76c      	b.n	800af3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b066:	f000 fc8c 	bl	800b982 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b06a:	f000 ff65 	bl	800bf38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b06e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b070:	4618      	mov	r0, r3
 800b072:	3738      	adds	r7, #56	; 0x38
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	e000ed04 	.word	0xe000ed04

0800b07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08e      	sub	sp, #56	; 0x38
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	2b00      	cmp	r3, #0
 800b092:	d109      	bne.n	800b0a8 <xQueueGenericSendFromISR+0x2c>
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a6:	e7fe      	b.n	800b0a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d103      	bne.n	800b0b6 <xQueueGenericSendFromISR+0x3a>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <xQueueGenericSendFromISR+0x3e>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e000      	b.n	800b0bc <xQueueGenericSendFromISR+0x40>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d109      	bne.n	800b0d4 <xQueueGenericSendFromISR+0x58>
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	623b      	str	r3, [r7, #32]
 800b0d2:	e7fe      	b.n	800b0d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d103      	bne.n	800b0e2 <xQueueGenericSendFromISR+0x66>
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d101      	bne.n	800b0e6 <xQueueGenericSendFromISR+0x6a>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e000      	b.n	800b0e8 <xQueueGenericSendFromISR+0x6c>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d109      	bne.n	800b100 <xQueueGenericSendFromISR+0x84>
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	e7fe      	b.n	800b0fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b100:	f001 fef8 	bl	800cef4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b104:	f3ef 8211 	mrs	r2, BASEPRI
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	61ba      	str	r2, [r7, #24]
 800b11a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b11c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b11e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b128:	429a      	cmp	r2, r3
 800b12a:	d302      	bcc.n	800b132 <xQueueGenericSendFromISR+0xb6>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d12c      	bne.n	800b18c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b13c:	683a      	ldr	r2, [r7, #0]
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b142:	f000 fb8e 	bl	800b862 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b146:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d112      	bne.n	800b176 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d016      	beq.n	800b186 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	3324      	adds	r3, #36	; 0x24
 800b15c:	4618      	mov	r0, r3
 800b15e:	f001 f8df 	bl	800c320 <xTaskRemoveFromEventList>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00e      	beq.n	800b186 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00b      	beq.n	800b186 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	e007      	b.n	800b186 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b17a:	3301      	adds	r3, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	b25a      	sxtb	r2, r3
 800b180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b186:	2301      	movs	r3, #1
 800b188:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b18a:	e001      	b.n	800b190 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	637b      	str	r3, [r7, #52]	; 0x34
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3738      	adds	r7, #56	; 0x38
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08e      	sub	sp, #56	; 0x38
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d109      	bne.n	800b1cc <xQueueGiveFromISR+0x28>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	623b      	str	r3, [r7, #32]
 800b1ca:	e7fe      	b.n	800b1ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d009      	beq.n	800b1e8 <xQueueGiveFromISR+0x44>
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	61fb      	str	r3, [r7, #28]
 800b1e6:	e7fe      	b.n	800b1e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d103      	bne.n	800b1f8 <xQueueGiveFromISR+0x54>
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <xQueueGiveFromISR+0x58>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e000      	b.n	800b1fe <xQueueGiveFromISR+0x5a>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <xQueueGiveFromISR+0x72>
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	61bb      	str	r3, [r7, #24]
 800b214:	e7fe      	b.n	800b214 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b216:	f001 fe6d 	bl	800cef4 <vPortValidateInterruptPriority>
	__asm volatile
 800b21a:	f3ef 8211 	mrs	r2, BASEPRI
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	617a      	str	r2, [r7, #20]
 800b230:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b232:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b234:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b242:	429a      	cmp	r2, r3
 800b244:	d22b      	bcs.n	800b29e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b258:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d112      	bne.n	800b288 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	d016      	beq.n	800b298 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	3324      	adds	r3, #36	; 0x24
 800b26e:	4618      	mov	r0, r3
 800b270:	f001 f856 	bl	800c320 <xTaskRemoveFromEventList>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00e      	beq.n	800b298 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2201      	movs	r2, #1
 800b284:	601a      	str	r2, [r3, #0]
 800b286:	e007      	b.n	800b298 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b28c:	3301      	adds	r3, #1
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	b25a      	sxtb	r2, r3
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b298:	2301      	movs	r3, #1
 800b29a:	637b      	str	r3, [r7, #52]	; 0x34
 800b29c:	e001      	b.n	800b2a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3738      	adds	r7, #56	; 0x38
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08c      	sub	sp, #48	; 0x30
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d109      	bne.n	800b2e6 <xQueueReceive+0x2e>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	623b      	str	r3, [r7, #32]
 800b2e4:	e7fe      	b.n	800b2e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d103      	bne.n	800b2f4 <xQueueReceive+0x3c>
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <xQueueReceive+0x40>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <xQueueReceive+0x42>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d109      	bne.n	800b312 <xQueueReceive+0x5a>
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	61fb      	str	r3, [r7, #28]
 800b310:	e7fe      	b.n	800b310 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b312:	f001 f9bb 	bl	800c68c <xTaskGetSchedulerState>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <xQueueReceive+0x6a>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <xQueueReceive+0x6e>
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <xQueueReceive+0x70>
 800b326:	2300      	movs	r3, #0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <xQueueReceive+0x88>
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	e7fe      	b.n	800b33e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b340:	f001 fcfc 	bl	800cd3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01f      	beq.n	800b390 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b354:	f000 faef 	bl	800b936 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35a:	1e5a      	subs	r2, r3, #1
 800b35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00f      	beq.n	800b388 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	3310      	adds	r3, #16
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 ffd7 	bl	800c320 <xTaskRemoveFromEventList>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d007      	beq.n	800b388 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b378:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <xQueueReceive+0x1b4>)
 800b37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b388:	f001 fd06 	bl	800cd98 <vPortExitCritical>
				return pdPASS;
 800b38c:	2301      	movs	r3, #1
 800b38e:	e069      	b.n	800b464 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d103      	bne.n	800b39e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b396:	f001 fcff 	bl	800cd98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b39a:	2300      	movs	r3, #0
 800b39c:	e062      	b.n	800b464 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d106      	bne.n	800b3b2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3a4:	f107 0310 	add.w	r3, r7, #16
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 f81b 	bl	800c3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3b2:	f001 fcf1 	bl	800cd98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3b6:	f000 fdb1 	bl	800bf1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3ba:	f001 fcbf 	bl	800cd3c <vPortEnterCritical>
 800b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3c4:	b25b      	sxtb	r3, r3
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ca:	d103      	bne.n	800b3d4 <xQueueReceive+0x11c>
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3da:	b25b      	sxtb	r3, r3
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e0:	d103      	bne.n	800b3ea <xQueueReceive+0x132>
 800b3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3ea:	f001 fcd5 	bl	800cd98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3ee:	1d3a      	adds	r2, r7, #4
 800b3f0:	f107 0310 	add.w	r3, r7, #16
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f001 f80a 	bl	800c410 <xTaskCheckForTimeOut>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d123      	bne.n	800b44a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b404:	f000 fb0f 	bl	800ba26 <prvIsQueueEmpty>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d017      	beq.n	800b43e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b410:	3324      	adds	r3, #36	; 0x24
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f000 ff5e 	bl	800c2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b41e:	f000 fab0 	bl	800b982 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b422:	f000 fd89 	bl	800bf38 <xTaskResumeAll>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d189      	bne.n	800b340 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b42c:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <xQueueReceive+0x1b4>)
 800b42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	e780      	b.n	800b340 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b440:	f000 fa9f 	bl	800b982 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b444:	f000 fd78 	bl	800bf38 <xTaskResumeAll>
 800b448:	e77a      	b.n	800b340 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44c:	f000 fa99 	bl	800b982 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b450:	f000 fd72 	bl	800bf38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b456:	f000 fae6 	bl	800ba26 <prvIsQueueEmpty>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f43f af6f 	beq.w	800b340 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b462:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b464:	4618      	mov	r0, r3
 800b466:	3730      	adds	r7, #48	; 0x30
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08e      	sub	sp, #56	; 0x38
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d109      	bne.n	800b4a0 <xQueueSemaphoreTake+0x30>
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	623b      	str	r3, [r7, #32]
 800b49e:	e7fe      	b.n	800b49e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d009      	beq.n	800b4bc <xQueueSemaphoreTake+0x4c>
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	61fb      	str	r3, [r7, #28]
 800b4ba:	e7fe      	b.n	800b4ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4bc:	f001 f8e6 	bl	800c68c <xTaskGetSchedulerState>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d102      	bne.n	800b4cc <xQueueSemaphoreTake+0x5c>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <xQueueSemaphoreTake+0x60>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e000      	b.n	800b4d2 <xQueueSemaphoreTake+0x62>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d109      	bne.n	800b4ea <xQueueSemaphoreTake+0x7a>
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	61bb      	str	r3, [r7, #24]
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4ea:	f001 fc27 	bl	800cd3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d024      	beq.n	800b544 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	1e5a      	subs	r2, r3, #1
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d104      	bne.n	800b514 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b50a:	f001 fa79 	bl	800ca00 <pvTaskIncrementMutexHeldCount>
 800b50e:	4602      	mov	r2, r0
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00f      	beq.n	800b53c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	3310      	adds	r3, #16
 800b520:	4618      	mov	r0, r3
 800b522:	f000 fefd 	bl	800c320 <xTaskRemoveFromEventList>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d007      	beq.n	800b53c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b52c:	4b53      	ldr	r3, [pc, #332]	; (800b67c <xQueueSemaphoreTake+0x20c>)
 800b52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b53c:	f001 fc2c 	bl	800cd98 <vPortExitCritical>
				return pdPASS;
 800b540:	2301      	movs	r3, #1
 800b542:	e096      	b.n	800b672 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d110      	bne.n	800b56c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d009      	beq.n	800b564 <xQueueSemaphoreTake+0xf4>
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	e7fe      	b.n	800b562 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b564:	f001 fc18 	bl	800cd98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b568:	2300      	movs	r3, #0
 800b56a:	e082      	b.n	800b672 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d106      	bne.n	800b580 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	4618      	mov	r0, r3
 800b578:	f000 ff34 	bl	800c3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b580:	f001 fc0a 	bl	800cd98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b584:	f000 fcca 	bl	800bf1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b588:	f001 fbd8 	bl	800cd3c <vPortEnterCritical>
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b592:	b25b      	sxtb	r3, r3
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b598:	d103      	bne.n	800b5a2 <xQueueSemaphoreTake+0x132>
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a8:	b25b      	sxtb	r3, r3
 800b5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ae:	d103      	bne.n	800b5b8 <xQueueSemaphoreTake+0x148>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5b8:	f001 fbee 	bl	800cd98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5bc:	463a      	mov	r2, r7
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 ff23 	bl	800c410 <xTaskCheckForTimeOut>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d132      	bne.n	800b636 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d2:	f000 fa28 	bl	800ba26 <prvIsQueueEmpty>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d026      	beq.n	800b62a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d109      	bne.n	800b5f8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b5e4:	f001 fbaa 	bl	800cd3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f001 f86b 	bl	800c6c8 <xTaskPriorityInherit>
 800b5f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b5f4:	f001 fbd0 	bl	800cd98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fa:	3324      	adds	r3, #36	; 0x24
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	4611      	mov	r1, r2
 800b600:	4618      	mov	r0, r3
 800b602:	f000 fe69 	bl	800c2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b608:	f000 f9bb 	bl	800b982 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b60c:	f000 fc94 	bl	800bf38 <xTaskResumeAll>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	f47f af69 	bne.w	800b4ea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b618:	4b18      	ldr	r3, [pc, #96]	; (800b67c <xQueueSemaphoreTake+0x20c>)
 800b61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	e75f      	b.n	800b4ea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b62a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b62c:	f000 f9a9 	bl	800b982 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b630:	f000 fc82 	bl	800bf38 <xTaskResumeAll>
 800b634:	e759      	b.n	800b4ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b638:	f000 f9a3 	bl	800b982 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b63c:	f000 fc7c 	bl	800bf38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b642:	f000 f9f0 	bl	800ba26 <prvIsQueueEmpty>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f43f af4e 	beq.w	800b4ea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00d      	beq.n	800b670 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b654:	f001 fb72 	bl	800cd3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b65a:	f000 f8ea 	bl	800b832 <prvGetDisinheritPriorityAfterTimeout>
 800b65e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b666:	4618      	mov	r0, r3
 800b668:	f001 f932 	bl	800c8d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b66c:	f001 fb94 	bl	800cd98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b672:	4618      	mov	r0, r3
 800b674:	3738      	adds	r7, #56	; 0x38
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	e000ed04 	.word	0xe000ed04

0800b680 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08e      	sub	sp, #56	; 0x38
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	2b00      	cmp	r3, #0
 800b694:	d109      	bne.n	800b6aa <xQueueReceiveFromISR+0x2a>
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	623b      	str	r3, [r7, #32]
 800b6a8:	e7fe      	b.n	800b6a8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <xQueueReceiveFromISR+0x38>
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <xQueueReceiveFromISR+0x3c>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e000      	b.n	800b6be <xQueueReceiveFromISR+0x3e>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d109      	bne.n	800b6d6 <xQueueReceiveFromISR+0x56>
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	61fb      	str	r3, [r7, #28]
 800b6d4:	e7fe      	b.n	800b6d4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6d6:	f001 fc0d 	bl	800cef4 <vPortValidateInterruptPriority>
	__asm volatile
 800b6da:	f3ef 8211 	mrs	r2, BASEPRI
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	61ba      	str	r2, [r7, #24]
 800b6f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b6f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d02f      	beq.n	800b762 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b70c:	68b9      	ldr	r1, [r7, #8]
 800b70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b710:	f000 f911 	bl	800b936 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b716:	1e5a      	subs	r2, r3, #1
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b71c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b724:	d112      	bne.n	800b74c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d016      	beq.n	800b75c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	3310      	adds	r3, #16
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fdf4 	bl	800c320 <xTaskRemoveFromEventList>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00e      	beq.n	800b75c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00b      	beq.n	800b75c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	e007      	b.n	800b75c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b750:	3301      	adds	r3, #1
 800b752:	b2db      	uxtb	r3, r3
 800b754:	b25a      	sxtb	r2, r3
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b75c:	2301      	movs	r3, #1
 800b75e:	637b      	str	r3, [r7, #52]	; 0x34
 800b760:	e001      	b.n	800b766 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b762:	2300      	movs	r3, #0
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
 800b766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b768:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b772:	4618      	mov	r0, r3
 800b774:	3738      	adds	r7, #56	; 0x38
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d109      	bne.n	800b79c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	60bb      	str	r3, [r7, #8]
 800b79a:	e7fe      	b.n	800b79a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800b79c:	f001 face 	bl	800cd3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b7a6:	f001 faf7 	bl	800cd98 <vPortExitCritical>

	return uxReturn;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d109      	bne.n	800b7da <uxQueueMessagesWaitingFromISR+0x26>
 800b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e7fe      	b.n	800b7d8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b7e0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d109      	bne.n	800b814 <vQueueDelete+0x26>
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	60bb      	str	r3, [r7, #8]
 800b812:	e7fe      	b.n	800b812 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 f935 	bl	800ba84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f001 fc65 	bl	800d0f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b82a:	bf00      	nop
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b832:	b480      	push	{r7}
 800b834:	b085      	sub	sp, #20
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d006      	beq.n	800b850 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f1c3 0307 	rsb	r3, r3, #7
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	e001      	b.n	800b854 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b850:	2300      	movs	r3, #0
 800b852:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b854:	68fb      	ldr	r3, [r7, #12]
	}
 800b856:	4618      	mov	r0, r3
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b086      	sub	sp, #24
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10d      	bne.n	800b89c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d14d      	bne.n	800b924 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 ff9b 	bl	800c7c8 <xTaskPriorityDisinherit>
 800b892:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	609a      	str	r2, [r3, #8]
 800b89a:	e043      	b.n	800b924 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d119      	bne.n	800b8d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6858      	ldr	r0, [r3, #4]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	68b9      	ldr	r1, [r7, #8]
 800b8ae:	f00d fdf4 	bl	801949a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	441a      	add	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d32b      	bcc.n	800b924 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	605a      	str	r2, [r3, #4]
 800b8d4:	e026      	b.n	800b924 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68d8      	ldr	r0, [r3, #12]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	461a      	mov	r2, r3
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	f00d fdda 	bl	801949a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68da      	ldr	r2, [r3, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	425b      	negs	r3, r3
 800b8f0:	441a      	add	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	68da      	ldr	r2, [r3, #12]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d207      	bcs.n	800b912 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90a:	425b      	negs	r3, r3
 800b90c:	441a      	add	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d105      	bne.n	800b924 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3b01      	subs	r3, #1
 800b922:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b92c:	697b      	ldr	r3, [r7, #20]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3718      	adds	r7, #24
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b944:	2b00      	cmp	r3, #0
 800b946:	d018      	beq.n	800b97a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68da      	ldr	r2, [r3, #12]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	441a      	add	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d303      	bcc.n	800b96a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68d9      	ldr	r1, [r3, #12]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b972:	461a      	mov	r2, r3
 800b974:	6838      	ldr	r0, [r7, #0]
 800b976:	f00d fd90 	bl	801949a <memcpy>
	}
}
 800b97a:	bf00      	nop
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b98a:	f001 f9d7 	bl	800cd3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b994:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b996:	e011      	b.n	800b9bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d012      	beq.n	800b9c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	3324      	adds	r3, #36	; 0x24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 fcbb 	bl	800c320 <xTaskRemoveFromEventList>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9b0:	f000 fd8e 	bl	800c4d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dce9      	bgt.n	800b998 <prvUnlockQueue+0x16>
 800b9c4:	e000      	b.n	800b9c8 <prvUnlockQueue+0x46>
					break;
 800b9c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	22ff      	movs	r2, #255	; 0xff
 800b9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9d0:	f001 f9e2 	bl	800cd98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9d4:	f001 f9b2 	bl	800cd3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9e0:	e011      	b.n	800ba06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d012      	beq.n	800ba10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3310      	adds	r3, #16
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 fc96 	bl	800c320 <xTaskRemoveFromEventList>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9fa:	f000 fd69 	bl	800c4d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dce9      	bgt.n	800b9e2 <prvUnlockQueue+0x60>
 800ba0e:	e000      	b.n	800ba12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	22ff      	movs	r2, #255	; 0xff
 800ba16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba1a:	f001 f9bd 	bl	800cd98 <vPortExitCritical>
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba2e:	f001 f985 	bl	800cd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d102      	bne.n	800ba40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	e001      	b.n	800ba44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba44:	f001 f9a8 	bl	800cd98 <vPortExitCritical>

	return xReturn;
 800ba48:	68fb      	ldr	r3, [r7, #12]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba5a:	f001 f96f 	bl	800cd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d102      	bne.n	800ba70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e001      	b.n	800ba74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba74:	f001 f990 	bl	800cd98 <vPortExitCritical>

	return xReturn;
 800ba78:	68fb      	ldr	r3, [r7, #12]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	e016      	b.n	800bac0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba92:	4a10      	ldr	r2, [pc, #64]	; (800bad4 <vQueueUnregisterQueue+0x50>)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	4413      	add	r3, r2
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d10b      	bne.n	800baba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800baa2:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <vQueueUnregisterQueue+0x50>)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2100      	movs	r1, #0
 800baa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800baac:	4a09      	ldr	r2, [pc, #36]	; (800bad4 <vQueueUnregisterQueue+0x50>)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	4413      	add	r3, r2
 800bab4:	2200      	movs	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]
				break;
 800bab8:	e005      	b.n	800bac6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3301      	adds	r3, #1
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b07      	cmp	r3, #7
 800bac4:	d9e5      	bls.n	800ba92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bac6:	bf00      	nop
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	2000d0c8 	.word	0x2000d0c8

0800bad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08e      	sub	sp, #56	; 0x38
 800badc:	af04      	add	r7, sp, #16
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d109      	bne.n	800bb00 <xTaskCreateStatic+0x28>
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	623b      	str	r3, [r7, #32]
 800bafe:	e7fe      	b.n	800bafe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d109      	bne.n	800bb1a <xTaskCreateStatic+0x42>
 800bb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e7fe      	b.n	800bb18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb1a:	2354      	movs	r3, #84	; 0x54
 800bb1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b54      	cmp	r3, #84	; 0x54
 800bb22:	d009      	beq.n	800bb38 <xTaskCreateStatic+0x60>
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	61bb      	str	r3, [r7, #24]
 800bb36:	e7fe      	b.n	800bb36 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01e      	beq.n	800bb7e <xTaskCreateStatic+0xa6>
 800bb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d01b      	beq.n	800bb7e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9303      	str	r3, [sp, #12]
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	9302      	str	r3, [sp, #8]
 800bb60:	f107 0314 	add.w	r3, r7, #20
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 f850 	bl	800bc16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb78:	f000 f8d4 	bl	800bd24 <prvAddNewTaskToReadyList>
 800bb7c:	e001      	b.n	800bb82 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bb82:	697b      	ldr	r3, [r7, #20]
	}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3728      	adds	r7, #40	; 0x28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08c      	sub	sp, #48	; 0x30
 800bb90:	af04      	add	r7, sp, #16
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bb9c:	88fb      	ldrh	r3, [r7, #6]
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f001 f9e5 	bl	800cf70 <pvPortMalloc>
 800bba6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00e      	beq.n	800bbcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbae:	2054      	movs	r0, #84	; 0x54
 800bbb0:	f001 f9de 	bl	800cf70 <pvPortMalloc>
 800bbb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	631a      	str	r2, [r3, #48]	; 0x30
 800bbc2:	e005      	b.n	800bbd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbc4:	6978      	ldr	r0, [r7, #20]
 800bbc6:	f001 fa95 	bl	800d0f4 <vPortFree>
 800bbca:	e001      	b.n	800bbd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d017      	beq.n	800bc06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bbde:	88fa      	ldrh	r2, [r7, #6]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9303      	str	r3, [sp, #12]
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	9302      	str	r3, [sp, #8]
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 f80e 	bl	800bc16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbfa:	69f8      	ldr	r0, [r7, #28]
 800bbfc:	f000 f892 	bl	800bd24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc00:	2301      	movs	r3, #1
 800bc02:	61bb      	str	r3, [r7, #24]
 800bc04:	e002      	b.n	800bc0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc06:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc0c:	69bb      	ldr	r3, [r7, #24]
	}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3720      	adds	r7, #32
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b088      	sub	sp, #32
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	607a      	str	r2, [r7, #4]
 800bc22:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc28:	6879      	ldr	r1, [r7, #4]
 800bc2a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bc2e:	440b      	add	r3, r1
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	f023 0307 	bic.w	r3, r3, #7
 800bc3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	f003 0307 	and.w	r3, r3, #7
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d009      	beq.n	800bc5c <prvInitialiseNewTask+0x46>
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	617b      	str	r3, [r7, #20]
 800bc5a:	e7fe      	b.n	800bc5a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d01f      	beq.n	800bca2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc62:	2300      	movs	r3, #0
 800bc64:	61fb      	str	r3, [r7, #28]
 800bc66:	e012      	b.n	800bc8e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	7819      	ldrb	r1, [r3, #0]
 800bc70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	4413      	add	r3, r2
 800bc76:	3334      	adds	r3, #52	; 0x34
 800bc78:	460a      	mov	r2, r1
 800bc7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	4413      	add	r3, r2
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d006      	beq.n	800bc96 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	61fb      	str	r3, [r7, #28]
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	2b0f      	cmp	r3, #15
 800bc92:	d9e9      	bls.n	800bc68 <prvInitialiseNewTask+0x52>
 800bc94:	e000      	b.n	800bc98 <prvInitialiseNewTask+0x82>
			{
				break;
 800bc96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bca0:	e003      	b.n	800bcaa <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcac:	2b06      	cmp	r3, #6
 800bcae:	d901      	bls.n	800bcb4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bcb0:	2306      	movs	r3, #6
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fec1 	bl	800aa52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd2:	3318      	adds	r3, #24
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe febc 	bl	800aa52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	f1c3 0207 	rsb	r2, r3, #7
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	68f9      	ldr	r1, [r7, #12]
 800bd02:	69b8      	ldr	r0, [r7, #24]
 800bd04:	f000 fef6 	bl	800caf4 <pxPortInitialiseStack>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd1a:	bf00      	nop
 800bd1c:	3720      	adds	r7, #32
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
	...

0800bd24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd2c:	f001 f806 	bl	800cd3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd30:	4b2a      	ldr	r3, [pc, #168]	; (800bddc <prvAddNewTaskToReadyList+0xb8>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	4a29      	ldr	r2, [pc, #164]	; (800bddc <prvAddNewTaskToReadyList+0xb8>)
 800bd38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bd3a:	4b29      	ldr	r3, [pc, #164]	; (800bde0 <prvAddNewTaskToReadyList+0xbc>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d109      	bne.n	800bd56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd42:	4a27      	ldr	r2, [pc, #156]	; (800bde0 <prvAddNewTaskToReadyList+0xbc>)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd48:	4b24      	ldr	r3, [pc, #144]	; (800bddc <prvAddNewTaskToReadyList+0xb8>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d110      	bne.n	800bd72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bd50:	f000 fbe2 	bl	800c518 <prvInitialiseTaskLists>
 800bd54:	e00d      	b.n	800bd72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bd56:	4b23      	ldr	r3, [pc, #140]	; (800bde4 <prvAddNewTaskToReadyList+0xc0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d109      	bne.n	800bd72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bd5e:	4b20      	ldr	r3, [pc, #128]	; (800bde0 <prvAddNewTaskToReadyList+0xbc>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d802      	bhi.n	800bd72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bd6c:	4a1c      	ldr	r2, [pc, #112]	; (800bde0 <prvAddNewTaskToReadyList+0xbc>)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bd72:	4b1d      	ldr	r3, [pc, #116]	; (800bde8 <prvAddNewTaskToReadyList+0xc4>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3301      	adds	r3, #1
 800bd78:	4a1b      	ldr	r2, [pc, #108]	; (800bde8 <prvAddNewTaskToReadyList+0xc4>)
 800bd7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	2201      	movs	r2, #1
 800bd82:	409a      	lsls	r2, r3
 800bd84:	4b19      	ldr	r3, [pc, #100]	; (800bdec <prvAddNewTaskToReadyList+0xc8>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	4a18      	ldr	r2, [pc, #96]	; (800bdec <prvAddNewTaskToReadyList+0xc8>)
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4a15      	ldr	r2, [pc, #84]	; (800bdf0 <prvAddNewTaskToReadyList+0xcc>)
 800bd9c:	441a      	add	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	3304      	adds	r3, #4
 800bda2:	4619      	mov	r1, r3
 800bda4:	4610      	mov	r0, r2
 800bda6:	f7fe fe61 	bl	800aa6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bdaa:	f000 fff5 	bl	800cd98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bdae:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <prvAddNewTaskToReadyList+0xc0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00e      	beq.n	800bdd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bdb6:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <prvAddNewTaskToReadyList+0xbc>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d207      	bcs.n	800bdd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bdc4:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <prvAddNewTaskToReadyList+0xd0>)
 800bdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	20000414 	.word	0x20000414
 800bde0:	20000314 	.word	0x20000314
 800bde4:	20000420 	.word	0x20000420
 800bde8:	20000430 	.word	0x20000430
 800bdec:	2000041c 	.word	0x2000041c
 800bdf0:	20000318 	.word	0x20000318
 800bdf4:	e000ed04 	.word	0xe000ed04

0800bdf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d016      	beq.n	800be38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <vTaskDelay+0x60>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <vTaskDelay+0x2e>
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	60bb      	str	r3, [r7, #8]
 800be24:	e7fe      	b.n	800be24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800be26:	f000 f879 	bl	800bf1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be2a:	2100      	movs	r1, #0
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fdfb 	bl	800ca28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be32:	f000 f881 	bl	800bf38 <xTaskResumeAll>
 800be36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d107      	bne.n	800be4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800be3e:	4b07      	ldr	r3, [pc, #28]	; (800be5c <vTaskDelay+0x64>)
 800be40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be4e:	bf00      	nop
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	2000043c 	.word	0x2000043c
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	; 0x28
 800be64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be6e:	463a      	mov	r2, r7
 800be70:	1d39      	adds	r1, r7, #4
 800be72:	f107 0308 	add.w	r3, r7, #8
 800be76:	4618      	mov	r0, r3
 800be78:	f7f4 fdc4 	bl	8000a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	9202      	str	r2, [sp, #8]
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	2300      	movs	r3, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	460a      	mov	r2, r1
 800be8e:	491d      	ldr	r1, [pc, #116]	; (800bf04 <vTaskStartScheduler+0xa4>)
 800be90:	481d      	ldr	r0, [pc, #116]	; (800bf08 <vTaskStartScheduler+0xa8>)
 800be92:	f7ff fe21 	bl	800bad8 <xTaskCreateStatic>
 800be96:	4602      	mov	r2, r0
 800be98:	4b1c      	ldr	r3, [pc, #112]	; (800bf0c <vTaskStartScheduler+0xac>)
 800be9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be9c:	4b1b      	ldr	r3, [pc, #108]	; (800bf0c <vTaskStartScheduler+0xac>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bea4:	2301      	movs	r3, #1
 800bea6:	617b      	str	r3, [r7, #20]
 800bea8:	e001      	b.n	800beae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d115      	bne.n	800bee0 <vTaskStartScheduler+0x80>
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bec6:	4b12      	ldr	r3, [pc, #72]	; (800bf10 <vTaskStartScheduler+0xb0>)
 800bec8:	f04f 32ff 	mov.w	r2, #4294967295
 800becc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bece:	4b11      	ldr	r3, [pc, #68]	; (800bf14 <vTaskStartScheduler+0xb4>)
 800bed0:	2201      	movs	r2, #1
 800bed2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bed4:	4b10      	ldr	r3, [pc, #64]	; (800bf18 <vTaskStartScheduler+0xb8>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800beda:	f000 fe91 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bede:	e00d      	b.n	800befc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d109      	bne.n	800befc <vTaskStartScheduler+0x9c>
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	e7fe      	b.n	800befa <vTaskStartScheduler+0x9a>
}
 800befc:	bf00      	nop
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	0801a704 	.word	0x0801a704
 800bf08:	0800c4e9 	.word	0x0800c4e9
 800bf0c:	20000438 	.word	0x20000438
 800bf10:	20000434 	.word	0x20000434
 800bf14:	20000420 	.word	0x20000420
 800bf18:	20000418 	.word	0x20000418

0800bf1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf20:	4b04      	ldr	r3, [pc, #16]	; (800bf34 <vTaskSuspendAll+0x18>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3301      	adds	r3, #1
 800bf26:	4a03      	ldr	r2, [pc, #12]	; (800bf34 <vTaskSuspendAll+0x18>)
 800bf28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bf2a:	bf00      	nop
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	2000043c 	.word	0x2000043c

0800bf38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf46:	4b41      	ldr	r3, [pc, #260]	; (800c04c <xTaskResumeAll+0x114>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d109      	bne.n	800bf62 <xTaskResumeAll+0x2a>
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	603b      	str	r3, [r7, #0]
 800bf60:	e7fe      	b.n	800bf60 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf62:	f000 feeb 	bl	800cd3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf66:	4b39      	ldr	r3, [pc, #228]	; (800c04c <xTaskResumeAll+0x114>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	4a37      	ldr	r2, [pc, #220]	; (800c04c <xTaskResumeAll+0x114>)
 800bf6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf70:	4b36      	ldr	r3, [pc, #216]	; (800c04c <xTaskResumeAll+0x114>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d161      	bne.n	800c03c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf78:	4b35      	ldr	r3, [pc, #212]	; (800c050 <xTaskResumeAll+0x118>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d05d      	beq.n	800c03c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf80:	e02e      	b.n	800bfe0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf82:	4b34      	ldr	r3, [pc, #208]	; (800c054 <xTaskResumeAll+0x11c>)
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3318      	adds	r3, #24
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe fdc9 	bl	800ab26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	3304      	adds	r3, #4
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe fdc4 	bl	800ab26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	409a      	lsls	r2, r3
 800bfa6:	4b2c      	ldr	r3, [pc, #176]	; (800c058 <xTaskResumeAll+0x120>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	4a2a      	ldr	r2, [pc, #168]	; (800c058 <xTaskResumeAll+0x120>)
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4413      	add	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4a27      	ldr	r2, [pc, #156]	; (800c05c <xTaskResumeAll+0x124>)
 800bfbe:	441a      	add	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	f7fe fd50 	bl	800aa6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd0:	4b23      	ldr	r3, [pc, #140]	; (800c060 <xTaskResumeAll+0x128>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800bfda:	4b22      	ldr	r3, [pc, #136]	; (800c064 <xTaskResumeAll+0x12c>)
 800bfdc:	2201      	movs	r2, #1
 800bfde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfe0:	4b1c      	ldr	r3, [pc, #112]	; (800c054 <xTaskResumeAll+0x11c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1cc      	bne.n	800bf82 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bfee:	f000 fb2d 	bl	800c64c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bff2:	4b1d      	ldr	r3, [pc, #116]	; (800c068 <xTaskResumeAll+0x130>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d010      	beq.n	800c020 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bffe:	f000 f859 	bl	800c0b4 <xTaskIncrementTick>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c008:	4b16      	ldr	r3, [pc, #88]	; (800c064 <xTaskResumeAll+0x12c>)
 800c00a:	2201      	movs	r2, #1
 800c00c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3b01      	subs	r3, #1
 800c012:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1f1      	bne.n	800bffe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <xTaskResumeAll+0x130>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c020:	4b10      	ldr	r3, [pc, #64]	; (800c064 <xTaskResumeAll+0x12c>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d009      	beq.n	800c03c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c028:	2301      	movs	r3, #1
 800c02a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c02c:	4b0f      	ldr	r3, [pc, #60]	; (800c06c <xTaskResumeAll+0x134>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c03c:	f000 feac 	bl	800cd98 <vPortExitCritical>

	return xAlreadyYielded;
 800c040:	68bb      	ldr	r3, [r7, #8]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	2000043c 	.word	0x2000043c
 800c050:	20000414 	.word	0x20000414
 800c054:	200003d4 	.word	0x200003d4
 800c058:	2000041c 	.word	0x2000041c
 800c05c:	20000318 	.word	0x20000318
 800c060:	20000314 	.word	0x20000314
 800c064:	20000428 	.word	0x20000428
 800c068:	20000424 	.word	0x20000424
 800c06c:	e000ed04 	.word	0xe000ed04

0800c070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c076:	4b05      	ldr	r3, [pc, #20]	; (800c08c <xTaskGetTickCount+0x1c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c07c:	687b      	ldr	r3, [r7, #4]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	20000418 	.word	0x20000418

0800c090 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c096:	f000 ff2d 	bl	800cef4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c09a:	2300      	movs	r3, #0
 800c09c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c09e:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <xTaskGetTickCountFromISR+0x20>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0a4:	683b      	ldr	r3, [r7, #0]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000418 	.word	0x20000418

0800c0b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0be:	4b4e      	ldr	r3, [pc, #312]	; (800c1f8 <xTaskIncrementTick+0x144>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f040 8087 	bne.w	800c1d6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0c8:	4b4c      	ldr	r3, [pc, #304]	; (800c1fc <xTaskIncrementTick+0x148>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0d0:	4a4a      	ldr	r2, [pc, #296]	; (800c1fc <xTaskIncrementTick+0x148>)
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d11f      	bne.n	800c11c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0dc:	4b48      	ldr	r3, [pc, #288]	; (800c200 <xTaskIncrementTick+0x14c>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <xTaskIncrementTick+0x46>
 800c0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	e7fe      	b.n	800c0f8 <xTaskIncrementTick+0x44>
 800c0fa:	4b41      	ldr	r3, [pc, #260]	; (800c200 <xTaskIncrementTick+0x14c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	4b40      	ldr	r3, [pc, #256]	; (800c204 <xTaskIncrementTick+0x150>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a3e      	ldr	r2, [pc, #248]	; (800c200 <xTaskIncrementTick+0x14c>)
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	4a3e      	ldr	r2, [pc, #248]	; (800c204 <xTaskIncrementTick+0x150>)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	4b3e      	ldr	r3, [pc, #248]	; (800c208 <xTaskIncrementTick+0x154>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3301      	adds	r3, #1
 800c114:	4a3c      	ldr	r2, [pc, #240]	; (800c208 <xTaskIncrementTick+0x154>)
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	f000 fa98 	bl	800c64c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c11c:	4b3b      	ldr	r3, [pc, #236]	; (800c20c <xTaskIncrementTick+0x158>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	429a      	cmp	r2, r3
 800c124:	d348      	bcc.n	800c1b8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c126:	4b36      	ldr	r3, [pc, #216]	; (800c200 <xTaskIncrementTick+0x14c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c130:	4b36      	ldr	r3, [pc, #216]	; (800c20c <xTaskIncrementTick+0x158>)
 800c132:	f04f 32ff 	mov.w	r2, #4294967295
 800c136:	601a      	str	r2, [r3, #0]
					break;
 800c138:	e03e      	b.n	800c1b8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c13a:	4b31      	ldr	r3, [pc, #196]	; (800c200 <xTaskIncrementTick+0x14c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d203      	bcs.n	800c15a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c152:	4a2e      	ldr	r2, [pc, #184]	; (800c20c <xTaskIncrementTick+0x158>)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c158:	e02e      	b.n	800c1b8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe fce1 	bl	800ab26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	3318      	adds	r3, #24
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fcd8 	bl	800ab26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17a:	2201      	movs	r2, #1
 800c17c:	409a      	lsls	r2, r3
 800c17e:	4b24      	ldr	r3, [pc, #144]	; (800c210 <xTaskIncrementTick+0x15c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4313      	orrs	r3, r2
 800c184:	4a22      	ldr	r2, [pc, #136]	; (800c210 <xTaskIncrementTick+0x15c>)
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4a1f      	ldr	r2, [pc, #124]	; (800c214 <xTaskIncrementTick+0x160>)
 800c196:	441a      	add	r2, r3
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	3304      	adds	r3, #4
 800c19c:	4619      	mov	r1, r3
 800c19e:	4610      	mov	r0, r2
 800c1a0:	f7fe fc64 	bl	800aa6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a8:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <xTaskIncrementTick+0x164>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d3b9      	bcc.n	800c126 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1b6:	e7b6      	b.n	800c126 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1b8:	4b17      	ldr	r3, [pc, #92]	; (800c218 <xTaskIncrementTick+0x164>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1be:	4915      	ldr	r1, [pc, #84]	; (800c214 <xTaskIncrementTick+0x160>)
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d907      	bls.n	800c1e0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	617b      	str	r3, [r7, #20]
 800c1d4:	e004      	b.n	800c1e0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c1d6:	4b11      	ldr	r3, [pc, #68]	; (800c21c <xTaskIncrementTick+0x168>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	4a0f      	ldr	r2, [pc, #60]	; (800c21c <xTaskIncrementTick+0x168>)
 800c1de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c1e0:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <xTaskIncrementTick+0x16c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c1ec:	697b      	ldr	r3, [r7, #20]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	2000043c 	.word	0x2000043c
 800c1fc:	20000418 	.word	0x20000418
 800c200:	200003cc 	.word	0x200003cc
 800c204:	200003d0 	.word	0x200003d0
 800c208:	2000042c 	.word	0x2000042c
 800c20c:	20000434 	.word	0x20000434
 800c210:	2000041c 	.word	0x2000041c
 800c214:	20000318 	.word	0x20000318
 800c218:	20000314 	.word	0x20000314
 800c21c:	20000424 	.word	0x20000424
 800c220:	20000428 	.word	0x20000428

0800c224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c22a:	4b26      	ldr	r3, [pc, #152]	; (800c2c4 <vTaskSwitchContext+0xa0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c232:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <vTaskSwitchContext+0xa4>)
 800c234:	2201      	movs	r2, #1
 800c236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c238:	e03e      	b.n	800c2b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800c23a:	4b23      	ldr	r3, [pc, #140]	; (800c2c8 <vTaskSwitchContext+0xa4>)
 800c23c:	2200      	movs	r2, #0
 800c23e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c240:	4b22      	ldr	r3, [pc, #136]	; (800c2cc <vTaskSwitchContext+0xa8>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	fab3 f383 	clz	r3, r3
 800c24c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c24e:	7afb      	ldrb	r3, [r7, #11]
 800c250:	f1c3 031f 	rsb	r3, r3, #31
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	491e      	ldr	r1, [pc, #120]	; (800c2d0 <vTaskSwitchContext+0xac>)
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <vTaskSwitchContext+0x5a>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	607b      	str	r3, [r7, #4]
 800c27c:	e7fe      	b.n	800c27c <vTaskSwitchContext+0x58>
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4613      	mov	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4a11      	ldr	r2, [pc, #68]	; (800c2d0 <vTaskSwitchContext+0xac>)
 800c28a:	4413      	add	r3, r2
 800c28c:	613b      	str	r3, [r7, #16]
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	605a      	str	r2, [r3, #4]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d104      	bne.n	800c2ae <vTaskSwitchContext+0x8a>
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	605a      	str	r2, [r3, #4]
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	4a07      	ldr	r2, [pc, #28]	; (800c2d4 <vTaskSwitchContext+0xb0>)
 800c2b6:	6013      	str	r3, [r2, #0]
}
 800c2b8:	bf00      	nop
 800c2ba:	371c      	adds	r7, #28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	2000043c 	.word	0x2000043c
 800c2c8:	20000428 	.word	0x20000428
 800c2cc:	2000041c 	.word	0x2000041c
 800c2d0:	20000318 	.word	0x20000318
 800c2d4:	20000314 	.word	0x20000314

0800c2d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d109      	bne.n	800c2fc <vTaskPlaceOnEventList+0x24>
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	e7fe      	b.n	800c2fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2fc:	4b07      	ldr	r3, [pc, #28]	; (800c31c <vTaskPlaceOnEventList+0x44>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3318      	adds	r3, #24
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7fe fbd5 	bl	800aab4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c30a:	2101      	movs	r1, #1
 800c30c:	6838      	ldr	r0, [r7, #0]
 800c30e:	f000 fb8b 	bl	800ca28 <prvAddCurrentTaskToDelayedList>
}
 800c312:	bf00      	nop
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20000314 	.word	0x20000314

0800c320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <xTaskRemoveFromEventList+0x2a>
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	e7fe      	b.n	800c348 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	3318      	adds	r3, #24
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe fbe9 	bl	800ab26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c354:	4b1d      	ldr	r3, [pc, #116]	; (800c3cc <xTaskRemoveFromEventList+0xac>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d11c      	bne.n	800c396 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	3304      	adds	r3, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f7fe fbe0 	bl	800ab26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36a:	2201      	movs	r2, #1
 800c36c:	409a      	lsls	r2, r3
 800c36e:	4b18      	ldr	r3, [pc, #96]	; (800c3d0 <xTaskRemoveFromEventList+0xb0>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4313      	orrs	r3, r2
 800c374:	4a16      	ldr	r2, [pc, #88]	; (800c3d0 <xTaskRemoveFromEventList+0xb0>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4a13      	ldr	r2, [pc, #76]	; (800c3d4 <xTaskRemoveFromEventList+0xb4>)
 800c386:	441a      	add	r2, r3
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4610      	mov	r0, r2
 800c390:	f7fe fb6c 	bl	800aa6c <vListInsertEnd>
 800c394:	e005      	b.n	800c3a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	3318      	adds	r3, #24
 800c39a:	4619      	mov	r1, r3
 800c39c:	480e      	ldr	r0, [pc, #56]	; (800c3d8 <xTaskRemoveFromEventList+0xb8>)
 800c39e:	f7fe fb65 	bl	800aa6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <xTaskRemoveFromEventList+0xbc>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d905      	bls.n	800c3bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <xTaskRemoveFromEventList+0xc0>)
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	e001      	b.n	800c3c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3c0:	697b      	ldr	r3, [r7, #20]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	2000043c 	.word	0x2000043c
 800c3d0:	2000041c 	.word	0x2000041c
 800c3d4:	20000318 	.word	0x20000318
 800c3d8:	200003d4 	.word	0x200003d4
 800c3dc:	20000314 	.word	0x20000314
 800c3e0:	20000428 	.word	0x20000428

0800c3e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3ec:	4b06      	ldr	r3, [pc, #24]	; (800c408 <vTaskInternalSetTimeOutState+0x24>)
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <vTaskInternalSetTimeOutState+0x28>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	605a      	str	r2, [r3, #4]
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	2000042c 	.word	0x2000042c
 800c40c:	20000418 	.word	0x20000418

0800c410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <xTaskCheckForTimeOut+0x24>
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	e7fe      	b.n	800c432 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d109      	bne.n	800c44e <xTaskCheckForTimeOut+0x3e>
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	e7fe      	b.n	800c44c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c44e:	f000 fc75 	bl	800cd3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c452:	4b1d      	ldr	r3, [pc, #116]	; (800c4c8 <xTaskCheckForTimeOut+0xb8>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d102      	bne.n	800c472 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
 800c470:	e023      	b.n	800c4ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	4b15      	ldr	r3, [pc, #84]	; (800c4cc <xTaskCheckForTimeOut+0xbc>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d007      	beq.n	800c48e <xTaskCheckForTimeOut+0x7e>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	429a      	cmp	r2, r3
 800c486:	d302      	bcc.n	800c48e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c488:	2301      	movs	r3, #1
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	e015      	b.n	800c4ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	429a      	cmp	r2, r3
 800c496:	d20b      	bcs.n	800c4b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	1ad2      	subs	r2, r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff ff9d 	bl	800c3e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61fb      	str	r3, [r7, #28]
 800c4ae:	e004      	b.n	800c4ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4ba:	f000 fc6d 	bl	800cd98 <vPortExitCritical>

	return xReturn;
 800c4be:	69fb      	ldr	r3, [r7, #28]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20000418 	.word	0x20000418
 800c4cc:	2000042c 	.word	0x2000042c

0800c4d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4d4:	4b03      	ldr	r3, [pc, #12]	; (800c4e4 <vTaskMissedYield+0x14>)
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]
}
 800c4da:	bf00      	nop
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr
 800c4e4:	20000428 	.word	0x20000428

0800c4e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4f0:	f000 f852 	bl	800c598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4f4:	4b06      	ldr	r3, [pc, #24]	; (800c510 <prvIdleTask+0x28>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d9f9      	bls.n	800c4f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4fc:	4b05      	ldr	r3, [pc, #20]	; (800c514 <prvIdleTask+0x2c>)
 800c4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c50c:	e7f0      	b.n	800c4f0 <prvIdleTask+0x8>
 800c50e:	bf00      	nop
 800c510:	20000318 	.word	0x20000318
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c51e:	2300      	movs	r3, #0
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	e00c      	b.n	800c53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	4613      	mov	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4a12      	ldr	r2, [pc, #72]	; (800c578 <prvInitialiseTaskLists+0x60>)
 800c530:	4413      	add	r3, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fa6d 	bl	800aa12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3301      	adds	r3, #1
 800c53c:	607b      	str	r3, [r7, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b06      	cmp	r3, #6
 800c542:	d9ef      	bls.n	800c524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c544:	480d      	ldr	r0, [pc, #52]	; (800c57c <prvInitialiseTaskLists+0x64>)
 800c546:	f7fe fa64 	bl	800aa12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c54a:	480d      	ldr	r0, [pc, #52]	; (800c580 <prvInitialiseTaskLists+0x68>)
 800c54c:	f7fe fa61 	bl	800aa12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c550:	480c      	ldr	r0, [pc, #48]	; (800c584 <prvInitialiseTaskLists+0x6c>)
 800c552:	f7fe fa5e 	bl	800aa12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c556:	480c      	ldr	r0, [pc, #48]	; (800c588 <prvInitialiseTaskLists+0x70>)
 800c558:	f7fe fa5b 	bl	800aa12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c55c:	480b      	ldr	r0, [pc, #44]	; (800c58c <prvInitialiseTaskLists+0x74>)
 800c55e:	f7fe fa58 	bl	800aa12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c562:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <prvInitialiseTaskLists+0x78>)
 800c564:	4a05      	ldr	r2, [pc, #20]	; (800c57c <prvInitialiseTaskLists+0x64>)
 800c566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c568:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <prvInitialiseTaskLists+0x7c>)
 800c56a:	4a05      	ldr	r2, [pc, #20]	; (800c580 <prvInitialiseTaskLists+0x68>)
 800c56c:	601a      	str	r2, [r3, #0]
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20000318 	.word	0x20000318
 800c57c:	200003a4 	.word	0x200003a4
 800c580:	200003b8 	.word	0x200003b8
 800c584:	200003d4 	.word	0x200003d4
 800c588:	200003e8 	.word	0x200003e8
 800c58c:	20000400 	.word	0x20000400
 800c590:	200003cc 	.word	0x200003cc
 800c594:	200003d0 	.word	0x200003d0

0800c598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c59e:	e019      	b.n	800c5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c5a0:	f000 fbcc 	bl	800cd3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5a4:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <prvCheckTasksWaitingTermination+0x4c>)
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe fab8 	bl	800ab26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <prvCheckTasksWaitingTermination+0x50>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	4a0a      	ldr	r2, [pc, #40]	; (800c5e8 <prvCheckTasksWaitingTermination+0x50>)
 800c5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <prvCheckTasksWaitingTermination+0x54>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	4a09      	ldr	r2, [pc, #36]	; (800c5ec <prvCheckTasksWaitingTermination+0x54>)
 800c5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5ca:	f000 fbe5 	bl	800cd98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f80e 	bl	800c5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5d4:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <prvCheckTasksWaitingTermination+0x54>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e1      	bne.n	800c5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	200003e8 	.word	0x200003e8
 800c5e8:	20000414 	.word	0x20000414
 800c5ec:	200003fc 	.word	0x200003fc

0800c5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d108      	bne.n	800c614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fd74 	bl	800d0f4 <vPortFree>
				vPortFree( pxTCB );
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fd71 	bl	800d0f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c612:	e017      	b.n	800c644 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d103      	bne.n	800c626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fd68 	bl	800d0f4 <vPortFree>
	}
 800c624:	e00e      	b.n	800c644 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d009      	beq.n	800c644 <prvDeleteTCB+0x54>
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	60fb      	str	r3, [r7, #12]
 800c642:	e7fe      	b.n	800c642 <prvDeleteTCB+0x52>
	}
 800c644:	bf00      	nop
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c652:	4b0c      	ldr	r3, [pc, #48]	; (800c684 <prvResetNextTaskUnblockTime+0x38>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d104      	bne.n	800c666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c65c:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <prvResetNextTaskUnblockTime+0x3c>)
 800c65e:	f04f 32ff 	mov.w	r2, #4294967295
 800c662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c664:	e008      	b.n	800c678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c666:	4b07      	ldr	r3, [pc, #28]	; (800c684 <prvResetNextTaskUnblockTime+0x38>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	4a04      	ldr	r2, [pc, #16]	; (800c688 <prvResetNextTaskUnblockTime+0x3c>)
 800c676:	6013      	str	r3, [r2, #0]
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	200003cc 	.word	0x200003cc
 800c688:	20000434 	.word	0x20000434

0800c68c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c692:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <xTaskGetSchedulerState+0x34>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c69a:	2301      	movs	r3, #1
 800c69c:	607b      	str	r3, [r7, #4]
 800c69e:	e008      	b.n	800c6b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6a0:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <xTaskGetSchedulerState+0x38>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	607b      	str	r3, [r7, #4]
 800c6ac:	e001      	b.n	800c6b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6b2:	687b      	ldr	r3, [r7, #4]
	}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	20000420 	.word	0x20000420
 800c6c4:	2000043c 	.word	0x2000043c

0800c6c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d069      	beq.n	800c7b2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e2:	4b36      	ldr	r3, [pc, #216]	; (800c7bc <xTaskPriorityInherit+0xf4>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d259      	bcs.n	800c7a0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	db06      	blt.n	800c702 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6f4:	4b31      	ldr	r3, [pc, #196]	; (800c7bc <xTaskPriorityInherit+0xf4>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fa:	f1c3 0207 	rsb	r2, r3, #7
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	6959      	ldr	r1, [r3, #20]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70a:	4613      	mov	r3, r2
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	4413      	add	r3, r2
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4a2b      	ldr	r2, [pc, #172]	; (800c7c0 <xTaskPriorityInherit+0xf8>)
 800c714:	4413      	add	r3, r2
 800c716:	4299      	cmp	r1, r3
 800c718:	d13a      	bne.n	800c790 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	3304      	adds	r3, #4
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe fa01 	bl	800ab26 <uxListRemove>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d115      	bne.n	800c756 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72e:	4924      	ldr	r1, [pc, #144]	; (800c7c0 <xTaskPriorityInherit+0xf8>)
 800c730:	4613      	mov	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10a      	bne.n	800c756 <xTaskPriorityInherit+0x8e>
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c744:	2201      	movs	r2, #1
 800c746:	fa02 f303 	lsl.w	r3, r2, r3
 800c74a:	43da      	mvns	r2, r3
 800c74c:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <xTaskPriorityInherit+0xfc>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4013      	ands	r3, r2
 800c752:	4a1c      	ldr	r2, [pc, #112]	; (800c7c4 <xTaskPriorityInherit+0xfc>)
 800c754:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c756:	4b19      	ldr	r3, [pc, #100]	; (800c7bc <xTaskPriorityInherit+0xf4>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c764:	2201      	movs	r2, #1
 800c766:	409a      	lsls	r2, r3
 800c768:	4b16      	ldr	r3, [pc, #88]	; (800c7c4 <xTaskPriorityInherit+0xfc>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	4a15      	ldr	r2, [pc, #84]	; (800c7c4 <xTaskPriorityInherit+0xfc>)
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4a10      	ldr	r2, [pc, #64]	; (800c7c0 <xTaskPriorityInherit+0xf8>)
 800c780:	441a      	add	r2, r3
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	3304      	adds	r3, #4
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7fe f96f 	bl	800aa6c <vListInsertEnd>
 800c78e:	e004      	b.n	800c79a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c790:	4b0a      	ldr	r3, [pc, #40]	; (800c7bc <xTaskPriorityInherit+0xf4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c79a:	2301      	movs	r3, #1
 800c79c:	60fb      	str	r3, [r7, #12]
 800c79e:	e008      	b.n	800c7b2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7a4:	4b05      	ldr	r3, [pc, #20]	; (800c7bc <xTaskPriorityInherit+0xf4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d201      	bcs.n	800c7b2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
	}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	20000314 	.word	0x20000314
 800c7c0:	20000318 	.word	0x20000318
 800c7c4:	2000041c 	.word	0x2000041c

0800c7c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d06c      	beq.n	800c8b8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c7de:	4b39      	ldr	r3, [pc, #228]	; (800c8c4 <xTaskPriorityDisinherit+0xfc>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d009      	beq.n	800c7fc <xTaskPriorityDisinherit+0x34>
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	e7fe      	b.n	800c7fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c800:	2b00      	cmp	r3, #0
 800c802:	d109      	bne.n	800c818 <xTaskPriorityDisinherit+0x50>
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	60bb      	str	r3, [r7, #8]
 800c816:	e7fe      	b.n	800c816 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d044      	beq.n	800c8b8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c832:	2b00      	cmp	r3, #0
 800c834:	d140      	bne.n	800c8b8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	3304      	adds	r3, #4
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe f973 	bl	800ab26 <uxListRemove>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d115      	bne.n	800c872 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84a:	491f      	ldr	r1, [pc, #124]	; (800c8c8 <xTaskPriorityDisinherit+0x100>)
 800c84c:	4613      	mov	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	440b      	add	r3, r1
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10a      	bne.n	800c872 <xTaskPriorityDisinherit+0xaa>
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	2201      	movs	r2, #1
 800c862:	fa02 f303 	lsl.w	r3, r2, r3
 800c866:	43da      	mvns	r2, r3
 800c868:	4b18      	ldr	r3, [pc, #96]	; (800c8cc <xTaskPriorityDisinherit+0x104>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4013      	ands	r3, r2
 800c86e:	4a17      	ldr	r2, [pc, #92]	; (800c8cc <xTaskPriorityDisinherit+0x104>)
 800c870:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87e:	f1c3 0207 	rsb	r2, r3, #7
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88a:	2201      	movs	r2, #1
 800c88c:	409a      	lsls	r2, r3
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <xTaskPriorityDisinherit+0x104>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4313      	orrs	r3, r2
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <xTaskPriorityDisinherit+0x104>)
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89c:	4613      	mov	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4a08      	ldr	r2, [pc, #32]	; (800c8c8 <xTaskPriorityDisinherit+0x100>)
 800c8a6:	441a      	add	r2, r3
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fe f8dc 	bl	800aa6c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8b8:	697b      	ldr	r3, [r7, #20]
	}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20000314 	.word	0x20000314
 800c8c8:	20000318 	.word	0x20000318
 800c8cc:	2000041c 	.word	0x2000041c

0800c8d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b088      	sub	sp, #32
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 8081 	beq.w	800c9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d109      	bne.n	800c906 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e7fe      	b.n	800c904 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d902      	bls.n	800c916 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	e002      	b.n	800c91c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c91a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	429a      	cmp	r2, r3
 800c924:	d062      	beq.n	800c9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d15d      	bne.n	800c9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c930:	4b30      	ldr	r3, [pc, #192]	; (800c9f4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	429a      	cmp	r2, r3
 800c938:	d109      	bne.n	800c94e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	60bb      	str	r3, [r7, #8]
 800c94c:	e7fe      	b.n	800c94c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	db04      	blt.n	800c96c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	f1c3 0207 	rsb	r2, r3, #7
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	6959      	ldr	r1, [r3, #20]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4a1f      	ldr	r2, [pc, #124]	; (800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c97c:	4413      	add	r3, r2
 800c97e:	4299      	cmp	r1, r3
 800c980:	d134      	bne.n	800c9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	3304      	adds	r3, #4
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe f8cd 	bl	800ab26 <uxListRemove>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d115      	bne.n	800c9be <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c996:	4918      	ldr	r1, [pc, #96]	; (800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c998:	4613      	mov	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	440b      	add	r3, r1
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b2:	43da      	mvns	r2, r3
 800c9b4:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	4a10      	ldr	r2, [pc, #64]	; (800c9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c9bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	409a      	lsls	r2, r3
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	4a0b      	ldr	r2, [pc, #44]	; (800c9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c9ce:	6013      	str	r3, [r2, #0]
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4a06      	ldr	r2, [pc, #24]	; (800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c9de:	441a      	add	r2, r3
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	f7fe f840 	bl	800aa6c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9ec:	bf00      	nop
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20000314 	.word	0x20000314
 800c9f8:	20000318 	.word	0x20000318
 800c9fc:	2000041c 	.word	0x2000041c

0800ca00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca00:	b480      	push	{r7}
 800ca02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca04:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d004      	beq.n	800ca16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca0c:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca12:	3201      	adds	r2, #1
 800ca14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ca16:	4b03      	ldr	r3, [pc, #12]	; (800ca24 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca18:	681b      	ldr	r3, [r3, #0]
	}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	20000314 	.word	0x20000314

0800ca28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca32:	4b29      	ldr	r3, [pc, #164]	; (800cad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca38:	4b28      	ldr	r3, [pc, #160]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe f871 	bl	800ab26 <uxListRemove>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10b      	bne.n	800ca62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ca4a:	4b24      	ldr	r3, [pc, #144]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca50:	2201      	movs	r2, #1
 800ca52:	fa02 f303 	lsl.w	r3, r2, r3
 800ca56:	43da      	mvns	r2, r3
 800ca58:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	4a20      	ldr	r2, [pc, #128]	; (800cae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca68:	d10a      	bne.n	800ca80 <prvAddCurrentTaskToDelayedList+0x58>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d007      	beq.n	800ca80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca70:	4b1a      	ldr	r3, [pc, #104]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3304      	adds	r3, #4
 800ca76:	4619      	mov	r1, r3
 800ca78:	481a      	ldr	r0, [pc, #104]	; (800cae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca7a:	f7fd fff7 	bl	800aa6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca7e:	e026      	b.n	800cace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4413      	add	r3, r2
 800ca86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca88:	4b14      	ldr	r3, [pc, #80]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d209      	bcs.n	800caac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca98:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3304      	adds	r3, #4
 800caa2:	4619      	mov	r1, r3
 800caa4:	4610      	mov	r0, r2
 800caa6:	f7fe f805 	bl	800aab4 <vListInsert>
}
 800caaa:	e010      	b.n	800cace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <prvAddCurrentTaskToDelayedList+0xc4>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7fd fffb 	bl	800aab4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cabe:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d202      	bcs.n	800cace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cac8:	4a09      	ldr	r2, [pc, #36]	; (800caf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6013      	str	r3, [r2, #0]
}
 800cace:	bf00      	nop
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20000418 	.word	0x20000418
 800cadc:	20000314 	.word	0x20000314
 800cae0:	2000041c 	.word	0x2000041c
 800cae4:	20000400 	.word	0x20000400
 800cae8:	200003d0 	.word	0x200003d0
 800caec:	200003cc 	.word	0x200003cc
 800caf0:	20000434 	.word	0x20000434

0800caf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3b04      	subs	r3, #4
 800cb04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f023 0201 	bic.w	r2, r3, #1
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3b04      	subs	r3, #4
 800cb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb24:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <pxPortInitialiseStack+0x64>)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b14      	subs	r3, #20
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3b04      	subs	r3, #4
 800cb3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f06f 0202 	mvn.w	r2, #2
 800cb42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3b20      	subs	r3, #32
 800cb48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	0800cb5d 	.word	0x0800cb5d

0800cb5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb66:	4b11      	ldr	r3, [pc, #68]	; (800cbac <prvTaskExitError+0x50>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	d009      	beq.n	800cb84 <prvTaskExitError+0x28>
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	e7fe      	b.n	800cb82 <prvTaskExitError+0x26>
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb96:	bf00      	nop
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d0fc      	beq.n	800cb98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb9e:	bf00      	nop
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	20000024 	.word	0x20000024

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b44      	ldr	r3, [pc, #272]	; (800cd18 <xPortStartScheduler+0x118>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a44      	ldr	r2, [pc, #272]	; (800cd1c <xPortStartScheduler+0x11c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d109      	bne.n	800cc24 <xPortStartScheduler+0x24>
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
 800cc22:	e7fe      	b.n	800cc22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc24:	4b3c      	ldr	r3, [pc, #240]	; (800cd18 <xPortStartScheduler+0x118>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a3d      	ldr	r2, [pc, #244]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d109      	bne.n	800cc42 <xPortStartScheduler+0x42>
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e7fe      	b.n	800cc40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc42:	4b38      	ldr	r3, [pc, #224]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	22ff      	movs	r2, #255	; 0xff
 800cc52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	4b30      	ldr	r3, [pc, #192]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6a:	4b30      	ldr	r3, [pc, #192]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc6c:	2207      	movs	r2, #7
 800cc6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc70:	e009      	b.n	800cc86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cc72:	4b2e      	ldr	r3, [pc, #184]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	4a2c      	ldr	r2, [pc, #176]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc86:	78fb      	ldrb	r3, [r7, #3]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b80      	cmp	r3, #128	; 0x80
 800cc90:	d0ef      	beq.n	800cc72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc92:	4b26      	ldr	r3, [pc, #152]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f1c3 0307 	rsb	r3, r3, #7
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	d009      	beq.n	800ccb2 <xPortStartScheduler+0xb2>
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60bb      	str	r3, [r7, #8]
 800ccb0:	e7fe      	b.n	800ccb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb2:	4b1e      	ldr	r3, [pc, #120]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	021b      	lsls	r3, r3, #8
 800ccb8:	4a1c      	ldr	r2, [pc, #112]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccbc:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccc4:	4a19      	ldr	r2, [pc, #100]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd0:	4b17      	ldr	r3, [pc, #92]	; (800cd30 <xPortStartScheduler+0x130>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a16      	ldr	r2, [pc, #88]	; (800cd30 <xPortStartScheduler+0x130>)
 800ccd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccdc:	4b14      	ldr	r3, [pc, #80]	; (800cd30 <xPortStartScheduler+0x130>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a13      	ldr	r2, [pc, #76]	; (800cd30 <xPortStartScheduler+0x130>)
 800cce2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cce8:	f000 f8d6 	bl	800ce98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccec:	4b11      	ldr	r3, [pc, #68]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf2:	f000 f8f5 	bl	800cee0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a0f      	ldr	r2, [pc, #60]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd02:	f7ff ff69 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd06:	f7ff fa8d 	bl	800c224 <vTaskSwitchContext>
	prvTaskExitError();
 800cd0a:	f7ff ff27 	bl	800cb5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	e000ed00 	.word	0xe000ed00
 800cd1c:	410fc271 	.word	0x410fc271
 800cd20:	410fc270 	.word	0x410fc270
 800cd24:	e000e400 	.word	0xe000e400
 800cd28:	20000440 	.word	0x20000440
 800cd2c:	20000444 	.word	0x20000444
 800cd30:	e000ed20 	.word	0xe000ed20
 800cd34:	20000024 	.word	0x20000024
 800cd38:	e000ef34 	.word	0xe000ef34

0800cd3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd54:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <vPortEnterCritical+0x54>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	4a0d      	ldr	r2, [pc, #52]	; (800cd90 <vPortEnterCritical+0x54>)
 800cd5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd5e:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <vPortEnterCritical+0x54>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d10e      	bne.n	800cd84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <vPortEnterCritical+0x58>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d009      	beq.n	800cd84 <vPortEnterCritical+0x48>
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	603b      	str	r3, [r7, #0]
 800cd82:	e7fe      	b.n	800cd82 <vPortEnterCritical+0x46>
	}
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	20000024 	.word	0x20000024
 800cd94:	e000ed04 	.word	0xe000ed04

0800cd98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd9e:	4b11      	ldr	r3, [pc, #68]	; (800cde4 <vPortExitCritical+0x4c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <vPortExitCritical+0x22>
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	607b      	str	r3, [r7, #4]
 800cdb8:	e7fe      	b.n	800cdb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cdba:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <vPortExitCritical+0x4c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4a08      	ldr	r2, [pc, #32]	; (800cde4 <vPortExitCritical+0x4c>)
 800cdc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdc4:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <vPortExitCritical+0x4c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <vPortExitCritical+0x3e>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdd6:	bf00      	nop
 800cdd8:	370c      	adds	r7, #12
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	20000024 	.word	0x20000024
	...

0800cdf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdf0:	f3ef 8009 	mrs	r0, PSP
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <pxCurrentTCBConst>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	f01e 0f10 	tst.w	lr, #16
 800ce00:	bf08      	it	eq
 800ce02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	6010      	str	r0, [r2, #0]
 800ce0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce14:	f380 8811 	msr	BASEPRI, r0
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f7ff fa00 	bl	800c224 <vTaskSwitchContext>
 800ce24:	f04f 0000 	mov.w	r0, #0
 800ce28:	f380 8811 	msr	BASEPRI, r0
 800ce2c:	bc09      	pop	{r0, r3}
 800ce2e:	6819      	ldr	r1, [r3, #0]
 800ce30:	6808      	ldr	r0, [r1, #0]
 800ce32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce36:	f01e 0f10 	tst.w	lr, #16
 800ce3a:	bf08      	it	eq
 800ce3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce40:	f380 8809 	msr	PSP, r0
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w

0800ce50 <pxCurrentTCBConst>:
 800ce50:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop

0800ce58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce70:	f7ff f920 	bl	800c0b4 <xTaskIncrementTick>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce7a:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <SysTick_Handler+0x3c>)
 800ce7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	2300      	movs	r3, #0
 800ce84:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	e000ed04 	.word	0xe000ed04

0800ce98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce9c:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <vPortSetupTimerInterrupt+0x34>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cea2:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <vPortSetupTimerInterrupt+0x38>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cea8:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <vPortSetupTimerInterrupt+0x3c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a0a      	ldr	r2, [pc, #40]	; (800ced8 <vPortSetupTimerInterrupt+0x40>)
 800ceae:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb2:	099b      	lsrs	r3, r3, #6
 800ceb4:	4a09      	ldr	r2, [pc, #36]	; (800cedc <vPortSetupTimerInterrupt+0x44>)
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ceba:	4b04      	ldr	r3, [pc, #16]	; (800cecc <vPortSetupTimerInterrupt+0x34>)
 800cebc:	2207      	movs	r2, #7
 800cebe:	601a      	str	r2, [r3, #0]
}
 800cec0:	bf00      	nop
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	e000e010 	.word	0xe000e010
 800ced0:	e000e018 	.word	0xe000e018
 800ced4:	20000000 	.word	0x20000000
 800ced8:	10624dd3 	.word	0x10624dd3
 800cedc:	e000e014 	.word	0xe000e014

0800cee0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cee0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cef0 <vPortEnableVFP+0x10>
 800cee4:	6801      	ldr	r1, [r0, #0]
 800cee6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ceea:	6001      	str	r1, [r0, #0]
 800ceec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ceee:	bf00      	nop
 800cef0:	e000ed88 	.word	0xe000ed88

0800cef4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cefa:	f3ef 8305 	mrs	r3, IPSR
 800cefe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b0f      	cmp	r3, #15
 800cf04:	d913      	bls.n	800cf2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf06:	4a16      	ldr	r2, [pc, #88]	; (800cf60 <vPortValidateInterruptPriority+0x6c>)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf10:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <vPortValidateInterruptPriority+0x70>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	7afa      	ldrb	r2, [r7, #11]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d209      	bcs.n	800cf2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	e7fe      	b.n	800cf2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf2e:	4b0e      	ldr	r3, [pc, #56]	; (800cf68 <vPortValidateInterruptPriority+0x74>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf36:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <vPortValidateInterruptPriority+0x78>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d909      	bls.n	800cf52 <vPortValidateInterruptPriority+0x5e>
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	e7fe      	b.n	800cf50 <vPortValidateInterruptPriority+0x5c>
	}
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	e000e3f0 	.word	0xe000e3f0
 800cf64:	20000440 	.word	0x20000440
 800cf68:	e000ed0c 	.word	0xe000ed0c
 800cf6c:	20000444 	.word	0x20000444

0800cf70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08a      	sub	sp, #40	; 0x28
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf7c:	f7fe ffce 	bl	800bf1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf80:	4b57      	ldr	r3, [pc, #348]	; (800d0e0 <pvPortMalloc+0x170>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf88:	f000 f90c 	bl	800d1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf8c:	4b55      	ldr	r3, [pc, #340]	; (800d0e4 <pvPortMalloc+0x174>)
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4013      	ands	r3, r2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f040 808c 	bne.w	800d0b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01c      	beq.n	800cfda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cfa0:	2208      	movs	r2, #8
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f003 0307 	and.w	r3, r3, #7
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d013      	beq.n	800cfda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f023 0307 	bic.w	r3, r3, #7
 800cfb8:	3308      	adds	r3, #8
 800cfba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f003 0307 	and.w	r3, r3, #7
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d009      	beq.n	800cfda <pvPortMalloc+0x6a>
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	e7fe      	b.n	800cfd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d068      	beq.n	800d0b2 <pvPortMalloc+0x142>
 800cfe0:	4b41      	ldr	r3, [pc, #260]	; (800d0e8 <pvPortMalloc+0x178>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d863      	bhi.n	800d0b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfea:	4b40      	ldr	r3, [pc, #256]	; (800d0ec <pvPortMalloc+0x17c>)
 800cfec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfee:	4b3f      	ldr	r3, [pc, #252]	; (800d0ec <pvPortMalloc+0x17c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cff4:	e004      	b.n	800d000 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d903      	bls.n	800d012 <pvPortMalloc+0xa2>
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f1      	bne.n	800cff6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d012:	4b33      	ldr	r3, [pc, #204]	; (800d0e0 <pvPortMalloc+0x170>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d018:	429a      	cmp	r2, r3
 800d01a:	d04a      	beq.n	800d0b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2208      	movs	r2, #8
 800d022:	4413      	add	r3, r2
 800d024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	685a      	ldr	r2, [r3, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	1ad2      	subs	r2, r2, r3
 800d036:	2308      	movs	r3, #8
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d91e      	bls.n	800d07c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d009      	beq.n	800d064 <pvPortMalloc+0xf4>
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	e7fe      	b.n	800d062 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	1ad2      	subs	r2, r2, r3
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d076:	69b8      	ldr	r0, [r7, #24]
 800d078:	f000 f8f6 	bl	800d268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d07c:	4b1a      	ldr	r3, [pc, #104]	; (800d0e8 <pvPortMalloc+0x178>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	4a18      	ldr	r2, [pc, #96]	; (800d0e8 <pvPortMalloc+0x178>)
 800d088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d08a:	4b17      	ldr	r3, [pc, #92]	; (800d0e8 <pvPortMalloc+0x178>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <pvPortMalloc+0x180>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	429a      	cmp	r2, r3
 800d094:	d203      	bcs.n	800d09e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d096:	4b14      	ldr	r3, [pc, #80]	; (800d0e8 <pvPortMalloc+0x178>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a15      	ldr	r2, [pc, #84]	; (800d0f0 <pvPortMalloc+0x180>)
 800d09c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	4b10      	ldr	r3, [pc, #64]	; (800d0e4 <pvPortMalloc+0x174>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0b2:	f7fe ff41 	bl	800bf38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	f003 0307 	and.w	r3, r3, #7
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d009      	beq.n	800d0d4 <pvPortMalloc+0x164>
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	e7fe      	b.n	800d0d2 <pvPortMalloc+0x162>
	return pvReturn;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3728      	adds	r7, #40	; 0x28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	2000c7a0 	.word	0x2000c7a0
 800d0e4:	2000c7ac 	.word	0x2000c7ac
 800d0e8:	2000c7a4 	.word	0x2000c7a4
 800d0ec:	2000c798 	.word	0x2000c798
 800d0f0:	2000c7a8 	.word	0x2000c7a8

0800d0f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d046      	beq.n	800d194 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d106:	2308      	movs	r3, #8
 800d108:	425b      	negs	r3, r3
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	4413      	add	r3, r2
 800d10e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	4b20      	ldr	r3, [pc, #128]	; (800d19c <vPortFree+0xa8>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4013      	ands	r3, r2
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d109      	bne.n	800d136 <vPortFree+0x42>
 800d122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	e7fe      	b.n	800d134 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <vPortFree+0x5e>
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60bb      	str	r3, [r7, #8]
 800d150:	e7fe      	b.n	800d150 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	4b11      	ldr	r3, [pc, #68]	; (800d19c <vPortFree+0xa8>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d019      	beq.n	800d194 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d115      	bne.n	800d194 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	4b0b      	ldr	r3, [pc, #44]	; (800d19c <vPortFree+0xa8>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	43db      	mvns	r3, r3
 800d172:	401a      	ands	r2, r3
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d178:	f7fe fed0 	bl	800bf1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <vPortFree+0xac>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4413      	add	r3, r2
 800d186:	4a06      	ldr	r2, [pc, #24]	; (800d1a0 <vPortFree+0xac>)
 800d188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d18a:	6938      	ldr	r0, [r7, #16]
 800d18c:	f000 f86c 	bl	800d268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d190:	f7fe fed2 	bl	800bf38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d194:	bf00      	nop
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	2000c7ac 	.word	0x2000c7ac
 800d1a0:	2000c7a4 	.word	0x2000c7a4

0800d1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1b0:	4b27      	ldr	r3, [pc, #156]	; (800d250 <prvHeapInit+0xac>)
 800d1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00c      	beq.n	800d1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3307      	adds	r3, #7
 800d1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f023 0307 	bic.w	r3, r3, #7
 800d1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	4a1f      	ldr	r2, [pc, #124]	; (800d250 <prvHeapInit+0xac>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1dc:	4a1d      	ldr	r2, [pc, #116]	; (800d254 <prvHeapInit+0xb0>)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1e2:	4b1c      	ldr	r3, [pc, #112]	; (800d254 <prvHeapInit+0xb0>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1f0:	2208      	movs	r2, #8
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	1a9b      	subs	r3, r3, r2
 800d1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f023 0307 	bic.w	r3, r3, #7
 800d1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4a15      	ldr	r2, [pc, #84]	; (800d258 <prvHeapInit+0xb4>)
 800d204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d206:	4b14      	ldr	r3, [pc, #80]	; (800d258 <prvHeapInit+0xb4>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2200      	movs	r2, #0
 800d20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d20e:	4b12      	ldr	r3, [pc, #72]	; (800d258 <prvHeapInit+0xb4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	1ad2      	subs	r2, r2, r3
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <prvHeapInit+0xb4>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4a0a      	ldr	r2, [pc, #40]	; (800d25c <prvHeapInit+0xb8>)
 800d232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4a09      	ldr	r2, [pc, #36]	; (800d260 <prvHeapInit+0xbc>)
 800d23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d23c:	4b09      	ldr	r3, [pc, #36]	; (800d264 <prvHeapInit+0xc0>)
 800d23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d242:	601a      	str	r2, [r3, #0]
}
 800d244:	bf00      	nop
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	20000448 	.word	0x20000448
 800d254:	2000c798 	.word	0x2000c798
 800d258:	2000c7a0 	.word	0x2000c7a0
 800d25c:	2000c7a8 	.word	0x2000c7a8
 800d260:	2000c7a4 	.word	0x2000c7a4
 800d264:	2000c7ac 	.word	0x2000c7ac

0800d268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d270:	4b28      	ldr	r3, [pc, #160]	; (800d314 <prvInsertBlockIntoFreeList+0xac>)
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	e002      	b.n	800d27c <prvInsertBlockIntoFreeList+0x14>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	429a      	cmp	r2, r3
 800d284:	d8f7      	bhi.n	800d276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	4413      	add	r3, r2
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	429a      	cmp	r2, r3
 800d296:	d108      	bne.n	800d2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	441a      	add	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d118      	bne.n	800d2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b15      	ldr	r3, [pc, #84]	; (800d318 <prvInsertBlockIntoFreeList+0xb0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d00d      	beq.n	800d2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	441a      	add	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	e008      	b.n	800d2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2e6:	4b0c      	ldr	r3, [pc, #48]	; (800d318 <prvInsertBlockIntoFreeList+0xb0>)
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	e003      	b.n	800d2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d002      	beq.n	800d306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d306:	bf00      	nop
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	2000c798 	.word	0x2000c798
 800d318:	2000c7a0 	.word	0x2000c7a0

0800d31c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	330c      	adds	r3, #12
 800d32c:	461a      	mov	r2, r3
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f002 f96f 	bl	800f614 <tcpip_send_msg_wait_sem>
 800d336:	4603      	mov	r3, r0
 800d338:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d103      	bne.n	800d34a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d348:	e001      	b.n	800d34e <netconn_apimsg+0x32>
  }
  return err;
 800d34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	603a      	str	r2, [r7, #0]
 800d362:	71fb      	strb	r3, [r7, #7]
 800d364:	460b      	mov	r3, r1
 800d366:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 ff83 	bl	800e278 <netconn_alloc>
 800d372:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	2b00      	cmp	r3, #0
 800d378:	d054      	beq.n	800d424 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d37a:	79bb      	ldrb	r3, [r7, #6]
 800d37c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d382:	f107 030c 	add.w	r3, r7, #12
 800d386:	4619      	mov	r1, r3
 800d388:	4829      	ldr	r0, [pc, #164]	; (800d430 <netconn_new_with_proto_and_callback+0xd8>)
 800d38a:	f7ff ffc7 	bl	800d31c <netconn_apimsg>
 800d38e:	4603      	mov	r3, r0
 800d390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800d394:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d043      	beq.n	800d424 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d005      	beq.n	800d3b0 <netconn_new_with_proto_and_callback+0x58>
 800d3a4:	4b23      	ldr	r3, [pc, #140]	; (800d434 <netconn_new_with_proto_and_callback+0xdc>)
 800d3a6:	2289      	movs	r2, #137	; 0x89
 800d3a8:	4923      	ldr	r1, [pc, #140]	; (800d438 <netconn_new_with_proto_and_callback+0xe0>)
 800d3aa:	4824      	ldr	r0, [pc, #144]	; (800d43c <netconn_new_with_proto_and_callback+0xe4>)
 800d3ac:	f00c f888 	bl	80194c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	3310      	adds	r3, #16
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f00b ff03 	bl	80191c0 <sys_mbox_valid>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d105      	bne.n	800d3cc <netconn_new_with_proto_and_callback+0x74>
 800d3c0:	4b1c      	ldr	r3, [pc, #112]	; (800d434 <netconn_new_with_proto_and_callback+0xdc>)
 800d3c2:	228a      	movs	r2, #138	; 0x8a
 800d3c4:	491e      	ldr	r1, [pc, #120]	; (800d440 <netconn_new_with_proto_and_callback+0xe8>)
 800d3c6:	481d      	ldr	r0, [pc, #116]	; (800d43c <netconn_new_with_proto_and_callback+0xe4>)
 800d3c8:	f00c f87a 	bl	80194c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	3314      	adds	r3, #20
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f00b fef5 	bl	80191c0 <sys_mbox_valid>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <netconn_new_with_proto_and_callback+0x90>
 800d3dc:	4b15      	ldr	r3, [pc, #84]	; (800d434 <netconn_new_with_proto_and_callback+0xdc>)
 800d3de:	228c      	movs	r2, #140	; 0x8c
 800d3e0:	4918      	ldr	r1, [pc, #96]	; (800d444 <netconn_new_with_proto_and_callback+0xec>)
 800d3e2:	4816      	ldr	r0, [pc, #88]	; (800d43c <netconn_new_with_proto_and_callback+0xe4>)
 800d3e4:	f00c f86c 	bl	80194c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	330c      	adds	r3, #12
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f00b ff78 	bl	80192e2 <sys_sem_valid>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d105      	bne.n	800d404 <netconn_new_with_proto_and_callback+0xac>
 800d3f8:	4b0e      	ldr	r3, [pc, #56]	; (800d434 <netconn_new_with_proto_and_callback+0xdc>)
 800d3fa:	228f      	movs	r2, #143	; 0x8f
 800d3fc:	4912      	ldr	r1, [pc, #72]	; (800d448 <netconn_new_with_proto_and_callback+0xf0>)
 800d3fe:	480f      	ldr	r0, [pc, #60]	; (800d43c <netconn_new_with_proto_and_callback+0xe4>)
 800d400:	f00c f85e 	bl	80194c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	330c      	adds	r3, #12
 800d408:	4618      	mov	r0, r3
 800d40a:	f00b ff5d 	bl	80192c8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	3310      	adds	r3, #16
 800d412:	4618      	mov	r0, r3
 800d414:	f00b fe38 	bl	8019088 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d41a:	2007      	movs	r0, #7
 800d41c:	f002 fddc 	bl	800ffd8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d420:	2300      	movs	r3, #0
 800d422:	e000      	b.n	800d426 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d426:	4618      	mov	r0, r3
 800d428:	3728      	adds	r7, #40	; 0x28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	0800e221 	.word	0x0800e221
 800d434:	0801a70c 	.word	0x0801a70c
 800d438:	0801a764 	.word	0x0801a764
 800d43c:	0801a788 	.word	0x0801a788
 800d440:	0801a7b0 	.word	0x0801a7b0
 800d444:	0801a7c8 	.word	0x0801a7c8
 800d448:	0801a7ec 	.word	0x0801a7ec

0800d44c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b088      	sub	sp, #32
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <netconn_delete+0x12>
    return ERR_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	e016      	b.n	800d48c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d462:	2329      	movs	r3, #41	; 0x29
 800d464:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d466:	f107 0308 	add.w	r3, r7, #8
 800d46a:	4619      	mov	r1, r3
 800d46c:	4809      	ldr	r0, [pc, #36]	; (800d494 <netconn_delete+0x48>)
 800d46e:	f7ff ff55 	bl	800d31c <netconn_apimsg>
 800d472:	4603      	mov	r3, r0
 800d474:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d476:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <netconn_delete+0x38>
    return err;
 800d47e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d482:	e003      	b.n	800d48c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 ff67 	bl	800e358 <netconn_free>

  return ERR_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3720      	adds	r7, #32
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	0800e7dd 	.word	0x0800e7dd

0800d498 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08a      	sub	sp, #40	; 0x28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d108      	bne.n	800d4be <netconn_bind+0x26>
 800d4ac:	4b11      	ldr	r3, [pc, #68]	; (800d4f4 <netconn_bind+0x5c>)
 800d4ae:	22ff      	movs	r2, #255	; 0xff
 800d4b0:	4911      	ldr	r1, [pc, #68]	; (800d4f8 <netconn_bind+0x60>)
 800d4b2:	4812      	ldr	r0, [pc, #72]	; (800d4fc <netconn_bind+0x64>)
 800d4b4:	f00c f804 	bl	80194c0 <iprintf>
 800d4b8:	f06f 030f 	mvn.w	r3, #15
 800d4bc:	e015      	b.n	800d4ea <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800d4c4:	4b0e      	ldr	r3, [pc, #56]	; (800d500 <netconn_bind+0x68>)
 800d4c6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d4d0:	88fb      	ldrh	r3, [r7, #6]
 800d4d2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d4d4:	f107 0310 	add.w	r3, r7, #16
 800d4d8:	4619      	mov	r1, r3
 800d4da:	480a      	ldr	r0, [pc, #40]	; (800d504 <netconn_bind+0x6c>)
 800d4dc:	f7ff ff1e 	bl	800d31c <netconn_apimsg>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800d4e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3728      	adds	r7, #40	; 0x28
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	0801a70c 	.word	0x0801a70c
 800d4f8:	0801a868 	.word	0x0801a868
 800d4fc:	0801a788 	.word	0x0801a788
 800d500:	0801d150 	.word	0x0801d150
 800d504:	0800e9e1 	.word	0x0800e9e1

0800d508 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b088      	sub	sp, #32
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d109      	bne.n	800d52e <netconn_listen_with_backlog+0x26>
 800d51a:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <netconn_listen_with_backlog+0x48>)
 800d51c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d520:	490c      	ldr	r1, [pc, #48]	; (800d554 <netconn_listen_with_backlog+0x4c>)
 800d522:	480d      	ldr	r0, [pc, #52]	; (800d558 <netconn_listen_with_backlog+0x50>)
 800d524:	f00b ffcc 	bl	80194c0 <iprintf>
 800d528:	f06f 030f 	mvn.w	r3, #15
 800d52c:	e00b      	b.n	800d546 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800d532:	f107 0308 	add.w	r3, r7, #8
 800d536:	4619      	mov	r1, r3
 800d538:	4808      	ldr	r0, [pc, #32]	; (800d55c <netconn_listen_with_backlog+0x54>)
 800d53a:	f7ff feef 	bl	800d31c <netconn_apimsg>
 800d53e:	4603      	mov	r3, r0
 800d540:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800d542:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d546:	4618      	mov	r0, r3
 800d548:	3720      	adds	r7, #32
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	0801a70c 	.word	0x0801a70c
 800d554:	0801a8c8 	.word	0x0801a8c8
 800d558:	0801a788 	.word	0x0801a788
 800d55c:	0800eaa1 	.word	0x0800eaa1

0800d560 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d109      	bne.n	800d584 <netconn_accept+0x24>
 800d570:	4b34      	ldr	r3, [pc, #208]	; (800d644 <netconn_accept+0xe4>)
 800d572:	f240 128d 	movw	r2, #397	; 0x18d
 800d576:	4934      	ldr	r1, [pc, #208]	; (800d648 <netconn_accept+0xe8>)
 800d578:	4834      	ldr	r0, [pc, #208]	; (800d64c <netconn_accept+0xec>)
 800d57a:	f00b ffa1 	bl	80194c0 <iprintf>
 800d57e:	f06f 030f 	mvn.w	r3, #15
 800d582:	e05b      	b.n	800d63c <netconn_accept+0xdc>
  *new_conn = NULL;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2200      	movs	r2, #0
 800d588:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d109      	bne.n	800d5a4 <netconn_accept+0x44>
 800d590:	4b2c      	ldr	r3, [pc, #176]	; (800d644 <netconn_accept+0xe4>)
 800d592:	f240 128f 	movw	r2, #399	; 0x18f
 800d596:	492e      	ldr	r1, [pc, #184]	; (800d650 <netconn_accept+0xf0>)
 800d598:	482c      	ldr	r0, [pc, #176]	; (800d64c <netconn_accept+0xec>)
 800d59a:	f00b ff91 	bl	80194c0 <iprintf>
 800d59e:	f06f 030f 	mvn.w	r3, #15
 800d5a2:	e04b      	b.n	800d63c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d5aa:	f113 0f0c 	cmn.w	r3, #12
 800d5ae:	da03      	bge.n	800d5b8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d5b6:	e041      	b.n	800d63c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3314      	adds	r3, #20
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f00b fdff 	bl	80191c0 <sys_mbox_valid>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d102      	bne.n	800d5ce <netconn_accept+0x6e>
    return ERR_CLSD;
 800d5c8:	f06f 030e 	mvn.w	r3, #14
 800d5cc:	e036      	b.n	800d63c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3314      	adds	r3, #20
 800d5d2:	f107 010c 	add.w	r1, r7, #12
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f00b fd96 	bl	801910a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <netconn_accept+0x96>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4a16      	ldr	r2, [pc, #88]	; (800d654 <netconn_accept+0xf4>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d102      	bne.n	800d604 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800d5fe:	f06f 030c 	mvn.w	r3, #12
 800d602:	e01b      	b.n	800d63c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d114      	bne.n	800d634 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00e      	beq.n	800d62e <netconn_accept+0xce>
 800d610:	f00b fef2 	bl	80193f8 <sys_arch_protect>
 800d614:	6138      	str	r0, [r7, #16]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d61c:	f113 0f0c 	cmn.w	r3, #12
 800d620:	db02      	blt.n	800d628 <netconn_accept+0xc8>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	22f1      	movs	r2, #241	; 0xf1
 800d626:	721a      	strb	r2, [r3, #8]
 800d628:	6938      	ldr	r0, [r7, #16]
 800d62a:	f00b fef3 	bl	8019414 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800d62e:	f06f 030e 	mvn.w	r3, #14
 800d632:	e003      	b.n	800d63c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d63a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	0801a70c 	.word	0x0801a70c
 800d648:	0801a8e8 	.word	0x0801a8e8
 800d64c:	0801a788 	.word	0x0801a788
 800d650:	0801a908 	.word	0x0801a908
 800d654:	2000d108 	.word	0x2000d108

0800d658 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b08a      	sub	sp, #40	; 0x28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800d662:	2300      	movs	r3, #0
 800d664:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d109      	bne.n	800d680 <netconn_recv_data+0x28>
 800d66c:	4b5c      	ldr	r3, [pc, #368]	; (800d7e0 <netconn_recv_data+0x188>)
 800d66e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d672:	495c      	ldr	r1, [pc, #368]	; (800d7e4 <netconn_recv_data+0x18c>)
 800d674:	485c      	ldr	r0, [pc, #368]	; (800d7e8 <netconn_recv_data+0x190>)
 800d676:	f00b ff23 	bl	80194c0 <iprintf>
 800d67a:	f06f 030f 	mvn.w	r3, #15
 800d67e:	e0aa      	b.n	800d7d6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d109      	bne.n	800d6a0 <netconn_recv_data+0x48>
 800d68c:	4b54      	ldr	r3, [pc, #336]	; (800d7e0 <netconn_recv_data+0x188>)
 800d68e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800d692:	4956      	ldr	r1, [pc, #344]	; (800d7ec <netconn_recv_data+0x194>)
 800d694:	4854      	ldr	r0, [pc, #336]	; (800d7e8 <netconn_recv_data+0x190>)
 800d696:	f00b ff13 	bl	80194c0 <iprintf>
 800d69a:	f06f 030f 	mvn.w	r3, #15
 800d69e:	e09a      	b.n	800d7d6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6a8:	2b10      	cmp	r3, #16
 800d6aa:	d115      	bne.n	800d6d8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	3310      	adds	r3, #16
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f00b fd85 	bl	80191c0 <sys_mbox_valid>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10d      	bne.n	800d6d8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	3314      	adds	r3, #20
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f00b fd7d 	bl	80191c0 <sys_mbox_valid>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <netconn_recv_data+0x7a>
 800d6cc:	f06f 030a 	mvn.w	r3, #10
 800d6d0:	e081      	b.n	800d7d6 <netconn_recv_data+0x17e>
 800d6d2:	f06f 030e 	mvn.w	r3, #14
 800d6d6:	e07e      	b.n	800d7d6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3310      	adds	r3, #16
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f00b fd6f 	bl	80191c0 <sys_mbox_valid>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d109      	bne.n	800d6fc <netconn_recv_data+0xa4>
 800d6e8:	4b3d      	ldr	r3, [pc, #244]	; (800d7e0 <netconn_recv_data+0x188>)
 800d6ea:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d6ee:	4940      	ldr	r1, [pc, #256]	; (800d7f0 <netconn_recv_data+0x198>)
 800d6f0:	483d      	ldr	r0, [pc, #244]	; (800d7e8 <netconn_recv_data+0x190>)
 800d6f2:	f00b fee5 	bl	80194c0 <iprintf>
 800d6f6:	f06f 030a 	mvn.w	r3, #10
 800d6fa:	e06c      	b.n	800d7d6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d702:	f113 0f0c 	cmn.w	r3, #12
 800d706:	da03      	bge.n	800d710 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d70e:	e062      	b.n	800d7d6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3310      	adds	r3, #16
 800d714:	f107 0120 	add.w	r1, r7, #32
 800d718:	2200      	movs	r2, #0
 800d71a:	4618      	mov	r0, r3
 800d71c:	f00b fcf5 	bl	801910a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d728:	2b10      	cmp	r3, #16
 800d72a:	d138      	bne.n	800d79e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e001      	b.n	800d742 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800d73e:	2301      	movs	r3, #1
 800d740:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800d742:	f107 030c 	add.w	r3, r7, #12
 800d746:	4619      	mov	r1, r3
 800d748:	482a      	ldr	r0, [pc, #168]	; (800d7f4 <netconn_recv_data+0x19c>)
 800d74a:	f7ff fde7 	bl	800d31c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d120      	bne.n	800d796 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d005      	beq.n	800d768 <netconn_recv_data+0x110>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d760:	2200      	movs	r2, #0
 800d762:	2101      	movs	r1, #1
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10b      	bne.n	800d788 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <netconn_recv_data+0x12a>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d780:	e029      	b.n	800d7d6 <netconn_recv_data+0x17e>
 800d782:	f06f 030d 	mvn.w	r3, #13
 800d786:	e026      	b.n	800d7d6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d788:	2101      	movs	r1, #1
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f926 	bl	800d9dc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d790:	f06f 030e 	mvn.w	r3, #14
 800d794:	e01f      	b.n	800d7d6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	891b      	ldrh	r3, [r3, #8]
 800d79a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d79c:	e00d      	b.n	800d7ba <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d79e:	6a3b      	ldr	r3, [r7, #32]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d106      	bne.n	800d7b2 <netconn_recv_data+0x15a>
 800d7a4:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <netconn_recv_data+0x188>)
 800d7a6:	f240 223e 	movw	r2, #574	; 0x23e
 800d7aa:	4913      	ldr	r1, [pc, #76]	; (800d7f8 <netconn_recv_data+0x1a0>)
 800d7ac:	480e      	ldr	r0, [pc, #56]	; (800d7e8 <netconn_recv_data+0x190>)
 800d7ae:	f00b fe87 	bl	80194c0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	891b      	ldrh	r3, [r3, #8]
 800d7b8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d005      	beq.n	800d7ce <netconn_recv_data+0x176>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d7ce:	6a3a      	ldr	r2, [r7, #32]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3728      	adds	r7, #40	; 0x28
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	0801a70c 	.word	0x0801a70c
 800d7e4:	0801a928 	.word	0x0801a928
 800d7e8:	0801a788 	.word	0x0801a788
 800d7ec:	0801a948 	.word	0x0801a948
 800d7f0:	0801a964 	.word	0x0801a964
 800d7f4:	0800ec25 	.word	0x0800ec25
 800d7f8:	0801a984 	.word	0x0801a984

0800d7fc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d109      	bne.n	800d824 <netconn_recv+0x28>
 800d810:	4b31      	ldr	r3, [pc, #196]	; (800d8d8 <netconn_recv+0xdc>)
 800d812:	f44f 721d 	mov.w	r2, #628	; 0x274
 800d816:	4931      	ldr	r1, [pc, #196]	; (800d8dc <netconn_recv+0xe0>)
 800d818:	4831      	ldr	r0, [pc, #196]	; (800d8e0 <netconn_recv+0xe4>)
 800d81a:	f00b fe51 	bl	80194c0 <iprintf>
 800d81e:	f06f 030f 	mvn.w	r3, #15
 800d822:	e054      	b.n	800d8ce <netconn_recv+0xd2>
  *new_buf = NULL;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d109      	bne.n	800d844 <netconn_recv+0x48>
 800d830:	4b29      	ldr	r3, [pc, #164]	; (800d8d8 <netconn_recv+0xdc>)
 800d832:	f240 2276 	movw	r2, #630	; 0x276
 800d836:	492b      	ldr	r1, [pc, #172]	; (800d8e4 <netconn_recv+0xe8>)
 800d838:	4829      	ldr	r0, [pc, #164]	; (800d8e0 <netconn_recv+0xe4>)
 800d83a:	f00b fe41 	bl	80194c0 <iprintf>
 800d83e:	f06f 030f 	mvn.w	r3, #15
 800d842:	e044      	b.n	800d8ce <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d84c:	2b10      	cmp	r3, #16
 800d84e:	d139      	bne.n	800d8c4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d850:	2300      	movs	r3, #0
 800d852:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d854:	2006      	movs	r0, #6
 800d856:	f002 fb49 	bl	800feec <memp_malloc>
 800d85a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d102      	bne.n	800d868 <netconn_recv+0x6c>
      return ERR_MEM;
 800d862:	f04f 33ff 	mov.w	r3, #4294967295
 800d866:	e032      	b.n	800d8ce <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800d868:	f107 030c 	add.w	r3, r7, #12
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff fef2 	bl	800d658 <netconn_recv_data>
 800d874:	4603      	mov	r3, r0
 800d876:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d878:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d006      	beq.n	800d88e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800d880:	6979      	ldr	r1, [r7, #20]
 800d882:	2006      	movs	r0, #6
 800d884:	f002 fba8 	bl	800ffd8 <memp_free>
      return err;
 800d888:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d88c:	e01f      	b.n	800d8ce <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d106      	bne.n	800d8a2 <netconn_recv+0xa6>
 800d894:	4b10      	ldr	r3, [pc, #64]	; (800d8d8 <netconn_recv+0xdc>)
 800d896:	f240 228a 	movw	r2, #650	; 0x28a
 800d89a:	4913      	ldr	r1, [pc, #76]	; (800d8e8 <netconn_recv+0xec>)
 800d89c:	4810      	ldr	r0, [pc, #64]	; (800d8e0 <netconn_recv+0xe4>)
 800d89e:	f00b fe0f 	bl	80194c0 <iprintf>

    buf->p = p;
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	e004      	b.n	800d8ce <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff fec6 	bl	800d658 <netconn_recv_data>
 800d8cc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	0801a70c 	.word	0x0801a70c
 800d8dc:	0801a928 	.word	0x0801a928
 800d8e0:	0801a788 	.word	0x0801a788
 800d8e4:	0801a948 	.word	0x0801a948
 800d8e8:	0801a990 	.word	0x0801a990

0800d8ec <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08a      	sub	sp, #40	; 0x28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d109      	bne.n	800d914 <netconn_write_partly+0x28>
 800d900:	4b31      	ldr	r3, [pc, #196]	; (800d9c8 <netconn_write_partly+0xdc>)
 800d902:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d906:	4931      	ldr	r1, [pc, #196]	; (800d9cc <netconn_write_partly+0xe0>)
 800d908:	4831      	ldr	r0, [pc, #196]	; (800d9d0 <netconn_write_partly+0xe4>)
 800d90a:	f00b fdd9 	bl	80194c0 <iprintf>
 800d90e:	f06f 030f 	mvn.w	r3, #15
 800d912:	e054      	b.n	800d9be <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d91c:	2b10      	cmp	r3, #16
 800d91e:	d009      	beq.n	800d934 <netconn_write_partly+0x48>
 800d920:	4b29      	ldr	r3, [pc, #164]	; (800d9c8 <netconn_write_partly+0xdc>)
 800d922:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d926:	492b      	ldr	r1, [pc, #172]	; (800d9d4 <netconn_write_partly+0xe8>)
 800d928:	4829      	ldr	r0, [pc, #164]	; (800d9d0 <netconn_write_partly+0xe4>)
 800d92a:	f00b fdc9 	bl	80194c0 <iprintf>
 800d92e:	f06f 0305 	mvn.w	r3, #5
 800d932:	e044      	b.n	800d9be <netconn_write_partly+0xd2>
  if (size == 0) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <netconn_write_partly+0x52>
    return ERR_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e03f      	b.n	800d9be <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	7f1b      	ldrb	r3, [r3, #28]
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d104      	bne.n	800d954 <netconn_write_partly+0x68>
 800d94a:	78fb      	ldrb	r3, [r7, #3]
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <netconn_write_partly+0x6c>
 800d954:	2301      	movs	r3, #1
 800d956:	e000      	b.n	800d95a <netconn_write_partly+0x6e>
 800d958:	2300      	movs	r3, #0
 800d95a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d95e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d962:	2b00      	cmp	r3, #0
 800d964:	d005      	beq.n	800d972 <netconn_write_partly+0x86>
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d96c:	f06f 0305 	mvn.w	r3, #5
 800d970:	e025      	b.n	800d9be <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d97a:	78fb      	ldrb	r3, [r7, #3]
 800d97c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d984:	f107 0310 	add.w	r3, r7, #16
 800d988:	4619      	mov	r1, r3
 800d98a:	4813      	ldr	r0, [pc, #76]	; (800d9d8 <netconn_write_partly+0xec>)
 800d98c:	f7ff fcc6 	bl	800d31c <netconn_apimsg>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800d996:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10d      	bne.n	800d9ba <netconn_write_partly+0xce>
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00a      	beq.n	800d9ba <netconn_write_partly+0xce>
    if (dontblock) {
 800d9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d003      	beq.n	800d9b4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800d9ac:	69fa      	ldr	r2, [r7, #28]
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	601a      	str	r2, [r3, #0]
 800d9b2:	e002      	b.n	800d9ba <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d9ba:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3728      	adds	r7, #40	; 0x28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	0801a70c 	.word	0x0801a70c
 800d9cc:	0801a9b8 	.word	0x0801a9b8
 800d9d0:	0801a788 	.word	0x0801a788
 800d9d4:	0801a9d4 	.word	0x0801a9d4
 800d9d8:	0800f005 	.word	0x0800f005

0800d9dc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <netconn_close_shutdown+0x26>
 800d9ee:	4b0f      	ldr	r3, [pc, #60]	; (800da2c <netconn_close_shutdown+0x50>)
 800d9f0:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d9f4:	490e      	ldr	r1, [pc, #56]	; (800da30 <netconn_close_shutdown+0x54>)
 800d9f6:	480f      	ldr	r0, [pc, #60]	; (800da34 <netconn_close_shutdown+0x58>)
 800d9f8:	f00b fd62 	bl	80194c0 <iprintf>
 800d9fc:	f06f 030f 	mvn.w	r3, #15
 800da00:	e00f      	b.n	800da22 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800da06:	78fb      	ldrb	r3, [r7, #3]
 800da08:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800da0a:	2329      	movs	r3, #41	; 0x29
 800da0c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800da0e:	f107 0308 	add.w	r3, r7, #8
 800da12:	4619      	mov	r1, r3
 800da14:	4808      	ldr	r0, [pc, #32]	; (800da38 <netconn_close_shutdown+0x5c>)
 800da16:	f7ff fc81 	bl	800d31c <netconn_apimsg>
 800da1a:	4603      	mov	r3, r0
 800da1c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800da1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0801a70c 	.word	0x0801a70c
 800da30:	0801a9f8 	.word	0x0801a9f8
 800da34:	0801a788 	.word	0x0801a788
 800da38:	0800f165 	.word	0x0800f165

0800da3c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800da44:	2103      	movs	r1, #3
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7ff ffc8 	bl	800d9dc <netconn_close_shutdown>
 800da4c:	4603      	mov	r3, r0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <recv_udp+0x20>
 800da6c:	4b34      	ldr	r3, [pc, #208]	; (800db40 <recv_udp+0xe8>)
 800da6e:	22b1      	movs	r2, #177	; 0xb1
 800da70:	4934      	ldr	r1, [pc, #208]	; (800db44 <recv_udp+0xec>)
 800da72:	4835      	ldr	r0, [pc, #212]	; (800db48 <recv_udp+0xf0>)
 800da74:	f00b fd24 	bl	80194c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <recv_udp+0x32>
 800da7e:	4b30      	ldr	r3, [pc, #192]	; (800db40 <recv_udp+0xe8>)
 800da80:	22b2      	movs	r2, #178	; 0xb2
 800da82:	4932      	ldr	r1, [pc, #200]	; (800db4c <recv_udp+0xf4>)
 800da84:	4830      	ldr	r0, [pc, #192]	; (800db48 <recv_udp+0xf0>)
 800da86:	f00b fd1b 	bl	80194c0 <iprintf>
  conn = (struct netconn *)arg;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d103      	bne.n	800da9c <recv_udp+0x44>
    pbuf_free(p);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f003 f837 	bl	8010b08 <pbuf_free>
    return;
 800da9a:	e04d      	b.n	800db38 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d005      	beq.n	800dab2 <recv_udp+0x5a>
 800daa6:	4b26      	ldr	r3, [pc, #152]	; (800db40 <recv_udp+0xe8>)
 800daa8:	22ba      	movs	r2, #186	; 0xba
 800daaa:	4929      	ldr	r1, [pc, #164]	; (800db50 <recv_udp+0xf8>)
 800daac:	4826      	ldr	r0, [pc, #152]	; (800db48 <recv_udp+0xf0>)
 800daae:	f00b fd07 	bl	80194c0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	3310      	adds	r3, #16
 800dab6:	4618      	mov	r0, r3
 800dab8:	f00b fb82 	bl	80191c0 <sys_mbox_valid>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d103      	bne.n	800daca <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f003 f820 	bl	8010b08 <pbuf_free>
    return;
 800dac8:	e036      	b.n	800db38 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800daca:	2006      	movs	r0, #6
 800dacc:	f002 fa0e 	bl	800feec <memp_malloc>
 800dad0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d103      	bne.n	800dae0 <recv_udp+0x88>
    pbuf_free(p);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f003 f815 	bl	8010b08 <pbuf_free>
    return;
 800dade:	e02b      	b.n	800db38 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d002      	beq.n	800daf8 <recv_udp+0xa0>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	e000      	b.n	800dafa <recv_udp+0xa2>
 800daf8:	2300      	movs	r3, #0
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db02:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	891b      	ldrh	r3, [r3, #8]
 800db08:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	3310      	adds	r3, #16
 800db0e:	69b9      	ldr	r1, [r7, #24]
 800db10:	4618      	mov	r0, r3
 800db12:	f00b fae0 	bl	80190d6 <sys_mbox_trypost>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d003      	beq.n	800db24 <recv_udp+0xcc>
    netbuf_delete(buf);
 800db1c:	69b8      	ldr	r0, [r7, #24]
 800db1e:	f001 fbc9 	bl	800f2b4 <netbuf_delete>
    return;
 800db22:	e009      	b.n	800db38 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d005      	beq.n	800db38 <recv_udp+0xe0>
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db30:	8afa      	ldrh	r2, [r7, #22]
 800db32:	2100      	movs	r1, #0
 800db34:	69f8      	ldr	r0, [r7, #28]
 800db36:	4798      	blx	r3
  }
}
 800db38:	3720      	adds	r7, #32
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	0801aa14 	.word	0x0801aa14
 800db44:	0801aa6c 	.word	0x0801aa6c
 800db48:	0801aa90 	.word	0x0801aa90
 800db4c:	0801aab8 	.word	0x0801aab8
 800db50:	0801aad8 	.word	0x0801aad8

0800db54 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d105      	bne.n	800db74 <recv_tcp+0x20>
 800db68:	4b39      	ldr	r3, [pc, #228]	; (800dc50 <recv_tcp+0xfc>)
 800db6a:	22f9      	movs	r2, #249	; 0xf9
 800db6c:	4939      	ldr	r1, [pc, #228]	; (800dc54 <recv_tcp+0x100>)
 800db6e:	483a      	ldr	r0, [pc, #232]	; (800dc58 <recv_tcp+0x104>)
 800db70:	f00b fca6 	bl	80194c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d105      	bne.n	800db86 <recv_tcp+0x32>
 800db7a:	4b35      	ldr	r3, [pc, #212]	; (800dc50 <recv_tcp+0xfc>)
 800db7c:	22fa      	movs	r2, #250	; 0xfa
 800db7e:	4937      	ldr	r1, [pc, #220]	; (800dc5c <recv_tcp+0x108>)
 800db80:	4835      	ldr	r0, [pc, #212]	; (800dc58 <recv_tcp+0x104>)
 800db82:	f00b fc9d 	bl	80194c0 <iprintf>
  conn = (struct netconn *)arg;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <recv_tcp+0x42>
    return ERR_VAL;
 800db90:	f06f 0305 	mvn.w	r3, #5
 800db94:	e057      	b.n	800dc46 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d006      	beq.n	800dbae <recv_tcp+0x5a>
 800dba0:	4b2b      	ldr	r3, [pc, #172]	; (800dc50 <recv_tcp+0xfc>)
 800dba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dba6:	492e      	ldr	r1, [pc, #184]	; (800dc60 <recv_tcp+0x10c>)
 800dba8:	482b      	ldr	r0, [pc, #172]	; (800dc58 <recv_tcp+0x104>)
 800dbaa:	f00b fc89 	bl	80194c0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	3310      	adds	r3, #16
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f00b fb04 	bl	80191c0 <sys_mbox_valid>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10d      	bne.n	800dbda <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d008      	beq.n	800dbd6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	891b      	ldrh	r3, [r3, #8]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	68b8      	ldr	r0, [r7, #8]
 800dbcc:	f003 fe76 	bl	80118bc <tcp_recved>
      pbuf_free(p);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f002 ff99 	bl	8010b08 <pbuf_free>
    }
    return ERR_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e035      	b.n	800dc46 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800dbda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d011      	beq.n	800dc06 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00e      	beq.n	800dc06 <recv_tcp+0xb2>
 800dbe8:	f00b fc06 	bl	80193f8 <sys_arch_protect>
 800dbec:	6178      	str	r0, [r7, #20]
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dbf4:	f113 0f0c 	cmn.w	r3, #12
 800dbf8:	db02      	blt.n	800dc00 <recv_tcp+0xac>
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	78fa      	ldrb	r2, [r7, #3]
 800dbfe:	721a      	strb	r2, [r3, #8]
 800dc00:	6978      	ldr	r0, [r7, #20]
 800dc02:	f00b fc07 	bl	8019414 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d003      	beq.n	800dc14 <recv_tcp+0xc0>
    len = p->tot_len;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	891b      	ldrh	r3, [r3, #8]
 800dc10:	83fb      	strh	r3, [r7, #30]
 800dc12:	e001      	b.n	800dc18 <recv_tcp+0xc4>
  } else {
    len = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	3310      	adds	r3, #16
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f00b fa59 	bl	80190d6 <sys_mbox_trypost>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800dc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2e:	e00a      	b.n	800dc46 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <recv_tcp+0xf0>
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3c:	8bfa      	ldrh	r2, [r7, #30]
 800dc3e:	2100      	movs	r1, #0
 800dc40:	69b8      	ldr	r0, [r7, #24]
 800dc42:	4798      	blx	r3
  }

  return ERR_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3720      	adds	r7, #32
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	0801aa14 	.word	0x0801aa14
 800dc54:	0801aaf8 	.word	0x0801aaf8
 800dc58:	0801aa90 	.word	0x0801aa90
 800dc5c:	0801ab1c 	.word	0x0801ab1c
 800dc60:	0801ab3c 	.word	0x0801ab3c

0800dc64 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d106      	bne.n	800dc86 <poll_tcp+0x22>
 800dc78:	4b29      	ldr	r3, [pc, #164]	; (800dd20 <poll_tcp+0xbc>)
 800dc7a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800dc7e:	4929      	ldr	r1, [pc, #164]	; (800dd24 <poll_tcp+0xc0>)
 800dc80:	4829      	ldr	r0, [pc, #164]	; (800dd28 <poll_tcp+0xc4>)
 800dc82:	f00b fc1d 	bl	80194c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	785b      	ldrb	r3, [r3, #1]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d104      	bne.n	800dc98 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dc8e:	2101      	movs	r1, #1
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f001 f813 	bl	800ecbc <lwip_netconn_do_writemore>
 800dc96:	e016      	b.n	800dcc6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	785b      	ldrb	r3, [r3, #1]
 800dc9c:	2b04      	cmp	r3, #4
 800dc9e:	d112      	bne.n	800dcc6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00a      	beq.n	800dcbe <poll_tcp+0x5a>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcac:	7a5b      	ldrb	r3, [r3, #9]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d005      	beq.n	800dcbe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	7a5a      	ldrb	r2, [r3, #9]
 800dcb8:	3a01      	subs	r2, #1
 800dcba:	b2d2      	uxtb	r2, r2
 800dcbc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 fc13 	bl	800e4ec <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	7f1b      	ldrb	r3, [r3, #28]
 800dcca:	f003 0310 	and.w	r3, r3, #16
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d021      	beq.n	800dd16 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d01d      	beq.n	800dd16 <poll_tcp+0xb2>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dce2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dce6:	d316      	bcc.n	800dd16 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dcf0:	2b04      	cmp	r3, #4
 800dcf2:	d810      	bhi.n	800dd16 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	7f1b      	ldrb	r3, [r3, #28]
 800dcf8:	f023 0310 	bic.w	r3, r3, #16
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d005      	beq.n	800dd16 <poll_tcp+0xb2>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2102      	movs	r1, #2
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	0801aa14 	.word	0x0801aa14
 800dd24:	0801ab5c 	.word	0x0801ab5c
 800dd28:	0801aa90 	.word	0x0801aa90

0800dd2c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	4613      	mov	r3, r2
 800dd38:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <sent_tcp+0x26>
 800dd44:	4b20      	ldr	r3, [pc, #128]	; (800ddc8 <sent_tcp+0x9c>)
 800dd46:	f240 1261 	movw	r2, #353	; 0x161
 800dd4a:	4920      	ldr	r1, [pc, #128]	; (800ddcc <sent_tcp+0xa0>)
 800dd4c:	4820      	ldr	r0, [pc, #128]	; (800ddd0 <sent_tcp+0xa4>)
 800dd4e:	f00b fbb7 	bl	80194c0 <iprintf>

  if (conn) {
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d032      	beq.n	800ddbe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	785b      	ldrb	r3, [r3, #1]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d104      	bne.n	800dd6a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dd60:	2101      	movs	r1, #1
 800dd62:	6978      	ldr	r0, [r7, #20]
 800dd64:	f000 ffaa 	bl	800ecbc <lwip_netconn_do_writemore>
 800dd68:	e007      	b.n	800dd7a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	2b04      	cmp	r3, #4
 800dd70:	d103      	bne.n	800dd7a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dd72:	2101      	movs	r1, #1
 800dd74:	6978      	ldr	r0, [r7, #20]
 800dd76:	f000 fbb9 	bl	800e4ec <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d01d      	beq.n	800ddbe <sent_tcp+0x92>
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd8a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dd8e:	d316      	bcc.n	800ddbe <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dd98:	2b04      	cmp	r3, #4
 800dd9a:	d810      	bhi.n	800ddbe <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	7f1b      	ldrb	r3, [r3, #28]
 800dda0:	f023 0310 	bic.w	r3, r3, #16
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d005      	beq.n	800ddbe <sent_tcp+0x92>
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb6:	88fa      	ldrh	r2, [r7, #6]
 800ddb8:	2102      	movs	r1, #2
 800ddba:	6978      	ldr	r0, [r7, #20]
 800ddbc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3718      	adds	r7, #24
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	0801aa14 	.word	0x0801aa14
 800ddcc:	0801ab5c 	.word	0x0801ab5c
 800ddd0:	0801aa90 	.word	0x0801aa90

0800ddd4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08a      	sub	sp, #40	; 0x28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <err_tcp+0x24>
 800ddea:	4b6c      	ldr	r3, [pc, #432]	; (800df9c <err_tcp+0x1c8>)
 800ddec:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ddf0:	496b      	ldr	r1, [pc, #428]	; (800dfa0 <err_tcp+0x1cc>)
 800ddf2:	486c      	ldr	r0, [pc, #432]	; (800dfa4 <err_tcp+0x1d0>)
 800ddf4:	f00b fb64 	bl	80194c0 <iprintf>

  conn->pcb.tcp = NULL;
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	785b      	ldrb	r3, [r3, #1]
 800de02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800de06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de08:	2200      	movs	r2, #0
 800de0a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800de0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de10:	2b04      	cmp	r3, #4
 800de12:	d114      	bne.n	800de3e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800de18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d018      	beq.n	800de50 <err_tcp+0x7c>
 800de1e:	f00b faeb 	bl	80193f8 <sys_arch_protect>
 800de22:	61b8      	str	r0, [r7, #24]
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de2a:	f113 0f0c 	cmn.w	r3, #12
 800de2e:	db02      	blt.n	800de36 <err_tcp+0x62>
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	2200      	movs	r2, #0
 800de34:	721a      	strb	r2, [r3, #8]
 800de36:	69b8      	ldr	r0, [r7, #24]
 800de38:	f00b faec 	bl	8019414 <sys_arch_unprotect>
 800de3c:	e008      	b.n	800de50 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800de3e:	f00b fadb 	bl	80193f8 <sys_arch_protect>
 800de42:	61f8      	str	r0, [r7, #28]
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	78fa      	ldrb	r2, [r7, #3]
 800de48:	721a      	strb	r2, [r3, #8]
 800de4a:	69f8      	ldr	r0, [r7, #28]
 800de4c:	f00b fae2 	bl	8019414 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de54:	2b00      	cmp	r3, #0
 800de56:	d005      	beq.n	800de64 <err_tcp+0x90>
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5c:	2200      	movs	r2, #0
 800de5e:	2104      	movs	r1, #4
 800de60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de62:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d005      	beq.n	800de78 <err_tcp+0xa4>
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de70:	2200      	movs	r2, #0
 800de72:	2100      	movs	r1, #0
 800de74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de76:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d005      	beq.n	800de8c <err_tcp+0xb8>
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de84:	2200      	movs	r2, #0
 800de86:	2102      	movs	r1, #2
 800de88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de8a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	3310      	adds	r3, #16
 800de90:	4618      	mov	r0, r3
 800de92:	f00b f995 	bl	80191c0 <sys_mbox_valid>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d005      	beq.n	800dea8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	3310      	adds	r3, #16
 800dea0:	2100      	movs	r1, #0
 800dea2:	4618      	mov	r0, r3
 800dea4:	f00b f917 	bl	80190d6 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deaa:	3314      	adds	r3, #20
 800deac:	4618      	mov	r0, r3
 800deae:	f00b f987 	bl	80191c0 <sys_mbox_valid>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d005      	beq.n	800dec4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	3314      	adds	r3, #20
 800debc:	2100      	movs	r1, #0
 800debe:	4618      	mov	r0, r3
 800dec0:	f00b f909 	bl	80190d6 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800dec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d007      	beq.n	800dedc <err_tcp+0x108>
 800decc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ded0:	2b04      	cmp	r3, #4
 800ded2:	d003      	beq.n	800dedc <err_tcp+0x108>
 800ded4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d14d      	bne.n	800df78 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	7f1b      	ldrb	r3, [r3, #28]
 800dee0:	f003 0304 	and.w	r3, r3, #4
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	bf14      	ite	ne
 800dee8:	2301      	movne	r3, #1
 800deea:	2300      	moveq	r3, #0
 800deec:	b2db      	uxtb	r3, r3
 800deee:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	7f1b      	ldrb	r3, [r3, #28]
 800def4:	f023 0304 	bic.w	r3, r3, #4
 800def8:	b2da      	uxtb	r2, r3
 800defa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d145      	bne.n	800df90 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d106      	bne.n	800df1a <err_tcp+0x146>
 800df0c:	4b23      	ldr	r3, [pc, #140]	; (800df9c <err_tcp+0x1c8>)
 800df0e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800df12:	4925      	ldr	r1, [pc, #148]	; (800dfa8 <err_tcp+0x1d4>)
 800df14:	4823      	ldr	r0, [pc, #140]	; (800dfa4 <err_tcp+0x1d0>)
 800df16:	f00b fad3 	bl	80194c0 <iprintf>
      conn->current_msg->err = err;
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1e:	78fa      	ldrb	r2, [r7, #3]
 800df20:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	330c      	adds	r3, #12
 800df2a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800df2c:	6938      	ldr	r0, [r7, #16]
 800df2e:	f00b f9d8 	bl	80192e2 <sys_sem_valid>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d106      	bne.n	800df46 <err_tcp+0x172>
 800df38:	4b18      	ldr	r3, [pc, #96]	; (800df9c <err_tcp+0x1c8>)
 800df3a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800df3e:	491b      	ldr	r1, [pc, #108]	; (800dfac <err_tcp+0x1d8>)
 800df40:	4818      	ldr	r0, [pc, #96]	; (800dfa4 <err_tcp+0x1d0>)
 800df42:	f00b fabd 	bl	80194c0 <iprintf>
      conn->current_msg = NULL;
 800df46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df48:	2200      	movs	r2, #0
 800df4a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00e      	beq.n	800df70 <err_tcp+0x19c>
 800df52:	f00b fa51 	bl	80193f8 <sys_arch_protect>
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800df5e:	f113 0f0c 	cmn.w	r3, #12
 800df62:	db02      	blt.n	800df6a <err_tcp+0x196>
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	78fa      	ldrb	r2, [r7, #3]
 800df68:	721a      	strb	r2, [r3, #8]
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f00b fa52 	bl	8019414 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800df70:	6938      	ldr	r0, [r7, #16]
 800df72:	f00b f99c 	bl	80192ae <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800df76:	e00b      	b.n	800df90 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d008      	beq.n	800df92 <err_tcp+0x1be>
 800df80:	4b06      	ldr	r3, [pc, #24]	; (800df9c <err_tcp+0x1c8>)
 800df82:	f240 12bd 	movw	r2, #445	; 0x1bd
 800df86:	490a      	ldr	r1, [pc, #40]	; (800dfb0 <err_tcp+0x1dc>)
 800df88:	4806      	ldr	r0, [pc, #24]	; (800dfa4 <err_tcp+0x1d0>)
 800df8a:	f00b fa99 	bl	80194c0 <iprintf>
  }
}
 800df8e:	e000      	b.n	800df92 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800df90:	bf00      	nop
}
 800df92:	bf00      	nop
 800df94:	3728      	adds	r7, #40	; 0x28
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	0801aa14 	.word	0x0801aa14
 800dfa0:	0801ab5c 	.word	0x0801ab5c
 800dfa4:	0801aa90 	.word	0x0801aa90
 800dfa8:	0801ab6c 	.word	0x0801ab6c
 800dfac:	0801ab88 	.word	0x0801ab88
 800dfb0:	0801aba4 	.word	0x0801aba4

0800dfb4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800dfc2:	6879      	ldr	r1, [r7, #4]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f004 fa5b 	bl	8012480 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800dfca:	490a      	ldr	r1, [pc, #40]	; (800dff4 <setup_tcp+0x40>)
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f004 fa69 	bl	80124a4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800dfd2:	4909      	ldr	r1, [pc, #36]	; (800dff8 <setup_tcp+0x44>)
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f004 fa87 	bl	80124e8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800dfda:	2202      	movs	r2, #2
 800dfdc:	4907      	ldr	r1, [pc, #28]	; (800dffc <setup_tcp+0x48>)
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f004 fadc 	bl	801259c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800dfe4:	4906      	ldr	r1, [pc, #24]	; (800e000 <setup_tcp+0x4c>)
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f004 fa9e 	bl	8012528 <tcp_err>
}
 800dfec:	bf00      	nop
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	0800db55 	.word	0x0800db55
 800dff8:	0800dd2d 	.word	0x0800dd2d
 800dffc:	0800dc65 	.word	0x0800dc65
 800e000:	0800ddd5 	.word	0x0800ddd5

0800e004 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b088      	sub	sp, #32
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	4613      	mov	r3, r2
 800e010:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <accept_function+0x1e>
    return ERR_VAL;
 800e01c:	f06f 0305 	mvn.w	r3, #5
 800e020:	e08d      	b.n	800e13e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	3314      	adds	r3, #20
 800e026:	4618      	mov	r0, r3
 800e028:	f00b f8ca 	bl	80191c0 <sys_mbox_valid>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d102      	bne.n	800e038 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800e032:	f06f 0305 	mvn.w	r3, #5
 800e036:	e082      	b.n	800e13e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d115      	bne.n	800e06a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	3314      	adds	r3, #20
 800e042:	4941      	ldr	r1, [pc, #260]	; (800e148 <accept_function+0x144>)
 800e044:	4618      	mov	r0, r3
 800e046:	f00b f846 	bl	80190d6 <sys_mbox_trypost>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d109      	bne.n	800e064 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <accept_function+0x60>
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e05c:	2200      	movs	r2, #0
 800e05e:	2100      	movs	r1, #0
 800e060:	69f8      	ldr	r0, [r7, #28]
 800e062:	4798      	blx	r3
    }
    return ERR_VAL;
 800e064:	f06f 0305 	mvn.w	r3, #5
 800e068:	e069      	b.n	800e13e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	781a      	ldrb	r2, [r3, #0]
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e072:	4619      	mov	r1, r3
 800e074:	4610      	mov	r0, r2
 800e076:	f000 f8ff 	bl	800e278 <netconn_alloc>
 800e07a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d115      	bne.n	800e0ae <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	3314      	adds	r3, #20
 800e086:	4930      	ldr	r1, [pc, #192]	; (800e148 <accept_function+0x144>)
 800e088:	4618      	mov	r0, r3
 800e08a:	f00b f824 	bl	80190d6 <sys_mbox_trypost>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d109      	bne.n	800e0a8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d005      	beq.n	800e0a8 <accept_function+0xa4>
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	69f8      	ldr	r0, [r7, #28]
 800e0a6:	4798      	blx	r3
    }
    return ERR_MEM;
 800e0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ac:	e047      	b.n	800e13e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	68ba      	ldr	r2, [r7, #8]
 800e0b2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800e0b4:	69b8      	ldr	r0, [r7, #24]
 800e0b6:	f7ff ff7d 	bl	800dfb4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	79fa      	ldrb	r2, [r7, #7]
 800e0be:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	3314      	adds	r3, #20
 800e0c4:	69b9      	ldr	r1, [r7, #24]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f00b f805 	bl	80190d6 <sys_mbox_trypost>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d02a      	beq.n	800e128 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800e0d8:	2100      	movs	r1, #0
 800e0da:	6978      	ldr	r0, [r7, #20]
 800e0dc:	f004 f9d0 	bl	8012480 <tcp_arg>
    tcp_recv(pcb, NULL);
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	6978      	ldr	r0, [r7, #20]
 800e0e4:	f004 f9de 	bl	80124a4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	6978      	ldr	r0, [r7, #20]
 800e0ec:	f004 f9fc 	bl	80124e8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	6978      	ldr	r0, [r7, #20]
 800e0f6:	f004 fa51 	bl	801259c <tcp_poll>
    tcp_err(pcb, NULL);
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	6978      	ldr	r0, [r7, #20]
 800e0fe:	f004 fa13 	bl	8012528 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	2200      	movs	r2, #0
 800e106:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	3310      	adds	r3, #16
 800e10c:	4618      	mov	r0, r3
 800e10e:	f00a ffbb 	bl	8019088 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	3310      	adds	r3, #16
 800e116:	4618      	mov	r0, r3
 800e118:	f00b f863 	bl	80191e2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800e11c:	69b8      	ldr	r0, [r7, #24]
 800e11e:	f000 f91b 	bl	800e358 <netconn_free>
    return ERR_MEM;
 800e122:	f04f 33ff 	mov.w	r3, #4294967295
 800e126:	e00a      	b.n	800e13e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d005      	beq.n	800e13c <accept_function+0x138>
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e134:	2200      	movs	r2, #0
 800e136:	2100      	movs	r1, #0
 800e138:	69f8      	ldr	r0, [r7, #28]
 800e13a:	4798      	blx	r3
  }

  return ERR_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3720      	adds	r7, #32
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	2000d108 	.word	0x2000d108

0800e14c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800e14c:	b590      	push	{r4, r7, lr}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800e154:	2300      	movs	r3, #0
 800e156:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d006      	beq.n	800e170 <pcb_new+0x24>
 800e162:	4b2b      	ldr	r3, [pc, #172]	; (800e210 <pcb_new+0xc4>)
 800e164:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800e168:	492a      	ldr	r1, [pc, #168]	; (800e214 <pcb_new+0xc8>)
 800e16a:	482b      	ldr	r0, [pc, #172]	; (800e218 <pcb_new+0xcc>)
 800e16c:	f00b f9a8 	bl	80194c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e17a:	2b10      	cmp	r3, #16
 800e17c:	d022      	beq.n	800e1c4 <pcb_new+0x78>
 800e17e:	2b20      	cmp	r3, #32
 800e180:	d133      	bne.n	800e1ea <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681c      	ldr	r4, [r3, #0]
 800e186:	7bfb      	ldrb	r3, [r7, #15]
 800e188:	4618      	mov	r0, r3
 800e18a:	f008 fd16 	bl	8016bba <udp_new_ip_type>
 800e18e:	4603      	mov	r3, r0
 800e190:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d02a      	beq.n	800e1f2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	2b22      	cmp	r3, #34	; 0x22
 800e1a4:	d104      	bne.n	800e1b0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6858      	ldr	r0, [r3, #4]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	4917      	ldr	r1, [pc, #92]	; (800e21c <pcb_new+0xd0>)
 800e1be:	f008 fca1 	bl	8016b04 <udp_recv>
    }
    break;
 800e1c2:	e016      	b.n	800e1f2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681c      	ldr	r4, [r3, #0]
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f004 f94a 	bl	8012464 <tcp_new_ip_type>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00b      	beq.n	800e1f6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fee6 	bl	800dfb4 <setup_tcp>
    }
    break;
 800e1e8:	e005      	b.n	800e1f6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	22fa      	movs	r2, #250	; 0xfa
 800e1ee:	711a      	strb	r2, [r3, #4]
    return;
 800e1f0:	e00a      	b.n	800e208 <pcb_new+0xbc>
    break;
 800e1f2:	bf00      	nop
 800e1f4:	e000      	b.n	800e1f8 <pcb_new+0xac>
    break;
 800e1f6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	22ff      	movs	r2, #255	; 0xff
 800e206:	711a      	strb	r2, [r3, #4]
  }
}
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd90      	pop	{r4, r7, pc}
 800e20e:	bf00      	nop
 800e210:	0801aa14 	.word	0x0801aa14
 800e214:	0801abc0 	.word	0x0801abc0
 800e218:	0801aa90 	.word	0x0801aa90
 800e21c:	0800da59 	.word	0x0800da59

0800e220 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d102      	bne.n	800e242 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f7ff ff85 	bl	800e14c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d012      	beq.n	800e270 <lwip_netconn_do_newconn+0x50>
 800e24a:	f00b f8d5 	bl	80193f8 <sys_arch_protect>
 800e24e:	60b8      	str	r0, [r7, #8]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e258:	f113 0f0c 	cmn.w	r3, #12
 800e25c:	db05      	blt.n	800e26a <lwip_netconn_do_newconn+0x4a>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e268:	721a      	strb	r2, [r3, #8]
 800e26a:	68b8      	ldr	r0, [r7, #8]
 800e26c:	f00b f8d2 	bl	8019414 <sys_arch_unprotect>
}
 800e270:	bf00      	nop
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	6039      	str	r1, [r7, #0]
 800e282:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e284:	2007      	movs	r0, #7
 800e286:	f001 fe31 	bl	800feec <memp_malloc>
 800e28a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <netconn_alloc+0x1e>
    return NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	e055      	b.n	800e342 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	2200      	movs	r2, #0
 800e29a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	79fa      	ldrb	r2, [r7, #7]
 800e2a0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2ae:	2b10      	cmp	r3, #16
 800e2b0:	d004      	beq.n	800e2bc <netconn_alloc+0x44>
 800e2b2:	2b20      	cmp	r3, #32
 800e2b4:	d105      	bne.n	800e2c2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e2b6:	2306      	movs	r3, #6
 800e2b8:	60fb      	str	r3, [r7, #12]
    break;
 800e2ba:	e00a      	b.n	800e2d2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e2bc:	2306      	movs	r3, #6
 800e2be:	60fb      	str	r3, [r7, #12]
    break;
 800e2c0:	e007      	b.n	800e2d2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e2c2:	4b22      	ldr	r3, [pc, #136]	; (800e34c <netconn_alloc+0xd4>)
 800e2c4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e2c8:	4921      	ldr	r1, [pc, #132]	; (800e350 <netconn_alloc+0xd8>)
 800e2ca:	4822      	ldr	r0, [pc, #136]	; (800e354 <netconn_alloc+0xdc>)
 800e2cc:	f00b f8f8 	bl	80194c0 <iprintf>
    goto free_and_return;
 800e2d0:	e032      	b.n	800e338 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	3310      	adds	r3, #16
 800e2d6:	68f9      	ldr	r1, [r7, #12]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f00a feb3 	bl	8019044 <sys_mbox_new>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d128      	bne.n	800e336 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f00a ff86 	bl	80191fc <sys_sem_new>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d005      	beq.n	800e302 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	3310      	adds	r3, #16
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f00a fec4 	bl	8019088 <sys_mbox_free>
    goto free_and_return;
 800e300:	e01a      	b.n	800e338 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	3314      	adds	r3, #20
 800e306:	4618      	mov	r0, r3
 800e308:	f00a ff6b 	bl	80191e2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2200      	movs	r2, #0
 800e310:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	f04f 32ff 	mov.w	r2, #4294967295
 800e318:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2200      	movs	r2, #0
 800e324:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	2200      	movs	r2, #0
 800e32a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	2200      	movs	r2, #0
 800e330:	771a      	strb	r2, [r3, #28]
  return conn;
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	e005      	b.n	800e342 <netconn_alloc+0xca>
    goto free_and_return;
 800e336:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e338:	68b9      	ldr	r1, [r7, #8]
 800e33a:	2007      	movs	r0, #7
 800e33c:	f001 fe4c 	bl	800ffd8 <memp_free>
  return NULL;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	0801aa14 	.word	0x0801aa14
 800e350:	0801abe0 	.word	0x0801abe0
 800e354:	0801aa90 	.word	0x0801aa90

0800e358 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d006      	beq.n	800e376 <netconn_free+0x1e>
 800e368:	4b1b      	ldr	r3, [pc, #108]	; (800e3d8 <netconn_free+0x80>)
 800e36a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e36e:	491b      	ldr	r1, [pc, #108]	; (800e3dc <netconn_free+0x84>)
 800e370:	481b      	ldr	r0, [pc, #108]	; (800e3e0 <netconn_free+0x88>)
 800e372:	f00b f8a5 	bl	80194c0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3310      	adds	r3, #16
 800e37a:	4618      	mov	r0, r3
 800e37c:	f00a ff20 	bl	80191c0 <sys_mbox_valid>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d006      	beq.n	800e394 <netconn_free+0x3c>
 800e386:	4b14      	ldr	r3, [pc, #80]	; (800e3d8 <netconn_free+0x80>)
 800e388:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e38c:	4915      	ldr	r1, [pc, #84]	; (800e3e4 <netconn_free+0x8c>)
 800e38e:	4814      	ldr	r0, [pc, #80]	; (800e3e0 <netconn_free+0x88>)
 800e390:	f00b f896 	bl	80194c0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3314      	adds	r3, #20
 800e398:	4618      	mov	r0, r3
 800e39a:	f00a ff11 	bl	80191c0 <sys_mbox_valid>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d006      	beq.n	800e3b2 <netconn_free+0x5a>
 800e3a4:	4b0c      	ldr	r3, [pc, #48]	; (800e3d8 <netconn_free+0x80>)
 800e3a6:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e3aa:	490f      	ldr	r1, [pc, #60]	; (800e3e8 <netconn_free+0x90>)
 800e3ac:	480c      	ldr	r0, [pc, #48]	; (800e3e0 <netconn_free+0x88>)
 800e3ae:	f00b f887 	bl	80194c0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	330c      	adds	r3, #12
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f00a ff86 	bl	80192c8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	330c      	adds	r3, #12
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f00a ff9f 	bl	8019304 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e3c6:	6879      	ldr	r1, [r7, #4]
 800e3c8:	2007      	movs	r0, #7
 800e3ca:	f001 fe05 	bl	800ffd8 <memp_free>
}
 800e3ce:	bf00      	nop
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	0801aa14 	.word	0x0801aa14
 800e3dc:	0801ac08 	.word	0x0801ac08
 800e3e0:	0801aa90 	.word	0x0801aa90
 800e3e4:	0801ac38 	.word	0x0801ac38
 800e3e8:	0801ac74 	.word	0x0801ac74

0800e3ec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3310      	adds	r3, #16
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f00a fee1 	bl	80191c0 <sys_mbox_valid>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d035      	beq.n	800e470 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e404:	e01e      	b.n	800e444 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e40e:	2b10      	cmp	r3, #16
 800e410:	d114      	bne.n	800e43c <netconn_drain+0x50>
        if (mem != NULL) {
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d015      	beq.n	800e444 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d007      	beq.n	800e434 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	891b      	ldrh	r3, [r3, #8]
 800e42c:	4619      	mov	r1, r3
 800e42e:	4610      	mov	r0, r2
 800e430:	f003 fa44 	bl	80118bc <tcp_recved>
          }
          pbuf_free(p);
 800e434:	6978      	ldr	r0, [r7, #20]
 800e436:	f002 fb67 	bl	8010b08 <pbuf_free>
 800e43a:	e003      	b.n	800e444 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 ff38 	bl	800f2b4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3310      	adds	r3, #16
 800e448:	f107 020c 	add.w	r2, r7, #12
 800e44c:	4611      	mov	r1, r2
 800e44e:	4618      	mov	r0, r3
 800e450:	f00a fe9a 	bl	8019188 <sys_arch_mbox_tryfetch>
 800e454:	4603      	mov	r3, r0
 800e456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45a:	d1d4      	bne.n	800e406 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3310      	adds	r3, #16
 800e460:	4618      	mov	r0, r3
 800e462:	f00a fe11 	bl	8019088 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3310      	adds	r3, #16
 800e46a:	4618      	mov	r0, r3
 800e46c:	f00a feb9 	bl	80191e2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3314      	adds	r3, #20
 800e474:	4618      	mov	r0, r3
 800e476:	f00a fea3 	bl	80191c0 <sys_mbox_valid>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d02e      	beq.n	800e4de <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e480:	e017      	b.n	800e4b2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	4a18      	ldr	r2, [pc, #96]	; (800e4e8 <netconn_drain+0xfc>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d013      	beq.n	800e4b2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800e48e:	6938      	ldr	r0, [r7, #16]
 800e490:	f7ff ffac 	bl	800e3ec <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d007      	beq.n	800e4ac <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f003 f877 	bl	8011594 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800e4ac:	6938      	ldr	r0, [r7, #16]
 800e4ae:	f7ff ff53 	bl	800e358 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	3314      	adds	r3, #20
 800e4b6:	f107 020c 	add.w	r2, r7, #12
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f00a fe63 	bl	8019188 <sys_arch_mbox_tryfetch>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c8:	d1db      	bne.n	800e482 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3314      	adds	r3, #20
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f00a fdda 	bl	8019088 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3314      	adds	r3, #20
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f00a fe82 	bl	80191e2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e4de:	bf00      	nop
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	2000d108 	.word	0x2000d108

0800e4ec <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <lwip_netconn_do_close_internal+0x24>
 800e502:	4baa      	ldr	r3, [pc, #680]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e504:	f240 3243 	movw	r2, #835	; 0x343
 800e508:	49a9      	ldr	r1, [pc, #676]	; (800e7b0 <lwip_netconn_do_close_internal+0x2c4>)
 800e50a:	48aa      	ldr	r0, [pc, #680]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e50c:	f00a ffd8 	bl	80194c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e518:	2b10      	cmp	r3, #16
 800e51a:	d006      	beq.n	800e52a <lwip_netconn_do_close_internal+0x3e>
 800e51c:	4ba3      	ldr	r3, [pc, #652]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e51e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800e522:	49a5      	ldr	r1, [pc, #660]	; (800e7b8 <lwip_netconn_do_close_internal+0x2cc>)
 800e524:	48a3      	ldr	r0, [pc, #652]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e526:	f00a ffcb 	bl	80194c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	785b      	ldrb	r3, [r3, #1]
 800e52e:	2b04      	cmp	r3, #4
 800e530:	d006      	beq.n	800e540 <lwip_netconn_do_close_internal+0x54>
 800e532:	4b9e      	ldr	r3, [pc, #632]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e534:	f240 3245 	movw	r2, #837	; 0x345
 800e538:	49a0      	ldr	r1, [pc, #640]	; (800e7bc <lwip_netconn_do_close_internal+0x2d0>)
 800e53a:	489e      	ldr	r0, [pc, #632]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e53c:	f00a ffc0 	bl	80194c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <lwip_netconn_do_close_internal+0x6a>
 800e548:	4b98      	ldr	r3, [pc, #608]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e54a:	f240 3246 	movw	r2, #838	; 0x346
 800e54e:	499c      	ldr	r1, [pc, #624]	; (800e7c0 <lwip_netconn_do_close_internal+0x2d4>)
 800e550:	4898      	ldr	r0, [pc, #608]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e552:	f00a ffb5 	bl	80194c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <lwip_netconn_do_close_internal+0x80>
 800e55e:	4b93      	ldr	r3, [pc, #588]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e560:	f240 3247 	movw	r2, #839	; 0x347
 800e564:	4997      	ldr	r1, [pc, #604]	; (800e7c4 <lwip_netconn_do_close_internal+0x2d8>)
 800e566:	4893      	ldr	r0, [pc, #588]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e568:	f00a ffaa 	bl	80194c0 <iprintf>

  tpcb = conn->pcb.tcp;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e576:	7a1b      	ldrb	r3, [r3, #8]
 800e578:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
 800e57c:	f003 0301 	and.w	r3, r3, #1
 800e580:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e582:	7dfb      	ldrb	r3, [r7, #23]
 800e584:	f003 0302 	and.w	r3, r3, #2
 800e588:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	d102      	bne.n	800e596 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800e590:	2301      	movs	r3, #1
 800e592:	77bb      	strb	r3, [r7, #30]
 800e594:	e01f      	b.n	800e5d6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e596:	7dbb      	ldrb	r3, [r7, #22]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00e      	beq.n	800e5ba <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e5a0:	2b05      	cmp	r3, #5
 800e5a2:	d007      	beq.n	800e5b4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e5a8:	2b06      	cmp	r3, #6
 800e5aa:	d003      	beq.n	800e5b4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e5b0:	2b08      	cmp	r3, #8
 800e5b2:	d102      	bne.n	800e5ba <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	77bb      	strb	r3, [r7, #30]
 800e5b8:	e00d      	b.n	800e5d6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e5ba:	7d7b      	ldrb	r3, [r7, #21]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d008      	beq.n	800e5d2 <lwip_netconn_do_close_internal+0xe6>
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	7e9b      	ldrb	r3, [r3, #26]
 800e5c4:	f003 0310 	and.w	r3, r3, #16
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	77bb      	strb	r3, [r7, #30]
 800e5d0:	e001      	b.n	800e5d6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800e5d6:	7fbb      	ldrb	r3, [r7, #30]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e5dc:	2100      	movs	r1, #0
 800e5de:	69b8      	ldr	r0, [r7, #24]
 800e5e0:	f003 ff4e 	bl	8012480 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	7d1b      	ldrb	r3, [r3, #20]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d104      	bne.n	800e5f6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	69b8      	ldr	r0, [r7, #24]
 800e5f0:	f003 ffbc 	bl	801256c <tcp_accept>
 800e5f4:	e01d      	b.n	800e632 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e5f6:	7dbb      	ldrb	r3, [r7, #22]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d007      	beq.n	800e60c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	69b8      	ldr	r0, [r7, #24]
 800e600:	f003 ff50 	bl	80124a4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e604:	2100      	movs	r1, #0
 800e606:	69b8      	ldr	r0, [r7, #24]
 800e608:	f003 ffb0 	bl	801256c <tcp_accept>
    }
    if (shut_tx) {
 800e60c:	7d7b      	ldrb	r3, [r7, #21]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e612:	2100      	movs	r1, #0
 800e614:	69b8      	ldr	r0, [r7, #24]
 800e616:	f003 ff67 	bl	80124e8 <tcp_sent>
    }
    if (close) {
 800e61a:	7fbb      	ldrb	r3, [r7, #30]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d008      	beq.n	800e632 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e620:	2200      	movs	r2, #0
 800e622:	2100      	movs	r1, #0
 800e624:	69b8      	ldr	r0, [r7, #24]
 800e626:	f003 ffb9 	bl	801259c <tcp_poll>
      tcp_err(tpcb, NULL);
 800e62a:	2100      	movs	r1, #0
 800e62c:	69b8      	ldr	r0, [r7, #24]
 800e62e:	f003 ff7b 	bl	8012528 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800e632:	7fbb      	ldrb	r3, [r7, #30]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e638:	69b8      	ldr	r0, [r7, #24]
 800e63a:	f002 fe99 	bl	8011370 <tcp_close>
 800e63e:	4603      	mov	r3, r0
 800e640:	77fb      	strb	r3, [r7, #31]
 800e642:	e007      	b.n	800e654 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e644:	7dbb      	ldrb	r3, [r7, #22]
 800e646:	7d7a      	ldrb	r2, [r7, #21]
 800e648:	4619      	mov	r1, r3
 800e64a:	69b8      	ldr	r0, [r7, #24]
 800e64c:	f002 fea8 	bl	80113a0 <tcp_shutdown>
 800e650:	4603      	mov	r3, r0
 800e652:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800e654:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d102      	bne.n	800e662 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e65c:	2301      	movs	r3, #1
 800e65e:	777b      	strb	r3, [r7, #29]
 800e660:	e016      	b.n	800e690 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e662:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66a:	d10f      	bne.n	800e68c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e670:	7a5b      	ldrb	r3, [r3, #9]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10c      	bne.n	800e690 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e676:	2301      	movs	r3, #1
 800e678:	777b      	strb	r3, [r7, #29]
        if (close) {
 800e67a:	7fbb      	ldrb	r3, [r7, #30]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e680:	69b8      	ldr	r0, [r7, #24]
 800e682:	f002 ff87 	bl	8011594 <tcp_abort>
          err = ERR_OK;
 800e686:	2300      	movs	r3, #0
 800e688:	77fb      	strb	r3, [r7, #31]
 800e68a:	e001      	b.n	800e690 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e68c:	2301      	movs	r3, #1
 800e68e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800e690:	7f7b      	ldrb	r3, [r7, #29]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d056      	beq.n	800e744 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	330c      	adds	r3, #12
 800e69e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a4:	7ffa      	ldrb	r2, [r7, #31]
 800e6a6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e6b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d129      	bne.n	800e710 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800e6bc:	7fbb      	ldrb	r3, [r7, #30]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00c      	beq.n	800e6dc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <lwip_netconn_do_close_internal+0x1f0>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	4798      	blx	r3
      }
      if (shut_rx) {
 800e6dc:	7dbb      	ldrb	r3, [r7, #22]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d009      	beq.n	800e6f6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d005      	beq.n	800e6f6 <lwip_netconn_do_close_internal+0x20a>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	4798      	blx	r3
      }
      if (shut_tx) {
 800e6f6:	7d7b      	ldrb	r3, [r7, #21]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d009      	beq.n	800e710 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e700:	2b00      	cmp	r3, #0
 800e702:	d005      	beq.n	800e710 <lwip_netconn_do_close_internal+0x224>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e708:	2200      	movs	r2, #0
 800e70a:	2102      	movs	r1, #2
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00e      	beq.n	800e734 <lwip_netconn_do_close_internal+0x248>
 800e716:	f00a fe6f 	bl	80193f8 <sys_arch_protect>
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e722:	f113 0f0c 	cmn.w	r3, #12
 800e726:	db02      	blt.n	800e72e <lwip_netconn_do_close_internal+0x242>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7ffa      	ldrb	r2, [r7, #31]
 800e72c:	721a      	strb	r2, [r3, #8]
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f00a fe70 	bl	8019414 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d002      	beq.n	800e740 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e73a:	6938      	ldr	r0, [r7, #16]
 800e73c:	f00a fdb7 	bl	80192ae <sys_sem_signal>
    }
    return ERR_OK;
 800e740:	2300      	movs	r3, #0
 800e742:	e02e      	b.n	800e7a2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800e744:	7f7b      	ldrb	r3, [r7, #29]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d11e      	bne.n	800e788 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	7d1b      	ldrb	r3, [r3, #20]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d106      	bne.n	800e760 <lwip_netconn_do_close_internal+0x274>
 800e752:	4b16      	ldr	r3, [pc, #88]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e754:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e758:	491b      	ldr	r1, [pc, #108]	; (800e7c8 <lwip_netconn_do_close_internal+0x2dc>)
 800e75a:	4816      	ldr	r0, [pc, #88]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e75c:	f00a feb0 	bl	80194c0 <iprintf>
    if (shut_tx) {
 800e760:	7d7b      	ldrb	r3, [r7, #21]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d003      	beq.n	800e76e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800e766:	4919      	ldr	r1, [pc, #100]	; (800e7cc <lwip_netconn_do_close_internal+0x2e0>)
 800e768:	69b8      	ldr	r0, [r7, #24]
 800e76a:	f003 febd 	bl	80124e8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e76e:	2201      	movs	r2, #1
 800e770:	4917      	ldr	r1, [pc, #92]	; (800e7d0 <lwip_netconn_do_close_internal+0x2e4>)
 800e772:	69b8      	ldr	r0, [r7, #24]
 800e774:	f003 ff12 	bl	801259c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e778:	4916      	ldr	r1, [pc, #88]	; (800e7d4 <lwip_netconn_do_close_internal+0x2e8>)
 800e77a:	69b8      	ldr	r0, [r7, #24]
 800e77c:	f003 fed4 	bl	8012528 <tcp_err>
    tcp_arg(tpcb, conn);
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	69b8      	ldr	r0, [r7, #24]
 800e784:	f003 fe7c 	bl	8012480 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d106      	bne.n	800e79e <lwip_netconn_do_close_internal+0x2b2>
 800e790:	4b06      	ldr	r3, [pc, #24]	; (800e7ac <lwip_netconn_do_close_internal+0x2c0>)
 800e792:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e796:	4910      	ldr	r1, [pc, #64]	; (800e7d8 <lwip_netconn_do_close_internal+0x2ec>)
 800e798:	4806      	ldr	r0, [pc, #24]	; (800e7b4 <lwip_netconn_do_close_internal+0x2c8>)
 800e79a:	f00a fe91 	bl	80194c0 <iprintf>
  return err;
 800e79e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3720      	adds	r7, #32
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	0801aa14 	.word	0x0801aa14
 800e7b0:	0801acb0 	.word	0x0801acb0
 800e7b4:	0801aa90 	.word	0x0801aa90
 800e7b8:	0801acc0 	.word	0x0801acc0
 800e7bc:	0801ace0 	.word	0x0801ace0
 800e7c0:	0801ad04 	.word	0x0801ad04
 800e7c4:	0801ab6c 	.word	0x0801ab6c
 800e7c8:	0801ad18 	.word	0x0801ad18
 800e7cc:	0800dd2d 	.word	0x0800dd2d
 800e7d0:	0800dc65 	.word	0x0800dc65
 800e7d4:	0800ddd5 	.word	0x0800ddd5
 800e7d8:	0801ad3c 	.word	0x0801ad3c

0800e7dc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	785b      	ldrb	r3, [r3, #1]
 800e7ee:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e7f0:	7cfb      	ldrb	r3, [r7, #19]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00d      	beq.n	800e812 <lwip_netconn_do_delconn+0x36>
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e800:	2b10      	cmp	r3, #16
 800e802:	d006      	beq.n	800e812 <lwip_netconn_do_delconn+0x36>
 800e804:	4b6f      	ldr	r3, [pc, #444]	; (800e9c4 <lwip_netconn_do_delconn+0x1e8>)
 800e806:	f240 4201 	movw	r2, #1025	; 0x401
 800e80a:	496f      	ldr	r1, [pc, #444]	; (800e9c8 <lwip_netconn_do_delconn+0x1ec>)
 800e80c:	486f      	ldr	r0, [pc, #444]	; (800e9cc <lwip_netconn_do_delconn+0x1f0>)
 800e80e:	f00a fe57 	bl	80194c0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e812:	7cfb      	ldrb	r3, [r7, #19]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d005      	beq.n	800e824 <lwip_netconn_do_delconn+0x48>
 800e818:	7cfb      	ldrb	r3, [r7, #19]
 800e81a:	2b02      	cmp	r3, #2
 800e81c:	d002      	beq.n	800e824 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e81e:	7cfb      	ldrb	r3, [r7, #19]
 800e820:	2b03      	cmp	r3, #3
 800e822:	d109      	bne.n	800e838 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e824:	7cfb      	ldrb	r3, [r7, #19]
 800e826:	2b03      	cmp	r3, #3
 800e828:	d10a      	bne.n	800e840 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	7f1b      	ldrb	r3, [r3, #28]
 800e830:	f003 0304 	and.w	r3, r3, #4
 800e834:	2b00      	cmp	r3, #0
 800e836:	d103      	bne.n	800e840 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	22fb      	movs	r2, #251	; 0xfb
 800e83c:	711a      	strb	r2, [r3, #4]
 800e83e:	e09c      	b.n	800e97a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e840:	7cfb      	ldrb	r3, [r7, #19]
 800e842:	2b03      	cmp	r3, #3
 800e844:	d10d      	bne.n	800e862 <lwip_netconn_do_delconn+0x86>
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	7f1b      	ldrb	r3, [r3, #28]
 800e84c:	f003 0304 	and.w	r3, r3, #4
 800e850:	2b00      	cmp	r3, #0
 800e852:	d106      	bne.n	800e862 <lwip_netconn_do_delconn+0x86>
 800e854:	4b5b      	ldr	r3, [pc, #364]	; (800e9c4 <lwip_netconn_do_delconn+0x1e8>)
 800e856:	f240 421f 	movw	r2, #1055	; 0x41f
 800e85a:	495d      	ldr	r1, [pc, #372]	; (800e9d0 <lwip_netconn_do_delconn+0x1f4>)
 800e85c:	485b      	ldr	r0, [pc, #364]	; (800e9cc <lwip_netconn_do_delconn+0x1f0>)
 800e85e:	f00a fe2f 	bl	80194c0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2200      	movs	r2, #0
 800e866:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7ff fdbd 	bl	800e3ec <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d064      	beq.n	800e946 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e886:	2b10      	cmp	r3, #16
 800e888:	d00e      	beq.n	800e8a8 <lwip_netconn_do_delconn+0xcc>
 800e88a:	2b20      	cmp	r3, #32
 800e88c:	d000      	beq.n	800e890 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800e88e:	e056      	b.n	800e93e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f008 f941 	bl	8016b28 <udp_remove>
        break;
 800e8a6:	e04a      	b.n	800e93e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d104      	bne.n	800e8bc <lwip_netconn_do_delconn+0xe0>
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d006      	beq.n	800e8ca <lwip_netconn_do_delconn+0xee>
 800e8bc:	4b41      	ldr	r3, [pc, #260]	; (800e9c4 <lwip_netconn_do_delconn+0x1e8>)
 800e8be:	f240 4235 	movw	r2, #1077	; 0x435
 800e8c2:	4944      	ldr	r1, [pc, #272]	; (800e9d4 <lwip_netconn_do_delconn+0x1f8>)
 800e8c4:	4841      	ldr	r0, [pc, #260]	; (800e9cc <lwip_netconn_do_delconn+0x1f0>)
 800e8c6:	f00a fdfb 	bl	80194c0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2204      	movs	r2, #4
 800e8d0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	2203      	movs	r2, #3
 800e8d6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	697a      	ldr	r2, [r7, #20]
 800e8de:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7ff fe00 	bl	800e4ec <lwip_netconn_do_close_internal>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d064      	beq.n	800e9bc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	785b      	ldrb	r3, [r3, #1]
 800e8f8:	2b04      	cmp	r3, #4
 800e8fa:	d006      	beq.n	800e90a <lwip_netconn_do_delconn+0x12e>
 800e8fc:	4b31      	ldr	r3, [pc, #196]	; (800e9c4 <lwip_netconn_do_delconn+0x1e8>)
 800e8fe:	f240 423b 	movw	r2, #1083	; 0x43b
 800e902:	4935      	ldr	r1, [pc, #212]	; (800e9d8 <lwip_netconn_do_delconn+0x1fc>)
 800e904:	4831      	ldr	r0, [pc, #196]	; (800e9cc <lwip_netconn_do_delconn+0x1f0>)
 800e906:	f00a fddb 	bl	80194c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e90a:	4834      	ldr	r0, [pc, #208]	; (800e9dc <lwip_netconn_do_delconn+0x200>)
 800e90c:	f00a fd41 	bl	8019392 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	330c      	adds	r3, #12
 800e916:	2100      	movs	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f00a fc97 	bl	801924c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e91e:	482f      	ldr	r0, [pc, #188]	; (800e9dc <lwip_netconn_do_delconn+0x200>)
 800e920:	f00a fd28 	bl	8019374 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	785b      	ldrb	r3, [r3, #1]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d046      	beq.n	800e9bc <lwip_netconn_do_delconn+0x1e0>
 800e92e:	4b25      	ldr	r3, [pc, #148]	; (800e9c4 <lwip_netconn_do_delconn+0x1e8>)
 800e930:	f240 423f 	movw	r2, #1087	; 0x43f
 800e934:	4928      	ldr	r1, [pc, #160]	; (800e9d8 <lwip_netconn_do_delconn+0x1fc>)
 800e936:	4825      	ldr	r0, [pc, #148]	; (800e9cc <lwip_netconn_do_delconn+0x1f0>)
 800e938:	f00a fdc2 	bl	80194c0 <iprintf>
        return;
 800e93c:	e03e      	b.n	800e9bc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2200      	movs	r2, #0
 800e944:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d007      	beq.n	800e960 <lwip_netconn_do_delconn+0x184>
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	6810      	ldr	r0, [r2, #0]
 800e95a:	2200      	movs	r2, #0
 800e95c:	2100      	movs	r1, #0
 800e95e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e966:	2b00      	cmp	r3, #0
 800e968:	d007      	beq.n	800e97a <lwip_netconn_do_delconn+0x19e>
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e970:	697a      	ldr	r2, [r7, #20]
 800e972:	6810      	ldr	r0, [r2, #0]
 800e974:	2200      	movs	r2, #0
 800e976:	2102      	movs	r1, #2
 800e978:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	330c      	adds	r3, #12
 800e980:	4618      	mov	r0, r3
 800e982:	f00a fcae 	bl	80192e2 <sys_sem_valid>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d018      	beq.n	800e9be <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d014      	beq.n	800e9be <lwip_netconn_do_delconn+0x1e2>
 800e994:	f00a fd30 	bl	80193f8 <sys_arch_protect>
 800e998:	60f8      	str	r0, [r7, #12]
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9a2:	f113 0f0c 	cmn.w	r3, #12
 800e9a6:	db05      	blt.n	800e9b4 <lwip_netconn_do_delconn+0x1d8>
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e9b2:	721a      	strb	r2, [r3, #8]
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f00a fd2d 	bl	8019414 <sys_arch_unprotect>
 800e9ba:	e000      	b.n	800e9be <lwip_netconn_do_delconn+0x1e2>
        return;
 800e9bc:	bf00      	nop
  }
}
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	0801aa14 	.word	0x0801aa14
 800e9c8:	0801ad4c 	.word	0x0801ad4c
 800e9cc:	0801aa90 	.word	0x0801aa90
 800e9d0:	0801ad60 	.word	0x0801ad60
 800e9d4:	0801ad80 	.word	0x0801ad80
 800e9d8:	0801ad9c 	.word	0x0801ad9c
 800e9dc:	2000d10c 	.word	0x2000d10c

0800e9e0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e9f4:	f113 0f0c 	cmn.w	r3, #12
 800e9f8:	da06      	bge.n	800ea08 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	711a      	strb	r2, [r3, #4]
 800ea06:	e030      	b.n	800ea6a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	22fa      	movs	r2, #250	; 0xfa
 800ea0c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d027      	beq.n	800ea68 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea22:	2b10      	cmp	r3, #16
 800ea24:	d011      	beq.n	800ea4a <lwip_netconn_do_bind+0x6a>
 800ea26:	2b20      	cmp	r3, #32
 800ea28:	d000      	beq.n	800ea2c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800ea2a:	e01e      	b.n	800ea6a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	6858      	ldr	r0, [r3, #4]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6899      	ldr	r1, [r3, #8]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f007 fff2 	bl	8016a24 <udp_bind>
 800ea40:	4603      	mov	r3, r0
 800ea42:	461a      	mov	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	711a      	strb	r2, [r3, #4]
        break;
 800ea48:	e00f      	b.n	800ea6a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6858      	ldr	r0, [r3, #4]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6899      	ldr	r1, [r3, #8]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	899b      	ldrh	r3, [r3, #12]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	f002 fda7 	bl	80115ac <tcp_bind>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	461a      	mov	r2, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	711a      	strb	r2, [r3, #4]
        break;
 800ea66:	e000      	b.n	800ea6a <lwip_netconn_do_bind+0x8a>
      }
    }
 800ea68:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d012      	beq.n	800ea98 <lwip_netconn_do_bind+0xb8>
 800ea72:	f00a fcc1 	bl	80193f8 <sys_arch_protect>
 800ea76:	60b8      	str	r0, [r7, #8]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ea80:	f113 0f0c 	cmn.w	r3, #12
 800ea84:	db05      	blt.n	800ea92 <lwip_netconn_do_bind+0xb2>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ea90:	721a      	strb	r2, [r3, #8]
 800ea92:	68b8      	ldr	r0, [r7, #8]
 800ea94:	f00a fcbe 	bl	8019414 <sys_arch_unprotect>
}
 800ea98:	bf00      	nop
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eab4:	f113 0f0c 	cmn.w	r3, #12
 800eab8:	da06      	bge.n	800eac8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	711a      	strb	r2, [r3, #4]
 800eac6:	e090      	b.n	800ebea <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	22f5      	movs	r2, #245	; 0xf5
 800eacc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 8088 	beq.w	800ebea <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eae4:	2b10      	cmp	r3, #16
 800eae6:	d17d      	bne.n	800ebe4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	785b      	ldrb	r3, [r3, #1]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d16f      	bne.n	800ebd2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	7d1b      	ldrb	r3, [r3, #20]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d003      	beq.n	800eb06 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	22fa      	movs	r2, #250	; 0xfa
 800eb02:	711a      	strb	r2, [r3, #4]
 800eb04:	e071      	b.n	800ebea <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800eb06:	23ff      	movs	r3, #255	; 0xff
 800eb08:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	f107 020f 	add.w	r2, r7, #15
 800eb14:	7ef9      	ldrb	r1, [r7, #27]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f002 fdea 	bl	80116f0 <tcp_listen_with_backlog_and_err>
 800eb1c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d104      	bne.n	800eb2e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800eb24:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	711a      	strb	r2, [r3, #4]
 800eb2c:	e05d      	b.n	800ebea <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	3310      	adds	r3, #16
 800eb34:	4618      	mov	r0, r3
 800eb36:	f00a fb43 	bl	80191c0 <sys_mbox_valid>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00b      	beq.n	800eb58 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3310      	adds	r3, #16
 800eb46:	4618      	mov	r0, r3
 800eb48:	f00a fa9e 	bl	8019088 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	3310      	adds	r3, #16
 800eb52:	4618      	mov	r0, r3
 800eb54:	f00a fb45 	bl	80191e2 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3314      	adds	r3, #20
 800eb64:	4618      	mov	r0, r3
 800eb66:	f00a fb2b 	bl	80191c0 <sys_mbox_valid>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10a      	bne.n	800eb86 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3314      	adds	r3, #20
 800eb76:	2106      	movs	r1, #6
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f00a fa63 	bl	8019044 <sys_mbox_new>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	461a      	mov	r2, r3
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d118      	bne.n	800ebc2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2202      	movs	r2, #2
 800eb96:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f003 fc67 	bl	8012480 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	4919      	ldr	r1, [pc, #100]	; (800ec20 <lwip_netconn_do_listen+0x180>)
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f003 fcd6 	bl	801256c <tcp_accept>
 800ebc0:	e013      	b.n	800ebea <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800ebc2:	6978      	ldr	r0, [r7, #20]
 800ebc4:	f002 fbd4 	bl	8011370 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	605a      	str	r2, [r3, #4]
 800ebd0:	e00b      	b.n	800ebea <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	785b      	ldrb	r3, [r3, #1]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d106      	bne.n	800ebea <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	711a      	strb	r2, [r3, #4]
 800ebe2:	e002      	b.n	800ebea <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	22f0      	movs	r2, #240	; 0xf0
 800ebe8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d012      	beq.n	800ec18 <lwip_netconn_do_listen+0x178>
 800ebf2:	f00a fc01 	bl	80193f8 <sys_arch_protect>
 800ebf6:	6138      	str	r0, [r7, #16]
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ec00:	f113 0f0c 	cmn.w	r3, #12
 800ec04:	db05      	blt.n	800ec12 <lwip_netconn_do_listen+0x172>
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	69fa      	ldr	r2, [r7, #28]
 800ec0c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ec10:	721a      	strb	r2, [r3, #8]
 800ec12:	6938      	ldr	r0, [r7, #16]
 800ec14:	f00a fbfe 	bl	8019414 <sys_arch_unprotect>
}
 800ec18:	bf00      	nop
 800ec1a:	3720      	adds	r7, #32
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	0800e005 	.word	0x0800e005

0800ec24 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b086      	sub	sp, #24
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	2200      	movs	r2, #0
 800ec34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d022      	beq.n	800ec86 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec4a:	2b10      	cmp	r3, #16
 800ec4c:	d11b      	bne.n	800ec86 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec5a:	d202      	bcs.n	800ec62 <lwip_netconn_do_recv+0x3e>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	e001      	b.n	800ec66 <lwip_netconn_do_recv+0x42>
 800ec62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec66:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	89fa      	ldrh	r2, [r7, #14]
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f002 fe22 	bl	80118bc <tcp_recved>
        remaining -= recved;
 800ec78:	89fb      	ldrh	r3, [r7, #14]
 800ec7a:	697a      	ldr	r2, [r7, #20]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1e6      	bne.n	800ec54 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d012      	beq.n	800ecb4 <lwip_netconn_do_recv+0x90>
 800ec8e:	f00a fbb3 	bl	80193f8 <sys_arch_protect>
 800ec92:	60b8      	str	r0, [r7, #8]
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ec9c:	f113 0f0c 	cmn.w	r3, #12
 800eca0:	db05      	blt.n	800ecae <lwip_netconn_do_recv+0x8a>
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800ecac:	721a      	strb	r2, [r3, #8]
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f00a fbb0 	bl	8019414 <sys_arch_unprotect>
}
 800ecb4:	bf00      	nop
 800ecb6:	3718      	adds	r7, #24
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08a      	sub	sp, #40	; 0x28
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d106      	bne.n	800ece2 <lwip_netconn_do_writemore+0x26>
 800ecd4:	4ba3      	ldr	r3, [pc, #652]	; (800ef64 <lwip_netconn_do_writemore+0x2a8>)
 800ecd6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800ecda:	49a3      	ldr	r1, [pc, #652]	; (800ef68 <lwip_netconn_do_writemore+0x2ac>)
 800ecdc:	48a3      	ldr	r0, [pc, #652]	; (800ef6c <lwip_netconn_do_writemore+0x2b0>)
 800ecde:	f00a fbef 	bl	80194c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	785b      	ldrb	r3, [r3, #1]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d006      	beq.n	800ecf8 <lwip_netconn_do_writemore+0x3c>
 800ecea:	4b9e      	ldr	r3, [pc, #632]	; (800ef64 <lwip_netconn_do_writemore+0x2a8>)
 800ecec:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800ecf0:	499f      	ldr	r1, [pc, #636]	; (800ef70 <lwip_netconn_do_writemore+0x2b4>)
 800ecf2:	489e      	ldr	r0, [pc, #632]	; (800ef6c <lwip_netconn_do_writemore+0x2b0>)
 800ecf4:	f00a fbe4 	bl	80194c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d106      	bne.n	800ed0e <lwip_netconn_do_writemore+0x52>
 800ed00:	4b98      	ldr	r3, [pc, #608]	; (800ef64 <lwip_netconn_do_writemore+0x2a8>)
 800ed02:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800ed06:	499b      	ldr	r1, [pc, #620]	; (800ef74 <lwip_netconn_do_writemore+0x2b8>)
 800ed08:	4898      	ldr	r0, [pc, #608]	; (800ef6c <lwip_netconn_do_writemore+0x2b0>)
 800ed0a:	f00a fbd9 	bl	80194c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d106      	bne.n	800ed24 <lwip_netconn_do_writemore+0x68>
 800ed16:	4b93      	ldr	r3, [pc, #588]	; (800ef64 <lwip_netconn_do_writemore+0x2a8>)
 800ed18:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800ed1c:	4996      	ldr	r1, [pc, #600]	; (800ef78 <lwip_netconn_do_writemore+0x2bc>)
 800ed1e:	4893      	ldr	r0, [pc, #588]	; (800ef6c <lwip_netconn_do_writemore+0x2b0>)
 800ed20:	f00a fbce 	bl	80194c0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a1a      	ldr	r2, [r3, #32]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d306      	bcc.n	800ed40 <lwip_netconn_do_writemore+0x84>
 800ed32:	4b8c      	ldr	r3, [pc, #560]	; (800ef64 <lwip_netconn_do_writemore+0x2a8>)
 800ed34:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800ed38:	4990      	ldr	r1, [pc, #576]	; (800ef7c <lwip_netconn_do_writemore+0x2c0>)
 800ed3a:	488c      	ldr	r0, [pc, #560]	; (800ef6c <lwip_netconn_do_writemore+0x2b0>)
 800ed3c:	f00a fbc0 	bl	80194c0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed44:	7c1b      	ldrb	r3, [r3, #16]
 800ed46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	7f1b      	ldrb	r3, [r3, #28]
 800ed4e:	f003 0302 	and.w	r3, r3, #2
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d105      	bne.n	800ed62 <lwip_netconn_do_writemore+0xa6>
 800ed56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed5a:	f003 0304 	and.w	r3, r3, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <lwip_netconn_do_writemore+0xaa>
 800ed62:	2301      	movs	r3, #1
 800ed64:	e000      	b.n	800ed68 <lwip_netconn_do_writemore+0xac>
 800ed66:	2300      	movs	r3, #0
 800ed68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed70:	689a      	ldr	r2, [r3, #8]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	4413      	add	r3, r2
 800ed78:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed7e:	68da      	ldr	r2, [r3, #12]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a1b      	ldr	r3, [r3, #32]
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed8e:	d309      	bcc.n	800eda4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800ed90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed94:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800ed96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed9a:	f043 0302 	orr.w	r3, r3, #2
 800ed9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eda2:	e001      	b.n	800eda8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edb0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800edb2:	8afa      	ldrh	r2, [r7, #22]
 800edb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d212      	bcs.n	800ede0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800edba:	8afb      	ldrh	r3, [r7, #22]
 800edbc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800edbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d006      	beq.n	800edd4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800edc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d109      	bne.n	800ede0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800edcc:	23f9      	movs	r3, #249	; 0xf9
 800edce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800edd2:	e02a      	b.n	800ee2a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800edd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800edd8:	f043 0302 	orr.w	r3, r3, #2
 800eddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a1a      	ldr	r2, [r3, #32]
 800ede4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ede6:	441a      	add	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d906      	bls.n	800ee00 <lwip_netconn_do_writemore+0x144>
 800edf2:	4b5c      	ldr	r3, [pc, #368]	; (800ef64 <lwip_netconn_do_writemore+0x2a8>)
 800edf4:	f240 6213 	movw	r2, #1555	; 0x613
 800edf8:	4961      	ldr	r1, [pc, #388]	; (800ef80 <lwip_netconn_do_writemore+0x2c4>)
 800edfa:	485c      	ldr	r0, [pc, #368]	; (800ef6c <lwip_netconn_do_writemore+0x2b0>)
 800edfc:	f00a fb60 	bl	80194c0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6858      	ldr	r0, [r3, #4]
 800ee04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee0a:	69f9      	ldr	r1, [r7, #28]
 800ee0c:	f006 f97a 	bl	8015104 <tcp_write>
 800ee10:	4603      	mov	r3, r0
 800ee12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ee16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d004      	beq.n	800ee28 <lwip_netconn_do_writemore+0x16c>
 800ee1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee26:	d133      	bne.n	800ee90 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800ee28:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800ee2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d017      	beq.n	800ee62 <lwip_netconn_do_writemore+0x1a6>
 800ee32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d211      	bcs.n	800ee62 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d005      	beq.n	800ee52 <lwip_netconn_do_writemore+0x196>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee4c:	2103      	movs	r1, #3
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	7f1b      	ldrb	r3, [r3, #28]
 800ee56:	f043 0310 	orr.w	r3, r3, #16
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	771a      	strb	r2, [r3, #28]
 800ee60:	e016      	b.n	800ee90 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee6a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ee6e:	d305      	bcc.n	800ee7c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ee78:	2b04      	cmp	r3, #4
 800ee7a:	d909      	bls.n	800ee90 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <lwip_netconn_do_writemore+0x1d4>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee8a:	2103      	movs	r1, #3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ee90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d134      	bne.n	800ef02 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a1a      	ldr	r2, [r3, #32]
 800ee9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee9e:	441a      	add	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1a      	ldr	r2, [r3, #32]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d003      	beq.n	800eeba <lwip_netconn_do_writemore+0x1fe>
 800eeb2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d007      	beq.n	800eeca <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	6a12      	ldr	r2, [r2, #32]
 800eec2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800eec4:	2301      	movs	r3, #1
 800eec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	4618      	mov	r0, r3
 800eed0:	f006 fdca 	bl	8015a68 <tcp_output>
 800eed4:	4603      	mov	r3, r0
 800eed6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800eed8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800eedc:	f113 0f0c 	cmn.w	r3, #12
 800eee0:	db04      	blt.n	800eeec <lwip_netconn_do_writemore+0x230>
 800eee2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800eee6:	f113 0f04 	cmn.w	r3, #4
 800eeea:	d152      	bne.n	800ef92 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800eeec:	7d3b      	ldrb	r3, [r7, #20]
 800eeee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800eef2:	2301      	movs	r3, #1
 800eef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefc:	2200      	movs	r2, #0
 800eefe:	60da      	str	r2, [r3, #12]
 800ef00:	e047      	b.n	800ef92 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800ef02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef0a:	d13b      	bne.n	800ef84 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f006 fda9 	bl	8015a68 <tcp_output>
 800ef16:	4603      	mov	r3, r0
 800ef18:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800ef1a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ef1e:	f113 0f0c 	cmn.w	r3, #12
 800ef22:	db04      	blt.n	800ef2e <lwip_netconn_do_writemore+0x272>
 800ef24:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ef28:	f113 0f04 	cmn.w	r3, #4
 800ef2c:	d10a      	bne.n	800ef44 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ef2e:	7d7b      	ldrb	r3, [r7, #21]
 800ef30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ef34:	2301      	movs	r3, #1
 800ef36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3e:	2200      	movs	r2, #0
 800ef40:	60da      	str	r2, [r3, #12]
 800ef42:	e026      	b.n	800ef92 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800ef44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d022      	beq.n	800ef92 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800ef4c:	23f9      	movs	r3, #249	; 0xf9
 800ef4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800ef52:	2301      	movs	r3, #1
 800ef54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	60da      	str	r2, [r3, #12]
 800ef60:	e017      	b.n	800ef92 <lwip_netconn_do_writemore+0x2d6>
 800ef62:	bf00      	nop
 800ef64:	0801aa14 	.word	0x0801aa14
 800ef68:	0801ab5c 	.word	0x0801ab5c
 800ef6c:	0801aa90 	.word	0x0801aa90
 800ef70:	0801ae3c 	.word	0x0801ae3c
 800ef74:	0801ab6c 	.word	0x0801ab6c
 800ef78:	0801ae5c 	.word	0x0801ae5c
 800ef7c:	0801ae74 	.word	0x0801ae74
 800ef80:	0801aea8 	.word	0x0801aea8
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ef84:	2301      	movs	r3, #1
 800ef86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8e:	2200      	movs	r2, #0
 800ef90:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800ef92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d02c      	beq.n	800eff4 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	330c      	adds	r3, #12
 800efa2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800efac:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00f      	beq.n	800efe6 <lwip_netconn_do_writemore+0x32a>
 800efc6:	f00a fa17 	bl	80193f8 <sys_arch_protect>
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800efd2:	f113 0f0c 	cmn.w	r3, #12
 800efd6:	db03      	blt.n	800efe0 <lwip_netconn_do_writemore+0x324>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800efde:	721a      	strb	r2, [r3, #8]
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f00a fa17 	bl	8019414 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800efe6:	78fb      	ldrb	r3, [r7, #3]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d006      	beq.n	800effa <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800efec:	6938      	ldr	r0, [r7, #16]
 800efee:	f00a f95e 	bl	80192ae <sys_sem_signal>
 800eff2:	e002      	b.n	800effa <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800eff4:	f04f 33ff 	mov.w	r3, #4294967295
 800eff8:	e000      	b.n	800effc <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3728      	adds	r7, #40	; 0x28
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f018:	f113 0f0c 	cmn.w	r3, #12
 800f01c:	da06      	bge.n	800f02c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	711a      	strb	r2, [r3, #4]
 800f02a:	e072      	b.n	800f112 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f036:	2b10      	cmp	r3, #16
 800f038:	d168      	bne.n	800f10c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	785b      	ldrb	r3, [r3, #1]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d003      	beq.n	800f04c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	22fb      	movs	r2, #251	; 0xfb
 800f048:	711a      	strb	r2, [r3, #4]
 800f04a:	e062      	b.n	800f112 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d056      	beq.n	800f104 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2201      	movs	r2, #1
 800f05c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f064:	2b00      	cmp	r3, #0
 800f066:	d104      	bne.n	800f072 <lwip_netconn_do_write+0x6e>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <lwip_netconn_do_write+0x7c>
 800f072:	4b36      	ldr	r3, [pc, #216]	; (800f14c <lwip_netconn_do_write+0x148>)
 800f074:	f240 6283 	movw	r2, #1667	; 0x683
 800f078:	4935      	ldr	r1, [pc, #212]	; (800f150 <lwip_netconn_do_write+0x14c>)
 800f07a:	4836      	ldr	r0, [pc, #216]	; (800f154 <lwip_netconn_do_write+0x150>)
 800f07c:	f00a fa20 	bl	80194c0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d106      	bne.n	800f096 <lwip_netconn_do_write+0x92>
 800f088:	4b30      	ldr	r3, [pc, #192]	; (800f14c <lwip_netconn_do_write+0x148>)
 800f08a:	f240 6284 	movw	r2, #1668	; 0x684
 800f08e:	4932      	ldr	r1, [pc, #200]	; (800f158 <lwip_netconn_do_write+0x154>)
 800f090:	4830      	ldr	r0, [pc, #192]	; (800f154 <lwip_netconn_do_write+0x150>)
 800f092:	f00a fa15 	bl	80194c0 <iprintf>
        msg->conn->current_msg = msg;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7ff fe05 	bl	800ecbc <lwip_netconn_do_writemore>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d044      	beq.n	800f142 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	785b      	ldrb	r3, [r3, #1]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d006      	beq.n	800f0d0 <lwip_netconn_do_write+0xcc>
 800f0c2:	4b22      	ldr	r3, [pc, #136]	; (800f14c <lwip_netconn_do_write+0x148>)
 800f0c4:	f240 6289 	movw	r2, #1673	; 0x689
 800f0c8:	4924      	ldr	r1, [pc, #144]	; (800f15c <lwip_netconn_do_write+0x158>)
 800f0ca:	4822      	ldr	r0, [pc, #136]	; (800f154 <lwip_netconn_do_write+0x150>)
 800f0cc:	f00a f9f8 	bl	80194c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f0d0:	4823      	ldr	r0, [pc, #140]	; (800f160 <lwip_netconn_do_write+0x15c>)
 800f0d2:	f00a f95e 	bl	8019392 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	330c      	adds	r3, #12
 800f0dc:	2100      	movs	r1, #0
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f00a f8b4 	bl	801924c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f0e4:	481e      	ldr	r0, [pc, #120]	; (800f160 <lwip_netconn_do_write+0x15c>)
 800f0e6:	f00a f945 	bl	8019374 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	785b      	ldrb	r3, [r3, #1]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d126      	bne.n	800f142 <lwip_netconn_do_write+0x13e>
 800f0f4:	4b15      	ldr	r3, [pc, #84]	; (800f14c <lwip_netconn_do_write+0x148>)
 800f0f6:	f240 628d 	movw	r2, #1677	; 0x68d
 800f0fa:	4918      	ldr	r1, [pc, #96]	; (800f15c <lwip_netconn_do_write+0x158>)
 800f0fc:	4815      	ldr	r0, [pc, #84]	; (800f154 <lwip_netconn_do_write+0x150>)
 800f0fe:	f00a f9df 	bl	80194c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800f102:	e01e      	b.n	800f142 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	22f5      	movs	r2, #245	; 0xf5
 800f108:	711a      	strb	r2, [r3, #4]
 800f10a:	e002      	b.n	800f112 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	22fa      	movs	r2, #250	; 0xfa
 800f110:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d014      	beq.n	800f144 <lwip_netconn_do_write+0x140>
 800f11a:	f00a f96d 	bl	80193f8 <sys_arch_protect>
 800f11e:	60b8      	str	r0, [r7, #8]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f128:	f113 0f0c 	cmn.w	r3, #12
 800f12c:	db05      	blt.n	800f13a <lwip_netconn_do_write+0x136>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f138:	721a      	strb	r2, [r3, #8]
 800f13a:	68b8      	ldr	r0, [r7, #8]
 800f13c:	f00a f96a 	bl	8019414 <sys_arch_unprotect>
 800f140:	e000      	b.n	800f144 <lwip_netconn_do_write+0x140>
        return;
 800f142:	bf00      	nop
}
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	0801aa14 	.word	0x0801aa14
 800f150:	0801ad80 	.word	0x0801ad80
 800f154:	0801aa90 	.word	0x0801aa90
 800f158:	0801aed4 	.word	0x0801aed4
 800f15c:	0801ad9c 	.word	0x0801ad9c
 800f160:	2000d10c 	.word	0x2000d10c

0800f164 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	785b      	ldrb	r3, [r3, #1]
 800f176:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d06e      	beq.n	800f260 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800f18c:	2b10      	cmp	r3, #16
 800f18e:	d167      	bne.n	800f260 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800f194:	2b03      	cmp	r3, #3
 800f196:	d002      	beq.n	800f19e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800f198:	7cfb      	ldrb	r3, [r7, #19]
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d060      	beq.n	800f260 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800f19e:	7cfb      	ldrb	r3, [r7, #19]
 800f1a0:	2b03      	cmp	r3, #3
 800f1a2:	d103      	bne.n	800f1ac <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	22f5      	movs	r2, #245	; 0xf5
 800f1a8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800f1aa:	e05c      	b.n	800f266 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800f1ac:	7cfb      	ldrb	r3, [r7, #19]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d103      	bne.n	800f1ba <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	22fb      	movs	r2, #251	; 0xfb
 800f1b6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800f1b8:	e055      	b.n	800f266 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	7a1b      	ldrb	r3, [r3, #8]
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff f90e 	bl	800e3ec <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d104      	bne.n	800f1e4 <lwip_netconn_do_close+0x80>
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6a1b      	ldr	r3, [r3, #32]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <lwip_netconn_do_close+0x8e>
 800f1e4:	4b2e      	ldr	r3, [pc, #184]	; (800f2a0 <lwip_netconn_do_close+0x13c>)
 800f1e6:	f240 721c 	movw	r2, #1820	; 0x71c
 800f1ea:	492e      	ldr	r1, [pc, #184]	; (800f2a4 <lwip_netconn_do_close+0x140>)
 800f1ec:	482e      	ldr	r0, [pc, #184]	; (800f2a8 <lwip_netconn_do_close+0x144>)
 800f1ee:	f00a f967 	bl	80194c0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2204      	movs	r2, #4
 800f1f8:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2100      	movs	r1, #0
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff f96f 	bl	800e4ec <lwip_netconn_do_close_internal>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d040      	beq.n	800f296 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	785b      	ldrb	r3, [r3, #1]
 800f21a:	2b04      	cmp	r3, #4
 800f21c:	d006      	beq.n	800f22c <lwip_netconn_do_close+0xc8>
 800f21e:	4b20      	ldr	r3, [pc, #128]	; (800f2a0 <lwip_netconn_do_close+0x13c>)
 800f220:	f240 7221 	movw	r2, #1825	; 0x721
 800f224:	4921      	ldr	r1, [pc, #132]	; (800f2ac <lwip_netconn_do_close+0x148>)
 800f226:	4820      	ldr	r0, [pc, #128]	; (800f2a8 <lwip_netconn_do_close+0x144>)
 800f228:	f00a f94a 	bl	80194c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800f22c:	4820      	ldr	r0, [pc, #128]	; (800f2b0 <lwip_netconn_do_close+0x14c>)
 800f22e:	f00a f8b0 	bl	8019392 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	330c      	adds	r3, #12
 800f238:	2100      	movs	r1, #0
 800f23a:	4618      	mov	r0, r3
 800f23c:	f00a f806 	bl	801924c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800f240:	481b      	ldr	r0, [pc, #108]	; (800f2b0 <lwip_netconn_do_close+0x14c>)
 800f242:	f00a f897 	bl	8019374 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	785b      	ldrb	r3, [r3, #1]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d022      	beq.n	800f296 <lwip_netconn_do_close+0x132>
 800f250:	4b13      	ldr	r3, [pc, #76]	; (800f2a0 <lwip_netconn_do_close+0x13c>)
 800f252:	f240 7225 	movw	r2, #1829	; 0x725
 800f256:	4915      	ldr	r1, [pc, #84]	; (800f2ac <lwip_netconn_do_close+0x148>)
 800f258:	4813      	ldr	r0, [pc, #76]	; (800f2a8 <lwip_netconn_do_close+0x144>)
 800f25a:	f00a f931 	bl	80194c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800f25e:	e01a      	b.n	800f296 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	22f5      	movs	r2, #245	; 0xf5
 800f264:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d014      	beq.n	800f298 <lwip_netconn_do_close+0x134>
 800f26e:	f00a f8c3 	bl	80193f8 <sys_arch_protect>
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f27c:	f113 0f0c 	cmn.w	r3, #12
 800f280:	db05      	blt.n	800f28e <lwip_netconn_do_close+0x12a>
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f28c:	721a      	strb	r2, [r3, #8]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f00a f8c0 	bl	8019414 <sys_arch_unprotect>
 800f294:	e000      	b.n	800f298 <lwip_netconn_do_close+0x134>
      return;
 800f296:	bf00      	nop
}
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	0801aa14 	.word	0x0801aa14
 800f2a4:	0801ad80 	.word	0x0801ad80
 800f2a8:	0801aa90 	.word	0x0801aa90
 800f2ac:	0801ad9c 	.word	0x0801ad9c
 800f2b0:	2000d10c 	.word	0x2000d10c

0800f2b4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d013      	beq.n	800f2ea <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00b      	beq.n	800f2e2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f001 fc1a 	bl	8010b08 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	605a      	str	r2, [r3, #4]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	2006      	movs	r0, #6
 800f2e6:	f000 fe77 	bl	800ffd8 <memp_free>
  }
}
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
	...

0800f2f4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d108      	bne.n	800f318 <netbuf_data+0x24>
 800f306:	4b1b      	ldr	r3, [pc, #108]	; (800f374 <netbuf_data+0x80>)
 800f308:	22c2      	movs	r2, #194	; 0xc2
 800f30a:	491b      	ldr	r1, [pc, #108]	; (800f378 <netbuf_data+0x84>)
 800f30c:	481b      	ldr	r0, [pc, #108]	; (800f37c <netbuf_data+0x88>)
 800f30e:	f00a f8d7 	bl	80194c0 <iprintf>
 800f312:	f06f 030f 	mvn.w	r3, #15
 800f316:	e029      	b.n	800f36c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d108      	bne.n	800f330 <netbuf_data+0x3c>
 800f31e:	4b15      	ldr	r3, [pc, #84]	; (800f374 <netbuf_data+0x80>)
 800f320:	22c3      	movs	r2, #195	; 0xc3
 800f322:	4917      	ldr	r1, [pc, #92]	; (800f380 <netbuf_data+0x8c>)
 800f324:	4815      	ldr	r0, [pc, #84]	; (800f37c <netbuf_data+0x88>)
 800f326:	f00a f8cb 	bl	80194c0 <iprintf>
 800f32a:	f06f 030f 	mvn.w	r3, #15
 800f32e:	e01d      	b.n	800f36c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d108      	bne.n	800f348 <netbuf_data+0x54>
 800f336:	4b0f      	ldr	r3, [pc, #60]	; (800f374 <netbuf_data+0x80>)
 800f338:	22c4      	movs	r2, #196	; 0xc4
 800f33a:	4912      	ldr	r1, [pc, #72]	; (800f384 <netbuf_data+0x90>)
 800f33c:	480f      	ldr	r0, [pc, #60]	; (800f37c <netbuf_data+0x88>)
 800f33e:	f00a f8bf 	bl	80194c0 <iprintf>
 800f342:	f06f 030f 	mvn.w	r3, #15
 800f346:	e011      	b.n	800f36c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d102      	bne.n	800f356 <netbuf_data+0x62>
    return ERR_BUF;
 800f350:	f06f 0301 	mvn.w	r3, #1
 800f354:	e00a      	b.n	800f36c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	895a      	ldrh	r2, [r3, #10]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	0801af00 	.word	0x0801af00
 800f378:	0801b028 	.word	0x0801b028
 800f37c:	0801af70 	.word	0x0801af70
 800f380:	0801b044 	.word	0x0801b044
 800f384:	0801b064 	.word	0x0801b064

0800f388 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d108      	bne.n	800f3a8 <netbuf_next+0x20>
 800f396:	4b11      	ldr	r3, [pc, #68]	; (800f3dc <netbuf_next+0x54>)
 800f398:	22dc      	movs	r2, #220	; 0xdc
 800f39a:	4911      	ldr	r1, [pc, #68]	; (800f3e0 <netbuf_next+0x58>)
 800f39c:	4811      	ldr	r0, [pc, #68]	; (800f3e4 <netbuf_next+0x5c>)
 800f39e:	f00a f88f 	bl	80194c0 <iprintf>
 800f3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a6:	e014      	b.n	800f3d2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <netbuf_next+0x30>
    return -1;
 800f3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b6:	e00c      	b.n	800f3d2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <netbuf_next+0x48>
    return 1;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e000      	b.n	800f3d2 <netbuf_next+0x4a>
  }
  return 0;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	0801af00 	.word	0x0801af00
 800f3e0:	0801b080 	.word	0x0801b080
 800f3e4:	0801af70 	.word	0x0801af70

0800f3e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800f3f0:	4b29      	ldr	r3, [pc, #164]	; (800f498 <tcpip_thread+0xb0>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d005      	beq.n	800f404 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800f3f8:	4b27      	ldr	r3, [pc, #156]	; (800f498 <tcpip_thread+0xb0>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a27      	ldr	r2, [pc, #156]	; (800f49c <tcpip_thread+0xb4>)
 800f3fe:	6812      	ldr	r2, [r2, #0]
 800f400:	4610      	mov	r0, r2
 800f402:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800f404:	4826      	ldr	r0, [pc, #152]	; (800f4a0 <tcpip_thread+0xb8>)
 800f406:	f009 ffb5 	bl	8019374 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800f40a:	4825      	ldr	r0, [pc, #148]	; (800f4a0 <tcpip_thread+0xb8>)
 800f40c:	f009 ffc1 	bl	8019392 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800f410:	f107 030c 	add.w	r3, r7, #12
 800f414:	4619      	mov	r1, r3
 800f416:	4823      	ldr	r0, [pc, #140]	; (800f4a4 <tcpip_thread+0xbc>)
 800f418:	f007 f97c 	bl	8016714 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f41c:	4820      	ldr	r0, [pc, #128]	; (800f4a0 <tcpip_thread+0xb8>)
 800f41e:	f009 ffa9 	bl	8019374 <sys_mutex_lock>
    if (msg == NULL) {
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f428:	4b1f      	ldr	r3, [pc, #124]	; (800f4a8 <tcpip_thread+0xc0>)
 800f42a:	2269      	movs	r2, #105	; 0x69
 800f42c:	491f      	ldr	r1, [pc, #124]	; (800f4ac <tcpip_thread+0xc4>)
 800f42e:	4820      	ldr	r0, [pc, #128]	; (800f4b0 <tcpip_thread+0xc8>)
 800f430:	f00a f846 	bl	80194c0 <iprintf>
      continue;
 800f434:	e02f      	b.n	800f496 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b03      	cmp	r3, #3
 800f43c:	d011      	beq.n	800f462 <tcpip_thread+0x7a>
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d01b      	beq.n	800f47a <tcpip_thread+0x92>
 800f442:	2b02      	cmp	r3, #2
 800f444:	d120      	bne.n	800f488 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	6850      	ldr	r0, [r2, #4]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	6892      	ldr	r2, [r2, #8]
 800f452:	4611      	mov	r1, r2
 800f454:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	4619      	mov	r1, r3
 800f45a:	2009      	movs	r0, #9
 800f45c:	f000 fdbc 	bl	800ffd8 <memp_free>
      break;
 800f460:	e019      	b.n	800f496 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	6892      	ldr	r2, [r2, #8]
 800f46a:	4610      	mov	r0, r2
 800f46c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	4619      	mov	r1, r3
 800f472:	2008      	movs	r0, #8
 800f474:	f000 fdb0 	bl	800ffd8 <memp_free>
      break;
 800f478:	e00d      	b.n	800f496 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	6892      	ldr	r2, [r2, #8]
 800f482:	4610      	mov	r0, r2
 800f484:	4798      	blx	r3
      break;
 800f486:	e006      	b.n	800f496 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f488:	4b07      	ldr	r3, [pc, #28]	; (800f4a8 <tcpip_thread+0xc0>)
 800f48a:	229b      	movs	r2, #155	; 0x9b
 800f48c:	4907      	ldr	r1, [pc, #28]	; (800f4ac <tcpip_thread+0xc4>)
 800f48e:	4808      	ldr	r0, [pc, #32]	; (800f4b0 <tcpip_thread+0xc8>)
 800f490:	f00a f816 	bl	80194c0 <iprintf>
      break;
 800f494:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800f496:	e7b8      	b.n	800f40a <tcpip_thread+0x22>
 800f498:	2000c7b0 	.word	0x2000c7b0
 800f49c:	2000c7b4 	.word	0x2000c7b4
 800f4a0:	2000d10c 	.word	0x2000d10c
 800f4a4:	2000c7b8 	.word	0x2000c7b8
 800f4a8:	0801b0b8 	.word	0x0801b0b8
 800f4ac:	0801b10c 	.word	0x0801b10c
 800f4b0:	0801b12c 	.word	0x0801b12c

0800f4b4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b086      	sub	sp, #24
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f4c0:	481a      	ldr	r0, [pc, #104]	; (800f52c <tcpip_inpkt+0x78>)
 800f4c2:	f009 fe7d 	bl	80191c0 <sys_mbox_valid>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d105      	bne.n	800f4d8 <tcpip_inpkt+0x24>
 800f4cc:	4b18      	ldr	r3, [pc, #96]	; (800f530 <tcpip_inpkt+0x7c>)
 800f4ce:	22b5      	movs	r2, #181	; 0xb5
 800f4d0:	4918      	ldr	r1, [pc, #96]	; (800f534 <tcpip_inpkt+0x80>)
 800f4d2:	4819      	ldr	r0, [pc, #100]	; (800f538 <tcpip_inpkt+0x84>)
 800f4d4:	f009 fff4 	bl	80194c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f4d8:	2009      	movs	r0, #9
 800f4da:	f000 fd07 	bl	800feec <memp_malloc>
 800f4de:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d102      	bne.n	800f4ec <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ea:	e01a      	b.n	800f522 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2202      	movs	r2, #2
 800f4f0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	68fa      	ldr	r2, [r7, #12]
 800f4f6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f504:	6979      	ldr	r1, [r7, #20]
 800f506:	4809      	ldr	r0, [pc, #36]	; (800f52c <tcpip_inpkt+0x78>)
 800f508:	f009 fde5 	bl	80190d6 <sys_mbox_trypost>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d006      	beq.n	800f520 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f512:	6979      	ldr	r1, [r7, #20]
 800f514:	2009      	movs	r0, #9
 800f516:	f000 fd5f 	bl	800ffd8 <memp_free>
    return ERR_MEM;
 800f51a:	f04f 33ff 	mov.w	r3, #4294967295
 800f51e:	e000      	b.n	800f522 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f520:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f522:	4618      	mov	r0, r3
 800f524:	3718      	adds	r7, #24
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	2000c7b8 	.word	0x2000c7b8
 800f530:	0801b0b8 	.word	0x0801b0b8
 800f534:	0801b154 	.word	0x0801b154
 800f538:	0801b12c 	.word	0x0801b12c

0800f53c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f54c:	f003 0318 	and.w	r3, r3, #24
 800f550:	2b00      	cmp	r3, #0
 800f552:	d006      	beq.n	800f562 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f554:	4a08      	ldr	r2, [pc, #32]	; (800f578 <tcpip_input+0x3c>)
 800f556:	6839      	ldr	r1, [r7, #0]
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7ff ffab 	bl	800f4b4 <tcpip_inpkt>
 800f55e:	4603      	mov	r3, r0
 800f560:	e005      	b.n	800f56e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800f562:	4a06      	ldr	r2, [pc, #24]	; (800f57c <tcpip_input+0x40>)
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f7ff ffa4 	bl	800f4b4 <tcpip_inpkt>
 800f56c:	4603      	mov	r3, r0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	08018e8d 	.word	0x08018e8d
 800f57c:	08017e51 	.word	0x08017e51

0800f580 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	4613      	mov	r3, r2
 800f58c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800f58e:	481d      	ldr	r0, [pc, #116]	; (800f604 <tcpip_callback_with_block+0x84>)
 800f590:	f009 fe16 	bl	80191c0 <sys_mbox_valid>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d105      	bne.n	800f5a6 <tcpip_callback_with_block+0x26>
 800f59a:	4b1b      	ldr	r3, [pc, #108]	; (800f608 <tcpip_callback_with_block+0x88>)
 800f59c:	22ee      	movs	r2, #238	; 0xee
 800f59e:	491b      	ldr	r1, [pc, #108]	; (800f60c <tcpip_callback_with_block+0x8c>)
 800f5a0:	481b      	ldr	r0, [pc, #108]	; (800f610 <tcpip_callback_with_block+0x90>)
 800f5a2:	f009 ff8d 	bl	80194c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f5a6:	2008      	movs	r0, #8
 800f5a8:	f000 fca0 	bl	800feec <memp_malloc>
 800f5ac:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d102      	bne.n	800f5ba <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800f5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b8:	e01f      	b.n	800f5fa <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2203      	movs	r2, #3
 800f5be:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	609a      	str	r2, [r3, #8]
  if (block) {
 800f5cc:	79fb      	ldrb	r3, [r7, #7]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d004      	beq.n	800f5dc <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800f5d2:	6979      	ldr	r1, [r7, #20]
 800f5d4:	480b      	ldr	r0, [pc, #44]	; (800f604 <tcpip_callback_with_block+0x84>)
 800f5d6:	f009 fd69 	bl	80190ac <sys_mbox_post>
 800f5da:	e00d      	b.n	800f5f8 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800f5dc:	6979      	ldr	r1, [r7, #20]
 800f5de:	4809      	ldr	r0, [pc, #36]	; (800f604 <tcpip_callback_with_block+0x84>)
 800f5e0:	f009 fd79 	bl	80190d6 <sys_mbox_trypost>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d006      	beq.n	800f5f8 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f5ea:	6979      	ldr	r1, [r7, #20]
 800f5ec:	2008      	movs	r0, #8
 800f5ee:	f000 fcf3 	bl	800ffd8 <memp_free>
      return ERR_MEM;
 800f5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f6:	e000      	b.n	800f5fa <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3718      	adds	r7, #24
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	2000c7b8 	.word	0x2000c7b8
 800f608:	0801b0b8 	.word	0x0801b0b8
 800f60c:	0801b154 	.word	0x0801b154
 800f610:	0801b12c 	.word	0x0801b12c

0800f614 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f620:	4806      	ldr	r0, [pc, #24]	; (800f63c <tcpip_send_msg_wait_sem+0x28>)
 800f622:	f009 fea7 	bl	8019374 <sys_mutex_lock>
  fn(apimsg);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	68b8      	ldr	r0, [r7, #8]
 800f62a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f62c:	4803      	ldr	r0, [pc, #12]	; (800f63c <tcpip_send_msg_wait_sem+0x28>)
 800f62e:	f009 feb0 	bl	8019392 <sys_mutex_unlock>
  return ERR_OK;
 800f632:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	2000d10c 	.word	0x2000d10c

0800f640 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af02      	add	r7, sp, #8
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f64a:	f000 f86a 	bl	800f722 <lwip_init>

  tcpip_init_done = initfunc;
 800f64e:	4a17      	ldr	r2, [pc, #92]	; (800f6ac <tcpip_init+0x6c>)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f654:	4a16      	ldr	r2, [pc, #88]	; (800f6b0 <tcpip_init+0x70>)
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f65a:	2106      	movs	r1, #6
 800f65c:	4815      	ldr	r0, [pc, #84]	; (800f6b4 <tcpip_init+0x74>)
 800f65e:	f009 fcf1 	bl	8019044 <sys_mbox_new>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d006      	beq.n	800f676 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f668:	4b13      	ldr	r3, [pc, #76]	; (800f6b8 <tcpip_init+0x78>)
 800f66a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f66e:	4913      	ldr	r1, [pc, #76]	; (800f6bc <tcpip_init+0x7c>)
 800f670:	4813      	ldr	r0, [pc, #76]	; (800f6c0 <tcpip_init+0x80>)
 800f672:	f009 ff25 	bl	80194c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f676:	4813      	ldr	r0, [pc, #76]	; (800f6c4 <tcpip_init+0x84>)
 800f678:	f009 fe60 	bl	801933c <sys_mutex_new>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d006      	beq.n	800f690 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f682:	4b0d      	ldr	r3, [pc, #52]	; (800f6b8 <tcpip_init+0x78>)
 800f684:	f240 12d9 	movw	r2, #473	; 0x1d9
 800f688:	490f      	ldr	r1, [pc, #60]	; (800f6c8 <tcpip_init+0x88>)
 800f68a:	480d      	ldr	r0, [pc, #52]	; (800f6c0 <tcpip_init+0x80>)
 800f68c:	f009 ff18 	bl	80194c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f690:	2300      	movs	r3, #0
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f698:	2200      	movs	r2, #0
 800f69a:	490c      	ldr	r1, [pc, #48]	; (800f6cc <tcpip_init+0x8c>)
 800f69c:	480c      	ldr	r0, [pc, #48]	; (800f6d0 <tcpip_init+0x90>)
 800f69e:	f009 fe85 	bl	80193ac <sys_thread_new>
}
 800f6a2:	bf00      	nop
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	2000c7b0 	.word	0x2000c7b0
 800f6b0:	2000c7b4 	.word	0x2000c7b4
 800f6b4:	2000c7b8 	.word	0x2000c7b8
 800f6b8:	0801b0b8 	.word	0x0801b0b8
 800f6bc:	0801b164 	.word	0x0801b164
 800f6c0:	0801b12c 	.word	0x0801b12c
 800f6c4:	2000d10c 	.word	0x2000d10c
 800f6c8:	0801b188 	.word	0x0801b188
 800f6cc:	0800f3e9 	.word	0x0800f3e9
 800f6d0:	0801b1ac 	.word	0x0801b1ac

0800f6d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800f6de:	88fb      	ldrh	r3, [r7, #6]
 800f6e0:	ba5b      	rev16	r3, r3
 800f6e2:	b29b      	uxth	r3, r3
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	061a      	lsls	r2, r3, #24
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	021b      	lsls	r3, r3, #8
 800f700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f704:	431a      	orrs	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	0a1b      	lsrs	r3, r3, #8
 800f70a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f70e:	431a      	orrs	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	0e1b      	lsrs	r3, r3, #24
 800f714:	4313      	orrs	r3, r2
}
 800f716:	4618      	mov	r0, r3
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b082      	sub	sp, #8
 800f726:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f72c:	f009 fdf8 	bl	8019320 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f730:	f000 f8a6 	bl	800f880 <mem_init>
  memp_init();
 800f734:	f000 fb6c 	bl	800fe10 <memp_init>
  pbuf_init();
  netif_init();
 800f738:	f000 fc78 	bl	801002c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f73c:	f007 f810 	bl	8016760 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f740:	f001 fc58 	bl	8010ff4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800f744:	f006 fea2 	bl	801648c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f748:	bf00      	nop
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f758:	4b40      	ldr	r3, [pc, #256]	; (800f85c <plug_holes+0x10c>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d206      	bcs.n	800f770 <plug_holes+0x20>
 800f762:	4b3f      	ldr	r3, [pc, #252]	; (800f860 <plug_holes+0x110>)
 800f764:	f240 125d 	movw	r2, #349	; 0x15d
 800f768:	493e      	ldr	r1, [pc, #248]	; (800f864 <plug_holes+0x114>)
 800f76a:	483f      	ldr	r0, [pc, #252]	; (800f868 <plug_holes+0x118>)
 800f76c:	f009 fea8 	bl	80194c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f770:	4b3e      	ldr	r3, [pc, #248]	; (800f86c <plug_holes+0x11c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	429a      	cmp	r2, r3
 800f778:	d306      	bcc.n	800f788 <plug_holes+0x38>
 800f77a:	4b39      	ldr	r3, [pc, #228]	; (800f860 <plug_holes+0x110>)
 800f77c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f780:	493b      	ldr	r1, [pc, #236]	; (800f870 <plug_holes+0x120>)
 800f782:	4839      	ldr	r0, [pc, #228]	; (800f868 <plug_holes+0x118>)
 800f784:	f009 fe9c 	bl	80194c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	791b      	ldrb	r3, [r3, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d006      	beq.n	800f79e <plug_holes+0x4e>
 800f790:	4b33      	ldr	r3, [pc, #204]	; (800f860 <plug_holes+0x110>)
 800f792:	f240 125f 	movw	r2, #351	; 0x15f
 800f796:	4937      	ldr	r1, [pc, #220]	; (800f874 <plug_holes+0x124>)
 800f798:	4833      	ldr	r0, [pc, #204]	; (800f868 <plug_holes+0x118>)
 800f79a:	f009 fe91 	bl	80194c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	881b      	ldrh	r3, [r3, #0]
 800f7a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7a6:	d906      	bls.n	800f7b6 <plug_holes+0x66>
 800f7a8:	4b2d      	ldr	r3, [pc, #180]	; (800f860 <plug_holes+0x110>)
 800f7aa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f7ae:	4932      	ldr	r1, [pc, #200]	; (800f878 <plug_holes+0x128>)
 800f7b0:	482d      	ldr	r0, [pc, #180]	; (800f868 <plug_holes+0x118>)
 800f7b2:	f009 fe85 	bl	80194c0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800f7b6:	4b29      	ldr	r3, [pc, #164]	; (800f85c <plug_holes+0x10c>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	8812      	ldrh	r2, [r2, #0]
 800f7be:	4413      	add	r3, r2
 800f7c0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d01f      	beq.n	800f80a <plug_holes+0xba>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	791b      	ldrb	r3, [r3, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d11b      	bne.n	800f80a <plug_holes+0xba>
 800f7d2:	4b26      	ldr	r3, [pc, #152]	; (800f86c <plug_holes+0x11c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d016      	beq.n	800f80a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f7dc:	4b27      	ldr	r3, [pc, #156]	; (800f87c <plug_holes+0x12c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d102      	bne.n	800f7ec <plug_holes+0x9c>
      lfree = mem;
 800f7e6:	4a25      	ldr	r2, [pc, #148]	; (800f87c <plug_holes+0x12c>)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	881a      	ldrh	r2, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a19      	ldr	r2, [pc, #100]	; (800f85c <plug_holes+0x10c>)
 800f7f8:	6812      	ldr	r2, [r2, #0]
 800f7fa:	1a99      	subs	r1, r3, r2
 800f7fc:	4b17      	ldr	r3, [pc, #92]	; (800f85c <plug_holes+0x10c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	8812      	ldrh	r2, [r2, #0]
 800f804:	4413      	add	r3, r2
 800f806:	b28a      	uxth	r2, r1
 800f808:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800f80a:	4b14      	ldr	r3, [pc, #80]	; (800f85c <plug_holes+0x10c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	8852      	ldrh	r2, [r2, #2]
 800f812:	4413      	add	r3, r2
 800f814:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d01a      	beq.n	800f854 <plug_holes+0x104>
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	791b      	ldrb	r3, [r3, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d116      	bne.n	800f854 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f826:	4b15      	ldr	r3, [pc, #84]	; (800f87c <plug_holes+0x12c>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d102      	bne.n	800f836 <plug_holes+0xe6>
      lfree = pmem;
 800f830:	4a12      	ldr	r2, [pc, #72]	; (800f87c <plug_holes+0x12c>)
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	881a      	ldrh	r2, [r3, #0]
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	4a06      	ldr	r2, [pc, #24]	; (800f85c <plug_holes+0x10c>)
 800f842:	6812      	ldr	r2, [r2, #0]
 800f844:	1a99      	subs	r1, r3, r2
 800f846:	4b05      	ldr	r3, [pc, #20]	; (800f85c <plug_holes+0x10c>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	8812      	ldrh	r2, [r2, #0]
 800f84e:	4413      	add	r3, r2
 800f850:	b28a      	uxth	r2, r1
 800f852:	805a      	strh	r2, [r3, #2]
  }
}
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	2000c7bc 	.word	0x2000c7bc
 800f860:	0801b1bc 	.word	0x0801b1bc
 800f864:	0801b210 	.word	0x0801b210
 800f868:	0801b228 	.word	0x0801b228
 800f86c:	2000c7c0 	.word	0x2000c7c0
 800f870:	0801b250 	.word	0x0801b250
 800f874:	0801b26c 	.word	0x0801b26c
 800f878:	0801b288 	.word	0x0801b288
 800f87c:	2000c7c4 	.word	0x2000c7c4

0800f880 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f886:	4b1c      	ldr	r3, [pc, #112]	; (800f8f8 <mem_init+0x78>)
 800f888:	4a1c      	ldr	r2, [pc, #112]	; (800f8fc <mem_init+0x7c>)
 800f88a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f88c:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <mem_init+0x78>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f898:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800f8a6:	4b14      	ldr	r3, [pc, #80]	; (800f8f8 <mem_init+0x78>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800f8ae:	4a14      	ldr	r2, [pc, #80]	; (800f900 <mem_init+0x80>)
 800f8b0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f8b2:	4b13      	ldr	r3, [pc, #76]	; (800f900 <mem_init+0x80>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f8ba:	4b11      	ldr	r3, [pc, #68]	; (800f900 <mem_init+0x80>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f8c2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f8c4:	4b0e      	ldr	r3, [pc, #56]	; (800f900 <mem_init+0x80>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f8cc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f8ce:	4b0a      	ldr	r3, [pc, #40]	; (800f8f8 <mem_init+0x78>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4a0c      	ldr	r2, [pc, #48]	; (800f904 <mem_init+0x84>)
 800f8d4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f8d6:	480c      	ldr	r0, [pc, #48]	; (800f908 <mem_init+0x88>)
 800f8d8:	f009 fd30 	bl	801933c <sys_mutex_new>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f8e2:	4b0a      	ldr	r3, [pc, #40]	; (800f90c <mem_init+0x8c>)
 800f8e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f8e8:	4909      	ldr	r1, [pc, #36]	; (800f910 <mem_init+0x90>)
 800f8ea:	480a      	ldr	r0, [pc, #40]	; (800f914 <mem_init+0x94>)
 800f8ec:	f009 fde8 	bl	80194c0 <iprintf>
  }
}
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	2000c7bc 	.word	0x2000c7bc
 800f8fc:	30044000 	.word	0x30044000
 800f900:	2000c7c0 	.word	0x2000c7c0
 800f904:	2000c7c4 	.word	0x2000c7c4
 800f908:	2000c7c8 	.word	0x2000c7c8
 800f90c:	0801b1bc 	.word	0x0801b1bc
 800f910:	0801b2b4 	.word	0x0801b2b4
 800f914:	0801b228 	.word	0x0801b228

0800f918 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d050      	beq.n	800f9c8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f003 0303 	and.w	r3, r3, #3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d006      	beq.n	800f93e <mem_free+0x26>
 800f930:	4b27      	ldr	r3, [pc, #156]	; (800f9d0 <mem_free+0xb8>)
 800f932:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f936:	4927      	ldr	r1, [pc, #156]	; (800f9d4 <mem_free+0xbc>)
 800f938:	4827      	ldr	r0, [pc, #156]	; (800f9d8 <mem_free+0xc0>)
 800f93a:	f009 fdc1 	bl	80194c0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f93e:	4b27      	ldr	r3, [pc, #156]	; (800f9dc <mem_free+0xc4>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	429a      	cmp	r2, r3
 800f946:	d304      	bcc.n	800f952 <mem_free+0x3a>
 800f948:	4b25      	ldr	r3, [pc, #148]	; (800f9e0 <mem_free+0xc8>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d306      	bcc.n	800f960 <mem_free+0x48>
 800f952:	4b1f      	ldr	r3, [pc, #124]	; (800f9d0 <mem_free+0xb8>)
 800f954:	f240 12af 	movw	r2, #431	; 0x1af
 800f958:	4922      	ldr	r1, [pc, #136]	; (800f9e4 <mem_free+0xcc>)
 800f95a:	481f      	ldr	r0, [pc, #124]	; (800f9d8 <mem_free+0xc0>)
 800f95c:	f009 fdb0 	bl	80194c0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f960:	4b1e      	ldr	r3, [pc, #120]	; (800f9dc <mem_free+0xc4>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	429a      	cmp	r2, r3
 800f968:	d304      	bcc.n	800f974 <mem_free+0x5c>
 800f96a:	4b1d      	ldr	r3, [pc, #116]	; (800f9e0 <mem_free+0xc8>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	429a      	cmp	r2, r3
 800f972:	d306      	bcc.n	800f982 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f974:	f009 fd40 	bl	80193f8 <sys_arch_protect>
 800f978:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f97a:	68b8      	ldr	r0, [r7, #8]
 800f97c:	f009 fd4a 	bl	8019414 <sys_arch_unprotect>
    return;
 800f980:	e023      	b.n	800f9ca <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f982:	4819      	ldr	r0, [pc, #100]	; (800f9e8 <mem_free+0xd0>)
 800f984:	f009 fcf6 	bl	8019374 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3b08      	subs	r3, #8
 800f98c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	791b      	ldrb	r3, [r3, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d106      	bne.n	800f9a4 <mem_free+0x8c>
 800f996:	4b0e      	ldr	r3, [pc, #56]	; (800f9d0 <mem_free+0xb8>)
 800f998:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f99c:	4913      	ldr	r1, [pc, #76]	; (800f9ec <mem_free+0xd4>)
 800f99e:	480e      	ldr	r0, [pc, #56]	; (800f9d8 <mem_free+0xc0>)
 800f9a0:	f009 fd8e 	bl	80194c0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f9aa:	4b11      	ldr	r3, [pc, #68]	; (800f9f0 <mem_free+0xd8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d202      	bcs.n	800f9ba <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f9b4:	4a0e      	ldr	r2, [pc, #56]	; (800f9f0 <mem_free+0xd8>)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7ff fec8 	bl	800f750 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f9c0:	4809      	ldr	r0, [pc, #36]	; (800f9e8 <mem_free+0xd0>)
 800f9c2:	f009 fce6 	bl	8019392 <sys_mutex_unlock>
 800f9c6:	e000      	b.n	800f9ca <mem_free+0xb2>
    return;
 800f9c8:	bf00      	nop
}
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	0801b1bc 	.word	0x0801b1bc
 800f9d4:	0801b2d0 	.word	0x0801b2d0
 800f9d8:	0801b228 	.word	0x0801b228
 800f9dc:	2000c7bc 	.word	0x2000c7bc
 800f9e0:	2000c7c0 	.word	0x2000c7c0
 800f9e4:	0801b2f4 	.word	0x0801b2f4
 800f9e8:	2000c7c8 	.word	0x2000c7c8
 800f9ec:	0801b30c 	.word	0x0801b30c
 800f9f0:	2000c7c4 	.word	0x2000c7c4

0800f9f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800fa00:	887b      	ldrh	r3, [r7, #2]
 800fa02:	3303      	adds	r3, #3
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	f023 0303 	bic.w	r3, r3, #3
 800fa0a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800fa0c:	887b      	ldrh	r3, [r7, #2]
 800fa0e:	2b0b      	cmp	r3, #11
 800fa10:	d801      	bhi.n	800fa16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fa12:	230c      	movs	r3, #12
 800fa14:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800fa16:	887b      	ldrh	r3, [r7, #2]
 800fa18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa1c:	d901      	bls.n	800fa22 <mem_trim+0x2e>
    return NULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e0bd      	b.n	800fb9e <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fa22:	4b61      	ldr	r3, [pc, #388]	; (800fba8 <mem_trim+0x1b4>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d304      	bcc.n	800fa36 <mem_trim+0x42>
 800fa2c:	4b5f      	ldr	r3, [pc, #380]	; (800fbac <mem_trim+0x1b8>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d306      	bcc.n	800fa44 <mem_trim+0x50>
 800fa36:	4b5e      	ldr	r3, [pc, #376]	; (800fbb0 <mem_trim+0x1bc>)
 800fa38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800fa3c:	495d      	ldr	r1, [pc, #372]	; (800fbb4 <mem_trim+0x1c0>)
 800fa3e:	485e      	ldr	r0, [pc, #376]	; (800fbb8 <mem_trim+0x1c4>)
 800fa40:	f009 fd3e 	bl	80194c0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fa44:	4b58      	ldr	r3, [pc, #352]	; (800fba8 <mem_trim+0x1b4>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d304      	bcc.n	800fa58 <mem_trim+0x64>
 800fa4e:	4b57      	ldr	r3, [pc, #348]	; (800fbac <mem_trim+0x1b8>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d307      	bcc.n	800fa68 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800fa58:	f009 fcce 	bl	80193f8 <sys_arch_protect>
 800fa5c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f009 fcd8 	bl	8019414 <sys_arch_unprotect>
    return rmem;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	e09a      	b.n	800fb9e <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	3b08      	subs	r3, #8
 800fa6c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	4a4d      	ldr	r2, [pc, #308]	; (800fba8 <mem_trim+0x1b4>)
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	1a9b      	subs	r3, r3, r2
 800fa76:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	881a      	ldrh	r2, [r3, #0]
 800fa7c:	8b7b      	ldrh	r3, [r7, #26]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	3b08      	subs	r3, #8
 800fa84:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fa86:	887a      	ldrh	r2, [r7, #2]
 800fa88:	8b3b      	ldrh	r3, [r7, #24]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d906      	bls.n	800fa9c <mem_trim+0xa8>
 800fa8e:	4b48      	ldr	r3, [pc, #288]	; (800fbb0 <mem_trim+0x1bc>)
 800fa90:	f240 2206 	movw	r2, #518	; 0x206
 800fa94:	4949      	ldr	r1, [pc, #292]	; (800fbbc <mem_trim+0x1c8>)
 800fa96:	4848      	ldr	r0, [pc, #288]	; (800fbb8 <mem_trim+0x1c4>)
 800fa98:	f009 fd12 	bl	80194c0 <iprintf>
  if (newsize > size) {
 800fa9c:	887a      	ldrh	r2, [r7, #2]
 800fa9e:	8b3b      	ldrh	r3, [r7, #24]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d901      	bls.n	800faa8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800faa4:	2300      	movs	r3, #0
 800faa6:	e07a      	b.n	800fb9e <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800faa8:	887a      	ldrh	r2, [r7, #2]
 800faaa:	8b3b      	ldrh	r3, [r7, #24]
 800faac:	429a      	cmp	r2, r3
 800faae:	d101      	bne.n	800fab4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	e074      	b.n	800fb9e <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fab4:	4842      	ldr	r0, [pc, #264]	; (800fbc0 <mem_trim+0x1cc>)
 800fab6:	f009 fc5d 	bl	8019374 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800faba:	4b3b      	ldr	r3, [pc, #236]	; (800fba8 <mem_trim+0x1b4>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	69fa      	ldr	r2, [r7, #28]
 800fac0:	8812      	ldrh	r2, [r2, #0]
 800fac2:	4413      	add	r3, r2
 800fac4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	791b      	ldrb	r3, [r3, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d131      	bne.n	800fb32 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fad4:	8b7a      	ldrh	r2, [r7, #26]
 800fad6:	887b      	ldrh	r3, [r7, #2]
 800fad8:	4413      	add	r3, r2
 800fada:	b29b      	uxth	r3, r3
 800fadc:	3308      	adds	r3, #8
 800fade:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800fae0:	4b38      	ldr	r3, [pc, #224]	; (800fbc4 <mem_trim+0x1d0>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	697a      	ldr	r2, [r7, #20]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d105      	bne.n	800faf6 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800faea:	4b2f      	ldr	r3, [pc, #188]	; (800fba8 <mem_trim+0x1b4>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	8a7b      	ldrh	r3, [r7, #18]
 800faf0:	4413      	add	r3, r2
 800faf2:	4a34      	ldr	r2, [pc, #208]	; (800fbc4 <mem_trim+0x1d0>)
 800faf4:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800faf6:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <mem_trim+0x1b4>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	8a7b      	ldrh	r3, [r7, #18]
 800fafc:	4413      	add	r3, r2
 800fafe:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	2200      	movs	r2, #0
 800fb04:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	8a3a      	ldrh	r2, [r7, #16]
 800fb0a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	8b7a      	ldrh	r2, [r7, #26]
 800fb10:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	8a7a      	ldrh	r2, [r7, #18]
 800fb16:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	881b      	ldrh	r3, [r3, #0]
 800fb1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb20:	d039      	beq.n	800fb96 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fb22:	4b21      	ldr	r3, [pc, #132]	; (800fba8 <mem_trim+0x1b4>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	8812      	ldrh	r2, [r2, #0]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	8a7a      	ldrh	r2, [r7, #18]
 800fb2e:	805a      	strh	r2, [r3, #2]
 800fb30:	e031      	b.n	800fb96 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fb32:	887b      	ldrh	r3, [r7, #2]
 800fb34:	f103 0214 	add.w	r2, r3, #20
 800fb38:	8b3b      	ldrh	r3, [r7, #24]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d82b      	bhi.n	800fb96 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fb3e:	8b7a      	ldrh	r2, [r7, #26]
 800fb40:	887b      	ldrh	r3, [r7, #2]
 800fb42:	4413      	add	r3, r2
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	3308      	adds	r3, #8
 800fb48:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800fb4a:	4b17      	ldr	r3, [pc, #92]	; (800fba8 <mem_trim+0x1b4>)
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	8a7b      	ldrh	r3, [r7, #18]
 800fb50:	4413      	add	r3, r2
 800fb52:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800fb54:	4b1b      	ldr	r3, [pc, #108]	; (800fbc4 <mem_trim+0x1d0>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d202      	bcs.n	800fb64 <mem_trim+0x170>
      lfree = mem2;
 800fb5e:	4a19      	ldr	r2, [pc, #100]	; (800fbc4 <mem_trim+0x1d0>)
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	2200      	movs	r2, #0
 800fb68:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	881a      	ldrh	r2, [r3, #0]
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	8b7a      	ldrh	r2, [r7, #26]
 800fb76:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	8a7a      	ldrh	r2, [r7, #18]
 800fb7c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb86:	d006      	beq.n	800fb96 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fb88:	4b07      	ldr	r3, [pc, #28]	; (800fba8 <mem_trim+0x1b4>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	697a      	ldr	r2, [r7, #20]
 800fb8e:	8812      	ldrh	r2, [r2, #0]
 800fb90:	4413      	add	r3, r2
 800fb92:	8a7a      	ldrh	r2, [r7, #18]
 800fb94:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fb96:	480a      	ldr	r0, [pc, #40]	; (800fbc0 <mem_trim+0x1cc>)
 800fb98:	f009 fbfb 	bl	8019392 <sys_mutex_unlock>
  return rmem;
 800fb9c:	687b      	ldr	r3, [r7, #4]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3720      	adds	r7, #32
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	2000c7bc 	.word	0x2000c7bc
 800fbac:	2000c7c0 	.word	0x2000c7c0
 800fbb0:	0801b1bc 	.word	0x0801b1bc
 800fbb4:	0801b320 	.word	0x0801b320
 800fbb8:	0801b228 	.word	0x0801b228
 800fbbc:	0801b338 	.word	0x0801b338
 800fbc0:	2000c7c8 	.word	0x2000c7c8
 800fbc4:	2000c7c4 	.word	0x2000c7c4

0800fbc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	4603      	mov	r3, r0
 800fbd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d101      	bne.n	800fbdc <mem_malloc+0x14>
    return NULL;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	e0d1      	b.n	800fd80 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800fbdc:	88fb      	ldrh	r3, [r7, #6]
 800fbde:	3303      	adds	r3, #3
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	f023 0303 	bic.w	r3, r3, #3
 800fbe6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800fbe8:	88fb      	ldrh	r3, [r7, #6]
 800fbea:	2b0b      	cmp	r3, #11
 800fbec:	d801      	bhi.n	800fbf2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fbee:	230c      	movs	r3, #12
 800fbf0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800fbf2:	88fb      	ldrh	r3, [r7, #6]
 800fbf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbf8:	d901      	bls.n	800fbfe <mem_malloc+0x36>
    return NULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e0c0      	b.n	800fd80 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fbfe:	4862      	ldr	r0, [pc, #392]	; (800fd88 <mem_malloc+0x1c0>)
 800fc00:	f009 fbb8 	bl	8019374 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fc04:	4b61      	ldr	r3, [pc, #388]	; (800fd8c <mem_malloc+0x1c4>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	461a      	mov	r2, r3
 800fc0a:	4b61      	ldr	r3, [pc, #388]	; (800fd90 <mem_malloc+0x1c8>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	1ad3      	subs	r3, r2, r3
 800fc10:	83fb      	strh	r3, [r7, #30]
 800fc12:	e0aa      	b.n	800fd6a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800fc14:	4b5e      	ldr	r3, [pc, #376]	; (800fd90 <mem_malloc+0x1c8>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	8bfb      	ldrh	r3, [r7, #30]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	791b      	ldrb	r3, [r3, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f040 809b 	bne.w	800fd5e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	8bfb      	ldrh	r3, [r7, #30]
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	f1a3 0208 	sub.w	r2, r3, #8
 800fc36:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	f0c0 8090 	bcc.w	800fd5e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	8bfb      	ldrh	r3, [r7, #30]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	f1a3 0208 	sub.w	r2, r3, #8
 800fc4c:	88fb      	ldrh	r3, [r7, #6]
 800fc4e:	3314      	adds	r3, #20
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d327      	bcc.n	800fca4 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800fc54:	8bfa      	ldrh	r2, [r7, #30]
 800fc56:	88fb      	ldrh	r3, [r7, #6]
 800fc58:	4413      	add	r3, r2
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	3308      	adds	r3, #8
 800fc5e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800fc60:	4b4b      	ldr	r3, [pc, #300]	; (800fd90 <mem_malloc+0x1c8>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	8a7b      	ldrh	r3, [r7, #18]
 800fc66:	4413      	add	r3, r2
 800fc68:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	881a      	ldrh	r2, [r3, #0]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	8bfa      	ldrh	r2, [r7, #30]
 800fc7c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	8a7a      	ldrh	r2, [r7, #18]
 800fc82:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2201      	movs	r2, #1
 800fc88:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc92:	d00a      	beq.n	800fcaa <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800fc94:	4b3e      	ldr	r3, [pc, #248]	; (800fd90 <mem_malloc+0x1c8>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	8812      	ldrh	r2, [r2, #0]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	8a7a      	ldrh	r2, [r7, #18]
 800fca0:	805a      	strh	r2, [r3, #2]
 800fca2:	e002      	b.n	800fcaa <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	2201      	movs	r2, #1
 800fca8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fcaa:	4b38      	ldr	r3, [pc, #224]	; (800fd8c <mem_malloc+0x1c4>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d127      	bne.n	800fd04 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800fcb4:	4b35      	ldr	r3, [pc, #212]	; (800fd8c <mem_malloc+0x1c4>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fcba:	e005      	b.n	800fcc8 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800fcbc:	4b34      	ldr	r3, [pc, #208]	; (800fd90 <mem_malloc+0x1c8>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	69ba      	ldr	r2, [r7, #24]
 800fcc2:	8812      	ldrh	r2, [r2, #0]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	791b      	ldrb	r3, [r3, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d004      	beq.n	800fcda <mem_malloc+0x112>
 800fcd0:	4b30      	ldr	r3, [pc, #192]	; (800fd94 <mem_malloc+0x1cc>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	69ba      	ldr	r2, [r7, #24]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d1f0      	bne.n	800fcbc <mem_malloc+0xf4>
          }
          lfree = cur;
 800fcda:	4a2c      	ldr	r2, [pc, #176]	; (800fd8c <mem_malloc+0x1c4>)
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fce0:	4b2a      	ldr	r3, [pc, #168]	; (800fd8c <mem_malloc+0x1c4>)
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	4b2b      	ldr	r3, [pc, #172]	; (800fd94 <mem_malloc+0x1cc>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d00b      	beq.n	800fd04 <mem_malloc+0x13c>
 800fcec:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <mem_malloc+0x1c4>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	791b      	ldrb	r3, [r3, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d006      	beq.n	800fd04 <mem_malloc+0x13c>
 800fcf6:	4b28      	ldr	r3, [pc, #160]	; (800fd98 <mem_malloc+0x1d0>)
 800fcf8:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fcfc:	4927      	ldr	r1, [pc, #156]	; (800fd9c <mem_malloc+0x1d4>)
 800fcfe:	4828      	ldr	r0, [pc, #160]	; (800fda0 <mem_malloc+0x1d8>)
 800fd00:	f009 fbde 	bl	80194c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fd04:	4820      	ldr	r0, [pc, #128]	; (800fd88 <mem_malloc+0x1c0>)
 800fd06:	f009 fb44 	bl	8019392 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fd0a:	88fa      	ldrh	r2, [r7, #6]
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	4413      	add	r3, r2
 800fd10:	3308      	adds	r3, #8
 800fd12:	4a20      	ldr	r2, [pc, #128]	; (800fd94 <mem_malloc+0x1cc>)
 800fd14:	6812      	ldr	r2, [r2, #0]
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d906      	bls.n	800fd28 <mem_malloc+0x160>
 800fd1a:	4b1f      	ldr	r3, [pc, #124]	; (800fd98 <mem_malloc+0x1d0>)
 800fd1c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800fd20:	4920      	ldr	r1, [pc, #128]	; (800fda4 <mem_malloc+0x1dc>)
 800fd22:	481f      	ldr	r0, [pc, #124]	; (800fda0 <mem_malloc+0x1d8>)
 800fd24:	f009 fbcc 	bl	80194c0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f003 0303 	and.w	r3, r3, #3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d006      	beq.n	800fd40 <mem_malloc+0x178>
 800fd32:	4b19      	ldr	r3, [pc, #100]	; (800fd98 <mem_malloc+0x1d0>)
 800fd34:	f240 22d6 	movw	r2, #726	; 0x2d6
 800fd38:	491b      	ldr	r1, [pc, #108]	; (800fda8 <mem_malloc+0x1e0>)
 800fd3a:	4819      	ldr	r0, [pc, #100]	; (800fda0 <mem_malloc+0x1d8>)
 800fd3c:	f009 fbc0 	bl	80194c0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	f003 0303 	and.w	r3, r3, #3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d006      	beq.n	800fd58 <mem_malloc+0x190>
 800fd4a:	4b13      	ldr	r3, [pc, #76]	; (800fd98 <mem_malloc+0x1d0>)
 800fd4c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800fd50:	4916      	ldr	r1, [pc, #88]	; (800fdac <mem_malloc+0x1e4>)
 800fd52:	4813      	ldr	r0, [pc, #76]	; (800fda0 <mem_malloc+0x1d8>)
 800fd54:	f009 fbb4 	bl	80194c0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	e010      	b.n	800fd80 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800fd5e:	4b0c      	ldr	r3, [pc, #48]	; (800fd90 <mem_malloc+0x1c8>)
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	8bfb      	ldrh	r3, [r7, #30]
 800fd64:	4413      	add	r3, r2
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800fd6a:	8bfa      	ldrh	r2, [r7, #30]
 800fd6c:	88fb      	ldrh	r3, [r7, #6]
 800fd6e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800fd72:	429a      	cmp	r2, r3
 800fd74:	f4ff af4e 	bcc.w	800fc14 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fd78:	4803      	ldr	r0, [pc, #12]	; (800fd88 <mem_malloc+0x1c0>)
 800fd7a:	f009 fb0a 	bl	8019392 <sys_mutex_unlock>
  return NULL;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3720      	adds	r7, #32
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	2000c7c8 	.word	0x2000c7c8
 800fd8c:	2000c7c4 	.word	0x2000c7c4
 800fd90:	2000c7bc 	.word	0x2000c7bc
 800fd94:	2000c7c0 	.word	0x2000c7c0
 800fd98:	0801b1bc 	.word	0x0801b1bc
 800fd9c:	0801b358 	.word	0x0801b358
 800fda0:	0801b228 	.word	0x0801b228
 800fda4:	0801b374 	.word	0x0801b374
 800fda8:	0801b3a4 	.word	0x0801b3a4
 800fdac:	0801b3d4 	.word	0x0801b3d4

0800fdb0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b085      	sub	sp, #20
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	3303      	adds	r3, #3
 800fdc6:	f023 0303 	bic.w	r3, r3, #3
 800fdca:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fdcc:	2300      	movs	r3, #0
 800fdce:	60fb      	str	r3, [r7, #12]
 800fdd0:	e011      	b.n	800fdf6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	68ba      	ldr	r2, [r7, #8]
 800fde2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	881b      	ldrh	r3, [r3, #0]
 800fde8:	461a      	mov	r2, r3
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	4413      	add	r3, r2
 800fdee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	60fb      	str	r3, [r7, #12]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	885b      	ldrh	r3, [r3, #2]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	dbe7      	blt.n	800fdd2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fe02:	bf00      	nop
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
	...

0800fe10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fe16:	2300      	movs	r3, #0
 800fe18:	80fb      	strh	r3, [r7, #6]
 800fe1a:	e009      	b.n	800fe30 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fe1c:	88fb      	ldrh	r3, [r7, #6]
 800fe1e:	4a08      	ldr	r2, [pc, #32]	; (800fe40 <memp_init+0x30>)
 800fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff ffc3 	bl	800fdb0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fe2a:	88fb      	ldrh	r3, [r7, #6]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	80fb      	strh	r3, [r7, #6]
 800fe30:	88fb      	ldrh	r3, [r7, #6]
 800fe32:	2b0c      	cmp	r3, #12
 800fe34:	d9f2      	bls.n	800fe1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fe36:	bf00      	nop
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	0801d0dc 	.word	0x0801d0dc

0800fe44 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fe4c:	f009 fad4 	bl	80193f8 <sys_arch_protect>
 800fe50:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d015      	beq.n	800fe8c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	6812      	ldr	r2, [r2, #0]
 800fe68:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	f003 0303 	and.w	r3, r3, #3
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d006      	beq.n	800fe82 <do_memp_malloc_pool+0x3e>
 800fe74:	4b09      	ldr	r3, [pc, #36]	; (800fe9c <do_memp_malloc_pool+0x58>)
 800fe76:	f240 1249 	movw	r2, #329	; 0x149
 800fe7a:	4909      	ldr	r1, [pc, #36]	; (800fea0 <do_memp_malloc_pool+0x5c>)
 800fe7c:	4809      	ldr	r0, [pc, #36]	; (800fea4 <do_memp_malloc_pool+0x60>)
 800fe7e:	f009 fb1f 	bl	80194c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f009 fac6 	bl	8019414 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	e003      	b.n	800fe94 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800fe8c:	68f8      	ldr	r0, [r7, #12]
 800fe8e:	f009 fac1 	bl	8019414 <sys_arch_unprotect>
  return NULL;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	0801b3f8 	.word	0x0801b3f8
 800fea0:	0801b44c 	.word	0x0801b44c
 800fea4:	0801b470 	.word	0x0801b470

0800fea8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <memp_malloc_pool+0x1c>
 800feb6:	4b0a      	ldr	r3, [pc, #40]	; (800fee0 <memp_malloc_pool+0x38>)
 800feb8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800febc:	4909      	ldr	r1, [pc, #36]	; (800fee4 <memp_malloc_pool+0x3c>)
 800febe:	480a      	ldr	r0, [pc, #40]	; (800fee8 <memp_malloc_pool+0x40>)
 800fec0:	f009 fafe 	bl	80194c0 <iprintf>
  if (desc == NULL) {
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d101      	bne.n	800fece <memp_malloc_pool+0x26>
    return NULL;
 800feca:	2300      	movs	r3, #0
 800fecc:	e003      	b.n	800fed6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff ffb8 	bl	800fe44 <do_memp_malloc_pool>
 800fed4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	0801b3f8 	.word	0x0801b3f8
 800fee4:	0801b498 	.word	0x0801b498
 800fee8:	0801b470 	.word	0x0801b470

0800feec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	4603      	mov	r3, r0
 800fef4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fef6:	79fb      	ldrb	r3, [r7, #7]
 800fef8:	2b0c      	cmp	r3, #12
 800fefa:	d908      	bls.n	800ff0e <memp_malloc+0x22>
 800fefc:	4b0a      	ldr	r3, [pc, #40]	; (800ff28 <memp_malloc+0x3c>)
 800fefe:	f240 1287 	movw	r2, #391	; 0x187
 800ff02:	490a      	ldr	r1, [pc, #40]	; (800ff2c <memp_malloc+0x40>)
 800ff04:	480a      	ldr	r0, [pc, #40]	; (800ff30 <memp_malloc+0x44>)
 800ff06:	f009 fadb 	bl	80194c0 <iprintf>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	e008      	b.n	800ff20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	4a08      	ldr	r2, [pc, #32]	; (800ff34 <memp_malloc+0x48>)
 800ff12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7ff ff94 	bl	800fe44 <do_memp_malloc_pool>
 800ff1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	0801b3f8 	.word	0x0801b3f8
 800ff2c:	0801b4ac 	.word	0x0801b4ac
 800ff30:	0801b470 	.word	0x0801b470
 800ff34:	0801d0dc 	.word	0x0801d0dc

0800ff38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	f003 0303 	and.w	r3, r3, #3
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d006      	beq.n	800ff5a <do_memp_free_pool+0x22>
 800ff4c:	4b0d      	ldr	r3, [pc, #52]	; (800ff84 <do_memp_free_pool+0x4c>)
 800ff4e:	f240 129d 	movw	r2, #413	; 0x19d
 800ff52:	490d      	ldr	r1, [pc, #52]	; (800ff88 <do_memp_free_pool+0x50>)
 800ff54:	480d      	ldr	r0, [pc, #52]	; (800ff8c <do_memp_free_pool+0x54>)
 800ff56:	f009 fab3 	bl	80194c0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ff5e:	f009 fa4b 	bl	80193f8 <sys_arch_protect>
 800ff62:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ff76:	68b8      	ldr	r0, [r7, #8]
 800ff78:	f009 fa4c 	bl	8019414 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ff7c:	bf00      	nop
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	0801b3f8 	.word	0x0801b3f8
 800ff88:	0801b4cc 	.word	0x0801b4cc
 800ff8c:	0801b470 	.word	0x0801b470

0800ff90 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d106      	bne.n	800ffae <memp_free_pool+0x1e>
 800ffa0:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <memp_free_pool+0x3c>)
 800ffa2:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800ffa6:	490a      	ldr	r1, [pc, #40]	; (800ffd0 <memp_free_pool+0x40>)
 800ffa8:	480a      	ldr	r0, [pc, #40]	; (800ffd4 <memp_free_pool+0x44>)
 800ffaa:	f009 fa89 	bl	80194c0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d007      	beq.n	800ffc4 <memp_free_pool+0x34>
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d004      	beq.n	800ffc4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ffba:	6839      	ldr	r1, [r7, #0]
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff ffbb 	bl	800ff38 <do_memp_free_pool>
 800ffc2:	e000      	b.n	800ffc6 <memp_free_pool+0x36>
    return;
 800ffc4:	bf00      	nop
}
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	0801b3f8 	.word	0x0801b3f8
 800ffd0:	0801b498 	.word	0x0801b498
 800ffd4:	0801b470 	.word	0x0801b470

0800ffd8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	6039      	str	r1, [r7, #0]
 800ffe2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ffe4:	79fb      	ldrb	r3, [r7, #7]
 800ffe6:	2b0c      	cmp	r3, #12
 800ffe8:	d907      	bls.n	800fffa <memp_free+0x22>
 800ffea:	4b0c      	ldr	r3, [pc, #48]	; (801001c <memp_free+0x44>)
 800ffec:	f240 12db 	movw	r2, #475	; 0x1db
 800fff0:	490b      	ldr	r1, [pc, #44]	; (8010020 <memp_free+0x48>)
 800fff2:	480c      	ldr	r0, [pc, #48]	; (8010024 <memp_free+0x4c>)
 800fff4:	f009 fa64 	bl	80194c0 <iprintf>
 800fff8:	e00c      	b.n	8010014 <memp_free+0x3c>

  if (mem == NULL) {
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d008      	beq.n	8010012 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	4a09      	ldr	r2, [pc, #36]	; (8010028 <memp_free+0x50>)
 8010004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	4618      	mov	r0, r3
 801000c:	f7ff ff94 	bl	800ff38 <do_memp_free_pool>
 8010010:	e000      	b.n	8010014 <memp_free+0x3c>
    return;
 8010012:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	0801b3f8 	.word	0x0801b3f8
 8010020:	0801b4ec 	.word	0x0801b4ec
 8010024:	0801b470 	.word	0x0801b470
 8010028:	0801d0dc 	.word	0x0801d0dc

0801002c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010030:	bf00      	nop
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
	...

0801003c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
 8010048:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d105      	bne.n	801005c <netif_add+0x20>
 8010050:	4b1f      	ldr	r3, [pc, #124]	; (80100d0 <netif_add+0x94>)
 8010052:	22fb      	movs	r2, #251	; 0xfb
 8010054:	491f      	ldr	r1, [pc, #124]	; (80100d4 <netif_add+0x98>)
 8010056:	4820      	ldr	r0, [pc, #128]	; (80100d8 <netif_add+0x9c>)
 8010058:	f009 fa32 	bl	80194c0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2200      	movs	r2, #0
 8010060:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2200      	movs	r2, #0
 8010072:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2203      	movs	r2, #3
 801007a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8010084:	4b15      	ldr	r3, [pc, #84]	; (80100dc <netif_add+0xa0>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	b2d1      	uxtb	r1, r2
 801008c:	4a13      	ldr	r2, [pc, #76]	; (80100dc <netif_add+0xa0>)
 801008e:	7011      	strb	r1, [r2, #0]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6a3a      	ldr	r2, [r7, #32]
 801009a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	68b9      	ldr	r1, [r7, #8]
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f000 f81e 	bl	80100e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	4798      	blx	r3
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d001      	beq.n	80100b8 <netif_add+0x7c>
    return NULL;
 80100b4:	2300      	movs	r3, #0
 80100b6:	e007      	b.n	80100c8 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80100b8:	4b09      	ldr	r3, [pc, #36]	; (80100e0 <netif_add+0xa4>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80100c0:	4a07      	ldr	r2, [pc, #28]	; (80100e0 <netif_add+0xa4>)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80100c6:	68fb      	ldr	r3, [r7, #12]
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3710      	adds	r7, #16
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	0801b508 	.word	0x0801b508
 80100d4:	0801b55c 	.word	0x0801b55c
 80100d8:	0801b574 	.word	0x0801b574
 80100dc:	2000c800 	.word	0x2000c800
 80100e0:	200101bc 	.word	0x200101bc

080100e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
 80100f0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d003      	beq.n	8010100 <netif_set_addr+0x1c>
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10c      	bne.n	801011a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8010100:	68b9      	ldr	r1, [r7, #8]
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f000 f81a 	bl	801013c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	68f8      	ldr	r0, [r7, #12]
 801010c:	f000 f862 	bl	80101d4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010110:	6839      	ldr	r1, [r7, #0]
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f000 f84a 	bl	80101ac <netif_set_gw>
 8010118:	e00b      	b.n	8010132 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f000 f859 	bl	80101d4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f000 f841 	bl	80101ac <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801012a:	68b9      	ldr	r1, [r7, #8]
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f000 f805 	bl	801013c <netif_set_ipaddr>
  }
}
 8010132:	bf00      	nop
 8010134:	3710      	adds	r7, #16
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
	...

0801013c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d003      	beq.n	8010154 <netif_set_ipaddr+0x18>
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
 8010152:	e002      	b.n	801015a <netif_set_ipaddr+0x1e>
 8010154:	4b14      	ldr	r3, [pc, #80]	; (80101a8 <netif_set_ipaddr+0x6c>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	3304      	adds	r3, #4
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	429a      	cmp	r2, r3
 8010164:	d01c      	beq.n	80101a0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	3304      	adds	r3, #4
 801016a:	f107 020c 	add.w	r2, r7, #12
 801016e:	4611      	mov	r1, r2
 8010170:	4618      	mov	r0, r3
 8010172:	f002 fb53 	bl	801281c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3304      	adds	r3, #4
 801017a:	f107 020c 	add.w	r2, r7, #12
 801017e:	4611      	mov	r1, r2
 8010180:	4618      	mov	r0, r3
 8010182:	f006 fd27 	bl	8016bd4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <netif_set_ipaddr+0x56>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	e000      	b.n	8010194 <netif_set_ipaddr+0x58>
 8010192:	2300      	movs	r3, #0
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010198:	2101      	movs	r1, #1
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f861 	bl	8010262 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80101a0:	bf00      	nop
 80101a2:	3710      	adds	r7, #16
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0801d150 	.word	0x0801d150

080101ac <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d002      	beq.n	80101c2 <netif_set_gw+0x16>
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	e000      	b.n	80101c4 <netif_set_gw+0x18>
 80101c2:	2300      	movs	r3, #0
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d002      	beq.n	80101ea <netif_set_netmask+0x16>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	e000      	b.n	80101ec <netif_set_netmask+0x18>
 80101ea:	2300      	movs	r3, #0
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010204:	4a04      	ldr	r2, [pc, #16]	; (8010218 <netif_set_default+0x1c>)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801020a:	bf00      	nop
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	200101c0 	.word	0x200101c0

0801021c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	2b00      	cmp	r3, #0
 8010230:	d113      	bne.n	801025a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010238:	f043 0301 	orr.w	r3, r3, #1
 801023c:	b2da      	uxtb	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801024a:	f003 0304 	and.w	r3, r3, #4
 801024e:	2b00      	cmp	r3, #0
 8010250:	d003      	beq.n	801025a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8010252:	2103      	movs	r1, #3
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f804 	bl	8010262 <netif_issue_reports>
    }
  }
}
 801025a:	bf00      	nop
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b082      	sub	sp, #8
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	460b      	mov	r3, r1
 801026c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801026e:	78fb      	ldrb	r3, [r7, #3]
 8010270:	f003 0301 	and.w	r3, r3, #1
 8010274:	2b00      	cmp	r3, #0
 8010276:	d011      	beq.n	801029c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3304      	adds	r3, #4
 801027c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00c      	beq.n	801029c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010288:	f003 0308 	and.w	r3, r3, #8
 801028c:	2b00      	cmp	r3, #0
 801028e:	d005      	beq.n	801029c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3304      	adds	r3, #4
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f007 fbd0 	bl	8017a3c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801029c:	bf00      	nop
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102b2:	f003 0301 	and.w	r3, r3, #1
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d012      	beq.n	80102e0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102c0:	f023 0301 	bic.w	r3, r3, #1
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102d2:	f003 0308 	and.w	r3, r3, #8
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d002      	beq.n	80102e0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f006 ff74 	bl	80171c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80102e0:	bf00      	nop
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102f6:	f003 0304 	and.w	r3, r3, #4
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d113      	bne.n	8010326 <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010304:	f043 0304 	orr.w	r3, r3, #4
 8010308:	b2da      	uxtb	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	2b00      	cmp	r3, #0
 801031c:	d003      	beq.n	8010326 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801031e:	2103      	movs	r1, #3
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff ff9e 	bl	8010262 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 8010326:	bf00      	nop
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	2b00      	cmp	r3, #0
 8010342:	d008      	beq.n	8010356 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801034a:	f023 0304 	bic.w	r3, r3, #4
 801034e:	b2da      	uxtb	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 8010356:	bf00      	nop
 8010358:	370c      	adds	r7, #12
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
	...

08010364 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801036a:	f009 f845 	bl	80193f8 <sys_arch_protect>
 801036e:	6038      	str	r0, [r7, #0]
 8010370:	4b0f      	ldr	r3, [pc, #60]	; (80103b0 <pbuf_free_ooseq+0x4c>)
 8010372:	2200      	movs	r2, #0
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	6838      	ldr	r0, [r7, #0]
 8010378:	f009 f84c 	bl	8019414 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801037c:	4b0d      	ldr	r3, [pc, #52]	; (80103b4 <pbuf_free_ooseq+0x50>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	607b      	str	r3, [r7, #4]
 8010382:	e00f      	b.n	80103a4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010388:	2b00      	cmp	r3, #0
 801038a:	d008      	beq.n	801039e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010390:	4618      	mov	r0, r3
 8010392:	f001 febe 	bl	8012112 <tcp_segs_free>
      pcb->ooseq = NULL;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 801039c:	e005      	b.n	80103aa <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	607b      	str	r3, [r7, #4]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1ec      	bne.n	8010384 <pbuf_free_ooseq+0x20>
    }
  }
}
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	200101c4 	.word	0x200101c4
 80103b4:	200101cc 	.word	0x200101cc

080103b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80103c0:	f7ff ffd0 	bl	8010364 <pbuf_free_ooseq>
}
 80103c4:	bf00      	nop
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80103d2:	f009 f811 	bl	80193f8 <sys_arch_protect>
 80103d6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80103d8:	4b10      	ldr	r3, [pc, #64]	; (801041c <pbuf_pool_is_empty+0x50>)
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80103de:	4b0f      	ldr	r3, [pc, #60]	; (801041c <pbuf_pool_is_empty+0x50>)
 80103e0:	2201      	movs	r2, #1
 80103e2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f009 f815 	bl	8019414 <sys_arch_unprotect>

  if (!queued) {
 80103ea:	78fb      	ldrb	r3, [r7, #3]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d110      	bne.n	8010412 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80103f0:	2200      	movs	r2, #0
 80103f2:	2100      	movs	r1, #0
 80103f4:	480a      	ldr	r0, [pc, #40]	; (8010420 <pbuf_pool_is_empty+0x54>)
 80103f6:	f7ff f8c3 	bl	800f580 <tcpip_callback_with_block>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d008      	beq.n	8010412 <pbuf_pool_is_empty+0x46>
 8010400:	f008 fffa 	bl	80193f8 <sys_arch_protect>
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	4b05      	ldr	r3, [pc, #20]	; (801041c <pbuf_pool_is_empty+0x50>)
 8010408:	2200      	movs	r2, #0
 801040a:	701a      	strb	r2, [r3, #0]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f009 f801 	bl	8019414 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010412:	bf00      	nop
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	200101c4 	.word	0x200101c4
 8010420:	080103b9 	.word	0x080103b9

08010424 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af00      	add	r7, sp, #0
 801042a:	4603      	mov	r3, r0
 801042c:	71fb      	strb	r3, [r7, #7]
 801042e:	460b      	mov	r3, r1
 8010430:	80bb      	strh	r3, [r7, #4]
 8010432:	4613      	mov	r3, r2
 8010434:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	2b04      	cmp	r3, #4
 801043a:	d81c      	bhi.n	8010476 <pbuf_alloc+0x52>
 801043c:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <pbuf_alloc+0x20>)
 801043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010442:	bf00      	nop
 8010444:	08010459 	.word	0x08010459
 8010448:	0801045f 	.word	0x0801045f
 801044c:	08010465 	.word	0x08010465
 8010450:	0801046b 	.word	0x0801046b
 8010454:	08010471 	.word	0x08010471
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010458:	2336      	movs	r3, #54	; 0x36
 801045a:	82fb      	strh	r3, [r7, #22]
    break;
 801045c:	e014      	b.n	8010488 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801045e:	2322      	movs	r3, #34	; 0x22
 8010460:	82fb      	strh	r3, [r7, #22]
    break;
 8010462:	e011      	b.n	8010488 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010464:	230e      	movs	r3, #14
 8010466:	82fb      	strh	r3, [r7, #22]
    break;
 8010468:	e00e      	b.n	8010488 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801046a:	2300      	movs	r3, #0
 801046c:	82fb      	strh	r3, [r7, #22]
    break;
 801046e:	e00b      	b.n	8010488 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	82fb      	strh	r3, [r7, #22]
    break;
 8010474:	e008      	b.n	8010488 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8010476:	4ba5      	ldr	r3, [pc, #660]	; (801070c <pbuf_alloc+0x2e8>)
 8010478:	f44f 728b 	mov.w	r2, #278	; 0x116
 801047c:	49a4      	ldr	r1, [pc, #656]	; (8010710 <pbuf_alloc+0x2ec>)
 801047e:	48a5      	ldr	r0, [pc, #660]	; (8010714 <pbuf_alloc+0x2f0>)
 8010480:	f009 f81e 	bl	80194c0 <iprintf>
    return NULL;
 8010484:	2300      	movs	r3, #0
 8010486:	e15d      	b.n	8010744 <pbuf_alloc+0x320>
  }

  switch (type) {
 8010488:	79bb      	ldrb	r3, [r7, #6]
 801048a:	2b03      	cmp	r3, #3
 801048c:	f200 8134 	bhi.w	80106f8 <pbuf_alloc+0x2d4>
 8010490:	a201      	add	r2, pc, #4	; (adr r2, 8010498 <pbuf_alloc+0x74>)
 8010492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010496:	bf00      	nop
 8010498:	08010639 	.word	0x08010639
 801049c:	080106c5 	.word	0x080106c5
 80104a0:	080106c5 	.word	0x080106c5
 80104a4:	080104a9 	.word	0x080104a9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80104a8:	200c      	movs	r0, #12
 80104aa:	f7ff fd1f 	bl	800feec <memp_malloc>
 80104ae:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d103      	bne.n	80104be <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80104b6:	f7ff ff89 	bl	80103cc <pbuf_pool_is_empty>
      return NULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	e142      	b.n	8010744 <pbuf_alloc+0x320>
    }
    p->type = type;
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	79ba      	ldrb	r2, [r7, #6]
 80104c2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	2200      	movs	r2, #0
 80104c8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80104ca:	8afb      	ldrh	r3, [r7, #22]
 80104cc:	3310      	adds	r3, #16
 80104ce:	69fa      	ldr	r2, [r7, #28]
 80104d0:	4413      	add	r3, r2
 80104d2:	3303      	adds	r3, #3
 80104d4:	f023 0303 	bic.w	r3, r3, #3
 80104d8:	461a      	mov	r2, r3
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f003 0303 	and.w	r3, r3, #3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d006      	beq.n	80104f8 <pbuf_alloc+0xd4>
 80104ea:	4b88      	ldr	r3, [pc, #544]	; (801070c <pbuf_alloc+0x2e8>)
 80104ec:	f240 1229 	movw	r2, #297	; 0x129
 80104f0:	4989      	ldr	r1, [pc, #548]	; (8010718 <pbuf_alloc+0x2f4>)
 80104f2:	4888      	ldr	r0, [pc, #544]	; (8010714 <pbuf_alloc+0x2f0>)
 80104f4:	f008 ffe4 	bl	80194c0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	88ba      	ldrh	r2, [r7, #4]
 80104fc:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80104fe:	8afb      	ldrh	r3, [r7, #22]
 8010500:	3303      	adds	r3, #3
 8010502:	f023 0303 	bic.w	r3, r3, #3
 8010506:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 801050a:	88bb      	ldrh	r3, [r7, #4]
 801050c:	4293      	cmp	r3, r2
 801050e:	bf28      	it	cs
 8010510:	4613      	movcs	r3, r2
 8010512:	b29a      	uxth	r2, r3
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	69fa      	ldr	r2, [r7, #28]
 801051e:	8952      	ldrh	r2, [r2, #10]
 8010520:	441a      	add	r2, r3
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010528:	429a      	cmp	r2, r3
 801052a:	d906      	bls.n	801053a <pbuf_alloc+0x116>
 801052c:	4b77      	ldr	r3, [pc, #476]	; (801070c <pbuf_alloc+0x2e8>)
 801052e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8010532:	497a      	ldr	r1, [pc, #488]	; (801071c <pbuf_alloc+0x2f8>)
 8010534:	4877      	ldr	r0, [pc, #476]	; (8010714 <pbuf_alloc+0x2f0>)
 8010536:	f008 ffc3 	bl	80194c0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801053a:	8afb      	ldrh	r3, [r7, #22]
 801053c:	3303      	adds	r3, #3
 801053e:	f023 0303 	bic.w	r3, r3, #3
 8010542:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010546:	d106      	bne.n	8010556 <pbuf_alloc+0x132>
 8010548:	4b70      	ldr	r3, [pc, #448]	; (801070c <pbuf_alloc+0x2e8>)
 801054a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801054e:	4974      	ldr	r1, [pc, #464]	; (8010720 <pbuf_alloc+0x2fc>)
 8010550:	4870      	ldr	r0, [pc, #448]	; (8010714 <pbuf_alloc+0x2f0>)
 8010552:	f008 ffb5 	bl	80194c0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	2201      	movs	r2, #1
 801055a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8010560:	88bb      	ldrh	r3, [r7, #4]
 8010562:	69fa      	ldr	r2, [r7, #28]
 8010564:	8952      	ldrh	r2, [r2, #10]
 8010566:	1a9b      	subs	r3, r3, r2
 8010568:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801056a:	e061      	b.n	8010630 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801056c:	200c      	movs	r0, #12
 801056e:	f7ff fcbd 	bl	800feec <memp_malloc>
 8010572:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d106      	bne.n	8010588 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801057a:	f7ff ff27 	bl	80103cc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801057e:	69f8      	ldr	r0, [r7, #28]
 8010580:	f000 fac2 	bl	8010b08 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8010584:	2300      	movs	r3, #0
 8010586:	e0dd      	b.n	8010744 <pbuf_alloc+0x320>
      }
      q->type = type;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	79ba      	ldrb	r2, [r7, #6]
 801058c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2200      	movs	r2, #0
 8010592:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2200      	movs	r2, #0
 8010598:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80105a6:	4293      	cmp	r3, r2
 80105a8:	dd06      	ble.n	80105b8 <pbuf_alloc+0x194>
 80105aa:	4b58      	ldr	r3, [pc, #352]	; (801070c <pbuf_alloc+0x2e8>)
 80105ac:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80105b0:	495c      	ldr	r1, [pc, #368]	; (8010724 <pbuf_alloc+0x300>)
 80105b2:	4858      	ldr	r0, [pc, #352]	; (8010714 <pbuf_alloc+0x2f0>)
 80105b4:	f008 ff84 	bl	80194c0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80105c8:	bf28      	it	cs
 80105ca:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f103 0210 	add.w	r2, r3, #16
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	f003 0303 	and.w	r3, r3, #3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d006      	beq.n	80105f8 <pbuf_alloc+0x1d4>
 80105ea:	4b48      	ldr	r3, [pc, #288]	; (801070c <pbuf_alloc+0x2e8>)
 80105ec:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80105f0:	494d      	ldr	r1, [pc, #308]	; (8010728 <pbuf_alloc+0x304>)
 80105f2:	4848      	ldr	r0, [pc, #288]	; (8010714 <pbuf_alloc+0x2f0>)
 80105f4:	f008 ff64 	bl	80194c0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	69fa      	ldr	r2, [r7, #28]
 80105fe:	8952      	ldrh	r2, [r2, #10]
 8010600:	441a      	add	r2, r3
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010608:	429a      	cmp	r2, r3
 801060a:	d906      	bls.n	801061a <pbuf_alloc+0x1f6>
 801060c:	4b3f      	ldr	r3, [pc, #252]	; (801070c <pbuf_alloc+0x2e8>)
 801060e:	f240 1255 	movw	r2, #341	; 0x155
 8010612:	4942      	ldr	r1, [pc, #264]	; (801071c <pbuf_alloc+0x2f8>)
 8010614:	483f      	ldr	r0, [pc, #252]	; (8010714 <pbuf_alloc+0x2f0>)
 8010616:	f008 ff53 	bl	80194c0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2201      	movs	r2, #1
 801061e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	895b      	ldrh	r3, [r3, #10]
 8010624:	461a      	mov	r2, r3
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	1a9b      	subs	r3, r3, r2
 801062a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	2b00      	cmp	r3, #0
 8010634:	dc9a      	bgt.n	801056c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8010636:	e07e      	b.n	8010736 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8010638:	8afb      	ldrh	r3, [r7, #22]
 801063a:	3313      	adds	r3, #19
 801063c:	b29b      	uxth	r3, r3
 801063e:	f023 0303 	bic.w	r3, r3, #3
 8010642:	b29a      	uxth	r2, r3
 8010644:	88bb      	ldrh	r3, [r7, #4]
 8010646:	3303      	adds	r3, #3
 8010648:	b29b      	uxth	r3, r3
 801064a:	f023 0303 	bic.w	r3, r3, #3
 801064e:	b29b      	uxth	r3, r3
 8010650:	4413      	add	r3, r2
 8010652:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8010654:	897a      	ldrh	r2, [r7, #10]
 8010656:	88bb      	ldrh	r3, [r7, #4]
 8010658:	3303      	adds	r3, #3
 801065a:	f023 0303 	bic.w	r3, r3, #3
 801065e:	429a      	cmp	r2, r3
 8010660:	d201      	bcs.n	8010666 <pbuf_alloc+0x242>
        return NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	e06e      	b.n	8010744 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8010666:	897b      	ldrh	r3, [r7, #10]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff faad 	bl	800fbc8 <mem_malloc>
 801066e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d101      	bne.n	801067a <pbuf_alloc+0x256>
      return NULL;
 8010676:	2300      	movs	r3, #0
 8010678:	e064      	b.n	8010744 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801067a:	8afb      	ldrh	r3, [r7, #22]
 801067c:	3310      	adds	r3, #16
 801067e:	69fa      	ldr	r2, [r7, #28]
 8010680:	4413      	add	r3, r2
 8010682:	3303      	adds	r3, #3
 8010684:	f023 0303 	bic.w	r3, r3, #3
 8010688:	461a      	mov	r2, r3
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	88ba      	ldrh	r2, [r7, #4]
 8010692:	811a      	strh	r2, [r3, #8]
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	891a      	ldrh	r2, [r3, #8]
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	2200      	movs	r2, #0
 80106a0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	79ba      	ldrb	r2, [r7, #6]
 80106a6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	f003 0303 	and.w	r3, r3, #3
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d03f      	beq.n	8010734 <pbuf_alloc+0x310>
 80106b4:	4b15      	ldr	r3, [pc, #84]	; (801070c <pbuf_alloc+0x2e8>)
 80106b6:	f240 1277 	movw	r2, #375	; 0x177
 80106ba:	491c      	ldr	r1, [pc, #112]	; (801072c <pbuf_alloc+0x308>)
 80106bc:	4815      	ldr	r0, [pc, #84]	; (8010714 <pbuf_alloc+0x2f0>)
 80106be:	f008 feff 	bl	80194c0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80106c2:	e037      	b.n	8010734 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80106c4:	200b      	movs	r0, #11
 80106c6:	f7ff fc11 	bl	800feec <memp_malloc>
 80106ca:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	e036      	b.n	8010744 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	2200      	movs	r2, #0
 80106da:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	88ba      	ldrh	r2, [r7, #4]
 80106e0:	811a      	strh	r2, [r3, #8]
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	891a      	ldrh	r2, [r3, #8]
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	2200      	movs	r2, #0
 80106ee:	601a      	str	r2, [r3, #0]
    p->type = type;
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	79ba      	ldrb	r2, [r7, #6]
 80106f4:	731a      	strb	r2, [r3, #12]
    break;
 80106f6:	e01e      	b.n	8010736 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80106f8:	4b04      	ldr	r3, [pc, #16]	; (801070c <pbuf_alloc+0x2e8>)
 80106fa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80106fe:	490c      	ldr	r1, [pc, #48]	; (8010730 <pbuf_alloc+0x30c>)
 8010700:	4804      	ldr	r0, [pc, #16]	; (8010714 <pbuf_alloc+0x2f0>)
 8010702:	f008 fedd 	bl	80194c0 <iprintf>
    return NULL;
 8010706:	2300      	movs	r3, #0
 8010708:	e01c      	b.n	8010744 <pbuf_alloc+0x320>
 801070a:	bf00      	nop
 801070c:	0801b59c 	.word	0x0801b59c
 8010710:	0801b5f0 	.word	0x0801b5f0
 8010714:	0801b60c 	.word	0x0801b60c
 8010718:	0801b634 	.word	0x0801b634
 801071c:	0801b664 	.word	0x0801b664
 8010720:	0801b698 	.word	0x0801b698
 8010724:	0801b6cc 	.word	0x0801b6cc
 8010728:	0801b6e0 	.word	0x0801b6e0
 801072c:	0801b710 	.word	0x0801b710
 8010730:	0801b73c 	.word	0x0801b73c
    break;
 8010734:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	2201      	movs	r2, #1
 801073a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	2200      	movs	r2, #0
 8010740:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010742:	69fb      	ldr	r3, [r7, #28]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3720      	adds	r7, #32
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	4603      	mov	r3, r0
 8010756:	71fb      	strb	r3, [r7, #7]
 8010758:	460b      	mov	r3, r1
 801075a:	80bb      	strh	r3, [r7, #4]
 801075c:	4613      	mov	r3, r2
 801075e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010760:	79fb      	ldrb	r3, [r7, #7]
 8010762:	2b04      	cmp	r3, #4
 8010764:	d81b      	bhi.n	801079e <pbuf_alloced_custom+0x52>
 8010766:	a201      	add	r2, pc, #4	; (adr r2, 801076c <pbuf_alloced_custom+0x20>)
 8010768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076c:	08010781 	.word	0x08010781
 8010770:	08010787 	.word	0x08010787
 8010774:	0801078d 	.word	0x0801078d
 8010778:	08010793 	.word	0x08010793
 801077c:	08010799 	.word	0x08010799
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010780:	2336      	movs	r3, #54	; 0x36
 8010782:	81fb      	strh	r3, [r7, #14]
    break;
 8010784:	e014      	b.n	80107b0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010786:	2322      	movs	r3, #34	; 0x22
 8010788:	81fb      	strh	r3, [r7, #14]
    break;
 801078a:	e011      	b.n	80107b0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801078c:	230e      	movs	r3, #14
 801078e:	81fb      	strh	r3, [r7, #14]
    break;
 8010790:	e00e      	b.n	80107b0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010792:	2300      	movs	r3, #0
 8010794:	81fb      	strh	r3, [r7, #14]
    break;
 8010796:	e00b      	b.n	80107b0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8010798:	2300      	movs	r3, #0
 801079a:	81fb      	strh	r3, [r7, #14]
    break;
 801079c:	e008      	b.n	80107b0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801079e:	4b1d      	ldr	r3, [pc, #116]	; (8010814 <pbuf_alloced_custom+0xc8>)
 80107a0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80107a4:	491c      	ldr	r1, [pc, #112]	; (8010818 <pbuf_alloced_custom+0xcc>)
 80107a6:	481d      	ldr	r0, [pc, #116]	; (801081c <pbuf_alloced_custom+0xd0>)
 80107a8:	f008 fe8a 	bl	80194c0 <iprintf>
    return NULL;
 80107ac:	2300      	movs	r3, #0
 80107ae:	e02d      	b.n	801080c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80107b0:	89fb      	ldrh	r3, [r7, #14]
 80107b2:	3303      	adds	r3, #3
 80107b4:	f023 0203 	bic.w	r2, r3, #3
 80107b8:	88bb      	ldrh	r3, [r7, #4]
 80107ba:	441a      	add	r2, r3
 80107bc:	8bbb      	ldrh	r3, [r7, #28]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d901      	bls.n	80107c6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e022      	b.n	801080c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	2200      	movs	r2, #0
 80107ca:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d008      	beq.n	80107e4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80107d2:	89fb      	ldrh	r3, [r7, #14]
 80107d4:	3303      	adds	r3, #3
 80107d6:	f023 0303 	bic.w	r3, r3, #3
 80107da:	69ba      	ldr	r2, [r7, #24]
 80107dc:	441a      	add	r2, r3
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	605a      	str	r2, [r3, #4]
 80107e2:	e002      	b.n	80107ea <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	2202      	movs	r2, #2
 80107ee:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	88ba      	ldrh	r2, [r7, #4]
 80107f4:	811a      	strh	r2, [r3, #8]
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	891a      	ldrh	r2, [r3, #8]
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	79ba      	ldrb	r2, [r7, #6]
 8010802:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	2201      	movs	r2, #1
 8010808:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801080a:	683b      	ldr	r3, [r7, #0]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	0801b59c 	.word	0x0801b59c
 8010818:	0801b758 	.word	0x0801b758
 801081c:	0801b60c 	.word	0x0801b60c

08010820 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	460b      	mov	r3, r1
 801082a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <pbuf_realloc+0x20>
 8010832:	4b4b      	ldr	r3, [pc, #300]	; (8010960 <pbuf_realloc+0x140>)
 8010834:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010838:	494a      	ldr	r1, [pc, #296]	; (8010964 <pbuf_realloc+0x144>)
 801083a:	484b      	ldr	r0, [pc, #300]	; (8010968 <pbuf_realloc+0x148>)
 801083c:	f008 fe40 	bl	80194c0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	7b1b      	ldrb	r3, [r3, #12]
 8010844:	2b03      	cmp	r3, #3
 8010846:	d012      	beq.n	801086e <pbuf_realloc+0x4e>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	7b1b      	ldrb	r3, [r3, #12]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d00e      	beq.n	801086e <pbuf_realloc+0x4e>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	7b1b      	ldrb	r3, [r3, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00a      	beq.n	801086e <pbuf_realloc+0x4e>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	7b1b      	ldrb	r3, [r3, #12]
 801085c:	2b02      	cmp	r3, #2
 801085e:	d006      	beq.n	801086e <pbuf_realloc+0x4e>
 8010860:	4b3f      	ldr	r3, [pc, #252]	; (8010960 <pbuf_realloc+0x140>)
 8010862:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010866:	4941      	ldr	r1, [pc, #260]	; (801096c <pbuf_realloc+0x14c>)
 8010868:	483f      	ldr	r0, [pc, #252]	; (8010968 <pbuf_realloc+0x148>)
 801086a:	f008 fe29 	bl	80194c0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	891b      	ldrh	r3, [r3, #8]
 8010872:	887a      	ldrh	r2, [r7, #2]
 8010874:	429a      	cmp	r2, r3
 8010876:	d26f      	bcs.n	8010958 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010878:	887b      	ldrh	r3, [r7, #2]
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	8912      	ldrh	r2, [r2, #8]
 801087e:	1a9b      	subs	r3, r3, r2
 8010880:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010882:	887b      	ldrh	r3, [r7, #2]
 8010884:	827b      	strh	r3, [r7, #18]
  q = p;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801088a:	e025      	b.n	80108d8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	895b      	ldrh	r3, [r3, #10]
 8010890:	8a7a      	ldrh	r2, [r7, #18]
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801089c:	4293      	cmp	r3, r2
 801089e:	dd06      	ble.n	80108ae <pbuf_realloc+0x8e>
 80108a0:	4b2f      	ldr	r3, [pc, #188]	; (8010960 <pbuf_realloc+0x140>)
 80108a2:	f240 220b 	movw	r2, #523	; 0x20b
 80108a6:	4932      	ldr	r1, [pc, #200]	; (8010970 <pbuf_realloc+0x150>)
 80108a8:	482f      	ldr	r0, [pc, #188]	; (8010968 <pbuf_realloc+0x148>)
 80108aa:	f008 fe09 	bl	80194c0 <iprintf>
    q->tot_len += (u16_t)grow;
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	891a      	ldrh	r2, [r3, #8]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	4413      	add	r3, r2
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d106      	bne.n	80108d8 <pbuf_realloc+0xb8>
 80108ca:	4b25      	ldr	r3, [pc, #148]	; (8010960 <pbuf_realloc+0x140>)
 80108cc:	f240 220f 	movw	r2, #527	; 0x20f
 80108d0:	4928      	ldr	r1, [pc, #160]	; (8010974 <pbuf_realloc+0x154>)
 80108d2:	4825      	ldr	r0, [pc, #148]	; (8010968 <pbuf_realloc+0x148>)
 80108d4:	f008 fdf4 	bl	80194c0 <iprintf>
  while (rem_len > q->len) {
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	895b      	ldrh	r3, [r3, #10]
 80108dc:	8a7a      	ldrh	r2, [r7, #18]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d8d4      	bhi.n	801088c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	7b1b      	ldrb	r3, [r3, #12]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d122      	bne.n	8010930 <pbuf_realloc+0x110>
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	895b      	ldrh	r3, [r3, #10]
 80108ee:	8a7a      	ldrh	r2, [r7, #18]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d01d      	beq.n	8010930 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	7b5b      	ldrb	r3, [r3, #13]
 80108f8:	f003 0302 	and.w	r3, r3, #2
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d117      	bne.n	8010930 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	461a      	mov	r2, r3
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	b29a      	uxth	r2, r3
 801090c:	8a7b      	ldrh	r3, [r7, #18]
 801090e:	4413      	add	r3, r2
 8010910:	b29b      	uxth	r3, r3
 8010912:	4619      	mov	r1, r3
 8010914:	6978      	ldr	r0, [r7, #20]
 8010916:	f7ff f86d 	bl	800f9f4 <mem_trim>
 801091a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d106      	bne.n	8010930 <pbuf_realloc+0x110>
 8010922:	4b0f      	ldr	r3, [pc, #60]	; (8010960 <pbuf_realloc+0x140>)
 8010924:	f240 221d 	movw	r2, #541	; 0x21d
 8010928:	4913      	ldr	r1, [pc, #76]	; (8010978 <pbuf_realloc+0x158>)
 801092a:	480f      	ldr	r0, [pc, #60]	; (8010968 <pbuf_realloc+0x148>)
 801092c:	f008 fdc8 	bl	80194c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	8a7a      	ldrh	r2, [r7, #18]
 8010934:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	895a      	ldrh	r2, [r3, #10]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d004      	beq.n	8010950 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4618      	mov	r0, r3
 801094c:	f000 f8dc 	bl	8010b08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	2200      	movs	r2, #0
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	e000      	b.n	801095a <pbuf_realloc+0x13a>
    return;
 8010958:	bf00      	nop

}
 801095a:	3718      	adds	r7, #24
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}
 8010960:	0801b59c 	.word	0x0801b59c
 8010964:	0801b77c 	.word	0x0801b77c
 8010968:	0801b60c 	.word	0x0801b60c
 801096c:	0801b794 	.word	0x0801b794
 8010970:	0801b7b0 	.word	0x0801b7b0
 8010974:	0801b7c4 	.word	0x0801b7c4
 8010978:	0801b7dc 	.word	0x0801b7dc

0801097c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	460b      	mov	r3, r1
 8010986:	807b      	strh	r3, [r7, #2]
 8010988:	4613      	mov	r3, r2
 801098a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <pbuf_header_impl+0x24>
 8010992:	4b46      	ldr	r3, [pc, #280]	; (8010aac <pbuf_header_impl+0x130>)
 8010994:	f240 223f 	movw	r2, #575	; 0x23f
 8010998:	4945      	ldr	r1, [pc, #276]	; (8010ab0 <pbuf_header_impl+0x134>)
 801099a:	4846      	ldr	r0, [pc, #280]	; (8010ab4 <pbuf_header_impl+0x138>)
 801099c:	f008 fd90 	bl	80194c0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80109a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d002      	beq.n	80109ae <pbuf_header_impl+0x32>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d101      	bne.n	80109b2 <pbuf_header_impl+0x36>
    return 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	e078      	b.n	8010aa4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80109b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	da10      	bge.n	80109dc <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80109ba:	887b      	ldrh	r3, [r7, #2]
 80109bc:	425b      	negs	r3, r3
 80109be:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	895b      	ldrh	r3, [r3, #10]
 80109c4:	89fa      	ldrh	r2, [r7, #14]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d90a      	bls.n	80109e0 <pbuf_header_impl+0x64>
 80109ca:	4b38      	ldr	r3, [pc, #224]	; (8010aac <pbuf_header_impl+0x130>)
 80109cc:	f240 2247 	movw	r2, #583	; 0x247
 80109d0:	4939      	ldr	r1, [pc, #228]	; (8010ab8 <pbuf_header_impl+0x13c>)
 80109d2:	4838      	ldr	r0, [pc, #224]	; (8010ab4 <pbuf_header_impl+0x138>)
 80109d4:	f008 fd74 	bl	80194c0 <iprintf>
 80109d8:	2301      	movs	r3, #1
 80109da:	e063      	b.n	8010aa4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80109dc:	887b      	ldrh	r3, [r7, #2]
 80109de:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	7b1b      	ldrb	r3, [r3, #12]
 80109e4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80109ec:	89bb      	ldrh	r3, [r7, #12]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <pbuf_header_impl+0x7c>
 80109f2:	89bb      	ldrh	r3, [r7, #12]
 80109f4:	2b03      	cmp	r3, #3
 80109f6:	d112      	bne.n	8010a1e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685a      	ldr	r2, [r3, #4]
 80109fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a00:	425b      	negs	r3, r3
 8010a02:	441a      	add	r2, r3
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	3310      	adds	r3, #16
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d238      	bcs.n	8010a86 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	68ba      	ldr	r2, [r7, #8]
 8010a18:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e042      	b.n	8010aa4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8010a1e:	89bb      	ldrh	r3, [r7, #12]
 8010a20:	2b02      	cmp	r3, #2
 8010a22:	d002      	beq.n	8010a2a <pbuf_header_impl+0xae>
 8010a24:	89bb      	ldrh	r3, [r7, #12]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d124      	bne.n	8010a74 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010a2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	da0d      	bge.n	8010a4e <pbuf_header_impl+0xd2>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	895b      	ldrh	r3, [r3, #10]
 8010a36:	89fa      	ldrh	r2, [r7, #14]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d808      	bhi.n	8010a4e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	685a      	ldr	r2, [r3, #4]
 8010a40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a44:	425b      	negs	r3, r3
 8010a46:	441a      	add	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	605a      	str	r2, [r3, #4]
 8010a4c:	e011      	b.n	8010a72 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8010a4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	dd0b      	ble.n	8010a6e <pbuf_header_impl+0xf2>
 8010a56:	787b      	ldrb	r3, [r7, #1]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d008      	beq.n	8010a6e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a64:	425b      	negs	r3, r3
 8010a66:	441a      	add	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	605a      	str	r2, [r3, #4]
 8010a6c:	e001      	b.n	8010a72 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e018      	b.n	8010aa4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010a72:	e008      	b.n	8010a86 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010a74:	4b0d      	ldr	r3, [pc, #52]	; (8010aac <pbuf_header_impl+0x130>)
 8010a76:	f240 2277 	movw	r2, #631	; 0x277
 8010a7a:	4910      	ldr	r1, [pc, #64]	; (8010abc <pbuf_header_impl+0x140>)
 8010a7c:	480d      	ldr	r0, [pc, #52]	; (8010ab4 <pbuf_header_impl+0x138>)
 8010a7e:	f008 fd1f 	bl	80194c0 <iprintf>
    return 1;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e00e      	b.n	8010aa4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	895a      	ldrh	r2, [r3, #10]
 8010a8a:	887b      	ldrh	r3, [r7, #2]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	891a      	ldrh	r2, [r3, #8]
 8010a98:	887b      	ldrh	r3, [r7, #2]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010aa2:	2300      	movs	r3, #0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	0801b59c 	.word	0x0801b59c
 8010ab0:	0801b7f8 	.word	0x0801b7f8
 8010ab4:	0801b60c 	.word	0x0801b60c
 8010ab8:	0801b804 	.word	0x0801b804
 8010abc:	0801b824 	.word	0x0801b824

08010ac0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8010acc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff ff51 	bl	801097c <pbuf_header_impl>
 8010ada:	4603      	mov	r3, r0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	460b      	mov	r3, r1
 8010aee:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010af4:	2201      	movs	r2, #1
 8010af6:	4619      	mov	r1, r3
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7ff ff3f 	bl	801097c <pbuf_header_impl>
 8010afe:	4603      	mov	r3, r0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b088      	sub	sp, #32
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10b      	bne.n	8010b2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d106      	bne.n	8010b2a <pbuf_free+0x22>
 8010b1c:	4b41      	ldr	r3, [pc, #260]	; (8010c24 <pbuf_free+0x11c>)
 8010b1e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010b22:	4941      	ldr	r1, [pc, #260]	; (8010c28 <pbuf_free+0x120>)
 8010b24:	4841      	ldr	r0, [pc, #260]	; (8010c2c <pbuf_free+0x124>)
 8010b26:	f008 fccb 	bl	80194c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	e076      	b.n	8010c1c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	7b1b      	ldrb	r3, [r3, #12]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d012      	beq.n	8010b5c <pbuf_free+0x54>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	7b1b      	ldrb	r3, [r3, #12]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d00e      	beq.n	8010b5c <pbuf_free+0x54>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7b1b      	ldrb	r3, [r3, #12]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	d00a      	beq.n	8010b5c <pbuf_free+0x54>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	7b1b      	ldrb	r3, [r3, #12]
 8010b4a:	2b03      	cmp	r3, #3
 8010b4c:	d006      	beq.n	8010b5c <pbuf_free+0x54>
 8010b4e:	4b35      	ldr	r3, [pc, #212]	; (8010c24 <pbuf_free+0x11c>)
 8010b50:	f240 22de 	movw	r2, #734	; 0x2de
 8010b54:	4936      	ldr	r1, [pc, #216]	; (8010c30 <pbuf_free+0x128>)
 8010b56:	4835      	ldr	r0, [pc, #212]	; (8010c2c <pbuf_free+0x124>)
 8010b58:	f008 fcb2 	bl	80194c0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010b60:	e058      	b.n	8010c14 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010b62:	f008 fc49 	bl	80193f8 <sys_arch_protect>
 8010b66:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	89db      	ldrh	r3, [r3, #14]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d106      	bne.n	8010b7e <pbuf_free+0x76>
 8010b70:	4b2c      	ldr	r3, [pc, #176]	; (8010c24 <pbuf_free+0x11c>)
 8010b72:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010b76:	492f      	ldr	r1, [pc, #188]	; (8010c34 <pbuf_free+0x12c>)
 8010b78:	482c      	ldr	r0, [pc, #176]	; (8010c2c <pbuf_free+0x124>)
 8010b7a:	f008 fca1 	bl	80194c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	89db      	ldrh	r3, [r3, #14]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	b29a      	uxth	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	81da      	strh	r2, [r3, #14]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	89db      	ldrh	r3, [r3, #14]
 8010b8e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010b90:	69b8      	ldr	r0, [r7, #24]
 8010b92:	f008 fc3f 	bl	8019414 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010b96:	8afb      	ldrh	r3, [r7, #22]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d139      	bne.n	8010c10 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	7b1b      	ldrb	r3, [r3, #12]
 8010ba6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7b5b      	ldrb	r3, [r3, #13]
 8010bac:	f003 0302 	and.w	r3, r3, #2
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d011      	beq.n	8010bd8 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d106      	bne.n	8010bce <pbuf_free+0xc6>
 8010bc0:	4b18      	ldr	r3, [pc, #96]	; (8010c24 <pbuf_free+0x11c>)
 8010bc2:	f240 22f9 	movw	r2, #761	; 0x2f9
 8010bc6:	491c      	ldr	r1, [pc, #112]	; (8010c38 <pbuf_free+0x130>)
 8010bc8:	4818      	ldr	r0, [pc, #96]	; (8010c2c <pbuf_free+0x124>)
 8010bca:	f008 fc79 	bl	80194c0 <iprintf>
        pc->custom_free_function(p);
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	4798      	blx	r3
 8010bd6:	e015      	b.n	8010c04 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8010bd8:	89fb      	ldrh	r3, [r7, #14]
 8010bda:	2b03      	cmp	r3, #3
 8010bdc:	d104      	bne.n	8010be8 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8010bde:	6879      	ldr	r1, [r7, #4]
 8010be0:	200c      	movs	r0, #12
 8010be2:	f7ff f9f9 	bl	800ffd8 <memp_free>
 8010be6:	e00d      	b.n	8010c04 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8010be8:	89fb      	ldrh	r3, [r7, #14]
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d002      	beq.n	8010bf4 <pbuf_free+0xec>
 8010bee:	89fb      	ldrh	r3, [r7, #14]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d104      	bne.n	8010bfe <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010bf4:	6879      	ldr	r1, [r7, #4]
 8010bf6:	200b      	movs	r0, #11
 8010bf8:	f7ff f9ee 	bl	800ffd8 <memp_free>
 8010bfc:	e002      	b.n	8010c04 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7fe fe8a 	bl	800f918 <mem_free>
        }
      }
      count++;
 8010c04:	7ffb      	ldrb	r3, [r7, #31]
 8010c06:	3301      	adds	r3, #1
 8010c08:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	607b      	str	r3, [r7, #4]
 8010c0e:	e001      	b.n	8010c14 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010c10:	2300      	movs	r3, #0
 8010c12:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1a3      	bne.n	8010b62 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3720      	adds	r7, #32
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	0801b59c 	.word	0x0801b59c
 8010c28:	0801b7f8 	.word	0x0801b7f8
 8010c2c:	0801b60c 	.word	0x0801b60c
 8010c30:	0801b834 	.word	0x0801b834
 8010c34:	0801b84c 	.word	0x0801b84c
 8010c38:	0801b864 	.word	0x0801b864

08010c3c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010c48:	e005      	b.n	8010c56 <pbuf_clen+0x1a>
    ++len;
 8010c4a:	89fb      	ldrh	r3, [r7, #14]
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1f6      	bne.n	8010c4a <pbuf_clen+0xe>
  }
  return len;
 8010c5c:	89fb      	ldrh	r3, [r7, #14]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
	...

08010c6c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d016      	beq.n	8010ca8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8010c7a:	f008 fbbd 	bl	80193f8 <sys_arch_protect>
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	89db      	ldrh	r3, [r3, #14]
 8010c84:	3301      	adds	r3, #1
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	81da      	strh	r2, [r3, #14]
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f008 fbc1 	bl	8019414 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	89db      	ldrh	r3, [r3, #14]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d106      	bne.n	8010ca8 <pbuf_ref+0x3c>
 8010c9a:	4b05      	ldr	r3, [pc, #20]	; (8010cb0 <pbuf_ref+0x44>)
 8010c9c:	f240 3239 	movw	r2, #825	; 0x339
 8010ca0:	4904      	ldr	r1, [pc, #16]	; (8010cb4 <pbuf_ref+0x48>)
 8010ca2:	4805      	ldr	r0, [pc, #20]	; (8010cb8 <pbuf_ref+0x4c>)
 8010ca4:	f008 fc0c 	bl	80194c0 <iprintf>
  }
}
 8010ca8:	bf00      	nop
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	0801b59c 	.word	0x0801b59c
 8010cb4:	0801b888 	.word	0x0801b888
 8010cb8:	0801b60c 	.word	0x0801b60c

08010cbc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d002      	beq.n	8010cd2 <pbuf_cat+0x16>
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d107      	bne.n	8010ce2 <pbuf_cat+0x26>
 8010cd2:	4b20      	ldr	r3, [pc, #128]	; (8010d54 <pbuf_cat+0x98>)
 8010cd4:	f240 324d 	movw	r2, #845	; 0x34d
 8010cd8:	491f      	ldr	r1, [pc, #124]	; (8010d58 <pbuf_cat+0x9c>)
 8010cda:	4820      	ldr	r0, [pc, #128]	; (8010d5c <pbuf_cat+0xa0>)
 8010cdc:	f008 fbf0 	bl	80194c0 <iprintf>
 8010ce0:	e034      	b.n	8010d4c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	60fb      	str	r3, [r7, #12]
 8010ce6:	e00a      	b.n	8010cfe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	891a      	ldrh	r2, [r3, #8]
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	891b      	ldrh	r3, [r3, #8]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	60fb      	str	r3, [r7, #12]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1f0      	bne.n	8010ce8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	891a      	ldrh	r2, [r3, #8]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	895b      	ldrh	r3, [r3, #10]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d006      	beq.n	8010d20 <pbuf_cat+0x64>
 8010d12:	4b10      	ldr	r3, [pc, #64]	; (8010d54 <pbuf_cat+0x98>)
 8010d14:	f240 3255 	movw	r2, #853	; 0x355
 8010d18:	4911      	ldr	r1, [pc, #68]	; (8010d60 <pbuf_cat+0xa4>)
 8010d1a:	4810      	ldr	r0, [pc, #64]	; (8010d5c <pbuf_cat+0xa0>)
 8010d1c:	f008 fbd0 	bl	80194c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d006      	beq.n	8010d36 <pbuf_cat+0x7a>
 8010d28:	4b0a      	ldr	r3, [pc, #40]	; (8010d54 <pbuf_cat+0x98>)
 8010d2a:	f240 3256 	movw	r2, #854	; 0x356
 8010d2e:	490d      	ldr	r1, [pc, #52]	; (8010d64 <pbuf_cat+0xa8>)
 8010d30:	480a      	ldr	r0, [pc, #40]	; (8010d5c <pbuf_cat+0xa0>)
 8010d32:	f008 fbc5 	bl	80194c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	891a      	ldrh	r2, [r3, #8]
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	891b      	ldrh	r3, [r3, #8]
 8010d3e:	4413      	add	r3, r2
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	0801b59c 	.word	0x0801b59c
 8010d58:	0801b89c 	.word	0x0801b89c
 8010d5c:	0801b60c 	.word	0x0801b60c
 8010d60:	0801b8d4 	.word	0x0801b8d4
 8010d64:	0801b904 	.word	0x0801b904

08010d68 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010d72:	2300      	movs	r3, #0
 8010d74:	81fb      	strh	r3, [r7, #14]
 8010d76:	2300      	movs	r3, #0
 8010d78:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d008      	beq.n	8010d92 <pbuf_copy+0x2a>
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d005      	beq.n	8010d92 <pbuf_copy+0x2a>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	891a      	ldrh	r2, [r3, #8]
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	891b      	ldrh	r3, [r3, #8]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d209      	bcs.n	8010da6 <pbuf_copy+0x3e>
 8010d92:	4b54      	ldr	r3, [pc, #336]	; (8010ee4 <pbuf_copy+0x17c>)
 8010d94:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010d98:	4953      	ldr	r1, [pc, #332]	; (8010ee8 <pbuf_copy+0x180>)
 8010d9a:	4854      	ldr	r0, [pc, #336]	; (8010eec <pbuf_copy+0x184>)
 8010d9c:	f008 fb90 	bl	80194c0 <iprintf>
 8010da0:	f06f 030f 	mvn.w	r3, #15
 8010da4:	e099      	b.n	8010eda <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	895b      	ldrh	r3, [r3, #10]
 8010daa:	461a      	mov	r2, r3
 8010dac:	89fb      	ldrh	r3, [r7, #14]
 8010dae:	1ad2      	subs	r2, r2, r3
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	895b      	ldrh	r3, [r3, #10]
 8010db4:	4619      	mov	r1, r3
 8010db6:	89bb      	ldrh	r3, [r7, #12]
 8010db8:	1acb      	subs	r3, r1, r3
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	db05      	blt.n	8010dca <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	895a      	ldrh	r2, [r3, #10]
 8010dc2:	89bb      	ldrh	r3, [r7, #12]
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	817b      	strh	r3, [r7, #10]
 8010dc8:	e004      	b.n	8010dd4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	895a      	ldrh	r2, [r3, #10]
 8010dce:	89fb      	ldrh	r3, [r7, #14]
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685a      	ldr	r2, [r3, #4]
 8010dd8:	89fb      	ldrh	r3, [r7, #14]
 8010dda:	18d0      	adds	r0, r2, r3
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	685a      	ldr	r2, [r3, #4]
 8010de0:	89bb      	ldrh	r3, [r7, #12]
 8010de2:	4413      	add	r3, r2
 8010de4:	897a      	ldrh	r2, [r7, #10]
 8010de6:	4619      	mov	r1, r3
 8010de8:	f008 fb57 	bl	801949a <memcpy>
    offset_to += len;
 8010dec:	89fa      	ldrh	r2, [r7, #14]
 8010dee:	897b      	ldrh	r3, [r7, #10]
 8010df0:	4413      	add	r3, r2
 8010df2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010df4:	89ba      	ldrh	r2, [r7, #12]
 8010df6:	897b      	ldrh	r3, [r7, #10]
 8010df8:	4413      	add	r3, r2
 8010dfa:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	895b      	ldrh	r3, [r3, #10]
 8010e00:	89fa      	ldrh	r2, [r7, #14]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d906      	bls.n	8010e14 <pbuf_copy+0xac>
 8010e06:	4b37      	ldr	r3, [pc, #220]	; (8010ee4 <pbuf_copy+0x17c>)
 8010e08:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010e0c:	4938      	ldr	r1, [pc, #224]	; (8010ef0 <pbuf_copy+0x188>)
 8010e0e:	4837      	ldr	r0, [pc, #220]	; (8010eec <pbuf_copy+0x184>)
 8010e10:	f008 fb56 	bl	80194c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	895b      	ldrh	r3, [r3, #10]
 8010e18:	89ba      	ldrh	r2, [r7, #12]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d906      	bls.n	8010e2c <pbuf_copy+0xc4>
 8010e1e:	4b31      	ldr	r3, [pc, #196]	; (8010ee4 <pbuf_copy+0x17c>)
 8010e20:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010e24:	4933      	ldr	r1, [pc, #204]	; (8010ef4 <pbuf_copy+0x18c>)
 8010e26:	4831      	ldr	r0, [pc, #196]	; (8010eec <pbuf_copy+0x184>)
 8010e28:	f008 fb4a 	bl	80194c0 <iprintf>
    if (offset_from >= p_from->len) {
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	895b      	ldrh	r3, [r3, #10]
 8010e30:	89ba      	ldrh	r2, [r7, #12]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d304      	bcc.n	8010e40 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	895b      	ldrh	r3, [r3, #10]
 8010e44:	89fa      	ldrh	r2, [r7, #14]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d114      	bne.n	8010e74 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d10c      	bne.n	8010e74 <pbuf_copy+0x10c>
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d009      	beq.n	8010e74 <pbuf_copy+0x10c>
 8010e60:	4b20      	ldr	r3, [pc, #128]	; (8010ee4 <pbuf_copy+0x17c>)
 8010e62:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010e66:	4924      	ldr	r1, [pc, #144]	; (8010ef8 <pbuf_copy+0x190>)
 8010e68:	4820      	ldr	r0, [pc, #128]	; (8010eec <pbuf_copy+0x184>)
 8010e6a:	f008 fb29 	bl	80194c0 <iprintf>
 8010e6e:	f06f 030f 	mvn.w	r3, #15
 8010e72:	e032      	b.n	8010eda <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d013      	beq.n	8010ea2 <pbuf_copy+0x13a>
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	895a      	ldrh	r2, [r3, #10]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	891b      	ldrh	r3, [r3, #8]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d10d      	bne.n	8010ea2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d009      	beq.n	8010ea2 <pbuf_copy+0x13a>
 8010e8e:	4b15      	ldr	r3, [pc, #84]	; (8010ee4 <pbuf_copy+0x17c>)
 8010e90:	f240 32de 	movw	r2, #990	; 0x3de
 8010e94:	4919      	ldr	r1, [pc, #100]	; (8010efc <pbuf_copy+0x194>)
 8010e96:	4815      	ldr	r0, [pc, #84]	; (8010eec <pbuf_copy+0x184>)
 8010e98:	f008 fb12 	bl	80194c0 <iprintf>
 8010e9c:	f06f 0305 	mvn.w	r3, #5
 8010ea0:	e01b      	b.n	8010eda <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d013      	beq.n	8010ed0 <pbuf_copy+0x168>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	895a      	ldrh	r2, [r3, #10]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	891b      	ldrh	r3, [r3, #8]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d10d      	bne.n	8010ed0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d009      	beq.n	8010ed0 <pbuf_copy+0x168>
 8010ebc:	4b09      	ldr	r3, [pc, #36]	; (8010ee4 <pbuf_copy+0x17c>)
 8010ebe:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010ec2:	490e      	ldr	r1, [pc, #56]	; (8010efc <pbuf_copy+0x194>)
 8010ec4:	4809      	ldr	r0, [pc, #36]	; (8010eec <pbuf_copy+0x184>)
 8010ec6:	f008 fafb 	bl	80194c0 <iprintf>
 8010eca:	f06f 0305 	mvn.w	r3, #5
 8010ece:	e004      	b.n	8010eda <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f47f af67 	bne.w	8010da6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	0801b59c 	.word	0x0801b59c
 8010ee8:	0801b950 	.word	0x0801b950
 8010eec:	0801b60c 	.word	0x0801b60c
 8010ef0:	0801b980 	.word	0x0801b980
 8010ef4:	0801b998 	.word	0x0801b998
 8010ef8:	0801b9b4 	.word	0x0801b9b4
 8010efc:	0801b9c4 	.word	0x0801b9c4

08010f00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b088      	sub	sp, #32
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	460b      	mov	r3, r1
 8010f10:	80fb      	strh	r3, [r7, #6]
 8010f12:	4613      	mov	r3, r2
 8010f14:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d108      	bne.n	8010f32 <pbuf_copy_partial+0x32>
 8010f20:	4b30      	ldr	r3, [pc, #192]	; (8010fe4 <pbuf_copy_partial+0xe4>)
 8010f22:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010f26:	4930      	ldr	r1, [pc, #192]	; (8010fe8 <pbuf_copy_partial+0xe8>)
 8010f28:	4830      	ldr	r0, [pc, #192]	; (8010fec <pbuf_copy_partial+0xec>)
 8010f2a:	f008 fac9 	bl	80194c0 <iprintf>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e054      	b.n	8010fdc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d108      	bne.n	8010f4a <pbuf_copy_partial+0x4a>
 8010f38:	4b2a      	ldr	r3, [pc, #168]	; (8010fe4 <pbuf_copy_partial+0xe4>)
 8010f3a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010f3e:	492c      	ldr	r1, [pc, #176]	; (8010ff0 <pbuf_copy_partial+0xf0>)
 8010f40:	482a      	ldr	r0, [pc, #168]	; (8010fec <pbuf_copy_partial+0xec>)
 8010f42:	f008 fabd 	bl	80194c0 <iprintf>
 8010f46:	2300      	movs	r3, #0
 8010f48:	e048      	b.n	8010fdc <pbuf_copy_partial+0xdc>

  left = 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <pbuf_copy_partial+0x5a>
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d101      	bne.n	8010f5e <pbuf_copy_partial+0x5e>
    return 0;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	e03e      	b.n	8010fdc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	61fb      	str	r3, [r7, #28]
 8010f62:	e034      	b.n	8010fce <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010f64:	88bb      	ldrh	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <pbuf_copy_partial+0x80>
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	895b      	ldrh	r3, [r3, #10]
 8010f6e:	88ba      	ldrh	r2, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d305      	bcc.n	8010f80 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	895b      	ldrh	r3, [r3, #10]
 8010f78:	88ba      	ldrh	r2, [r7, #4]
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	80bb      	strh	r3, [r7, #4]
 8010f7e:	e023      	b.n	8010fc8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	895a      	ldrh	r2, [r3, #10]
 8010f84:	88bb      	ldrh	r3, [r7, #4]
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010f8a:	8b3a      	ldrh	r2, [r7, #24]
 8010f8c:	88fb      	ldrh	r3, [r7, #6]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d901      	bls.n	8010f96 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010f92:	88fb      	ldrh	r3, [r7, #6]
 8010f94:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8010f96:	8b7b      	ldrh	r3, [r7, #26]
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	18d0      	adds	r0, r2, r3
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	685a      	ldr	r2, [r3, #4]
 8010fa0:	88bb      	ldrh	r3, [r7, #4]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	8b3a      	ldrh	r2, [r7, #24]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	f008 fa77 	bl	801949a <memcpy>
      copied_total += buf_copy_len;
 8010fac:	8afa      	ldrh	r2, [r7, #22]
 8010fae:	8b3b      	ldrh	r3, [r7, #24]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010fb4:	8b7a      	ldrh	r2, [r7, #26]
 8010fb6:	8b3b      	ldrh	r3, [r7, #24]
 8010fb8:	4413      	add	r3, r2
 8010fba:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010fbc:	88fa      	ldrh	r2, [r7, #6]
 8010fbe:	8b3b      	ldrh	r3, [r7, #24]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	61fb      	str	r3, [r7, #28]
 8010fce:	88fb      	ldrh	r3, [r7, #6]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <pbuf_copy_partial+0xda>
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d1c4      	bne.n	8010f64 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8010fda:	8afb      	ldrh	r3, [r7, #22]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3720      	adds	r7, #32
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	0801b59c 	.word	0x0801b59c
 8010fe8:	0801b9f0 	.word	0x0801b9f0
 8010fec:	0801b60c 	.word	0x0801b60c
 8010ff0:	0801ba10 	.word	0x0801ba10

08010ff4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010ff8:	bf00      	nop
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
	...

08011004 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011008:	f000 ffb6 	bl	8011f78 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801100c:	4b07      	ldr	r3, [pc, #28]	; (801102c <tcp_tmr+0x28>)
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	3301      	adds	r3, #1
 8011012:	b2da      	uxtb	r2, r3
 8011014:	4b05      	ldr	r3, [pc, #20]	; (801102c <tcp_tmr+0x28>)
 8011016:	701a      	strb	r2, [r3, #0]
 8011018:	4b04      	ldr	r3, [pc, #16]	; (801102c <tcp_tmr+0x28>)
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	f003 0301 	and.w	r3, r3, #1
 8011020:	2b00      	cmp	r3, #0
 8011022:	d001      	beq.n	8011028 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011024:	f000 fce8 	bl	80119f8 <tcp_slowtmr>
  }
}
 8011028:	bf00      	nop
 801102a:	bd80      	pop	{r7, pc}
 801102c:	2000c801 	.word	0x2000c801

08011030 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	60fb      	str	r3, [r7, #12]
 801103e:	e00a      	b.n	8011056 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	429a      	cmp	r2, r3
 8011048:	d102      	bne.n	8011050 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2200      	movs	r2, #0
 801104e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1f1      	bne.n	8011040 <tcp_remove_listener+0x10>
      }
   }
}
 801105c:	bf00      	nop
 801105e:	3714      	adds	r7, #20
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d105      	bne.n	8011082 <tcp_listen_closed+0x1a>
 8011076:	4b13      	ldr	r3, [pc, #76]	; (80110c4 <tcp_listen_closed+0x5c>)
 8011078:	22c0      	movs	r2, #192	; 0xc0
 801107a:	4913      	ldr	r1, [pc, #76]	; (80110c8 <tcp_listen_closed+0x60>)
 801107c:	4813      	ldr	r0, [pc, #76]	; (80110cc <tcp_listen_closed+0x64>)
 801107e:	f008 fa1f 	bl	80194c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	7d1b      	ldrb	r3, [r3, #20]
 8011086:	2b01      	cmp	r3, #1
 8011088:	d005      	beq.n	8011096 <tcp_listen_closed+0x2e>
 801108a:	4b0e      	ldr	r3, [pc, #56]	; (80110c4 <tcp_listen_closed+0x5c>)
 801108c:	22c1      	movs	r2, #193	; 0xc1
 801108e:	4910      	ldr	r1, [pc, #64]	; (80110d0 <tcp_listen_closed+0x68>)
 8011090:	480e      	ldr	r0, [pc, #56]	; (80110cc <tcp_listen_closed+0x64>)
 8011092:	f008 fa15 	bl	80194c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011096:	2301      	movs	r3, #1
 8011098:	60fb      	str	r3, [r7, #12]
 801109a:	e00b      	b.n	80110b4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801109c:	4a0d      	ldr	r2, [pc, #52]	; (80110d4 <tcp_listen_closed+0x6c>)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	6879      	ldr	r1, [r7, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff ffc1 	bl	8011030 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	3301      	adds	r3, #1
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2b03      	cmp	r3, #3
 80110b8:	d9f0      	bls.n	801109c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80110ba:	bf00      	nop
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	0801bb44 	.word	0x0801bb44
 80110c8:	0801bb98 	.word	0x0801bb98
 80110cc:	0801bba4 	.word	0x0801bba4
 80110d0:	0801bbcc 	.word	0x0801bbcc
 80110d4:	0801d128 	.word	0x0801d128

080110d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80110d8:	b5b0      	push	{r4, r5, r7, lr}
 80110da:	b086      	sub	sp, #24
 80110dc:	af02      	add	r7, sp, #8
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	460b      	mov	r3, r1
 80110e2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80110e4:	78fb      	ldrb	r3, [r7, #3]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d075      	beq.n	80111d6 <tcp_close_shutdown+0xfe>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	7d1b      	ldrb	r3, [r3, #20]
 80110ee:	2b04      	cmp	r3, #4
 80110f0:	d003      	beq.n	80110fa <tcp_close_shutdown+0x22>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7d1b      	ldrb	r3, [r3, #20]
 80110f6:	2b07      	cmp	r3, #7
 80110f8:	d16d      	bne.n	80111d6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d104      	bne.n	801110c <tcp_close_shutdown+0x34>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011106:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801110a:	d064      	beq.n	80111d6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	7e9b      	ldrb	r3, [r3, #26]
 8011110:	f003 0310 	and.w	r3, r3, #16
 8011114:	2b00      	cmp	r3, #0
 8011116:	d106      	bne.n	8011126 <tcp_close_shutdown+0x4e>
 8011118:	4b59      	ldr	r3, [pc, #356]	; (8011280 <tcp_close_shutdown+0x1a8>)
 801111a:	f240 120f 	movw	r2, #271	; 0x10f
 801111e:	4959      	ldr	r1, [pc, #356]	; (8011284 <tcp_close_shutdown+0x1ac>)
 8011120:	4859      	ldr	r0, [pc, #356]	; (8011288 <tcp_close_shutdown+0x1b0>)
 8011122:	f008 f9cd 	bl	80194c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801112e:	687c      	ldr	r4, [r7, #4]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	1d1d      	adds	r5, r3, #4
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	8adb      	ldrh	r3, [r3, #22]
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	8b12      	ldrh	r2, [r2, #24]
 801113c:	9201      	str	r2, [sp, #4]
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	462b      	mov	r3, r5
 8011142:	4622      	mov	r2, r4
 8011144:	f004 ff1a 	bl	8015f7c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f001 fa4b 	bl	80125e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801114e:	4b4f      	ldr	r3, [pc, #316]	; (801128c <tcp_close_shutdown+0x1b4>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d105      	bne.n	8011164 <tcp_close_shutdown+0x8c>
 8011158:	4b4c      	ldr	r3, [pc, #304]	; (801128c <tcp_close_shutdown+0x1b4>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	4a4b      	ldr	r2, [pc, #300]	; (801128c <tcp_close_shutdown+0x1b4>)
 8011160:	6013      	str	r3, [r2, #0]
 8011162:	e013      	b.n	801118c <tcp_close_shutdown+0xb4>
 8011164:	4b49      	ldr	r3, [pc, #292]	; (801128c <tcp_close_shutdown+0x1b4>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	60fb      	str	r3, [r7, #12]
 801116a:	e00c      	b.n	8011186 <tcp_close_shutdown+0xae>
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	429a      	cmp	r2, r3
 8011174:	d104      	bne.n	8011180 <tcp_close_shutdown+0xa8>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68da      	ldr	r2, [r3, #12]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	60da      	str	r2, [r3, #12]
 801117e:	e005      	b.n	801118c <tcp_close_shutdown+0xb4>
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	60fb      	str	r3, [r7, #12]
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1ef      	bne.n	801116c <tcp_close_shutdown+0x94>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	60da      	str	r2, [r3, #12]
 8011192:	4b3f      	ldr	r3, [pc, #252]	; (8011290 <tcp_close_shutdown+0x1b8>)
 8011194:	2201      	movs	r2, #1
 8011196:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	7d1b      	ldrb	r3, [r3, #20]
 801119c:	2b04      	cmp	r3, #4
 801119e:	d10c      	bne.n	80111ba <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	220a      	movs	r2, #10
 80111a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111a6:	4b3b      	ldr	r3, [pc, #236]	; (8011294 <tcp_close_shutdown+0x1bc>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	60da      	str	r2, [r3, #12]
 80111ae:	4a39      	ldr	r2, [pc, #228]	; (8011294 <tcp_close_shutdown+0x1bc>)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6013      	str	r3, [r2, #0]
 80111b4:	f005 f934 	bl	8016420 <tcp_timer_needed>
 80111b8:	e00b      	b.n	80111d2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80111ba:	4b37      	ldr	r3, [pc, #220]	; (8011298 <tcp_close_shutdown+0x1c0>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d102      	bne.n	80111ca <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80111c4:	f003 fd72 	bl	8014cac <tcp_trigger_input_pcb_close>
 80111c8:	e003      	b.n	80111d2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80111ca:	6879      	ldr	r1, [r7, #4]
 80111cc:	2001      	movs	r0, #1
 80111ce:	f7fe ff03 	bl	800ffd8 <memp_free>
        }
      }
      return ERR_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	e050      	b.n	8011278 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	7d1b      	ldrb	r3, [r3, #20]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d02e      	beq.n	801123c <tcp_close_shutdown+0x164>
 80111de:	2b02      	cmp	r3, #2
 80111e0:	d038      	beq.n	8011254 <tcp_close_shutdown+0x17c>
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d142      	bne.n	801126c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	8adb      	ldrh	r3, [r3, #22]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d021      	beq.n	8011232 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80111ee:	4b2b      	ldr	r3, [pc, #172]	; (801129c <tcp_close_shutdown+0x1c4>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d105      	bne.n	8011204 <tcp_close_shutdown+0x12c>
 80111f8:	4b28      	ldr	r3, [pc, #160]	; (801129c <tcp_close_shutdown+0x1c4>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	4a27      	ldr	r2, [pc, #156]	; (801129c <tcp_close_shutdown+0x1c4>)
 8011200:	6013      	str	r3, [r2, #0]
 8011202:	e013      	b.n	801122c <tcp_close_shutdown+0x154>
 8011204:	4b25      	ldr	r3, [pc, #148]	; (801129c <tcp_close_shutdown+0x1c4>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	60bb      	str	r3, [r7, #8]
 801120a:	e00c      	b.n	8011226 <tcp_close_shutdown+0x14e>
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	429a      	cmp	r2, r3
 8011214:	d104      	bne.n	8011220 <tcp_close_shutdown+0x148>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	68da      	ldr	r2, [r3, #12]
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	60da      	str	r2, [r3, #12]
 801121e:	e005      	b.n	801122c <tcp_close_shutdown+0x154>
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	60bb      	str	r3, [r7, #8]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1ef      	bne.n	801120c <tcp_close_shutdown+0x134>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2200      	movs	r2, #0
 8011230:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8011232:	6879      	ldr	r1, [r7, #4]
 8011234:	2001      	movs	r0, #1
 8011236:	f7fe fecf 	bl	800ffd8 <memp_free>
    break;
 801123a:	e01c      	b.n	8011276 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7ff ff13 	bl	8011068 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011242:	6879      	ldr	r1, [r7, #4]
 8011244:	4816      	ldr	r0, [pc, #88]	; (80112a0 <tcp_close_shutdown+0x1c8>)
 8011246:	f001 fa0f 	bl	8012668 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801124a:	6879      	ldr	r1, [r7, #4]
 801124c:	2002      	movs	r0, #2
 801124e:	f7fe fec3 	bl	800ffd8 <memp_free>
    break;
 8011252:	e010      	b.n	8011276 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	480d      	ldr	r0, [pc, #52]	; (801128c <tcp_close_shutdown+0x1b4>)
 8011258:	f001 fa06 	bl	8012668 <tcp_pcb_remove>
 801125c:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <tcp_close_shutdown+0x1b8>)
 801125e:	2201      	movs	r2, #1
 8011260:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8011262:	6879      	ldr	r1, [r7, #4]
 8011264:	2001      	movs	r0, #1
 8011266:	f7fe feb7 	bl	800ffd8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801126a:	e004      	b.n	8011276 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 f819 	bl	80112a4 <tcp_close_shutdown_fin>
 8011272:	4603      	mov	r3, r0
 8011274:	e000      	b.n	8011278 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8011276:	2300      	movs	r3, #0
}
 8011278:	4618      	mov	r0, r3
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bdb0      	pop	{r4, r5, r7, pc}
 8011280:	0801bb44 	.word	0x0801bb44
 8011284:	0801bbe4 	.word	0x0801bbe4
 8011288:	0801bba4 	.word	0x0801bba4
 801128c:	200101cc 	.word	0x200101cc
 8011290:	200101c8 	.word	0x200101c8
 8011294:	200101dc 	.word	0x200101dc
 8011298:	200101e0 	.word	0x200101e0
 801129c:	200101d8 	.word	0x200101d8
 80112a0:	200101d4 	.word	0x200101d4

080112a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <tcp_close_shutdown_fin+0x1c>
 80112b2:	4b2c      	ldr	r3, [pc, #176]	; (8011364 <tcp_close_shutdown_fin+0xc0>)
 80112b4:	f240 124d 	movw	r2, #333	; 0x14d
 80112b8:	492b      	ldr	r1, [pc, #172]	; (8011368 <tcp_close_shutdown_fin+0xc4>)
 80112ba:	482c      	ldr	r0, [pc, #176]	; (801136c <tcp_close_shutdown_fin+0xc8>)
 80112bc:	f008 f900 	bl	80194c0 <iprintf>

  switch (pcb->state) {
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	7d1b      	ldrb	r3, [r3, #20]
 80112c4:	2b04      	cmp	r3, #4
 80112c6:	d010      	beq.n	80112ea <tcp_close_shutdown_fin+0x46>
 80112c8:	2b07      	cmp	r3, #7
 80112ca:	d01b      	beq.n	8011304 <tcp_close_shutdown_fin+0x60>
 80112cc:	2b03      	cmp	r3, #3
 80112ce:	d126      	bne.n	801131e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f003 fd77 	bl	8014dc4 <tcp_send_fin>
 80112d6:	4603      	mov	r3, r0
 80112d8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80112da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d11f      	bne.n	8011322 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2205      	movs	r2, #5
 80112e6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80112e8:	e01b      	b.n	8011322 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f003 fd6a 	bl	8014dc4 <tcp_send_fin>
 80112f0:	4603      	mov	r3, r0
 80112f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80112f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d114      	bne.n	8011326 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2205      	movs	r2, #5
 8011300:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011302:	e010      	b.n	8011326 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f003 fd5d 	bl	8014dc4 <tcp_send_fin>
 801130a:	4603      	mov	r3, r0
 801130c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d109      	bne.n	801132a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2209      	movs	r2, #9
 801131a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801131c:	e005      	b.n	801132a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	e01c      	b.n	801135c <tcp_close_shutdown_fin+0xb8>
    break;
 8011322:	bf00      	nop
 8011324:	e002      	b.n	801132c <tcp_close_shutdown_fin+0x88>
    break;
 8011326:	bf00      	nop
 8011328:	e000      	b.n	801132c <tcp_close_shutdown_fin+0x88>
    break;
 801132a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d103      	bne.n	801133c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f004 fb97 	bl	8015a68 <tcp_output>
 801133a:	e00d      	b.n	8011358 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011344:	d108      	bne.n	8011358 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7e9b      	ldrb	r3, [r3, #26]
 801134a:	f043 0308 	orr.w	r3, r3, #8
 801134e:	b2da      	uxtb	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	e001      	b.n	801135c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	0801bb44 	.word	0x0801bb44
 8011368:	0801bb98 	.word	0x0801bb98
 801136c:	0801bba4 	.word	0x0801bba4

08011370 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7d1b      	ldrb	r3, [r3, #20]
 801137c:	2b01      	cmp	r3, #1
 801137e:	d006      	beq.n	801138e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	7e9b      	ldrb	r3, [r3, #26]
 8011384:	f043 0310 	orr.w	r3, r3, #16
 8011388:	b2da      	uxtb	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801138e:	2101      	movs	r1, #1
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7ff fea1 	bl	80110d8 <tcp_close_shutdown>
 8011396:	4603      	mov	r3, r0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	7d1b      	ldrb	r3, [r3, #20]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d102      	bne.n	80113ba <tcp_shutdown+0x1a>
    return ERR_CONN;
 80113b4:	f06f 030a 	mvn.w	r3, #10
 80113b8:	e035      	b.n	8011426 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d01b      	beq.n	80113f8 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	7e9b      	ldrb	r3, [r3, #26]
 80113c4:	f043 0310 	orr.w	r3, r3, #16
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d005      	beq.n	80113e0 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80113d4:	2101      	movs	r1, #1
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f7ff fe7e 	bl	80110d8 <tcp_close_shutdown>
 80113dc:	4603      	mov	r3, r0
 80113de:	e022      	b.n	8011426 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d007      	beq.n	80113f8 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff fb8b 	bl	8010b08 <pbuf_free>
      pcb->refused_data = NULL;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2200      	movs	r2, #0
 80113f6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d012      	beq.n	8011424 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	7d1b      	ldrb	r3, [r3, #20]
 8011402:	2b03      	cmp	r3, #3
 8011404:	db0b      	blt.n	801141e <tcp_shutdown+0x7e>
 8011406:	2b04      	cmp	r3, #4
 8011408:	dd01      	ble.n	801140e <tcp_shutdown+0x6e>
 801140a:	2b07      	cmp	r3, #7
 801140c:	d107      	bne.n	801141e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	b2db      	uxtb	r3, r3
 8011412:	4619      	mov	r1, r3
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f7ff fe5f 	bl	80110d8 <tcp_close_shutdown>
 801141a:	4603      	mov	r3, r0
 801141c:	e003      	b.n	8011426 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801141e:	f06f 030a 	mvn.w	r3, #10
 8011422:	e000      	b.n	8011426 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
	...

08011430 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b08c      	sub	sp, #48	; 0x30
 8011434:	af02      	add	r7, sp, #8
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	7d1b      	ldrb	r3, [r3, #20]
 801143e:	2b01      	cmp	r3, #1
 8011440:	d106      	bne.n	8011450 <tcp_abandon+0x20>
 8011442:	4b4d      	ldr	r3, [pc, #308]	; (8011578 <tcp_abandon+0x148>)
 8011444:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011448:	494c      	ldr	r1, [pc, #304]	; (801157c <tcp_abandon+0x14c>)
 801144a:	484d      	ldr	r0, [pc, #308]	; (8011580 <tcp_abandon+0x150>)
 801144c:	f008 f838 	bl	80194c0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	7d1b      	ldrb	r3, [r3, #20]
 8011454:	2b0a      	cmp	r3, #10
 8011456:	d108      	bne.n	801146a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011458:	6879      	ldr	r1, [r7, #4]
 801145a:	484a      	ldr	r0, [pc, #296]	; (8011584 <tcp_abandon+0x154>)
 801145c:	f001 f904 	bl	8012668 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011460:	6879      	ldr	r1, [r7, #4]
 8011462:	2001      	movs	r0, #1
 8011464:	f7fe fdb8 	bl	800ffd8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8011468:	e081      	b.n	801156e <tcp_abandon+0x13e>
    int send_rst = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801146e:	2300      	movs	r3, #0
 8011470:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011476:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801147c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011484:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d126      	bne.n	80114e2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	8adb      	ldrh	r3, [r3, #22]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d02e      	beq.n	80114fa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801149c:	4b3a      	ldr	r3, [pc, #232]	; (8011588 <tcp_abandon+0x158>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d105      	bne.n	80114b2 <tcp_abandon+0x82>
 80114a6:	4b38      	ldr	r3, [pc, #224]	; (8011588 <tcp_abandon+0x158>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	4a36      	ldr	r2, [pc, #216]	; (8011588 <tcp_abandon+0x158>)
 80114ae:	6013      	str	r3, [r2, #0]
 80114b0:	e013      	b.n	80114da <tcp_abandon+0xaa>
 80114b2:	4b35      	ldr	r3, [pc, #212]	; (8011588 <tcp_abandon+0x158>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	61fb      	str	r3, [r7, #28]
 80114b8:	e00c      	b.n	80114d4 <tcp_abandon+0xa4>
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d104      	bne.n	80114ce <tcp_abandon+0x9e>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	68da      	ldr	r2, [r3, #12]
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	60da      	str	r2, [r3, #12]
 80114cc:	e005      	b.n	80114da <tcp_abandon+0xaa>
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	61fb      	str	r3, [r7, #28]
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1ef      	bne.n	80114ba <tcp_abandon+0x8a>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2200      	movs	r2, #0
 80114de:	60da      	str	r2, [r3, #12]
 80114e0:	e00b      	b.n	80114fa <tcp_abandon+0xca>
      send_rst = reset;
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	8adb      	ldrh	r3, [r3, #22]
 80114ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	4827      	ldr	r0, [pc, #156]	; (801158c <tcp_abandon+0x15c>)
 80114f0:	f001 f8ba 	bl	8012668 <tcp_pcb_remove>
 80114f4:	4b26      	ldr	r3, [pc, #152]	; (8011590 <tcp_abandon+0x160>)
 80114f6:	2201      	movs	r2, #1
 80114f8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d004      	beq.n	801150c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011506:	4618      	mov	r0, r3
 8011508:	f000 fe03 	bl	8012112 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011510:	2b00      	cmp	r3, #0
 8011512:	d004      	beq.n	801151e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011518:	4618      	mov	r0, r3
 801151a:	f000 fdfa 	bl	8012112 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011522:	2b00      	cmp	r3, #0
 8011524:	d004      	beq.n	8011530 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801152a:	4618      	mov	r0, r3
 801152c:	f000 fdf1 	bl	8012112 <tcp_segs_free>
    if (send_rst) {
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	2b00      	cmp	r3, #0
 8011534:	d00c      	beq.n	8011550 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	1d19      	adds	r1, r3, #4
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	8b1b      	ldrh	r3, [r3, #24]
 8011540:	9301      	str	r3, [sp, #4]
 8011542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011544:	9300      	str	r3, [sp, #0]
 8011546:	460b      	mov	r3, r1
 8011548:	6979      	ldr	r1, [r7, #20]
 801154a:	69b8      	ldr	r0, [r7, #24]
 801154c:	f004 fd16 	bl	8015f7c <tcp_rst>
    last_state = pcb->state;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7d1b      	ldrb	r3, [r3, #20]
 8011554:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8011556:	6879      	ldr	r1, [r7, #4]
 8011558:	2001      	movs	r0, #1
 801155a:	f7fe fd3d 	bl	800ffd8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d004      	beq.n	801156e <tcp_abandon+0x13e>
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	f06f 010c 	mvn.w	r1, #12
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	4798      	blx	r3
}
 801156e:	bf00      	nop
 8011570:	3728      	adds	r7, #40	; 0x28
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	0801bb44 	.word	0x0801bb44
 801157c:	0801bc00 	.word	0x0801bc00
 8011580:	0801bba4 	.word	0x0801bba4
 8011584:	200101dc 	.word	0x200101dc
 8011588:	200101d8 	.word	0x200101d8
 801158c:	200101cc 	.word	0x200101cc
 8011590:	200101c8 	.word	0x200101c8

08011594 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801159c:	2101      	movs	r1, #1
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7ff ff46 	bl	8011430 <tcp_abandon>
}
 80115a4:	bf00      	nop
 80115a6:	3708      	adds	r7, #8
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b088      	sub	sp, #32
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	4613      	mov	r3, r2
 80115b8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80115ba:	2304      	movs	r3, #4
 80115bc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d101      	bne.n	80115c8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80115c4:	4b3c      	ldr	r3, [pc, #240]	; (80116b8 <tcp_bind+0x10c>)
 80115c6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d002      	beq.n	80115d4 <tcp_bind+0x28>
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d102      	bne.n	80115da <tcp_bind+0x2e>
    return ERR_VAL;
 80115d4:	f06f 0305 	mvn.w	r3, #5
 80115d8:	e06a      	b.n	80116b0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	7d1b      	ldrb	r3, [r3, #20]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d009      	beq.n	80115f6 <tcp_bind+0x4a>
 80115e2:	4b36      	ldr	r3, [pc, #216]	; (80116bc <tcp_bind+0x110>)
 80115e4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80115e8:	4935      	ldr	r1, [pc, #212]	; (80116c0 <tcp_bind+0x114>)
 80115ea:	4836      	ldr	r0, [pc, #216]	; (80116c4 <tcp_bind+0x118>)
 80115ec:	f007 ff68 	bl	80194c0 <iprintf>
 80115f0:	f06f 0305 	mvn.w	r3, #5
 80115f4:	e05c      	b.n	80116b0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80115f6:	88fb      	ldrh	r3, [r7, #6]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d109      	bne.n	8011610 <tcp_bind+0x64>
    port = tcp_new_port();
 80115fc:	f000 f9b8 	bl	8011970 <tcp_new_port>
 8011600:	4603      	mov	r3, r0
 8011602:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011604:	88fb      	ldrh	r3, [r7, #6]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d135      	bne.n	8011676 <tcp_bind+0xca>
      return ERR_BUF;
 801160a:	f06f 0301 	mvn.w	r3, #1
 801160e:	e04f      	b.n	80116b0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011610:	2300      	movs	r3, #0
 8011612:	61fb      	str	r3, [r7, #28]
 8011614:	e02b      	b.n	801166e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011616:	4a2c      	ldr	r2, [pc, #176]	; (80116c8 <tcp_bind+0x11c>)
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	61bb      	str	r3, [r7, #24]
 8011622:	e01e      	b.n	8011662 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	8adb      	ldrh	r3, [r3, #22]
 8011628:	88fa      	ldrh	r2, [r7, #6]
 801162a:	429a      	cmp	r2, r3
 801162c:	d116      	bne.n	801165c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801162e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011630:	2b00      	cmp	r3, #0
 8011632:	d010      	beq.n	8011656 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00c      	beq.n	8011656 <tcp_bind+0xaa>
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d009      	beq.n	8011656 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d005      	beq.n	8011656 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801164a:	69bb      	ldr	r3, [r7, #24]
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011652:	429a      	cmp	r2, r3
 8011654:	d102      	bne.n	801165c <tcp_bind+0xb0>
              return ERR_USE;
 8011656:	f06f 0307 	mvn.w	r3, #7
 801165a:	e029      	b.n	80116b0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	61bb      	str	r3, [r7, #24]
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1dd      	bne.n	8011624 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	3301      	adds	r3, #1
 801166c:	61fb      	str	r3, [r7, #28]
 801166e:	69fa      	ldr	r2, [r7, #28]
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	429a      	cmp	r2, r3
 8011674:	dbcf      	blt.n	8011616 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00c      	beq.n	8011696 <tcp_bind+0xea>
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d008      	beq.n	8011696 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d002      	beq.n	8011690 <tcp_bind+0xe4>
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	e000      	b.n	8011692 <tcp_bind+0xe6>
 8011690:	2300      	movs	r3, #0
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	88fa      	ldrh	r2, [r7, #6]
 801169a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801169c:	4b0b      	ldr	r3, [pc, #44]	; (80116cc <tcp_bind+0x120>)
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	4a09      	ldr	r2, [pc, #36]	; (80116cc <tcp_bind+0x120>)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6013      	str	r3, [r2, #0]
 80116aa:	f004 feb9 	bl	8016420 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	0801d150 	.word	0x0801d150
 80116bc:	0801bb44 	.word	0x0801bb44
 80116c0:	0801bc34 	.word	0x0801bc34
 80116c4:	0801bba4 	.word	0x0801bba4
 80116c8:	0801d128 	.word	0x0801d128
 80116cc:	200101d8 	.word	0x200101d8

080116d0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	4613      	mov	r3, r2
 80116dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80116de:	68b8      	ldr	r0, [r7, #8]
 80116e0:	f7ff ff58 	bl	8011594 <tcp_abort>

  return ERR_ABRT;
 80116e4:	f06f 030c 	mvn.w	r3, #12
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b088      	sub	sp, #32
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	460b      	mov	r3, r1
 80116fa:	607a      	str	r2, [r7, #4]
 80116fc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80116fe:	2300      	movs	r3, #0
 8011700:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	7d1b      	ldrb	r3, [r3, #20]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d009      	beq.n	801171e <tcp_listen_with_backlog_and_err+0x2e>
 801170a:	4b3f      	ldr	r3, [pc, #252]	; (8011808 <tcp_listen_with_backlog_and_err+0x118>)
 801170c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011710:	493e      	ldr	r1, [pc, #248]	; (801180c <tcp_listen_with_backlog_and_err+0x11c>)
 8011712:	483f      	ldr	r0, [pc, #252]	; (8011810 <tcp_listen_with_backlog_and_err+0x120>)
 8011714:	f007 fed4 	bl	80194c0 <iprintf>
 8011718:	23f1      	movs	r3, #241	; 0xf1
 801171a:	76fb      	strb	r3, [r7, #27]
 801171c:	e069      	b.n	80117f2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	7d1b      	ldrb	r3, [r3, #20]
 8011722:	2b01      	cmp	r3, #1
 8011724:	d104      	bne.n	8011730 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801172a:	23f7      	movs	r3, #247	; 0xf7
 801172c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801172e:	e060      	b.n	80117f2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011730:	2002      	movs	r0, #2
 8011732:	f7fe fbdb 	bl	800feec <memp_malloc>
 8011736:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d102      	bne.n	8011744 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801173e:	23ff      	movs	r3, #255	; 0xff
 8011740:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011742:	e056      	b.n	80117f2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	691a      	ldr	r2, [r3, #16]
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	8ada      	ldrh	r2, [r3, #22]
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	2201      	movs	r2, #1
 8011758:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	7d5a      	ldrb	r2, [r3, #21]
 801175e:	69fb      	ldr	r3, [r7, #28]
 8011760:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	7a1a      	ldrb	r2, [r3, #8]
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	7a9a      	ldrb	r2, [r3, #10]
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	7a5a      	ldrb	r2, [r3, #9]
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	8adb      	ldrh	r3, [r3, #22]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d021      	beq.n	80117ce <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801178a:	4b22      	ldr	r3, [pc, #136]	; (8011814 <tcp_listen_with_backlog_and_err+0x124>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	429a      	cmp	r2, r3
 8011792:	d105      	bne.n	80117a0 <tcp_listen_with_backlog_and_err+0xb0>
 8011794:	4b1f      	ldr	r3, [pc, #124]	; (8011814 <tcp_listen_with_backlog_and_err+0x124>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	4a1e      	ldr	r2, [pc, #120]	; (8011814 <tcp_listen_with_backlog_and_err+0x124>)
 801179c:	6013      	str	r3, [r2, #0]
 801179e:	e013      	b.n	80117c8 <tcp_listen_with_backlog_and_err+0xd8>
 80117a0:	4b1c      	ldr	r3, [pc, #112]	; (8011814 <tcp_listen_with_backlog_and_err+0x124>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	617b      	str	r3, [r7, #20]
 80117a6:	e00c      	b.n	80117c2 <tcp_listen_with_backlog_and_err+0xd2>
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d104      	bne.n	80117bc <tcp_listen_with_backlog_and_err+0xcc>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	68da      	ldr	r2, [r3, #12]
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	60da      	str	r2, [r3, #12]
 80117ba:	e005      	b.n	80117c8 <tcp_listen_with_backlog_and_err+0xd8>
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	617b      	str	r3, [r7, #20]
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1ef      	bne.n	80117a8 <tcp_listen_with_backlog_and_err+0xb8>
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2200      	movs	r2, #0
 80117cc:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80117ce:	68f9      	ldr	r1, [r7, #12]
 80117d0:	2001      	movs	r0, #1
 80117d2:	f7fe fc01 	bl	800ffd8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	4a0f      	ldr	r2, [pc, #60]	; (8011818 <tcp_listen_with_backlog_and_err+0x128>)
 80117da:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80117dc:	4b0f      	ldr	r3, [pc, #60]	; (801181c <tcp_listen_with_backlog_and_err+0x12c>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	60da      	str	r2, [r3, #12]
 80117e4:	4a0d      	ldr	r2, [pc, #52]	; (801181c <tcp_listen_with_backlog_and_err+0x12c>)
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	6013      	str	r3, [r2, #0]
 80117ea:	f004 fe19 	bl	8016420 <tcp_timer_needed>
  res = ERR_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7efa      	ldrb	r2, [r7, #27]
 80117fc:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80117fe:	69fb      	ldr	r3, [r7, #28]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3720      	adds	r7, #32
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	0801bb44 	.word	0x0801bb44
 801180c:	0801bc5c 	.word	0x0801bc5c
 8011810:	0801bba4 	.word	0x0801bba4
 8011814:	200101d8 	.word	0x200101d8
 8011818:	080116d1 	.word	0x080116d1
 801181c:	200101d4 	.word	0x200101d4

08011820 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011830:	4413      	add	r3, r2
 8011832:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801183c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011840:	bf28      	it	cs
 8011842:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011846:	b292      	uxth	r2, r2
 8011848:	4413      	add	r3, r2
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	1ad3      	subs	r3, r2, r3
 801184e:	2b00      	cmp	r3, #0
 8011850:	db08      	blt.n	8011864 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185e:	68fa      	ldr	r2, [r7, #12]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	e020      	b.n	80118a6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	dd03      	ble.n	801187a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2200      	movs	r2, #0
 8011876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011878:	e014      	b.n	80118a4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011882:	1ad3      	subs	r3, r2, r3
 8011884:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801188c:	d306      	bcc.n	801189c <tcp_update_rcv_ann_wnd+0x7c>
 801188e:	4b08      	ldr	r3, [pc, #32]	; (80118b0 <tcp_update_rcv_ann_wnd+0x90>)
 8011890:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011894:	4907      	ldr	r1, [pc, #28]	; (80118b4 <tcp_update_rcv_ann_wnd+0x94>)
 8011896:	4808      	ldr	r0, [pc, #32]	; (80118b8 <tcp_update_rcv_ann_wnd+0x98>)
 8011898:	f007 fe12 	bl	80194c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80118a4:	2300      	movs	r3, #0
  }
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	0801bb44 	.word	0x0801bb44
 80118b4:	0801bc80 	.word	0x0801bc80
 80118b8:	0801bba4 	.word	0x0801bba4

080118bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	7d1b      	ldrb	r3, [r3, #20]
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	d106      	bne.n	80118de <tcp_recved+0x22>
 80118d0:	4b23      	ldr	r3, [pc, #140]	; (8011960 <tcp_recved+0xa4>)
 80118d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80118d6:	4923      	ldr	r1, [pc, #140]	; (8011964 <tcp_recved+0xa8>)
 80118d8:	4823      	ldr	r0, [pc, #140]	; (8011968 <tcp_recved+0xac>)
 80118da:	f007 fdf1 	bl	80194c0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118e2:	887b      	ldrh	r3, [r7, #2]
 80118e4:	4413      	add	r3, r2
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118f0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80118f4:	d904      	bls.n	8011900 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80118fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80118fe:	e017      	b.n	8011930 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011904:	2b00      	cmp	r3, #0
 8011906:	d113      	bne.n	8011930 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	7d1b      	ldrb	r3, [r3, #20]
 801190c:	2b07      	cmp	r3, #7
 801190e:	d003      	beq.n	8011918 <tcp_recved+0x5c>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	7d1b      	ldrb	r3, [r3, #20]
 8011914:	2b09      	cmp	r3, #9
 8011916:	d104      	bne.n	8011922 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801191e:	851a      	strh	r2, [r3, #40]	; 0x28
 8011920:	e006      	b.n	8011930 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011922:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <tcp_recved+0xa4>)
 8011924:	f240 322d 	movw	r2, #813	; 0x32d
 8011928:	4910      	ldr	r1, [pc, #64]	; (801196c <tcp_recved+0xb0>)
 801192a:	480f      	ldr	r0, [pc, #60]	; (8011968 <tcp_recved+0xac>)
 801192c:	f007 fdc8 	bl	80194c0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7ff ff75 	bl	8011820 <tcp_update_rcv_ann_wnd>
 8011936:	4603      	mov	r3, r0
 8011938:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011940:	db09      	blt.n	8011956 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	7e9b      	ldrb	r3, [r3, #26]
 8011946:	f043 0302 	orr.w	r3, r3, #2
 801194a:	b2da      	uxtb	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f004 f889 	bl	8015a68 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011956:	bf00      	nop
 8011958:	3710      	adds	r7, #16
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	0801bb44 	.word	0x0801bb44
 8011964:	0801bc9c 	.word	0x0801bc9c
 8011968:	0801bba4 	.word	0x0801bba4
 801196c:	0801bcc4 	.word	0x0801bcc4

08011970 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011976:	2300      	movs	r3, #0
 8011978:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801197a:	4b1d      	ldr	r3, [pc, #116]	; (80119f0 <tcp_new_port+0x80>)
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	1c5a      	adds	r2, r3, #1
 8011980:	b291      	uxth	r1, r2
 8011982:	4a1b      	ldr	r2, [pc, #108]	; (80119f0 <tcp_new_port+0x80>)
 8011984:	8011      	strh	r1, [r2, #0]
 8011986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801198a:	4293      	cmp	r3, r2
 801198c:	d103      	bne.n	8011996 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801198e:	4b18      	ldr	r3, [pc, #96]	; (80119f0 <tcp_new_port+0x80>)
 8011990:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011994:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011996:	2300      	movs	r3, #0
 8011998:	71fb      	strb	r3, [r7, #7]
 801199a:	e01e      	b.n	80119da <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801199c:	79fb      	ldrb	r3, [r7, #7]
 801199e:	4a15      	ldr	r2, [pc, #84]	; (80119f4 <tcp_new_port+0x84>)
 80119a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	603b      	str	r3, [r7, #0]
 80119a8:	e011      	b.n	80119ce <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	8ada      	ldrh	r2, [r3, #22]
 80119ae:	4b10      	ldr	r3, [pc, #64]	; (80119f0 <tcp_new_port+0x80>)
 80119b0:	881b      	ldrh	r3, [r3, #0]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d108      	bne.n	80119c8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80119b6:	88bb      	ldrh	r3, [r7, #4]
 80119b8:	3301      	adds	r3, #1
 80119ba:	80bb      	strh	r3, [r7, #4]
 80119bc:	88bb      	ldrh	r3, [r7, #4]
 80119be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80119c2:	d3da      	bcc.n	801197a <tcp_new_port+0xa>
          return 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	e00d      	b.n	80119e4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	603b      	str	r3, [r7, #0]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d1ea      	bne.n	80119aa <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80119d4:	79fb      	ldrb	r3, [r7, #7]
 80119d6:	3301      	adds	r3, #1
 80119d8:	71fb      	strb	r3, [r7, #7]
 80119da:	79fb      	ldrb	r3, [r7, #7]
 80119dc:	2b03      	cmp	r3, #3
 80119de:	d9dd      	bls.n	801199c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80119e0:	4b03      	ldr	r3, [pc, #12]	; (80119f0 <tcp_new_port+0x80>)
 80119e2:	881b      	ldrh	r3, [r3, #0]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	370c      	adds	r7, #12
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr
 80119f0:	20000028 	.word	0x20000028
 80119f4:	0801d128 	.word	0x0801d128

080119f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80119f8:	b5b0      	push	{r4, r5, r7, lr}
 80119fa:	b08c      	sub	sp, #48	; 0x30
 80119fc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80119fe:	2300      	movs	r3, #0
 8011a00:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8011a02:	4b96      	ldr	r3, [pc, #600]	; (8011c5c <tcp_slowtmr+0x264>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3301      	adds	r3, #1
 8011a08:	4a94      	ldr	r2, [pc, #592]	; (8011c5c <tcp_slowtmr+0x264>)
 8011a0a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011a0c:	4b94      	ldr	r3, [pc, #592]	; (8011c60 <tcp_slowtmr+0x268>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	3301      	adds	r3, #1
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	4b92      	ldr	r3, [pc, #584]	; (8011c60 <tcp_slowtmr+0x268>)
 8011a16:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8011a1c:	4b91      	ldr	r3, [pc, #580]	; (8011c64 <tcp_slowtmr+0x26c>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011a22:	e227      	b.n	8011e74 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a26:	7d1b      	ldrb	r3, [r3, #20]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d106      	bne.n	8011a3a <tcp_slowtmr+0x42>
 8011a2c:	4b8e      	ldr	r3, [pc, #568]	; (8011c68 <tcp_slowtmr+0x270>)
 8011a2e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8011a32:	498e      	ldr	r1, [pc, #568]	; (8011c6c <tcp_slowtmr+0x274>)
 8011a34:	488e      	ldr	r0, [pc, #568]	; (8011c70 <tcp_slowtmr+0x278>)
 8011a36:	f007 fd43 	bl	80194c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	7d1b      	ldrb	r3, [r3, #20]
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d106      	bne.n	8011a50 <tcp_slowtmr+0x58>
 8011a42:	4b89      	ldr	r3, [pc, #548]	; (8011c68 <tcp_slowtmr+0x270>)
 8011a44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011a48:	498a      	ldr	r1, [pc, #552]	; (8011c74 <tcp_slowtmr+0x27c>)
 8011a4a:	4889      	ldr	r0, [pc, #548]	; (8011c70 <tcp_slowtmr+0x278>)
 8011a4c:	f007 fd38 	bl	80194c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a52:	7d1b      	ldrb	r3, [r3, #20]
 8011a54:	2b0a      	cmp	r3, #10
 8011a56:	d106      	bne.n	8011a66 <tcp_slowtmr+0x6e>
 8011a58:	4b83      	ldr	r3, [pc, #524]	; (8011c68 <tcp_slowtmr+0x270>)
 8011a5a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8011a5e:	4986      	ldr	r1, [pc, #536]	; (8011c78 <tcp_slowtmr+0x280>)
 8011a60:	4883      	ldr	r0, [pc, #524]	; (8011c70 <tcp_slowtmr+0x278>)
 8011a62:	f007 fd2d 	bl	80194c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a68:	7f5a      	ldrb	r2, [r3, #29]
 8011a6a:	4b7d      	ldr	r3, [pc, #500]	; (8011c60 <tcp_slowtmr+0x268>)
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d103      	bne.n	8011a7a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8011a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8011a78:	e1fc      	b.n	8011e74 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011a7a:	4b79      	ldr	r3, [pc, #484]	; (8011c60 <tcp_slowtmr+0x268>)
 8011a7c:	781a      	ldrb	r2, [r3, #0]
 8011a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a80:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8c:	7d1b      	ldrb	r3, [r3, #20]
 8011a8e:	2b02      	cmp	r3, #2
 8011a90:	d108      	bne.n	8011aa4 <tcp_slowtmr+0xac>
 8011a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a98:	2b05      	cmp	r3, #5
 8011a9a:	d903      	bls.n	8011aa4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8011a9c:	7ffb      	ldrb	r3, [r7, #31]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	77fb      	strb	r3, [r7, #31]
 8011aa2:	e0a2      	b.n	8011bea <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011aaa:	2b0b      	cmp	r3, #11
 8011aac:	d903      	bls.n	8011ab6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011aae:	7ffb      	ldrb	r3, [r7, #31]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	77fb      	strb	r3, [r7, #31]
 8011ab4:	e099      	b.n	8011bea <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d032      	beq.n	8011b26 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8011ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011ac6:	3b01      	subs	r3, #1
 8011ac8:	4a6c      	ldr	r2, [pc, #432]	; (8011c7c <tcp_slowtmr+0x284>)
 8011aca:	5cd3      	ldrb	r3, [r2, r3]
 8011acc:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8011ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011ad4:	7cfa      	ldrb	r2, [r7, #19]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d907      	bls.n	8011aea <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8011ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011adc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	b2da      	uxtb	r2, r3
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8011af0:	7cfa      	ldrb	r2, [r7, #19]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d879      	bhi.n	8011bea <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8011af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011af8:	f004 fbd2 	bl	80162a0 <tcp_zero_window_probe>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d173      	bne.n	8011bea <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8011b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b04:	2200      	movs	r2, #0
 8011b06:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011b10:	2b06      	cmp	r3, #6
 8011b12:	d86a      	bhi.n	8011bea <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8011b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b16:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8011b24:	e061      	b.n	8011bea <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	db08      	blt.n	8011b42 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	3301      	adds	r3, #1
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	b21a      	sxth	r2, r3
 8011b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b40:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d04f      	beq.n	8011bea <tcp_slowtmr+0x1f2>
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011b56:	429a      	cmp	r2, r3
 8011b58:	db47      	blt.n	8011bea <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	7d1b      	ldrb	r3, [r3, #20]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d018      	beq.n	8011b94 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8011b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b68:	2b0c      	cmp	r3, #12
 8011b6a:	bf28      	it	cs
 8011b6c:	230c      	movcs	r3, #12
 8011b6e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011b76:	10db      	asrs	r3, r3, #3
 8011b78:	b21b      	sxth	r3, r3
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b82:	4413      	add	r3, r2
 8011b84:	7dfa      	ldrb	r2, [r7, #23]
 8011b86:	493e      	ldr	r1, [pc, #248]	; (8011c80 <tcp_slowtmr+0x288>)
 8011b88:	5c8a      	ldrb	r2, [r1, r2]
 8011b8a:	4093      	lsls	r3, r2
 8011b8c:	b21a      	sxth	r2, r3
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	2200      	movs	r2, #0
 8011b98:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	bf28      	it	cs
 8011baa:	4613      	movcs	r3, r2
 8011bac:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8011bae:	8abb      	ldrh	r3, [r7, #20]
 8011bb0:	085b      	lsrs	r3, r3, #1
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bc4:	005b      	lsls	r3, r3, #1
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d206      	bcs.n	8011bda <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bd0:	005b      	lsls	r3, r3, #1
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8011be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011be6:	f004 fa3f 	bl	8016068 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	7d1b      	ldrb	r3, [r3, #20]
 8011bee:	2b06      	cmp	r3, #6
 8011bf0:	d10f      	bne.n	8011c12 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf4:	7e9b      	ldrb	r3, [r3, #26]
 8011bf6:	f003 0310 	and.w	r3, r3, #16
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d009      	beq.n	8011c12 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bfe:	4b17      	ldr	r3, [pc, #92]	; (8011c5c <tcp_slowtmr+0x264>)
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c04:	6a1b      	ldr	r3, [r3, #32]
 8011c06:	1ad3      	subs	r3, r2, r3
 8011c08:	2b28      	cmp	r3, #40	; 0x28
 8011c0a:	d902      	bls.n	8011c12 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011c0c:	7ffb      	ldrb	r3, [r7, #31]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c14:	7a1b      	ldrb	r3, [r3, #8]
 8011c16:	f003 0308 	and.w	r3, r3, #8
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d05d      	beq.n	8011cda <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c20:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011c22:	2b04      	cmp	r3, #4
 8011c24:	d003      	beq.n	8011c2e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8011c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c28:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8011c2a:	2b07      	cmp	r3, #7
 8011c2c:	d155      	bne.n	8011cda <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c2e:	4b0b      	ldr	r3, [pc, #44]	; (8011c5c <tcp_slowtmr+0x264>)
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c34:	6a1b      	ldr	r3, [r3, #32]
 8011c36:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011c3e:	4b11      	ldr	r3, [pc, #68]	; (8011c84 <tcp_slowtmr+0x28c>)
 8011c40:	440b      	add	r3, r1
 8011c42:	4911      	ldr	r1, [pc, #68]	; (8011c88 <tcp_slowtmr+0x290>)
 8011c44:	fba1 1303 	umull	r1, r3, r1, r3
 8011c48:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d91e      	bls.n	8011c8c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011c4e:	7ffb      	ldrb	r3, [r7, #31]
 8011c50:	3301      	adds	r3, #1
 8011c52:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8011c54:	7fbb      	ldrb	r3, [r7, #30]
 8011c56:	3301      	adds	r3, #1
 8011c58:	77bb      	strb	r3, [r7, #30]
 8011c5a:	e03e      	b.n	8011cda <tcp_slowtmr+0x2e2>
 8011c5c:	200101d0 	.word	0x200101d0
 8011c60:	2000c802 	.word	0x2000c802
 8011c64:	200101cc 	.word	0x200101cc
 8011c68:	0801bb44 	.word	0x0801bb44
 8011c6c:	0801bd18 	.word	0x0801bd18
 8011c70:	0801bba4 	.word	0x0801bba4
 8011c74:	0801bd44 	.word	0x0801bd44
 8011c78:	0801bd70 	.word	0x0801bd70
 8011c7c:	0801d120 	.word	0x0801d120
 8011c80:	0801d110 	.word	0x0801d110
 8011c84:	000a4cb8 	.word	0x000a4cb8
 8011c88:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c8c:	4b97      	ldr	r3, [pc, #604]	; (8011eec <tcp_slowtmr+0x4f4>)
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c92:	6a1b      	ldr	r3, [r3, #32]
 8011c94:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c98:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	4b92      	ldr	r3, [pc, #584]	; (8011ef0 <tcp_slowtmr+0x4f8>)
 8011ca6:	fb03 f300 	mul.w	r3, r3, r0
 8011caa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8011cac:	4991      	ldr	r1, [pc, #580]	; (8011ef4 <tcp_slowtmr+0x4fc>)
 8011cae:	fba1 1303 	umull	r1, r3, r1, r3
 8011cb2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d910      	bls.n	8011cda <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8011cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cba:	f004 fab4 	bl	8016226 <tcp_keepalive>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8011cc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d107      	bne.n	8011cda <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d016      	beq.n	8011d10 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8011ce2:	4b82      	ldr	r3, [pc, #520]	; (8011eec <tcp_slowtmr+0x4f4>)
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce8:	6a1b      	ldr	r3, [r3, #32]
 8011cea:	1ad2      	subs	r2, r2, r3
 8011cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	005b      	lsls	r3, r3, #1
 8011cf8:	440b      	add	r3, r1
 8011cfa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d307      	bcc.n	8011d10 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d04:	4618      	mov	r0, r3
 8011d06:	f000 fa04 	bl	8012112 <tcp_segs_free>
      pcb->ooseq = NULL;
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d12:	7d1b      	ldrb	r3, [r3, #20]
 8011d14:	2b03      	cmp	r3, #3
 8011d16:	d109      	bne.n	8011d2c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d18:	4b74      	ldr	r3, [pc, #464]	; (8011eec <tcp_slowtmr+0x4f4>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	6a1b      	ldr	r3, [r3, #32]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	2b28      	cmp	r3, #40	; 0x28
 8011d24:	d902      	bls.n	8011d2c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011d26:	7ffb      	ldrb	r3, [r7, #31]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	7d1b      	ldrb	r3, [r3, #20]
 8011d30:	2b09      	cmp	r3, #9
 8011d32:	d109      	bne.n	8011d48 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011d34:	4b6d      	ldr	r3, [pc, #436]	; (8011eec <tcp_slowtmr+0x4f4>)
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3a:	6a1b      	ldr	r3, [r3, #32]
 8011d3c:	1ad3      	subs	r3, r2, r3
 8011d3e:	2bf0      	cmp	r3, #240	; 0xf0
 8011d40:	d902      	bls.n	8011d48 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011d42:	7ffb      	ldrb	r3, [r7, #31]
 8011d44:	3301      	adds	r3, #1
 8011d46:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011d48:	7ffb      	ldrb	r3, [r7, #31]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d05d      	beq.n	8011e0a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d54:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d58:	f000 fc44 	bl	80125e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011d5c:	6a3b      	ldr	r3, [r7, #32]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d010      	beq.n	8011d84 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011d62:	4b65      	ldr	r3, [pc, #404]	; (8011ef8 <tcp_slowtmr+0x500>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d106      	bne.n	8011d7a <tcp_slowtmr+0x382>
 8011d6c:	4b63      	ldr	r3, [pc, #396]	; (8011efc <tcp_slowtmr+0x504>)
 8011d6e:	f240 4289 	movw	r2, #1161	; 0x489
 8011d72:	4963      	ldr	r1, [pc, #396]	; (8011f00 <tcp_slowtmr+0x508>)
 8011d74:	4863      	ldr	r0, [pc, #396]	; (8011f04 <tcp_slowtmr+0x50c>)
 8011d76:	f007 fba3 	bl	80194c0 <iprintf>
        prev->next = pcb->next;
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7c:	68da      	ldr	r2, [r3, #12]
 8011d7e:	6a3b      	ldr	r3, [r7, #32]
 8011d80:	60da      	str	r2, [r3, #12]
 8011d82:	e00f      	b.n	8011da4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011d84:	4b5c      	ldr	r3, [pc, #368]	; (8011ef8 <tcp_slowtmr+0x500>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d006      	beq.n	8011d9c <tcp_slowtmr+0x3a4>
 8011d8e:	4b5b      	ldr	r3, [pc, #364]	; (8011efc <tcp_slowtmr+0x504>)
 8011d90:	f240 428d 	movw	r2, #1165	; 0x48d
 8011d94:	495c      	ldr	r1, [pc, #368]	; (8011f08 <tcp_slowtmr+0x510>)
 8011d96:	485b      	ldr	r0, [pc, #364]	; (8011f04 <tcp_slowtmr+0x50c>)
 8011d98:	f007 fb92 	bl	80194c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	4a55      	ldr	r2, [pc, #340]	; (8011ef8 <tcp_slowtmr+0x500>)
 8011da2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011da4:	7fbb      	ldrb	r3, [r7, #30]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d010      	beq.n	8011dcc <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011db2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db6:	1d1d      	adds	r5, r3, #4
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	8adb      	ldrh	r3, [r3, #22]
 8011dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dbe:	8b12      	ldrh	r2, [r2, #24]
 8011dc0:	9201      	str	r2, [sp, #4]
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	462b      	mov	r3, r5
 8011dc6:	4622      	mov	r2, r4
 8011dc8:	f004 f8d8 	bl	8015f7c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	691b      	ldr	r3, [r3, #16]
 8011dd0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	7d1b      	ldrb	r3, [r3, #20]
 8011dd6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011de2:	6839      	ldr	r1, [r7, #0]
 8011de4:	2001      	movs	r0, #1
 8011de6:	f7fe f8f7 	bl	800ffd8 <memp_free>

      tcp_active_pcbs_changed = 0;
 8011dea:	4b48      	ldr	r3, [pc, #288]	; (8011f0c <tcp_slowtmr+0x514>)
 8011dec:	2200      	movs	r2, #0
 8011dee:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d004      	beq.n	8011e00 <tcp_slowtmr+0x408>
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f06f 010c 	mvn.w	r1, #12
 8011dfc:	68b8      	ldr	r0, [r7, #8]
 8011dfe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011e00:	4b42      	ldr	r3, [pc, #264]	; (8011f0c <tcp_slowtmr+0x514>)
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d035      	beq.n	8011e74 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8011e08:	e606      	b.n	8011a18 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	7edb      	ldrb	r3, [r3, #27]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	6a3b      	ldr	r3, [r7, #32]
 8011e1e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	7eda      	ldrb	r2, [r3, #27]
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	7f1b      	ldrb	r3, [r3, #28]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d323      	bcc.n	8011e74 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011e32:	4b36      	ldr	r3, [pc, #216]	; (8011f0c <tcp_slowtmr+0x514>)
 8011e34:	2200      	movs	r2, #0
 8011e36:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011e38:	6a3b      	ldr	r3, [r7, #32]
 8011e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d00a      	beq.n	8011e58 <tcp_slowtmr+0x460>
 8011e42:	6a3b      	ldr	r3, [r7, #32]
 8011e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e48:	6a3a      	ldr	r2, [r7, #32]
 8011e4a:	6912      	ldr	r2, [r2, #16]
 8011e4c:	6a39      	ldr	r1, [r7, #32]
 8011e4e:	4610      	mov	r0, r2
 8011e50:	4798      	blx	r3
 8011e52:	4603      	mov	r3, r0
 8011e54:	777b      	strb	r3, [r7, #29]
 8011e56:	e001      	b.n	8011e5c <tcp_slowtmr+0x464>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8011e5c:	4b2b      	ldr	r3, [pc, #172]	; (8011f0c <tcp_slowtmr+0x514>)
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d000      	beq.n	8011e66 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8011e64:	e5d8      	b.n	8011a18 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011e66:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8011e6e:	6a38      	ldr	r0, [r7, #32]
 8011e70:	f003 fdfa 	bl	8015a68 <tcp_output>
  while (pcb != NULL) {
 8011e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f47f add4 	bne.w	8011a24 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011e80:	4b23      	ldr	r3, [pc, #140]	; (8011f10 <tcp_slowtmr+0x518>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011e86:	e068      	b.n	8011f5a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	7d1b      	ldrb	r3, [r3, #20]
 8011e8c:	2b0a      	cmp	r3, #10
 8011e8e:	d006      	beq.n	8011e9e <tcp_slowtmr+0x4a6>
 8011e90:	4b1a      	ldr	r3, [pc, #104]	; (8011efc <tcp_slowtmr+0x504>)
 8011e92:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011e96:	491f      	ldr	r1, [pc, #124]	; (8011f14 <tcp_slowtmr+0x51c>)
 8011e98:	481a      	ldr	r0, [pc, #104]	; (8011f04 <tcp_slowtmr+0x50c>)
 8011e9a:	f007 fb11 	bl	80194c0 <iprintf>
    pcb_remove = 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011ea2:	4b12      	ldr	r3, [pc, #72]	; (8011eec <tcp_slowtmr+0x4f4>)
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea8:	6a1b      	ldr	r3, [r3, #32]
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	2bf0      	cmp	r3, #240	; 0xf0
 8011eae:	d902      	bls.n	8011eb6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8011eb0:	7ffb      	ldrb	r3, [r7, #31]
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011eb6:	7ffb      	ldrb	r3, [r7, #31]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d049      	beq.n	8011f50 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ebe:	f000 fb91 	bl	80125e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011ec2:	6a3b      	ldr	r3, [r7, #32]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d029      	beq.n	8011f1c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011ec8:	4b11      	ldr	r3, [pc, #68]	; (8011f10 <tcp_slowtmr+0x518>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d106      	bne.n	8011ee0 <tcp_slowtmr+0x4e8>
 8011ed2:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <tcp_slowtmr+0x504>)
 8011ed4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8011ed8:	490f      	ldr	r1, [pc, #60]	; (8011f18 <tcp_slowtmr+0x520>)
 8011eda:	480a      	ldr	r0, [pc, #40]	; (8011f04 <tcp_slowtmr+0x50c>)
 8011edc:	f007 faf0 	bl	80194c0 <iprintf>
        prev->next = pcb->next;
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	68da      	ldr	r2, [r3, #12]
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	60da      	str	r2, [r3, #12]
 8011ee8:	e028      	b.n	8011f3c <tcp_slowtmr+0x544>
 8011eea:	bf00      	nop
 8011eec:	200101d0 	.word	0x200101d0
 8011ef0:	000124f8 	.word	0x000124f8
 8011ef4:	10624dd3 	.word	0x10624dd3
 8011ef8:	200101cc 	.word	0x200101cc
 8011efc:	0801bb44 	.word	0x0801bb44
 8011f00:	0801bda0 	.word	0x0801bda0
 8011f04:	0801bba4 	.word	0x0801bba4
 8011f08:	0801bdcc 	.word	0x0801bdcc
 8011f0c:	200101c8 	.word	0x200101c8
 8011f10:	200101dc 	.word	0x200101dc
 8011f14:	0801bdf8 	.word	0x0801bdf8
 8011f18:	0801be28 	.word	0x0801be28
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011f1c:	4b12      	ldr	r3, [pc, #72]	; (8011f68 <tcp_slowtmr+0x570>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d006      	beq.n	8011f34 <tcp_slowtmr+0x53c>
 8011f26:	4b11      	ldr	r3, [pc, #68]	; (8011f6c <tcp_slowtmr+0x574>)
 8011f28:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8011f2c:	4910      	ldr	r1, [pc, #64]	; (8011f70 <tcp_slowtmr+0x578>)
 8011f2e:	4811      	ldr	r0, [pc, #68]	; (8011f74 <tcp_slowtmr+0x57c>)
 8011f30:	f007 fac6 	bl	80194c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	4a0b      	ldr	r2, [pc, #44]	; (8011f68 <tcp_slowtmr+0x570>)
 8011f3a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011f46:	69b9      	ldr	r1, [r7, #24]
 8011f48:	2001      	movs	r0, #1
 8011f4a:	f7fe f845 	bl	800ffd8 <memp_free>
 8011f4e:	e004      	b.n	8011f5a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8011f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f52:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d193      	bne.n	8011e88 <tcp_slowtmr+0x490>
    }
  }
}
 8011f60:	bf00      	nop
 8011f62:	3728      	adds	r7, #40	; 0x28
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bdb0      	pop	{r4, r5, r7, pc}
 8011f68:	200101dc 	.word	0x200101dc
 8011f6c:	0801bb44 	.word	0x0801bb44
 8011f70:	0801be50 	.word	0x0801be50
 8011f74:	0801bba4 	.word	0x0801bba4

08011f78 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011f7e:	4b2d      	ldr	r3, [pc, #180]	; (8012034 <tcp_fasttmr+0xbc>)
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	3301      	adds	r3, #1
 8011f84:	b2da      	uxtb	r2, r3
 8011f86:	4b2b      	ldr	r3, [pc, #172]	; (8012034 <tcp_fasttmr+0xbc>)
 8011f88:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011f8a:	4b2b      	ldr	r3, [pc, #172]	; (8012038 <tcp_fasttmr+0xc0>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f90:	e048      	b.n	8012024 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	7f5a      	ldrb	r2, [r3, #29]
 8011f96:	4b27      	ldr	r3, [pc, #156]	; (8012034 <tcp_fasttmr+0xbc>)
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d03f      	beq.n	801201e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011f9e:	4b25      	ldr	r3, [pc, #148]	; (8012034 <tcp_fasttmr+0xbc>)
 8011fa0:	781a      	ldrb	r2, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	7e9b      	ldrb	r3, [r3, #26]
 8011faa:	f003 0301 	and.w	r3, r3, #1
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d010      	beq.n	8011fd4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	7e9b      	ldrb	r3, [r3, #26]
 8011fb6:	f043 0302 	orr.w	r3, r3, #2
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f003 fd51 	bl	8015a68 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	7e9b      	ldrb	r3, [r3, #26]
 8011fca:	f023 0303 	bic.w	r3, r3, #3
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	7e9b      	ldrb	r3, [r3, #26]
 8011fd8:	f003 0308 	and.w	r3, r3, #8
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d009      	beq.n	8011ff4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	7e9b      	ldrb	r3, [r3, #26]
 8011fe4:	f023 0308 	bic.w	r3, r3, #8
 8011fe8:	b2da      	uxtb	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f7ff f958 	bl	80112a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d00a      	beq.n	8012018 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012002:	4b0e      	ldr	r3, [pc, #56]	; (801203c <tcp_fasttmr+0xc4>)
 8012004:	2200      	movs	r2, #0
 8012006:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f000 f819 	bl	8012040 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801200e:	4b0b      	ldr	r3, [pc, #44]	; (801203c <tcp_fasttmr+0xc4>)
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d000      	beq.n	8012018 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012016:	e7b8      	b.n	8011f8a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	607b      	str	r3, [r7, #4]
 801201c:	e002      	b.n	8012024 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d1b3      	bne.n	8011f92 <tcp_fasttmr+0x1a>
    }
  }
}
 801202a:	bf00      	nop
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	2000c802 	.word	0x2000c802
 8012038:	200101cc 	.word	0x200101cc
 801203c:	200101c8 	.word	0x200101c8

08012040 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012040:	b590      	push	{r4, r7, lr}
 8012042:	b085      	sub	sp, #20
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801204c:	7b5b      	ldrb	r3, [r3, #13]
 801204e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012054:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2200      	movs	r2, #0
 801205a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012062:	2b00      	cmp	r3, #0
 8012064:	d00b      	beq.n	801207e <tcp_process_refused_data+0x3e>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6918      	ldr	r0, [r3, #16]
 8012070:	2300      	movs	r3, #0
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	6879      	ldr	r1, [r7, #4]
 8012076:	47a0      	blx	r4
 8012078:	4603      	mov	r3, r0
 801207a:	73fb      	strb	r3, [r7, #15]
 801207c:	e007      	b.n	801208e <tcp_process_refused_data+0x4e>
 801207e:	2300      	movs	r3, #0
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	2000      	movs	r0, #0
 8012086:	f000 f88c 	bl	80121a2 <tcp_recv_null>
 801208a:	4603      	mov	r3, r0
 801208c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d12a      	bne.n	80120ec <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8012096:	7bbb      	ldrb	r3, [r7, #14]
 8012098:	f003 0320 	and.w	r3, r3, #32
 801209c:	2b00      	cmp	r3, #0
 801209e:	d033      	beq.n	8012108 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80120a8:	d005      	beq.n	80120b6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120ae:	3301      	adds	r3, #1
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00b      	beq.n	80120d8 <tcp_process_refused_data+0x98>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6918      	ldr	r0, [r3, #16]
 80120ca:	2300      	movs	r3, #0
 80120cc:	2200      	movs	r2, #0
 80120ce:	6879      	ldr	r1, [r7, #4]
 80120d0:	47a0      	blx	r4
 80120d2:	4603      	mov	r3, r0
 80120d4:	73fb      	strb	r3, [r7, #15]
 80120d6:	e001      	b.n	80120dc <tcp_process_refused_data+0x9c>
 80120d8:	2300      	movs	r3, #0
 80120da:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80120dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120e0:	f113 0f0d 	cmn.w	r3, #13
 80120e4:	d110      	bne.n	8012108 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80120e6:	f06f 030c 	mvn.w	r3, #12
 80120ea:	e00e      	b.n	801210a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80120ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120f0:	f113 0f0d 	cmn.w	r3, #13
 80120f4:	d102      	bne.n	80120fc <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80120f6:	f06f 030c 	mvn.w	r3, #12
 80120fa:	e006      	b.n	801210a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	68ba      	ldr	r2, [r7, #8]
 8012100:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8012102:	f06f 0304 	mvn.w	r3, #4
 8012106:	e000      	b.n	801210a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	bd90      	pop	{r4, r7, pc}

08012112 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b084      	sub	sp, #16
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801211a:	e007      	b.n	801212c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 f809 	bl	801213a <tcp_seg_free>
    seg = next;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1f4      	bne.n	801211c <tcp_segs_free+0xa>
  }
}
 8012132:	bf00      	nop
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}

0801213a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801213a:	b580      	push	{r7, lr}
 801213c:	b082      	sub	sp, #8
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d00c      	beq.n	8012162 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d004      	beq.n	801215a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	4618      	mov	r0, r3
 8012156:	f7fe fcd7 	bl	8010b08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801215a:	6879      	ldr	r1, [r7, #4]
 801215c:	2003      	movs	r0, #3
 801215e:	f7fd ff3b 	bl	800ffd8 <memp_free>
  }
}
 8012162:	bf00      	nop
 8012164:	3708      	adds	r7, #8
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b084      	sub	sp, #16
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012172:	2003      	movs	r0, #3
 8012174:	f7fd feba 	bl	800feec <memp_malloc>
 8012178:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d101      	bne.n	8012184 <tcp_seg_copy+0x1a>
    return NULL;
 8012180:	2300      	movs	r3, #0
 8012182:	e00a      	b.n	801219a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012184:	2210      	movs	r2, #16
 8012186:	6879      	ldr	r1, [r7, #4]
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f007 f986 	bl	801949a <memcpy>
  pbuf_ref(cseg->p);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4618      	mov	r0, r3
 8012194:	f7fe fd6a 	bl	8010c6c <pbuf_ref>
  return cseg;
 8012198:	68fb      	ldr	r3, [r7, #12]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b084      	sub	sp, #16
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	60f8      	str	r0, [r7, #12]
 80121aa:	60b9      	str	r1, [r7, #8]
 80121ac:	607a      	str	r2, [r7, #4]
 80121ae:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d009      	beq.n	80121ca <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	891b      	ldrh	r3, [r3, #8]
 80121ba:	4619      	mov	r1, r3
 80121bc:	68b8      	ldr	r0, [r7, #8]
 80121be:	f7ff fb7d 	bl	80118bc <tcp_recved>
    pbuf_free(p);
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f7fe fca0 	bl	8010b08 <pbuf_free>
 80121c8:	e008      	b.n	80121dc <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80121ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d104      	bne.n	80121dc <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80121d2:	68b8      	ldr	r0, [r7, #8]
 80121d4:	f7ff f8cc 	bl	8011370 <tcp_close>
 80121d8:	4603      	mov	r3, r0
 80121da:	e000      	b.n	80121de <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80121dc:	2300      	movs	r3, #0
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
	...

080121e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	4603      	mov	r3, r0
 80121f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80121f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	db01      	blt.n	80121fe <tcp_kill_prio+0x16>
 80121fa:	79fb      	ldrb	r3, [r7, #7]
 80121fc:	e000      	b.n	8012200 <tcp_kill_prio+0x18>
 80121fe:	237f      	movs	r3, #127	; 0x7f
 8012200:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8012202:	2300      	movs	r3, #0
 8012204:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012206:	2300      	movs	r3, #0
 8012208:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801220a:	4b16      	ldr	r3, [pc, #88]	; (8012264 <tcp_kill_prio+0x7c>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	617b      	str	r3, [r7, #20]
 8012210:	e01a      	b.n	8012248 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	7d5b      	ldrb	r3, [r3, #21]
 8012216:	7afa      	ldrb	r2, [r7, #11]
 8012218:	429a      	cmp	r2, r3
 801221a:	d312      	bcc.n	8012242 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801221c:	4b12      	ldr	r3, [pc, #72]	; (8012268 <tcp_kill_prio+0x80>)
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	6a1b      	ldr	r3, [r3, #32]
 8012224:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	429a      	cmp	r2, r3
 801222a:	d80a      	bhi.n	8012242 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801222c:	4b0e      	ldr	r3, [pc, #56]	; (8012268 <tcp_kill_prio+0x80>)
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	6a1b      	ldr	r3, [r3, #32]
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	7d5b      	ldrb	r3, [r3, #21]
 8012240:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	617b      	str	r3, [r7, #20]
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d1e1      	bne.n	8012212 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d002      	beq.n	801225a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012254:	6938      	ldr	r0, [r7, #16]
 8012256:	f7ff f99d 	bl	8011594 <tcp_abort>
  }
}
 801225a:	bf00      	nop
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	200101cc 	.word	0x200101cc
 8012268:	200101d0 	.word	0x200101d0

0801226c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b086      	sub	sp, #24
 8012270:	af00      	add	r7, sp, #0
 8012272:	4603      	mov	r3, r0
 8012274:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	2b08      	cmp	r3, #8
 801227a:	d009      	beq.n	8012290 <tcp_kill_state+0x24>
 801227c:	79fb      	ldrb	r3, [r7, #7]
 801227e:	2b09      	cmp	r3, #9
 8012280:	d006      	beq.n	8012290 <tcp_kill_state+0x24>
 8012282:	4b1a      	ldr	r3, [pc, #104]	; (80122ec <tcp_kill_state+0x80>)
 8012284:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012288:	4919      	ldr	r1, [pc, #100]	; (80122f0 <tcp_kill_state+0x84>)
 801228a:	481a      	ldr	r0, [pc, #104]	; (80122f4 <tcp_kill_state+0x88>)
 801228c:	f007 f918 	bl	80194c0 <iprintf>

  inactivity = 0;
 8012290:	2300      	movs	r3, #0
 8012292:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012294:	2300      	movs	r3, #0
 8012296:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012298:	4b17      	ldr	r3, [pc, #92]	; (80122f8 <tcp_kill_state+0x8c>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	617b      	str	r3, [r7, #20]
 801229e:	e017      	b.n	80122d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	7d1b      	ldrb	r3, [r3, #20]
 80122a4:	79fa      	ldrb	r2, [r7, #7]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d10f      	bne.n	80122ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80122aa:	4b14      	ldr	r3, [pc, #80]	; (80122fc <tcp_kill_state+0x90>)
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	6a1b      	ldr	r3, [r3, #32]
 80122b2:	1ad3      	subs	r3, r2, r3
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d807      	bhi.n	80122ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80122ba:	4b10      	ldr	r3, [pc, #64]	; (80122fc <tcp_kill_state+0x90>)
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	6a1b      	ldr	r3, [r3, #32]
 80122c2:	1ad3      	subs	r3, r2, r3
 80122c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	617b      	str	r3, [r7, #20]
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1e4      	bne.n	80122a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d003      	beq.n	80122e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80122dc:	2100      	movs	r1, #0
 80122de:	6938      	ldr	r0, [r7, #16]
 80122e0:	f7ff f8a6 	bl	8011430 <tcp_abandon>
  }
}
 80122e4:	bf00      	nop
 80122e6:	3718      	adds	r7, #24
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	0801bb44 	.word	0x0801bb44
 80122f0:	0801be78 	.word	0x0801be78
 80122f4:	0801bba4 	.word	0x0801bba4
 80122f8:	200101cc 	.word	0x200101cc
 80122fc:	200101d0 	.word	0x200101d0

08012300 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012306:	2300      	movs	r3, #0
 8012308:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801230a:	2300      	movs	r3, #0
 801230c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801230e:	4b12      	ldr	r3, [pc, #72]	; (8012358 <tcp_kill_timewait+0x58>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	60fb      	str	r3, [r7, #12]
 8012314:	e012      	b.n	801233c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012316:	4b11      	ldr	r3, [pc, #68]	; (801235c <tcp_kill_timewait+0x5c>)
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	6a1b      	ldr	r3, [r3, #32]
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	429a      	cmp	r2, r3
 8012324:	d807      	bhi.n	8012336 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012326:	4b0d      	ldr	r3, [pc, #52]	; (801235c <tcp_kill_timewait+0x5c>)
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6a1b      	ldr	r3, [r3, #32]
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d1e9      	bne.n	8012316 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d002      	beq.n	801234e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012348:	68b8      	ldr	r0, [r7, #8]
 801234a:	f7ff f923 	bl	8011594 <tcp_abort>
  }
}
 801234e:	bf00      	nop
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	200101dc 	.word	0x200101dc
 801235c:	200101d0 	.word	0x200101d0

08012360 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	4603      	mov	r3, r0
 8012368:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801236a:	2001      	movs	r0, #1
 801236c:	f7fd fdbe 	bl	800feec <memp_malloc>
 8012370:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d124      	bne.n	80123c2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012378:	f7ff ffc2 	bl	8012300 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801237c:	2001      	movs	r0, #1
 801237e:	f7fd fdb5 	bl	800feec <memp_malloc>
 8012382:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d11b      	bne.n	80123c2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801238a:	2009      	movs	r0, #9
 801238c:	f7ff ff6e 	bl	801226c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012390:	2001      	movs	r0, #1
 8012392:	f7fd fdab 	bl	800feec <memp_malloc>
 8012396:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d111      	bne.n	80123c2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801239e:	2008      	movs	r0, #8
 80123a0:	f7ff ff64 	bl	801226c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123a4:	2001      	movs	r0, #1
 80123a6:	f7fd fda1 	bl	800feec <memp_malloc>
 80123aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d107      	bne.n	80123c2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80123b2:	79fb      	ldrb	r3, [r7, #7]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ff ff17 	bl	80121e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123ba:	2001      	movs	r0, #1
 80123bc:	f7fd fd96 	bl	800feec <memp_malloc>
 80123c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d03f      	beq.n	8012448 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80123c8:	2298      	movs	r2, #152	; 0x98
 80123ca:	2100      	movs	r1, #0
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f007 f86f 	bl	80194b0 <memset>
    pcb->prio = prio;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	79fa      	ldrb	r2, [r7, #7]
 80123d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80123de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80123e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	22ff      	movs	r2, #255	; 0xff
 80123f6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80123fe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2206      	movs	r2, #6
 8012404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2206      	movs	r2, #6
 801240c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012414:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	2201      	movs	r2, #1
 801241a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801241e:	4b0d      	ldr	r3, [pc, #52]	; (8012454 <tcp_alloc+0xf4>)
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012426:	4b0c      	ldr	r3, [pc, #48]	; (8012458 <tcp_alloc+0xf8>)
 8012428:	781a      	ldrb	r2, [r3, #0]
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	4a08      	ldr	r2, [pc, #32]	; (801245c <tcp_alloc+0xfc>)
 801243c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	4a07      	ldr	r2, [pc, #28]	; (8012460 <tcp_alloc+0x100>)
 8012444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012448:	68fb      	ldr	r3, [r7, #12]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	200101d0 	.word	0x200101d0
 8012458:	2000c802 	.word	0x2000c802
 801245c:	080121a3 	.word	0x080121a3
 8012460:	006ddd00 	.word	0x006ddd00

08012464 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	4603      	mov	r3, r0
 801246c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801246e:	2040      	movs	r0, #64	; 0x40
 8012470:	f7ff ff76 	bl	8012360 <tcp_alloc>
 8012474:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012476:	68fb      	ldr	r3, [r7, #12]
}
 8012478:	4618      	mov	r0, r3
 801247a:	3710      	adds	r7, #16
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d002      	beq.n	8012496 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	683a      	ldr	r2, [r7, #0]
 8012494:	611a      	str	r2, [r3, #16]
  }
}
 8012496:	bf00      	nop
 8012498:	370c      	adds	r7, #12
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr
	...

080124a4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00e      	beq.n	80124d2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	7d1b      	ldrb	r3, [r3, #20]
 80124b8:	2b01      	cmp	r3, #1
 80124ba:	d106      	bne.n	80124ca <tcp_recv+0x26>
 80124bc:	4b07      	ldr	r3, [pc, #28]	; (80124dc <tcp_recv+0x38>)
 80124be:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80124c2:	4907      	ldr	r1, [pc, #28]	; (80124e0 <tcp_recv+0x3c>)
 80124c4:	4807      	ldr	r0, [pc, #28]	; (80124e4 <tcp_recv+0x40>)
 80124c6:	f006 fffb 	bl	80194c0 <iprintf>
    pcb->recv = recv;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80124d2:	bf00      	nop
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	0801bb44 	.word	0x0801bb44
 80124e0:	0801be88 	.word	0x0801be88
 80124e4:	0801bba4 	.word	0x0801bba4

080124e8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d00d      	beq.n	8012514 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	7d1b      	ldrb	r3, [r3, #20]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d106      	bne.n	801250e <tcp_sent+0x26>
 8012500:	4b06      	ldr	r3, [pc, #24]	; (801251c <tcp_sent+0x34>)
 8012502:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8012506:	4906      	ldr	r1, [pc, #24]	; (8012520 <tcp_sent+0x38>)
 8012508:	4806      	ldr	r0, [pc, #24]	; (8012524 <tcp_sent+0x3c>)
 801250a:	f006 ffd9 	bl	80194c0 <iprintf>
    pcb->sent = sent;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	683a      	ldr	r2, [r7, #0]
 8012512:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8012514:	bf00      	nop
 8012516:	3708      	adds	r7, #8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	0801bb44 	.word	0x0801bb44
 8012520:	0801beb0 	.word	0x0801beb0
 8012524:	0801bba4 	.word	0x0801bba4

08012528 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00e      	beq.n	8012556 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	7d1b      	ldrb	r3, [r3, #20]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d106      	bne.n	801254e <tcp_err+0x26>
 8012540:	4b07      	ldr	r3, [pc, #28]	; (8012560 <tcp_err+0x38>)
 8012542:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8012546:	4907      	ldr	r1, [pc, #28]	; (8012564 <tcp_err+0x3c>)
 8012548:	4807      	ldr	r0, [pc, #28]	; (8012568 <tcp_err+0x40>)
 801254a:	f006 ffb9 	bl	80194c0 <iprintf>
    pcb->errf = err;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	683a      	ldr	r2, [r7, #0]
 8012552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8012556:	bf00      	nop
 8012558:	3708      	adds	r7, #8
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	0801bb44 	.word	0x0801bb44
 8012564:	0801bed8 	.word	0x0801bed8
 8012568:	0801bba4 	.word	0x0801bba4

0801256c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801256c:	b480      	push	{r7}
 801256e:	b085      	sub	sp, #20
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d008      	beq.n	801258e <tcp_accept+0x22>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	7d1b      	ldrb	r3, [r3, #20]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d104      	bne.n	801258e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	683a      	ldr	r2, [r7, #0]
 801258c:	619a      	str	r2, [r3, #24]
  }
}
 801258e:	bf00      	nop
 8012590:	3714      	adds	r7, #20
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr
	...

0801259c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	4613      	mov	r3, r2
 80125a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	7d1b      	ldrb	r3, [r3, #20]
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d106      	bne.n	80125c0 <tcp_poll+0x24>
 80125b2:	4b09      	ldr	r3, [pc, #36]	; (80125d8 <tcp_poll+0x3c>)
 80125b4:	f240 7203 	movw	r2, #1795	; 0x703
 80125b8:	4908      	ldr	r1, [pc, #32]	; (80125dc <tcp_poll+0x40>)
 80125ba:	4809      	ldr	r0, [pc, #36]	; (80125e0 <tcp_poll+0x44>)
 80125bc:	f006 ff80 	bl	80194c0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	79fa      	ldrb	r2, [r7, #7]
 80125cc:	771a      	strb	r2, [r3, #28]
}
 80125ce:	bf00      	nop
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	0801bb44 	.word	0x0801bb44
 80125dc:	0801bf00 	.word	0x0801bf00
 80125e0:	0801bba4 	.word	0x0801bba4

080125e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	7d1b      	ldrb	r3, [r3, #20]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d034      	beq.n	801265e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80125f8:	2b0a      	cmp	r3, #10
 80125fa:	d030      	beq.n	801265e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8012600:	2b01      	cmp	r3, #1
 8012602:	d02c      	beq.n	801265e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012608:	2b00      	cmp	r3, #0
 801260a:	d007      	beq.n	801261c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012610:	4618      	mov	r0, r3
 8012612:	f7fe fa79 	bl	8010b08 <pbuf_free>
      pcb->refused_data = NULL;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff fd76 	bl	8012112 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2200      	movs	r2, #0
 801262a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012632:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012638:	4618      	mov	r0, r3
 801263a:	f7ff fd6a 	bl	8012112 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012642:	4618      	mov	r0, r3
 8012644:	f7ff fd65 	bl	8012112 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2200      	movs	r2, #0
 801264c:	669a      	str	r2, [r3, #104]	; 0x68
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2200      	movs	r2, #0
 801265a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801265e:	bf00      	nop
 8012660:	3708      	adds	r7, #8
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
	...

08012668 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	683a      	ldr	r2, [r7, #0]
 8012678:	429a      	cmp	r2, r3
 801267a:	d105      	bne.n	8012688 <tcp_pcb_remove+0x20>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	68da      	ldr	r2, [r3, #12]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	e013      	b.n	80126b0 <tcp_pcb_remove+0x48>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	60fb      	str	r3, [r7, #12]
 801268e:	e00c      	b.n	80126aa <tcp_pcb_remove+0x42>
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	429a      	cmp	r2, r3
 8012698:	d104      	bne.n	80126a4 <tcp_pcb_remove+0x3c>
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	68da      	ldr	r2, [r3, #12]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	60da      	str	r2, [r3, #12]
 80126a2:	e005      	b.n	80126b0 <tcp_pcb_remove+0x48>
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	60fb      	str	r3, [r7, #12]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1ef      	bne.n	8012690 <tcp_pcb_remove+0x28>
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	2200      	movs	r2, #0
 80126b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80126b6:	6838      	ldr	r0, [r7, #0]
 80126b8:	f7ff ff94 	bl	80125e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	7d1b      	ldrb	r3, [r3, #20]
 80126c0:	2b0a      	cmp	r3, #10
 80126c2:	d013      	beq.n	80126ec <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80126c8:	2b01      	cmp	r3, #1
 80126ca:	d00f      	beq.n	80126ec <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	7e9b      	ldrb	r3, [r3, #26]
 80126d0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d009      	beq.n	80126ec <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	7e9b      	ldrb	r3, [r3, #26]
 80126dc:	f043 0302 	orr.w	r3, r3, #2
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80126e6:	6838      	ldr	r0, [r7, #0]
 80126e8:	f003 f9be 	bl	8015a68 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	7d1b      	ldrb	r3, [r3, #20]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d020      	beq.n	8012736 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d006      	beq.n	801270a <tcp_pcb_remove+0xa2>
 80126fc:	4b13      	ldr	r3, [pc, #76]	; (801274c <tcp_pcb_remove+0xe4>)
 80126fe:	f240 7253 	movw	r2, #1875	; 0x753
 8012702:	4913      	ldr	r1, [pc, #76]	; (8012750 <tcp_pcb_remove+0xe8>)
 8012704:	4813      	ldr	r0, [pc, #76]	; (8012754 <tcp_pcb_remove+0xec>)
 8012706:	f006 fedb 	bl	80194c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801270e:	2b00      	cmp	r3, #0
 8012710:	d006      	beq.n	8012720 <tcp_pcb_remove+0xb8>
 8012712:	4b0e      	ldr	r3, [pc, #56]	; (801274c <tcp_pcb_remove+0xe4>)
 8012714:	f240 7254 	movw	r2, #1876	; 0x754
 8012718:	490f      	ldr	r1, [pc, #60]	; (8012758 <tcp_pcb_remove+0xf0>)
 801271a:	480e      	ldr	r0, [pc, #56]	; (8012754 <tcp_pcb_remove+0xec>)
 801271c:	f006 fed0 	bl	80194c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012724:	2b00      	cmp	r3, #0
 8012726:	d006      	beq.n	8012736 <tcp_pcb_remove+0xce>
 8012728:	4b08      	ldr	r3, [pc, #32]	; (801274c <tcp_pcb_remove+0xe4>)
 801272a:	f240 7256 	movw	r2, #1878	; 0x756
 801272e:	490b      	ldr	r1, [pc, #44]	; (801275c <tcp_pcb_remove+0xf4>)
 8012730:	4808      	ldr	r0, [pc, #32]	; (8012754 <tcp_pcb_remove+0xec>)
 8012732:	f006 fec5 	bl	80194c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	2200      	movs	r2, #0
 801273a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	2200      	movs	r2, #0
 8012740:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012742:	bf00      	nop
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	0801bb44 	.word	0x0801bb44
 8012750:	0801bf20 	.word	0x0801bf20
 8012754:	0801bba4 	.word	0x0801bba4
 8012758:	0801bf38 	.word	0x0801bf38
 801275c:	0801bf54 	.word	0x0801bf54

08012760 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012768:	4b07      	ldr	r3, [pc, #28]	; (8012788 <tcp_next_iss+0x28>)
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	4b07      	ldr	r3, [pc, #28]	; (801278c <tcp_next_iss+0x2c>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4413      	add	r3, r2
 8012772:	4a05      	ldr	r2, [pc, #20]	; (8012788 <tcp_next_iss+0x28>)
 8012774:	6013      	str	r3, [r2, #0]
  return iss;
 8012776:	4b04      	ldr	r3, [pc, #16]	; (8012788 <tcp_next_iss+0x28>)
 8012778:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801277a:	4618      	mov	r0, r3
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	2000002c 	.word	0x2000002c
 801278c:	200101d0 	.word	0x200101d0

08012790 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	4603      	mov	r3, r0
 8012798:	6039      	str	r1, [r7, #0]
 801279a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801279c:	6838      	ldr	r0, [r7, #0]
 801279e:	f005 faed 	bl	8017d7c <ip4_route>
 80127a2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d101      	bne.n	80127ae <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80127aa:	88fb      	ldrh	r3, [r7, #6]
 80127ac:	e010      	b.n	80127d0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80127b2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80127b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d008      	beq.n	80127ce <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80127bc:	897b      	ldrh	r3, [r7, #10]
 80127be:	3b28      	subs	r3, #40	; 0x28
 80127c0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80127c2:	893a      	ldrh	r2, [r7, #8]
 80127c4:	88fb      	ldrh	r3, [r7, #6]
 80127c6:	4293      	cmp	r3, r2
 80127c8:	bf28      	it	cs
 80127ca:	4613      	movcs	r3, r2
 80127cc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80127ce:	88fb      	ldrh	r3, [r7, #6]
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3710      	adds	r7, #16
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80127e6:	e011      	b.n	801280c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d108      	bne.n	8012806 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80127fa:	68f8      	ldr	r0, [r7, #12]
 80127fc:	f7fe feca 	bl	8011594 <tcp_abort>
      pcb = next;
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	60fb      	str	r3, [r7, #12]
 8012804:	e002      	b.n	801280c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1ea      	bne.n	80127e8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8012812:	bf00      	nop
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
	...

0801281c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d02c      	beq.n	8012886 <tcp_netif_ip_addr_changed+0x6a>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d028      	beq.n	8012886 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012834:	4b16      	ldr	r3, [pc, #88]	; (8012890 <tcp_netif_ip_addr_changed+0x74>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4619      	mov	r1, r3
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7ff ffcc 	bl	80127d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012840:	4b14      	ldr	r3, [pc, #80]	; (8012894 <tcp_netif_ip_addr_changed+0x78>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4619      	mov	r1, r3
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7ff ffc6 	bl	80127d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d019      	beq.n	8012886 <tcp_netif_ip_addr_changed+0x6a>
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d015      	beq.n	8012886 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801285a:	4b0f      	ldr	r3, [pc, #60]	; (8012898 <tcp_netif_ip_addr_changed+0x7c>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	60fb      	str	r3, [r7, #12]
 8012860:	e00e      	b.n	8012880 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	429a      	cmp	r2, r3
 8012872:	d103      	bne.n	801287c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	60fb      	str	r3, [r7, #12]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d1ed      	bne.n	8012862 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012886:	bf00      	nop
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	200101cc 	.word	0x200101cc
 8012894:	200101d8 	.word	0x200101d8
 8012898:	200101d4 	.word	0x200101d4

0801289c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801289c:	b590      	push	{r4, r7, lr}
 801289e:	b08b      	sub	sp, #44	; 0x2c
 80128a0:	af02      	add	r7, sp, #8
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	4a82      	ldr	r2, [pc, #520]	; (8012ab4 <tcp_input+0x218>)
 80128ac:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	895b      	ldrh	r3, [r3, #10]
 80128b2:	2b13      	cmp	r3, #19
 80128b4:	f240 838a 	bls.w	8012fcc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128b8:	4b7f      	ldr	r3, [pc, #508]	; (8012ab8 <tcp_input+0x21c>)
 80128ba:	695a      	ldr	r2, [r3, #20]
 80128bc:	4b7e      	ldr	r3, [pc, #504]	; (8012ab8 <tcp_input+0x21c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4619      	mov	r1, r3
 80128c2:	4610      	mov	r0, r2
 80128c4:	f005 fcd4 	bl	8018270 <ip4_addr_isbroadcast_u32>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f040 8380 	bne.w	8012fd0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80128d0:	4b79      	ldr	r3, [pc, #484]	; (8012ab8 <tcp_input+0x21c>)
 80128d2:	695b      	ldr	r3, [r3, #20]
 80128d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128d8:	2be0      	cmp	r3, #224	; 0xe0
 80128da:	f000 8379 	beq.w	8012fd0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80128de:	4b75      	ldr	r3, [pc, #468]	; (8012ab4 <tcp_input+0x218>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	899b      	ldrh	r3, [r3, #12]
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fc fef4 	bl	800f6d4 <lwip_htons>
 80128ec:	4603      	mov	r3, r0
 80128ee:	0b1b      	lsrs	r3, r3, #12
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80128f8:	7cbb      	ldrb	r3, [r7, #18]
 80128fa:	2b13      	cmp	r3, #19
 80128fc:	f240 8368 	bls.w	8012fd0 <tcp_input+0x734>
 8012900:	7cbb      	ldrb	r3, [r7, #18]
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	891b      	ldrh	r3, [r3, #8]
 8012908:	429a      	cmp	r2, r3
 801290a:	f200 8361 	bhi.w	8012fd0 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801290e:	7cbb      	ldrb	r3, [r7, #18]
 8012910:	b29b      	uxth	r3, r3
 8012912:	3b14      	subs	r3, #20
 8012914:	b29a      	uxth	r2, r3
 8012916:	4b69      	ldr	r3, [pc, #420]	; (8012abc <tcp_input+0x220>)
 8012918:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801291a:	4b69      	ldr	r3, [pc, #420]	; (8012ac0 <tcp_input+0x224>)
 801291c:	2200      	movs	r2, #0
 801291e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	895a      	ldrh	r2, [r3, #10]
 8012924:	7cbb      	ldrb	r3, [r7, #18]
 8012926:	b29b      	uxth	r3, r3
 8012928:	429a      	cmp	r2, r3
 801292a:	d30d      	bcc.n	8012948 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801292c:	4b63      	ldr	r3, [pc, #396]	; (8012abc <tcp_input+0x220>)
 801292e:	881a      	ldrh	r2, [r3, #0]
 8012930:	4b64      	ldr	r3, [pc, #400]	; (8012ac4 <tcp_input+0x228>)
 8012932:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8012934:	7cbb      	ldrb	r3, [r7, #18]
 8012936:	b29b      	uxth	r3, r3
 8012938:	425b      	negs	r3, r3
 801293a:	b29b      	uxth	r3, r3
 801293c:	b21b      	sxth	r3, r3
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7fe f8bd 	bl	8010ac0 <pbuf_header>
 8012946:	e055      	b.n	80129f4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d105      	bne.n	801295c <tcp_input+0xc0>
 8012950:	4b5d      	ldr	r3, [pc, #372]	; (8012ac8 <tcp_input+0x22c>)
 8012952:	22b2      	movs	r2, #178	; 0xb2
 8012954:	495d      	ldr	r1, [pc, #372]	; (8012acc <tcp_input+0x230>)
 8012956:	485e      	ldr	r0, [pc, #376]	; (8012ad0 <tcp_input+0x234>)
 8012958:	f006 fdb2 	bl	80194c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801295c:	f06f 0113 	mvn.w	r1, #19
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7fe f8ad 	bl	8010ac0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	895a      	ldrh	r2, [r3, #10]
 801296a:	4b56      	ldr	r3, [pc, #344]	; (8012ac4 <tcp_input+0x228>)
 801296c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801296e:	4b53      	ldr	r3, [pc, #332]	; (8012abc <tcp_input+0x220>)
 8012970:	881a      	ldrh	r2, [r3, #0]
 8012972:	4b54      	ldr	r3, [pc, #336]	; (8012ac4 <tcp_input+0x228>)
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801297a:	4b52      	ldr	r3, [pc, #328]	; (8012ac4 <tcp_input+0x228>)
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	425b      	negs	r3, r3
 8012980:	b29b      	uxth	r3, r3
 8012982:	b21b      	sxth	r3, r3
 8012984:	4619      	mov	r1, r3
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f7fe f89a 	bl	8010ac0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	895b      	ldrh	r3, [r3, #10]
 8012992:	8a3a      	ldrh	r2, [r7, #16]
 8012994:	429a      	cmp	r2, r3
 8012996:	f200 831d 	bhi.w	8012fd4 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	4a47      	ldr	r2, [pc, #284]	; (8012ac0 <tcp_input+0x224>)
 80129a2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	8a3b      	ldrh	r3, [r7, #16]
 80129aa:	425b      	negs	r3, r3
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	b21b      	sxth	r3, r3
 80129b0:	4619      	mov	r1, r3
 80129b2:	4610      	mov	r0, r2
 80129b4:	f7fe f884 	bl	8010ac0 <pbuf_header>
    p->tot_len -= opt2len;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	891a      	ldrh	r2, [r3, #8]
 80129bc:	8a3b      	ldrh	r3, [r7, #16]
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	895b      	ldrh	r3, [r3, #10]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d005      	beq.n	80129da <tcp_input+0x13e>
 80129ce:	4b3e      	ldr	r3, [pc, #248]	; (8012ac8 <tcp_input+0x22c>)
 80129d0:	22cf      	movs	r2, #207	; 0xcf
 80129d2:	4940      	ldr	r1, [pc, #256]	; (8012ad4 <tcp_input+0x238>)
 80129d4:	483e      	ldr	r0, [pc, #248]	; (8012ad0 <tcp_input+0x234>)
 80129d6:	f006 fd73 	bl	80194c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	891a      	ldrh	r2, [r3, #8]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	891b      	ldrh	r3, [r3, #8]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d005      	beq.n	80129f4 <tcp_input+0x158>
 80129e8:	4b37      	ldr	r3, [pc, #220]	; (8012ac8 <tcp_input+0x22c>)
 80129ea:	22d0      	movs	r2, #208	; 0xd0
 80129ec:	493a      	ldr	r1, [pc, #232]	; (8012ad8 <tcp_input+0x23c>)
 80129ee:	4838      	ldr	r0, [pc, #224]	; (8012ad0 <tcp_input+0x234>)
 80129f0:	f006 fd66 	bl	80194c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80129f4:	4b2f      	ldr	r3, [pc, #188]	; (8012ab4 <tcp_input+0x218>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	881b      	ldrh	r3, [r3, #0]
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	4b2d      	ldr	r3, [pc, #180]	; (8012ab4 <tcp_input+0x218>)
 80129fe:	681c      	ldr	r4, [r3, #0]
 8012a00:	4610      	mov	r0, r2
 8012a02:	f7fc fe67 	bl	800f6d4 <lwip_htons>
 8012a06:	4603      	mov	r3, r0
 8012a08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012a0a:	4b2a      	ldr	r3, [pc, #168]	; (8012ab4 <tcp_input+0x218>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	885b      	ldrh	r3, [r3, #2]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	4b28      	ldr	r3, [pc, #160]	; (8012ab4 <tcp_input+0x218>)
 8012a14:	681c      	ldr	r4, [r3, #0]
 8012a16:	4610      	mov	r0, r2
 8012a18:	f7fc fe5c 	bl	800f6d4 <lwip_htons>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012a20:	4b24      	ldr	r3, [pc, #144]	; (8012ab4 <tcp_input+0x218>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	685a      	ldr	r2, [r3, #4]
 8012a26:	4b23      	ldr	r3, [pc, #140]	; (8012ab4 <tcp_input+0x218>)
 8012a28:	681c      	ldr	r4, [r3, #0]
 8012a2a:	4610      	mov	r0, r2
 8012a2c:	f7fc fe60 	bl	800f6f0 <lwip_htonl>
 8012a30:	4603      	mov	r3, r0
 8012a32:	6063      	str	r3, [r4, #4]
 8012a34:	6863      	ldr	r3, [r4, #4]
 8012a36:	4a29      	ldr	r2, [pc, #164]	; (8012adc <tcp_input+0x240>)
 8012a38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012a3a:	4b1e      	ldr	r3, [pc, #120]	; (8012ab4 <tcp_input+0x218>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	689a      	ldr	r2, [r3, #8]
 8012a40:	4b1c      	ldr	r3, [pc, #112]	; (8012ab4 <tcp_input+0x218>)
 8012a42:	681c      	ldr	r4, [r3, #0]
 8012a44:	4610      	mov	r0, r2
 8012a46:	f7fc fe53 	bl	800f6f0 <lwip_htonl>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	60a3      	str	r3, [r4, #8]
 8012a4e:	68a3      	ldr	r3, [r4, #8]
 8012a50:	4a23      	ldr	r2, [pc, #140]	; (8012ae0 <tcp_input+0x244>)
 8012a52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012a54:	4b17      	ldr	r3, [pc, #92]	; (8012ab4 <tcp_input+0x218>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	89db      	ldrh	r3, [r3, #14]
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	4b15      	ldr	r3, [pc, #84]	; (8012ab4 <tcp_input+0x218>)
 8012a5e:	681c      	ldr	r4, [r3, #0]
 8012a60:	4610      	mov	r0, r2
 8012a62:	f7fc fe37 	bl	800f6d4 <lwip_htons>
 8012a66:	4603      	mov	r3, r0
 8012a68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012a6a:	4b12      	ldr	r3, [pc, #72]	; (8012ab4 <tcp_input+0x218>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	899b      	ldrh	r3, [r3, #12]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fc fe2e 	bl	800f6d4 <lwip_htons>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a80:	b2da      	uxtb	r2, r3
 8012a82:	4b18      	ldr	r3, [pc, #96]	; (8012ae4 <tcp_input+0x248>)
 8012a84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	891a      	ldrh	r2, [r3, #8]
 8012a8a:	4b16      	ldr	r3, [pc, #88]	; (8012ae4 <tcp_input+0x248>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	f003 0303 	and.w	r3, r3, #3
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	bf14      	ite	ne
 8012a96:	2301      	movne	r3, #1
 8012a98:	2300      	moveq	r3, #0
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	4413      	add	r3, r2
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	4b11      	ldr	r3, [pc, #68]	; (8012ae8 <tcp_input+0x24c>)
 8012aa4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012aaa:	4b10      	ldr	r3, [pc, #64]	; (8012aec <tcp_input+0x250>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	61fb      	str	r3, [r7, #28]
 8012ab0:	e082      	b.n	8012bb8 <tcp_input+0x31c>
 8012ab2:	bf00      	nop
 8012ab4:	2000c814 	.word	0x2000c814
 8012ab8:	2000d110 	.word	0x2000d110
 8012abc:	2000c818 	.word	0x2000c818
 8012ac0:	2000c81c 	.word	0x2000c81c
 8012ac4:	2000c81a 	.word	0x2000c81a
 8012ac8:	0801bf6c 	.word	0x0801bf6c
 8012acc:	0801bfc4 	.word	0x0801bfc4
 8012ad0:	0801bfd4 	.word	0x0801bfd4
 8012ad4:	0801bffc 	.word	0x0801bffc
 8012ad8:	0801c008 	.word	0x0801c008
 8012adc:	2000c824 	.word	0x2000c824
 8012ae0:	2000c828 	.word	0x2000c828
 8012ae4:	2000c830 	.word	0x2000c830
 8012ae8:	2000c82e 	.word	0x2000c82e
 8012aec:	200101cc 	.word	0x200101cc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	7d1b      	ldrb	r3, [r3, #20]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d105      	bne.n	8012b04 <tcp_input+0x268>
 8012af8:	4b8f      	ldr	r3, [pc, #572]	; (8012d38 <tcp_input+0x49c>)
 8012afa:	22e2      	movs	r2, #226	; 0xe2
 8012afc:	498f      	ldr	r1, [pc, #572]	; (8012d3c <tcp_input+0x4a0>)
 8012afe:	4890      	ldr	r0, [pc, #576]	; (8012d40 <tcp_input+0x4a4>)
 8012b00:	f006 fcde 	bl	80194c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012b04:	69fb      	ldr	r3, [r7, #28]
 8012b06:	7d1b      	ldrb	r3, [r3, #20]
 8012b08:	2b0a      	cmp	r3, #10
 8012b0a:	d105      	bne.n	8012b18 <tcp_input+0x27c>
 8012b0c:	4b8a      	ldr	r3, [pc, #552]	; (8012d38 <tcp_input+0x49c>)
 8012b0e:	22e3      	movs	r2, #227	; 0xe3
 8012b10:	498c      	ldr	r1, [pc, #560]	; (8012d44 <tcp_input+0x4a8>)
 8012b12:	488b      	ldr	r0, [pc, #556]	; (8012d40 <tcp_input+0x4a4>)
 8012b14:	f006 fcd4 	bl	80194c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	7d1b      	ldrb	r3, [r3, #20]
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d105      	bne.n	8012b2c <tcp_input+0x290>
 8012b20:	4b85      	ldr	r3, [pc, #532]	; (8012d38 <tcp_input+0x49c>)
 8012b22:	22e4      	movs	r2, #228	; 0xe4
 8012b24:	4988      	ldr	r1, [pc, #544]	; (8012d48 <tcp_input+0x4ac>)
 8012b26:	4886      	ldr	r0, [pc, #536]	; (8012d40 <tcp_input+0x4a4>)
 8012b28:	f006 fcca 	bl	80194c0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	8b1a      	ldrh	r2, [r3, #24]
 8012b30:	4b86      	ldr	r3, [pc, #536]	; (8012d4c <tcp_input+0x4b0>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d138      	bne.n	8012bae <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	8ada      	ldrh	r2, [r3, #22]
 8012b40:	4b82      	ldr	r3, [pc, #520]	; (8012d4c <tcp_input+0x4b0>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	885b      	ldrh	r3, [r3, #2]
 8012b46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d130      	bne.n	8012bae <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	685a      	ldr	r2, [r3, #4]
 8012b50:	4b7f      	ldr	r3, [pc, #508]	; (8012d50 <tcp_input+0x4b4>)
 8012b52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d12a      	bne.n	8012bae <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	4b7c      	ldr	r3, [pc, #496]	; (8012d50 <tcp_input+0x4b4>)
 8012b5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d124      	bne.n	8012bae <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	69fa      	ldr	r2, [r7, #28]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d105      	bne.n	8012b7a <tcp_input+0x2de>
 8012b6e:	4b72      	ldr	r3, [pc, #456]	; (8012d38 <tcp_input+0x49c>)
 8012b70:	22ec      	movs	r2, #236	; 0xec
 8012b72:	4978      	ldr	r1, [pc, #480]	; (8012d54 <tcp_input+0x4b8>)
 8012b74:	4872      	ldr	r0, [pc, #456]	; (8012d40 <tcp_input+0x4a4>)
 8012b76:	f006 fca3 	bl	80194c0 <iprintf>
      if (prev != NULL) {
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00a      	beq.n	8012b96 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	68da      	ldr	r2, [r3, #12]
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012b88:	4b73      	ldr	r3, [pc, #460]	; (8012d58 <tcp_input+0x4bc>)
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012b90:	4a71      	ldr	r2, [pc, #452]	; (8012d58 <tcp_input+0x4bc>)
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	69fa      	ldr	r2, [r7, #28]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d10f      	bne.n	8012bc0 <tcp_input+0x324>
 8012ba0:	4b65      	ldr	r3, [pc, #404]	; (8012d38 <tcp_input+0x49c>)
 8012ba2:	22f4      	movs	r2, #244	; 0xf4
 8012ba4:	496d      	ldr	r1, [pc, #436]	; (8012d5c <tcp_input+0x4c0>)
 8012ba6:	4866      	ldr	r0, [pc, #408]	; (8012d40 <tcp_input+0x4a4>)
 8012ba8:	f006 fc8a 	bl	80194c0 <iprintf>
      break;
 8012bac:	e008      	b.n	8012bc0 <tcp_input+0x324>
    }
    prev = pcb;
 8012bae:	69fb      	ldr	r3, [r7, #28]
 8012bb0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	68db      	ldr	r3, [r3, #12]
 8012bb6:	61fb      	str	r3, [r7, #28]
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d198      	bne.n	8012af0 <tcp_input+0x254>
 8012bbe:	e000      	b.n	8012bc2 <tcp_input+0x326>
      break;
 8012bc0:	bf00      	nop
  }

  if (pcb == NULL) {
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d173      	bne.n	8012cb0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bc8:	4b65      	ldr	r3, [pc, #404]	; (8012d60 <tcp_input+0x4c4>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	61fb      	str	r3, [r7, #28]
 8012bce:	e02f      	b.n	8012c30 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	7d1b      	ldrb	r3, [r3, #20]
 8012bd4:	2b0a      	cmp	r3, #10
 8012bd6:	d005      	beq.n	8012be4 <tcp_input+0x348>
 8012bd8:	4b57      	ldr	r3, [pc, #348]	; (8012d38 <tcp_input+0x49c>)
 8012bda:	22fe      	movs	r2, #254	; 0xfe
 8012bdc:	4961      	ldr	r1, [pc, #388]	; (8012d64 <tcp_input+0x4c8>)
 8012bde:	4858      	ldr	r0, [pc, #352]	; (8012d40 <tcp_input+0x4a4>)
 8012be0:	f006 fc6e 	bl	80194c0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	8b1a      	ldrh	r2, [r3, #24]
 8012be8:	4b58      	ldr	r3, [pc, #352]	; (8012d4c <tcp_input+0x4b0>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	881b      	ldrh	r3, [r3, #0]
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d11a      	bne.n	8012c2a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	8ada      	ldrh	r2, [r3, #22]
 8012bf8:	4b54      	ldr	r3, [pc, #336]	; (8012d4c <tcp_input+0x4b0>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	885b      	ldrh	r3, [r3, #2]
 8012bfe:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d112      	bne.n	8012c2a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	685a      	ldr	r2, [r3, #4]
 8012c08:	4b51      	ldr	r3, [pc, #324]	; (8012d50 <tcp_input+0x4b4>)
 8012c0a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d10c      	bne.n	8012c2a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	681a      	ldr	r2, [r3, #0]
 8012c14:	4b4e      	ldr	r3, [pc, #312]	; (8012d50 <tcp_input+0x4b4>)
 8012c16:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d106      	bne.n	8012c2a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8012c1c:	69f8      	ldr	r0, [r7, #28]
 8012c1e:	f000 fb15 	bl	801324c <tcp_timewait_input>
        pbuf_free(p);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7fd ff70 	bl	8010b08 <pbuf_free>
        return;
 8012c28:	e1da      	b.n	8012fe0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	68db      	ldr	r3, [r3, #12]
 8012c2e:	61fb      	str	r3, [r7, #28]
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d1cc      	bne.n	8012bd0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012c36:	2300      	movs	r3, #0
 8012c38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c3a:	4b4b      	ldr	r3, [pc, #300]	; (8012d68 <tcp_input+0x4cc>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	617b      	str	r3, [r7, #20]
 8012c40:	e019      	b.n	8012c76 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	8ada      	ldrh	r2, [r3, #22]
 8012c46:	4b41      	ldr	r3, [pc, #260]	; (8012d4c <tcp_input+0x4b0>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	885b      	ldrh	r3, [r3, #2]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d10c      	bne.n	8012c6c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	4b3e      	ldr	r3, [pc, #248]	; (8012d50 <tcp_input+0x4b4>)
 8012c58:	695b      	ldr	r3, [r3, #20]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d00f      	beq.n	8012c7e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d00d      	beq.n	8012c80 <tcp_input+0x3e4>
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d009      	beq.n	8012c80 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	617b      	str	r3, [r7, #20]
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1e2      	bne.n	8012c42 <tcp_input+0x3a6>
 8012c7c:	e000      	b.n	8012c80 <tcp_input+0x3e4>
            break;
 8012c7e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d014      	beq.n	8012cb0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00a      	beq.n	8012ca2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	68da      	ldr	r2, [r3, #12]
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012c94:	4b34      	ldr	r3, [pc, #208]	; (8012d68 <tcp_input+0x4cc>)
 8012c96:	681a      	ldr	r2, [r3, #0]
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012c9c:	4a32      	ldr	r2, [pc, #200]	; (8012d68 <tcp_input+0x4cc>)
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8012ca2:	6978      	ldr	r0, [r7, #20]
 8012ca4:	f000 f9f0 	bl	8013088 <tcp_listen_input>
      pbuf_free(p);
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7fd ff2d 	bl	8010b08 <pbuf_free>
      return;
 8012cae:	e197      	b.n	8012fe0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f000 8164 	beq.w	8012f80 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012cb8:	4b2c      	ldr	r3, [pc, #176]	; (8012d6c <tcp_input+0x4d0>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	891a      	ldrh	r2, [r3, #8]
 8012cc2:	4b2a      	ldr	r3, [pc, #168]	; (8012d6c <tcp_input+0x4d0>)
 8012cc4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012cc6:	4a29      	ldr	r2, [pc, #164]	; (8012d6c <tcp_input+0x4d0>)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012ccc:	4b1f      	ldr	r3, [pc, #124]	; (8012d4c <tcp_input+0x4b0>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a26      	ldr	r2, [pc, #152]	; (8012d6c <tcp_input+0x4d0>)
 8012cd2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012cd4:	4b26      	ldr	r3, [pc, #152]	; (8012d70 <tcp_input+0x4d4>)
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012cda:	4b26      	ldr	r3, [pc, #152]	; (8012d74 <tcp_input+0x4d8>)
 8012cdc:	2200      	movs	r2, #0
 8012cde:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012ce0:	4b25      	ldr	r3, [pc, #148]	; (8012d78 <tcp_input+0x4dc>)
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012ce6:	4b25      	ldr	r3, [pc, #148]	; (8012d7c <tcp_input+0x4e0>)
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	f003 0308 	and.w	r3, r3, #8
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d006      	beq.n	8012d00 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	7b5b      	ldrb	r3, [r3, #13]
 8012cf6:	f043 0301 	orr.w	r3, r3, #1
 8012cfa:	b2da      	uxtb	r2, r3
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d03d      	beq.n	8012d84 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d08:	69f8      	ldr	r0, [r7, #28]
 8012d0a:	f7ff f999 	bl	8012040 <tcp_process_refused_data>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	f113 0f0d 	cmn.w	r3, #13
 8012d14:	d007      	beq.n	8012d26 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d032      	beq.n	8012d84 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d1e:	4b18      	ldr	r3, [pc, #96]	; (8012d80 <tcp_input+0x4e4>)
 8012d20:	881b      	ldrh	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d02e      	beq.n	8012d84 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f040 8108 	bne.w	8012f40 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012d30:	69f8      	ldr	r0, [r7, #28]
 8012d32:	f002 fe3d 	bl	80159b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012d36:	e103      	b.n	8012f40 <tcp_input+0x6a4>
 8012d38:	0801bf6c 	.word	0x0801bf6c
 8012d3c:	0801c028 	.word	0x0801c028
 8012d40:	0801bfd4 	.word	0x0801bfd4
 8012d44:	0801c050 	.word	0x0801c050
 8012d48:	0801c07c 	.word	0x0801c07c
 8012d4c:	2000c814 	.word	0x2000c814
 8012d50:	2000d110 	.word	0x2000d110
 8012d54:	0801c0a4 	.word	0x0801c0a4
 8012d58:	200101cc 	.word	0x200101cc
 8012d5c:	0801c0d0 	.word	0x0801c0d0
 8012d60:	200101dc 	.word	0x200101dc
 8012d64:	0801c0fc 	.word	0x0801c0fc
 8012d68:	200101d4 	.word	0x200101d4
 8012d6c:	2000c804 	.word	0x2000c804
 8012d70:	2000c834 	.word	0x2000c834
 8012d74:	2000c831 	.word	0x2000c831
 8012d78:	2000c82c 	.word	0x2000c82c
 8012d7c:	2000c830 	.word	0x2000c830
 8012d80:	2000c82e 	.word	0x2000c82e
      }
    }
    tcp_input_pcb = pcb;
 8012d84:	4a98      	ldr	r2, [pc, #608]	; (8012fe8 <tcp_input+0x74c>)
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012d8a:	69f8      	ldr	r0, [r7, #28]
 8012d8c:	f000 fac6 	bl	801331c <tcp_process>
 8012d90:	4603      	mov	r3, r0
 8012d92:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012d94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d98:	f113 0f0d 	cmn.w	r3, #13
 8012d9c:	f000 80d2 	beq.w	8012f44 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8012da0:	4b92      	ldr	r3, [pc, #584]	; (8012fec <tcp_input+0x750>)
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	f003 0308 	and.w	r3, r3, #8
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d016      	beq.n	8012dda <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d008      	beq.n	8012dc8 <tcp_input+0x52c>
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012dbc:	69fa      	ldr	r2, [r7, #28]
 8012dbe:	6912      	ldr	r2, [r2, #16]
 8012dc0:	f06f 010d 	mvn.w	r1, #13
 8012dc4:	4610      	mov	r0, r2
 8012dc6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012dc8:	69f9      	ldr	r1, [r7, #28]
 8012dca:	4889      	ldr	r0, [pc, #548]	; (8012ff0 <tcp_input+0x754>)
 8012dcc:	f7ff fc4c 	bl	8012668 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012dd0:	69f9      	ldr	r1, [r7, #28]
 8012dd2:	2001      	movs	r0, #1
 8012dd4:	f7fd f900 	bl	800ffd8 <memp_free>
 8012dd8:	e0bf      	b.n	8012f5a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012dde:	4b85      	ldr	r3, [pc, #532]	; (8012ff4 <tcp_input+0x758>)
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d01b      	beq.n	8012e1e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012de6:	4b83      	ldr	r3, [pc, #524]	; (8012ff4 <tcp_input+0x758>)
 8012de8:	881b      	ldrh	r3, [r3, #0]
 8012dea:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d009      	beq.n	8012e08 <tcp_input+0x56c>
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012df8:	69fa      	ldr	r2, [r7, #28]
 8012dfa:	6910      	ldr	r0, [r2, #16]
 8012dfc:	89fa      	ldrh	r2, [r7, #14]
 8012dfe:	69f9      	ldr	r1, [r7, #28]
 8012e00:	4798      	blx	r3
 8012e02:	4603      	mov	r3, r0
 8012e04:	74fb      	strb	r3, [r7, #19]
 8012e06:	e001      	b.n	8012e0c <tcp_input+0x570>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e10:	f113 0f0d 	cmn.w	r3, #13
 8012e14:	f000 8098 	beq.w	8012f48 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e18:	4b76      	ldr	r3, [pc, #472]	; (8012ff4 <tcp_input+0x758>)
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e1e:	69f8      	ldr	r0, [r7, #28]
 8012e20:	f000 f900 	bl	8013024 <tcp_input_delayed_close>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f040 8090 	bne.w	8012f4c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012e2c:	4b72      	ldr	r3, [pc, #456]	; (8012ff8 <tcp_input+0x75c>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d041      	beq.n	8012eb8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d006      	beq.n	8012e4a <tcp_input+0x5ae>
 8012e3c:	4b6f      	ldr	r3, [pc, #444]	; (8012ffc <tcp_input+0x760>)
 8012e3e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012e42:	496f      	ldr	r1, [pc, #444]	; (8013000 <tcp_input+0x764>)
 8012e44:	486f      	ldr	r0, [pc, #444]	; (8013004 <tcp_input+0x768>)
 8012e46:	f006 fb3b 	bl	80194c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	7e9b      	ldrb	r3, [r3, #26]
 8012e4e:	f003 0310 	and.w	r3, r3, #16
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d008      	beq.n	8012e68 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012e56:	4b68      	ldr	r3, [pc, #416]	; (8012ff8 <tcp_input+0x75c>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fd fe54 	bl	8010b08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012e60:	69f8      	ldr	r0, [r7, #28]
 8012e62:	f7fe fb97 	bl	8011594 <tcp_abort>
            goto aborted;
 8012e66:	e078      	b.n	8012f5a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00c      	beq.n	8012e8c <tcp_input+0x5f0>
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	6918      	ldr	r0, [r3, #16]
 8012e7c:	4b5e      	ldr	r3, [pc, #376]	; (8012ff8 <tcp_input+0x75c>)
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	2300      	movs	r3, #0
 8012e82:	69f9      	ldr	r1, [r7, #28]
 8012e84:	47a0      	blx	r4
 8012e86:	4603      	mov	r3, r0
 8012e88:	74fb      	strb	r3, [r7, #19]
 8012e8a:	e008      	b.n	8012e9e <tcp_input+0x602>
 8012e8c:	4b5a      	ldr	r3, [pc, #360]	; (8012ff8 <tcp_input+0x75c>)
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	2300      	movs	r3, #0
 8012e92:	69f9      	ldr	r1, [r7, #28]
 8012e94:	2000      	movs	r0, #0
 8012e96:	f7ff f984 	bl	80121a2 <tcp_recv_null>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012e9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ea2:	f113 0f0d 	cmn.w	r3, #13
 8012ea6:	d053      	beq.n	8012f50 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012ea8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d003      	beq.n	8012eb8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012eb0:	4b51      	ldr	r3, [pc, #324]	; (8012ff8 <tcp_input+0x75c>)
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012eb8:	4b4c      	ldr	r3, [pc, #304]	; (8012fec <tcp_input+0x750>)
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	f003 0320 	and.w	r3, r3, #32
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d030      	beq.n	8012f26 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d009      	beq.n	8012ee0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ed0:	7b5a      	ldrb	r2, [r3, #13]
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ed6:	f042 0220 	orr.w	r2, r2, #32
 8012eda:	b2d2      	uxtb	r2, r2
 8012edc:	735a      	strb	r2, [r3, #13]
 8012ede:	e022      	b.n	8012f26 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ee4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012ee8:	d005      	beq.n	8012ef6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012eee:	3301      	adds	r3, #1
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d00b      	beq.n	8012f18 <tcp_input+0x67c>
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	6918      	ldr	r0, [r3, #16]
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	69f9      	ldr	r1, [r7, #28]
 8012f10:	47a0      	blx	r4
 8012f12:	4603      	mov	r3, r0
 8012f14:	74fb      	strb	r3, [r7, #19]
 8012f16:	e001      	b.n	8012f1c <tcp_input+0x680>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f20:	f113 0f0d 	cmn.w	r3, #13
 8012f24:	d016      	beq.n	8012f54 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f26:	4b30      	ldr	r3, [pc, #192]	; (8012fe8 <tcp_input+0x74c>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012f2c:	69f8      	ldr	r0, [r7, #28]
 8012f2e:	f000 f879 	bl	8013024 <tcp_input_delayed_close>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d10f      	bne.n	8012f58 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012f38:	69f8      	ldr	r0, [r7, #28]
 8012f3a:	f002 fd95 	bl	8015a68 <tcp_output>
 8012f3e:	e00c      	b.n	8012f5a <tcp_input+0x6be>
        goto aborted;
 8012f40:	bf00      	nop
 8012f42:	e00a      	b.n	8012f5a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012f44:	bf00      	nop
 8012f46:	e008      	b.n	8012f5a <tcp_input+0x6be>
              goto aborted;
 8012f48:	bf00      	nop
 8012f4a:	e006      	b.n	8012f5a <tcp_input+0x6be>
          goto aborted;
 8012f4c:	bf00      	nop
 8012f4e:	e004      	b.n	8012f5a <tcp_input+0x6be>
            goto aborted;
 8012f50:	bf00      	nop
 8012f52:	e002      	b.n	8012f5a <tcp_input+0x6be>
              goto aborted;
 8012f54:	bf00      	nop
 8012f56:	e000      	b.n	8012f5a <tcp_input+0x6be>
          goto aborted;
 8012f58:	bf00      	nop
    tcp_input_pcb = NULL;
 8012f5a:	4b23      	ldr	r3, [pc, #140]	; (8012fe8 <tcp_input+0x74c>)
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012f60:	4b25      	ldr	r3, [pc, #148]	; (8012ff8 <tcp_input+0x75c>)
 8012f62:	2200      	movs	r2, #0
 8012f64:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8012f66:	4b28      	ldr	r3, [pc, #160]	; (8013008 <tcp_input+0x76c>)
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d037      	beq.n	8012fde <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8012f6e:	4b26      	ldr	r3, [pc, #152]	; (8013008 <tcp_input+0x76c>)
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fd fdc8 	bl	8010b08 <pbuf_free>
      inseg.p = NULL;
 8012f78:	4b23      	ldr	r3, [pc, #140]	; (8013008 <tcp_input+0x76c>)
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012f7e:	e02e      	b.n	8012fde <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012f80:	4b22      	ldr	r3, [pc, #136]	; (801300c <tcp_input+0x770>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	899b      	ldrh	r3, [r3, #12]
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fc fba3 	bl	800f6d4 <lwip_htons>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	f003 0304 	and.w	r3, r3, #4
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d115      	bne.n	8012fc4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f98:	4b1d      	ldr	r3, [pc, #116]	; (8013010 <tcp_input+0x774>)
 8012f9a:	6818      	ldr	r0, [r3, #0]
 8012f9c:	4b1d      	ldr	r3, [pc, #116]	; (8013014 <tcp_input+0x778>)
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	4b1d      	ldr	r3, [pc, #116]	; (8013018 <tcp_input+0x77c>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fa8:	4b18      	ldr	r3, [pc, #96]	; (801300c <tcp_input+0x770>)
 8012faa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fac:	885b      	ldrh	r3, [r3, #2]
 8012fae:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fb0:	4a16      	ldr	r2, [pc, #88]	; (801300c <tcp_input+0x770>)
 8012fb2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fb4:	8812      	ldrh	r2, [r2, #0]
 8012fb6:	b292      	uxth	r2, r2
 8012fb8:	9201      	str	r2, [sp, #4]
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	4b17      	ldr	r3, [pc, #92]	; (801301c <tcp_input+0x780>)
 8012fbe:	4a18      	ldr	r2, [pc, #96]	; (8013020 <tcp_input+0x784>)
 8012fc0:	f002 ffdc 	bl	8015f7c <tcp_rst>
    pbuf_free(p);
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7fd fd9f 	bl	8010b08 <pbuf_free>
  return;
 8012fca:	e008      	b.n	8012fde <tcp_input+0x742>
    goto dropped;
 8012fcc:	bf00      	nop
 8012fce:	e002      	b.n	8012fd6 <tcp_input+0x73a>
dropped:
 8012fd0:	bf00      	nop
 8012fd2:	e000      	b.n	8012fd6 <tcp_input+0x73a>
      goto dropped;
 8012fd4:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7fd fd96 	bl	8010b08 <pbuf_free>
 8012fdc:	e000      	b.n	8012fe0 <tcp_input+0x744>
  return;
 8012fde:	bf00      	nop
}
 8012fe0:	3724      	adds	r7, #36	; 0x24
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd90      	pop	{r4, r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	200101e0 	.word	0x200101e0
 8012fec:	2000c831 	.word	0x2000c831
 8012ff0:	200101cc 	.word	0x200101cc
 8012ff4:	2000c82c 	.word	0x2000c82c
 8012ff8:	2000c834 	.word	0x2000c834
 8012ffc:	0801bf6c 	.word	0x0801bf6c
 8013000:	0801c12c 	.word	0x0801c12c
 8013004:	0801bfd4 	.word	0x0801bfd4
 8013008:	2000c804 	.word	0x2000c804
 801300c:	2000c814 	.word	0x2000c814
 8013010:	2000c828 	.word	0x2000c828
 8013014:	2000c82e 	.word	0x2000c82e
 8013018:	2000c824 	.word	0x2000c824
 801301c:	2000d120 	.word	0x2000d120
 8013020:	2000d124 	.word	0x2000d124

08013024 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801302c:	4b14      	ldr	r3, [pc, #80]	; (8013080 <tcp_input_delayed_close+0x5c>)
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	f003 0310 	and.w	r3, r3, #16
 8013034:	2b00      	cmp	r3, #0
 8013036:	d01d      	beq.n	8013074 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	7e9b      	ldrb	r3, [r3, #26]
 801303c:	f003 0310 	and.w	r3, r3, #16
 8013040:	2b00      	cmp	r3, #0
 8013042:	d10d      	bne.n	8013060 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801304a:	2b00      	cmp	r3, #0
 801304c:	d008      	beq.n	8013060 <tcp_input_delayed_close+0x3c>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	6912      	ldr	r2, [r2, #16]
 8013058:	f06f 010e 	mvn.w	r1, #14
 801305c:	4610      	mov	r0, r2
 801305e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013060:	6879      	ldr	r1, [r7, #4]
 8013062:	4808      	ldr	r0, [pc, #32]	; (8013084 <tcp_input_delayed_close+0x60>)
 8013064:	f7ff fb00 	bl	8012668 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8013068:	6879      	ldr	r1, [r7, #4]
 801306a:	2001      	movs	r0, #1
 801306c:	f7fc ffb4 	bl	800ffd8 <memp_free>
    return 1;
 8013070:	2301      	movs	r3, #1
 8013072:	e000      	b.n	8013076 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8013074:	2300      	movs	r3, #0
}
 8013076:	4618      	mov	r0, r3
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	2000c831 	.word	0x2000c831
 8013084:	200101cc 	.word	0x200101cc

08013088 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b088      	sub	sp, #32
 801308c:	af02      	add	r7, sp, #8
 801308e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013090:	4b64      	ldr	r3, [pc, #400]	; (8013224 <tcp_listen_input+0x19c>)
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	f003 0304 	and.w	r3, r3, #4
 8013098:	2b00      	cmp	r3, #0
 801309a:	f040 80bc 	bne.w	8013216 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801309e:	4b61      	ldr	r3, [pc, #388]	; (8013224 <tcp_listen_input+0x19c>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	f003 0310 	and.w	r3, r3, #16
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d016      	beq.n	80130d8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80130aa:	4b5f      	ldr	r3, [pc, #380]	; (8013228 <tcp_listen_input+0x1a0>)
 80130ac:	6818      	ldr	r0, [r3, #0]
 80130ae:	4b5f      	ldr	r3, [pc, #380]	; (801322c <tcp_listen_input+0x1a4>)
 80130b0:	881b      	ldrh	r3, [r3, #0]
 80130b2:	461a      	mov	r2, r3
 80130b4:	4b5e      	ldr	r3, [pc, #376]	; (8013230 <tcp_listen_input+0x1a8>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130ba:	4b5e      	ldr	r3, [pc, #376]	; (8013234 <tcp_listen_input+0x1ac>)
 80130bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80130be:	885b      	ldrh	r3, [r3, #2]
 80130c0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130c2:	4a5c      	ldr	r2, [pc, #368]	; (8013234 <tcp_listen_input+0x1ac>)
 80130c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80130c6:	8812      	ldrh	r2, [r2, #0]
 80130c8:	b292      	uxth	r2, r2
 80130ca:	9201      	str	r2, [sp, #4]
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	4b5a      	ldr	r3, [pc, #360]	; (8013238 <tcp_listen_input+0x1b0>)
 80130d0:	4a5a      	ldr	r2, [pc, #360]	; (801323c <tcp_listen_input+0x1b4>)
 80130d2:	f002 ff53 	bl	8015f7c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80130d6:	e0a0      	b.n	801321a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 80130d8:	4b52      	ldr	r3, [pc, #328]	; (8013224 <tcp_listen_input+0x19c>)
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	f003 0302 	and.w	r3, r3, #2
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f000 809a 	beq.w	801321a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	7d5b      	ldrb	r3, [r3, #21]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7ff f938 	bl	8012360 <tcp_alloc>
 80130f0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d111      	bne.n	801311c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	699b      	ldr	r3, [r3, #24]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00a      	beq.n	8013116 <tcp_listen_input+0x8e>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	699b      	ldr	r3, [r3, #24]
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	6910      	ldr	r0, [r2, #16]
 8013108:	f04f 32ff 	mov.w	r2, #4294967295
 801310c:	2100      	movs	r1, #0
 801310e:	4798      	blx	r3
 8013110:	4603      	mov	r3, r0
 8013112:	73bb      	strb	r3, [r7, #14]
      return;
 8013114:	e082      	b.n	801321c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013116:	23f0      	movs	r3, #240	; 0xf0
 8013118:	73bb      	strb	r3, [r7, #14]
      return;
 801311a:	e07f      	b.n	801321c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801311c:	4b48      	ldr	r3, [pc, #288]	; (8013240 <tcp_listen_input+0x1b8>)
 801311e:	695a      	ldr	r2, [r3, #20]
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013124:	4b46      	ldr	r3, [pc, #280]	; (8013240 <tcp_listen_input+0x1b8>)
 8013126:	691a      	ldr	r2, [r3, #16]
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	8ada      	ldrh	r2, [r3, #22]
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013134:	4b3f      	ldr	r3, [pc, #252]	; (8013234 <tcp_listen_input+0x1ac>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	b29a      	uxth	r2, r3
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	2203      	movs	r2, #3
 8013144:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013146:	4b3a      	ldr	r3, [pc, #232]	; (8013230 <tcp_listen_input+0x1a8>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013158:	6978      	ldr	r0, [r7, #20]
 801315a:	f7ff fb01 	bl	8012760 <tcp_next_iss>
 801315e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	693a      	ldr	r2, [r7, #16]
 8013164:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	693a      	ldr	r2, [r7, #16]
 801316a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	693a      	ldr	r2, [r7, #16]
 8013170:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	693a      	ldr	r2, [r7, #16]
 8013176:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013178:	4b2d      	ldr	r3, [pc, #180]	; (8013230 <tcp_listen_input+0x1a8>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	1e5a      	subs	r2, r3, #1
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	691a      	ldr	r2, [r3, #16]
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	7a1b      	ldrb	r3, [r3, #8]
 8013194:	f003 030c 	and.w	r3, r3, #12
 8013198:	b2da      	uxtb	r2, r3
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801319e:	4b29      	ldr	r3, [pc, #164]	; (8013244 <tcp_listen_input+0x1bc>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	60da      	str	r2, [r3, #12]
 80131a6:	4a27      	ldr	r2, [pc, #156]	; (8013244 <tcp_listen_input+0x1bc>)
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	6013      	str	r3, [r2, #0]
 80131ac:	f003 f938 	bl	8016420 <tcp_timer_needed>
 80131b0:	4b25      	ldr	r3, [pc, #148]	; (8013248 <tcp_listen_input+0x1c0>)
 80131b2:	2201      	movs	r2, #1
 80131b4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80131b6:	6978      	ldr	r0, [r7, #20]
 80131b8:	f001 fd14 	bl	8014be4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80131bc:	4b1d      	ldr	r3, [pc, #116]	; (8013234 <tcp_listen_input+0x1ac>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	89db      	ldrh	r3, [r3, #14]
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	3304      	adds	r3, #4
 80131de:	4619      	mov	r1, r3
 80131e0:	4610      	mov	r0, r2
 80131e2:	f7ff fad5 	bl	8012790 <tcp_eff_send_mss_impl>
 80131e6:	4603      	mov	r3, r0
 80131e8:	461a      	mov	r2, r3
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80131ee:	2112      	movs	r1, #18
 80131f0:	6978      	ldr	r0, [r7, #20]
 80131f2:	f002 fae1 	bl	80157b8 <tcp_enqueue_flags>
 80131f6:	4603      	mov	r3, r0
 80131f8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80131fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d004      	beq.n	801320c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8013202:	2100      	movs	r1, #0
 8013204:	6978      	ldr	r0, [r7, #20]
 8013206:	f7fe f913 	bl	8011430 <tcp_abandon>
      return;
 801320a:	e007      	b.n	801321c <tcp_listen_input+0x194>
    tcp_output(npcb);
 801320c:	6978      	ldr	r0, [r7, #20]
 801320e:	f002 fc2b 	bl	8015a68 <tcp_output>
  return;
 8013212:	bf00      	nop
 8013214:	e001      	b.n	801321a <tcp_listen_input+0x192>
    return;
 8013216:	bf00      	nop
 8013218:	e000      	b.n	801321c <tcp_listen_input+0x194>
  return;
 801321a:	bf00      	nop
}
 801321c:	3718      	adds	r7, #24
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop
 8013224:	2000c830 	.word	0x2000c830
 8013228:	2000c828 	.word	0x2000c828
 801322c:	2000c82e 	.word	0x2000c82e
 8013230:	2000c824 	.word	0x2000c824
 8013234:	2000c814 	.word	0x2000c814
 8013238:	2000d120 	.word	0x2000d120
 801323c:	2000d124 	.word	0x2000d124
 8013240:	2000d110 	.word	0x2000d110
 8013244:	200101cc 	.word	0x200101cc
 8013248:	200101c8 	.word	0x200101c8

0801324c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af02      	add	r7, sp, #8
 8013252:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013254:	4b29      	ldr	r3, [pc, #164]	; (80132fc <tcp_timewait_input+0xb0>)
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	f003 0304 	and.w	r3, r3, #4
 801325c:	2b00      	cmp	r3, #0
 801325e:	d147      	bne.n	80132f0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013260:	4b26      	ldr	r3, [pc, #152]	; (80132fc <tcp_timewait_input+0xb0>)
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f003 0302 	and.w	r3, r3, #2
 8013268:	2b00      	cmp	r3, #0
 801326a:	d027      	beq.n	80132bc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801326c:	4b24      	ldr	r3, [pc, #144]	; (8013300 <tcp_timewait_input+0xb4>)
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	2b00      	cmp	r3, #0
 8013278:	db2a      	blt.n	80132d0 <tcp_timewait_input+0x84>
 801327a:	4b21      	ldr	r3, [pc, #132]	; (8013300 <tcp_timewait_input+0xb4>)
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013282:	6879      	ldr	r1, [r7, #4]
 8013284:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013286:	440b      	add	r3, r1
 8013288:	1ad3      	subs	r3, r2, r3
 801328a:	2b00      	cmp	r3, #0
 801328c:	dc20      	bgt.n	80132d0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801328e:	4b1d      	ldr	r3, [pc, #116]	; (8013304 <tcp_timewait_input+0xb8>)
 8013290:	6818      	ldr	r0, [r3, #0]
 8013292:	4b1d      	ldr	r3, [pc, #116]	; (8013308 <tcp_timewait_input+0xbc>)
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	461a      	mov	r2, r3
 8013298:	4b19      	ldr	r3, [pc, #100]	; (8013300 <tcp_timewait_input+0xb4>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801329e:	4b1b      	ldr	r3, [pc, #108]	; (801330c <tcp_timewait_input+0xc0>)
 80132a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80132a2:	885b      	ldrh	r3, [r3, #2]
 80132a4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132a6:	4a19      	ldr	r2, [pc, #100]	; (801330c <tcp_timewait_input+0xc0>)
 80132a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80132aa:	8812      	ldrh	r2, [r2, #0]
 80132ac:	b292      	uxth	r2, r2
 80132ae:	9201      	str	r2, [sp, #4]
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	4b17      	ldr	r3, [pc, #92]	; (8013310 <tcp_timewait_input+0xc4>)
 80132b4:	4a17      	ldr	r2, [pc, #92]	; (8013314 <tcp_timewait_input+0xc8>)
 80132b6:	f002 fe61 	bl	8015f7c <tcp_rst>
      return;
 80132ba:	e01c      	b.n	80132f6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80132bc:	4b0f      	ldr	r3, [pc, #60]	; (80132fc <tcp_timewait_input+0xb0>)
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	f003 0301 	and.w	r3, r3, #1
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d003      	beq.n	80132d0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80132c8:	4b13      	ldr	r3, [pc, #76]	; (8013318 <tcp_timewait_input+0xcc>)
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80132d0:	4b0d      	ldr	r3, [pc, #52]	; (8013308 <tcp_timewait_input+0xbc>)
 80132d2:	881b      	ldrh	r3, [r3, #0]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d00d      	beq.n	80132f4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	7e9b      	ldrb	r3, [r3, #26]
 80132dc:	f043 0302 	orr.w	r3, r3, #2
 80132e0:	b2da      	uxtb	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f002 fbbe 	bl	8015a68 <tcp_output>
  }
  return;
 80132ec:	bf00      	nop
 80132ee:	e001      	b.n	80132f4 <tcp_timewait_input+0xa8>
    return;
 80132f0:	bf00      	nop
 80132f2:	e000      	b.n	80132f6 <tcp_timewait_input+0xaa>
  return;
 80132f4:	bf00      	nop
}
 80132f6:	3708      	adds	r7, #8
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	2000c830 	.word	0x2000c830
 8013300:	2000c824 	.word	0x2000c824
 8013304:	2000c828 	.word	0x2000c828
 8013308:	2000c82e 	.word	0x2000c82e
 801330c:	2000c814 	.word	0x2000c814
 8013310:	2000d120 	.word	0x2000d120
 8013314:	2000d124 	.word	0x2000d124
 8013318:	200101d0 	.word	0x200101d0

0801331c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b08a      	sub	sp, #40	; 0x28
 8013320:	af02      	add	r7, sp, #8
 8013322:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013324:	2300      	movs	r3, #0
 8013326:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801332c:	4ba4      	ldr	r3, [pc, #656]	; (80135c0 <tcp_process+0x2a4>)
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	f003 0304 	and.w	r3, r3, #4
 8013334:	2b00      	cmp	r3, #0
 8013336:	d04e      	beq.n	80133d6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	7d1b      	ldrb	r3, [r3, #20]
 801333c:	2b02      	cmp	r3, #2
 801333e:	d108      	bne.n	8013352 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013344:	4b9f      	ldr	r3, [pc, #636]	; (80135c4 <tcp_process+0x2a8>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	429a      	cmp	r2, r3
 801334a:	d123      	bne.n	8013394 <tcp_process+0x78>
        acceptable = 1;
 801334c:	2301      	movs	r3, #1
 801334e:	76fb      	strb	r3, [r7, #27]
 8013350:	e020      	b.n	8013394 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013356:	4b9c      	ldr	r3, [pc, #624]	; (80135c8 <tcp_process+0x2ac>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	429a      	cmp	r2, r3
 801335c:	d102      	bne.n	8013364 <tcp_process+0x48>
        acceptable = 1;
 801335e:	2301      	movs	r3, #1
 8013360:	76fb      	strb	r3, [r7, #27]
 8013362:	e017      	b.n	8013394 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013364:	4b98      	ldr	r3, [pc, #608]	; (80135c8 <tcp_process+0x2ac>)
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	2b00      	cmp	r3, #0
 8013370:	db10      	blt.n	8013394 <tcp_process+0x78>
 8013372:	4b95      	ldr	r3, [pc, #596]	; (80135c8 <tcp_process+0x2ac>)
 8013374:	681a      	ldr	r2, [r3, #0]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801337a:	6879      	ldr	r1, [r7, #4]
 801337c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801337e:	440b      	add	r3, r1
 8013380:	1ad3      	subs	r3, r2, r3
 8013382:	2b00      	cmp	r3, #0
 8013384:	dc06      	bgt.n	8013394 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	7e9b      	ldrb	r3, [r3, #26]
 801338a:	f043 0302 	orr.w	r3, r3, #2
 801338e:	b2da      	uxtb	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013394:	7efb      	ldrb	r3, [r7, #27]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d01b      	beq.n	80133d2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	7d1b      	ldrb	r3, [r3, #20]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d106      	bne.n	80133b0 <tcp_process+0x94>
 80133a2:	4b8a      	ldr	r3, [pc, #552]	; (80135cc <tcp_process+0x2b0>)
 80133a4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80133a8:	4989      	ldr	r1, [pc, #548]	; (80135d0 <tcp_process+0x2b4>)
 80133aa:	488a      	ldr	r0, [pc, #552]	; (80135d4 <tcp_process+0x2b8>)
 80133ac:	f006 f888 	bl	80194c0 <iprintf>
      recv_flags |= TF_RESET;
 80133b0:	4b89      	ldr	r3, [pc, #548]	; (80135d8 <tcp_process+0x2bc>)
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	f043 0308 	orr.w	r3, r3, #8
 80133b8:	b2da      	uxtb	r2, r3
 80133ba:	4b87      	ldr	r3, [pc, #540]	; (80135d8 <tcp_process+0x2bc>)
 80133bc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	7e9b      	ldrb	r3, [r3, #26]
 80133c2:	f023 0301 	bic.w	r3, r3, #1
 80133c6:	b2da      	uxtb	r2, r3
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80133cc:	f06f 030d 	mvn.w	r3, #13
 80133d0:	e34d      	b.n	8013a6e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80133d2:	2300      	movs	r3, #0
 80133d4:	e34b      	b.n	8013a6e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80133d6:	4b7a      	ldr	r3, [pc, #488]	; (80135c0 <tcp_process+0x2a4>)
 80133d8:	781b      	ldrb	r3, [r3, #0]
 80133da:	f003 0302 	and.w	r3, r3, #2
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d010      	beq.n	8013404 <tcp_process+0xe8>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	7d1b      	ldrb	r3, [r3, #20]
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	d00c      	beq.n	8013404 <tcp_process+0xe8>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	7d1b      	ldrb	r3, [r3, #20]
 80133ee:	2b03      	cmp	r3, #3
 80133f0:	d008      	beq.n	8013404 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	7e9b      	ldrb	r3, [r3, #26]
 80133f6:	f043 0302 	orr.w	r3, r3, #2
 80133fa:	b2da      	uxtb	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8013400:	2300      	movs	r3, #0
 8013402:	e334      	b.n	8013a6e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	7e9b      	ldrb	r3, [r3, #26]
 8013408:	f003 0310 	and.w	r3, r3, #16
 801340c:	2b00      	cmp	r3, #0
 801340e:	d103      	bne.n	8013418 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013410:	4b72      	ldr	r3, [pc, #456]	; (80135dc <tcp_process+0x2c0>)
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2200      	movs	r2, #0
 801341c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f001 fbdf 	bl	8014be4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	7d1b      	ldrb	r3, [r3, #20]
 801342a:	3b02      	subs	r3, #2
 801342c:	2b07      	cmp	r3, #7
 801342e:	f200 830e 	bhi.w	8013a4e <tcp_process+0x732>
 8013432:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <tcp_process+0x11c>)
 8013434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013438:	08013459 	.word	0x08013459
 801343c:	08013651 	.word	0x08013651
 8013440:	080137a9 	.word	0x080137a9
 8013444:	080137d3 	.word	0x080137d3
 8013448:	080138fd 	.word	0x080138fd
 801344c:	080137a9 	.word	0x080137a9
 8013450:	08013989 	.word	0x08013989
 8013454:	08013a19 	.word	0x08013a19
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013458:	4b59      	ldr	r3, [pc, #356]	; (80135c0 <tcp_process+0x2a4>)
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	f003 0310 	and.w	r3, r3, #16
 8013460:	2b00      	cmp	r3, #0
 8013462:	f000 80cb 	beq.w	80135fc <tcp_process+0x2e0>
 8013466:	4b56      	ldr	r3, [pc, #344]	; (80135c0 <tcp_process+0x2a4>)
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	f003 0302 	and.w	r3, r3, #2
 801346e:	2b00      	cmp	r3, #0
 8013470:	f000 80c4 	beq.w	80135fc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013478:	1c5a      	adds	r2, r3, #1
 801347a:	4b52      	ldr	r3, [pc, #328]	; (80135c4 <tcp_process+0x2a8>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	429a      	cmp	r2, r3
 8013480:	f040 80bc 	bne.w	80135fc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8013484:	4b50      	ldr	r3, [pc, #320]	; (80135c8 <tcp_process+0x2ac>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	1c5a      	adds	r2, r3, #1
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8013496:	4b4b      	ldr	r3, [pc, #300]	; (80135c4 <tcp_process+0x2a8>)
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801349e:	4b50      	ldr	r3, [pc, #320]	; (80135e0 <tcp_process+0x2c4>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	89db      	ldrh	r3, [r3, #14]
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80134b8:	4b43      	ldr	r3, [pc, #268]	; (80135c8 <tcp_process+0x2ac>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	1e5a      	subs	r2, r3, #1
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2204      	movs	r2, #4
 80134c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	3304      	adds	r3, #4
 80134d0:	4619      	mov	r1, r3
 80134d2:	4610      	mov	r0, r2
 80134d4:	f7ff f95c 	bl	8012790 <tcp_eff_send_mss_impl>
 80134d8:	4603      	mov	r3, r0
 80134da:	461a      	mov	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80134ea:	429a      	cmp	r2, r3
 80134ec:	bf38      	it	cc
 80134ee:	461a      	movcc	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	4293      	cmp	r3, r2
 80134f8:	bf28      	it	cs
 80134fa:	4613      	movcs	r3, r2
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801350a:	2b00      	cmp	r3, #0
 801350c:	d106      	bne.n	801351c <tcp_process+0x200>
 801350e:	4b2f      	ldr	r3, [pc, #188]	; (80135cc <tcp_process+0x2b0>)
 8013510:	f240 321a 	movw	r2, #794	; 0x31a
 8013514:	4933      	ldr	r1, [pc, #204]	; (80135e4 <tcp_process+0x2c8>)
 8013516:	482f      	ldr	r0, [pc, #188]	; (80135d4 <tcp_process+0x2b8>)
 8013518:	f005 ffd2 	bl	80194c0 <iprintf>
      --pcb->snd_queuelen;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013522:	3b01      	subs	r3, #1
 8013524:	b29a      	uxth	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013530:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d111      	bne.n	801355c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801353c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d106      	bne.n	8013552 <tcp_process+0x236>
 8013544:	4b21      	ldr	r3, [pc, #132]	; (80135cc <tcp_process+0x2b0>)
 8013546:	f240 3222 	movw	r2, #802	; 0x322
 801354a:	4927      	ldr	r1, [pc, #156]	; (80135e8 <tcp_process+0x2cc>)
 801354c:	4821      	ldr	r0, [pc, #132]	; (80135d4 <tcp_process+0x2b8>)
 801354e:	f005 ffb7 	bl	80194c0 <iprintf>
        pcb->unsent = rseg->next;
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	669a      	str	r2, [r3, #104]	; 0x68
 801355a:	e003      	b.n	8013564 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8013564:	69f8      	ldr	r0, [r7, #28]
 8013566:	f7fe fde8 	bl	801213a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801356e:	2b00      	cmp	r3, #0
 8013570:	d104      	bne.n	801357c <tcp_process+0x260>
        pcb->rtime = -1;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013578:	861a      	strh	r2, [r3, #48]	; 0x30
 801357a:	e006      	b.n	801358a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2200      	movs	r2, #0
 8013580:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2200      	movs	r2, #0
 8013586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013590:	2b00      	cmp	r3, #0
 8013592:	d00a      	beq.n	80135aa <tcp_process+0x28e>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	6910      	ldr	r0, [r2, #16]
 801359e:	2200      	movs	r2, #0
 80135a0:	6879      	ldr	r1, [r7, #4]
 80135a2:	4798      	blx	r3
 80135a4:	4603      	mov	r3, r0
 80135a6:	76bb      	strb	r3, [r7, #26]
 80135a8:	e001      	b.n	80135ae <tcp_process+0x292>
 80135aa:	2300      	movs	r3, #0
 80135ac:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80135ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135b2:	f113 0f0d 	cmn.w	r3, #13
 80135b6:	d119      	bne.n	80135ec <tcp_process+0x2d0>
        return ERR_ABRT;
 80135b8:	f06f 030c 	mvn.w	r3, #12
 80135bc:	e257      	b.n	8013a6e <tcp_process+0x752>
 80135be:	bf00      	nop
 80135c0:	2000c830 	.word	0x2000c830
 80135c4:	2000c828 	.word	0x2000c828
 80135c8:	2000c824 	.word	0x2000c824
 80135cc:	0801bf6c 	.word	0x0801bf6c
 80135d0:	0801c148 	.word	0x0801c148
 80135d4:	0801bfd4 	.word	0x0801bfd4
 80135d8:	2000c831 	.word	0x2000c831
 80135dc:	200101d0 	.word	0x200101d0
 80135e0:	2000c814 	.word	0x2000c814
 80135e4:	0801c168 	.word	0x0801c168
 80135e8:	0801c180 	.word	0x0801c180
      }
      tcp_ack_now(pcb);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	7e9b      	ldrb	r3, [r3, #26]
 80135f0:	f043 0302 	orr.w	r3, r3, #2
 80135f4:	b2da      	uxtb	r2, r3
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80135fa:	e22a      	b.n	8013a52 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80135fc:	4b9f      	ldr	r3, [pc, #636]	; (801387c <tcp_process+0x560>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	f003 0310 	and.w	r3, r3, #16
 8013604:	2b00      	cmp	r3, #0
 8013606:	f000 8224 	beq.w	8013a52 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801360a:	4b9d      	ldr	r3, [pc, #628]	; (8013880 <tcp_process+0x564>)
 801360c:	6818      	ldr	r0, [r3, #0]
 801360e:	4b9d      	ldr	r3, [pc, #628]	; (8013884 <tcp_process+0x568>)
 8013610:	881b      	ldrh	r3, [r3, #0]
 8013612:	461a      	mov	r2, r3
 8013614:	4b9c      	ldr	r3, [pc, #624]	; (8013888 <tcp_process+0x56c>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801361a:	4b9c      	ldr	r3, [pc, #624]	; (801388c <tcp_process+0x570>)
 801361c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801361e:	885b      	ldrh	r3, [r3, #2]
 8013620:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013622:	4a9a      	ldr	r2, [pc, #616]	; (801388c <tcp_process+0x570>)
 8013624:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013626:	8812      	ldrh	r2, [r2, #0]
 8013628:	b292      	uxth	r2, r2
 801362a:	9201      	str	r2, [sp, #4]
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	4b98      	ldr	r3, [pc, #608]	; (8013890 <tcp_process+0x574>)
 8013630:	4a98      	ldr	r2, [pc, #608]	; (8013894 <tcp_process+0x578>)
 8013632:	f002 fca3 	bl	8015f7c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801363c:	2b05      	cmp	r3, #5
 801363e:	f200 8208 	bhi.w	8013a52 <tcp_process+0x736>
        pcb->rtime = 0;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2200      	movs	r2, #0
 8013646:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f002 fd0d 	bl	8016068 <tcp_rexmit_rto>
    break;
 801364e:	e200      	b.n	8013a52 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8013650:	4b8a      	ldr	r3, [pc, #552]	; (801387c <tcp_process+0x560>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f003 0310 	and.w	r3, r3, #16
 8013658:	2b00      	cmp	r3, #0
 801365a:	f000 8091 	beq.w	8013780 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801365e:	4b88      	ldr	r3, [pc, #544]	; (8013880 <tcp_process+0x564>)
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013666:	1ad3      	subs	r3, r2, r3
 8013668:	3b01      	subs	r3, #1
 801366a:	2b00      	cmp	r3, #0
 801366c:	db71      	blt.n	8013752 <tcp_process+0x436>
 801366e:	4b84      	ldr	r3, [pc, #528]	; (8013880 <tcp_process+0x564>)
 8013670:	681a      	ldr	r2, [r3, #0]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013676:	1ad3      	subs	r3, r2, r3
 8013678:	2b00      	cmp	r3, #0
 801367a:	dc6a      	bgt.n	8013752 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2204      	movs	r2, #4
 8013680:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013686:	2b00      	cmp	r3, #0
 8013688:	d00b      	beq.n	80136a2 <tcp_process+0x386>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801368e:	699b      	ldr	r3, [r3, #24]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d106      	bne.n	80136a2 <tcp_process+0x386>
 8013694:	4b80      	ldr	r3, [pc, #512]	; (8013898 <tcp_process+0x57c>)
 8013696:	f240 3251 	movw	r2, #849	; 0x351
 801369a:	4980      	ldr	r1, [pc, #512]	; (801389c <tcp_process+0x580>)
 801369c:	4880      	ldr	r0, [pc, #512]	; (80138a0 <tcp_process+0x584>)
 801369e:	f005 ff0f 	bl	80194c0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d102      	bne.n	80136b0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80136aa:	23fa      	movs	r3, #250	; 0xfa
 80136ac:	76bb      	strb	r3, [r7, #26]
 80136ae:	e011      	b.n	80136d4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136b4:	699b      	ldr	r3, [r3, #24]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d00a      	beq.n	80136d0 <tcp_process+0x3b4>
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136be:	699b      	ldr	r3, [r3, #24]
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	6910      	ldr	r0, [r2, #16]
 80136c4:	2200      	movs	r2, #0
 80136c6:	6879      	ldr	r1, [r7, #4]
 80136c8:	4798      	blx	r3
 80136ca:	4603      	mov	r3, r0
 80136cc:	76bb      	strb	r3, [r7, #26]
 80136ce:	e001      	b.n	80136d4 <tcp_process+0x3b8>
 80136d0:	23f0      	movs	r3, #240	; 0xf0
 80136d2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80136d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00a      	beq.n	80136f2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80136dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136e0:	f113 0f0d 	cmn.w	r3, #13
 80136e4:	d002      	beq.n	80136ec <tcp_process+0x3d0>
            tcp_abort(pcb);
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f7fd ff54 	bl	8011594 <tcp_abort>
          }
          return ERR_ABRT;
 80136ec:	f06f 030c 	mvn.w	r3, #12
 80136f0:	e1bd      	b.n	8013a6e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 fa42 	bl	8013b7c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80136f8:	4b6a      	ldr	r3, [pc, #424]	; (80138a4 <tcp_process+0x588>)
 80136fa:	881b      	ldrh	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d005      	beq.n	801370c <tcp_process+0x3f0>
          recv_acked--;
 8013700:	4b68      	ldr	r3, [pc, #416]	; (80138a4 <tcp_process+0x588>)
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	3b01      	subs	r3, #1
 8013706:	b29a      	uxth	r2, r3
 8013708:	4b66      	ldr	r3, [pc, #408]	; (80138a4 <tcp_process+0x588>)
 801370a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013710:	005b      	lsls	r3, r3, #1
 8013712:	f241 121c 	movw	r2, #4380	; 0x111c
 8013716:	429a      	cmp	r2, r3
 8013718:	bf38      	it	cc
 801371a:	461a      	movcc	r2, r3
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013720:	009b      	lsls	r3, r3, #2
 8013722:	4293      	cmp	r3, r2
 8013724:	bf28      	it	cs
 8013726:	4613      	movcs	r3, r2
 8013728:	b29a      	uxth	r2, r3
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8013730:	4b5d      	ldr	r3, [pc, #372]	; (80138a8 <tcp_process+0x58c>)
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	f003 0320 	and.w	r3, r3, #32
 8013738:	2b00      	cmp	r3, #0
 801373a:	d034      	beq.n	80137a6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	7e9b      	ldrb	r3, [r3, #26]
 8013740:	f043 0302 	orr.w	r3, r3, #2
 8013744:	b2da      	uxtb	r2, r3
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2207      	movs	r2, #7
 801374e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8013750:	e029      	b.n	80137a6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013752:	4b4b      	ldr	r3, [pc, #300]	; (8013880 <tcp_process+0x564>)
 8013754:	6818      	ldr	r0, [r3, #0]
 8013756:	4b4b      	ldr	r3, [pc, #300]	; (8013884 <tcp_process+0x568>)
 8013758:	881b      	ldrh	r3, [r3, #0]
 801375a:	461a      	mov	r2, r3
 801375c:	4b4a      	ldr	r3, [pc, #296]	; (8013888 <tcp_process+0x56c>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013762:	4b4a      	ldr	r3, [pc, #296]	; (801388c <tcp_process+0x570>)
 8013764:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013766:	885b      	ldrh	r3, [r3, #2]
 8013768:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801376a:	4a48      	ldr	r2, [pc, #288]	; (801388c <tcp_process+0x570>)
 801376c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801376e:	8812      	ldrh	r2, [r2, #0]
 8013770:	b292      	uxth	r2, r2
 8013772:	9201      	str	r2, [sp, #4]
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	4b46      	ldr	r3, [pc, #280]	; (8013890 <tcp_process+0x574>)
 8013778:	4a46      	ldr	r2, [pc, #280]	; (8013894 <tcp_process+0x578>)
 801377a:	f002 fbff 	bl	8015f7c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801377e:	e16a      	b.n	8013a56 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013780:	4b3e      	ldr	r3, [pc, #248]	; (801387c <tcp_process+0x560>)
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	f003 0302 	and.w	r3, r3, #2
 8013788:	2b00      	cmp	r3, #0
 801378a:	f000 8164 	beq.w	8013a56 <tcp_process+0x73a>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013792:	1e5a      	subs	r2, r3, #1
 8013794:	4b3c      	ldr	r3, [pc, #240]	; (8013888 <tcp_process+0x56c>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	429a      	cmp	r2, r3
 801379a:	f040 815c 	bne.w	8013a56 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f002 fc98 	bl	80160d4 <tcp_rexmit>
    break;
 80137a4:	e157      	b.n	8013a56 <tcp_process+0x73a>
 80137a6:	e156      	b.n	8013a56 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f000 f9e7 	bl	8013b7c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80137ae:	4b3e      	ldr	r3, [pc, #248]	; (80138a8 <tcp_process+0x58c>)
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	f003 0320 	and.w	r3, r3, #32
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 814f 	beq.w	8013a5a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	7e9b      	ldrb	r3, [r3, #26]
 80137c0:	f043 0302 	orr.w	r3, r3, #2
 80137c4:	b2da      	uxtb	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2207      	movs	r2, #7
 80137ce:	751a      	strb	r2, [r3, #20]
    }
    break;
 80137d0:	e143      	b.n	8013a5a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f000 f9d2 	bl	8013b7c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80137d8:	4b33      	ldr	r3, [pc, #204]	; (80138a8 <tcp_process+0x58c>)
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	f003 0320 	and.w	r3, r3, #32
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d074      	beq.n	80138ce <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80137e4:	4b25      	ldr	r3, [pc, #148]	; (801387c <tcp_process+0x560>)
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	f003 0310 	and.w	r3, r3, #16
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d063      	beq.n	80138b8 <tcp_process+0x59c>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80137f4:	4b22      	ldr	r3, [pc, #136]	; (8013880 <tcp_process+0x564>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d15d      	bne.n	80138b8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013800:	2b00      	cmp	r3, #0
 8013802:	d159      	bne.n	80138b8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	7e9b      	ldrb	r3, [r3, #26]
 8013808:	f043 0302 	orr.w	r3, r3, #2
 801380c:	b2da      	uxtb	r2, r3
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f7fe fee6 	bl	80125e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013818:	4b24      	ldr	r3, [pc, #144]	; (80138ac <tcp_process+0x590>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	429a      	cmp	r2, r3
 8013820:	d105      	bne.n	801382e <tcp_process+0x512>
 8013822:	4b22      	ldr	r3, [pc, #136]	; (80138ac <tcp_process+0x590>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	4a20      	ldr	r2, [pc, #128]	; (80138ac <tcp_process+0x590>)
 801382a:	6013      	str	r3, [r2, #0]
 801382c:	e013      	b.n	8013856 <tcp_process+0x53a>
 801382e:	4b1f      	ldr	r3, [pc, #124]	; (80138ac <tcp_process+0x590>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	617b      	str	r3, [r7, #20]
 8013834:	e00c      	b.n	8013850 <tcp_process+0x534>
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	68db      	ldr	r3, [r3, #12]
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	429a      	cmp	r2, r3
 801383e:	d104      	bne.n	801384a <tcp_process+0x52e>
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	68da      	ldr	r2, [r3, #12]
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	60da      	str	r2, [r3, #12]
 8013848:	e005      	b.n	8013856 <tcp_process+0x53a>
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	68db      	ldr	r3, [r3, #12]
 801384e:	617b      	str	r3, [r7, #20]
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d1ef      	bne.n	8013836 <tcp_process+0x51a>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2200      	movs	r2, #0
 801385a:	60da      	str	r2, [r3, #12]
 801385c:	4b14      	ldr	r3, [pc, #80]	; (80138b0 <tcp_process+0x594>)
 801385e:	2201      	movs	r2, #1
 8013860:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	220a      	movs	r2, #10
 8013866:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013868:	4b12      	ldr	r3, [pc, #72]	; (80138b4 <tcp_process+0x598>)
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	60da      	str	r2, [r3, #12]
 8013870:	4a10      	ldr	r2, [pc, #64]	; (80138b4 <tcp_process+0x598>)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6013      	str	r3, [r2, #0]
 8013876:	f002 fdd3 	bl	8016420 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801387a:	e0f0      	b.n	8013a5e <tcp_process+0x742>
 801387c:	2000c830 	.word	0x2000c830
 8013880:	2000c828 	.word	0x2000c828
 8013884:	2000c82e 	.word	0x2000c82e
 8013888:	2000c824 	.word	0x2000c824
 801388c:	2000c814 	.word	0x2000c814
 8013890:	2000d120 	.word	0x2000d120
 8013894:	2000d124 	.word	0x2000d124
 8013898:	0801bf6c 	.word	0x0801bf6c
 801389c:	0801c194 	.word	0x0801c194
 80138a0:	0801bfd4 	.word	0x0801bfd4
 80138a4:	2000c82c 	.word	0x2000c82c
 80138a8:	2000c831 	.word	0x2000c831
 80138ac:	200101cc 	.word	0x200101cc
 80138b0:	200101c8 	.word	0x200101c8
 80138b4:	200101dc 	.word	0x200101dc
        tcp_ack_now(pcb);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	7e9b      	ldrb	r3, [r3, #26]
 80138bc:	f043 0302 	orr.w	r3, r3, #2
 80138c0:	b2da      	uxtb	r2, r3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2208      	movs	r2, #8
 80138ca:	751a      	strb	r2, [r3, #20]
    break;
 80138cc:	e0c7      	b.n	8013a5e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80138ce:	4b6a      	ldr	r3, [pc, #424]	; (8013a78 <tcp_process+0x75c>)
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	f003 0310 	and.w	r3, r3, #16
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 80c1 	beq.w	8013a5e <tcp_process+0x742>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80138e0:	4b66      	ldr	r3, [pc, #408]	; (8013a7c <tcp_process+0x760>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	429a      	cmp	r2, r3
 80138e6:	f040 80ba 	bne.w	8013a5e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	f040 80b5 	bne.w	8013a5e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2206      	movs	r2, #6
 80138f8:	751a      	strb	r2, [r3, #20]
    break;
 80138fa:	e0b0      	b.n	8013a5e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f000 f93d 	bl	8013b7c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013902:	4b5f      	ldr	r3, [pc, #380]	; (8013a80 <tcp_process+0x764>)
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	f003 0320 	and.w	r3, r3, #32
 801390a:	2b00      	cmp	r3, #0
 801390c:	f000 80a9 	beq.w	8013a62 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	7e9b      	ldrb	r3, [r3, #26]
 8013914:	f043 0302 	orr.w	r3, r3, #2
 8013918:	b2da      	uxtb	r2, r3
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7fe fe60 	bl	80125e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013924:	4b57      	ldr	r3, [pc, #348]	; (8013a84 <tcp_process+0x768>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	429a      	cmp	r2, r3
 801392c:	d105      	bne.n	801393a <tcp_process+0x61e>
 801392e:	4b55      	ldr	r3, [pc, #340]	; (8013a84 <tcp_process+0x768>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	4a53      	ldr	r2, [pc, #332]	; (8013a84 <tcp_process+0x768>)
 8013936:	6013      	str	r3, [r2, #0]
 8013938:	e013      	b.n	8013962 <tcp_process+0x646>
 801393a:	4b52      	ldr	r3, [pc, #328]	; (8013a84 <tcp_process+0x768>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	613b      	str	r3, [r7, #16]
 8013940:	e00c      	b.n	801395c <tcp_process+0x640>
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	68db      	ldr	r3, [r3, #12]
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	429a      	cmp	r2, r3
 801394a:	d104      	bne.n	8013956 <tcp_process+0x63a>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	68da      	ldr	r2, [r3, #12]
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	60da      	str	r2, [r3, #12]
 8013954:	e005      	b.n	8013962 <tcp_process+0x646>
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	68db      	ldr	r3, [r3, #12]
 801395a:	613b      	str	r3, [r7, #16]
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d1ef      	bne.n	8013942 <tcp_process+0x626>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	60da      	str	r2, [r3, #12]
 8013968:	4b47      	ldr	r3, [pc, #284]	; (8013a88 <tcp_process+0x76c>)
 801396a:	2201      	movs	r2, #1
 801396c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	220a      	movs	r2, #10
 8013972:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013974:	4b45      	ldr	r3, [pc, #276]	; (8013a8c <tcp_process+0x770>)
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	60da      	str	r2, [r3, #12]
 801397c:	4a43      	ldr	r2, [pc, #268]	; (8013a8c <tcp_process+0x770>)
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6013      	str	r3, [r2, #0]
 8013982:	f002 fd4d 	bl	8016420 <tcp_timer_needed>
    }
    break;
 8013986:	e06c      	b.n	8013a62 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f000 f8f7 	bl	8013b7c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801398e:	4b3a      	ldr	r3, [pc, #232]	; (8013a78 <tcp_process+0x75c>)
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	f003 0310 	and.w	r3, r3, #16
 8013996:	2b00      	cmp	r3, #0
 8013998:	d065      	beq.n	8013a66 <tcp_process+0x74a>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801399e:	4b37      	ldr	r3, [pc, #220]	; (8013a7c <tcp_process+0x760>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d15f      	bne.n	8013a66 <tcp_process+0x74a>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d15b      	bne.n	8013a66 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7fe fe18 	bl	80125e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80139b4:	4b33      	ldr	r3, [pc, #204]	; (8013a84 <tcp_process+0x768>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d105      	bne.n	80139ca <tcp_process+0x6ae>
 80139be:	4b31      	ldr	r3, [pc, #196]	; (8013a84 <tcp_process+0x768>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	4a2f      	ldr	r2, [pc, #188]	; (8013a84 <tcp_process+0x768>)
 80139c6:	6013      	str	r3, [r2, #0]
 80139c8:	e013      	b.n	80139f2 <tcp_process+0x6d6>
 80139ca:	4b2e      	ldr	r3, [pc, #184]	; (8013a84 <tcp_process+0x768>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	60fb      	str	r3, [r7, #12]
 80139d0:	e00c      	b.n	80139ec <tcp_process+0x6d0>
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	687a      	ldr	r2, [r7, #4]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d104      	bne.n	80139e6 <tcp_process+0x6ca>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	68da      	ldr	r2, [r3, #12]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	60da      	str	r2, [r3, #12]
 80139e4:	e005      	b.n	80139f2 <tcp_process+0x6d6>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	60fb      	str	r3, [r7, #12]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d1ef      	bne.n	80139d2 <tcp_process+0x6b6>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	60da      	str	r2, [r3, #12]
 80139f8:	4b23      	ldr	r3, [pc, #140]	; (8013a88 <tcp_process+0x76c>)
 80139fa:	2201      	movs	r2, #1
 80139fc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	220a      	movs	r2, #10
 8013a02:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8013a04:	4b21      	ldr	r3, [pc, #132]	; (8013a8c <tcp_process+0x770>)
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	60da      	str	r2, [r3, #12]
 8013a0c:	4a1f      	ldr	r2, [pc, #124]	; (8013a8c <tcp_process+0x770>)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6013      	str	r3, [r2, #0]
 8013a12:	f002 fd05 	bl	8016420 <tcp_timer_needed>
    }
    break;
 8013a16:	e026      	b.n	8013a66 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f000 f8af 	bl	8013b7c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013a1e:	4b16      	ldr	r3, [pc, #88]	; (8013a78 <tcp_process+0x75c>)
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	f003 0310 	and.w	r3, r3, #16
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d01f      	beq.n	8013a6a <tcp_process+0x74e>
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a2e:	4b13      	ldr	r3, [pc, #76]	; (8013a7c <tcp_process+0x760>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d119      	bne.n	8013a6a <tcp_process+0x74e>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d115      	bne.n	8013a6a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8013a3e:	4b10      	ldr	r3, [pc, #64]	; (8013a80 <tcp_process+0x764>)
 8013a40:	781b      	ldrb	r3, [r3, #0]
 8013a42:	f043 0310 	orr.w	r3, r3, #16
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	4b0d      	ldr	r3, [pc, #52]	; (8013a80 <tcp_process+0x764>)
 8013a4a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8013a4c:	e00d      	b.n	8013a6a <tcp_process+0x74e>
  default:
    break;
 8013a4e:	bf00      	nop
 8013a50:	e00c      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a52:	bf00      	nop
 8013a54:	e00a      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a56:	bf00      	nop
 8013a58:	e008      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a5a:	bf00      	nop
 8013a5c:	e006      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a5e:	bf00      	nop
 8013a60:	e004      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a62:	bf00      	nop
 8013a64:	e002      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a66:	bf00      	nop
 8013a68:	e000      	b.n	8013a6c <tcp_process+0x750>
    break;
 8013a6a:	bf00      	nop
  }
  return ERR_OK;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3720      	adds	r7, #32
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	2000c830 	.word	0x2000c830
 8013a7c:	2000c828 	.word	0x2000c828
 8013a80:	2000c831 	.word	0x2000c831
 8013a84:	200101cc 	.word	0x200101cc
 8013a88:	200101c8 	.word	0x200101c8
 8013a8c:	200101dc 	.word	0x200101dc

08013a90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013a90:	b590      	push	{r4, r7, lr}
 8013a92:	b085      	sub	sp, #20
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	899b      	ldrh	r3, [r3, #12]
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fb fe16 	bl	800f6d4 <lwip_htons>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	f003 0301 	and.w	r3, r3, #1
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d027      	beq.n	8013b02 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013ab2:	6838      	ldr	r0, [r7, #0]
 8013ab4:	f7fe fb2d 	bl	8012112 <tcp_segs_free>
    next = NULL;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	603b      	str	r3, [r7, #0]
 8013abc:	e055      	b.n	8013b6a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	68db      	ldr	r3, [r3, #12]
 8013ac2:	899b      	ldrh	r3, [r3, #12]
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fb fe04 	bl	800f6d4 <lwip_htons>
 8013acc:	4603      	mov	r3, r0
 8013ace:	f003 0301 	and.w	r3, r3, #1
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00d      	beq.n	8013af2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	899b      	ldrh	r3, [r3, #12]
 8013adc:	b29c      	uxth	r4, r3
 8013ade:	2001      	movs	r0, #1
 8013ae0:	f7fb fdf8 	bl	800f6d4 <lwip_htons>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	4322      	orrs	r2, r4
 8013aee:	b292      	uxth	r2, r2
 8013af0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f7fe fb1c 	bl	801213a <tcp_seg_free>
    while (next &&
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00e      	beq.n	8013b26 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	891b      	ldrh	r3, [r3, #8]
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <tcp_oos_insert_segment+0xe8>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	441a      	add	r2, r3
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	8909      	ldrh	r1, [r1, #8]
 8013b1e:	440b      	add	r3, r1
 8013b20:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	dacb      	bge.n	8013abe <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d01e      	beq.n	8013b6a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	891b      	ldrh	r3, [r3, #8]
 8013b30:	461a      	mov	r2, r3
 8013b32:	4b11      	ldr	r3, [pc, #68]	; (8013b78 <tcp_oos_insert_segment+0xe8>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	441a      	add	r2, r3
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	dd12      	ble.n	8013b6a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	4b0a      	ldr	r3, [pc, #40]	; (8013b78 <tcp_oos_insert_segment+0xe8>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	685a      	ldr	r2, [r3, #4]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	891b      	ldrh	r3, [r3, #8]
 8013b62:	4619      	mov	r1, r3
 8013b64:	4610      	mov	r0, r2
 8013b66:	f7fc fe5b 	bl	8010820 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	683a      	ldr	r2, [r7, #0]
 8013b6e:	601a      	str	r2, [r3, #0]
}
 8013b70:	bf00      	nop
 8013b72:	3714      	adds	r7, #20
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd90      	pop	{r4, r7, pc}
 8013b78:	2000c824 	.word	0x2000c824

08013b7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b7e:	b08d      	sub	sp, #52	; 0x34
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8013b84:	2300      	movs	r3, #0
 8013b86:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	7d1b      	ldrb	r3, [r3, #20]
 8013b8c:	2b03      	cmp	r3, #3
 8013b8e:	d806      	bhi.n	8013b9e <tcp_receive+0x22>
 8013b90:	4ba6      	ldr	r3, [pc, #664]	; (8013e2c <tcp_receive+0x2b0>)
 8013b92:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8013b96:	49a6      	ldr	r1, [pc, #664]	; (8013e30 <tcp_receive+0x2b4>)
 8013b98:	48a6      	ldr	r0, [pc, #664]	; (8013e34 <tcp_receive+0x2b8>)
 8013b9a:	f005 fc91 	bl	80194c0 <iprintf>

  if (flags & TCP_ACK) {
 8013b9e:	4ba6      	ldr	r3, [pc, #664]	; (8013e38 <tcp_receive+0x2bc>)
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	f003 0310 	and.w	r3, r3, #16
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 82bf 	beq.w	801412a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bb8:	4413      	add	r3, r2
 8013bba:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bc0:	4b9e      	ldr	r3, [pc, #632]	; (8013e3c <tcp_receive+0x2c0>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	1ad3      	subs	r3, r2, r3
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	db1b      	blt.n	8013c02 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bce:	4b9b      	ldr	r3, [pc, #620]	; (8013e3c <tcp_receive+0x2c0>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d106      	bne.n	8013be4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013bda:	4b99      	ldr	r3, [pc, #612]	; (8013e40 <tcp_receive+0x2c4>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	1ad3      	subs	r3, r2, r3
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	db0e      	blt.n	8013c02 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013be8:	4b95      	ldr	r3, [pc, #596]	; (8013e40 <tcp_receive+0x2c4>)
 8013bea:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d141      	bne.n	8013c74 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013bf0:	4b94      	ldr	r3, [pc, #592]	; (8013e44 <tcp_receive+0x2c8>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	89db      	ldrh	r3, [r3, #14]
 8013bf6:	b29a      	uxth	r2, r3
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d938      	bls.n	8013c74 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013c02:	4b90      	ldr	r3, [pc, #576]	; (8013e44 <tcp_receive+0x2c8>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	89db      	ldrh	r3, [r3, #14]
 8013c08:	b29a      	uxth	r2, r3
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d205      	bcs.n	8013c2c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8013c2c:	4b83      	ldr	r3, [pc, #524]	; (8013e3c <tcp_receive+0x2c0>)
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8013c34:	4b82      	ldr	r3, [pc, #520]	; (8013e40 <tcp_receive+0x2c4>)
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d10d      	bne.n	8013c62 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d111      	bne.n	8013c74 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8013c60:	e008      	b.n	8013c74 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d003      	beq.n	8013c74 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013c74:	4b72      	ldr	r3, [pc, #456]	; (8013e40 <tcp_receive+0x2c4>)
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c7c:	1ad3      	subs	r3, r2, r3
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	dc53      	bgt.n	8013d2a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8013c82:	4b71      	ldr	r3, [pc, #452]	; (8013e48 <tcp_receive+0x2cc>)
 8013c84:	881b      	ldrh	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d146      	bne.n	8013d18 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8013c94:	4413      	add	r3, r2
 8013c96:	697a      	ldr	r2, [r7, #20]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d13d      	bne.n	8013d18 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	db38      	blt.n	8013d18 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013caa:	4b65      	ldr	r3, [pc, #404]	; (8013e40 <tcp_receive+0x2c4>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d132      	bne.n	8013d18 <tcp_receive+0x19c>
              found_dupack = 1;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cbc:	2bff      	cmp	r3, #255	; 0xff
 8013cbe:	d007      	beq.n	8013cd0 <tcp_receive+0x154>
                ++pcb->dupacks;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	b2da      	uxtb	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cd6:	2b03      	cmp	r3, #3
 8013cd8:	d916      	bls.n	8013d08 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ce4:	4413      	add	r3, r2
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d912      	bls.n	8013d18 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cfc:	4413      	add	r3, r2
 8013cfe:	b29a      	uxth	r2, r3
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d06:	e007      	b.n	8013d18 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d0e:	2b03      	cmp	r3, #3
 8013d10:	d102      	bne.n	8013d18 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f002 fa2e 	bl	8016174 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	f040 8169 	bne.w	8013ff2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2200      	movs	r2, #0
 8013d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013d28:	e163      	b.n	8013ff2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013d2a:	4b45      	ldr	r3, [pc, #276]	; (8013e40 <tcp_receive+0x2c4>)
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d32:	1ad3      	subs	r3, r2, r3
 8013d34:	3b01      	subs	r3, #1
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f2c0 8107 	blt.w	8013f4a <tcp_receive+0x3ce>
 8013d3c:	4b40      	ldr	r3, [pc, #256]	; (8013e40 <tcp_receive+0x2c4>)
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d44:	1ad3      	subs	r3, r2, r3
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f300 80ff 	bgt.w	8013f4a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	7e9b      	ldrb	r3, [r3, #26]
 8013d50:	f003 0304 	and.w	r3, r3, #4
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d00c      	beq.n	8013d72 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	7e9b      	ldrb	r3, [r3, #26]
 8013d5c:	f023 0304 	bic.w	r3, r3, #4
 8013d60:	b2da      	uxtb	r2, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2200      	movs	r2, #0
 8013d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d80:	10db      	asrs	r3, r3, #3
 8013d82:	b21b      	sxth	r3, r3
 8013d84:	b29a      	uxth	r2, r3
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	4413      	add	r3, r2
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	b21a      	sxth	r2, r3
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013da2:	4b27      	ldr	r3, [pc, #156]	; (8013e40 <tcp_receive+0x2c4>)
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	7d1b      	ldrb	r3, [r3, #20]
 8013dae:	2b03      	cmp	r3, #3
 8013db0:	f240 8094 	bls.w	8013edc <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d216      	bcs.n	8013df2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dce:	4413      	add	r3, r2
 8013dd0:	b29a      	uxth	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d97f      	bls.n	8013edc <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013de6:	4413      	add	r3, r2
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013df0:	e074      	b.n	8013edc <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e02:	fb03 f301 	mul.w	r3, r3, r1
 8013e06:	6879      	ldr	r1, [r7, #4]
 8013e08:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8013e0c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	4413      	add	r3, r2
 8013e14:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e1c:	8a7a      	ldrh	r2, [r7, #18]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d95c      	bls.n	8013edc <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	8a7a      	ldrh	r2, [r7, #18]
 8013e26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8013e2a:	e057      	b.n	8013edc <tcp_receive+0x360>
 8013e2c:	0801bf6c 	.word	0x0801bf6c
 8013e30:	0801c1b4 	.word	0x0801c1b4
 8013e34:	0801bfd4 	.word	0x0801bfd4
 8013e38:	2000c830 	.word	0x2000c830
 8013e3c:	2000c824 	.word	0x2000c824
 8013e40:	2000c828 	.word	0x2000c828
 8013e44:	2000c814 	.word	0x2000c814
 8013e48:	2000c82e 	.word	0x2000c82e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e50:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7fc fee8 	bl	8010c3c <pbuf_clen>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	429c      	cmp	r4, r3
 8013e70:	d206      	bcs.n	8013e80 <tcp_receive+0x304>
 8013e72:	4b70      	ldr	r3, [pc, #448]	; (8014034 <tcp_receive+0x4b8>)
 8013e74:	f240 429e 	movw	r2, #1182	; 0x49e
 8013e78:	496f      	ldr	r1, [pc, #444]	; (8014038 <tcp_receive+0x4bc>)
 8013e7a:	4870      	ldr	r0, [pc, #448]	; (801403c <tcp_receive+0x4c0>)
 8013e7c:	f005 fb20 	bl	80194c0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8013e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7fc fed9 	bl	8010c3c <pbuf_clen>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013e94:	1a9b      	subs	r3, r3, r2
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	891a      	ldrh	r2, [r3, #8]
 8013ea2:	4b67      	ldr	r3, [pc, #412]	; (8014040 <tcp_receive+0x4c4>)
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	4b65      	ldr	r3, [pc, #404]	; (8014040 <tcp_receive+0x4c4>)
 8013eac:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8013eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013eb0:	f7fe f943 	bl	801213a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00e      	beq.n	8013edc <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d10a      	bne.n	8013edc <tcp_receive+0x360>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d106      	bne.n	8013edc <tcp_receive+0x360>
 8013ece:	4b59      	ldr	r3, [pc, #356]	; (8014034 <tcp_receive+0x4b8>)
 8013ed0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8013ed4:	495b      	ldr	r1, [pc, #364]	; (8014044 <tcp_receive+0x4c8>)
 8013ed6:	4859      	ldr	r0, [pc, #356]	; (801403c <tcp_receive+0x4c0>)
 8013ed8:	f005 faf2 	bl	80194c0 <iprintf>
      while (pcb->unacked != NULL &&
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d022      	beq.n	8013f2a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fb fbff 	bl	800f6f0 <lwip_htonl>
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ef8:	891b      	ldrh	r3, [r3, #8]
 8013efa:	461d      	mov	r5, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	899b      	ldrh	r3, [r3, #12]
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fb fbe4 	bl	800f6d4 <lwip_htons>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	f003 0303 	and.w	r3, r3, #3
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d001      	beq.n	8013f1a <tcp_receive+0x39e>
 8013f16:	2301      	movs	r3, #1
 8013f18:	e000      	b.n	8013f1c <tcp_receive+0x3a0>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	442b      	add	r3, r5
 8013f1e:	18e2      	adds	r2, r4, r3
 8013f20:	4b49      	ldr	r3, [pc, #292]	; (8014048 <tcp_receive+0x4cc>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	dd90      	ble.n	8013e4c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d104      	bne.n	8013f3c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f38:	861a      	strh	r2, [r3, #48]	; 0x30
 8013f3a:	e002      	b.n	8013f42 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2200      	movs	r2, #0
 8013f46:	76da      	strb	r2, [r3, #27]
 8013f48:	e002      	b.n	8013f50 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f001 fd30 	bl	80159b0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8013f50:	e04f      	b.n	8013ff2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d103      	bne.n	8013f72 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fc fe5d 	bl	8010c3c <pbuf_clen>
 8013f82:	4603      	mov	r3, r0
 8013f84:	429c      	cmp	r4, r3
 8013f86:	d206      	bcs.n	8013f96 <tcp_receive+0x41a>
 8013f88:	4b2a      	ldr	r3, [pc, #168]	; (8014034 <tcp_receive+0x4b8>)
 8013f8a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013f8e:	492a      	ldr	r1, [pc, #168]	; (8014038 <tcp_receive+0x4bc>)
 8013f90:	482a      	ldr	r0, [pc, #168]	; (801403c <tcp_receive+0x4c0>)
 8013f92:	f005 fa95 	bl	80194c0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8013f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f98:	685b      	ldr	r3, [r3, #4]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fc fe4e 	bl	8010c3c <pbuf_clen>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013faa:	1a9b      	subs	r3, r3, r2
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8013fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb6:	891a      	ldrh	r2, [r3, #8]
 8013fb8:	4b21      	ldr	r3, [pc, #132]	; (8014040 <tcp_receive+0x4c4>)
 8013fba:	881b      	ldrh	r3, [r3, #0]
 8013fbc:	4413      	add	r3, r2
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	4b1f      	ldr	r3, [pc, #124]	; (8014040 <tcp_receive+0x4c4>)
 8013fc2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8013fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fc6:	f7fe f8b8 	bl	801213a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d00e      	beq.n	8013ff2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d10a      	bne.n	8013ff2 <tcp_receive+0x476>
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d106      	bne.n	8013ff2 <tcp_receive+0x476>
 8013fe4:	4b13      	ldr	r3, [pc, #76]	; (8014034 <tcp_receive+0x4b8>)
 8013fe6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8013fea:	4916      	ldr	r1, [pc, #88]	; (8014044 <tcp_receive+0x4c8>)
 8013fec:	4813      	ldr	r0, [pc, #76]	; (801403c <tcp_receive+0x4c0>)
 8013fee:	f005 fa67 	bl	80194c0 <iprintf>
    while (pcb->unsent != NULL &&
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d036      	beq.n	8014068 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013ffa:	4b13      	ldr	r3, [pc, #76]	; (8014048 <tcp_receive+0x4cc>)
 8013ffc:	681c      	ldr	r4, [r3, #0]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	4618      	mov	r0, r3
 8014008:	f7fb fb72 	bl	800f6f0 <lwip_htonl>
 801400c:	4605      	mov	r5, r0
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014012:	891b      	ldrh	r3, [r3, #8]
 8014014:	461e      	mov	r6, r3
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	899b      	ldrh	r3, [r3, #12]
 801401e:	b29b      	uxth	r3, r3
 8014020:	4618      	mov	r0, r3
 8014022:	f7fb fb57 	bl	800f6d4 <lwip_htons>
 8014026:	4603      	mov	r3, r0
 8014028:	f003 0303 	and.w	r3, r3, #3
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00d      	beq.n	801404c <tcp_receive+0x4d0>
 8014030:	2301      	movs	r3, #1
 8014032:	e00c      	b.n	801404e <tcp_receive+0x4d2>
 8014034:	0801bf6c 	.word	0x0801bf6c
 8014038:	0801c1d0 	.word	0x0801c1d0
 801403c:	0801bfd4 	.word	0x0801bfd4
 8014040:	2000c82c 	.word	0x2000c82c
 8014044:	0801c1f8 	.word	0x0801c1f8
 8014048:	2000c828 	.word	0x2000c828
 801404c:	2300      	movs	r3, #0
 801404e:	4433      	add	r3, r6
 8014050:	442b      	add	r3, r5
 8014052:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8014054:	2b00      	cmp	r3, #0
 8014056:	db07      	blt.n	8014068 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014058:	4b8d      	ldr	r3, [pc, #564]	; (8014290 <tcp_receive+0x714>)
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	2b00      	cmp	r3, #0
 8014064:	f77f af75 	ble.w	8013f52 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801406e:	4b89      	ldr	r3, [pc, #548]	; (8014294 <tcp_receive+0x718>)
 8014070:	881b      	ldrh	r3, [r3, #0]
 8014072:	4413      	add	r3, r2
 8014074:	b29a      	uxth	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014080:	2b00      	cmp	r3, #0
 8014082:	d052      	beq.n	801412a <tcp_receive+0x5ae>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014088:	4b81      	ldr	r3, [pc, #516]	; (8014290 <tcp_receive+0x714>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	1ad3      	subs	r3, r2, r3
 801408e:	2b00      	cmp	r3, #0
 8014090:	da4b      	bge.n	801412a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014092:	4b81      	ldr	r3, [pc, #516]	; (8014298 <tcp_receive+0x71c>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	b29a      	uxth	r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801409c:	b29b      	uxth	r3, r3
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80140a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140ac:	10db      	asrs	r3, r3, #3
 80140ae:	b21b      	sxth	r3, r3
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	1ad3      	subs	r3, r2, r3
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140be:	b29a      	uxth	r2, r3
 80140c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140c2:	4413      	add	r3, r2
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	b21a      	sxth	r2, r3
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80140cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	da03      	bge.n	80140dc <tcp_receive+0x560>
        m = -m;
 80140d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140d6:	425b      	negs	r3, r3
 80140d8:	b29b      	uxth	r3, r3
 80140da:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80140dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140e4:	109b      	asrs	r3, r3, #2
 80140e6:	b21b      	sxth	r3, r3
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	1ad3      	subs	r3, r2, r3
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140fa:	4413      	add	r3, r2
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	b21a      	sxth	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801410a:	10db      	asrs	r3, r3, #3
 801410c:	b21b      	sxth	r3, r3
 801410e:	b29a      	uxth	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014116:	b29b      	uxth	r3, r3
 8014118:	4413      	add	r3, r2
 801411a:	b29b      	uxth	r3, r3
 801411c:	b21a      	sxth	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801412a:	4b5c      	ldr	r3, [pc, #368]	; (801429c <tcp_receive+0x720>)
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	f000 84f1 	beq.w	8014b16 <tcp_receive+0xf9a>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	7d1b      	ldrb	r3, [r3, #20]
 8014138:	2b06      	cmp	r3, #6
 801413a:	f200 84ec 	bhi.w	8014b16 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014142:	4b57      	ldr	r3, [pc, #348]	; (80142a0 <tcp_receive+0x724>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	1ad3      	subs	r3, r2, r3
 8014148:	3b01      	subs	r3, #1
 801414a:	2b00      	cmp	r3, #0
 801414c:	f2c0 80b8 	blt.w	80142c0 <tcp_receive+0x744>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014154:	4b51      	ldr	r3, [pc, #324]	; (801429c <tcp_receive+0x720>)
 8014156:	881b      	ldrh	r3, [r3, #0]
 8014158:	4619      	mov	r1, r3
 801415a:	4b51      	ldr	r3, [pc, #324]	; (80142a0 <tcp_receive+0x724>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	440b      	add	r3, r1
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	3301      	adds	r3, #1
 8014164:	2b00      	cmp	r3, #0
 8014166:	f300 80ab 	bgt.w	80142c0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801416a:	4b4e      	ldr	r3, [pc, #312]	; (80142a4 <tcp_receive+0x728>)
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014174:	4b4a      	ldr	r3, [pc, #296]	; (80142a0 <tcp_receive+0x724>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	1ad3      	subs	r3, r2, r3
 801417a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801417c:	4b49      	ldr	r3, [pc, #292]	; (80142a4 <tcp_receive+0x728>)
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d106      	bne.n	8014192 <tcp_receive+0x616>
 8014184:	4b48      	ldr	r3, [pc, #288]	; (80142a8 <tcp_receive+0x72c>)
 8014186:	f240 523c 	movw	r2, #1340	; 0x53c
 801418a:	4948      	ldr	r1, [pc, #288]	; (80142ac <tcp_receive+0x730>)
 801418c:	4848      	ldr	r0, [pc, #288]	; (80142b0 <tcp_receive+0x734>)
 801418e:	f005 f997 	bl	80194c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8014192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014194:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014198:	4293      	cmp	r3, r2
 801419a:	dd06      	ble.n	80141aa <tcp_receive+0x62e>
 801419c:	4b42      	ldr	r3, [pc, #264]	; (80142a8 <tcp_receive+0x72c>)
 801419e:	f240 523d 	movw	r2, #1341	; 0x53d
 80141a2:	4944      	ldr	r1, [pc, #272]	; (80142b4 <tcp_receive+0x738>)
 80141a4:	4842      	ldr	r0, [pc, #264]	; (80142b0 <tcp_receive+0x734>)
 80141a6:	f005 f98b 	bl	80194c0 <iprintf>
      if (inseg.p->len < off) {
 80141aa:	4b3e      	ldr	r3, [pc, #248]	; (80142a4 <tcp_receive+0x728>)
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	895b      	ldrh	r3, [r3, #10]
 80141b0:	461a      	mov	r2, r3
 80141b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b4:	4293      	cmp	r3, r2
 80141b6:	dd3e      	ble.n	8014236 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80141b8:	4b3a      	ldr	r3, [pc, #232]	; (80142a4 <tcp_receive+0x728>)
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	891b      	ldrh	r3, [r3, #8]
 80141be:	461a      	mov	r2, r3
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	4293      	cmp	r3, r2
 80141c4:	dd06      	ble.n	80141d4 <tcp_receive+0x658>
 80141c6:	4b38      	ldr	r3, [pc, #224]	; (80142a8 <tcp_receive+0x72c>)
 80141c8:	f240 523f 	movw	r2, #1343	; 0x53f
 80141cc:	493a      	ldr	r1, [pc, #232]	; (80142b8 <tcp_receive+0x73c>)
 80141ce:	4838      	ldr	r0, [pc, #224]	; (80142b0 <tcp_receive+0x734>)
 80141d0:	f005 f976 	bl	80194c0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80141d4:	4b33      	ldr	r3, [pc, #204]	; (80142a4 <tcp_receive+0x728>)
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	891a      	ldrh	r2, [r3, #8]
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	b29b      	uxth	r3, r3
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80141e2:	e00e      	b.n	8014202 <tcp_receive+0x686>
          off -= p->len;
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	895b      	ldrh	r3, [r3, #10]
 80141e8:	461a      	mov	r2, r3
 80141ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ec:	1a9b      	subs	r3, r3, r2
 80141ee:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	8a3a      	ldrh	r2, [r7, #16]
 80141f4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80141f6:	69bb      	ldr	r3, [r7, #24]
 80141f8:	2200      	movs	r2, #0
 80141fa:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	895b      	ldrh	r3, [r3, #10]
 8014206:	461a      	mov	r2, r3
 8014208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420a:	4293      	cmp	r3, r2
 801420c:	dcea      	bgt.n	80141e4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014210:	b29b      	uxth	r3, r3
 8014212:	425b      	negs	r3, r3
 8014214:	b29b      	uxth	r3, r3
 8014216:	b21b      	sxth	r3, r3
 8014218:	4619      	mov	r1, r3
 801421a:	69b8      	ldr	r0, [r7, #24]
 801421c:	f7fc fc50 	bl	8010ac0 <pbuf_header>
 8014220:	4603      	mov	r3, r0
 8014222:	2b00      	cmp	r3, #0
 8014224:	d01c      	beq.n	8014260 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014226:	4b20      	ldr	r3, [pc, #128]	; (80142a8 <tcp_receive+0x72c>)
 8014228:	f240 524c 	movw	r2, #1356	; 0x54c
 801422c:	4923      	ldr	r1, [pc, #140]	; (80142bc <tcp_receive+0x740>)
 801422e:	4820      	ldr	r0, [pc, #128]	; (80142b0 <tcp_receive+0x734>)
 8014230:	f005 f946 	bl	80194c0 <iprintf>
 8014234:	e014      	b.n	8014260 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8014236:	4b1b      	ldr	r3, [pc, #108]	; (80142a4 <tcp_receive+0x728>)
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801423c:	b292      	uxth	r2, r2
 801423e:	4252      	negs	r2, r2
 8014240:	b292      	uxth	r2, r2
 8014242:	b212      	sxth	r2, r2
 8014244:	4611      	mov	r1, r2
 8014246:	4618      	mov	r0, r3
 8014248:	f7fc fc3a 	bl	8010ac0 <pbuf_header>
 801424c:	4603      	mov	r3, r0
 801424e:	2b00      	cmp	r3, #0
 8014250:	d006      	beq.n	8014260 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014252:	4b15      	ldr	r3, [pc, #84]	; (80142a8 <tcp_receive+0x72c>)
 8014254:	f240 5251 	movw	r2, #1361	; 0x551
 8014258:	4918      	ldr	r1, [pc, #96]	; (80142bc <tcp_receive+0x740>)
 801425a:	4815      	ldr	r0, [pc, #84]	; (80142b0 <tcp_receive+0x734>)
 801425c:	f005 f930 	bl	80194c0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8014260:	4b10      	ldr	r3, [pc, #64]	; (80142a4 <tcp_receive+0x728>)
 8014262:	891a      	ldrh	r2, [r3, #8]
 8014264:	4b0e      	ldr	r3, [pc, #56]	; (80142a0 <tcp_receive+0x724>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	b299      	uxth	r1, r3
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801426e:	b29b      	uxth	r3, r3
 8014270:	1acb      	subs	r3, r1, r3
 8014272:	b29b      	uxth	r3, r3
 8014274:	4413      	add	r3, r2
 8014276:	b29a      	uxth	r2, r3
 8014278:	4b0a      	ldr	r3, [pc, #40]	; (80142a4 <tcp_receive+0x728>)
 801427a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014280:	4a07      	ldr	r2, [pc, #28]	; (80142a0 <tcp_receive+0x724>)
 8014282:	6013      	str	r3, [r2, #0]
 8014284:	4b07      	ldr	r3, [pc, #28]	; (80142a4 <tcp_receive+0x728>)
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	4a05      	ldr	r2, [pc, #20]	; (80142a0 <tcp_receive+0x724>)
 801428a:	6812      	ldr	r2, [r2, #0]
 801428c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801428e:	e025      	b.n	80142dc <tcp_receive+0x760>
 8014290:	2000c828 	.word	0x2000c828
 8014294:	2000c82c 	.word	0x2000c82c
 8014298:	200101d0 	.word	0x200101d0
 801429c:	2000c82e 	.word	0x2000c82e
 80142a0:	2000c824 	.word	0x2000c824
 80142a4:	2000c804 	.word	0x2000c804
 80142a8:	0801bf6c 	.word	0x0801bf6c
 80142ac:	0801c218 	.word	0x0801c218
 80142b0:	0801bfd4 	.word	0x0801bfd4
 80142b4:	0801c228 	.word	0x0801c228
 80142b8:	0801c238 	.word	0x0801c238
 80142bc:	0801c248 	.word	0x0801c248
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80142c0:	4b87      	ldr	r3, [pc, #540]	; (80144e0 <tcp_receive+0x964>)
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	da06      	bge.n	80142dc <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	7e9b      	ldrb	r3, [r3, #26]
 80142d2:	f043 0302 	orr.w	r3, r3, #2
 80142d6:	b2da      	uxtb	r2, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142dc:	4b80      	ldr	r3, [pc, #512]	; (80144e0 <tcp_receive+0x964>)
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	f2c0 8410 	blt.w	8014b0c <tcp_receive+0xf90>
 80142ec:	4b7c      	ldr	r3, [pc, #496]	; (80144e0 <tcp_receive+0x964>)
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f4:	6879      	ldr	r1, [r7, #4]
 80142f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142f8:	440b      	add	r3, r1
 80142fa:	1ad3      	subs	r3, r2, r3
 80142fc:	3301      	adds	r3, #1
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f300 8404 	bgt.w	8014b0c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014308:	4b75      	ldr	r3, [pc, #468]	; (80144e0 <tcp_receive+0x964>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	429a      	cmp	r2, r3
 801430e:	f040 8287 	bne.w	8014820 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014312:	4b74      	ldr	r3, [pc, #464]	; (80144e4 <tcp_receive+0x968>)
 8014314:	891c      	ldrh	r4, [r3, #8]
 8014316:	4b73      	ldr	r3, [pc, #460]	; (80144e4 <tcp_receive+0x968>)
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	899b      	ldrh	r3, [r3, #12]
 801431c:	b29b      	uxth	r3, r3
 801431e:	4618      	mov	r0, r3
 8014320:	f7fb f9d8 	bl	800f6d4 <lwip_htons>
 8014324:	4603      	mov	r3, r0
 8014326:	f003 0303 	and.w	r3, r3, #3
 801432a:	2b00      	cmp	r3, #0
 801432c:	d001      	beq.n	8014332 <tcp_receive+0x7b6>
 801432e:	2301      	movs	r3, #1
 8014330:	e000      	b.n	8014334 <tcp_receive+0x7b8>
 8014332:	2300      	movs	r3, #0
 8014334:	4423      	add	r3, r4
 8014336:	b29a      	uxth	r2, r3
 8014338:	4b6b      	ldr	r3, [pc, #428]	; (80144e8 <tcp_receive+0x96c>)
 801433a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014340:	4b69      	ldr	r3, [pc, #420]	; (80144e8 <tcp_receive+0x96c>)
 8014342:	881b      	ldrh	r3, [r3, #0]
 8014344:	429a      	cmp	r2, r3
 8014346:	d26e      	bcs.n	8014426 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014348:	4b66      	ldr	r3, [pc, #408]	; (80144e4 <tcp_receive+0x968>)
 801434a:	68db      	ldr	r3, [r3, #12]
 801434c:	899b      	ldrh	r3, [r3, #12]
 801434e:	b29b      	uxth	r3, r3
 8014350:	4618      	mov	r0, r3
 8014352:	f7fb f9bf 	bl	800f6d4 <lwip_htons>
 8014356:	4603      	mov	r3, r0
 8014358:	f003 0301 	and.w	r3, r3, #1
 801435c:	2b00      	cmp	r3, #0
 801435e:	d01b      	beq.n	8014398 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014360:	4b60      	ldr	r3, [pc, #384]	; (80144e4 <tcp_receive+0x968>)
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	899b      	ldrh	r3, [r3, #12]
 8014366:	b29b      	uxth	r3, r3
 8014368:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801436c:	b29c      	uxth	r4, r3
 801436e:	4b5d      	ldr	r3, [pc, #372]	; (80144e4 <tcp_receive+0x968>)
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	899b      	ldrh	r3, [r3, #12]
 8014374:	b29b      	uxth	r3, r3
 8014376:	4618      	mov	r0, r3
 8014378:	f7fb f9ac 	bl	800f6d4 <lwip_htons>
 801437c:	4603      	mov	r3, r0
 801437e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014382:	b29b      	uxth	r3, r3
 8014384:	4618      	mov	r0, r3
 8014386:	f7fb f9a5 	bl	800f6d4 <lwip_htons>
 801438a:	4603      	mov	r3, r0
 801438c:	461a      	mov	r2, r3
 801438e:	4b55      	ldr	r3, [pc, #340]	; (80144e4 <tcp_receive+0x968>)
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	4322      	orrs	r2, r4
 8014394:	b292      	uxth	r2, r2
 8014396:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801439c:	4b51      	ldr	r3, [pc, #324]	; (80144e4 <tcp_receive+0x968>)
 801439e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80143a0:	4b50      	ldr	r3, [pc, #320]	; (80144e4 <tcp_receive+0x968>)
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fb f993 	bl	800f6d4 <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	f003 0302 	and.w	r3, r3, #2
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d005      	beq.n	80143c4 <tcp_receive+0x848>
            inseg.len -= 1;
 80143b8:	4b4a      	ldr	r3, [pc, #296]	; (80144e4 <tcp_receive+0x968>)
 80143ba:	891b      	ldrh	r3, [r3, #8]
 80143bc:	3b01      	subs	r3, #1
 80143be:	b29a      	uxth	r2, r3
 80143c0:	4b48      	ldr	r3, [pc, #288]	; (80144e4 <tcp_receive+0x968>)
 80143c2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80143c4:	4b47      	ldr	r3, [pc, #284]	; (80144e4 <tcp_receive+0x968>)
 80143c6:	685a      	ldr	r2, [r3, #4]
 80143c8:	4b46      	ldr	r3, [pc, #280]	; (80144e4 <tcp_receive+0x968>)
 80143ca:	891b      	ldrh	r3, [r3, #8]
 80143cc:	4619      	mov	r1, r3
 80143ce:	4610      	mov	r0, r2
 80143d0:	f7fc fa26 	bl	8010820 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80143d4:	4b43      	ldr	r3, [pc, #268]	; (80144e4 <tcp_receive+0x968>)
 80143d6:	891c      	ldrh	r4, [r3, #8]
 80143d8:	4b42      	ldr	r3, [pc, #264]	; (80144e4 <tcp_receive+0x968>)
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	899b      	ldrh	r3, [r3, #12]
 80143de:	b29b      	uxth	r3, r3
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fb f977 	bl	800f6d4 <lwip_htons>
 80143e6:	4603      	mov	r3, r0
 80143e8:	f003 0303 	and.w	r3, r3, #3
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <tcp_receive+0x878>
 80143f0:	2301      	movs	r3, #1
 80143f2:	e000      	b.n	80143f6 <tcp_receive+0x87a>
 80143f4:	2300      	movs	r3, #0
 80143f6:	4423      	add	r3, r4
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	4b3b      	ldr	r3, [pc, #236]	; (80144e8 <tcp_receive+0x96c>)
 80143fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80143fe:	4b3a      	ldr	r3, [pc, #232]	; (80144e8 <tcp_receive+0x96c>)
 8014400:	881b      	ldrh	r3, [r3, #0]
 8014402:	461a      	mov	r2, r3
 8014404:	4b36      	ldr	r3, [pc, #216]	; (80144e0 <tcp_receive+0x964>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	441a      	add	r2, r3
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440e:	6879      	ldr	r1, [r7, #4]
 8014410:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014412:	440b      	add	r3, r1
 8014414:	429a      	cmp	r2, r3
 8014416:	d006      	beq.n	8014426 <tcp_receive+0x8aa>
 8014418:	4b34      	ldr	r3, [pc, #208]	; (80144ec <tcp_receive+0x970>)
 801441a:	f240 527f 	movw	r2, #1407	; 0x57f
 801441e:	4934      	ldr	r1, [pc, #208]	; (80144f0 <tcp_receive+0x974>)
 8014420:	4834      	ldr	r0, [pc, #208]	; (80144f4 <tcp_receive+0x978>)
 8014422:	f005 f84d 	bl	80194c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801442a:	2b00      	cmp	r3, #0
 801442c:	f000 80e1 	beq.w	80145f2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014430:	4b2c      	ldr	r3, [pc, #176]	; (80144e4 <tcp_receive+0x968>)
 8014432:	68db      	ldr	r3, [r3, #12]
 8014434:	899b      	ldrh	r3, [r3, #12]
 8014436:	b29b      	uxth	r3, r3
 8014438:	4618      	mov	r0, r3
 801443a:	f7fb f94b 	bl	800f6d4 <lwip_htons>
 801443e:	4603      	mov	r3, r0
 8014440:	f003 0301 	and.w	r3, r3, #1
 8014444:	2b00      	cmp	r3, #0
 8014446:	d010      	beq.n	801446a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014448:	e00a      	b.n	8014460 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801444e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801445a:	68b8      	ldr	r0, [r7, #8]
 801445c:	f7fd fe6d 	bl	801213a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014464:	2b00      	cmp	r3, #0
 8014466:	d1f0      	bne.n	801444a <tcp_receive+0x8ce>
 8014468:	e0c3      	b.n	80145f2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801446e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014470:	e04f      	b.n	8014512 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	899b      	ldrh	r3, [r3, #12]
 8014478:	b29b      	uxth	r3, r3
 801447a:	4618      	mov	r0, r3
 801447c:	f7fb f92a 	bl	800f6d4 <lwip_htons>
 8014480:	4603      	mov	r3, r0
 8014482:	f003 0301 	and.w	r3, r3, #1
 8014486:	2b00      	cmp	r3, #0
 8014488:	d03b      	beq.n	8014502 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801448a:	4b16      	ldr	r3, [pc, #88]	; (80144e4 <tcp_receive+0x968>)
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	899b      	ldrh	r3, [r3, #12]
 8014490:	b29b      	uxth	r3, r3
 8014492:	4618      	mov	r0, r3
 8014494:	f7fb f91e 	bl	800f6d4 <lwip_htons>
 8014498:	4603      	mov	r3, r0
 801449a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d12f      	bne.n	8014502 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80144a2:	4b10      	ldr	r3, [pc, #64]	; (80144e4 <tcp_receive+0x968>)
 80144a4:	68db      	ldr	r3, [r3, #12]
 80144a6:	899b      	ldrh	r3, [r3, #12]
 80144a8:	b29c      	uxth	r4, r3
 80144aa:	2001      	movs	r0, #1
 80144ac:	f7fb f912 	bl	800f6d4 <lwip_htons>
 80144b0:	4603      	mov	r3, r0
 80144b2:	461a      	mov	r2, r3
 80144b4:	4b0b      	ldr	r3, [pc, #44]	; (80144e4 <tcp_receive+0x968>)
 80144b6:	68db      	ldr	r3, [r3, #12]
 80144b8:	4322      	orrs	r2, r4
 80144ba:	b292      	uxth	r2, r2
 80144bc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80144be:	4b09      	ldr	r3, [pc, #36]	; (80144e4 <tcp_receive+0x968>)
 80144c0:	891c      	ldrh	r4, [r3, #8]
 80144c2:	4b08      	ldr	r3, [pc, #32]	; (80144e4 <tcp_receive+0x968>)
 80144c4:	68db      	ldr	r3, [r3, #12]
 80144c6:	899b      	ldrh	r3, [r3, #12]
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fb f902 	bl	800f6d4 <lwip_htons>
 80144d0:	4603      	mov	r3, r0
 80144d2:	f003 0303 	and.w	r3, r3, #3
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00e      	beq.n	80144f8 <tcp_receive+0x97c>
 80144da:	2301      	movs	r3, #1
 80144dc:	e00d      	b.n	80144fa <tcp_receive+0x97e>
 80144de:	bf00      	nop
 80144e0:	2000c824 	.word	0x2000c824
 80144e4:	2000c804 	.word	0x2000c804
 80144e8:	2000c82e 	.word	0x2000c82e
 80144ec:	0801bf6c 	.word	0x0801bf6c
 80144f0:	0801c25c 	.word	0x0801c25c
 80144f4:	0801bfd4 	.word	0x0801bfd4
 80144f8:	2300      	movs	r3, #0
 80144fa:	4423      	add	r3, r4
 80144fc:	b29a      	uxth	r2, r3
 80144fe:	4b95      	ldr	r3, [pc, #596]	; (8014754 <tcp_receive+0xbd8>)
 8014500:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8014502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014504:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8014506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 801450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801450e:	f7fd fe14 	bl	801213a <tcp_seg_free>
            while (next &&
 8014512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014514:	2b00      	cmp	r3, #0
 8014516:	d00e      	beq.n	8014536 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014518:	4b8e      	ldr	r3, [pc, #568]	; (8014754 <tcp_receive+0xbd8>)
 801451a:	881b      	ldrh	r3, [r3, #0]
 801451c:	461a      	mov	r2, r3
 801451e:	4b8e      	ldr	r3, [pc, #568]	; (8014758 <tcp_receive+0xbdc>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	441a      	add	r2, r3
 8014524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801452c:	8909      	ldrh	r1, [r1, #8]
 801452e:	440b      	add	r3, r1
 8014530:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014532:	2b00      	cmp	r3, #0
 8014534:	da9d      	bge.n	8014472 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014538:	2b00      	cmp	r3, #0
 801453a:	d057      	beq.n	80145ec <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801453c:	4b85      	ldr	r3, [pc, #532]	; (8014754 <tcp_receive+0xbd8>)
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	461a      	mov	r2, r3
 8014542:	4b85      	ldr	r3, [pc, #532]	; (8014758 <tcp_receive+0xbdc>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	441a      	add	r2, r3
 8014548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014550:	2b00      	cmp	r3, #0
 8014552:	dd4b      	ble.n	80145ec <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014556:	68db      	ldr	r3, [r3, #12]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	b29a      	uxth	r2, r3
 801455c:	4b7e      	ldr	r3, [pc, #504]	; (8014758 <tcp_receive+0xbdc>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	b29b      	uxth	r3, r3
 8014562:	1ad3      	subs	r3, r2, r3
 8014564:	b29a      	uxth	r2, r3
 8014566:	4b7d      	ldr	r3, [pc, #500]	; (801475c <tcp_receive+0xbe0>)
 8014568:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801456a:	4b7c      	ldr	r3, [pc, #496]	; (801475c <tcp_receive+0xbe0>)
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	899b      	ldrh	r3, [r3, #12]
 8014570:	b29b      	uxth	r3, r3
 8014572:	4618      	mov	r0, r3
 8014574:	f7fb f8ae 	bl	800f6d4 <lwip_htons>
 8014578:	4603      	mov	r3, r0
 801457a:	f003 0302 	and.w	r3, r3, #2
 801457e:	2b00      	cmp	r3, #0
 8014580:	d005      	beq.n	801458e <tcp_receive+0xa12>
                inseg.len -= 1;
 8014582:	4b76      	ldr	r3, [pc, #472]	; (801475c <tcp_receive+0xbe0>)
 8014584:	891b      	ldrh	r3, [r3, #8]
 8014586:	3b01      	subs	r3, #1
 8014588:	b29a      	uxth	r2, r3
 801458a:	4b74      	ldr	r3, [pc, #464]	; (801475c <tcp_receive+0xbe0>)
 801458c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801458e:	4b73      	ldr	r3, [pc, #460]	; (801475c <tcp_receive+0xbe0>)
 8014590:	685a      	ldr	r2, [r3, #4]
 8014592:	4b72      	ldr	r3, [pc, #456]	; (801475c <tcp_receive+0xbe0>)
 8014594:	891b      	ldrh	r3, [r3, #8]
 8014596:	4619      	mov	r1, r3
 8014598:	4610      	mov	r0, r2
 801459a:	f7fc f941 	bl	8010820 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801459e:	4b6f      	ldr	r3, [pc, #444]	; (801475c <tcp_receive+0xbe0>)
 80145a0:	891c      	ldrh	r4, [r3, #8]
 80145a2:	4b6e      	ldr	r3, [pc, #440]	; (801475c <tcp_receive+0xbe0>)
 80145a4:	68db      	ldr	r3, [r3, #12]
 80145a6:	899b      	ldrh	r3, [r3, #12]
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7fb f892 	bl	800f6d4 <lwip_htons>
 80145b0:	4603      	mov	r3, r0
 80145b2:	f003 0303 	and.w	r3, r3, #3
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d001      	beq.n	80145be <tcp_receive+0xa42>
 80145ba:	2301      	movs	r3, #1
 80145bc:	e000      	b.n	80145c0 <tcp_receive+0xa44>
 80145be:	2300      	movs	r3, #0
 80145c0:	4423      	add	r3, r4
 80145c2:	b29a      	uxth	r2, r3
 80145c4:	4b63      	ldr	r3, [pc, #396]	; (8014754 <tcp_receive+0xbd8>)
 80145c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80145c8:	4b62      	ldr	r3, [pc, #392]	; (8014754 <tcp_receive+0xbd8>)
 80145ca:	881b      	ldrh	r3, [r3, #0]
 80145cc:	461a      	mov	r2, r3
 80145ce:	4b62      	ldr	r3, [pc, #392]	; (8014758 <tcp_receive+0xbdc>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	441a      	add	r2, r3
 80145d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d006      	beq.n	80145ec <tcp_receive+0xa70>
 80145de:	4b60      	ldr	r3, [pc, #384]	; (8014760 <tcp_receive+0xbe4>)
 80145e0:	f240 52af 	movw	r2, #1455	; 0x5af
 80145e4:	495f      	ldr	r1, [pc, #380]	; (8014764 <tcp_receive+0xbe8>)
 80145e6:	4860      	ldr	r0, [pc, #384]	; (8014768 <tcp_receive+0xbec>)
 80145e8:	f004 ff6a 	bl	80194c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145f0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80145f2:	4b58      	ldr	r3, [pc, #352]	; (8014754 <tcp_receive+0xbd8>)
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	461a      	mov	r2, r3
 80145f8:	4b57      	ldr	r3, [pc, #348]	; (8014758 <tcp_receive+0xbdc>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	441a      	add	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014606:	4b53      	ldr	r3, [pc, #332]	; (8014754 <tcp_receive+0xbd8>)
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	429a      	cmp	r2, r3
 801460c:	d206      	bcs.n	801461c <tcp_receive+0xaa0>
 801460e:	4b54      	ldr	r3, [pc, #336]	; (8014760 <tcp_receive+0xbe4>)
 8014610:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014614:	4955      	ldr	r1, [pc, #340]	; (801476c <tcp_receive+0xbf0>)
 8014616:	4854      	ldr	r0, [pc, #336]	; (8014768 <tcp_receive+0xbec>)
 8014618:	f004 ff52 	bl	80194c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014620:	4b4c      	ldr	r3, [pc, #304]	; (8014754 <tcp_receive+0xbd8>)
 8014622:	881b      	ldrh	r3, [r3, #0]
 8014624:	1ad3      	subs	r3, r2, r3
 8014626:	b29a      	uxth	r2, r3
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f7fd f8f7 	bl	8011820 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014632:	4b4a      	ldr	r3, [pc, #296]	; (801475c <tcp_receive+0xbe0>)
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	891b      	ldrh	r3, [r3, #8]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d006      	beq.n	801464a <tcp_receive+0xace>
          recv_data = inseg.p;
 801463c:	4b47      	ldr	r3, [pc, #284]	; (801475c <tcp_receive+0xbe0>)
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	4a4b      	ldr	r2, [pc, #300]	; (8014770 <tcp_receive+0xbf4>)
 8014642:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014644:	4b45      	ldr	r3, [pc, #276]	; (801475c <tcp_receive+0xbe0>)
 8014646:	2200      	movs	r2, #0
 8014648:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801464a:	4b44      	ldr	r3, [pc, #272]	; (801475c <tcp_receive+0xbe0>)
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	899b      	ldrh	r3, [r3, #12]
 8014650:	b29b      	uxth	r3, r3
 8014652:	4618      	mov	r0, r3
 8014654:	f7fb f83e 	bl	800f6d4 <lwip_htons>
 8014658:	4603      	mov	r3, r0
 801465a:	f003 0301 	and.w	r3, r3, #1
 801465e:	2b00      	cmp	r3, #0
 8014660:	f000 80b4 	beq.w	80147cc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014664:	4b43      	ldr	r3, [pc, #268]	; (8014774 <tcp_receive+0xbf8>)
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	f043 0320 	orr.w	r3, r3, #32
 801466c:	b2da      	uxtb	r2, r3
 801466e:	4b41      	ldr	r3, [pc, #260]	; (8014774 <tcp_receive+0xbf8>)
 8014670:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014672:	e0ab      	b.n	80147cc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014678:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	4a35      	ldr	r2, [pc, #212]	; (8014758 <tcp_receive+0xbdc>)
 8014684:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	891b      	ldrh	r3, [r3, #8]
 801468a:	461c      	mov	r4, r3
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	899b      	ldrh	r3, [r3, #12]
 8014692:	b29b      	uxth	r3, r3
 8014694:	4618      	mov	r0, r3
 8014696:	f7fb f81d 	bl	800f6d4 <lwip_htons>
 801469a:	4603      	mov	r3, r0
 801469c:	f003 0303 	and.w	r3, r3, #3
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d001      	beq.n	80146a8 <tcp_receive+0xb2c>
 80146a4:	2301      	movs	r3, #1
 80146a6:	e000      	b.n	80146aa <tcp_receive+0xb2e>
 80146a8:	2300      	movs	r3, #0
 80146aa:	191a      	adds	r2, r3, r4
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b0:	441a      	add	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80146ba:	461c      	mov	r4, r3
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	891b      	ldrh	r3, [r3, #8]
 80146c0:	461d      	mov	r5, r3
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	68db      	ldr	r3, [r3, #12]
 80146c6:	899b      	ldrh	r3, [r3, #12]
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fb f802 	bl	800f6d4 <lwip_htons>
 80146d0:	4603      	mov	r3, r0
 80146d2:	f003 0303 	and.w	r3, r3, #3
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d001      	beq.n	80146de <tcp_receive+0xb62>
 80146da:	2301      	movs	r3, #1
 80146dc:	e000      	b.n	80146e0 <tcp_receive+0xb64>
 80146de:	2300      	movs	r3, #0
 80146e0:	442b      	add	r3, r5
 80146e2:	429c      	cmp	r4, r3
 80146e4:	d206      	bcs.n	80146f4 <tcp_receive+0xb78>
 80146e6:	4b1e      	ldr	r3, [pc, #120]	; (8014760 <tcp_receive+0xbe4>)
 80146e8:	f240 52de 	movw	r2, #1502	; 0x5de
 80146ec:	4922      	ldr	r1, [pc, #136]	; (8014778 <tcp_receive+0xbfc>)
 80146ee:	481e      	ldr	r0, [pc, #120]	; (8014768 <tcp_receive+0xbec>)
 80146f0:	f004 fee6 	bl	80194c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	891b      	ldrh	r3, [r3, #8]
 80146f8:	461c      	mov	r4, r3
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	68db      	ldr	r3, [r3, #12]
 80146fe:	899b      	ldrh	r3, [r3, #12]
 8014700:	b29b      	uxth	r3, r3
 8014702:	4618      	mov	r0, r3
 8014704:	f7fa ffe6 	bl	800f6d4 <lwip_htons>
 8014708:	4603      	mov	r3, r0
 801470a:	f003 0303 	and.w	r3, r3, #3
 801470e:	2b00      	cmp	r3, #0
 8014710:	d001      	beq.n	8014716 <tcp_receive+0xb9a>
 8014712:	2301      	movs	r3, #1
 8014714:	e000      	b.n	8014718 <tcp_receive+0xb9c>
 8014716:	2300      	movs	r3, #0
 8014718:	1919      	adds	r1, r3, r4
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801471e:	b28b      	uxth	r3, r1
 8014720:	1ad3      	subs	r3, r2, r3
 8014722:	b29a      	uxth	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7fd f879 	bl	8011820 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	685b      	ldr	r3, [r3, #4]
 8014732:	891b      	ldrh	r3, [r3, #8]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d028      	beq.n	801478a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014738:	4b0d      	ldr	r3, [pc, #52]	; (8014770 <tcp_receive+0xbf4>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d01d      	beq.n	801477c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8014740:	4b0b      	ldr	r3, [pc, #44]	; (8014770 <tcp_receive+0xbf4>)
 8014742:	681a      	ldr	r2, [r3, #0]
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	4619      	mov	r1, r3
 801474a:	4610      	mov	r0, r2
 801474c:	f7fc fab6 	bl	8010cbc <pbuf_cat>
 8014750:	e018      	b.n	8014784 <tcp_receive+0xc08>
 8014752:	bf00      	nop
 8014754:	2000c82e 	.word	0x2000c82e
 8014758:	2000c824 	.word	0x2000c824
 801475c:	2000c804 	.word	0x2000c804
 8014760:	0801bf6c 	.word	0x0801bf6c
 8014764:	0801c294 	.word	0x0801c294
 8014768:	0801bfd4 	.word	0x0801bfd4
 801476c:	0801c2d0 	.word	0x0801c2d0
 8014770:	2000c834 	.word	0x2000c834
 8014774:	2000c831 	.word	0x2000c831
 8014778:	0801c2f0 	.word	0x0801c2f0
            } else {
              recv_data = cseg->p;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	4a71      	ldr	r2, [pc, #452]	; (8014948 <tcp_receive+0xdcc>)
 8014782:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	2200      	movs	r2, #0
 8014788:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	899b      	ldrh	r3, [r3, #12]
 8014790:	b29b      	uxth	r3, r3
 8014792:	4618      	mov	r0, r3
 8014794:	f7fa ff9e 	bl	800f6d4 <lwip_htons>
 8014798:	4603      	mov	r3, r0
 801479a:	f003 0301 	and.w	r3, r3, #1
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00d      	beq.n	80147be <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80147a2:	4b6a      	ldr	r3, [pc, #424]	; (801494c <tcp_receive+0xdd0>)
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	f043 0320 	orr.w	r3, r3, #32
 80147aa:	b2da      	uxtb	r2, r3
 80147ac:	4b67      	ldr	r3, [pc, #412]	; (801494c <tcp_receive+0xdd0>)
 80147ae:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	7d1b      	ldrb	r3, [r3, #20]
 80147b4:	2b04      	cmp	r3, #4
 80147b6:	d102      	bne.n	80147be <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2207      	movs	r2, #7
 80147bc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80147c6:	68f8      	ldr	r0, [r7, #12]
 80147c8:	f7fd fcb7 	bl	801213a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d008      	beq.n	80147e6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	685a      	ldr	r2, [r3, #4]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80147e0:	429a      	cmp	r2, r3
 80147e2:	f43f af47 	beq.w	8014674 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	7e9b      	ldrb	r3, [r3, #26]
 80147ea:	f003 0301 	and.w	r3, r3, #1
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d00e      	beq.n	8014810 <tcp_receive+0xc94>
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	7e9b      	ldrb	r3, [r3, #26]
 80147f6:	f023 0301 	bic.w	r3, r3, #1
 80147fa:	b2da      	uxtb	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	769a      	strb	r2, [r3, #26]
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	7e9b      	ldrb	r3, [r3, #26]
 8014804:	f043 0302 	orr.w	r3, r3, #2
 8014808:	b2da      	uxtb	r2, r3
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801480e:	e181      	b.n	8014b14 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	7e9b      	ldrb	r3, [r3, #26]
 8014814:	f043 0301 	orr.w	r3, r3, #1
 8014818:	b2da      	uxtb	r2, r3
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801481e:	e179      	b.n	8014b14 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f001 f8c5 	bl	80159b0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801482a:	2b00      	cmp	r3, #0
 801482c:	d106      	bne.n	801483c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801482e:	4848      	ldr	r0, [pc, #288]	; (8014950 <tcp_receive+0xdd4>)
 8014830:	f7fd fc9b 	bl	801216a <tcp_seg_copy>
 8014834:	4602      	mov	r2, r0
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801483a:	e16b      	b.n	8014b14 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801483c:	2300      	movs	r3, #0
 801483e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014846:	e150      	b.n	8014aea <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8014848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	685a      	ldr	r2, [r3, #4]
 801484e:	4b41      	ldr	r3, [pc, #260]	; (8014954 <tcp_receive+0xdd8>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	429a      	cmp	r2, r3
 8014854:	d11d      	bne.n	8014892 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014856:	4b3e      	ldr	r3, [pc, #248]	; (8014950 <tcp_receive+0xdd4>)
 8014858:	891a      	ldrh	r2, [r3, #8]
 801485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485c:	891b      	ldrh	r3, [r3, #8]
 801485e:	429a      	cmp	r2, r3
 8014860:	f240 8148 	bls.w	8014af4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8014864:	483a      	ldr	r0, [pc, #232]	; (8014950 <tcp_receive+0xdd4>)
 8014866:	f7fd fc80 	bl	801216a <tcp_seg_copy>
 801486a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f000 8142 	beq.w	8014af8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8014874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014876:	2b00      	cmp	r3, #0
 8014878:	d003      	beq.n	8014882 <tcp_receive+0xd06>
                    prev->next = cseg;
 801487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	601a      	str	r2, [r3, #0]
 8014880:	e002      	b.n	8014888 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801488a:	68f8      	ldr	r0, [r7, #12]
 801488c:	f7ff f900 	bl	8013a90 <tcp_oos_insert_segment>
                }
                break;
 8014890:	e132      	b.n	8014af8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	2b00      	cmp	r3, #0
 8014896:	d117      	bne.n	80148c8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014898:	4b2e      	ldr	r3, [pc, #184]	; (8014954 <tcp_receive+0xdd8>)
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	1ad3      	subs	r3, r2, r3
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	da57      	bge.n	8014958 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80148a8:	4829      	ldr	r0, [pc, #164]	; (8014950 <tcp_receive+0xdd4>)
 80148aa:	f7fd fc5e 	bl	801216a <tcp_seg_copy>
 80148ae:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f000 8122 	beq.w	8014afc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80148be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ff f8e5 	bl	8013a90 <tcp_oos_insert_segment>
                  }
                  break;
 80148c6:	e119      	b.n	8014afc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80148c8:	4b22      	ldr	r3, [pc, #136]	; (8014954 <tcp_receive+0xdd8>)
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	3b01      	subs	r3, #1
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	db3e      	blt.n	8014958 <tcp_receive+0xddc>
 80148da:	4b1e      	ldr	r3, [pc, #120]	; (8014954 <tcp_receive+0xdd8>)
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	1ad3      	subs	r3, r2, r3
 80148e6:	3301      	adds	r3, #1
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	dc35      	bgt.n	8014958 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80148ec:	4818      	ldr	r0, [pc, #96]	; (8014950 <tcp_receive+0xdd4>)
 80148ee:	f7fd fc3c 	bl	801216a <tcp_seg_copy>
 80148f2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	f000 8102 	beq.w	8014b00 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80148fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014904:	8912      	ldrh	r2, [r2, #8]
 8014906:	441a      	add	r2, r3
 8014908:	4b12      	ldr	r3, [pc, #72]	; (8014954 <tcp_receive+0xdd8>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	1ad3      	subs	r3, r2, r3
 801490e:	2b00      	cmp	r3, #0
 8014910:	dd12      	ble.n	8014938 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014912:	4b10      	ldr	r3, [pc, #64]	; (8014954 <tcp_receive+0xdd8>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	b29a      	uxth	r2, r3
 8014918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	b29b      	uxth	r3, r3
 8014920:	1ad3      	subs	r3, r2, r3
 8014922:	b29a      	uxth	r2, r3
 8014924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014926:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492a:	685a      	ldr	r2, [r3, #4]
 801492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492e:	891b      	ldrh	r3, [r3, #8]
 8014930:	4619      	mov	r1, r3
 8014932:	4610      	mov	r0, r2
 8014934:	f7fb ff74 	bl	8010820 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801493e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f7ff f8a5 	bl	8013a90 <tcp_oos_insert_segment>
                  }
                  break;
 8014946:	e0db      	b.n	8014b00 <tcp_receive+0xf84>
 8014948:	2000c834 	.word	0x2000c834
 801494c:	2000c831 	.word	0x2000c831
 8014950:	2000c804 	.word	0x2000c804
 8014954:	2000c824 	.word	0x2000c824
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	f040 80bf 	bne.w	8014ae0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014962:	4b7c      	ldr	r3, [pc, #496]	; (8014b54 <tcp_receive+0xfd8>)
 8014964:	681a      	ldr	r2, [r3, #0]
 8014966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801496e:	2b00      	cmp	r3, #0
 8014970:	f340 80b6 	ble.w	8014ae0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014976:	68db      	ldr	r3, [r3, #12]
 8014978:	899b      	ldrh	r3, [r3, #12]
 801497a:	b29b      	uxth	r3, r3
 801497c:	4618      	mov	r0, r3
 801497e:	f7fa fea9 	bl	800f6d4 <lwip_htons>
 8014982:	4603      	mov	r3, r0
 8014984:	f003 0301 	and.w	r3, r3, #1
 8014988:	2b00      	cmp	r3, #0
 801498a:	f040 80bb 	bne.w	8014b04 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801498e:	4872      	ldr	r0, [pc, #456]	; (8014b58 <tcp_receive+0xfdc>)
 8014990:	f7fd fbeb 	bl	801216a <tcp_seg_copy>
 8014994:	4602      	mov	r2, r0
 8014996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014998:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f000 80b2 	beq.w	8014b08 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80149a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149ac:	8912      	ldrh	r2, [r2, #8]
 80149ae:	441a      	add	r2, r3
 80149b0:	4b68      	ldr	r3, [pc, #416]	; (8014b54 <tcp_receive+0xfd8>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	1ad3      	subs	r3, r2, r3
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	dd12      	ble.n	80149e0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80149ba:	4b66      	ldr	r3, [pc, #408]	; (8014b54 <tcp_receive+0xfd8>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	b29a      	uxth	r2, r3
 80149c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	1ad3      	subs	r3, r2, r3
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80149d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d2:	685a      	ldr	r2, [r3, #4]
 80149d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d6:	891b      	ldrh	r3, [r3, #8]
 80149d8:	4619      	mov	r1, r3
 80149da:	4610      	mov	r0, r2
 80149dc:	f7fb ff20 	bl	8010820 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80149e0:	4b5e      	ldr	r3, [pc, #376]	; (8014b5c <tcp_receive+0xfe0>)
 80149e2:	881b      	ldrh	r3, [r3, #0]
 80149e4:	461a      	mov	r2, r3
 80149e6:	4b5b      	ldr	r3, [pc, #364]	; (8014b54 <tcp_receive+0xfd8>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	441a      	add	r2, r3
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149f0:	6879      	ldr	r1, [r7, #4]
 80149f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80149f4:	440b      	add	r3, r1
 80149f6:	1ad3      	subs	r3, r2, r3
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f340 8085 	ble.w	8014b08 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80149fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	899b      	ldrh	r3, [r3, #12]
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7fa fe63 	bl	800f6d4 <lwip_htons>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	f003 0301 	and.w	r3, r3, #1
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d01e      	beq.n	8014a56 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	68db      	ldr	r3, [r3, #12]
 8014a1e:	899b      	ldrh	r3, [r3, #12]
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a26:	b29c      	uxth	r4, r3
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	899b      	ldrh	r3, [r3, #12]
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7fa fe4e 	bl	800f6d4 <lwip_htons>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7fa fe47 	bl	800f6d4 <lwip_htons>
 8014a46:	4603      	mov	r3, r0
 8014a48:	461a      	mov	r2, r3
 8014a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	4322      	orrs	r2, r4
 8014a52:	b292      	uxth	r2, r2
 8014a54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a60:	4413      	add	r3, r2
 8014a62:	b299      	uxth	r1, r3
 8014a64:	4b3b      	ldr	r3, [pc, #236]	; (8014b54 <tcp_receive+0xfd8>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	1a8a      	subs	r2, r1, r2
 8014a70:	b292      	uxth	r2, r2
 8014a72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	685a      	ldr	r2, [r3, #4]
 8014a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	891b      	ldrh	r3, [r3, #8]
 8014a80:	4619      	mov	r1, r3
 8014a82:	4610      	mov	r0, r2
 8014a84:	f7fb fecc 	bl	8010820 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	891c      	ldrh	r4, [r3, #8]
 8014a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	899b      	ldrh	r3, [r3, #12]
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7fa fe1b 	bl	800f6d4 <lwip_htons>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	f003 0303 	and.w	r3, r3, #3
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d001      	beq.n	8014aac <tcp_receive+0xf30>
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e000      	b.n	8014aae <tcp_receive+0xf32>
 8014aac:	2300      	movs	r3, #0
 8014aae:	4423      	add	r3, r4
 8014ab0:	b29a      	uxth	r2, r3
 8014ab2:	4b2a      	ldr	r3, [pc, #168]	; (8014b5c <tcp_receive+0xfe0>)
 8014ab4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014ab6:	4b29      	ldr	r3, [pc, #164]	; (8014b5c <tcp_receive+0xfe0>)
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	461a      	mov	r2, r3
 8014abc:	4b25      	ldr	r3, [pc, #148]	; (8014b54 <tcp_receive+0xfd8>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	441a      	add	r2, r3
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014aca:	440b      	add	r3, r1
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d01b      	beq.n	8014b08 <tcp_receive+0xf8c>
 8014ad0:	4b23      	ldr	r3, [pc, #140]	; (8014b60 <tcp_receive+0xfe4>)
 8014ad2:	f240 627b 	movw	r2, #1659	; 0x67b
 8014ad6:	4923      	ldr	r1, [pc, #140]	; (8014b64 <tcp_receive+0xfe8>)
 8014ad8:	4823      	ldr	r0, [pc, #140]	; (8014b68 <tcp_receive+0xfec>)
 8014ada:	f004 fcf1 	bl	80194c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014ade:	e013      	b.n	8014b08 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8014ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	f47f aeab 	bne.w	8014848 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8014af2:	e00f      	b.n	8014b14 <tcp_receive+0xf98>
                break;
 8014af4:	bf00      	nop
 8014af6:	e00d      	b.n	8014b14 <tcp_receive+0xf98>
                break;
 8014af8:	bf00      	nop
 8014afa:	e00b      	b.n	8014b14 <tcp_receive+0xf98>
                  break;
 8014afc:	bf00      	nop
 8014afe:	e009      	b.n	8014b14 <tcp_receive+0xf98>
                  break;
 8014b00:	bf00      	nop
 8014b02:	e007      	b.n	8014b14 <tcp_receive+0xf98>
                  break;
 8014b04:	bf00      	nop
 8014b06:	e005      	b.n	8014b14 <tcp_receive+0xf98>
                break;
 8014b08:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8014b0a:	e003      	b.n	8014b14 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 ff4f 	bl	80159b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b12:	e01a      	b.n	8014b4a <tcp_receive+0xfce>
 8014b14:	e019      	b.n	8014b4a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014b16:	4b0f      	ldr	r3, [pc, #60]	; (8014b54 <tcp_receive+0xfd8>)
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b1e:	1ad3      	subs	r3, r2, r3
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	db0a      	blt.n	8014b3a <tcp_receive+0xfbe>
 8014b24:	4b0b      	ldr	r3, [pc, #44]	; (8014b54 <tcp_receive+0xfd8>)
 8014b26:	681a      	ldr	r2, [r3, #0]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b2c:	6879      	ldr	r1, [r7, #4]
 8014b2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b30:	440b      	add	r3, r1
 8014b32:	1ad3      	subs	r3, r2, r3
 8014b34:	3301      	adds	r3, #1
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	dd07      	ble.n	8014b4a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	7e9b      	ldrb	r3, [r3, #26]
 8014b3e:	f043 0302 	orr.w	r3, r3, #2
 8014b42:	b2da      	uxtb	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8014b48:	e7ff      	b.n	8014b4a <tcp_receive+0xfce>
 8014b4a:	bf00      	nop
 8014b4c:	3734      	adds	r7, #52	; 0x34
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b52:	bf00      	nop
 8014b54:	2000c824 	.word	0x2000c824
 8014b58:	2000c804 	.word	0x2000c804
 8014b5c:	2000c82e 	.word	0x2000c82e
 8014b60:	0801bf6c 	.word	0x0801bf6c
 8014b64:	0801c25c 	.word	0x0801c25c
 8014b68:	0801bfd4 	.word	0x0801bfd4

08014b6c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8014b72:	4b18      	ldr	r3, [pc, #96]	; (8014bd4 <tcp_getoptbyte+0x68>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d005      	beq.n	8014b86 <tcp_getoptbyte+0x1a>
 8014b7a:	4b17      	ldr	r3, [pc, #92]	; (8014bd8 <tcp_getoptbyte+0x6c>)
 8014b7c:	881a      	ldrh	r2, [r3, #0]
 8014b7e:	4b17      	ldr	r3, [pc, #92]	; (8014bdc <tcp_getoptbyte+0x70>)
 8014b80:	881b      	ldrh	r3, [r3, #0]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d20e      	bcs.n	8014ba4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8014b86:	4b16      	ldr	r3, [pc, #88]	; (8014be0 <tcp_getoptbyte+0x74>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	3314      	adds	r3, #20
 8014b8c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8014b8e:	4b12      	ldr	r3, [pc, #72]	; (8014bd8 <tcp_getoptbyte+0x6c>)
 8014b90:	881b      	ldrh	r3, [r3, #0]
 8014b92:	1c5a      	adds	r2, r3, #1
 8014b94:	b291      	uxth	r1, r2
 8014b96:	4a10      	ldr	r2, [pc, #64]	; (8014bd8 <tcp_getoptbyte+0x6c>)
 8014b98:	8011      	strh	r1, [r2, #0]
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	e010      	b.n	8014bc6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8014ba4:	4b0c      	ldr	r3, [pc, #48]	; (8014bd8 <tcp_getoptbyte+0x6c>)
 8014ba6:	881b      	ldrh	r3, [r3, #0]
 8014ba8:	1c5a      	adds	r2, r3, #1
 8014baa:	b291      	uxth	r1, r2
 8014bac:	4a0a      	ldr	r2, [pc, #40]	; (8014bd8 <tcp_getoptbyte+0x6c>)
 8014bae:	8011      	strh	r1, [r2, #0]
 8014bb0:	b2da      	uxtb	r2, r3
 8014bb2:	4b0a      	ldr	r3, [pc, #40]	; (8014bdc <tcp_getoptbyte+0x70>)
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	b2db      	uxtb	r3, r3
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8014bbc:	4b05      	ldr	r3, [pc, #20]	; (8014bd4 <tcp_getoptbyte+0x68>)
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	79fb      	ldrb	r3, [r7, #7]
 8014bc2:	4413      	add	r3, r2
 8014bc4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	370c      	adds	r7, #12
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	2000c81c 	.word	0x2000c81c
 8014bd8:	2000c820 	.word	0x2000c820
 8014bdc:	2000c81a 	.word	0x2000c81a
 8014be0:	2000c814 	.word	0x2000c814

08014be4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014bec:	4b2d      	ldr	r3, [pc, #180]	; (8014ca4 <tcp_parseopt+0xc0>)
 8014bee:	881b      	ldrh	r3, [r3, #0]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d053      	beq.n	8014c9c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014bf4:	4b2c      	ldr	r3, [pc, #176]	; (8014ca8 <tcp_parseopt+0xc4>)
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	801a      	strh	r2, [r3, #0]
 8014bfa:	e043      	b.n	8014c84 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8014bfc:	f7ff ffb6 	bl	8014b6c <tcp_getoptbyte>
 8014c00:	4603      	mov	r3, r0
 8014c02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014c04:	7bfb      	ldrb	r3, [r7, #15]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d03c      	beq.n	8014c84 <tcp_parseopt+0xa0>
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	d002      	beq.n	8014c14 <tcp_parseopt+0x30>
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d03f      	beq.n	8014c92 <tcp_parseopt+0xae>
 8014c12:	e026      	b.n	8014c62 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014c14:	f7ff ffaa 	bl	8014b6c <tcp_getoptbyte>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	2b04      	cmp	r3, #4
 8014c1c:	d13b      	bne.n	8014c96 <tcp_parseopt+0xb2>
 8014c1e:	4b22      	ldr	r3, [pc, #136]	; (8014ca8 <tcp_parseopt+0xc4>)
 8014c20:	881b      	ldrh	r3, [r3, #0]
 8014c22:	3302      	adds	r3, #2
 8014c24:	4a1f      	ldr	r2, [pc, #124]	; (8014ca4 <tcp_parseopt+0xc0>)
 8014c26:	8812      	ldrh	r2, [r2, #0]
 8014c28:	4293      	cmp	r3, r2
 8014c2a:	dc34      	bgt.n	8014c96 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8014c2c:	f7ff ff9e 	bl	8014b6c <tcp_getoptbyte>
 8014c30:	4603      	mov	r3, r0
 8014c32:	b29b      	uxth	r3, r3
 8014c34:	021b      	lsls	r3, r3, #8
 8014c36:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8014c38:	f7ff ff98 	bl	8014b6c <tcp_getoptbyte>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	b29a      	uxth	r2, r3
 8014c40:	89bb      	ldrh	r3, [r7, #12]
 8014c42:	4313      	orrs	r3, r2
 8014c44:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014c46:	89bb      	ldrh	r3, [r7, #12]
 8014c48:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014c4c:	d804      	bhi.n	8014c58 <tcp_parseopt+0x74>
 8014c4e:	89bb      	ldrh	r3, [r7, #12]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d001      	beq.n	8014c58 <tcp_parseopt+0x74>
 8014c54:	89ba      	ldrh	r2, [r7, #12]
 8014c56:	e001      	b.n	8014c5c <tcp_parseopt+0x78>
 8014c58:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8014c60:	e010      	b.n	8014c84 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8014c62:	f7ff ff83 	bl	8014b6c <tcp_getoptbyte>
 8014c66:	4603      	mov	r3, r0
 8014c68:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8014c6a:	7afb      	ldrb	r3, [r7, #11]
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d914      	bls.n	8014c9a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8014c70:	7afb      	ldrb	r3, [r7, #11]
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	4b0c      	ldr	r3, [pc, #48]	; (8014ca8 <tcp_parseopt+0xc4>)
 8014c76:	881b      	ldrh	r3, [r3, #0]
 8014c78:	4413      	add	r3, r2
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	3b02      	subs	r3, #2
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	4b09      	ldr	r3, [pc, #36]	; (8014ca8 <tcp_parseopt+0xc4>)
 8014c82:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c84:	4b08      	ldr	r3, [pc, #32]	; (8014ca8 <tcp_parseopt+0xc4>)
 8014c86:	881a      	ldrh	r2, [r3, #0]
 8014c88:	4b06      	ldr	r3, [pc, #24]	; (8014ca4 <tcp_parseopt+0xc0>)
 8014c8a:	881b      	ldrh	r3, [r3, #0]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d3b5      	bcc.n	8014bfc <tcp_parseopt+0x18>
 8014c90:	e004      	b.n	8014c9c <tcp_parseopt+0xb8>
        return;
 8014c92:	bf00      	nop
 8014c94:	e002      	b.n	8014c9c <tcp_parseopt+0xb8>
          return;
 8014c96:	bf00      	nop
 8014c98:	e000      	b.n	8014c9c <tcp_parseopt+0xb8>
          return;
 8014c9a:	bf00      	nop
      }
    }
  }
}
 8014c9c:	3710      	adds	r7, #16
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
 8014ca2:	bf00      	nop
 8014ca4:	2000c818 	.word	0x2000c818
 8014ca8:	2000c820 	.word	0x2000c820

08014cac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014cac:	b480      	push	{r7}
 8014cae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014cb0:	4b05      	ldr	r3, [pc, #20]	; (8014cc8 <tcp_trigger_input_pcb_close+0x1c>)
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	f043 0310 	orr.w	r3, r3, #16
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	4b03      	ldr	r3, [pc, #12]	; (8014cc8 <tcp_trigger_input_pcb_close+0x1c>)
 8014cbc:	701a      	strb	r2, [r3, #0]
}
 8014cbe:	bf00      	nop
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr
 8014cc8:	2000c831 	.word	0x2000c831

08014ccc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b086      	sub	sp, #24
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	607b      	str	r3, [r7, #4]
 8014cd6:	460b      	mov	r3, r1
 8014cd8:	817b      	strh	r3, [r7, #10]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014cde:	897a      	ldrh	r2, [r7, #10]
 8014ce0:	893b      	ldrh	r3, [r7, #8]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	b29b      	uxth	r3, r3
 8014ce6:	3314      	adds	r3, #20
 8014ce8:	b29b      	uxth	r3, r3
 8014cea:	2200      	movs	r2, #0
 8014cec:	4619      	mov	r1, r3
 8014cee:	2001      	movs	r0, #1
 8014cf0:	f7fb fb98 	bl	8010424 <pbuf_alloc>
 8014cf4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d057      	beq.n	8014dac <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	895b      	ldrh	r3, [r3, #10]
 8014d00:	461a      	mov	r2, r3
 8014d02:	897b      	ldrh	r3, [r7, #10]
 8014d04:	3314      	adds	r3, #20
 8014d06:	429a      	cmp	r2, r3
 8014d08:	da05      	bge.n	8014d16 <tcp_output_alloc_header+0x4a>
 8014d0a:	4b2b      	ldr	r3, [pc, #172]	; (8014db8 <tcp_output_alloc_header+0xec>)
 8014d0c:	2273      	movs	r2, #115	; 0x73
 8014d0e:	492b      	ldr	r1, [pc, #172]	; (8014dbc <tcp_output_alloc_header+0xf0>)
 8014d10:	482b      	ldr	r0, [pc, #172]	; (8014dc0 <tcp_output_alloc_header+0xf4>)
 8014d12:	f004 fbd5 	bl	80194c0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	8adb      	ldrh	r3, [r3, #22]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7fa fcd7 	bl	800f6d4 <lwip_htons>
 8014d26:	4603      	mov	r3, r0
 8014d28:	461a      	mov	r2, r3
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	8b1b      	ldrh	r3, [r3, #24]
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7fa fcce 	bl	800f6d4 <lwip_htons>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7fa fcd0 	bl	800f6f0 <lwip_htonl>
 8014d50:	4602      	mov	r2, r0
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8014d56:	897b      	ldrh	r3, [r7, #10]
 8014d58:	089b      	lsrs	r3, r3, #2
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	3305      	adds	r3, #5
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	031b      	lsls	r3, r3, #12
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	f043 0310 	orr.w	r3, r3, #16
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fa fcb2 	bl	800f6d4 <lwip_htons>
 8014d70:	4603      	mov	r3, r0
 8014d72:	461a      	mov	r2, r3
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fa fca9 	bl	800f6d4 <lwip_htons>
 8014d82:	4603      	mov	r3, r0
 8014d84:	461a      	mov	r2, r3
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	741a      	strb	r2, [r3, #16]
 8014d90:	2200      	movs	r2, #0
 8014d92:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	2200      	movs	r2, #0
 8014d98:	749a      	strb	r2, [r3, #18]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014da2:	68fa      	ldr	r2, [r7, #12]
 8014da4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014da6:	441a      	add	r2, r3
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014dac:	697b      	ldr	r3, [r7, #20]
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3718      	adds	r7, #24
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	0801c318 	.word	0x0801c318
 8014dbc:	0801c370 	.word	0x0801c370
 8014dc0:	0801c3a0 	.word	0x0801c3a0

08014dc4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014dc4:	b590      	push	{r4, r7, lr}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d02d      	beq.n	8014e30 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014dd8:	60fb      	str	r3, [r7, #12]
 8014dda:	e002      	b.n	8014de2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d1f8      	bne.n	8014ddc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	899b      	ldrh	r3, [r3, #12]
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fa fc6e 	bl	800f6d4 <lwip_htons>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	f003 0307 	and.w	r3, r3, #7
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d116      	bne.n	8014e30 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	68db      	ldr	r3, [r3, #12]
 8014e06:	899b      	ldrh	r3, [r3, #12]
 8014e08:	b29c      	uxth	r4, r3
 8014e0a:	2001      	movs	r0, #1
 8014e0c:	f7fa fc62 	bl	800f6d4 <lwip_htons>
 8014e10:	4603      	mov	r3, r0
 8014e12:	461a      	mov	r2, r3
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	68db      	ldr	r3, [r3, #12]
 8014e18:	4322      	orrs	r2, r4
 8014e1a:	b292      	uxth	r2, r2
 8014e1c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	7e9b      	ldrb	r3, [r3, #26]
 8014e22:	f043 0320 	orr.w	r3, r3, #32
 8014e26:	b2da      	uxtb	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	e004      	b.n	8014e3a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014e30:	2101      	movs	r1, #1
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f000 fcc0 	bl	80157b8 <tcp_enqueue_flags>
 8014e38:	4603      	mov	r3, r0
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3714      	adds	r7, #20
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd90      	pop	{r4, r7, pc}
	...

08014e44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014e44:	b590      	push	{r4, r7, lr}
 8014e46:	b087      	sub	sp, #28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	60b9      	str	r1, [r7, #8]
 8014e4e:	603b      	str	r3, [r7, #0]
 8014e50:	4613      	mov	r3, r2
 8014e52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	b2db      	uxtb	r3, r3
 8014e5c:	f003 0304 	and.w	r3, r3, #4
 8014e60:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014e62:	2003      	movs	r0, #3
 8014e64:	f7fb f842 	bl	800feec <memp_malloc>
 8014e68:	6138      	str	r0, [r7, #16]
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d104      	bne.n	8014e7a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014e70:	68b8      	ldr	r0, [r7, #8]
 8014e72:	f7fb fe49 	bl	8010b08 <pbuf_free>
    return NULL;
 8014e76:	2300      	movs	r3, #0
 8014e78:	e061      	b.n	8014f3e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014e80:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	2200      	movs	r2, #0
 8014e86:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	68ba      	ldr	r2, [r7, #8]
 8014e8c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014e8e:	68bb      	ldr	r3, [r7, #8]
 8014e90:	891a      	ldrh	r2, [r3, #8]
 8014e92:	7dfb      	ldrb	r3, [r7, #23]
 8014e94:	b29b      	uxth	r3, r3
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d205      	bcs.n	8014ea6 <tcp_create_segment+0x62>
 8014e9a:	4b2b      	ldr	r3, [pc, #172]	; (8014f48 <tcp_create_segment+0x104>)
 8014e9c:	22ba      	movs	r2, #186	; 0xba
 8014e9e:	492b      	ldr	r1, [pc, #172]	; (8014f4c <tcp_create_segment+0x108>)
 8014ea0:	482b      	ldr	r0, [pc, #172]	; (8014f50 <tcp_create_segment+0x10c>)
 8014ea2:	f004 fb0d 	bl	80194c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	891a      	ldrh	r2, [r3, #8]
 8014eaa:	7dfb      	ldrb	r3, [r7, #23]
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	1ad3      	subs	r3, r2, r3
 8014eb0:	b29a      	uxth	r2, r3
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8014eb6:	2114      	movs	r1, #20
 8014eb8:	68b8      	ldr	r0, [r7, #8]
 8014eba:	f7fb fe01 	bl	8010ac0 <pbuf_header>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d004      	beq.n	8014ece <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014ec4:	6938      	ldr	r0, [r7, #16]
 8014ec6:	f7fd f938 	bl	801213a <tcp_seg_free>
    return NULL;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	e037      	b.n	8014f3e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	685a      	ldr	r2, [r3, #4]
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	8ada      	ldrh	r2, [r3, #22]
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	68dc      	ldr	r4, [r3, #12]
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	f7fa fbf7 	bl	800f6d4 <lwip_htons>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	8b1a      	ldrh	r2, [r3, #24]
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	68dc      	ldr	r4, [r3, #12]
 8014ef2:	4610      	mov	r0, r2
 8014ef4:	f7fa fbee 	bl	800f6d4 <lwip_htons>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	68dc      	ldr	r4, [r3, #12]
 8014f00:	6838      	ldr	r0, [r7, #0]
 8014f02:	f7fa fbf5 	bl	800f6f0 <lwip_htonl>
 8014f06:	4603      	mov	r3, r0
 8014f08:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8014f0a:	7dfb      	ldrb	r3, [r7, #23]
 8014f0c:	089b      	lsrs	r3, r3, #2
 8014f0e:	b2db      	uxtb	r3, r3
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	3305      	adds	r3, #5
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	031b      	lsls	r3, r3, #12
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	79fb      	ldrb	r3, [r7, #7]
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	4313      	orrs	r3, r2
 8014f20:	b29a      	uxth	r2, r3
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	68dc      	ldr	r4, [r3, #12]
 8014f26:	4610      	mov	r0, r2
 8014f28:	f7fa fbd4 	bl	800f6d4 <lwip_htons>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	2200      	movs	r2, #0
 8014f36:	749a      	strb	r2, [r3, #18]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	74da      	strb	r2, [r3, #19]
  return seg;
 8014f3c:	693b      	ldr	r3, [r7, #16]
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	371c      	adds	r7, #28
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd90      	pop	{r4, r7, pc}
 8014f46:	bf00      	nop
 8014f48:	0801c318 	.word	0x0801c318
 8014f4c:	0801c3c8 	.word	0x0801c3c8
 8014f50:	0801c3a0 	.word	0x0801c3a0

08014f54 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	607b      	str	r3, [r7, #4]
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	73fb      	strb	r3, [r7, #15]
 8014f60:	460b      	mov	r3, r1
 8014f62:	81bb      	strh	r3, [r7, #12]
 8014f64:	4613      	mov	r3, r2
 8014f66:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014f68:	89bb      	ldrh	r3, [r7, #12]
 8014f6a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014f6c:	89ba      	ldrh	r2, [r7, #12]
 8014f6e:	897b      	ldrh	r3, [r7, #10]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d221      	bcs.n	8014fb8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014f74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f78:	f003 0302 	and.w	r3, r3, #2
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d111      	bne.n	8014fa4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8014f80:	6a3b      	ldr	r3, [r7, #32]
 8014f82:	7e9b      	ldrb	r3, [r3, #26]
 8014f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d115      	bne.n	8014fb8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8014f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d007      	beq.n	8014fa4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014f94:	6a3b      	ldr	r3, [r7, #32]
 8014f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d103      	bne.n	8014fa4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8014f9c:	6a3b      	ldr	r3, [r7, #32]
 8014f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d009      	beq.n	8014fb8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014fa4:	89bb      	ldrh	r3, [r7, #12]
 8014fa6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014faa:	f023 0203 	bic.w	r2, r3, #3
 8014fae:	897b      	ldrh	r3, [r7, #10]
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	bf28      	it	cs
 8014fb4:	4613      	movcs	r3, r2
 8014fb6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014fb8:	8af9      	ldrh	r1, [r7, #22]
 8014fba:	7bfb      	ldrb	r3, [r7, #15]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7fb fa30 	bl	8010424 <pbuf_alloc>
 8014fc4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d101      	bne.n	8014fd0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	e019      	b.n	8015004 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d006      	beq.n	8014fe6 <tcp_pbuf_prealloc+0x92>
 8014fd8:	4b0c      	ldr	r3, [pc, #48]	; (801500c <tcp_pbuf_prealloc+0xb8>)
 8014fda:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014fde:	490c      	ldr	r1, [pc, #48]	; (8015010 <tcp_pbuf_prealloc+0xbc>)
 8014fe0:	480c      	ldr	r0, [pc, #48]	; (8015014 <tcp_pbuf_prealloc+0xc0>)
 8014fe2:	f004 fa6d 	bl	80194c0 <iprintf>
  *oversize = p->len - length;
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	895a      	ldrh	r2, [r3, #10]
 8014fea:	89bb      	ldrh	r3, [r7, #12]
 8014fec:	1ad3      	subs	r3, r2, r3
 8014fee:	b29a      	uxth	r2, r3
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	89ba      	ldrh	r2, [r7, #12]
 8014ff8:	811a      	strh	r2, [r3, #8]
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	891a      	ldrh	r2, [r3, #8]
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	815a      	strh	r2, [r3, #10]
  return p;
 8015002:	693b      	ldr	r3, [r7, #16]
}
 8015004:	4618      	mov	r0, r3
 8015006:	3718      	adds	r7, #24
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	0801c318 	.word	0x0801c318
 8015010:	0801c3e0 	.word	0x0801c3e0
 8015014:	0801c3a0 	.word	0x0801c3a0

08015018 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	460b      	mov	r3, r1
 8015022:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	7d1b      	ldrb	r3, [r3, #20]
 8015028:	2b04      	cmp	r3, #4
 801502a:	d00e      	beq.n	801504a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015030:	2b07      	cmp	r3, #7
 8015032:	d00a      	beq.n	801504a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015038:	2b02      	cmp	r3, #2
 801503a:	d006      	beq.n	801504a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015040:	2b03      	cmp	r3, #3
 8015042:	d002      	beq.n	801504a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015044:	f06f 030a 	mvn.w	r3, #10
 8015048:	e04f      	b.n	80150ea <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801504a:	887b      	ldrh	r3, [r7, #2]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d101      	bne.n	8015054 <tcp_write_checks+0x3c>
    return ERR_OK;
 8015050:	2300      	movs	r3, #0
 8015052:	e04a      	b.n	80150ea <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801505a:	887a      	ldrh	r2, [r7, #2]
 801505c:	429a      	cmp	r2, r3
 801505e:	d909      	bls.n	8015074 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	7e9b      	ldrb	r3, [r3, #26]
 8015064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015068:	b2da      	uxtb	r2, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801506e:	f04f 33ff 	mov.w	r3, #4294967295
 8015072:	e03a      	b.n	80150ea <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801507a:	2b08      	cmp	r3, #8
 801507c:	d806      	bhi.n	801508c <tcp_write_checks+0x74>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015084:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015088:	4293      	cmp	r3, r2
 801508a:	d909      	bls.n	80150a0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	7e9b      	ldrb	r3, [r3, #26]
 8015090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015094:	b2da      	uxtb	r2, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801509a:	f04f 33ff 	mov.w	r3, #4294967295
 801509e:	e024      	b.n	80150ea <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00f      	beq.n	80150ca <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d11a      	bne.n	80150e8 <tcp_write_checks+0xd0>
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d116      	bne.n	80150e8 <tcp_write_checks+0xd0>
 80150ba:	4b0e      	ldr	r3, [pc, #56]	; (80150f4 <tcp_write_checks+0xdc>)
 80150bc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80150c0:	490d      	ldr	r1, [pc, #52]	; (80150f8 <tcp_write_checks+0xe0>)
 80150c2:	480e      	ldr	r0, [pc, #56]	; (80150fc <tcp_write_checks+0xe4>)
 80150c4:	f004 f9fc 	bl	80194c0 <iprintf>
 80150c8:	e00e      	b.n	80150e8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d103      	bne.n	80150da <tcp_write_checks+0xc2>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d006      	beq.n	80150e8 <tcp_write_checks+0xd0>
 80150da:	4b06      	ldr	r3, [pc, #24]	; (80150f4 <tcp_write_checks+0xdc>)
 80150dc:	f240 1259 	movw	r2, #345	; 0x159
 80150e0:	4907      	ldr	r1, [pc, #28]	; (8015100 <tcp_write_checks+0xe8>)
 80150e2:	4806      	ldr	r0, [pc, #24]	; (80150fc <tcp_write_checks+0xe4>)
 80150e4:	f004 f9ec 	bl	80194c0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3708      	adds	r7, #8
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	0801c318 	.word	0x0801c318
 80150f8:	0801c3f4 	.word	0x0801c3f4
 80150fc:	0801c3a0 	.word	0x0801c3a0
 8015100:	0801c430 	.word	0x0801c430

08015104 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015104:	b590      	push	{r4, r7, lr}
 8015106:	b09b      	sub	sp, #108	; 0x6c
 8015108:	af04      	add	r7, sp, #16
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	4611      	mov	r1, r2
 8015110:	461a      	mov	r2, r3
 8015112:	460b      	mov	r3, r1
 8015114:	80fb      	strh	r3, [r7, #6]
 8015116:	4613      	mov	r3, r2
 8015118:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801511a:	2300      	movs	r3, #0
 801511c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801511e:	2300      	movs	r3, #0
 8015120:	653b      	str	r3, [r7, #80]	; 0x50
 8015122:	2300      	movs	r3, #0
 8015124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015126:	2300      	movs	r3, #0
 8015128:	64bb      	str	r3, [r7, #72]	; 0x48
 801512a:	2300      	movs	r3, #0
 801512c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801512e:	2300      	movs	r3, #0
 8015130:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8015134:	2300      	movs	r3, #0
 8015136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801513a:	2300      	movs	r3, #0
 801513c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015140:	2300      	movs	r3, #0
 8015142:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015148:	2300      	movs	r3, #0
 801514a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015152:	085b      	lsrs	r3, r3, #1
 8015154:	b29a      	uxth	r2, r3
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801515a:	4293      	cmp	r3, r2
 801515c:	bf28      	it	cs
 801515e:	4613      	movcs	r3, r2
 8015160:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015164:	2b00      	cmp	r3, #0
 8015166:	d102      	bne.n	801516e <tcp_write+0x6a>
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801516c:	e000      	b.n	8015170 <tcp_write+0x6c>
 801516e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015170:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d109      	bne.n	801518c <tcp_write+0x88>
 8015178:	4b92      	ldr	r3, [pc, #584]	; (80153c4 <tcp_write+0x2c0>)
 801517a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801517e:	4992      	ldr	r1, [pc, #584]	; (80153c8 <tcp_write+0x2c4>)
 8015180:	4892      	ldr	r0, [pc, #584]	; (80153cc <tcp_write+0x2c8>)
 8015182:	f004 f99d 	bl	80194c0 <iprintf>
 8015186:	f06f 030f 	mvn.w	r3, #15
 801518a:	e30a      	b.n	80157a2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801518c:	88fb      	ldrh	r3, [r7, #6]
 801518e:	4619      	mov	r1, r3
 8015190:	68f8      	ldr	r0, [r7, #12]
 8015192:	f7ff ff41 	bl	8015018 <tcp_write_checks>
 8015196:	4603      	mov	r3, r0
 8015198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801519c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d002      	beq.n	80151aa <tcp_write+0xa6>
    return err;
 80151a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80151a8:	e2fb      	b.n	80157a2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80151b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 80f5 	beq.w	80153a8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151c2:	653b      	str	r3, [r7, #80]	; 0x50
 80151c4:	e002      	b.n	80151cc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80151c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80151cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d1f8      	bne.n	80151c6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80151d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151d6:	7a9b      	ldrb	r3, [r3, #10]
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	b29b      	uxth	r3, r3
 80151dc:	f003 0304 	and.w	r3, r3, #4
 80151e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80151e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80151e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151e6:	891b      	ldrh	r3, [r3, #8]
 80151e8:	4619      	mov	r1, r3
 80151ea:	8c3b      	ldrh	r3, [r7, #32]
 80151ec:	440b      	add	r3, r1
 80151ee:	429a      	cmp	r2, r3
 80151f0:	da06      	bge.n	8015200 <tcp_write+0xfc>
 80151f2:	4b74      	ldr	r3, [pc, #464]	; (80153c4 <tcp_write+0x2c0>)
 80151f4:	f240 12c7 	movw	r2, #455	; 0x1c7
 80151f8:	4975      	ldr	r1, [pc, #468]	; (80153d0 <tcp_write+0x2cc>)
 80151fa:	4874      	ldr	r0, [pc, #464]	; (80153cc <tcp_write+0x2c8>)
 80151fc:	f004 f960 	bl	80194c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015202:	891a      	ldrh	r2, [r3, #8]
 8015204:	8c3b      	ldrh	r3, [r7, #32]
 8015206:	4413      	add	r3, r2
 8015208:	b29b      	uxth	r3, r3
 801520a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801520c:	1ad3      	subs	r3, r2, r3
 801520e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015216:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015218:	8a7b      	ldrh	r3, [r7, #18]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d027      	beq.n	801526e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801521e:	8a7b      	ldrh	r3, [r7, #18]
 8015220:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015222:	429a      	cmp	r2, r3
 8015224:	d206      	bcs.n	8015234 <tcp_write+0x130>
 8015226:	4b67      	ldr	r3, [pc, #412]	; (80153c4 <tcp_write+0x2c0>)
 8015228:	f240 12d9 	movw	r2, #473	; 0x1d9
 801522c:	4969      	ldr	r1, [pc, #420]	; (80153d4 <tcp_write+0x2d0>)
 801522e:	4867      	ldr	r0, [pc, #412]	; (80153cc <tcp_write+0x2c8>)
 8015230:	f004 f946 	bl	80194c0 <iprintf>
      seg = last_unsent;
 8015234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015236:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015238:	8a7b      	ldrh	r3, [r7, #18]
 801523a:	88fa      	ldrh	r2, [r7, #6]
 801523c:	429a      	cmp	r2, r3
 801523e:	d901      	bls.n	8015244 <tcp_write+0x140>
 8015240:	8a7b      	ldrh	r3, [r7, #18]
 8015242:	e000      	b.n	8015246 <tcp_write+0x142>
 8015244:	88fb      	ldrh	r3, [r7, #6]
 8015246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015248:	4293      	cmp	r3, r2
 801524a:	bfa8      	it	ge
 801524c:	4613      	movge	r3, r2
 801524e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015256:	4413      	add	r3, r2
 8015258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801525c:	8a7a      	ldrh	r2, [r7, #18]
 801525e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	b29b      	uxth	r3, r3
 8015264:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015266:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015268:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801526a:	1ad3      	subs	r3, r2, r3
 801526c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801526e:	8a7b      	ldrh	r3, [r7, #18]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d00b      	beq.n	801528c <tcp_write+0x188>
 8015274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015278:	88fb      	ldrh	r3, [r7, #6]
 801527a:	429a      	cmp	r2, r3
 801527c:	d006      	beq.n	801528c <tcp_write+0x188>
 801527e:	4b51      	ldr	r3, [pc, #324]	; (80153c4 <tcp_write+0x2c0>)
 8015280:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015284:	4954      	ldr	r1, [pc, #336]	; (80153d8 <tcp_write+0x2d4>)
 8015286:	4851      	ldr	r0, [pc, #324]	; (80153cc <tcp_write+0x2c8>)
 8015288:	f004 f91a 	bl	80194c0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801528c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015290:	88fb      	ldrh	r3, [r7, #6]
 8015292:	429a      	cmp	r2, r3
 8015294:	f080 8168 	bcs.w	8015568 <tcp_write+0x464>
 8015298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801529a:	2b00      	cmp	r3, #0
 801529c:	f000 8164 	beq.w	8015568 <tcp_write+0x464>
 80152a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152a2:	891b      	ldrh	r3, [r3, #8]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f000 815f 	beq.w	8015568 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80152aa:	88fa      	ldrh	r2, [r7, #6]
 80152ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152b0:	1ad2      	subs	r2, r2, r3
 80152b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152b4:	4293      	cmp	r3, r2
 80152b6:	bfa8      	it	ge
 80152b8:	4613      	movge	r3, r2
 80152ba:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80152bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152be:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80152c0:	797b      	ldrb	r3, [r7, #5]
 80152c2:	f003 0301 	and.w	r3, r3, #1
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d027      	beq.n	801531a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80152ca:	f107 0012 	add.w	r0, r7, #18
 80152ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152d0:	8bf9      	ldrh	r1, [r7, #30]
 80152d2:	2301      	movs	r3, #1
 80152d4:	9302      	str	r3, [sp, #8]
 80152d6:	797b      	ldrb	r3, [r7, #5]
 80152d8:	9301      	str	r3, [sp, #4]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	9300      	str	r3, [sp, #0]
 80152de:	4603      	mov	r3, r0
 80152e0:	2004      	movs	r0, #4
 80152e2:	f7ff fe37 	bl	8014f54 <tcp_pbuf_prealloc>
 80152e6:	6578      	str	r0, [r7, #84]	; 0x54
 80152e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	f000 8227 	beq.w	801573e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80152f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152f2:	6858      	ldr	r0, [r3, #4]
 80152f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152f8:	68ba      	ldr	r2, [r7, #8]
 80152fa:	4413      	add	r3, r2
 80152fc:	8bfa      	ldrh	r2, [r7, #30]
 80152fe:	4619      	mov	r1, r3
 8015300:	f004 f8cb 	bl	801949a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015304:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015306:	f7fb fc99 	bl	8010c3c <pbuf_clen>
 801530a:	4603      	mov	r3, r0
 801530c:	461a      	mov	r2, r3
 801530e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015312:	4413      	add	r3, r2
 8015314:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015318:	e03f      	b.n	801539a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	637b      	str	r3, [r7, #52]	; 0x34
 8015320:	e002      	b.n	8015328 <tcp_write+0x224>
 8015322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	637b      	str	r3, [r7, #52]	; 0x34
 8015328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d1f8      	bne.n	8015322 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015332:	7b1b      	ldrb	r3, [r3, #12]
 8015334:	2b01      	cmp	r3, #1
 8015336:	d115      	bne.n	8015364 <tcp_write+0x260>
 8015338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801533e:	8952      	ldrh	r2, [r2, #10]
 8015340:	4413      	add	r3, r2
 8015342:	68ba      	ldr	r2, [r7, #8]
 8015344:	429a      	cmp	r2, r3
 8015346:	d10d      	bne.n	8015364 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801534c:	2b00      	cmp	r3, #0
 801534e:	d006      	beq.n	801535e <tcp_write+0x25a>
 8015350:	4b1c      	ldr	r3, [pc, #112]	; (80153c4 <tcp_write+0x2c0>)
 8015352:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015356:	4921      	ldr	r1, [pc, #132]	; (80153dc <tcp_write+0x2d8>)
 8015358:	481c      	ldr	r0, [pc, #112]	; (80153cc <tcp_write+0x2c8>)
 801535a:	f004 f8b1 	bl	80194c0 <iprintf>
          extendlen = seglen;
 801535e:	8bfb      	ldrh	r3, [r7, #30]
 8015360:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015362:	e01a      	b.n	801539a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015364:	8bfb      	ldrh	r3, [r7, #30]
 8015366:	2201      	movs	r2, #1
 8015368:	4619      	mov	r1, r3
 801536a:	2004      	movs	r0, #4
 801536c:	f7fb f85a 	bl	8010424 <pbuf_alloc>
 8015370:	6578      	str	r0, [r7, #84]	; 0x54
 8015372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015374:	2b00      	cmp	r3, #0
 8015376:	f000 81e4 	beq.w	8015742 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801537a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	441a      	add	r2, r3
 8015382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015384:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015386:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015388:	f7fb fc58 	bl	8010c3c <pbuf_clen>
 801538c:	4603      	mov	r3, r0
 801538e:	461a      	mov	r2, r3
 8015390:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015394:	4413      	add	r3, r2
 8015396:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801539a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801539e:	8bfb      	ldrh	r3, [r7, #30]
 80153a0:	4413      	add	r3, r2
 80153a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80153a6:	e0df      	b.n	8015568 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	f000 80da 	beq.w	8015568 <tcp_write+0x464>
 80153b4:	4b03      	ldr	r3, [pc, #12]	; (80153c4 <tcp_write+0x2c0>)
 80153b6:	f240 2225 	movw	r2, #549	; 0x225
 80153ba:	4909      	ldr	r1, [pc, #36]	; (80153e0 <tcp_write+0x2dc>)
 80153bc:	4803      	ldr	r0, [pc, #12]	; (80153cc <tcp_write+0x2c8>)
 80153be:	f004 f87f 	bl	80194c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80153c2:	e0d1      	b.n	8015568 <tcp_write+0x464>
 80153c4:	0801c318 	.word	0x0801c318
 80153c8:	0801c464 	.word	0x0801c464
 80153cc:	0801c3a0 	.word	0x0801c3a0
 80153d0:	0801c498 	.word	0x0801c498
 80153d4:	0801c4b0 	.word	0x0801c4b0
 80153d8:	0801c4d0 	.word	0x0801c4d0
 80153dc:	0801c4f0 	.word	0x0801c4f0
 80153e0:	0801c51c 	.word	0x0801c51c
    struct pbuf *p;
    u16_t left = len - pos;
 80153e4:	88fa      	ldrh	r2, [r7, #6]
 80153e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153ea:	1ad3      	subs	r3, r2, r3
 80153ec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80153ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80153f6:	1ad3      	subs	r3, r2, r3
 80153f8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80153fa:	8b7a      	ldrh	r2, [r7, #26]
 80153fc:	8bbb      	ldrh	r3, [r7, #28]
 80153fe:	4293      	cmp	r3, r2
 8015400:	bf28      	it	cs
 8015402:	4613      	movcs	r3, r2
 8015404:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015406:	797b      	ldrb	r3, [r7, #5]
 8015408:	f003 0301 	and.w	r3, r3, #1
 801540c:	2b00      	cmp	r3, #0
 801540e:	d036      	beq.n	801547e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015414:	b29a      	uxth	r2, r3
 8015416:	8b3b      	ldrh	r3, [r7, #24]
 8015418:	4413      	add	r3, r2
 801541a:	b299      	uxth	r1, r3
 801541c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801541e:	2b00      	cmp	r3, #0
 8015420:	bf0c      	ite	eq
 8015422:	2301      	moveq	r3, #1
 8015424:	2300      	movne	r3, #0
 8015426:	b2db      	uxtb	r3, r3
 8015428:	f107 0012 	add.w	r0, r7, #18
 801542c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801542e:	9302      	str	r3, [sp, #8]
 8015430:	797b      	ldrb	r3, [r7, #5]
 8015432:	9301      	str	r3, [sp, #4]
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	4603      	mov	r3, r0
 801543a:	2000      	movs	r0, #0
 801543c:	f7ff fd8a 	bl	8014f54 <tcp_pbuf_prealloc>
 8015440:	6338      	str	r0, [r7, #48]	; 0x30
 8015442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015444:	2b00      	cmp	r3, #0
 8015446:	f000 817e 	beq.w	8015746 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801544c:	895b      	ldrh	r3, [r3, #10]
 801544e:	8b3a      	ldrh	r2, [r7, #24]
 8015450:	429a      	cmp	r2, r3
 8015452:	d906      	bls.n	8015462 <tcp_write+0x35e>
 8015454:	4b8f      	ldr	r3, [pc, #572]	; (8015694 <tcp_write+0x590>)
 8015456:	f240 2241 	movw	r2, #577	; 0x241
 801545a:	498f      	ldr	r1, [pc, #572]	; (8015698 <tcp_write+0x594>)
 801545c:	488f      	ldr	r0, [pc, #572]	; (801569c <tcp_write+0x598>)
 801545e:	f004 f82f 	bl	80194c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8015462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015464:	685a      	ldr	r2, [r3, #4]
 8015466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801546a:	18d0      	adds	r0, r2, r3
 801546c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015470:	68ba      	ldr	r2, [r7, #8]
 8015472:	4413      	add	r3, r2
 8015474:	8b3a      	ldrh	r2, [r7, #24]
 8015476:	4619      	mov	r1, r3
 8015478:	f004 f80f 	bl	801949a <memcpy>
 801547c:	e02e      	b.n	80154dc <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801547e:	8a7b      	ldrh	r3, [r7, #18]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d006      	beq.n	8015492 <tcp_write+0x38e>
 8015484:	4b83      	ldr	r3, [pc, #524]	; (8015694 <tcp_write+0x590>)
 8015486:	f240 224b 	movw	r2, #587	; 0x24b
 801548a:	4985      	ldr	r1, [pc, #532]	; (80156a0 <tcp_write+0x59c>)
 801548c:	4883      	ldr	r0, [pc, #524]	; (801569c <tcp_write+0x598>)
 801548e:	f004 f817 	bl	80194c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015492:	8b3b      	ldrh	r3, [r7, #24]
 8015494:	2201      	movs	r2, #1
 8015496:	4619      	mov	r1, r3
 8015498:	2000      	movs	r0, #0
 801549a:	f7fa ffc3 	bl	8010424 <pbuf_alloc>
 801549e:	6178      	str	r0, [r7, #20]
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f000 8151 	beq.w	801574a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80154a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154ac:	68ba      	ldr	r2, [r7, #8]
 80154ae:	441a      	add	r2, r3
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80154b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	2200      	movs	r2, #0
 80154bc:	4619      	mov	r1, r3
 80154be:	2000      	movs	r0, #0
 80154c0:	f7fa ffb0 	bl	8010424 <pbuf_alloc>
 80154c4:	6338      	str	r0, [r7, #48]	; 0x30
 80154c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d103      	bne.n	80154d4 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80154cc:	6978      	ldr	r0, [r7, #20]
 80154ce:	f7fb fb1b 	bl	8010b08 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80154d2:	e13d      	b.n	8015750 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80154d4:	6979      	ldr	r1, [r7, #20]
 80154d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154d8:	f7fb fbf0 	bl	8010cbc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80154dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154de:	f7fb fbad 	bl	8010c3c <pbuf_clen>
 80154e2:	4603      	mov	r3, r0
 80154e4:	461a      	mov	r2, r3
 80154e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80154ea:	4413      	add	r3, r2
 80154ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80154f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80154f4:	2b09      	cmp	r3, #9
 80154f6:	d805      	bhi.n	8015504 <tcp_write+0x400>
 80154f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80154fc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015500:	4293      	cmp	r3, r2
 8015502:	d903      	bls.n	801550c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015506:	f7fb faff 	bl	8010b08 <pbuf_free>
      goto memerr;
 801550a:	e121      	b.n	8015750 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015514:	441a      	add	r2, r3
 8015516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801551a:	9300      	str	r3, [sp, #0]
 801551c:	4613      	mov	r3, r2
 801551e:	2200      	movs	r2, #0
 8015520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f7ff fc8e 	bl	8014e44 <tcp_create_segment>
 8015528:	64f8      	str	r0, [r7, #76]	; 0x4c
 801552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801552c:	2b00      	cmp	r3, #0
 801552e:	f000 810e 	beq.w	801574e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015534:	2b00      	cmp	r3, #0
 8015536:	d102      	bne.n	801553e <tcp_write+0x43a>
      queue = seg;
 8015538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801553a:	647b      	str	r3, [r7, #68]	; 0x44
 801553c:	e00c      	b.n	8015558 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015540:	2b00      	cmp	r3, #0
 8015542:	d106      	bne.n	8015552 <tcp_write+0x44e>
 8015544:	4b53      	ldr	r3, [pc, #332]	; (8015694 <tcp_write+0x590>)
 8015546:	f240 2285 	movw	r2, #645	; 0x285
 801554a:	4956      	ldr	r1, [pc, #344]	; (80156a4 <tcp_write+0x5a0>)
 801554c:	4853      	ldr	r0, [pc, #332]	; (801569c <tcp_write+0x598>)
 801554e:	f003 ffb7 	bl	80194c0 <iprintf>
      prev_seg->next = seg;
 8015552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015556:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801555a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801555c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015560:	8b3b      	ldrh	r3, [r7, #24]
 8015562:	4413      	add	r3, r2
 8015564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801556c:	88fb      	ldrh	r3, [r7, #6]
 801556e:	429a      	cmp	r2, r3
 8015570:	f4ff af38 	bcc.w	80153e4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015576:	2b00      	cmp	r3, #0
 8015578:	d02c      	beq.n	80155d4 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801557a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015580:	e01e      	b.n	80155c0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8015582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015584:	891a      	ldrh	r2, [r3, #8]
 8015586:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015588:	4413      	add	r3, r2
 801558a:	b29a      	uxth	r2, r3
 801558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d110      	bne.n	80155ba <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559a:	685b      	ldr	r3, [r3, #4]
 801559c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801559e:	8952      	ldrh	r2, [r2, #10]
 80155a0:	4413      	add	r3, r2
 80155a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80155a4:	68b9      	ldr	r1, [r7, #8]
 80155a6:	4618      	mov	r0, r3
 80155a8:	f003 ff77 	bl	801949a <memcpy>
        p->len += oversize_used;
 80155ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ae:	895a      	ldrh	r2, [r3, #10]
 80155b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155b2:	4413      	add	r3, r2
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80155ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80155c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d1dd      	bne.n	8015582 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80155c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155c8:	891a      	ldrh	r2, [r3, #8]
 80155ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155cc:	4413      	add	r3, r2
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155d2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80155d4:	8a7a      	ldrh	r2, [r7, #18]
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80155dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d018      	beq.n	8015614 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80155e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d106      	bne.n	80155f6 <tcp_write+0x4f2>
 80155e8:	4b2a      	ldr	r3, [pc, #168]	; (8015694 <tcp_write+0x590>)
 80155ea:	f240 22bb 	movw	r2, #699	; 0x2bb
 80155ee:	492e      	ldr	r1, [pc, #184]	; (80156a8 <tcp_write+0x5a4>)
 80155f0:	482a      	ldr	r0, [pc, #168]	; (801569c <tcp_write+0x598>)
 80155f2:	f003 ff65 	bl	80194c0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80155f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7fb fb5d 	bl	8010cbc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015604:	891a      	ldrh	r2, [r3, #8]
 8015606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015608:	891b      	ldrh	r3, [r3, #8]
 801560a:	4413      	add	r3, r2
 801560c:	b29a      	uxth	r2, r3
 801560e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015610:	811a      	strh	r2, [r3, #8]
 8015612:	e037      	b.n	8015684 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8015614:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015616:	2b00      	cmp	r3, #0
 8015618:	d034      	beq.n	8015684 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801561a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801561c:	2b00      	cmp	r3, #0
 801561e:	d003      	beq.n	8015628 <tcp_write+0x524>
 8015620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d106      	bne.n	8015636 <tcp_write+0x532>
 8015628:	4b1a      	ldr	r3, [pc, #104]	; (8015694 <tcp_write+0x590>)
 801562a:	f240 22c1 	movw	r2, #705	; 0x2c1
 801562e:	491f      	ldr	r1, [pc, #124]	; (80156ac <tcp_write+0x5a8>)
 8015630:	481a      	ldr	r0, [pc, #104]	; (801569c <tcp_write+0x598>)
 8015632:	f003 ff45 	bl	80194c0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	62bb      	str	r3, [r7, #40]	; 0x28
 801563c:	e009      	b.n	8015652 <tcp_write+0x54e>
      p->tot_len += extendlen;
 801563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015640:	891a      	ldrh	r2, [r3, #8]
 8015642:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015644:	4413      	add	r3, r2
 8015646:	b29a      	uxth	r2, r3
 8015648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	62bb      	str	r3, [r7, #40]	; 0x28
 8015652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d1f1      	bne.n	801563e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801565c:	891a      	ldrh	r2, [r3, #8]
 801565e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015660:	4413      	add	r3, r2
 8015662:	b29a      	uxth	r2, r3
 8015664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015666:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566a:	895a      	ldrh	r2, [r3, #10]
 801566c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801566e:	4413      	add	r3, r2
 8015670:	b29a      	uxth	r2, r3
 8015672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015674:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015678:	891a      	ldrh	r2, [r3, #8]
 801567a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801567c:	4413      	add	r3, r2
 801567e:	b29a      	uxth	r2, r3
 8015680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015682:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015686:	2b00      	cmp	r3, #0
 8015688:	d112      	bne.n	80156b0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801568e:	669a      	str	r2, [r3, #104]	; 0x68
 8015690:	e011      	b.n	80156b6 <tcp_write+0x5b2>
 8015692:	bf00      	nop
 8015694:	0801c318 	.word	0x0801c318
 8015698:	0801c54c 	.word	0x0801c54c
 801569c:	0801c3a0 	.word	0x0801c3a0
 80156a0:	0801c58c 	.word	0x0801c58c
 80156a4:	0801c59c 	.word	0x0801c59c
 80156a8:	0801c5b0 	.word	0x0801c5b0
 80156ac:	0801c5e8 	.word	0x0801c5e8
  } else {
    last_unsent->next = queue;
 80156b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80156b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80156ba:	88fb      	ldrh	r3, [r7, #6]
 80156bc:	441a      	add	r2, r3
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80156c8:	88fb      	ldrh	r3, [r7, #6]
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80156da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d00e      	beq.n	8015706 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d10a      	bne.n	8015706 <tcp_write+0x602>
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d106      	bne.n	8015706 <tcp_write+0x602>
 80156f8:	4b2c      	ldr	r3, [pc, #176]	; (80157ac <tcp_write+0x6a8>)
 80156fa:	f240 22ed 	movw	r2, #749	; 0x2ed
 80156fe:	492c      	ldr	r1, [pc, #176]	; (80157b0 <tcp_write+0x6ac>)
 8015700:	482c      	ldr	r0, [pc, #176]	; (80157b4 <tcp_write+0x6b0>)
 8015702:	f003 fedd 	bl	80194c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8015706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015708:	2b00      	cmp	r3, #0
 801570a:	d016      	beq.n	801573a <tcp_write+0x636>
 801570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d012      	beq.n	801573a <tcp_write+0x636>
 8015714:	797b      	ldrb	r3, [r7, #5]
 8015716:	f003 0302 	and.w	r3, r3, #2
 801571a:	2b00      	cmp	r3, #0
 801571c:	d10d      	bne.n	801573a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	899b      	ldrh	r3, [r3, #12]
 8015724:	b29c      	uxth	r4, r3
 8015726:	2008      	movs	r0, #8
 8015728:	f7f9 ffd4 	bl	800f6d4 <lwip_htons>
 801572c:	4603      	mov	r3, r0
 801572e:	461a      	mov	r2, r3
 8015730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	4322      	orrs	r2, r4
 8015736:	b292      	uxth	r2, r2
 8015738:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801573a:	2300      	movs	r3, #0
 801573c:	e031      	b.n	80157a2 <tcp_write+0x69e>
          goto memerr;
 801573e:	bf00      	nop
 8015740:	e006      	b.n	8015750 <tcp_write+0x64c>
            goto memerr;
 8015742:	bf00      	nop
 8015744:	e004      	b.n	8015750 <tcp_write+0x64c>
        goto memerr;
 8015746:	bf00      	nop
 8015748:	e002      	b.n	8015750 <tcp_write+0x64c>
        goto memerr;
 801574a:	bf00      	nop
 801574c:	e000      	b.n	8015750 <tcp_write+0x64c>
      goto memerr;
 801574e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	7e9b      	ldrb	r3, [r3, #26]
 8015754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015758:	b2da      	uxtb	r2, r3
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801575e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015760:	2b00      	cmp	r3, #0
 8015762:	d002      	beq.n	801576a <tcp_write+0x666>
    pbuf_free(concat_p);
 8015764:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015766:	f7fb f9cf 	bl	8010b08 <pbuf_free>
  }
  if (queue != NULL) {
 801576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801576c:	2b00      	cmp	r3, #0
 801576e:	d002      	beq.n	8015776 <tcp_write+0x672>
    tcp_segs_free(queue);
 8015770:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015772:	f7fc fcce 	bl	8012112 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00e      	beq.n	801579e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10a      	bne.n	801579e <tcp_write+0x69a>
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801578c:	2b00      	cmp	r3, #0
 801578e:	d106      	bne.n	801579e <tcp_write+0x69a>
 8015790:	4b06      	ldr	r3, [pc, #24]	; (80157ac <tcp_write+0x6a8>)
 8015792:	f240 3202 	movw	r2, #770	; 0x302
 8015796:	4906      	ldr	r1, [pc, #24]	; (80157b0 <tcp_write+0x6ac>)
 8015798:	4806      	ldr	r0, [pc, #24]	; (80157b4 <tcp_write+0x6b0>)
 801579a:	f003 fe91 	bl	80194c0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801579e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	375c      	adds	r7, #92	; 0x5c
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd90      	pop	{r4, r7, pc}
 80157aa:	bf00      	nop
 80157ac:	0801c318 	.word	0x0801c318
 80157b0:	0801c620 	.word	0x0801c620
 80157b4:	0801c3a0 	.word	0x0801c3a0

080157b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b08a      	sub	sp, #40	; 0x28
 80157bc:	af02      	add	r7, sp, #8
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	460b      	mov	r3, r1
 80157c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80157c4:	2300      	movs	r3, #0
 80157c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80157cc:	78fb      	ldrb	r3, [r7, #3]
 80157ce:	f003 0303 	and.w	r3, r3, #3
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d106      	bne.n	80157e4 <tcp_enqueue_flags+0x2c>
 80157d6:	4b6f      	ldr	r3, [pc, #444]	; (8015994 <tcp_enqueue_flags+0x1dc>)
 80157d8:	f240 321b 	movw	r2, #795	; 0x31b
 80157dc:	496e      	ldr	r1, [pc, #440]	; (8015998 <tcp_enqueue_flags+0x1e0>)
 80157de:	486f      	ldr	r0, [pc, #444]	; (801599c <tcp_enqueue_flags+0x1e4>)
 80157e0:	f003 fe6e 	bl	80194c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80157ea:	2b08      	cmp	r3, #8
 80157ec:	d806      	bhi.n	80157fc <tcp_enqueue_flags+0x44>
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80157f4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80157f8:	4293      	cmp	r3, r2
 80157fa:	d90e      	bls.n	801581a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80157fc:	78fb      	ldrb	r3, [r7, #3]
 80157fe:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015802:	2b00      	cmp	r3, #0
 8015804:	d109      	bne.n	801581a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	7e9b      	ldrb	r3, [r3, #26]
 801580a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801580e:	b2da      	uxtb	r2, r3
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015814:	f04f 33ff 	mov.w	r3, #4294967295
 8015818:	e0b7      	b.n	801598a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801581a:	78fb      	ldrb	r3, [r7, #3]
 801581c:	f003 0302 	and.w	r3, r3, #2
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015824:	2301      	movs	r3, #1
 8015826:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015828:	7ffb      	ldrb	r3, [r7, #31]
 801582a:	009b      	lsls	r3, r3, #2
 801582c:	b2db      	uxtb	r3, r3
 801582e:	f003 0304 	and.w	r3, r3, #4
 8015832:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015834:	7dfb      	ldrb	r3, [r7, #23]
 8015836:	b29b      	uxth	r3, r3
 8015838:	2200      	movs	r2, #0
 801583a:	4619      	mov	r1, r3
 801583c:	2000      	movs	r0, #0
 801583e:	f7fa fdf1 	bl	8010424 <pbuf_alloc>
 8015842:	6138      	str	r0, [r7, #16]
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d109      	bne.n	801585e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	7e9b      	ldrb	r3, [r3, #26]
 801584e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015852:	b2da      	uxtb	r2, r3
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015858:	f04f 33ff 	mov.w	r3, #4294967295
 801585c:	e095      	b.n	801598a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	895a      	ldrh	r2, [r3, #10]
 8015862:	7dfb      	ldrb	r3, [r7, #23]
 8015864:	b29b      	uxth	r3, r3
 8015866:	429a      	cmp	r2, r3
 8015868:	d206      	bcs.n	8015878 <tcp_enqueue_flags+0xc0>
 801586a:	4b4a      	ldr	r3, [pc, #296]	; (8015994 <tcp_enqueue_flags+0x1dc>)
 801586c:	f240 3241 	movw	r2, #833	; 0x341
 8015870:	494b      	ldr	r1, [pc, #300]	; (80159a0 <tcp_enqueue_flags+0x1e8>)
 8015872:	484a      	ldr	r0, [pc, #296]	; (801599c <tcp_enqueue_flags+0x1e4>)
 8015874:	f003 fe24 	bl	80194c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801587c:	78fa      	ldrb	r2, [r7, #3]
 801587e:	7ffb      	ldrb	r3, [r7, #31]
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	460b      	mov	r3, r1
 8015884:	6939      	ldr	r1, [r7, #16]
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f7ff fadc 	bl	8014e44 <tcp_create_segment>
 801588c:	60f8      	str	r0, [r7, #12]
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d109      	bne.n	80158a8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	7e9b      	ldrb	r3, [r3, #26]
 8015898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801589c:	b2da      	uxtb	r2, r3
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80158a2:	f04f 33ff 	mov.w	r3, #4294967295
 80158a6:	e070      	b.n	801598a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	f003 0303 	and.w	r3, r3, #3
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d006      	beq.n	80158c2 <tcp_enqueue_flags+0x10a>
 80158b4:	4b37      	ldr	r3, [pc, #220]	; (8015994 <tcp_enqueue_flags+0x1dc>)
 80158b6:	f240 3249 	movw	r2, #841	; 0x349
 80158ba:	493a      	ldr	r1, [pc, #232]	; (80159a4 <tcp_enqueue_flags+0x1ec>)
 80158bc:	4837      	ldr	r0, [pc, #220]	; (801599c <tcp_enqueue_flags+0x1e4>)
 80158be:	f003 fdff 	bl	80194c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	891b      	ldrh	r3, [r3, #8]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d006      	beq.n	80158d8 <tcp_enqueue_flags+0x120>
 80158ca:	4b32      	ldr	r3, [pc, #200]	; (8015994 <tcp_enqueue_flags+0x1dc>)
 80158cc:	f240 324a 	movw	r2, #842	; 0x34a
 80158d0:	4935      	ldr	r1, [pc, #212]	; (80159a8 <tcp_enqueue_flags+0x1f0>)
 80158d2:	4832      	ldr	r0, [pc, #200]	; (801599c <tcp_enqueue_flags+0x1e4>)
 80158d4:	f003 fdf4 	bl	80194c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d103      	bne.n	80158e8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	68fa      	ldr	r2, [r7, #12]
 80158e4:	669a      	str	r2, [r3, #104]	; 0x68
 80158e6:	e00d      	b.n	8015904 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80158ec:	61bb      	str	r3, [r7, #24]
 80158ee:	e002      	b.n	80158f6 <tcp_enqueue_flags+0x13e>
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	61bb      	str	r3, [r7, #24]
 80158f6:	69bb      	ldr	r3, [r7, #24]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d1f8      	bne.n	80158f0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80158fe:	69bb      	ldr	r3, [r7, #24]
 8015900:	68fa      	ldr	r2, [r7, #12]
 8015902:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	2200      	movs	r2, #0
 8015908:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801590c:	78fb      	ldrb	r3, [r7, #3]
 801590e:	f003 0302 	and.w	r3, r3, #2
 8015912:	2b00      	cmp	r3, #0
 8015914:	d104      	bne.n	8015920 <tcp_enqueue_flags+0x168>
 8015916:	78fb      	ldrb	r3, [r7, #3]
 8015918:	f003 0301 	and.w	r3, r3, #1
 801591c:	2b00      	cmp	r3, #0
 801591e:	d004      	beq.n	801592a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801592a:	78fb      	ldrb	r3, [r7, #3]
 801592c:	f003 0301 	and.w	r3, r3, #1
 8015930:	2b00      	cmp	r3, #0
 8015932:	d006      	beq.n	8015942 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	7e9b      	ldrb	r3, [r3, #26]
 8015938:	f043 0320 	orr.w	r3, r3, #32
 801593c:	b2da      	uxtb	r2, r3
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	4618      	mov	r0, r3
 8015948:	f7fb f978 	bl	8010c3c <pbuf_clen>
 801594c:	4603      	mov	r3, r0
 801594e:	461a      	mov	r2, r3
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015956:	4413      	add	r3, r2
 8015958:	b29a      	uxth	r2, r3
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015966:	2b00      	cmp	r3, #0
 8015968:	d00e      	beq.n	8015988 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801596e:	2b00      	cmp	r3, #0
 8015970:	d10a      	bne.n	8015988 <tcp_enqueue_flags+0x1d0>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015976:	2b00      	cmp	r3, #0
 8015978:	d106      	bne.n	8015988 <tcp_enqueue_flags+0x1d0>
 801597a:	4b06      	ldr	r3, [pc, #24]	; (8015994 <tcp_enqueue_flags+0x1dc>)
 801597c:	f240 326d 	movw	r2, #877	; 0x36d
 8015980:	490a      	ldr	r1, [pc, #40]	; (80159ac <tcp_enqueue_flags+0x1f4>)
 8015982:	4806      	ldr	r0, [pc, #24]	; (801599c <tcp_enqueue_flags+0x1e4>)
 8015984:	f003 fd9c 	bl	80194c0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015988:	2300      	movs	r3, #0
}
 801598a:	4618      	mov	r0, r3
 801598c:	3720      	adds	r7, #32
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	0801c318 	.word	0x0801c318
 8015998:	0801c640 	.word	0x0801c640
 801599c:	0801c3a0 	.word	0x0801c3a0
 80159a0:	0801c698 	.word	0x0801c698
 80159a4:	0801c6d4 	.word	0x0801c6d4
 80159a8:	0801c6ec 	.word	0x0801c6ec
 80159ac:	0801c718 	.word	0x0801c718

080159b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80159b0:	b590      	push	{r4, r7, lr}
 80159b2:	b08b      	sub	sp, #44	; 0x2c
 80159b4:	af04      	add	r7, sp, #16
 80159b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80159b8:	2300      	movs	r3, #0
 80159ba:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80159bc:	7dbb      	ldrb	r3, [r7, #22]
 80159be:	b29c      	uxth	r4, r3
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7f9 fe93 	bl	800f6f0 <lwip_htonl>
 80159ca:	4603      	mov	r3, r0
 80159cc:	2200      	movs	r2, #0
 80159ce:	4621      	mov	r1, r4
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f7ff f97b 	bl	8014ccc <tcp_output_alloc_header>
 80159d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d109      	bne.n	80159f2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	7e9b      	ldrb	r3, [r3, #26]
 80159e2:	f043 0303 	orr.w	r3, r3, #3
 80159e6:	b2da      	uxtb	r2, r3
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80159ec:	f06f 0301 	mvn.w	r3, #1
 80159f0:	e036      	b.n	8015a60 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	3304      	adds	r3, #4
 80159f6:	4618      	mov	r0, r3
 80159f8:	f002 f9c0 	bl	8017d7c <ip4_route>
 80159fc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d102      	bne.n	8015a0a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8015a04:	23fc      	movs	r3, #252	; 0xfc
 8015a06:	75fb      	strb	r3, [r7, #23]
 8015a08:	e012      	b.n	8015a30 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8015a0a:	6879      	ldr	r1, [r7, #4]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	1d18      	adds	r0, r3, #4
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	7a9c      	ldrb	r4, [r3, #10]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	7a5b      	ldrb	r3, [r3, #9]
 8015a18:	68fa      	ldr	r2, [r7, #12]
 8015a1a:	9202      	str	r2, [sp, #8]
 8015a1c:	2206      	movs	r2, #6
 8015a1e:	9201      	str	r2, [sp, #4]
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	4623      	mov	r3, r4
 8015a24:	4602      	mov	r2, r0
 8015a26:	6938      	ldr	r0, [r7, #16]
 8015a28:	f002 fb50 	bl	80180cc <ip4_output_if>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8015a30:	6938      	ldr	r0, [r7, #16]
 8015a32:	f7fb f869 	bl	8010b08 <pbuf_free>

  if (err != ERR_OK) {
 8015a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d007      	beq.n	8015a4e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	7e9b      	ldrb	r3, [r3, #26]
 8015a42:	f043 0303 	orr.w	r3, r3, #3
 8015a46:	b2da      	uxtb	r2, r3
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	769a      	strb	r2, [r3, #26]
 8015a4c:	e006      	b.n	8015a5c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	7e9b      	ldrb	r3, [r3, #26]
 8015a52:	f023 0303 	bic.w	r3, r3, #3
 8015a56:	b2da      	uxtb	r2, r3
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8015a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	371c      	adds	r7, #28
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd90      	pop	{r4, r7, pc}

08015a68 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015a68:	b5b0      	push	{r4, r5, r7, lr}
 8015a6a:	b08a      	sub	sp, #40	; 0x28
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	7d1b      	ldrb	r3, [r3, #20]
 8015a74:	2b01      	cmp	r3, #1
 8015a76:	d106      	bne.n	8015a86 <tcp_output+0x1e>
 8015a78:	4b9b      	ldr	r3, [pc, #620]	; (8015ce8 <tcp_output+0x280>)
 8015a7a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8015a7e:	499b      	ldr	r1, [pc, #620]	; (8015cec <tcp_output+0x284>)
 8015a80:	489b      	ldr	r0, [pc, #620]	; (8015cf0 <tcp_output+0x288>)
 8015a82:	f003 fd1d 	bl	80194c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015a86:	4b9b      	ldr	r3, [pc, #620]	; (8015cf4 <tcp_output+0x28c>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d101      	bne.n	8015a94 <tcp_output+0x2c>
    return ERR_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	e1cf      	b.n	8015e34 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d203      	bcs.n	8015aac <tcp_output+0x44>
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015aaa:	e002      	b.n	8015ab2 <tcp_output+0x4a>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ab2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ab8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	7e9b      	ldrb	r3, [r3, #26]
 8015abe:	f003 0302 	and.w	r3, r3, #2
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d017      	beq.n	8015af6 <tcp_output+0x8e>
 8015ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d00f      	beq.n	8015aec <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	685b      	ldr	r3, [r3, #4]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7f9 fe0c 	bl	800f6f0 <lwip_htonl>
 8015ad8:	4602      	mov	r2, r0
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ade:	1ad3      	subs	r3, r2, r3
 8015ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ae2:	8912      	ldrh	r2, [r2, #8]
 8015ae4:	4413      	add	r3, r2
     (seg == NULL ||
 8015ae6:	69ba      	ldr	r2, [r7, #24]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d204      	bcs.n	8015af6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7ff ff5f 	bl	80159b0 <tcp_send_empty_ack>
 8015af2:	4603      	mov	r3, r0
 8015af4:	e19e      	b.n	8015e34 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015afa:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015afc:	6a3b      	ldr	r3, [r7, #32]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d007      	beq.n	8015b12 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8015b02:	e002      	b.n	8015b0a <tcp_output+0xa2>
 8015b04:	6a3b      	ldr	r3, [r7, #32]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	623b      	str	r3, [r7, #32]
 8015b0a:	6a3b      	ldr	r3, [r7, #32]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d1f8      	bne.n	8015b04 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	3304      	adds	r3, #4
 8015b16:	4618      	mov	r0, r3
 8015b18:	f002 f930 	bl	8017d7c <ip4_route>
 8015b1c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d102      	bne.n	8015b2a <tcp_output+0xc2>
    return ERR_RTE;
 8015b24:	f06f 0303 	mvn.w	r3, #3
 8015b28:	e184      	b.n	8015e34 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d003      	beq.n	8015b38 <tcp_output+0xd0>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d111      	bne.n	8015b5c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d002      	beq.n	8015b44 <tcp_output+0xdc>
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	3304      	adds	r3, #4
 8015b42:	e000      	b.n	8015b46 <tcp_output+0xde>
 8015b44:	2300      	movs	r3, #0
 8015b46:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d102      	bne.n	8015b54 <tcp_output+0xec>
      return ERR_RTE;
 8015b4e:	f06f 0303 	mvn.w	r3, #3
 8015b52:	e16f      	b.n	8015e34 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8015b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	f000 813e 	beq.w	8015de0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7f9 fdc0 	bl	800f6f0 <lwip_htonl>
 8015b70:	4602      	mov	r2, r0
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b76:	1ad3      	subs	r3, r2, r3
 8015b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b7a:	8912      	ldrh	r2, [r2, #8]
 8015b7c:	4413      	add	r3, r2
  if (seg != NULL &&
 8015b7e:	69ba      	ldr	r2, [r7, #24]
 8015b80:	429a      	cmp	r2, r3
 8015b82:	f080 812d 	bcs.w	8015de0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8015b86:	69bb      	ldr	r3, [r7, #24]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f000 8129 	beq.w	8015de0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015b94:	461a      	mov	r2, r3
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	4293      	cmp	r3, r2
 8015b9a:	f040 8121 	bne.w	8015de0 <tcp_output+0x378>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	f040 811c 	bne.w	8015de0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	f040 812b 	bne.w	8015e0a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8015bc4:	e121      	b.n	8015e0a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc8:	68db      	ldr	r3, [r3, #12]
 8015bca:	899b      	ldrh	r3, [r3, #12]
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7f9 fd80 	bl	800f6d4 <lwip_htons>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	f003 0304 	and.w	r3, r3, #4
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d006      	beq.n	8015bec <tcp_output+0x184>
 8015bde:	4b42      	ldr	r3, [pc, #264]	; (8015ce8 <tcp_output+0x280>)
 8015be0:	f240 4246 	movw	r2, #1094	; 0x446
 8015be4:	4944      	ldr	r1, [pc, #272]	; (8015cf8 <tcp_output+0x290>)
 8015be6:	4842      	ldr	r0, [pc, #264]	; (8015cf0 <tcp_output+0x288>)
 8015be8:	f003 fc6a 	bl	80194c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d01f      	beq.n	8015c34 <tcp_output+0x1cc>
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	7e9b      	ldrb	r3, [r3, #26]
 8015bf8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d119      	bne.n	8015c34 <tcp_output+0x1cc>
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d00b      	beq.n	8015c20 <tcp_output+0x1b8>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d110      	bne.n	8015c34 <tcp_output+0x1cc>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c16:	891a      	ldrh	r2, [r3, #8]
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	d209      	bcs.n	8015c34 <tcp_output+0x1cc>
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d004      	beq.n	8015c34 <tcp_output+0x1cc>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015c30:	2b08      	cmp	r3, #8
 8015c32:	d901      	bls.n	8015c38 <tcp_output+0x1d0>
 8015c34:	2301      	movs	r3, #1
 8015c36:	e000      	b.n	8015c3a <tcp_output+0x1d2>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d106      	bne.n	8015c4c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	7e9b      	ldrb	r3, [r3, #26]
 8015c42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	f000 80e1 	beq.w	8015e0e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	7d1b      	ldrb	r3, [r3, #20]
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d00d      	beq.n	8015c70 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c56:	68db      	ldr	r3, [r3, #12]
 8015c58:	899b      	ldrh	r3, [r3, #12]
 8015c5a:	b29c      	uxth	r4, r3
 8015c5c:	2010      	movs	r0, #16
 8015c5e:	f7f9 fd39 	bl	800f6d4 <lwip_htons>
 8015c62:	4603      	mov	r3, r0
 8015c64:	461a      	mov	r2, r3
 8015c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c68:	68db      	ldr	r3, [r3, #12]
 8015c6a:	4322      	orrs	r2, r4
 8015c6c:	b292      	uxth	r2, r2
 8015c6e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8015c70:	697a      	ldr	r2, [r7, #20]
 8015c72:	6879      	ldr	r1, [r7, #4]
 8015c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c76:	f000 f8e1 	bl	8015e3c <tcp_output_segment>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d009      	beq.n	8015c9a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	7e9b      	ldrb	r3, [r3, #26]
 8015c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015c8e:	b2da      	uxtb	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	769a      	strb	r2, [r3, #26]
      return err;
 8015c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c98:	e0cc      	b.n	8015e34 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8015c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	7d1b      	ldrb	r3, [r3, #20]
 8015ca6:	2b02      	cmp	r3, #2
 8015ca8:	d006      	beq.n	8015cb8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	7e9b      	ldrb	r3, [r3, #26]
 8015cae:	f023 0303 	bic.w	r3, r3, #3
 8015cb2:	b2da      	uxtb	r2, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cba:	68db      	ldr	r3, [r3, #12]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7f9 fd16 	bl	800f6f0 <lwip_htonl>
 8015cc4:	4604      	mov	r4, r0
 8015cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc8:	891b      	ldrh	r3, [r3, #8]
 8015cca:	461d      	mov	r5, r3
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	899b      	ldrh	r3, [r3, #12]
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7f9 fcfd 	bl	800f6d4 <lwip_htons>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	f003 0303 	and.w	r3, r3, #3
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00b      	beq.n	8015cfc <tcp_output+0x294>
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	e00a      	b.n	8015cfe <tcp_output+0x296>
 8015ce8:	0801c318 	.word	0x0801c318
 8015cec:	0801c740 	.word	0x0801c740
 8015cf0:	0801c3a0 	.word	0x0801c3a0
 8015cf4:	200101e0 	.word	0x200101e0
 8015cf8:	0801c768 	.word	0x0801c768
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	442b      	add	r3, r5
 8015d00:	4423      	add	r3, r4
 8015d02:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	1ad3      	subs	r3, r2, r3
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	da02      	bge.n	8015d16 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	68ba      	ldr	r2, [r7, #8]
 8015d14:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d18:	891b      	ldrh	r3, [r3, #8]
 8015d1a:	461c      	mov	r4, r3
 8015d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	899b      	ldrh	r3, [r3, #12]
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f9 fcd5 	bl	800f6d4 <lwip_htons>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	f003 0303 	and.w	r3, r3, #3
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d001      	beq.n	8015d38 <tcp_output+0x2d0>
 8015d34:	2301      	movs	r3, #1
 8015d36:	e000      	b.n	8015d3a <tcp_output+0x2d2>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	4423      	add	r3, r4
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d049      	beq.n	8015dd4 <tcp_output+0x36c>
      seg->next = NULL;
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	2200      	movs	r2, #0
 8015d44:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d105      	bne.n	8015d5a <tcp_output+0x2f2>
        pcb->unacked = seg;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d52:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8015d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d56:	623b      	str	r3, [r7, #32]
 8015d58:	e03f      	b.n	8015dda <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5c:	68db      	ldr	r3, [r3, #12]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7f9 fcc5 	bl	800f6f0 <lwip_htonl>
 8015d66:	4604      	mov	r4, r0
 8015d68:	6a3b      	ldr	r3, [r7, #32]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7f9 fcbe 	bl	800f6f0 <lwip_htonl>
 8015d74:	4603      	mov	r3, r0
 8015d76:	1ae3      	subs	r3, r4, r3
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	da24      	bge.n	8015dc6 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	336c      	adds	r3, #108	; 0x6c
 8015d80:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015d82:	e002      	b.n	8015d8a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d011      	beq.n	8015db6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015d92:	69fb      	ldr	r3, [r7, #28]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7f9 fca8 	bl	800f6f0 <lwip_htonl>
 8015da0:	4604      	mov	r4, r0
 8015da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7f9 fca1 	bl	800f6f0 <lwip_htonl>
 8015dae:	4603      	mov	r3, r0
 8015db0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	dbe6      	blt.n	8015d84 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	681a      	ldr	r2, [r3, #0]
 8015dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dc2:	601a      	str	r2, [r3, #0]
 8015dc4:	e009      	b.n	8015dda <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015dc6:	6a3b      	ldr	r3, [r7, #32]
 8015dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dca:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015dcc:	6a3b      	ldr	r3, [r7, #32]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	623b      	str	r3, [r7, #32]
 8015dd2:	e002      	b.n	8015dda <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015dd6:	f7fc f9b0 	bl	801213a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d015      	beq.n	8015e12 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de8:	68db      	ldr	r3, [r3, #12]
 8015dea:	685b      	ldr	r3, [r3, #4]
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7f9 fc7f 	bl	800f6f0 <lwip_htonl>
 8015df2:	4602      	mov	r2, r0
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015df8:	1ad3      	subs	r3, r2, r3
 8015dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dfc:	8912      	ldrh	r2, [r2, #8]
 8015dfe:	4413      	add	r3, r2
  while (seg != NULL &&
 8015e00:	69ba      	ldr	r2, [r7, #24]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	f4bf aedf 	bcs.w	8015bc6 <tcp_output+0x15e>
  }
output_done:
 8015e08:	e003      	b.n	8015e12 <tcp_output+0x3aa>
    goto output_done;
 8015e0a:	bf00      	nop
 8015e0c:	e002      	b.n	8015e14 <tcp_output+0x3ac>
      break;
 8015e0e:	bf00      	nop
 8015e10:	e000      	b.n	8015e14 <tcp_output+0x3ac>
output_done:
 8015e12:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d103      	bne.n	8015e24 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	7e9b      	ldrb	r3, [r3, #26]
 8015e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e2c:	b2da      	uxtb	r2, r3
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3728      	adds	r7, #40	; 0x28
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bdb0      	pop	{r4, r5, r7, pc}

08015e3c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015e3c:	b5b0      	push	{r4, r5, r7, lr}
 8015e3e:	b08c      	sub	sp, #48	; 0x30
 8015e40:	af04      	add	r7, sp, #16
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	89db      	ldrh	r3, [r3, #14]
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d001      	beq.n	8015e56 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8015e52:	2300      	movs	r3, #0
 8015e54:	e08b      	b.n	8015f6e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	68dc      	ldr	r4, [r3, #12]
 8015e5e:	4610      	mov	r0, r2
 8015e60:	f7f9 fc46 	bl	800f6f0 <lwip_htonl>
 8015e64:	4603      	mov	r3, r0
 8015e66:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	68dc      	ldr	r4, [r3, #12]
 8015e70:	4610      	mov	r0, r2
 8015e72:	f7f9 fc2f 	bl	800f6d4 <lwip_htons>
 8015e76:	4603      	mov	r3, r0
 8015e78:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e7e:	68ba      	ldr	r2, [r7, #8]
 8015e80:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015e82:	441a      	add	r2, r3
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	68db      	ldr	r3, [r3, #12]
 8015e8c:	3314      	adds	r3, #20
 8015e8e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	7a9b      	ldrb	r3, [r3, #10]
 8015e94:	f003 0301 	and.w	r3, r3, #1
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d014      	beq.n	8015ec6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	3304      	adds	r3, #4
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015ea6:	f7fc fc73 	bl	8012790 <tcp_eff_send_mss_impl>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015eae:	8b7b      	ldrh	r3, [r7, #26]
 8015eb0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7f9 fc1b 	bl	800f6f0 <lwip_htonl>
 8015eba:	4602      	mov	r2, r0
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	3304      	adds	r3, #4
 8015ec4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	da02      	bge.n	8015ed6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d10c      	bne.n	8015ef8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8015ede:	4b26      	ldr	r3, [pc, #152]	; (8015f78 <tcp_output_segment+0x13c>)
 8015ee0:	681a      	ldr	r2, [r3, #0]
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	68db      	ldr	r3, [r3, #12]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7f9 fbff 	bl	800f6f0 <lwip_htonl>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	461a      	mov	r2, r3
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	1ad3      	subs	r3, r2, r3
 8015f06:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	8959      	ldrh	r1, [r3, #10]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	8b3a      	ldrh	r2, [r7, #24]
 8015f14:	1a8a      	subs	r2, r1, r2
 8015f16:	b292      	uxth	r2, r2
 8015f18:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	8919      	ldrh	r1, [r3, #8]
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	8b3a      	ldrh	r2, [r7, #24]
 8015f26:	1a8a      	subs	r2, r1, r2
 8015f28:	b292      	uxth	r2, r2
 8015f2a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	68d2      	ldr	r2, [r2, #12]
 8015f34:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	68db      	ldr	r3, [r3, #12]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	741a      	strb	r2, [r3, #16]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	6858      	ldr	r0, [r3, #4]
 8015f46:	68b9      	ldr	r1, [r7, #8]
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	1d1c      	adds	r4, r3, #4
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	7a9d      	ldrb	r5, [r3, #10]
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	7a5b      	ldrb	r3, [r3, #9]
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	9202      	str	r2, [sp, #8]
 8015f58:	2206      	movs	r2, #6
 8015f5a:	9201      	str	r2, [sp, #4]
 8015f5c:	9300      	str	r3, [sp, #0]
 8015f5e:	462b      	mov	r3, r5
 8015f60:	4622      	mov	r2, r4
 8015f62:	f002 f8b3 	bl	80180cc <ip4_output_if>
 8015f66:	4603      	mov	r3, r0
 8015f68:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8015f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3720      	adds	r7, #32
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bdb0      	pop	{r4, r5, r7, pc}
 8015f76:	bf00      	nop
 8015f78:	200101d0 	.word	0x200101d0

08015f7c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b08c      	sub	sp, #48	; 0x30
 8015f80:	af04      	add	r7, sp, #16
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
 8015f88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	2114      	movs	r1, #20
 8015f8e:	2001      	movs	r0, #1
 8015f90:	f7fa fa48 	bl	8010424 <pbuf_alloc>
 8015f94:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015f96:	69fb      	ldr	r3, [r7, #28]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d05b      	beq.n	8016054 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	895b      	ldrh	r3, [r3, #10]
 8015fa0:	2b13      	cmp	r3, #19
 8015fa2:	d806      	bhi.n	8015fb2 <tcp_rst+0x36>
 8015fa4:	4b2d      	ldr	r3, [pc, #180]	; (801605c <tcp_rst+0xe0>)
 8015fa6:	f240 524d 	movw	r2, #1357	; 0x54d
 8015faa:	492d      	ldr	r1, [pc, #180]	; (8016060 <tcp_rst+0xe4>)
 8015fac:	482d      	ldr	r0, [pc, #180]	; (8016064 <tcp_rst+0xe8>)
 8015fae:	f003 fa87 	bl	80194c0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8015fb2:	69fb      	ldr	r3, [r7, #28]
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8015fb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7f9 fb8a 	bl	800f6d4 <lwip_htons>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8015fc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7f9 fb82 	bl	800f6d4 <lwip_htons>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	461a      	mov	r2, r3
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8015fd8:	68f8      	ldr	r0, [r7, #12]
 8015fda:	f7f9 fb89 	bl	800f6f0 <lwip_htonl>
 8015fde:	4602      	mov	r2, r0
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8015fe4:	68b8      	ldr	r0, [r7, #8]
 8015fe6:	f7f9 fb83 	bl	800f6f0 <lwip_htonl>
 8015fea:	4602      	mov	r2, r0
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8015ff0:	f245 0014 	movw	r0, #20500	; 0x5014
 8015ff4:	f7f9 fb6e 	bl	800f6d4 <lwip_htons>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	2200      	movs	r2, #0
 8016004:	f042 0208 	orr.w	r2, r2, #8
 8016008:	739a      	strb	r2, [r3, #14]
 801600a:	2200      	movs	r2, #0
 801600c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8016010:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	2200      	movs	r2, #0
 8016016:	741a      	strb	r2, [r3, #16]
 8016018:	2200      	movs	r2, #0
 801601a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	2200      	movs	r2, #0
 8016020:	749a      	strb	r2, [r3, #18]
 8016022:	2200      	movs	r2, #0
 8016024:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8016026:	6838      	ldr	r0, [r7, #0]
 8016028:	f001 fea8 	bl	8017d7c <ip4_route>
 801602c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d00b      	beq.n	801604c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	9302      	str	r3, [sp, #8]
 8016038:	2306      	movs	r3, #6
 801603a:	9301      	str	r3, [sp, #4]
 801603c:	2300      	movs	r3, #0
 801603e:	9300      	str	r3, [sp, #0]
 8016040:	23ff      	movs	r3, #255	; 0xff
 8016042:	683a      	ldr	r2, [r7, #0]
 8016044:	6879      	ldr	r1, [r7, #4]
 8016046:	69f8      	ldr	r0, [r7, #28]
 8016048:	f002 f840 	bl	80180cc <ip4_output_if>
  }
  pbuf_free(p);
 801604c:	69f8      	ldr	r0, [r7, #28]
 801604e:	f7fa fd5b 	bl	8010b08 <pbuf_free>
 8016052:	e000      	b.n	8016056 <tcp_rst+0xda>
    return;
 8016054:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016056:	3720      	adds	r7, #32
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	0801c318 	.word	0x0801c318
 8016060:	0801c370 	.word	0x0801c370
 8016064:	0801c3a0 	.word	0x0801c3a0

08016068 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016074:	2b00      	cmp	r3, #0
 8016076:	d029      	beq.n	80160cc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801607c:	60fb      	str	r3, [r7, #12]
 801607e:	e002      	b.n	8016086 <tcp_rexmit_rto+0x1e>
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	60fb      	str	r3, [r7, #12]
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d1f8      	bne.n	8016080 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2200      	movs	r2, #0
 80160a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160aa:	2bff      	cmp	r3, #255	; 0xff
 80160ac:	d007      	beq.n	80160be <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160b4:	3301      	adds	r3, #1
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2200      	movs	r2, #0
 80160c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f7ff fccf 	bl	8015a68 <tcp_output>
 80160ca:	e000      	b.n	80160ce <tcp_rexmit_rto+0x66>
    return;
 80160cc:	bf00      	nop
}
 80160ce:	3710      	adds	r7, #16
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80160d4:	b590      	push	{r4, r7, lr}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d043      	beq.n	801616c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160e8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	3368      	adds	r3, #104	; 0x68
 80160f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80160f8:	e002      	b.n	8016100 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d011      	beq.n	801612c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	68db      	ldr	r3, [r3, #12]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	4618      	mov	r0, r3
 8016112:	f7f9 faed 	bl	800f6f0 <lwip_htonl>
 8016116:	4604      	mov	r4, r0
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	4618      	mov	r0, r3
 8016120:	f7f9 fae6 	bl	800f6f0 <lwip_htonl>
 8016124:	4603      	mov	r3, r0
 8016126:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016128:	2b00      	cmp	r3, #0
 801612a:	dbe6      	blt.n	80160fa <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681a      	ldr	r2, [r3, #0]
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	68ba      	ldr	r2, [r7, #8]
 8016138:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801613a:	68bb      	ldr	r3, [r7, #8]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d103      	bne.n	801614a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	2200      	movs	r2, #0
 8016146:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016150:	2bff      	cmp	r3, #255	; 0xff
 8016152:	d007      	beq.n	8016164 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801615a:	3301      	adds	r3, #1
 801615c:	b2da      	uxtb	r2, r3
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2200      	movs	r2, #0
 8016168:	635a      	str	r2, [r3, #52]	; 0x34
 801616a:	e000      	b.n	801616e <tcp_rexmit+0x9a>
    return;
 801616c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801616e:	3714      	adds	r7, #20
 8016170:	46bd      	mov	sp, r7
 8016172:	bd90      	pop	{r4, r7, pc}

08016174 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016180:	2b00      	cmp	r3, #0
 8016182:	d04c      	beq.n	801621e <tcp_rexmit_fast+0xaa>
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	7e9b      	ldrb	r3, [r3, #26]
 8016188:	f003 0304 	and.w	r3, r3, #4
 801618c:	2b00      	cmp	r3, #0
 801618e:	d146      	bne.n	801621e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f7ff ff9f 	bl	80160d4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d208      	bcs.n	80161b8 <tcp_rexmit_fast+0x44>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	da00      	bge.n	80161b2 <tcp_rexmit_fast+0x3e>
 80161b0:	3301      	adds	r3, #1
 80161b2:	105b      	asrs	r3, r3, #1
 80161b4:	b29b      	uxth	r3, r3
 80161b6:	e007      	b.n	80161c8 <tcp_rexmit_fast+0x54>
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80161be:	2b00      	cmp	r3, #0
 80161c0:	da00      	bge.n	80161c4 <tcp_rexmit_fast+0x50>
 80161c2:	3301      	adds	r3, #1
 80161c4:	105b      	asrs	r3, r3, #1
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80161d4:	461a      	mov	r2, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161da:	005b      	lsls	r3, r3, #1
 80161dc:	429a      	cmp	r2, r3
 80161de:	d206      	bcs.n	80161ee <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161f8:	4619      	mov	r1, r3
 80161fa:	0049      	lsls	r1, r1, #1
 80161fc:	440b      	add	r3, r1
 80161fe:	b29b      	uxth	r3, r3
 8016200:	4413      	add	r3, r2
 8016202:	b29a      	uxth	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	7e9b      	ldrb	r3, [r3, #26]
 801620e:	f043 0304 	orr.w	r3, r3, #4
 8016212:	b2da      	uxtb	r2, r3
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2200      	movs	r2, #0
 801621c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801621e:	bf00      	nop
 8016220:	3708      	adds	r7, #8
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016226:	b580      	push	{r7, lr}
 8016228:	b08a      	sub	sp, #40	; 0x28
 801622a:	af04      	add	r7, sp, #16
 801622c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016232:	3b01      	subs	r3, #1
 8016234:	4618      	mov	r0, r3
 8016236:	f7f9 fa5b 	bl	800f6f0 <lwip_htonl>
 801623a:	4603      	mov	r3, r0
 801623c:	2200      	movs	r2, #0
 801623e:	2100      	movs	r1, #0
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7fe fd43 	bl	8014ccc <tcp_output_alloc_header>
 8016246:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d102      	bne.n	8016254 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801624e:	f04f 33ff 	mov.w	r3, #4294967295
 8016252:	e021      	b.n	8016298 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	3304      	adds	r3, #4
 8016258:	4618      	mov	r0, r3
 801625a:	f001 fd8f 	bl	8017d7c <ip4_route>
 801625e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8016266:	23fc      	movs	r3, #252	; 0xfc
 8016268:	75fb      	strb	r3, [r7, #23]
 801626a:	e010      	b.n	801628e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801626c:	6879      	ldr	r1, [r7, #4]
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	1d1a      	adds	r2, r3, #4
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	7a98      	ldrb	r0, [r3, #10]
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	9302      	str	r3, [sp, #8]
 801627a:	2306      	movs	r3, #6
 801627c:	9301      	str	r3, [sp, #4]
 801627e:	2300      	movs	r3, #0
 8016280:	9300      	str	r3, [sp, #0]
 8016282:	4603      	mov	r3, r0
 8016284:	6938      	ldr	r0, [r7, #16]
 8016286:	f001 ff21 	bl	80180cc <ip4_output_if>
 801628a:	4603      	mov	r3, r0
 801628c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801628e:	6938      	ldr	r0, [r7, #16]
 8016290:	f7fa fc3a 	bl	8010b08 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016298:	4618      	mov	r0, r3
 801629a:	3718      	adds	r7, #24
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}

080162a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80162a0:	b590      	push	{r4, r7, lr}
 80162a2:	b08f      	sub	sp, #60	; 0x3c
 80162a4:	af04      	add	r7, sp, #16
 80162a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ac:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80162ae:	6a3b      	ldr	r3, [r7, #32]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d102      	bne.n	80162ba <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162b8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80162ba:	6a3b      	ldr	r3, [r7, #32]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d101      	bne.n	80162c4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80162c0:	2300      	movs	r3, #0
 80162c2:	e085      	b.n	80163d0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80162c4:	6a3b      	ldr	r3, [r7, #32]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	899b      	ldrh	r3, [r3, #12]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7f9 fa01 	bl	800f6d4 <lwip_htons>
 80162d2:	4603      	mov	r3, r0
 80162d4:	f003 0301 	and.w	r3, r3, #1
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d005      	beq.n	80162e8 <tcp_zero_window_probe+0x48>
 80162dc:	6a3b      	ldr	r3, [r7, #32]
 80162de:	891b      	ldrh	r3, [r3, #8]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d101      	bne.n	80162e8 <tcp_zero_window_probe+0x48>
 80162e4:	2301      	movs	r3, #1
 80162e6:	e000      	b.n	80162ea <tcp_zero_window_probe+0x4a>
 80162e8:	2300      	movs	r3, #0
 80162ea:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80162ec:	7ffb      	ldrb	r3, [r7, #31]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	bf0c      	ite	eq
 80162f2:	2301      	moveq	r3, #1
 80162f4:	2300      	movne	r3, #0
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80162fa:	6a3b      	ldr	r3, [r7, #32]
 80162fc:	68db      	ldr	r3, [r3, #12]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	8bba      	ldrh	r2, [r7, #28]
 8016302:	2100      	movs	r1, #0
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f7fe fce1 	bl	8014ccc <tcp_output_alloc_header>
 801630a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d102      	bne.n	8016318 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016312:	f04f 33ff 	mov.w	r3, #4294967295
 8016316:	e05b      	b.n	80163d0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016318:	69bb      	ldr	r3, [r7, #24]
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801631e:	7ffb      	ldrb	r3, [r7, #31]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d00e      	beq.n	8016342 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	899b      	ldrh	r3, [r3, #12]
 8016328:	b29b      	uxth	r3, r3
 801632a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801632e:	b29c      	uxth	r4, r3
 8016330:	2011      	movs	r0, #17
 8016332:	f7f9 f9cf 	bl	800f6d4 <lwip_htons>
 8016336:	4603      	mov	r3, r0
 8016338:	4323      	orrs	r3, r4
 801633a:	b29a      	uxth	r2, r3
 801633c:	697b      	ldr	r3, [r7, #20]
 801633e:	819a      	strh	r2, [r3, #12]
 8016340:	e010      	b.n	8016364 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	3314      	adds	r3, #20
 8016348:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801634a:	6a3b      	ldr	r3, [r7, #32]
 801634c:	6858      	ldr	r0, [r3, #4]
 801634e:	6a3b      	ldr	r3, [r7, #32]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	891a      	ldrh	r2, [r3, #8]
 8016354:	6a3b      	ldr	r3, [r7, #32]
 8016356:	891b      	ldrh	r3, [r3, #8]
 8016358:	1ad3      	subs	r3, r2, r3
 801635a:	b29b      	uxth	r3, r3
 801635c:	2201      	movs	r2, #1
 801635e:	6939      	ldr	r1, [r7, #16]
 8016360:	f7fa fdce 	bl	8010f00 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016364:	6a3b      	ldr	r3, [r7, #32]
 8016366:	68db      	ldr	r3, [r3, #12]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	4618      	mov	r0, r3
 801636c:	f7f9 f9c0 	bl	800f6f0 <lwip_htonl>
 8016370:	4603      	mov	r3, r0
 8016372:	3301      	adds	r3, #1
 8016374:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	1ad3      	subs	r3, r2, r3
 801637e:	2b00      	cmp	r3, #0
 8016380:	da02      	bge.n	8016388 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	68fa      	ldr	r2, [r7, #12]
 8016386:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	3304      	adds	r3, #4
 801638c:	4618      	mov	r0, r3
 801638e:	f001 fcf5 	bl	8017d7c <ip4_route>
 8016392:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d103      	bne.n	80163a2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801639a:	23fc      	movs	r3, #252	; 0xfc
 801639c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163a0:	e011      	b.n	80163c6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80163a2:	6879      	ldr	r1, [r7, #4]
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	1d1a      	adds	r2, r3, #4
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	7a98      	ldrb	r0, [r3, #10]
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	9302      	str	r3, [sp, #8]
 80163b0:	2306      	movs	r3, #6
 80163b2:	9301      	str	r3, [sp, #4]
 80163b4:	2300      	movs	r3, #0
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	4603      	mov	r3, r0
 80163ba:	69b8      	ldr	r0, [r7, #24]
 80163bc:	f001 fe86 	bl	80180cc <ip4_output_if>
 80163c0:	4603      	mov	r3, r0
 80163c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80163c6:	69b8      	ldr	r0, [r7, #24]
 80163c8:	f7fa fb9e 	bl	8010b08 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80163cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	372c      	adds	r7, #44	; 0x2c
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd90      	pop	{r4, r7, pc}

080163d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b082      	sub	sp, #8
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80163e0:	f7fa fe10 	bl	8011004 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80163e4:	4b0a      	ldr	r3, [pc, #40]	; (8016410 <tcpip_tcp_timer+0x38>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d103      	bne.n	80163f4 <tcpip_tcp_timer+0x1c>
 80163ec:	4b09      	ldr	r3, [pc, #36]	; (8016414 <tcpip_tcp_timer+0x3c>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d005      	beq.n	8016400 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80163f4:	2200      	movs	r2, #0
 80163f6:	4908      	ldr	r1, [pc, #32]	; (8016418 <tcpip_tcp_timer+0x40>)
 80163f8:	20fa      	movs	r0, #250	; 0xfa
 80163fa:	f000 f86f 	bl	80164dc <sys_timeout>
 80163fe:	e002      	b.n	8016406 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016400:	4b06      	ldr	r3, [pc, #24]	; (801641c <tcpip_tcp_timer+0x44>)
 8016402:	2200      	movs	r2, #0
 8016404:	601a      	str	r2, [r3, #0]
  }
}
 8016406:	bf00      	nop
 8016408:	3708      	adds	r7, #8
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	200101cc 	.word	0x200101cc
 8016414:	200101dc 	.word	0x200101dc
 8016418:	080163d9 	.word	0x080163d9
 801641c:	2000c840 	.word	0x2000c840

08016420 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016424:	4b0a      	ldr	r3, [pc, #40]	; (8016450 <tcp_timer_needed+0x30>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d10f      	bne.n	801644c <tcp_timer_needed+0x2c>
 801642c:	4b09      	ldr	r3, [pc, #36]	; (8016454 <tcp_timer_needed+0x34>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d103      	bne.n	801643c <tcp_timer_needed+0x1c>
 8016434:	4b08      	ldr	r3, [pc, #32]	; (8016458 <tcp_timer_needed+0x38>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d007      	beq.n	801644c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801643c:	4b04      	ldr	r3, [pc, #16]	; (8016450 <tcp_timer_needed+0x30>)
 801643e:	2201      	movs	r2, #1
 8016440:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016442:	2200      	movs	r2, #0
 8016444:	4905      	ldr	r1, [pc, #20]	; (801645c <tcp_timer_needed+0x3c>)
 8016446:	20fa      	movs	r0, #250	; 0xfa
 8016448:	f000 f848 	bl	80164dc <sys_timeout>
  }
}
 801644c:	bf00      	nop
 801644e:	bd80      	pop	{r7, pc}
 8016450:	2000c840 	.word	0x2000c840
 8016454:	200101cc 	.word	0x200101cc
 8016458:	200101dc 	.word	0x200101dc
 801645c:	080163d9 	.word	0x080163d9

08016460 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	685b      	ldr	r3, [r3, #4]
 8016470:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	687a      	ldr	r2, [r7, #4]
 8016478:	4903      	ldr	r1, [pc, #12]	; (8016488 <cyclic_timer+0x28>)
 801647a:	4618      	mov	r0, r3
 801647c:	f000 f82e 	bl	80164dc <sys_timeout>
}
 8016480:	bf00      	nop
 8016482:	3710      	adds	r7, #16
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}
 8016488:	08016461 	.word	0x08016461

0801648c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016492:	2301      	movs	r3, #1
 8016494:	607b      	str	r3, [r7, #4]
 8016496:	e00e      	b.n	80164b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8016498:	4a0d      	ldr	r2, [pc, #52]	; (80164d0 <sys_timeouts_init+0x44>)
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	00db      	lsls	r3, r3, #3
 80164a4:	4a0a      	ldr	r2, [pc, #40]	; (80164d0 <sys_timeouts_init+0x44>)
 80164a6:	4413      	add	r3, r2
 80164a8:	461a      	mov	r2, r3
 80164aa:	490a      	ldr	r1, [pc, #40]	; (80164d4 <sys_timeouts_init+0x48>)
 80164ac:	f000 f816 	bl	80164dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	3301      	adds	r3, #1
 80164b4:	607b      	str	r3, [r7, #4]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2b02      	cmp	r3, #2
 80164ba:	d9ed      	bls.n	8016498 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80164bc:	f7f3 ff46 	bl	800a34c <sys_now>
 80164c0:	4602      	mov	r2, r0
 80164c2:	4b05      	ldr	r3, [pc, #20]	; (80164d8 <sys_timeouts_init+0x4c>)
 80164c4:	601a      	str	r2, [r3, #0]
}
 80164c6:	bf00      	nop
 80164c8:	3708      	adds	r7, #8
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}
 80164ce:	bf00      	nop
 80164d0:	0801d138 	.word	0x0801d138
 80164d4:	08016461 	.word	0x08016461
 80164d8:	2000c83c 	.word	0x2000c83c

080164dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b088      	sub	sp, #32
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80164e8:	200a      	movs	r0, #10
 80164ea:	f7f9 fcff 	bl	800feec <memp_malloc>
 80164ee:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d10a      	bne.n	801650c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f040 8084 	bne.w	8016606 <sys_timeout+0x12a>
 80164fe:	4b44      	ldr	r3, [pc, #272]	; (8016610 <sys_timeout+0x134>)
 8016500:	22d4      	movs	r2, #212	; 0xd4
 8016502:	4944      	ldr	r1, [pc, #272]	; (8016614 <sys_timeout+0x138>)
 8016504:	4844      	ldr	r0, [pc, #272]	; (8016618 <sys_timeout+0x13c>)
 8016506:	f002 ffdb 	bl	80194c0 <iprintf>
    return;
 801650a:	e07c      	b.n	8016606 <sys_timeout+0x12a>
  }

  now = sys_now();
 801650c:	f7f3 ff1e 	bl	800a34c <sys_now>
 8016510:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016512:	4b42      	ldr	r3, [pc, #264]	; (801661c <sys_timeout+0x140>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d105      	bne.n	8016526 <sys_timeout+0x4a>
    diff = 0;
 801651a:	2300      	movs	r3, #0
 801651c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801651e:	4a40      	ldr	r2, [pc, #256]	; (8016620 <sys_timeout+0x144>)
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	6013      	str	r3, [r2, #0]
 8016524:	e004      	b.n	8016530 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8016526:	4b3e      	ldr	r3, [pc, #248]	; (8016620 <sys_timeout+0x144>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	693a      	ldr	r2, [r7, #16]
 801652c:	1ad3      	subs	r3, r2, r3
 801652e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016530:	697b      	ldr	r3, [r7, #20]
 8016532:	2200      	movs	r2, #0
 8016534:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	68ba      	ldr	r2, [r7, #8]
 801653a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8016542:	68fa      	ldr	r2, [r7, #12]
 8016544:	69bb      	ldr	r3, [r7, #24]
 8016546:	441a      	add	r2, r3
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801654c:	4b33      	ldr	r3, [pc, #204]	; (801661c <sys_timeout+0x140>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d103      	bne.n	801655c <sys_timeout+0x80>
    next_timeout = timeout;
 8016554:	4a31      	ldr	r2, [pc, #196]	; (801661c <sys_timeout+0x140>)
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	6013      	str	r3, [r2, #0]
    return;
 801655a:	e055      	b.n	8016608 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801655c:	4b2f      	ldr	r3, [pc, #188]	; (801661c <sys_timeout+0x140>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	68fa      	ldr	r2, [r7, #12]
 8016564:	429a      	cmp	r2, r3
 8016566:	d20f      	bcs.n	8016588 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8016568:	4b2c      	ldr	r3, [pc, #176]	; (801661c <sys_timeout+0x140>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	6859      	ldr	r1, [r3, #4]
 801656e:	4b2b      	ldr	r3, [pc, #172]	; (801661c <sys_timeout+0x140>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	68fa      	ldr	r2, [r7, #12]
 8016574:	1a8a      	subs	r2, r1, r2
 8016576:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8016578:	4b28      	ldr	r3, [pc, #160]	; (801661c <sys_timeout+0x140>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	697b      	ldr	r3, [r7, #20]
 801657e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016580:	4a26      	ldr	r2, [pc, #152]	; (801661c <sys_timeout+0x140>)
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	6013      	str	r3, [r2, #0]
 8016586:	e03f      	b.n	8016608 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016588:	4b24      	ldr	r3, [pc, #144]	; (801661c <sys_timeout+0x140>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	61fb      	str	r3, [r7, #28]
 801658e:	e036      	b.n	80165fe <sys_timeout+0x122>
      timeout->time -= t->time;
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	685a      	ldr	r2, [r3, #4]
 8016594:	69fb      	ldr	r3, [r7, #28]
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	1ad2      	subs	r2, r2, r3
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d006      	beq.n	80165b4 <sys_timeout+0xd8>
 80165a6:	69fb      	ldr	r3, [r7, #28]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	685a      	ldr	r2, [r3, #4]
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d921      	bls.n	80165f8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d009      	beq.n	80165d0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	6859      	ldr	r1, [r3, #4]
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	685a      	ldr	r2, [r3, #4]
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	1a8a      	subs	r2, r1, r2
 80165cc:	605a      	str	r2, [r3, #4]
 80165ce:	e00b      	b.n	80165e8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	68fa      	ldr	r2, [r7, #12]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d206      	bcs.n	80165e8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80165da:	4b10      	ldr	r3, [pc, #64]	; (801661c <sys_timeout+0x140>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	685a      	ldr	r2, [r3, #4]
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	441a      	add	r2, r3
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80165f0:	69fb      	ldr	r3, [r7, #28]
 80165f2:	697a      	ldr	r2, [r7, #20]
 80165f4:	601a      	str	r2, [r3, #0]
        break;
 80165f6:	e007      	b.n	8016608 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	61fb      	str	r3, [r7, #28]
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d1c5      	bne.n	8016590 <sys_timeout+0xb4>
 8016604:	e000      	b.n	8016608 <sys_timeout+0x12c>
    return;
 8016606:	bf00      	nop
      }
    }
  }
}
 8016608:	3720      	adds	r7, #32
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	0801c780 	.word	0x0801c780
 8016614:	0801c7d8 	.word	0x0801c7d8
 8016618:	0801c818 	.word	0x0801c818
 801661c:	2000c838 	.word	0x2000c838
 8016620:	2000c83c 	.word	0x2000c83c

08016624 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801662a:	4b24      	ldr	r3, [pc, #144]	; (80166bc <sys_check_timeouts+0x98>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d03f      	beq.n	80166b2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8016632:	f7f3 fe8b 	bl	800a34c <sys_now>
 8016636:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8016638:	4b21      	ldr	r3, [pc, #132]	; (80166c0 <sys_check_timeouts+0x9c>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	68fa      	ldr	r2, [r7, #12]
 801663e:	1ad3      	subs	r3, r2, r3
 8016640:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8016642:	2300      	movs	r3, #0
 8016644:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8016646:	4b1d      	ldr	r3, [pc, #116]	; (80166bc <sys_check_timeouts+0x98>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d02c      	beq.n	80166ac <sys_check_timeouts+0x88>
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	685b      	ldr	r3, [r3, #4]
 8016656:	697a      	ldr	r2, [r7, #20]
 8016658:	429a      	cmp	r2, r3
 801665a:	d327      	bcc.n	80166ac <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 801665c:	2301      	movs	r3, #1
 801665e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	685a      	ldr	r2, [r3, #4]
 8016664:	4b16      	ldr	r3, [pc, #88]	; (80166c0 <sys_check_timeouts+0x9c>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	4413      	add	r3, r2
 801666a:	4a15      	ldr	r2, [pc, #84]	; (80166c0 <sys_check_timeouts+0x9c>)
 801666c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801666e:	68bb      	ldr	r3, [r7, #8]
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	697a      	ldr	r2, [r7, #20]
 8016674:	1ad3      	subs	r3, r2, r3
 8016676:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	4a0f      	ldr	r2, [pc, #60]	; (80166bc <sys_check_timeouts+0x98>)
 801667e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8016680:	68bb      	ldr	r3, [r7, #8]
 8016682:	689b      	ldr	r3, [r3, #8]
 8016684:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	68db      	ldr	r3, [r3, #12]
 801668a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801668c:	68b9      	ldr	r1, [r7, #8]
 801668e:	200a      	movs	r0, #10
 8016690:	f7f9 fca2 	bl	800ffd8 <memp_free>
        if (handler != NULL) {
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d008      	beq.n	80166ac <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801669a:	480a      	ldr	r0, [pc, #40]	; (80166c4 <sys_check_timeouts+0xa0>)
 801669c:	f002 fe6a 	bl	8019374 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	6838      	ldr	r0, [r7, #0]
 80166a4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80166a6:	4807      	ldr	r0, [pc, #28]	; (80166c4 <sys_check_timeouts+0xa0>)
 80166a8:	f002 fe73 	bl	8019392 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80166ac:	7cfb      	ldrb	r3, [r7, #19]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d1c7      	bne.n	8016642 <sys_check_timeouts+0x1e>
  }
}
 80166b2:	bf00      	nop
 80166b4:	3718      	adds	r7, #24
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	2000c838 	.word	0x2000c838
 80166c0:	2000c83c 	.word	0x2000c83c
 80166c4:	2000d10c 	.word	0x2000d10c

080166c8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80166ce:	4b0f      	ldr	r3, [pc, #60]	; (801670c <sys_timeouts_sleeptime+0x44>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d102      	bne.n	80166dc <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80166d6:	f04f 33ff 	mov.w	r3, #4294967295
 80166da:	e013      	b.n	8016704 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80166dc:	f7f3 fe36 	bl	800a34c <sys_now>
 80166e0:	4602      	mov	r2, r0
 80166e2:	4b0b      	ldr	r3, [pc, #44]	; (8016710 <sys_timeouts_sleeptime+0x48>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	1ad3      	subs	r3, r2, r3
 80166e8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80166ea:	4b08      	ldr	r3, [pc, #32]	; (801670c <sys_timeouts_sleeptime+0x44>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d901      	bls.n	80166fa <sys_timeouts_sleeptime+0x32>
    return 0;
 80166f6:	2300      	movs	r3, #0
 80166f8:	e004      	b.n	8016704 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80166fa:	4b04      	ldr	r3, [pc, #16]	; (801670c <sys_timeouts_sleeptime+0x44>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	685a      	ldr	r2, [r3, #4]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	1ad3      	subs	r3, r2, r3
  }
}
 8016704:	4618      	mov	r0, r3
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	2000c838 	.word	0x2000c838
 8016710:	2000c83c 	.word	0x2000c83c

08016714 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801671e:	4b0f      	ldr	r3, [pc, #60]	; (801675c <sys_timeouts_mbox_fetch+0x48>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d105      	bne.n	8016732 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016726:	2200      	movs	r2, #0
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f002 fced 	bl	801910a <sys_arch_mbox_fetch>
    return;
 8016730:	e011      	b.n	8016756 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016732:	f7ff ffc9 	bl	80166c8 <sys_timeouts_sleeptime>
 8016736:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d008      	beq.n	8016750 <sys_timeouts_mbox_fetch+0x3c>
 801673e:	68fa      	ldr	r2, [r7, #12]
 8016740:	6839      	ldr	r1, [r7, #0]
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f002 fce1 	bl	801910a <sys_arch_mbox_fetch>
 8016748:	4603      	mov	r3, r0
 801674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801674e:	d102      	bne.n	8016756 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016750:	f7ff ff68 	bl	8016624 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016754:	e7e3      	b.n	801671e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8016756:	3710      	adds	r7, #16
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}
 801675c:	2000c838 	.word	0x2000c838

08016760 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016760:	b480      	push	{r7}
 8016762:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016764:	bf00      	nop
 8016766:	46bd      	mov	sp, r7
 8016768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676c:	4770      	bx	lr
	...

08016770 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016770:	b480      	push	{r7}
 8016772:	b083      	sub	sp, #12
 8016774:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016776:	2300      	movs	r3, #0
 8016778:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801677a:	4b17      	ldr	r3, [pc, #92]	; (80167d8 <udp_new_port+0x68>)
 801677c:	881b      	ldrh	r3, [r3, #0]
 801677e:	1c5a      	adds	r2, r3, #1
 8016780:	b291      	uxth	r1, r2
 8016782:	4a15      	ldr	r2, [pc, #84]	; (80167d8 <udp_new_port+0x68>)
 8016784:	8011      	strh	r1, [r2, #0]
 8016786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801678a:	4293      	cmp	r3, r2
 801678c:	d103      	bne.n	8016796 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801678e:	4b12      	ldr	r3, [pc, #72]	; (80167d8 <udp_new_port+0x68>)
 8016790:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016794:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016796:	4b11      	ldr	r3, [pc, #68]	; (80167dc <udp_new_port+0x6c>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	603b      	str	r3, [r7, #0]
 801679c:	e011      	b.n	80167c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	8a5a      	ldrh	r2, [r3, #18]
 80167a2:	4b0d      	ldr	r3, [pc, #52]	; (80167d8 <udp_new_port+0x68>)
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d108      	bne.n	80167bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80167aa:	88fb      	ldrh	r3, [r7, #6]
 80167ac:	3301      	adds	r3, #1
 80167ae:	80fb      	strh	r3, [r7, #6]
 80167b0:	88fb      	ldrh	r3, [r7, #6]
 80167b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80167b6:	d3e0      	bcc.n	801677a <udp_new_port+0xa>
        return 0;
 80167b8:	2300      	movs	r3, #0
 80167ba:	e007      	b.n	80167cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	603b      	str	r3, [r7, #0]
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d1ea      	bne.n	801679e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80167c8:	4b03      	ldr	r3, [pc, #12]	; (80167d8 <udp_new_port+0x68>)
 80167ca:	881b      	ldrh	r3, [r3, #0]
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	370c      	adds	r7, #12
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr
 80167d8:	20000030 	.word	0x20000030
 80167dc:	200101e4 	.word	0x200101e4

080167e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b085      	sub	sp, #20
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	4613      	mov	r3, r2
 80167ec:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80167ee:	79fb      	ldrb	r3, [r7, #7]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d018      	beq.n	8016826 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d013      	beq.n	8016822 <udp_input_local_match+0x42>
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d00f      	beq.n	8016822 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016802:	4b14      	ldr	r3, [pc, #80]	; (8016854 <udp_input_local_match+0x74>)
 8016804:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801680a:	d00a      	beq.n	8016822 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	681a      	ldr	r2, [r3, #0]
 8016810:	4b10      	ldr	r3, [pc, #64]	; (8016854 <udp_input_local_match+0x74>)
 8016812:	695b      	ldr	r3, [r3, #20]
 8016814:	405a      	eors	r2, r3
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	3308      	adds	r3, #8
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801681e:	2b00      	cmp	r3, #0
 8016820:	d110      	bne.n	8016844 <udp_input_local_match+0x64>
          return 1;
 8016822:	2301      	movs	r3, #1
 8016824:	e00f      	b.n	8016846 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d009      	beq.n	8016840 <udp_input_local_match+0x60>
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d005      	beq.n	8016840 <udp_input_local_match+0x60>
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	4b06      	ldr	r3, [pc, #24]	; (8016854 <udp_input_local_match+0x74>)
 801683a:	695b      	ldr	r3, [r3, #20]
 801683c:	429a      	cmp	r2, r3
 801683e:	d101      	bne.n	8016844 <udp_input_local_match+0x64>
      return 1;
 8016840:	2301      	movs	r3, #1
 8016842:	e000      	b.n	8016846 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016844:	2300      	movs	r3, #0
}
 8016846:	4618      	mov	r0, r3
 8016848:	3714      	adds	r7, #20
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	2000d110 	.word	0x2000d110

08016858 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016858:	b590      	push	{r4, r7, lr}
 801685a:	b08d      	sub	sp, #52	; 0x34
 801685c:	af02      	add	r7, sp, #8
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016862:	2300      	movs	r3, #0
 8016864:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	895b      	ldrh	r3, [r3, #10]
 801686a:	2b07      	cmp	r3, #7
 801686c:	d803      	bhi.n	8016876 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f7fa f94a 	bl	8010b08 <pbuf_free>
    goto end;
 8016874:	e0c6      	b.n	8016a04 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801687c:	4b63      	ldr	r3, [pc, #396]	; (8016a0c <udp_input+0x1b4>)
 801687e:	695a      	ldr	r2, [r3, #20]
 8016880:	4b62      	ldr	r3, [pc, #392]	; (8016a0c <udp_input+0x1b4>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	4619      	mov	r1, r3
 8016886:	4610      	mov	r0, r2
 8016888:	f001 fcf2 	bl	8018270 <ip4_addr_isbroadcast_u32>
 801688c:	4603      	mov	r3, r0
 801688e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016890:	697b      	ldr	r3, [r7, #20]
 8016892:	881b      	ldrh	r3, [r3, #0]
 8016894:	b29b      	uxth	r3, r3
 8016896:	4618      	mov	r0, r3
 8016898:	f7f8 ff1c 	bl	800f6d4 <lwip_htons>
 801689c:	4603      	mov	r3, r0
 801689e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	885b      	ldrh	r3, [r3, #2]
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	4618      	mov	r0, r3
 80168a8:	f7f8 ff14 	bl	800f6d4 <lwip_htons>
 80168ac:	4603      	mov	r3, r0
 80168ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80168b0:	2300      	movs	r3, #0
 80168b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80168b4:	2300      	movs	r3, #0
 80168b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80168b8:	2300      	movs	r3, #0
 80168ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168bc:	4b54      	ldr	r3, [pc, #336]	; (8016a10 <udp_input+0x1b8>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	627b      	str	r3, [r7, #36]	; 0x24
 80168c2:	e03b      	b.n	801693c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80168c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c6:	8a5b      	ldrh	r3, [r3, #18]
 80168c8:	89fa      	ldrh	r2, [r7, #14]
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d131      	bne.n	8016932 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80168ce:	7cfb      	ldrb	r3, [r7, #19]
 80168d0:	461a      	mov	r2, r3
 80168d2:	6839      	ldr	r1, [r7, #0]
 80168d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168d6:	f7ff ff83 	bl	80167e0 <udp_input_local_match>
 80168da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d028      	beq.n	8016932 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80168e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e2:	7c1b      	ldrb	r3, [r3, #16]
 80168e4:	f003 0304 	and.w	r3, r3, #4
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d104      	bne.n	80168f6 <udp_input+0x9e>
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d101      	bne.n	80168f6 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80168f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f4:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80168f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f8:	8a9b      	ldrh	r3, [r3, #20]
 80168fa:	8a3a      	ldrh	r2, [r7, #16]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d118      	bne.n	8016932 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016902:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016904:	2b00      	cmp	r3, #0
 8016906:	d005      	beq.n	8016914 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	4b3f      	ldr	r3, [pc, #252]	; (8016a0c <udp_input+0x1b4>)
 801690e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016910:	429a      	cmp	r2, r3
 8016912:	d10e      	bne.n	8016932 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016914:	6a3b      	ldr	r3, [r7, #32]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d014      	beq.n	8016944 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691c:	68da      	ldr	r2, [r3, #12]
 801691e:	6a3b      	ldr	r3, [r7, #32]
 8016920:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016922:	4b3b      	ldr	r3, [pc, #236]	; (8016a10 <udp_input+0x1b8>)
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016928:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801692a:	4a39      	ldr	r2, [pc, #228]	; (8016a10 <udp_input+0x1b8>)
 801692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016930:	e008      	b.n	8016944 <udp_input+0xec>
      }
    }

    prev = pcb;
 8016932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016934:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016938:	68db      	ldr	r3, [r3, #12]
 801693a:	627b      	str	r3, [r7, #36]	; 0x24
 801693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693e:	2b00      	cmp	r3, #0
 8016940:	d1c0      	bne.n	80168c4 <udp_input+0x6c>
 8016942:	e000      	b.n	8016946 <udp_input+0xee>
        break;
 8016944:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016948:	2b00      	cmp	r3, #0
 801694a:	d101      	bne.n	8016950 <udp_input+0xf8>
    pcb = uncon_pcb;
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016952:	2b00      	cmp	r3, #0
 8016954:	d002      	beq.n	801695c <udp_input+0x104>
    for_us = 1;
 8016956:	2301      	movs	r3, #1
 8016958:	76fb      	strb	r3, [r7, #27]
 801695a:	e00a      	b.n	8016972 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	3304      	adds	r3, #4
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	4b2a      	ldr	r3, [pc, #168]	; (8016a0c <udp_input+0x1b4>)
 8016964:	695b      	ldr	r3, [r3, #20]
 8016966:	429a      	cmp	r2, r3
 8016968:	bf0c      	ite	eq
 801696a:	2301      	moveq	r3, #1
 801696c:	2300      	movne	r3, #0
 801696e:	b2db      	uxtb	r3, r3
 8016970:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016972:	7efb      	ldrb	r3, [r7, #27]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d042      	beq.n	80169fe <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8016978:	f06f 0107 	mvn.w	r1, #7
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f7fa f89f 	bl	8010ac0 <pbuf_header>
 8016982:	4603      	mov	r3, r0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d00a      	beq.n	801699e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8016988:	4b22      	ldr	r3, [pc, #136]	; (8016a14 <udp_input+0x1bc>)
 801698a:	f240 1255 	movw	r2, #341	; 0x155
 801698e:	4922      	ldr	r1, [pc, #136]	; (8016a18 <udp_input+0x1c0>)
 8016990:	4822      	ldr	r0, [pc, #136]	; (8016a1c <udp_input+0x1c4>)
 8016992:	f002 fd95 	bl	80194c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	f7fa f8b6 	bl	8010b08 <pbuf_free>
      goto end;
 801699c:	e032      	b.n	8016a04 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d012      	beq.n	80169ca <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80169a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a6:	699b      	ldr	r3, [r3, #24]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d00a      	beq.n	80169c2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80169ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ae:	699c      	ldr	r4, [r3, #24]
 80169b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b2:	69d8      	ldr	r0, [r3, #28]
 80169b4:	8a3b      	ldrh	r3, [r7, #16]
 80169b6:	9300      	str	r3, [sp, #0]
 80169b8:	4b19      	ldr	r3, [pc, #100]	; (8016a20 <udp_input+0x1c8>)
 80169ba:	687a      	ldr	r2, [r7, #4]
 80169bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80169c0:	e021      	b.n	8016a06 <udp_input+0x1ae>
        pbuf_free(p);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f7fa f8a0 	bl	8010b08 <pbuf_free>
        goto end;
 80169c8:	e01c      	b.n	8016a04 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80169ca:	7cfb      	ldrb	r3, [r7, #19]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d112      	bne.n	80169f6 <udp_input+0x19e>
 80169d0:	4b0e      	ldr	r3, [pc, #56]	; (8016a0c <udp_input+0x1b4>)
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169d8:	2be0      	cmp	r3, #224	; 0xe0
 80169da:	d00c      	beq.n	80169f6 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80169dc:	4b0b      	ldr	r3, [pc, #44]	; (8016a0c <udp_input+0x1b4>)
 80169de:	899b      	ldrh	r3, [r3, #12]
 80169e0:	3308      	adds	r3, #8
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	b21b      	sxth	r3, r3
 80169e6:	4619      	mov	r1, r3
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f7fa f87b 	bl	8010ae4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80169ee:	2103      	movs	r1, #3
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	f001 f93b 	bl	8017c6c <icmp_dest_unreach>
      pbuf_free(p);
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	f7fa f886 	bl	8010b08 <pbuf_free>
  return;
 80169fc:	e003      	b.n	8016a06 <udp_input+0x1ae>
    pbuf_free(p);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f7fa f882 	bl	8010b08 <pbuf_free>
  return;
 8016a04:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016a06:	372c      	adds	r7, #44	; 0x2c
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd90      	pop	{r4, r7, pc}
 8016a0c:	2000d110 	.word	0x2000d110
 8016a10:	200101e4 	.word	0x200101e4
 8016a14:	0801c840 	.word	0x0801c840
 8016a18:	0801c894 	.word	0x0801c894
 8016a1c:	0801c8a8 	.word	0x0801c8a8
 8016a20:	2000d120 	.word	0x2000d120

08016a24 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b086      	sub	sp, #24
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	4613      	mov	r3, r2
 8016a30:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d101      	bne.n	8016a3c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016a38:	4b30      	ldr	r3, [pc, #192]	; (8016afc <udp_bind+0xd8>)
 8016a3a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d002      	beq.n	8016a48 <udp_bind+0x24>
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d102      	bne.n	8016a4e <udp_bind+0x2a>
    return ERR_VAL;
 8016a48:	f06f 0305 	mvn.w	r3, #5
 8016a4c:	e052      	b.n	8016af4 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a52:	4b2b      	ldr	r3, [pc, #172]	; (8016b00 <udp_bind+0xdc>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	617b      	str	r3, [r7, #20]
 8016a58:	e009      	b.n	8016a6e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016a5a:	68fa      	ldr	r2, [r7, #12]
 8016a5c:	697b      	ldr	r3, [r7, #20]
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d102      	bne.n	8016a68 <udp_bind+0x44>
      rebind = 1;
 8016a62:	2301      	movs	r3, #1
 8016a64:	74fb      	strb	r3, [r7, #19]
      break;
 8016a66:	e005      	b.n	8016a74 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a68:	697b      	ldr	r3, [r7, #20]
 8016a6a:	68db      	ldr	r3, [r3, #12]
 8016a6c:	617b      	str	r3, [r7, #20]
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d1f2      	bne.n	8016a5a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8016a74:	88fb      	ldrh	r3, [r7, #6]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d109      	bne.n	8016a8e <udp_bind+0x6a>
    port = udp_new_port();
 8016a7a:	f7ff fe79 	bl	8016770 <udp_new_port>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016a82:	88fb      	ldrh	r3, [r7, #6]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d11e      	bne.n	8016ac6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016a88:	f06f 0307 	mvn.w	r3, #7
 8016a8c:	e032      	b.n	8016af4 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a8e:	4b1c      	ldr	r3, [pc, #112]	; (8016b00 <udp_bind+0xdc>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	617b      	str	r3, [r7, #20]
 8016a94:	e014      	b.n	8016ac0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8016a96:	68fa      	ldr	r2, [r7, #12]
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d00d      	beq.n	8016aba <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	8a5b      	ldrh	r3, [r3, #18]
 8016aa2:	88fa      	ldrh	r2, [r7, #6]
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d108      	bne.n	8016aba <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	681a      	ldr	r2, [r3, #0]
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d102      	bne.n	8016aba <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016ab4:	f06f 0307 	mvn.w	r3, #7
 8016ab8:	e01c      	b.n	8016af4 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	617b      	str	r3, [r7, #20]
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d1e7      	bne.n	8016a96 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d002      	beq.n	8016ad2 <udp_bind+0xae>
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	e000      	b.n	8016ad4 <udp_bind+0xb0>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	68fa      	ldr	r2, [r7, #12]
 8016ad6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	88fa      	ldrh	r2, [r7, #6]
 8016adc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016ade:	7cfb      	ldrb	r3, [r7, #19]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d106      	bne.n	8016af2 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016ae4:	4b06      	ldr	r3, [pc, #24]	; (8016b00 <udp_bind+0xdc>)
 8016ae6:	681a      	ldr	r2, [r3, #0]
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016aec:	4a04      	ldr	r2, [pc, #16]	; (8016b00 <udp_bind+0xdc>)
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016af2:	2300      	movs	r3, #0
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	3718      	adds	r7, #24
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	0801d150 	.word	0x0801d150
 8016b00:	200101e4 	.word	0x200101e4

08016b04 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016b04:	b480      	push	{r7}
 8016b06:	b085      	sub	sp, #20
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	68ba      	ldr	r2, [r7, #8]
 8016b14:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	687a      	ldr	r2, [r7, #4]
 8016b1a:	61da      	str	r2, [r3, #28]
}
 8016b1c:	bf00      	nop
 8016b1e:	3714      	adds	r7, #20
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016b30:	4b15      	ldr	r3, [pc, #84]	; (8016b88 <udp_remove+0x60>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	687a      	ldr	r2, [r7, #4]
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d105      	bne.n	8016b46 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016b3a:	4b13      	ldr	r3, [pc, #76]	; (8016b88 <udp_remove+0x60>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	68db      	ldr	r3, [r3, #12]
 8016b40:	4a11      	ldr	r2, [pc, #68]	; (8016b88 <udp_remove+0x60>)
 8016b42:	6013      	str	r3, [r2, #0]
 8016b44:	e017      	b.n	8016b76 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b46:	4b10      	ldr	r3, [pc, #64]	; (8016b88 <udp_remove+0x60>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	60fb      	str	r3, [r7, #12]
 8016b4c:	e010      	b.n	8016b70 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	68db      	ldr	r3, [r3, #12]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d009      	beq.n	8016b6a <udp_remove+0x42>
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	68db      	ldr	r3, [r3, #12]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d104      	bne.n	8016b6a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	68da      	ldr	r2, [r3, #12]
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	60da      	str	r2, [r3, #12]
        break;
 8016b68:	e005      	b.n	8016b76 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	68db      	ldr	r3, [r3, #12]
 8016b6e:	60fb      	str	r3, [r7, #12]
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d1eb      	bne.n	8016b4e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016b76:	6879      	ldr	r1, [r7, #4]
 8016b78:	2000      	movs	r0, #0
 8016b7a:	f7f9 fa2d 	bl	800ffd8 <memp_free>
}
 8016b7e:	bf00      	nop
 8016b80:	3710      	adds	r7, #16
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	200101e4 	.word	0x200101e4

08016b8c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016b92:	2000      	movs	r0, #0
 8016b94:	f7f9 f9aa 	bl	800feec <memp_malloc>
 8016b98:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d007      	beq.n	8016bb0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016ba0:	2220      	movs	r2, #32
 8016ba2:	2100      	movs	r1, #0
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f002 fc83 	bl	80194b0 <memset>
    pcb->ttl = UDP_TTL;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	22ff      	movs	r2, #255	; 0xff
 8016bae:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016bb0:	687b      	ldr	r3, [r7, #4]
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3708      	adds	r7, #8
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}

08016bba <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016bba:	b580      	push	{r7, lr}
 8016bbc:	b084      	sub	sp, #16
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8016bc4:	f7ff ffe2 	bl	8016b8c <udp_new>
 8016bc8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016bca:	68fb      	ldr	r3, [r7, #12]
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3710      	adds	r7, #16
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	b085      	sub	sp, #20
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d01e      	beq.n	8016c22 <udp_netif_ip_addr_changed+0x4e>
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d01a      	beq.n	8016c22 <udp_netif_ip_addr_changed+0x4e>
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d017      	beq.n	8016c22 <udp_netif_ip_addr_changed+0x4e>
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d013      	beq.n	8016c22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016bfa:	4b0d      	ldr	r3, [pc, #52]	; (8016c30 <udp_netif_ip_addr_changed+0x5c>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	60fb      	str	r3, [r7, #12]
 8016c00:	e00c      	b.n	8016c1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	681a      	ldr	r2, [r3, #0]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d103      	bne.n	8016c16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	681a      	ldr	r2, [r3, #0]
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	60fb      	str	r3, [r7, #12]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d1ef      	bne.n	8016c02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016c22:	bf00      	nop
 8016c24:	3714      	adds	r7, #20
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr
 8016c2e:	bf00      	nop
 8016c30:	200101e4 	.word	0x200101e4

08016c34 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016c3c:	4915      	ldr	r1, [pc, #84]	; (8016c94 <etharp_free_entry+0x60>)
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	4613      	mov	r3, r2
 8016c42:	005b      	lsls	r3, r3, #1
 8016c44:	4413      	add	r3, r2
 8016c46:	00db      	lsls	r3, r3, #3
 8016c48:	440b      	add	r3, r1
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d013      	beq.n	8016c78 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016c50:	4910      	ldr	r1, [pc, #64]	; (8016c94 <etharp_free_entry+0x60>)
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	4613      	mov	r3, r2
 8016c56:	005b      	lsls	r3, r3, #1
 8016c58:	4413      	add	r3, r2
 8016c5a:	00db      	lsls	r3, r3, #3
 8016c5c:	440b      	add	r3, r1
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7f9 ff51 	bl	8010b08 <pbuf_free>
    arp_table[i].q = NULL;
 8016c66:	490b      	ldr	r1, [pc, #44]	; (8016c94 <etharp_free_entry+0x60>)
 8016c68:	687a      	ldr	r2, [r7, #4]
 8016c6a:	4613      	mov	r3, r2
 8016c6c:	005b      	lsls	r3, r3, #1
 8016c6e:	4413      	add	r3, r2
 8016c70:	00db      	lsls	r3, r3, #3
 8016c72:	440b      	add	r3, r1
 8016c74:	2200      	movs	r2, #0
 8016c76:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016c78:	4906      	ldr	r1, [pc, #24]	; (8016c94 <etharp_free_entry+0x60>)
 8016c7a:	687a      	ldr	r2, [r7, #4]
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	00db      	lsls	r3, r3, #3
 8016c84:	440b      	add	r3, r1
 8016c86:	3314      	adds	r3, #20
 8016c88:	2200      	movs	r2, #0
 8016c8a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016c8c:	bf00      	nop
 8016c8e:	3708      	adds	r7, #8
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}
 8016c94:	2000c844 	.word	0x2000c844

08016c98 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	71fb      	strb	r3, [r7, #7]
 8016ca2:	e096      	b.n	8016dd2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016ca4:	79fa      	ldrb	r2, [r7, #7]
 8016ca6:	494f      	ldr	r1, [pc, #316]	; (8016de4 <etharp_tmr+0x14c>)
 8016ca8:	4613      	mov	r3, r2
 8016caa:	005b      	lsls	r3, r3, #1
 8016cac:	4413      	add	r3, r2
 8016cae:	00db      	lsls	r3, r3, #3
 8016cb0:	440b      	add	r3, r1
 8016cb2:	3314      	adds	r3, #20
 8016cb4:	781b      	ldrb	r3, [r3, #0]
 8016cb6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8016cb8:	79bb      	ldrb	r3, [r7, #6]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	f000 8086 	beq.w	8016dcc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8016cc0:	79fa      	ldrb	r2, [r7, #7]
 8016cc2:	4948      	ldr	r1, [pc, #288]	; (8016de4 <etharp_tmr+0x14c>)
 8016cc4:	4613      	mov	r3, r2
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	4413      	add	r3, r2
 8016cca:	00db      	lsls	r3, r3, #3
 8016ccc:	440b      	add	r3, r1
 8016cce:	3312      	adds	r3, #18
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	b298      	uxth	r0, r3
 8016cd6:	4943      	ldr	r1, [pc, #268]	; (8016de4 <etharp_tmr+0x14c>)
 8016cd8:	4613      	mov	r3, r2
 8016cda:	005b      	lsls	r3, r3, #1
 8016cdc:	4413      	add	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	440b      	add	r3, r1
 8016ce2:	3312      	adds	r3, #18
 8016ce4:	4602      	mov	r2, r0
 8016ce6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ce8:	79fa      	ldrb	r2, [r7, #7]
 8016cea:	493e      	ldr	r1, [pc, #248]	; (8016de4 <etharp_tmr+0x14c>)
 8016cec:	4613      	mov	r3, r2
 8016cee:	005b      	lsls	r3, r3, #1
 8016cf0:	4413      	add	r3, r2
 8016cf2:	00db      	lsls	r3, r3, #3
 8016cf4:	440b      	add	r3, r1
 8016cf6:	3312      	adds	r3, #18
 8016cf8:	881b      	ldrh	r3, [r3, #0]
 8016cfa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016cfe:	d215      	bcs.n	8016d2c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016d00:	79fa      	ldrb	r2, [r7, #7]
 8016d02:	4938      	ldr	r1, [pc, #224]	; (8016de4 <etharp_tmr+0x14c>)
 8016d04:	4613      	mov	r3, r2
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	4413      	add	r3, r2
 8016d0a:	00db      	lsls	r3, r3, #3
 8016d0c:	440b      	add	r3, r1
 8016d0e:	3314      	adds	r3, #20
 8016d10:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016d12:	2b01      	cmp	r3, #1
 8016d14:	d10f      	bne.n	8016d36 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016d16:	79fa      	ldrb	r2, [r7, #7]
 8016d18:	4932      	ldr	r1, [pc, #200]	; (8016de4 <etharp_tmr+0x14c>)
 8016d1a:	4613      	mov	r3, r2
 8016d1c:	005b      	lsls	r3, r3, #1
 8016d1e:	4413      	add	r3, r2
 8016d20:	00db      	lsls	r3, r3, #3
 8016d22:	440b      	add	r3, r1
 8016d24:	3312      	adds	r3, #18
 8016d26:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016d28:	2b04      	cmp	r3, #4
 8016d2a:	d904      	bls.n	8016d36 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016d2c:	79fb      	ldrb	r3, [r7, #7]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7ff ff80 	bl	8016c34 <etharp_free_entry>
 8016d34:	e04a      	b.n	8016dcc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016d36:	79fa      	ldrb	r2, [r7, #7]
 8016d38:	492a      	ldr	r1, [pc, #168]	; (8016de4 <etharp_tmr+0x14c>)
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	005b      	lsls	r3, r3, #1
 8016d3e:	4413      	add	r3, r2
 8016d40:	00db      	lsls	r3, r3, #3
 8016d42:	440b      	add	r3, r1
 8016d44:	3314      	adds	r3, #20
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	2b03      	cmp	r3, #3
 8016d4a:	d10a      	bne.n	8016d62 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016d4c:	79fa      	ldrb	r2, [r7, #7]
 8016d4e:	4925      	ldr	r1, [pc, #148]	; (8016de4 <etharp_tmr+0x14c>)
 8016d50:	4613      	mov	r3, r2
 8016d52:	005b      	lsls	r3, r3, #1
 8016d54:	4413      	add	r3, r2
 8016d56:	00db      	lsls	r3, r3, #3
 8016d58:	440b      	add	r3, r1
 8016d5a:	3314      	adds	r3, #20
 8016d5c:	2204      	movs	r2, #4
 8016d5e:	701a      	strb	r2, [r3, #0]
 8016d60:	e034      	b.n	8016dcc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016d62:	79fa      	ldrb	r2, [r7, #7]
 8016d64:	491f      	ldr	r1, [pc, #124]	; (8016de4 <etharp_tmr+0x14c>)
 8016d66:	4613      	mov	r3, r2
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4413      	add	r3, r2
 8016d6c:	00db      	lsls	r3, r3, #3
 8016d6e:	440b      	add	r3, r1
 8016d70:	3314      	adds	r3, #20
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	2b04      	cmp	r3, #4
 8016d76:	d10a      	bne.n	8016d8e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016d78:	79fa      	ldrb	r2, [r7, #7]
 8016d7a:	491a      	ldr	r1, [pc, #104]	; (8016de4 <etharp_tmr+0x14c>)
 8016d7c:	4613      	mov	r3, r2
 8016d7e:	005b      	lsls	r3, r3, #1
 8016d80:	4413      	add	r3, r2
 8016d82:	00db      	lsls	r3, r3, #3
 8016d84:	440b      	add	r3, r1
 8016d86:	3314      	adds	r3, #20
 8016d88:	2202      	movs	r2, #2
 8016d8a:	701a      	strb	r2, [r3, #0]
 8016d8c:	e01e      	b.n	8016dcc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d8e:	79fa      	ldrb	r2, [r7, #7]
 8016d90:	4914      	ldr	r1, [pc, #80]	; (8016de4 <etharp_tmr+0x14c>)
 8016d92:	4613      	mov	r3, r2
 8016d94:	005b      	lsls	r3, r3, #1
 8016d96:	4413      	add	r3, r2
 8016d98:	00db      	lsls	r3, r3, #3
 8016d9a:	440b      	add	r3, r1
 8016d9c:	3314      	adds	r3, #20
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d113      	bne.n	8016dcc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016da4:	79fa      	ldrb	r2, [r7, #7]
 8016da6:	490f      	ldr	r1, [pc, #60]	; (8016de4 <etharp_tmr+0x14c>)
 8016da8:	4613      	mov	r3, r2
 8016daa:	005b      	lsls	r3, r3, #1
 8016dac:	4413      	add	r3, r2
 8016dae:	00db      	lsls	r3, r3, #3
 8016db0:	440b      	add	r3, r1
 8016db2:	3308      	adds	r3, #8
 8016db4:	6818      	ldr	r0, [r3, #0]
 8016db6:	79fa      	ldrb	r2, [r7, #7]
 8016db8:	4613      	mov	r3, r2
 8016dba:	005b      	lsls	r3, r3, #1
 8016dbc:	4413      	add	r3, r2
 8016dbe:	00db      	lsls	r3, r3, #3
 8016dc0:	4a08      	ldr	r2, [pc, #32]	; (8016de4 <etharp_tmr+0x14c>)
 8016dc2:	4413      	add	r3, r2
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	f000 fe38 	bl	8017a3c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016dcc:	79fb      	ldrb	r3, [r7, #7]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	71fb      	strb	r3, [r7, #7]
 8016dd2:	79fb      	ldrb	r3, [r7, #7]
 8016dd4:	2b09      	cmp	r3, #9
 8016dd6:	f67f af65 	bls.w	8016ca4 <etharp_tmr+0xc>
      }
    }
  }
}
 8016dda:	bf00      	nop
 8016ddc:	3708      	adds	r7, #8
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}
 8016de2:	bf00      	nop
 8016de4:	2000c844 	.word	0x2000c844

08016de8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b088      	sub	sp, #32
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	460b      	mov	r3, r1
 8016df2:	607a      	str	r2, [r7, #4]
 8016df4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016df6:	230a      	movs	r3, #10
 8016df8:	77fb      	strb	r3, [r7, #31]
 8016dfa:	230a      	movs	r3, #10
 8016dfc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8016dfe:	230a      	movs	r3, #10
 8016e00:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8016e02:	2300      	movs	r3, #0
 8016e04:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8016e06:	230a      	movs	r3, #10
 8016e08:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	833b      	strh	r3, [r7, #24]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	82fb      	strh	r3, [r7, #22]
 8016e12:	2300      	movs	r3, #0
 8016e14:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e16:	2300      	movs	r3, #0
 8016e18:	773b      	strb	r3, [r7, #28]
 8016e1a:	e093      	b.n	8016f44 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8016e1c:	7f3a      	ldrb	r2, [r7, #28]
 8016e1e:	4990      	ldr	r1, [pc, #576]	; (8017060 <etharp_find_entry+0x278>)
 8016e20:	4613      	mov	r3, r2
 8016e22:	005b      	lsls	r3, r3, #1
 8016e24:	4413      	add	r3, r2
 8016e26:	00db      	lsls	r3, r3, #3
 8016e28:	440b      	add	r3, r1
 8016e2a:	3314      	adds	r3, #20
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016e30:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016e34:	2b0a      	cmp	r3, #10
 8016e36:	d105      	bne.n	8016e44 <etharp_find_entry+0x5c>
 8016e38:	7cfb      	ldrb	r3, [r7, #19]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d102      	bne.n	8016e44 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8016e3e:	7f3b      	ldrb	r3, [r7, #28]
 8016e40:	777b      	strb	r3, [r7, #29]
 8016e42:	e07c      	b.n	8016f3e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016e44:	7cfb      	ldrb	r3, [r7, #19]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d079      	beq.n	8016f3e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016e4a:	7cfb      	ldrb	r3, [r7, #19]
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	d009      	beq.n	8016e64 <etharp_find_entry+0x7c>
 8016e50:	7cfb      	ldrb	r3, [r7, #19]
 8016e52:	2b01      	cmp	r3, #1
 8016e54:	d806      	bhi.n	8016e64 <etharp_find_entry+0x7c>
 8016e56:	4b83      	ldr	r3, [pc, #524]	; (8017064 <etharp_find_entry+0x27c>)
 8016e58:	f44f 7293 	mov.w	r2, #294	; 0x126
 8016e5c:	4982      	ldr	r1, [pc, #520]	; (8017068 <etharp_find_entry+0x280>)
 8016e5e:	4883      	ldr	r0, [pc, #524]	; (801706c <etharp_find_entry+0x284>)
 8016e60:	f002 fb2e 	bl	80194c0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00f      	beq.n	8016e8a <etharp_find_entry+0xa2>
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	6819      	ldr	r1, [r3, #0]
 8016e6e:	7f3a      	ldrb	r2, [r7, #28]
 8016e70:	487b      	ldr	r0, [pc, #492]	; (8017060 <etharp_find_entry+0x278>)
 8016e72:	4613      	mov	r3, r2
 8016e74:	005b      	lsls	r3, r3, #1
 8016e76:	4413      	add	r3, r2
 8016e78:	00db      	lsls	r3, r3, #3
 8016e7a:	4403      	add	r3, r0
 8016e7c:	3304      	adds	r3, #4
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	4299      	cmp	r1, r3
 8016e82:	d102      	bne.n	8016e8a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016e84:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8016e88:	e0e5      	b.n	8017056 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016e8a:	7cfb      	ldrb	r3, [r7, #19]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d13b      	bne.n	8016f08 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016e90:	7f3a      	ldrb	r2, [r7, #28]
 8016e92:	4973      	ldr	r1, [pc, #460]	; (8017060 <etharp_find_entry+0x278>)
 8016e94:	4613      	mov	r3, r2
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	4413      	add	r3, r2
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	440b      	add	r3, r1
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d018      	beq.n	8016ed6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8016ea4:	7f3a      	ldrb	r2, [r7, #28]
 8016ea6:	496e      	ldr	r1, [pc, #440]	; (8017060 <etharp_find_entry+0x278>)
 8016ea8:	4613      	mov	r3, r2
 8016eaa:	005b      	lsls	r3, r3, #1
 8016eac:	4413      	add	r3, r2
 8016eae:	00db      	lsls	r3, r3, #3
 8016eb0:	440b      	add	r3, r1
 8016eb2:	3312      	adds	r3, #18
 8016eb4:	881b      	ldrh	r3, [r3, #0]
 8016eb6:	8b3a      	ldrh	r2, [r7, #24]
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	d840      	bhi.n	8016f3e <etharp_find_entry+0x156>
            old_queue = i;
 8016ebc:	7f3b      	ldrb	r3, [r7, #28]
 8016ebe:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8016ec0:	7f3a      	ldrb	r2, [r7, #28]
 8016ec2:	4967      	ldr	r1, [pc, #412]	; (8017060 <etharp_find_entry+0x278>)
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	4413      	add	r3, r2
 8016eca:	00db      	lsls	r3, r3, #3
 8016ecc:	440b      	add	r3, r1
 8016ece:	3312      	adds	r3, #18
 8016ed0:	881b      	ldrh	r3, [r3, #0]
 8016ed2:	833b      	strh	r3, [r7, #24]
 8016ed4:	e033      	b.n	8016f3e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016ed6:	7f3a      	ldrb	r2, [r7, #28]
 8016ed8:	4961      	ldr	r1, [pc, #388]	; (8017060 <etharp_find_entry+0x278>)
 8016eda:	4613      	mov	r3, r2
 8016edc:	005b      	lsls	r3, r3, #1
 8016ede:	4413      	add	r3, r2
 8016ee0:	00db      	lsls	r3, r3, #3
 8016ee2:	440b      	add	r3, r1
 8016ee4:	3312      	adds	r3, #18
 8016ee6:	881b      	ldrh	r3, [r3, #0]
 8016ee8:	8afa      	ldrh	r2, [r7, #22]
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d827      	bhi.n	8016f3e <etharp_find_entry+0x156>
            old_pending = i;
 8016eee:	7f3b      	ldrb	r3, [r7, #28]
 8016ef0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8016ef2:	7f3a      	ldrb	r2, [r7, #28]
 8016ef4:	495a      	ldr	r1, [pc, #360]	; (8017060 <etharp_find_entry+0x278>)
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	005b      	lsls	r3, r3, #1
 8016efa:	4413      	add	r3, r2
 8016efc:	00db      	lsls	r3, r3, #3
 8016efe:	440b      	add	r3, r1
 8016f00:	3312      	adds	r3, #18
 8016f02:	881b      	ldrh	r3, [r3, #0]
 8016f04:	82fb      	strh	r3, [r7, #22]
 8016f06:	e01a      	b.n	8016f3e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016f08:	7cfb      	ldrb	r3, [r7, #19]
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d917      	bls.n	8016f3e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016f0e:	7f3a      	ldrb	r2, [r7, #28]
 8016f10:	4953      	ldr	r1, [pc, #332]	; (8017060 <etharp_find_entry+0x278>)
 8016f12:	4613      	mov	r3, r2
 8016f14:	005b      	lsls	r3, r3, #1
 8016f16:	4413      	add	r3, r2
 8016f18:	00db      	lsls	r3, r3, #3
 8016f1a:	440b      	add	r3, r1
 8016f1c:	3312      	adds	r3, #18
 8016f1e:	881b      	ldrh	r3, [r3, #0]
 8016f20:	8aba      	ldrh	r2, [r7, #20]
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d80b      	bhi.n	8016f3e <etharp_find_entry+0x156>
            old_stable = i;
 8016f26:	7f3b      	ldrb	r3, [r7, #28]
 8016f28:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8016f2a:	7f3a      	ldrb	r2, [r7, #28]
 8016f2c:	494c      	ldr	r1, [pc, #304]	; (8017060 <etharp_find_entry+0x278>)
 8016f2e:	4613      	mov	r3, r2
 8016f30:	005b      	lsls	r3, r3, #1
 8016f32:	4413      	add	r3, r2
 8016f34:	00db      	lsls	r3, r3, #3
 8016f36:	440b      	add	r3, r1
 8016f38:	3312      	adds	r3, #18
 8016f3a:	881b      	ldrh	r3, [r3, #0]
 8016f3c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f3e:	7f3b      	ldrb	r3, [r7, #28]
 8016f40:	3301      	adds	r3, #1
 8016f42:	773b      	strb	r3, [r7, #28]
 8016f44:	7f3b      	ldrb	r3, [r7, #28]
 8016f46:	2b09      	cmp	r3, #9
 8016f48:	f67f af68 	bls.w	8016e1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016f4c:	7afb      	ldrb	r3, [r7, #11]
 8016f4e:	f003 0302 	and.w	r3, r3, #2
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d108      	bne.n	8016f68 <etharp_find_entry+0x180>
 8016f56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016f5a:	2b0a      	cmp	r3, #10
 8016f5c:	d107      	bne.n	8016f6e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016f5e:	7afb      	ldrb	r3, [r7, #11]
 8016f60:	f003 0301 	and.w	r3, r3, #1
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d102      	bne.n	8016f6e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8016f68:	f04f 33ff 	mov.w	r3, #4294967295
 8016f6c:	e073      	b.n	8017056 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016f6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016f72:	2b09      	cmp	r3, #9
 8016f74:	dc02      	bgt.n	8016f7c <etharp_find_entry+0x194>
    i = empty;
 8016f76:	7f7b      	ldrb	r3, [r7, #29]
 8016f78:	773b      	strb	r3, [r7, #28]
 8016f7a:	e036      	b.n	8016fea <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016f7c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016f80:	2b09      	cmp	r3, #9
 8016f82:	dc13      	bgt.n	8016fac <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8016f84:	7fbb      	ldrb	r3, [r7, #30]
 8016f86:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016f88:	7f3a      	ldrb	r2, [r7, #28]
 8016f8a:	4935      	ldr	r1, [pc, #212]	; (8017060 <etharp_find_entry+0x278>)
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	005b      	lsls	r3, r3, #1
 8016f90:	4413      	add	r3, r2
 8016f92:	00db      	lsls	r3, r3, #3
 8016f94:	440b      	add	r3, r1
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d018      	beq.n	8016fce <etharp_find_entry+0x1e6>
 8016f9c:	4b31      	ldr	r3, [pc, #196]	; (8017064 <etharp_find_entry+0x27c>)
 8016f9e:	f240 126f 	movw	r2, #367	; 0x16f
 8016fa2:	4933      	ldr	r1, [pc, #204]	; (8017070 <etharp_find_entry+0x288>)
 8016fa4:	4831      	ldr	r0, [pc, #196]	; (801706c <etharp_find_entry+0x284>)
 8016fa6:	f002 fa8b 	bl	80194c0 <iprintf>
 8016faa:	e010      	b.n	8016fce <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016fac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016fb0:	2b09      	cmp	r3, #9
 8016fb2:	dc02      	bgt.n	8016fba <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8016fb4:	7ffb      	ldrb	r3, [r7, #31]
 8016fb6:	773b      	strb	r3, [r7, #28]
 8016fb8:	e009      	b.n	8016fce <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016fba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016fbe:	2b09      	cmp	r3, #9
 8016fc0:	dc02      	bgt.n	8016fc8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016fc2:	7efb      	ldrb	r3, [r7, #27]
 8016fc4:	773b      	strb	r3, [r7, #28]
 8016fc6:	e002      	b.n	8016fce <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8016fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fcc:	e043      	b.n	8017056 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016fce:	7f3b      	ldrb	r3, [r7, #28]
 8016fd0:	2b09      	cmp	r3, #9
 8016fd2:	d906      	bls.n	8016fe2 <etharp_find_entry+0x1fa>
 8016fd4:	4b23      	ldr	r3, [pc, #140]	; (8017064 <etharp_find_entry+0x27c>)
 8016fd6:	f240 1281 	movw	r2, #385	; 0x181
 8016fda:	4926      	ldr	r1, [pc, #152]	; (8017074 <etharp_find_entry+0x28c>)
 8016fdc:	4823      	ldr	r0, [pc, #140]	; (801706c <etharp_find_entry+0x284>)
 8016fde:	f002 fa6f 	bl	80194c0 <iprintf>
    etharp_free_entry(i);
 8016fe2:	7f3b      	ldrb	r3, [r7, #28]
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7ff fe25 	bl	8016c34 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016fea:	7f3b      	ldrb	r3, [r7, #28]
 8016fec:	2b09      	cmp	r3, #9
 8016fee:	d906      	bls.n	8016ffe <etharp_find_entry+0x216>
 8016ff0:	4b1c      	ldr	r3, [pc, #112]	; (8017064 <etharp_find_entry+0x27c>)
 8016ff2:	f240 1285 	movw	r2, #389	; 0x185
 8016ff6:	491f      	ldr	r1, [pc, #124]	; (8017074 <etharp_find_entry+0x28c>)
 8016ff8:	481c      	ldr	r0, [pc, #112]	; (801706c <etharp_find_entry+0x284>)
 8016ffa:	f002 fa61 	bl	80194c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016ffe:	7f3a      	ldrb	r2, [r7, #28]
 8017000:	4917      	ldr	r1, [pc, #92]	; (8017060 <etharp_find_entry+0x278>)
 8017002:	4613      	mov	r3, r2
 8017004:	005b      	lsls	r3, r3, #1
 8017006:	4413      	add	r3, r2
 8017008:	00db      	lsls	r3, r3, #3
 801700a:	440b      	add	r3, r1
 801700c:	3314      	adds	r3, #20
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d006      	beq.n	8017022 <etharp_find_entry+0x23a>
 8017014:	4b13      	ldr	r3, [pc, #76]	; (8017064 <etharp_find_entry+0x27c>)
 8017016:	f240 1287 	movw	r2, #391	; 0x187
 801701a:	4917      	ldr	r1, [pc, #92]	; (8017078 <etharp_find_entry+0x290>)
 801701c:	4813      	ldr	r0, [pc, #76]	; (801706c <etharp_find_entry+0x284>)
 801701e:	f002 fa4f 	bl	80194c0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d00a      	beq.n	801703e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017028:	7f3a      	ldrb	r2, [r7, #28]
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	6819      	ldr	r1, [r3, #0]
 801702e:	480c      	ldr	r0, [pc, #48]	; (8017060 <etharp_find_entry+0x278>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	4403      	add	r3, r0
 801703a:	3304      	adds	r3, #4
 801703c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801703e:	7f3a      	ldrb	r2, [r7, #28]
 8017040:	4907      	ldr	r1, [pc, #28]	; (8017060 <etharp_find_entry+0x278>)
 8017042:	4613      	mov	r3, r2
 8017044:	005b      	lsls	r3, r3, #1
 8017046:	4413      	add	r3, r2
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	440b      	add	r3, r1
 801704c:	3312      	adds	r3, #18
 801704e:	2200      	movs	r2, #0
 8017050:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8017052:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8017056:	4618      	mov	r0, r3
 8017058:	3720      	adds	r7, #32
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	2000c844 	.word	0x2000c844
 8017064:	0801c900 	.word	0x0801c900
 8017068:	0801c95c 	.word	0x0801c95c
 801706c:	0801c99c 	.word	0x0801c99c
 8017070:	0801c9c4 	.word	0x0801c9c4
 8017074:	0801c9dc 	.word	0x0801c9dc
 8017078:	0801c9f0 	.word	0x0801c9f0

0801707c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b088      	sub	sp, #32
 8017080:	af02      	add	r7, sp, #8
 8017082:	60f8      	str	r0, [r7, #12]
 8017084:	60b9      	str	r1, [r7, #8]
 8017086:	607a      	str	r2, [r7, #4]
 8017088:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017090:	2b06      	cmp	r3, #6
 8017092:	d006      	beq.n	80170a2 <etharp_update_arp_entry+0x26>
 8017094:	4b48      	ldr	r3, [pc, #288]	; (80171b8 <etharp_update_arp_entry+0x13c>)
 8017096:	f240 12ab 	movw	r2, #427	; 0x1ab
 801709a:	4948      	ldr	r1, [pc, #288]	; (80171bc <etharp_update_arp_entry+0x140>)
 801709c:	4848      	ldr	r0, [pc, #288]	; (80171c0 <etharp_update_arp_entry+0x144>)
 801709e:	f002 fa0f 	bl	80194c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d012      	beq.n	80170ce <etharp_update_arp_entry+0x52>
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d00e      	beq.n	80170ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	68f9      	ldr	r1, [r7, #12]
 80170b6:	4618      	mov	r0, r3
 80170b8:	f001 f8da 	bl	8018270 <ip4_addr_isbroadcast_u32>
 80170bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d105      	bne.n	80170ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80170ca:	2be0      	cmp	r3, #224	; 0xe0
 80170cc:	d102      	bne.n	80170d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80170ce:	f06f 030f 	mvn.w	r3, #15
 80170d2:	e06c      	b.n	80171ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80170d4:	78fb      	ldrb	r3, [r7, #3]
 80170d6:	68fa      	ldr	r2, [r7, #12]
 80170d8:	4619      	mov	r1, r3
 80170da:	68b8      	ldr	r0, [r7, #8]
 80170dc:	f7ff fe84 	bl	8016de8 <etharp_find_entry>
 80170e0:	4603      	mov	r3, r0
 80170e2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80170e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	da02      	bge.n	80170f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80170ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80170f0:	e05d      	b.n	80171ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80170f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80170f6:	4933      	ldr	r1, [pc, #204]	; (80171c4 <etharp_update_arp_entry+0x148>)
 80170f8:	4613      	mov	r3, r2
 80170fa:	005b      	lsls	r3, r3, #1
 80170fc:	4413      	add	r3, r2
 80170fe:	00db      	lsls	r3, r3, #3
 8017100:	440b      	add	r3, r1
 8017102:	3314      	adds	r3, #20
 8017104:	2202      	movs	r2, #2
 8017106:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017108:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801710c:	492d      	ldr	r1, [pc, #180]	; (80171c4 <etharp_update_arp_entry+0x148>)
 801710e:	4613      	mov	r3, r2
 8017110:	005b      	lsls	r3, r3, #1
 8017112:	4413      	add	r3, r2
 8017114:	00db      	lsls	r3, r3, #3
 8017116:	440b      	add	r3, r1
 8017118:	3308      	adds	r3, #8
 801711a:	68fa      	ldr	r2, [r7, #12]
 801711c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801711e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017122:	4613      	mov	r3, r2
 8017124:	005b      	lsls	r3, r3, #1
 8017126:	4413      	add	r3, r2
 8017128:	00db      	lsls	r3, r3, #3
 801712a:	3308      	adds	r3, #8
 801712c:	4a25      	ldr	r2, [pc, #148]	; (80171c4 <etharp_update_arp_entry+0x148>)
 801712e:	4413      	add	r3, r2
 8017130:	3304      	adds	r3, #4
 8017132:	2206      	movs	r2, #6
 8017134:	6879      	ldr	r1, [r7, #4]
 8017136:	4618      	mov	r0, r3
 8017138:	f002 f9af 	bl	801949a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801713c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017140:	4920      	ldr	r1, [pc, #128]	; (80171c4 <etharp_update_arp_entry+0x148>)
 8017142:	4613      	mov	r3, r2
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	4413      	add	r3, r2
 8017148:	00db      	lsls	r3, r3, #3
 801714a:	440b      	add	r3, r1
 801714c:	3312      	adds	r3, #18
 801714e:	2200      	movs	r2, #0
 8017150:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017152:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017156:	491b      	ldr	r1, [pc, #108]	; (80171c4 <etharp_update_arp_entry+0x148>)
 8017158:	4613      	mov	r3, r2
 801715a:	005b      	lsls	r3, r3, #1
 801715c:	4413      	add	r3, r2
 801715e:	00db      	lsls	r3, r3, #3
 8017160:	440b      	add	r3, r1
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d021      	beq.n	80171ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017168:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801716c:	4915      	ldr	r1, [pc, #84]	; (80171c4 <etharp_update_arp_entry+0x148>)
 801716e:	4613      	mov	r3, r2
 8017170:	005b      	lsls	r3, r3, #1
 8017172:	4413      	add	r3, r2
 8017174:	00db      	lsls	r3, r3, #3
 8017176:	440b      	add	r3, r1
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801717c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017180:	4910      	ldr	r1, [pc, #64]	; (80171c4 <etharp_update_arp_entry+0x148>)
 8017182:	4613      	mov	r3, r2
 8017184:	005b      	lsls	r3, r3, #1
 8017186:	4413      	add	r3, r2
 8017188:	00db      	lsls	r3, r3, #3
 801718a:	440b      	add	r3, r1
 801718c:	2200      	movs	r2, #0
 801718e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8017196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6939      	ldr	r1, [r7, #16]
 80171a0:	68f8      	ldr	r0, [r7, #12]
 80171a2:	f001 ff07 	bl	8018fb4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80171a6:	6938      	ldr	r0, [r7, #16]
 80171a8:	f7f9 fcae 	bl	8010b08 <pbuf_free>
  }
  return ERR_OK;
 80171ac:	2300      	movs	r3, #0
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3718      	adds	r7, #24
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}
 80171b6:	bf00      	nop
 80171b8:	0801c900 	.word	0x0801c900
 80171bc:	0801ca1c 	.word	0x0801ca1c
 80171c0:	0801c99c 	.word	0x0801c99c
 80171c4:	2000c844 	.word	0x2000c844

080171c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b084      	sub	sp, #16
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80171d0:	2300      	movs	r3, #0
 80171d2:	73fb      	strb	r3, [r7, #15]
 80171d4:	e01f      	b.n	8017216 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80171d6:	7bfa      	ldrb	r2, [r7, #15]
 80171d8:	4912      	ldr	r1, [pc, #72]	; (8017224 <etharp_cleanup_netif+0x5c>)
 80171da:	4613      	mov	r3, r2
 80171dc:	005b      	lsls	r3, r3, #1
 80171de:	4413      	add	r3, r2
 80171e0:	00db      	lsls	r3, r3, #3
 80171e2:	440b      	add	r3, r1
 80171e4:	3314      	adds	r3, #20
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80171ea:	7bbb      	ldrb	r3, [r7, #14]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d00f      	beq.n	8017210 <etharp_cleanup_netif+0x48>
 80171f0:	7bfa      	ldrb	r2, [r7, #15]
 80171f2:	490c      	ldr	r1, [pc, #48]	; (8017224 <etharp_cleanup_netif+0x5c>)
 80171f4:	4613      	mov	r3, r2
 80171f6:	005b      	lsls	r3, r3, #1
 80171f8:	4413      	add	r3, r2
 80171fa:	00db      	lsls	r3, r3, #3
 80171fc:	440b      	add	r3, r1
 80171fe:	3308      	adds	r3, #8
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	687a      	ldr	r2, [r7, #4]
 8017204:	429a      	cmp	r2, r3
 8017206:	d103      	bne.n	8017210 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8017208:	7bfb      	ldrb	r3, [r7, #15]
 801720a:	4618      	mov	r0, r3
 801720c:	f7ff fd12 	bl	8016c34 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017210:	7bfb      	ldrb	r3, [r7, #15]
 8017212:	3301      	adds	r3, #1
 8017214:	73fb      	strb	r3, [r7, #15]
 8017216:	7bfb      	ldrb	r3, [r7, #15]
 8017218:	2b09      	cmp	r3, #9
 801721a:	d9dc      	bls.n	80171d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801721c:	bf00      	nop
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	2000c844 	.word	0x2000c844

08017228 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017228:	b5b0      	push	{r4, r5, r7, lr}
 801722a:	b08a      	sub	sp, #40	; 0x28
 801722c:	af04      	add	r7, sp, #16
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d107      	bne.n	8017248 <etharp_input+0x20>
 8017238:	4b3d      	ldr	r3, [pc, #244]	; (8017330 <etharp_input+0x108>)
 801723a:	f44f 7222 	mov.w	r2, #648	; 0x288
 801723e:	493d      	ldr	r1, [pc, #244]	; (8017334 <etharp_input+0x10c>)
 8017240:	483d      	ldr	r0, [pc, #244]	; (8017338 <etharp_input+0x110>)
 8017242:	f002 f93d 	bl	80194c0 <iprintf>
 8017246:	e06f      	b.n	8017328 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	685b      	ldr	r3, [r3, #4]
 801724c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	881b      	ldrh	r3, [r3, #0]
 8017252:	b29b      	uxth	r3, r3
 8017254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017258:	d10c      	bne.n	8017274 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801725a:	693b      	ldr	r3, [r7, #16]
 801725c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801725e:	2b06      	cmp	r3, #6
 8017260:	d108      	bne.n	8017274 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017266:	2b04      	cmp	r3, #4
 8017268:	d104      	bne.n	8017274 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	885b      	ldrh	r3, [r3, #2]
 801726e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017270:	2b08      	cmp	r3, #8
 8017272:	d003      	beq.n	801727c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	f7f9 fc47 	bl	8010b08 <pbuf_free>
    return;
 801727a:	e055      	b.n	8017328 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	330e      	adds	r3, #14
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	3318      	adds	r3, #24
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	3304      	adds	r3, #4
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d102      	bne.n	801729c <etharp_input+0x74>
    for_us = 0;
 8017296:	2300      	movs	r3, #0
 8017298:	75fb      	strb	r3, [r7, #23]
 801729a:	e009      	b.n	80172b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801729c:	68ba      	ldr	r2, [r7, #8]
 801729e:	683b      	ldr	r3, [r7, #0]
 80172a0:	3304      	adds	r3, #4
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	429a      	cmp	r2, r3
 80172a6:	bf0c      	ite	eq
 80172a8:	2301      	moveq	r3, #1
 80172aa:	2300      	movne	r3, #0
 80172ac:	b2db      	uxtb	r3, r3
 80172ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80172b0:	693b      	ldr	r3, [r7, #16]
 80172b2:	f103 0208 	add.w	r2, r3, #8
 80172b6:	7dfb      	ldrb	r3, [r7, #23]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d001      	beq.n	80172c0 <etharp_input+0x98>
 80172bc:	2301      	movs	r3, #1
 80172be:	e000      	b.n	80172c2 <etharp_input+0x9a>
 80172c0:	2302      	movs	r3, #2
 80172c2:	f107 010c 	add.w	r1, r7, #12
 80172c6:	6838      	ldr	r0, [r7, #0]
 80172c8:	f7ff fed8 	bl	801707c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	88db      	ldrh	r3, [r3, #6]
 80172d0:	b29b      	uxth	r3, r3
 80172d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80172d6:	d003      	beq.n	80172e0 <etharp_input+0xb8>
 80172d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172dc:	d01e      	beq.n	801731c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80172de:	e020      	b.n	8017322 <etharp_input+0xfa>
    if (for_us) {
 80172e0:	7dfb      	ldrb	r3, [r7, #23]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d01c      	beq.n	8017320 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	f103 0525 	add.w	r5, r3, #37	; 0x25
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80172fc:	693a      	ldr	r2, [r7, #16]
 80172fe:	3208      	adds	r2, #8
      etharp_raw(netif,
 8017300:	2102      	movs	r1, #2
 8017302:	9103      	str	r1, [sp, #12]
 8017304:	f107 010c 	add.w	r1, r7, #12
 8017308:	9102      	str	r1, [sp, #8]
 801730a:	9201      	str	r2, [sp, #4]
 801730c:	9300      	str	r3, [sp, #0]
 801730e:	462b      	mov	r3, r5
 8017310:	4622      	mov	r2, r4
 8017312:	4601      	mov	r1, r0
 8017314:	6838      	ldr	r0, [r7, #0]
 8017316:	f000 fae3 	bl	80178e0 <etharp_raw>
    break;
 801731a:	e001      	b.n	8017320 <etharp_input+0xf8>
    break;
 801731c:	bf00      	nop
 801731e:	e000      	b.n	8017322 <etharp_input+0xfa>
    break;
 8017320:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017322:	6878      	ldr	r0, [r7, #4]
 8017324:	f7f9 fbf0 	bl	8010b08 <pbuf_free>
}
 8017328:	3718      	adds	r7, #24
 801732a:	46bd      	mov	sp, r7
 801732c:	bdb0      	pop	{r4, r5, r7, pc}
 801732e:	bf00      	nop
 8017330:	0801c900 	.word	0x0801c900
 8017334:	0801ca74 	.word	0x0801ca74
 8017338:	0801c99c 	.word	0x0801c99c

0801733c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b086      	sub	sp, #24
 8017340:	af02      	add	r7, sp, #8
 8017342:	60f8      	str	r0, [r7, #12]
 8017344:	60b9      	str	r1, [r7, #8]
 8017346:	4613      	mov	r3, r2
 8017348:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801734a:	79fa      	ldrb	r2, [r7, #7]
 801734c:	4944      	ldr	r1, [pc, #272]	; (8017460 <etharp_output_to_arp_index+0x124>)
 801734e:	4613      	mov	r3, r2
 8017350:	005b      	lsls	r3, r3, #1
 8017352:	4413      	add	r3, r2
 8017354:	00db      	lsls	r3, r3, #3
 8017356:	440b      	add	r3, r1
 8017358:	3314      	adds	r3, #20
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	2b01      	cmp	r3, #1
 801735e:	d806      	bhi.n	801736e <etharp_output_to_arp_index+0x32>
 8017360:	4b40      	ldr	r3, [pc, #256]	; (8017464 <etharp_output_to_arp_index+0x128>)
 8017362:	f240 22ed 	movw	r2, #749	; 0x2ed
 8017366:	4940      	ldr	r1, [pc, #256]	; (8017468 <etharp_output_to_arp_index+0x12c>)
 8017368:	4840      	ldr	r0, [pc, #256]	; (801746c <etharp_output_to_arp_index+0x130>)
 801736a:	f002 f8a9 	bl	80194c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801736e:	79fa      	ldrb	r2, [r7, #7]
 8017370:	493b      	ldr	r1, [pc, #236]	; (8017460 <etharp_output_to_arp_index+0x124>)
 8017372:	4613      	mov	r3, r2
 8017374:	005b      	lsls	r3, r3, #1
 8017376:	4413      	add	r3, r2
 8017378:	00db      	lsls	r3, r3, #3
 801737a:	440b      	add	r3, r1
 801737c:	3314      	adds	r3, #20
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	2b02      	cmp	r3, #2
 8017382:	d153      	bne.n	801742c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017384:	79fa      	ldrb	r2, [r7, #7]
 8017386:	4936      	ldr	r1, [pc, #216]	; (8017460 <etharp_output_to_arp_index+0x124>)
 8017388:	4613      	mov	r3, r2
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	4413      	add	r3, r2
 801738e:	00db      	lsls	r3, r3, #3
 8017390:	440b      	add	r3, r1
 8017392:	3312      	adds	r3, #18
 8017394:	881b      	ldrh	r3, [r3, #0]
 8017396:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801739a:	d919      	bls.n	80173d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801739c:	79fa      	ldrb	r2, [r7, #7]
 801739e:	4613      	mov	r3, r2
 80173a0:	005b      	lsls	r3, r3, #1
 80173a2:	4413      	add	r3, r2
 80173a4:	00db      	lsls	r3, r3, #3
 80173a6:	4a2e      	ldr	r2, [pc, #184]	; (8017460 <etharp_output_to_arp_index+0x124>)
 80173a8:	4413      	add	r3, r2
 80173aa:	3304      	adds	r3, #4
 80173ac:	4619      	mov	r1, r3
 80173ae:	68f8      	ldr	r0, [r7, #12]
 80173b0:	f000 fb44 	bl	8017a3c <etharp_request>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d138      	bne.n	801742c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80173ba:	79fa      	ldrb	r2, [r7, #7]
 80173bc:	4928      	ldr	r1, [pc, #160]	; (8017460 <etharp_output_to_arp_index+0x124>)
 80173be:	4613      	mov	r3, r2
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	4413      	add	r3, r2
 80173c4:	00db      	lsls	r3, r3, #3
 80173c6:	440b      	add	r3, r1
 80173c8:	3314      	adds	r3, #20
 80173ca:	2203      	movs	r2, #3
 80173cc:	701a      	strb	r2, [r3, #0]
 80173ce:	e02d      	b.n	801742c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80173d0:	79fa      	ldrb	r2, [r7, #7]
 80173d2:	4923      	ldr	r1, [pc, #140]	; (8017460 <etharp_output_to_arp_index+0x124>)
 80173d4:	4613      	mov	r3, r2
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	4413      	add	r3, r2
 80173da:	00db      	lsls	r3, r3, #3
 80173dc:	440b      	add	r3, r1
 80173de:	3312      	adds	r3, #18
 80173e0:	881b      	ldrh	r3, [r3, #0]
 80173e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80173e6:	d321      	bcc.n	801742c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80173e8:	79fa      	ldrb	r2, [r7, #7]
 80173ea:	4613      	mov	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	00db      	lsls	r3, r3, #3
 80173f2:	4a1b      	ldr	r2, [pc, #108]	; (8017460 <etharp_output_to_arp_index+0x124>)
 80173f4:	4413      	add	r3, r2
 80173f6:	1d19      	adds	r1, r3, #4
 80173f8:	79fa      	ldrb	r2, [r7, #7]
 80173fa:	4613      	mov	r3, r2
 80173fc:	005b      	lsls	r3, r3, #1
 80173fe:	4413      	add	r3, r2
 8017400:	00db      	lsls	r3, r3, #3
 8017402:	3308      	adds	r3, #8
 8017404:	4a16      	ldr	r2, [pc, #88]	; (8017460 <etharp_output_to_arp_index+0x124>)
 8017406:	4413      	add	r3, r2
 8017408:	3304      	adds	r3, #4
 801740a:	461a      	mov	r2, r3
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f000 faf3 	bl	80179f8 <etharp_request_dst>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	d109      	bne.n	801742c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017418:	79fa      	ldrb	r2, [r7, #7]
 801741a:	4911      	ldr	r1, [pc, #68]	; (8017460 <etharp_output_to_arp_index+0x124>)
 801741c:	4613      	mov	r3, r2
 801741e:	005b      	lsls	r3, r3, #1
 8017420:	4413      	add	r3, r2
 8017422:	00db      	lsls	r3, r3, #3
 8017424:	440b      	add	r3, r1
 8017426:	3314      	adds	r3, #20
 8017428:	2203      	movs	r2, #3
 801742a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8017432:	79fa      	ldrb	r2, [r7, #7]
 8017434:	4613      	mov	r3, r2
 8017436:	005b      	lsls	r3, r3, #1
 8017438:	4413      	add	r3, r2
 801743a:	00db      	lsls	r3, r3, #3
 801743c:	3308      	adds	r3, #8
 801743e:	4a08      	ldr	r2, [pc, #32]	; (8017460 <etharp_output_to_arp_index+0x124>)
 8017440:	4413      	add	r3, r2
 8017442:	1d1a      	adds	r2, r3, #4
 8017444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017448:	9300      	str	r3, [sp, #0]
 801744a:	4613      	mov	r3, r2
 801744c:	460a      	mov	r2, r1
 801744e:	68b9      	ldr	r1, [r7, #8]
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f001 fdaf 	bl	8018fb4 <ethernet_output>
 8017456:	4603      	mov	r3, r0
}
 8017458:	4618      	mov	r0, r3
 801745a:	3710      	adds	r7, #16
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}
 8017460:	2000c844 	.word	0x2000c844
 8017464:	0801c900 	.word	0x0801c900
 8017468:	0801ca94 	.word	0x0801ca94
 801746c:	0801c99c 	.word	0x0801c99c

08017470 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b08a      	sub	sp, #40	; 0x28
 8017474:	af02      	add	r7, sp, #8
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d106      	bne.n	8017494 <etharp_output+0x24>
 8017486:	4b69      	ldr	r3, [pc, #420]	; (801762c <etharp_output+0x1bc>)
 8017488:	f240 321b 	movw	r2, #795	; 0x31b
 801748c:	4968      	ldr	r1, [pc, #416]	; (8017630 <etharp_output+0x1c0>)
 801748e:	4869      	ldr	r0, [pc, #420]	; (8017634 <etharp_output+0x1c4>)
 8017490:	f002 f816 	bl	80194c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d106      	bne.n	80174a8 <etharp_output+0x38>
 801749a:	4b64      	ldr	r3, [pc, #400]	; (801762c <etharp_output+0x1bc>)
 801749c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80174a0:	4965      	ldr	r1, [pc, #404]	; (8017638 <etharp_output+0x1c8>)
 80174a2:	4864      	ldr	r0, [pc, #400]	; (8017634 <etharp_output+0x1c4>)
 80174a4:	f002 f80c 	bl	80194c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d106      	bne.n	80174bc <etharp_output+0x4c>
 80174ae:	4b5f      	ldr	r3, [pc, #380]	; (801762c <etharp_output+0x1bc>)
 80174b0:	f240 321d 	movw	r2, #797	; 0x31d
 80174b4:	4961      	ldr	r1, [pc, #388]	; (801763c <etharp_output+0x1cc>)
 80174b6:	485f      	ldr	r0, [pc, #380]	; (8017634 <etharp_output+0x1c4>)
 80174b8:	f002 f802 	bl	80194c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	68f9      	ldr	r1, [r7, #12]
 80174c2:	4618      	mov	r0, r3
 80174c4:	f000 fed4 	bl	8018270 <ip4_addr_isbroadcast_u32>
 80174c8:	4603      	mov	r3, r0
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d002      	beq.n	80174d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80174ce:	4b5c      	ldr	r3, [pc, #368]	; (8017640 <etharp_output+0x1d0>)
 80174d0:	61fb      	str	r3, [r7, #28]
 80174d2:	e09b      	b.n	801760c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80174dc:	2be0      	cmp	r3, #224	; 0xe0
 80174de:	d118      	bne.n	8017512 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80174e0:	2301      	movs	r3, #1
 80174e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80174e4:	2300      	movs	r3, #0
 80174e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80174e8:	235e      	movs	r3, #94	; 0x5e
 80174ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	3301      	adds	r3, #1
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	3302      	adds	r3, #2
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	3303      	adds	r3, #3
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801750a:	f107 0310 	add.w	r3, r7, #16
 801750e:	61fb      	str	r3, [r7, #28]
 8017510:	e07c      	b.n	801760c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681a      	ldr	r2, [r3, #0]
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	3304      	adds	r3, #4
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	405a      	eors	r2, r3
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	3308      	adds	r3, #8
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	4013      	ands	r3, r2
 8017526:	2b00      	cmp	r3, #0
 8017528:	d012      	beq.n	8017550 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017530:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017534:	4293      	cmp	r3, r2
 8017536:	d00b      	beq.n	8017550 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	330c      	adds	r3, #12
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d003      	beq.n	801754a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	330c      	adds	r3, #12
 8017546:	61bb      	str	r3, [r7, #24]
 8017548:	e002      	b.n	8017550 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801754a:	f06f 0303 	mvn.w	r3, #3
 801754e:	e069      	b.n	8017624 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017550:	4b3c      	ldr	r3, [pc, #240]	; (8017644 <etharp_output+0x1d4>)
 8017552:	781b      	ldrb	r3, [r3, #0]
 8017554:	4619      	mov	r1, r3
 8017556:	4a3c      	ldr	r2, [pc, #240]	; (8017648 <etharp_output+0x1d8>)
 8017558:	460b      	mov	r3, r1
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	440b      	add	r3, r1
 801755e:	00db      	lsls	r3, r3, #3
 8017560:	4413      	add	r3, r2
 8017562:	3314      	adds	r3, #20
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	2b01      	cmp	r3, #1
 8017568:	d917      	bls.n	801759a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801756a:	69bb      	ldr	r3, [r7, #24]
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	4b35      	ldr	r3, [pc, #212]	; (8017644 <etharp_output+0x1d4>)
 8017570:	781b      	ldrb	r3, [r3, #0]
 8017572:	4618      	mov	r0, r3
 8017574:	4934      	ldr	r1, [pc, #208]	; (8017648 <etharp_output+0x1d8>)
 8017576:	4603      	mov	r3, r0
 8017578:	005b      	lsls	r3, r3, #1
 801757a:	4403      	add	r3, r0
 801757c:	00db      	lsls	r3, r3, #3
 801757e:	440b      	add	r3, r1
 8017580:	3304      	adds	r3, #4
 8017582:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017584:	429a      	cmp	r2, r3
 8017586:	d108      	bne.n	801759a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017588:	4b2e      	ldr	r3, [pc, #184]	; (8017644 <etharp_output+0x1d4>)
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	461a      	mov	r2, r3
 801758e:	68b9      	ldr	r1, [r7, #8]
 8017590:	68f8      	ldr	r0, [r7, #12]
 8017592:	f7ff fed3 	bl	801733c <etharp_output_to_arp_index>
 8017596:	4603      	mov	r3, r0
 8017598:	e044      	b.n	8017624 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801759a:	2300      	movs	r3, #0
 801759c:	75fb      	strb	r3, [r7, #23]
 801759e:	e02a      	b.n	80175f6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80175a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80175a4:	4928      	ldr	r1, [pc, #160]	; (8017648 <etharp_output+0x1d8>)
 80175a6:	4613      	mov	r3, r2
 80175a8:	005b      	lsls	r3, r3, #1
 80175aa:	4413      	add	r3, r2
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	440b      	add	r3, r1
 80175b0:	3314      	adds	r3, #20
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	2b01      	cmp	r3, #1
 80175b6:	d918      	bls.n	80175ea <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	6819      	ldr	r1, [r3, #0]
 80175bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80175c0:	4821      	ldr	r0, [pc, #132]	; (8017648 <etharp_output+0x1d8>)
 80175c2:	4613      	mov	r3, r2
 80175c4:	005b      	lsls	r3, r3, #1
 80175c6:	4413      	add	r3, r2
 80175c8:	00db      	lsls	r3, r3, #3
 80175ca:	4403      	add	r3, r0
 80175cc:	3304      	adds	r3, #4
 80175ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80175d0:	4299      	cmp	r1, r3
 80175d2:	d10a      	bne.n	80175ea <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80175d4:	7dfa      	ldrb	r2, [r7, #23]
 80175d6:	4b1b      	ldr	r3, [pc, #108]	; (8017644 <etharp_output+0x1d4>)
 80175d8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80175da:	7dfb      	ldrb	r3, [r7, #23]
 80175dc:	461a      	mov	r2, r3
 80175de:	68b9      	ldr	r1, [r7, #8]
 80175e0:	68f8      	ldr	r0, [r7, #12]
 80175e2:	f7ff feab 	bl	801733c <etharp_output_to_arp_index>
 80175e6:	4603      	mov	r3, r0
 80175e8:	e01c      	b.n	8017624 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80175ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80175ee:	b2db      	uxtb	r3, r3
 80175f0:	3301      	adds	r3, #1
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	75fb      	strb	r3, [r7, #23]
 80175f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80175fa:	2b09      	cmp	r3, #9
 80175fc:	ddd0      	ble.n	80175a0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80175fe:	68ba      	ldr	r2, [r7, #8]
 8017600:	69b9      	ldr	r1, [r7, #24]
 8017602:	68f8      	ldr	r0, [r7, #12]
 8017604:	f000 f822 	bl	801764c <etharp_query>
 8017608:	4603      	mov	r3, r0
 801760a:	e00b      	b.n	8017624 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8017612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017616:	9300      	str	r3, [sp, #0]
 8017618:	69fb      	ldr	r3, [r7, #28]
 801761a:	68b9      	ldr	r1, [r7, #8]
 801761c:	68f8      	ldr	r0, [r7, #12]
 801761e:	f001 fcc9 	bl	8018fb4 <ethernet_output>
 8017622:	4603      	mov	r3, r0
}
 8017624:	4618      	mov	r0, r3
 8017626:	3720      	adds	r7, #32
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}
 801762c:	0801c900 	.word	0x0801c900
 8017630:	0801ca74 	.word	0x0801ca74
 8017634:	0801c99c 	.word	0x0801c99c
 8017638:	0801cac4 	.word	0x0801cac4
 801763c:	0801ca64 	.word	0x0801ca64
 8017640:	0801d154 	.word	0x0801d154
 8017644:	2000c934 	.word	0x2000c934
 8017648:	2000c844 	.word	0x2000c844

0801764c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b08c      	sub	sp, #48	; 0x30
 8017650:	af02      	add	r7, sp, #8
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	60b9      	str	r1, [r7, #8]
 8017656:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	3325      	adds	r3, #37	; 0x25
 801765c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801765e:	23ff      	movs	r3, #255	; 0xff
 8017660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017664:	2300      	movs	r3, #0
 8017666:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	68f9      	ldr	r1, [r7, #12]
 801766e:	4618      	mov	r0, r3
 8017670:	f000 fdfe 	bl	8018270 <ip4_addr_isbroadcast_u32>
 8017674:	4603      	mov	r3, r0
 8017676:	2b00      	cmp	r3, #0
 8017678:	d10c      	bne.n	8017694 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017682:	2be0      	cmp	r3, #224	; 0xe0
 8017684:	d006      	beq.n	8017694 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d003      	beq.n	8017694 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d102      	bne.n	801769a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017694:	f06f 030f 	mvn.w	r3, #15
 8017698:	e10f      	b.n	80178ba <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801769a:	68fa      	ldr	r2, [r7, #12]
 801769c:	2101      	movs	r1, #1
 801769e:	68b8      	ldr	r0, [r7, #8]
 80176a0:	f7ff fba2 	bl	8016de8 <etharp_find_entry>
 80176a4:	4603      	mov	r3, r0
 80176a6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80176a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	da02      	bge.n	80176b6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 80176b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176b4:	e101      	b.n	80178ba <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80176b6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80176ba:	4982      	ldr	r1, [pc, #520]	; (80178c4 <etharp_query+0x278>)
 80176bc:	4613      	mov	r3, r2
 80176be:	005b      	lsls	r3, r3, #1
 80176c0:	4413      	add	r3, r2
 80176c2:	00db      	lsls	r3, r3, #3
 80176c4:	440b      	add	r3, r1
 80176c6:	3314      	adds	r3, #20
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d117      	bne.n	80176fe <etharp_query+0xb2>
    is_new_entry = 1;
 80176ce:	2301      	movs	r3, #1
 80176d0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80176d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80176d6:	497b      	ldr	r1, [pc, #492]	; (80178c4 <etharp_query+0x278>)
 80176d8:	4613      	mov	r3, r2
 80176da:	005b      	lsls	r3, r3, #1
 80176dc:	4413      	add	r3, r2
 80176de:	00db      	lsls	r3, r3, #3
 80176e0:	440b      	add	r3, r1
 80176e2:	3314      	adds	r3, #20
 80176e4:	2201      	movs	r2, #1
 80176e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80176e8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80176ec:	4975      	ldr	r1, [pc, #468]	; (80178c4 <etharp_query+0x278>)
 80176ee:	4613      	mov	r3, r2
 80176f0:	005b      	lsls	r3, r3, #1
 80176f2:	4413      	add	r3, r2
 80176f4:	00db      	lsls	r3, r3, #3
 80176f6:	440b      	add	r3, r1
 80176f8:	3308      	adds	r3, #8
 80176fa:	68fa      	ldr	r2, [r7, #12]
 80176fc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80176fe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017702:	4970      	ldr	r1, [pc, #448]	; (80178c4 <etharp_query+0x278>)
 8017704:	4613      	mov	r3, r2
 8017706:	005b      	lsls	r3, r3, #1
 8017708:	4413      	add	r3, r2
 801770a:	00db      	lsls	r3, r3, #3
 801770c:	440b      	add	r3, r1
 801770e:	3314      	adds	r3, #20
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	2b01      	cmp	r3, #1
 8017714:	d012      	beq.n	801773c <etharp_query+0xf0>
 8017716:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801771a:	496a      	ldr	r1, [pc, #424]	; (80178c4 <etharp_query+0x278>)
 801771c:	4613      	mov	r3, r2
 801771e:	005b      	lsls	r3, r3, #1
 8017720:	4413      	add	r3, r2
 8017722:	00db      	lsls	r3, r3, #3
 8017724:	440b      	add	r3, r1
 8017726:	3314      	adds	r3, #20
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	2b01      	cmp	r3, #1
 801772c:	d806      	bhi.n	801773c <etharp_query+0xf0>
 801772e:	4b66      	ldr	r3, [pc, #408]	; (80178c8 <etharp_query+0x27c>)
 8017730:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017734:	4965      	ldr	r1, [pc, #404]	; (80178cc <etharp_query+0x280>)
 8017736:	4866      	ldr	r0, [pc, #408]	; (80178d0 <etharp_query+0x284>)
 8017738:	f001 fec2 	bl	80194c0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801773c:	6a3b      	ldr	r3, [r7, #32]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d102      	bne.n	8017748 <etharp_query+0xfc>
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d10c      	bne.n	8017762 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017748:	68b9      	ldr	r1, [r7, #8]
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f000 f976 	bl	8017a3c <etharp_request>
 8017750:	4603      	mov	r3, r0
 8017752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d102      	bne.n	8017762 <etharp_query+0x116>
      return result;
 801775c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017760:	e0ab      	b.n	80178ba <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d106      	bne.n	8017776 <etharp_query+0x12a>
 8017768:	4b57      	ldr	r3, [pc, #348]	; (80178c8 <etharp_query+0x27c>)
 801776a:	f240 32db 	movw	r2, #987	; 0x3db
 801776e:	4959      	ldr	r1, [pc, #356]	; (80178d4 <etharp_query+0x288>)
 8017770:	4857      	ldr	r0, [pc, #348]	; (80178d0 <etharp_query+0x284>)
 8017772:	f001 fea5 	bl	80194c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017776:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801777a:	4952      	ldr	r1, [pc, #328]	; (80178c4 <etharp_query+0x278>)
 801777c:	4613      	mov	r3, r2
 801777e:	005b      	lsls	r3, r3, #1
 8017780:	4413      	add	r3, r2
 8017782:	00db      	lsls	r3, r3, #3
 8017784:	440b      	add	r3, r1
 8017786:	3314      	adds	r3, #20
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	2b01      	cmp	r3, #1
 801778c:	d919      	bls.n	80177c2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801778e:	7cfa      	ldrb	r2, [r7, #19]
 8017790:	4b51      	ldr	r3, [pc, #324]	; (80178d8 <etharp_query+0x28c>)
 8017792:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017794:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017798:	4613      	mov	r3, r2
 801779a:	005b      	lsls	r3, r3, #1
 801779c:	4413      	add	r3, r2
 801779e:	00db      	lsls	r3, r3, #3
 80177a0:	3308      	adds	r3, #8
 80177a2:	4a48      	ldr	r2, [pc, #288]	; (80178c4 <etharp_query+0x278>)
 80177a4:	4413      	add	r3, r2
 80177a6:	1d1a      	adds	r2, r3, #4
 80177a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ac:	9300      	str	r3, [sp, #0]
 80177ae:	4613      	mov	r3, r2
 80177b0:	697a      	ldr	r2, [r7, #20]
 80177b2:	6879      	ldr	r1, [r7, #4]
 80177b4:	68f8      	ldr	r0, [r7, #12]
 80177b6:	f001 fbfd 	bl	8018fb4 <ethernet_output>
 80177ba:	4603      	mov	r3, r0
 80177bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80177c0:	e079      	b.n	80178b6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80177c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80177c6:	493f      	ldr	r1, [pc, #252]	; (80178c4 <etharp_query+0x278>)
 80177c8:	4613      	mov	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	3314      	adds	r3, #20
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	2b01      	cmp	r3, #1
 80177d8:	d16d      	bne.n	80178b6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80177da:	2300      	movs	r3, #0
 80177dc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80177e2:	e01a      	b.n	801781a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	895a      	ldrh	r2, [r3, #10]
 80177e8:	69fb      	ldr	r3, [r7, #28]
 80177ea:	891b      	ldrh	r3, [r3, #8]
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d10a      	bne.n	8017806 <etharp_query+0x1ba>
 80177f0:	69fb      	ldr	r3, [r7, #28]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d006      	beq.n	8017806 <etharp_query+0x1ba>
 80177f8:	4b33      	ldr	r3, [pc, #204]	; (80178c8 <etharp_query+0x27c>)
 80177fa:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80177fe:	4937      	ldr	r1, [pc, #220]	; (80178dc <etharp_query+0x290>)
 8017800:	4833      	ldr	r0, [pc, #204]	; (80178d0 <etharp_query+0x284>)
 8017802:	f001 fe5d 	bl	80194c0 <iprintf>
      if (p->type != PBUF_ROM) {
 8017806:	69fb      	ldr	r3, [r7, #28]
 8017808:	7b1b      	ldrb	r3, [r3, #12]
 801780a:	2b01      	cmp	r3, #1
 801780c:	d002      	beq.n	8017814 <etharp_query+0x1c8>
        copy_needed = 1;
 801780e:	2301      	movs	r3, #1
 8017810:	61bb      	str	r3, [r7, #24]
        break;
 8017812:	e005      	b.n	8017820 <etharp_query+0x1d4>
      }
      p = p->next;
 8017814:	69fb      	ldr	r3, [r7, #28]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	61fb      	str	r3, [r7, #28]
    while (p) {
 801781a:	69fb      	ldr	r3, [r7, #28]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d1e1      	bne.n	80177e4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8017820:	69bb      	ldr	r3, [r7, #24]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d017      	beq.n	8017856 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8017826:	69fb      	ldr	r3, [r7, #28]
 8017828:	891b      	ldrh	r3, [r3, #8]
 801782a:	2200      	movs	r2, #0
 801782c:	4619      	mov	r1, r3
 801782e:	2002      	movs	r0, #2
 8017830:	f7f8 fdf8 	bl	8010424 <pbuf_alloc>
 8017834:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8017836:	69fb      	ldr	r3, [r7, #28]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d011      	beq.n	8017860 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801783c:	6879      	ldr	r1, [r7, #4]
 801783e:	69f8      	ldr	r0, [r7, #28]
 8017840:	f7f9 fa92 	bl	8010d68 <pbuf_copy>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	d00a      	beq.n	8017860 <etharp_query+0x214>
          pbuf_free(p);
 801784a:	69f8      	ldr	r0, [r7, #28]
 801784c:	f7f9 f95c 	bl	8010b08 <pbuf_free>
          p = NULL;
 8017850:	2300      	movs	r3, #0
 8017852:	61fb      	str	r3, [r7, #28]
 8017854:	e004      	b.n	8017860 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801785a:	69f8      	ldr	r0, [r7, #28]
 801785c:	f7f9 fa06 	bl	8010c6c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d024      	beq.n	80178b0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017866:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801786a:	4916      	ldr	r1, [pc, #88]	; (80178c4 <etharp_query+0x278>)
 801786c:	4613      	mov	r3, r2
 801786e:	005b      	lsls	r3, r3, #1
 8017870:	4413      	add	r3, r2
 8017872:	00db      	lsls	r3, r3, #3
 8017874:	440b      	add	r3, r1
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d00b      	beq.n	8017894 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801787c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017880:	4910      	ldr	r1, [pc, #64]	; (80178c4 <etharp_query+0x278>)
 8017882:	4613      	mov	r3, r2
 8017884:	005b      	lsls	r3, r3, #1
 8017886:	4413      	add	r3, r2
 8017888:	00db      	lsls	r3, r3, #3
 801788a:	440b      	add	r3, r1
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	4618      	mov	r0, r3
 8017890:	f7f9 f93a 	bl	8010b08 <pbuf_free>
      }
      arp_table[i].q = p;
 8017894:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017898:	490a      	ldr	r1, [pc, #40]	; (80178c4 <etharp_query+0x278>)
 801789a:	4613      	mov	r3, r2
 801789c:	005b      	lsls	r3, r3, #1
 801789e:	4413      	add	r3, r2
 80178a0:	00db      	lsls	r3, r3, #3
 80178a2:	440b      	add	r3, r1
 80178a4:	69fa      	ldr	r2, [r7, #28]
 80178a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80178a8:	2300      	movs	r3, #0
 80178aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80178ae:	e002      	b.n	80178b6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80178b0:	23ff      	movs	r3, #255	; 0xff
 80178b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80178b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	3728      	adds	r7, #40	; 0x28
 80178be:	46bd      	mov	sp, r7
 80178c0:	bd80      	pop	{r7, pc}
 80178c2:	bf00      	nop
 80178c4:	2000c844 	.word	0x2000c844
 80178c8:	0801c900 	.word	0x0801c900
 80178cc:	0801cad0 	.word	0x0801cad0
 80178d0:	0801c99c 	.word	0x0801c99c
 80178d4:	0801cac4 	.word	0x0801cac4
 80178d8:	2000c934 	.word	0x2000c934
 80178dc:	0801caf8 	.word	0x0801caf8

080178e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b08a      	sub	sp, #40	; 0x28
 80178e4:	af02      	add	r7, sp, #8
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	60b9      	str	r1, [r7, #8]
 80178ea:	607a      	str	r2, [r7, #4]
 80178ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80178ee:	2300      	movs	r3, #0
 80178f0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d106      	bne.n	8017906 <etharp_raw+0x26>
 80178f8:	4b3a      	ldr	r3, [pc, #232]	; (80179e4 <etharp_raw+0x104>)
 80178fa:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80178fe:	493a      	ldr	r1, [pc, #232]	; (80179e8 <etharp_raw+0x108>)
 8017900:	483a      	ldr	r0, [pc, #232]	; (80179ec <etharp_raw+0x10c>)
 8017902:	f001 fddd 	bl	80194c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017906:	2200      	movs	r2, #0
 8017908:	211c      	movs	r1, #28
 801790a:	2002      	movs	r0, #2
 801790c:	f7f8 fd8a 	bl	8010424 <pbuf_alloc>
 8017910:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017912:	69bb      	ldr	r3, [r7, #24]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d102      	bne.n	801791e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017918:	f04f 33ff 	mov.w	r3, #4294967295
 801791c:	e05d      	b.n	80179da <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801791e:	69bb      	ldr	r3, [r7, #24]
 8017920:	895b      	ldrh	r3, [r3, #10]
 8017922:	2b1b      	cmp	r3, #27
 8017924:	d806      	bhi.n	8017934 <etharp_raw+0x54>
 8017926:	4b2f      	ldr	r3, [pc, #188]	; (80179e4 <etharp_raw+0x104>)
 8017928:	f240 4264 	movw	r2, #1124	; 0x464
 801792c:	4930      	ldr	r1, [pc, #192]	; (80179f0 <etharp_raw+0x110>)
 801792e:	482f      	ldr	r0, [pc, #188]	; (80179ec <etharp_raw+0x10c>)
 8017930:	f001 fdc6 	bl	80194c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017934:	69bb      	ldr	r3, [r7, #24]
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801793a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801793c:	4618      	mov	r0, r3
 801793e:	f7f7 fec9 	bl	800f6d4 <lwip_htons>
 8017942:	4603      	mov	r3, r0
 8017944:	461a      	mov	r2, r3
 8017946:	697b      	ldr	r3, [r7, #20]
 8017948:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017950:	2b06      	cmp	r3, #6
 8017952:	d006      	beq.n	8017962 <etharp_raw+0x82>
 8017954:	4b23      	ldr	r3, [pc, #140]	; (80179e4 <etharp_raw+0x104>)
 8017956:	f240 426b 	movw	r2, #1131	; 0x46b
 801795a:	4926      	ldr	r1, [pc, #152]	; (80179f4 <etharp_raw+0x114>)
 801795c:	4823      	ldr	r0, [pc, #140]	; (80179ec <etharp_raw+0x10c>)
 801795e:	f001 fdaf 	bl	80194c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8017962:	697b      	ldr	r3, [r7, #20]
 8017964:	3308      	adds	r3, #8
 8017966:	2206      	movs	r2, #6
 8017968:	6839      	ldr	r1, [r7, #0]
 801796a:	4618      	mov	r0, r3
 801796c:	f001 fd95 	bl	801949a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	3312      	adds	r3, #18
 8017974:	2206      	movs	r2, #6
 8017976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017978:	4618      	mov	r0, r3
 801797a:	f001 fd8e 	bl	801949a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	330e      	adds	r3, #14
 8017982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017984:	6812      	ldr	r2, [r2, #0]
 8017986:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	3318      	adds	r3, #24
 801798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801798e:	6812      	ldr	r2, [r2, #0]
 8017990:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	2200      	movs	r2, #0
 8017996:	701a      	strb	r2, [r3, #0]
 8017998:	2200      	movs	r2, #0
 801799a:	f042 0201 	orr.w	r2, r2, #1
 801799e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80179a0:	697b      	ldr	r3, [r7, #20]
 80179a2:	2200      	movs	r2, #0
 80179a4:	f042 0208 	orr.w	r2, r2, #8
 80179a8:	709a      	strb	r2, [r3, #2]
 80179aa:	2200      	movs	r2, #0
 80179ac:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	2206      	movs	r2, #6
 80179b2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80179b4:	697b      	ldr	r3, [r7, #20]
 80179b6:	2204      	movs	r2, #4
 80179b8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80179ba:	f640 0306 	movw	r3, #2054	; 0x806
 80179be:	9300      	str	r3, [sp, #0]
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	68ba      	ldr	r2, [r7, #8]
 80179c4:	69b9      	ldr	r1, [r7, #24]
 80179c6:	68f8      	ldr	r0, [r7, #12]
 80179c8:	f001 faf4 	bl	8018fb4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80179cc:	69b8      	ldr	r0, [r7, #24]
 80179ce:	f7f9 f89b 	bl	8010b08 <pbuf_free>
  p = NULL;
 80179d2:	2300      	movs	r3, #0
 80179d4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80179d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80179da:	4618      	mov	r0, r3
 80179dc:	3720      	adds	r7, #32
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
 80179e2:	bf00      	nop
 80179e4:	0801c900 	.word	0x0801c900
 80179e8:	0801ca74 	.word	0x0801ca74
 80179ec:	0801c99c 	.word	0x0801c99c
 80179f0:	0801cb14 	.word	0x0801cb14
 80179f4:	0801cb48 	.word	0x0801cb48

080179f8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b088      	sub	sp, #32
 80179fc:	af04      	add	r7, sp, #16
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a14:	2201      	movs	r2, #1
 8017a16:	9203      	str	r2, [sp, #12]
 8017a18:	68ba      	ldr	r2, [r7, #8]
 8017a1a:	9202      	str	r2, [sp, #8]
 8017a1c:	4a06      	ldr	r2, [pc, #24]	; (8017a38 <etharp_request_dst+0x40>)
 8017a1e:	9201      	str	r2, [sp, #4]
 8017a20:	9300      	str	r3, [sp, #0]
 8017a22:	4603      	mov	r3, r0
 8017a24:	687a      	ldr	r2, [r7, #4]
 8017a26:	68f8      	ldr	r0, [r7, #12]
 8017a28:	f7ff ff5a 	bl	80178e0 <etharp_raw>
 8017a2c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3710      	adds	r7, #16
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
 8017a36:	bf00      	nop
 8017a38:	0801d15c 	.word	0x0801d15c

08017a3c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b082      	sub	sp, #8
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017a46:	4a05      	ldr	r2, [pc, #20]	; (8017a5c <etharp_request+0x20>)
 8017a48:	6839      	ldr	r1, [r7, #0]
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f7ff ffd4 	bl	80179f8 <etharp_request_dst>
 8017a50:	4603      	mov	r3, r0
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3708      	adds	r7, #8
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	0801d154 	.word	0x0801d154

08017a60 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b08e      	sub	sp, #56	; 0x38
 8017a64:	af04      	add	r7, sp, #16
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017a6a:	4b7a      	ldr	r3, [pc, #488]	; (8017c54 <icmp_input+0x1f4>)
 8017a6c:	689b      	ldr	r3, [r3, #8]
 8017a6e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8017a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	f003 030f 	and.w	r3, r3, #15
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	009b      	lsls	r3, r3, #2
 8017a7e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a82:	2b13      	cmp	r3, #19
 8017a84:	f240 80d1 	bls.w	8017c2a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	895b      	ldrh	r3, [r3, #10]
 8017a8c:	2b03      	cmp	r3, #3
 8017a8e:	f240 80ce 	bls.w	8017c2e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017a9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	f000 80bb 	beq.w	8017c1c <icmp_input+0x1bc>
 8017aa6:	2b08      	cmp	r3, #8
 8017aa8:	f040 80bb 	bne.w	8017c22 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8017aac:	4b6a      	ldr	r3, [pc, #424]	; (8017c58 <icmp_input+0x1f8>)
 8017aae:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017ab0:	4b68      	ldr	r3, [pc, #416]	; (8017c54 <icmp_input+0x1f4>)
 8017ab2:	695b      	ldr	r3, [r3, #20]
 8017ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017ab8:	2be0      	cmp	r3, #224	; 0xe0
 8017aba:	f000 80bf 	beq.w	8017c3c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017abe:	4b65      	ldr	r3, [pc, #404]	; (8017c54 <icmp_input+0x1f4>)
 8017ac0:	695a      	ldr	r2, [r3, #20]
 8017ac2:	4b64      	ldr	r3, [pc, #400]	; (8017c54 <icmp_input+0x1f4>)
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	4619      	mov	r1, r3
 8017ac8:	4610      	mov	r0, r2
 8017aca:	f000 fbd1 	bl	8018270 <ip4_addr_isbroadcast_u32>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f040 80b5 	bne.w	8017c40 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	891b      	ldrh	r3, [r3, #8]
 8017ada:	2b07      	cmp	r3, #7
 8017adc:	f240 80a9 	bls.w	8017c32 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017ae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ae2:	330e      	adds	r3, #14
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	b21b      	sxth	r3, r3
 8017ae8:	4619      	mov	r1, r3
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f7f8 ffe8 	bl	8010ac0 <pbuf_header>
 8017af0:	4603      	mov	r3, r0
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d046      	beq.n	8017b84 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	891a      	ldrh	r2, [r3, #8]
 8017afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017afc:	4413      	add	r3, r2
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	2200      	movs	r2, #0
 8017b02:	4619      	mov	r1, r3
 8017b04:	2002      	movs	r0, #2
 8017b06:	f7f8 fc8d 	bl	8010424 <pbuf_alloc>
 8017b0a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8017b0c:	69bb      	ldr	r3, [r7, #24]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	f000 8098 	beq.w	8017c44 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017b14:	69bb      	ldr	r3, [r7, #24]
 8017b16:	895b      	ldrh	r3, [r3, #10]
 8017b18:	461a      	mov	r2, r3
 8017b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b1c:	3308      	adds	r3, #8
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d203      	bcs.n	8017b2a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8017b22:	69b8      	ldr	r0, [r7, #24]
 8017b24:	f7f8 fff0 	bl	8010b08 <pbuf_free>
        goto icmperr;
 8017b28:	e08d      	b.n	8017c46 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8017b2a:	69bb      	ldr	r3, [r7, #24]
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b32:	4618      	mov	r0, r3
 8017b34:	f001 fcb1 	bl	801949a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8017b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b3a:	425b      	negs	r3, r3
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	b21b      	sxth	r3, r3
 8017b40:	4619      	mov	r1, r3
 8017b42:	69b8      	ldr	r0, [r7, #24]
 8017b44:	f7f8 ffbc 	bl	8010ac0 <pbuf_header>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d009      	beq.n	8017b62 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017b4e:	4b43      	ldr	r3, [pc, #268]	; (8017c5c <icmp_input+0x1fc>)
 8017b50:	22af      	movs	r2, #175	; 0xaf
 8017b52:	4943      	ldr	r1, [pc, #268]	; (8017c60 <icmp_input+0x200>)
 8017b54:	4843      	ldr	r0, [pc, #268]	; (8017c64 <icmp_input+0x204>)
 8017b56:	f001 fcb3 	bl	80194c0 <iprintf>
        pbuf_free(r);
 8017b5a:	69b8      	ldr	r0, [r7, #24]
 8017b5c:	f7f8 ffd4 	bl	8010b08 <pbuf_free>
        goto icmperr;
 8017b60:	e071      	b.n	8017c46 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8017b62:	6879      	ldr	r1, [r7, #4]
 8017b64:	69b8      	ldr	r0, [r7, #24]
 8017b66:	f7f9 f8ff 	bl	8010d68 <pbuf_copy>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d003      	beq.n	8017b78 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8017b70:	69b8      	ldr	r0, [r7, #24]
 8017b72:	f7f8 ffc9 	bl	8010b08 <pbuf_free>
        goto icmperr;
 8017b76:	e066      	b.n	8017c46 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8017b78:	6878      	ldr	r0, [r7, #4]
 8017b7a:	f7f8 ffc5 	bl	8010b08 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8017b7e:	69bb      	ldr	r3, [r7, #24]
 8017b80:	607b      	str	r3, [r7, #4]
 8017b82:	e015      	b.n	8017bb0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8017b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b86:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8017b8a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017b8e:	33f2      	adds	r3, #242	; 0xf2
 8017b90:	b29b      	uxth	r3, r3
 8017b92:	b21b      	sxth	r3, r3
 8017b94:	4619      	mov	r1, r3
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f7f8 ff92 	bl	8010ac0 <pbuf_header>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d006      	beq.n	8017bb0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017ba2:	4b2e      	ldr	r3, [pc, #184]	; (8017c5c <icmp_input+0x1fc>)
 8017ba4:	22c0      	movs	r2, #192	; 0xc0
 8017ba6:	4930      	ldr	r1, [pc, #192]	; (8017c68 <icmp_input+0x208>)
 8017ba8:	482e      	ldr	r0, [pc, #184]	; (8017c64 <icmp_input+0x204>)
 8017baa:	f001 fc89 	bl	80194c0 <iprintf>
        goto icmperr;
 8017bae:	e04a      	b.n	8017c46 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8017bb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017bba:	4619      	mov	r1, r3
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f7f8 ff7f 	bl	8010ac0 <pbuf_header>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d12b      	bne.n	8017c20 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8017bce:	69fb      	ldr	r3, [r7, #28]
 8017bd0:	681a      	ldr	r2, [r3, #0]
 8017bd2:	693b      	ldr	r3, [r7, #16]
 8017bd4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017bd6:	4b1f      	ldr	r3, [pc, #124]	; (8017c54 <icmp_input+0x1f4>)
 8017bd8:	691a      	ldr	r2, [r3, #16]
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	2200      	movs	r2, #0
 8017be2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8017be4:	697b      	ldr	r3, [r7, #20]
 8017be6:	2200      	movs	r2, #0
 8017be8:	709a      	strb	r2, [r3, #2]
 8017bea:	2200      	movs	r2, #0
 8017bec:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8017bee:	693b      	ldr	r3, [r7, #16]
 8017bf0:	22ff      	movs	r2, #255	; 0xff
 8017bf2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	729a      	strb	r2, [r3, #10]
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	9302      	str	r3, [sp, #8]
 8017c02:	2301      	movs	r3, #1
 8017c04:	9301      	str	r3, [sp, #4]
 8017c06:	2300      	movs	r3, #0
 8017c08:	9300      	str	r3, [sp, #0]
 8017c0a:	23ff      	movs	r3, #255	; 0xff
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	69f9      	ldr	r1, [r7, #28]
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f000 fa5b 	bl	80180cc <ip4_output_if>
 8017c16:	4603      	mov	r3, r0
 8017c18:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8017c1a:	e001      	b.n	8017c20 <icmp_input+0x1c0>
    break;
 8017c1c:	bf00      	nop
 8017c1e:	e000      	b.n	8017c22 <icmp_input+0x1c2>
    break;
 8017c20:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	f7f8 ff70 	bl	8010b08 <pbuf_free>
  return;
 8017c28:	e011      	b.n	8017c4e <icmp_input+0x1ee>
    goto lenerr;
 8017c2a:	bf00      	nop
 8017c2c:	e002      	b.n	8017c34 <icmp_input+0x1d4>
    goto lenerr;
 8017c2e:	bf00      	nop
 8017c30:	e000      	b.n	8017c34 <icmp_input+0x1d4>
      goto lenerr;
 8017c32:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f7f8 ff67 	bl	8010b08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017c3a:	e008      	b.n	8017c4e <icmp_input+0x1ee>
      goto icmperr;
 8017c3c:	bf00      	nop
 8017c3e:	e002      	b.n	8017c46 <icmp_input+0x1e6>
      goto icmperr;
 8017c40:	bf00      	nop
 8017c42:	e000      	b.n	8017c46 <icmp_input+0x1e6>
        goto icmperr;
 8017c44:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f7f8 ff5e 	bl	8010b08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017c4c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017c4e:	3728      	adds	r7, #40	; 0x28
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	2000d110 	.word	0x2000d110
 8017c58:	2000d124 	.word	0x2000d124
 8017c5c:	0801cb8c 	.word	0x0801cb8c
 8017c60:	0801cbe4 	.word	0x0801cbe4
 8017c64:	0801cc1c 	.word	0x0801cc1c
 8017c68:	0801cc44 	.word	0x0801cc44

08017c6c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	460b      	mov	r3, r1
 8017c76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017c78:	78fb      	ldrb	r3, [r7, #3]
 8017c7a:	461a      	mov	r2, r3
 8017c7c:	2103      	movs	r1, #3
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f000 f814 	bl	8017cac <icmp_send_response>
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	460b      	mov	r3, r1
 8017c96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017c98:	78fb      	ldrb	r3, [r7, #3]
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	210b      	movs	r1, #11
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	f000 f804 	bl	8017cac <icmp_send_response>
}
 8017ca4:	bf00      	nop
 8017ca6:	3708      	adds	r7, #8
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}

08017cac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b08c      	sub	sp, #48	; 0x30
 8017cb0:	af04      	add	r7, sp, #16
 8017cb2:	6078      	str	r0, [r7, #4]
 8017cb4:	460b      	mov	r3, r1
 8017cb6:	70fb      	strb	r3, [r7, #3]
 8017cb8:	4613      	mov	r3, r2
 8017cba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	2124      	movs	r1, #36	; 0x24
 8017cc0:	2001      	movs	r0, #1
 8017cc2:	f7f8 fbaf 	bl	8010424 <pbuf_alloc>
 8017cc6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017cc8:	69fb      	ldr	r3, [r7, #28]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d04c      	beq.n	8017d68 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017cce:	69fb      	ldr	r3, [r7, #28]
 8017cd0:	895b      	ldrh	r3, [r3, #10]
 8017cd2:	2b23      	cmp	r3, #35	; 0x23
 8017cd4:	d806      	bhi.n	8017ce4 <icmp_send_response+0x38>
 8017cd6:	4b26      	ldr	r3, [pc, #152]	; (8017d70 <icmp_send_response+0xc4>)
 8017cd8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017cdc:	4925      	ldr	r1, [pc, #148]	; (8017d74 <icmp_send_response+0xc8>)
 8017cde:	4826      	ldr	r0, [pc, #152]	; (8017d78 <icmp_send_response+0xcc>)
 8017ce0:	f001 fbee 	bl	80194c0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017cea:	69fb      	ldr	r3, [r7, #28]
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	78fa      	ldrb	r2, [r7, #3]
 8017cf4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017cf6:	697b      	ldr	r3, [r7, #20]
 8017cf8:	78ba      	ldrb	r2, [r7, #2]
 8017cfa:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017cfc:	697b      	ldr	r3, [r7, #20]
 8017cfe:	2200      	movs	r2, #0
 8017d00:	711a      	strb	r2, [r3, #4]
 8017d02:	2200      	movs	r2, #0
 8017d04:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	719a      	strb	r2, [r3, #6]
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017d10:	69fb      	ldr	r3, [r7, #28]
 8017d12:	685b      	ldr	r3, [r3, #4]
 8017d14:	f103 0008 	add.w	r0, r3, #8
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	221c      	movs	r2, #28
 8017d1e:	4619      	mov	r1, r3
 8017d20:	f001 fbbb 	bl	801949a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017d24:	69bb      	ldr	r3, [r7, #24]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017d2a:	f107 030c 	add.w	r3, r7, #12
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f000 f824 	bl	8017d7c <ip4_route>
 8017d34:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d011      	beq.n	8017d60 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	2200      	movs	r2, #0
 8017d40:	709a      	strb	r2, [r3, #2]
 8017d42:	2200      	movs	r2, #0
 8017d44:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017d46:	f107 020c 	add.w	r2, r7, #12
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	9302      	str	r3, [sp, #8]
 8017d4e:	2301      	movs	r3, #1
 8017d50:	9301      	str	r3, [sp, #4]
 8017d52:	2300      	movs	r3, #0
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	23ff      	movs	r3, #255	; 0xff
 8017d58:	2100      	movs	r1, #0
 8017d5a:	69f8      	ldr	r0, [r7, #28]
 8017d5c:	f000 f9b6 	bl	80180cc <ip4_output_if>
  }
  pbuf_free(q);
 8017d60:	69f8      	ldr	r0, [r7, #28]
 8017d62:	f7f8 fed1 	bl	8010b08 <pbuf_free>
 8017d66:	e000      	b.n	8017d6a <icmp_send_response+0xbe>
    return;
 8017d68:	bf00      	nop
}
 8017d6a:	3720      	adds	r7, #32
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	0801cb8c 	.word	0x0801cb8c
 8017d74:	0801cc78 	.word	0x0801cc78
 8017d78:	0801cc1c 	.word	0x0801cc1c

08017d7c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	b085      	sub	sp, #20
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017d84:	4b30      	ldr	r3, [pc, #192]	; (8017e48 <ip4_route+0xcc>)
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	60fb      	str	r3, [r7, #12]
 8017d8a:	e036      	b.n	8017dfa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017d92:	f003 0301 	and.w	r3, r3, #1
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d02b      	beq.n	8017df4 <ip4_route+0x78>
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017da2:	089b      	lsrs	r3, r3, #2
 8017da4:	f003 0301 	and.w	r3, r3, #1
 8017da8:	b2db      	uxtb	r3, r3
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d022      	beq.n	8017df4 <ip4_route+0x78>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	3304      	adds	r3, #4
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d01d      	beq.n	8017df4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681a      	ldr	r2, [r3, #0]
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	3304      	adds	r3, #4
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	405a      	eors	r2, r3
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	3308      	adds	r3, #8
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	4013      	ands	r3, r2
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d101      	bne.n	8017dd4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	e033      	b.n	8017e3c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017dda:	f003 0302 	and.w	r3, r3, #2
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d108      	bne.n	8017df4 <ip4_route+0x78>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681a      	ldr	r2, [r3, #0]
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	330c      	adds	r3, #12
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d101      	bne.n	8017df4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	e023      	b.n	8017e3c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	60fb      	str	r3, [r7, #12]
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d1c5      	bne.n	8017d8c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017e00:	4b12      	ldr	r3, [pc, #72]	; (8017e4c <ip4_route+0xd0>)
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d015      	beq.n	8017e34 <ip4_route+0xb8>
 8017e08:	4b10      	ldr	r3, [pc, #64]	; (8017e4c <ip4_route+0xd0>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017e10:	f003 0301 	and.w	r3, r3, #1
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d00d      	beq.n	8017e34 <ip4_route+0xb8>
 8017e18:	4b0c      	ldr	r3, [pc, #48]	; (8017e4c <ip4_route+0xd0>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017e20:	f003 0304 	and.w	r3, r3, #4
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d005      	beq.n	8017e34 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017e28:	4b08      	ldr	r3, [pc, #32]	; (8017e4c <ip4_route+0xd0>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	3304      	adds	r3, #4
 8017e2e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d101      	bne.n	8017e38 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017e34:	2300      	movs	r3, #0
 8017e36:	e001      	b.n	8017e3c <ip4_route+0xc0>
  }

  return netif_default;
 8017e38:	4b04      	ldr	r3, [pc, #16]	; (8017e4c <ip4_route+0xd0>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3714      	adds	r7, #20
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr
 8017e48:	200101bc 	.word	0x200101bc
 8017e4c:	200101c0 	.word	0x200101c0

08017e50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b086      	sub	sp, #24
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
 8017e58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	685b      	ldr	r3, [r3, #4]
 8017e5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	091b      	lsrs	r3, r3, #4
 8017e66:	b2db      	uxtb	r3, r3
 8017e68:	2b04      	cmp	r3, #4
 8017e6a:	d004      	beq.n	8017e76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017e6c:	6878      	ldr	r0, [r7, #4]
 8017e6e:	f7f8 fe4b 	bl	8010b08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017e72:	2300      	movs	r3, #0
 8017e74:	e122      	b.n	80180bc <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	781b      	ldrb	r3, [r3, #0]
 8017e7a:	b29b      	uxth	r3, r3
 8017e7c:	f003 030f 	and.w	r3, r3, #15
 8017e80:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8017e82:	897b      	ldrh	r3, [r7, #10]
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	885b      	ldrh	r3, [r3, #2]
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7f7 fc20 	bl	800f6d4 <lwip_htons>
 8017e94:	4603      	mov	r3, r0
 8017e96:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	891b      	ldrh	r3, [r3, #8]
 8017e9c:	893a      	ldrh	r2, [r7, #8]
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	d204      	bcs.n	8017eac <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8017ea2:	893b      	ldrh	r3, [r7, #8]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7f8 fcba 	bl	8010820 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	895b      	ldrh	r3, [r3, #10]
 8017eb0:	897a      	ldrh	r2, [r7, #10]
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d807      	bhi.n	8017ec6 <ip4_input+0x76>
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	891b      	ldrh	r3, [r3, #8]
 8017eba:	893a      	ldrh	r2, [r7, #8]
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d802      	bhi.n	8017ec6 <ip4_input+0x76>
 8017ec0:	897b      	ldrh	r3, [r7, #10]
 8017ec2:	2b13      	cmp	r3, #19
 8017ec4:	d804      	bhi.n	8017ed0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017ec6:	6878      	ldr	r0, [r7, #4]
 8017ec8:	f7f8 fe1e 	bl	8010b08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	e0f5      	b.n	80180bc <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	691b      	ldr	r3, [r3, #16]
 8017ed4:	4a7b      	ldr	r2, [pc, #492]	; (80180c4 <ip4_input+0x274>)
 8017ed6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	68db      	ldr	r3, [r3, #12]
 8017edc:	4a79      	ldr	r2, [pc, #484]	; (80180c4 <ip4_input+0x274>)
 8017ede:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017ee0:	4b78      	ldr	r3, [pc, #480]	; (80180c4 <ip4_input+0x274>)
 8017ee2:	695b      	ldr	r3, [r3, #20]
 8017ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017ee8:	2be0      	cmp	r3, #224	; 0xe0
 8017eea:	d112      	bne.n	8017f12 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017ef2:	f003 0301 	and.w	r3, r3, #1
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d007      	beq.n	8017f0c <ip4_input+0xbc>
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	3304      	adds	r3, #4
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d002      	beq.n	8017f0c <ip4_input+0xbc>
      netif = inp;
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	613b      	str	r3, [r7, #16]
 8017f0a:	e041      	b.n	8017f90 <ip4_input+0x140>
    } else {
      netif = NULL;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	613b      	str	r3, [r7, #16]
 8017f10:	e03e      	b.n	8017f90 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017f12:	2301      	movs	r3, #1
 8017f14:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017f20:	f003 0301 	and.w	r3, r3, #1
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d014      	beq.n	8017f54 <ip4_input+0x104>
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	3304      	adds	r3, #4
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d00f      	beq.n	8017f54 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f34:	4b63      	ldr	r3, [pc, #396]	; (80180c4 <ip4_input+0x274>)
 8017f36:	695a      	ldr	r2, [r3, #20]
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	3304      	adds	r3, #4
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	429a      	cmp	r2, r3
 8017f40:	d026      	beq.n	8017f90 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017f42:	4b60      	ldr	r3, [pc, #384]	; (80180c4 <ip4_input+0x274>)
 8017f44:	695b      	ldr	r3, [r3, #20]
 8017f46:	6939      	ldr	r1, [r7, #16]
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f000 f991 	bl	8018270 <ip4_addr_isbroadcast_u32>
 8017f4e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d11d      	bne.n	8017f90 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d00d      	beq.n	8017f76 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8017f5a:	4b5a      	ldr	r3, [pc, #360]	; (80180c4 <ip4_input+0x274>)
 8017f5c:	695b      	ldr	r3, [r3, #20]
 8017f5e:	b2db      	uxtb	r3, r3
 8017f60:	2b7f      	cmp	r3, #127	; 0x7f
 8017f62:	d102      	bne.n	8017f6a <ip4_input+0x11a>
          netif = NULL;
 8017f64:	2300      	movs	r3, #0
 8017f66:	613b      	str	r3, [r7, #16]
          break;
 8017f68:	e012      	b.n	8017f90 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8017f6e:	4b56      	ldr	r3, [pc, #344]	; (80180c8 <ip4_input+0x278>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	613b      	str	r3, [r7, #16]
 8017f74:	e002      	b.n	8017f7c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8017f76:	693b      	ldr	r3, [r7, #16]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8017f7c:	693a      	ldr	r2, [r7, #16]
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d102      	bne.n	8017f8a <ip4_input+0x13a>
        netif = netif->next;
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8017f8a:	693b      	ldr	r3, [r7, #16]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d1c4      	bne.n	8017f1a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f90:	4b4c      	ldr	r3, [pc, #304]	; (80180c4 <ip4_input+0x274>)
 8017f92:	691b      	ldr	r3, [r3, #16]
 8017f94:	6839      	ldr	r1, [r7, #0]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f000 f96a 	bl	8018270 <ip4_addr_isbroadcast_u32>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d105      	bne.n	8017fae <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017fa2:	4b48      	ldr	r3, [pc, #288]	; (80180c4 <ip4_input+0x274>)
 8017fa4:	691b      	ldr	r3, [r3, #16]
 8017fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017faa:	2be0      	cmp	r3, #224	; 0xe0
 8017fac:	d104      	bne.n	8017fb8 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	f7f8 fdaa 	bl	8010b08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	e081      	b.n	80180bc <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017fb8:	693b      	ldr	r3, [r7, #16]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d104      	bne.n	8017fc8 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017fbe:	6878      	ldr	r0, [r7, #4]
 8017fc0:	f7f8 fda2 	bl	8010b08 <pbuf_free>
    return ERR_OK;
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	e079      	b.n	80180bc <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	88db      	ldrh	r3, [r3, #6]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	461a      	mov	r2, r3
 8017fd0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017fd4:	4013      	ands	r3, r2
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d00b      	beq.n	8017ff2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f000 fc8e 	bl	80188fc <ip4_reass>
 8017fe0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d101      	bne.n	8017fec <ip4_input+0x19c>
      return ERR_OK;
 8017fe8:	2300      	movs	r3, #0
 8017fea:	e067      	b.n	80180bc <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ff2:	4a34      	ldr	r2, [pc, #208]	; (80180c4 <ip4_input+0x274>)
 8017ff4:	693b      	ldr	r3, [r7, #16]
 8017ff6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ff8:	4a32      	ldr	r2, [pc, #200]	; (80180c4 <ip4_input+0x274>)
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ffe:	4a31      	ldr	r2, [pc, #196]	; (80180c4 <ip4_input+0x274>)
 8018000:	697b      	ldr	r3, [r7, #20]
 8018002:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8018004:	697b      	ldr	r3, [r7, #20]
 8018006:	781b      	ldrb	r3, [r3, #0]
 8018008:	b29b      	uxth	r3, r3
 801800a:	f003 030f 	and.w	r3, r3, #15
 801800e:	b29b      	uxth	r3, r3
 8018010:	009b      	lsls	r3, r3, #2
 8018012:	b29a      	uxth	r2, r3
 8018014:	4b2b      	ldr	r3, [pc, #172]	; (80180c4 <ip4_input+0x274>)
 8018016:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8018018:	897b      	ldrh	r3, [r7, #10]
 801801a:	425b      	negs	r3, r3
 801801c:	b29b      	uxth	r3, r3
 801801e:	b21b      	sxth	r3, r3
 8018020:	4619      	mov	r1, r3
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f7f8 fd4c 	bl	8010ac0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	7a5b      	ldrb	r3, [r3, #9]
 801802c:	2b06      	cmp	r3, #6
 801802e:	d009      	beq.n	8018044 <ip4_input+0x1f4>
 8018030:	2b11      	cmp	r3, #17
 8018032:	d002      	beq.n	801803a <ip4_input+0x1ea>
 8018034:	2b01      	cmp	r3, #1
 8018036:	d00a      	beq.n	801804e <ip4_input+0x1fe>
 8018038:	e00e      	b.n	8018058 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801803a:	6839      	ldr	r1, [r7, #0]
 801803c:	6878      	ldr	r0, [r7, #4]
 801803e:	f7fe fc0b 	bl	8016858 <udp_input>
      break;
 8018042:	e028      	b.n	8018096 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8018044:	6839      	ldr	r1, [r7, #0]
 8018046:	6878      	ldr	r0, [r7, #4]
 8018048:	f7fa fc28 	bl	801289c <tcp_input>
      break;
 801804c:	e023      	b.n	8018096 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801804e:	6839      	ldr	r1, [r7, #0]
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7ff fd05 	bl	8017a60 <icmp_input>
      break;
 8018056:	e01e      	b.n	8018096 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018058:	4b1a      	ldr	r3, [pc, #104]	; (80180c4 <ip4_input+0x274>)
 801805a:	695b      	ldr	r3, [r3, #20]
 801805c:	6939      	ldr	r1, [r7, #16]
 801805e:	4618      	mov	r0, r3
 8018060:	f000 f906 	bl	8018270 <ip4_addr_isbroadcast_u32>
 8018064:	4603      	mov	r3, r0
 8018066:	2b00      	cmp	r3, #0
 8018068:	d112      	bne.n	8018090 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801806a:	4b16      	ldr	r3, [pc, #88]	; (80180c4 <ip4_input+0x274>)
 801806c:	695b      	ldr	r3, [r3, #20]
 801806e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018072:	2be0      	cmp	r3, #224	; 0xe0
 8018074:	d00c      	beq.n	8018090 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8018076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801807a:	4619      	mov	r1, r3
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7f8 fd31 	bl	8010ae4 <pbuf_header_force>
        p->payload = iphdr;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	697a      	ldr	r2, [r7, #20]
 8018086:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018088:	2102      	movs	r1, #2
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f7ff fdee 	bl	8017c6c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	f7f8 fd39 	bl	8010b08 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018096:	4b0b      	ldr	r3, [pc, #44]	; (80180c4 <ip4_input+0x274>)
 8018098:	2200      	movs	r2, #0
 801809a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801809c:	4b09      	ldr	r3, [pc, #36]	; (80180c4 <ip4_input+0x274>)
 801809e:	2200      	movs	r2, #0
 80180a0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80180a2:	4b08      	ldr	r3, [pc, #32]	; (80180c4 <ip4_input+0x274>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80180a8:	4b06      	ldr	r3, [pc, #24]	; (80180c4 <ip4_input+0x274>)
 80180aa:	2200      	movs	r2, #0
 80180ac:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80180ae:	4b05      	ldr	r3, [pc, #20]	; (80180c4 <ip4_input+0x274>)
 80180b0:	2200      	movs	r2, #0
 80180b2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80180b4:	4b03      	ldr	r3, [pc, #12]	; (80180c4 <ip4_input+0x274>)
 80180b6:	2200      	movs	r2, #0
 80180b8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80180ba:	2300      	movs	r3, #0
}
 80180bc:	4618      	mov	r0, r3
 80180be:	3718      	adds	r7, #24
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	2000d110 	.word	0x2000d110
 80180c8:	200101bc 	.word	0x200101bc

080180cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b08a      	sub	sp, #40	; 0x28
 80180d0:	af04      	add	r7, sp, #16
 80180d2:	60f8      	str	r0, [r7, #12]
 80180d4:	60b9      	str	r1, [r7, #8]
 80180d6:	607a      	str	r2, [r7, #4]
 80180d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d009      	beq.n	80180f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d003      	beq.n	80180f2 <ip4_output_if+0x26>
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d102      	bne.n	80180f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80180f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f4:	3304      	adds	r3, #4
 80180f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80180f8:	78fa      	ldrb	r2, [r7, #3]
 80180fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180fc:	9302      	str	r3, [sp, #8]
 80180fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018102:	9301      	str	r3, [sp, #4]
 8018104:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018108:	9300      	str	r3, [sp, #0]
 801810a:	4613      	mov	r3, r2
 801810c:	687a      	ldr	r2, [r7, #4]
 801810e:	6979      	ldr	r1, [r7, #20]
 8018110:	68f8      	ldr	r0, [r7, #12]
 8018112:	f000 f805 	bl	8018120 <ip4_output_if_src>
 8018116:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018118:	4618      	mov	r0, r3
 801811a:	3718      	adds	r7, #24
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}

08018120 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b088      	sub	sp, #32
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	607a      	str	r2, [r7, #4]
 801812c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	89db      	ldrh	r3, [r3, #14]
 8018132:	2b01      	cmp	r3, #1
 8018134:	d006      	beq.n	8018144 <ip4_output_if_src+0x24>
 8018136:	4b48      	ldr	r3, [pc, #288]	; (8018258 <ip4_output_if_src+0x138>)
 8018138:	f240 3233 	movw	r2, #819	; 0x333
 801813c:	4947      	ldr	r1, [pc, #284]	; (801825c <ip4_output_if_src+0x13c>)
 801813e:	4848      	ldr	r0, [pc, #288]	; (8018260 <ip4_output_if_src+0x140>)
 8018140:	f001 f9be 	bl	80194c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d060      	beq.n	801820c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801814a:	2314      	movs	r3, #20
 801814c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801814e:	2114      	movs	r1, #20
 8018150:	68f8      	ldr	r0, [r7, #12]
 8018152:	f7f8 fcb5 	bl	8010ac0 <pbuf_header>
 8018156:	4603      	mov	r3, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	d002      	beq.n	8018162 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801815c:	f06f 0301 	mvn.w	r3, #1
 8018160:	e075      	b.n	801824e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	895b      	ldrh	r3, [r3, #10]
 801816c:	2b13      	cmp	r3, #19
 801816e:	d806      	bhi.n	801817e <ip4_output_if_src+0x5e>
 8018170:	4b39      	ldr	r3, [pc, #228]	; (8018258 <ip4_output_if_src+0x138>)
 8018172:	f240 3261 	movw	r2, #865	; 0x361
 8018176:	493b      	ldr	r1, [pc, #236]	; (8018264 <ip4_output_if_src+0x144>)
 8018178:	4839      	ldr	r0, [pc, #228]	; (8018260 <ip4_output_if_src+0x140>)
 801817a:	f001 f9a1 	bl	80194c0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801817e:	69fb      	ldr	r3, [r7, #28]
 8018180:	78fa      	ldrb	r2, [r7, #3]
 8018182:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018184:	69fb      	ldr	r3, [r7, #28]
 8018186:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801818a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681a      	ldr	r2, [r3, #0]
 8018190:	69fb      	ldr	r3, [r7, #28]
 8018192:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018194:	8b7b      	ldrh	r3, [r7, #26]
 8018196:	089b      	lsrs	r3, r3, #2
 8018198:	b29b      	uxth	r3, r3
 801819a:	b2db      	uxtb	r3, r3
 801819c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181a0:	b2da      	uxtb	r2, r3
 80181a2:	69fb      	ldr	r3, [r7, #28]
 80181a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80181a6:	69fb      	ldr	r3, [r7, #28]
 80181a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80181ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	891b      	ldrh	r3, [r3, #8]
 80181b2:	4618      	mov	r0, r3
 80181b4:	f7f7 fa8e 	bl	800f6d4 <lwip_htons>
 80181b8:	4603      	mov	r3, r0
 80181ba:	461a      	mov	r2, r3
 80181bc:	69fb      	ldr	r3, [r7, #28]
 80181be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80181c0:	69fb      	ldr	r3, [r7, #28]
 80181c2:	2200      	movs	r2, #0
 80181c4:	719a      	strb	r2, [r3, #6]
 80181c6:	2200      	movs	r2, #0
 80181c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80181ca:	4b27      	ldr	r3, [pc, #156]	; (8018268 <ip4_output_if_src+0x148>)
 80181cc:	881b      	ldrh	r3, [r3, #0]
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7f7 fa80 	bl	800f6d4 <lwip_htons>
 80181d4:	4603      	mov	r3, r0
 80181d6:	461a      	mov	r2, r3
 80181d8:	69fb      	ldr	r3, [r7, #28]
 80181da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80181dc:	4b22      	ldr	r3, [pc, #136]	; (8018268 <ip4_output_if_src+0x148>)
 80181de:	881b      	ldrh	r3, [r3, #0]
 80181e0:	3301      	adds	r3, #1
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	4b20      	ldr	r3, [pc, #128]	; (8018268 <ip4_output_if_src+0x148>)
 80181e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d104      	bne.n	80181f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80181ee:	4b1f      	ldr	r3, [pc, #124]	; (801826c <ip4_output_if_src+0x14c>)
 80181f0:	681a      	ldr	r2, [r3, #0]
 80181f2:	69fb      	ldr	r3, [r7, #28]
 80181f4:	60da      	str	r2, [r3, #12]
 80181f6:	e003      	b.n	8018200 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	681a      	ldr	r2, [r3, #0]
 80181fc:	69fb      	ldr	r3, [r7, #28]
 80181fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018200:	69fb      	ldr	r3, [r7, #28]
 8018202:	2200      	movs	r2, #0
 8018204:	729a      	strb	r2, [r3, #10]
 8018206:	2200      	movs	r2, #0
 8018208:	72da      	strb	r2, [r3, #11]
 801820a:	e008      	b.n	801821e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	691b      	ldr	r3, [r3, #16]
 8018216:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018218:	f107 0314 	add.w	r3, r7, #20
 801821c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018220:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018222:	2b00      	cmp	r3, #0
 8018224:	d00c      	beq.n	8018240 <ip4_output_if_src+0x120>
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	891a      	ldrh	r2, [r3, #8]
 801822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801822e:	429a      	cmp	r2, r3
 8018230:	d906      	bls.n	8018240 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018236:	68f8      	ldr	r0, [r7, #12]
 8018238:	f000 fd0a 	bl	8018c50 <ip4_frag>
 801823c:	4603      	mov	r3, r0
 801823e:	e006      	b.n	801824e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018242:	695b      	ldr	r3, [r3, #20]
 8018244:	687a      	ldr	r2, [r7, #4]
 8018246:	68f9      	ldr	r1, [r7, #12]
 8018248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801824a:	4798      	blx	r3
 801824c:	4603      	mov	r3, r0
}
 801824e:	4618      	mov	r0, r3
 8018250:	3720      	adds	r7, #32
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	0801cca4 	.word	0x0801cca4
 801825c:	0801ccfc 	.word	0x0801ccfc
 8018260:	0801cd08 	.word	0x0801cd08
 8018264:	0801cd30 	.word	0x0801cd30
 8018268:	2000c936 	.word	0x2000c936
 801826c:	0801d150 	.word	0x0801d150

08018270 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018270:	b480      	push	{r7}
 8018272:	b085      	sub	sp, #20
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018284:	d002      	beq.n	801828c <ip4_addr_isbroadcast_u32+0x1c>
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d101      	bne.n	8018290 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801828c:	2301      	movs	r3, #1
 801828e:	e02a      	b.n	80182e6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018296:	f003 0302 	and.w	r3, r3, #2
 801829a:	2b00      	cmp	r3, #0
 801829c:	d101      	bne.n	80182a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801829e:	2300      	movs	r3, #0
 80182a0:	e021      	b.n	80182e6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	3304      	adds	r3, #4
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	687a      	ldr	r2, [r7, #4]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d101      	bne.n	80182b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80182ae:	2300      	movs	r3, #0
 80182b0:	e019      	b.n	80182e6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80182b2:	68fa      	ldr	r2, [r7, #12]
 80182b4:	683b      	ldr	r3, [r7, #0]
 80182b6:	3304      	adds	r3, #4
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	405a      	eors	r2, r3
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	3308      	adds	r3, #8
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	4013      	ands	r3, r2
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d10d      	bne.n	80182e4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	3308      	adds	r3, #8
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	43da      	mvns	r2, r3
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	3308      	adds	r3, #8
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80182dc:	429a      	cmp	r2, r3
 80182de:	d101      	bne.n	80182e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80182e0:	2301      	movs	r3, #1
 80182e2:	e000      	b.n	80182e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80182e4:	2300      	movs	r3, #0
  }
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3714      	adds	r7, #20
 80182ea:	46bd      	mov	sp, r7
 80182ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f0:	4770      	bx	lr
	...

080182f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b084      	sub	sp, #16
 80182f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80182fa:	2300      	movs	r3, #0
 80182fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80182fe:	4b12      	ldr	r3, [pc, #72]	; (8018348 <ip_reass_tmr+0x54>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018304:	e018      	b.n	8018338 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	7fdb      	ldrb	r3, [r3, #31]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d00b      	beq.n	8018326 <ip_reass_tmr+0x32>
      r->timer--;
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	7fdb      	ldrb	r3, [r3, #31]
 8018312:	3b01      	subs	r3, #1
 8018314:	b2da      	uxtb	r2, r3
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	60fb      	str	r3, [r7, #12]
 8018324:	e008      	b.n	8018338 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018330:	68b9      	ldr	r1, [r7, #8]
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f000 f80a 	bl	801834c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d1e3      	bne.n	8018306 <ip_reass_tmr+0x12>
     }
   }
}
 801833e:	bf00      	nop
 8018340:	3710      	adds	r7, #16
 8018342:	46bd      	mov	sp, r7
 8018344:	bd80      	pop	{r7, pc}
 8018346:	bf00      	nop
 8018348:	2000c938 	.word	0x2000c938

0801834c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b088      	sub	sp, #32
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018356:	2300      	movs	r3, #0
 8018358:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801835a:	683a      	ldr	r2, [r7, #0]
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	429a      	cmp	r2, r3
 8018360:	d105      	bne.n	801836e <ip_reass_free_complete_datagram+0x22>
 8018362:	4b45      	ldr	r3, [pc, #276]	; (8018478 <ip_reass_free_complete_datagram+0x12c>)
 8018364:	22ab      	movs	r2, #171	; 0xab
 8018366:	4945      	ldr	r1, [pc, #276]	; (801847c <ip_reass_free_complete_datagram+0x130>)
 8018368:	4845      	ldr	r0, [pc, #276]	; (8018480 <ip_reass_free_complete_datagram+0x134>)
 801836a:	f001 f8a9 	bl	80194c0 <iprintf>
  if (prev != NULL) {
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d00a      	beq.n	801838a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	687a      	ldr	r2, [r7, #4]
 801837a:	429a      	cmp	r2, r3
 801837c:	d005      	beq.n	801838a <ip_reass_free_complete_datagram+0x3e>
 801837e:	4b3e      	ldr	r3, [pc, #248]	; (8018478 <ip_reass_free_complete_datagram+0x12c>)
 8018380:	22ad      	movs	r2, #173	; 0xad
 8018382:	4940      	ldr	r1, [pc, #256]	; (8018484 <ip_reass_free_complete_datagram+0x138>)
 8018384:	483e      	ldr	r0, [pc, #248]	; (8018480 <ip_reass_free_complete_datagram+0x134>)
 8018386:	f001 f89b 	bl	80194c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	889b      	ldrh	r3, [r3, #4]
 8018396:	b29b      	uxth	r3, r3
 8018398:	2b00      	cmp	r3, #0
 801839a:	d12a      	bne.n	80183f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	685b      	ldr	r3, [r3, #4]
 80183a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	681a      	ldr	r2, [r3, #0]
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80183aa:	69bb      	ldr	r3, [r7, #24]
 80183ac:	6858      	ldr	r0, [r3, #4]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	3308      	adds	r3, #8
 80183b2:	2214      	movs	r2, #20
 80183b4:	4619      	mov	r1, r3
 80183b6:	f001 f870 	bl	801949a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80183ba:	2101      	movs	r1, #1
 80183bc:	69b8      	ldr	r0, [r7, #24]
 80183be:	f7ff fc65 	bl	8017c8c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80183c2:	69b8      	ldr	r0, [r7, #24]
 80183c4:	f7f8 fc3a 	bl	8010c3c <pbuf_clen>
 80183c8:	4603      	mov	r3, r0
 80183ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80183cc:	8bfa      	ldrh	r2, [r7, #30]
 80183ce:	8a7b      	ldrh	r3, [r7, #18]
 80183d0:	4413      	add	r3, r2
 80183d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183d6:	db05      	blt.n	80183e4 <ip_reass_free_complete_datagram+0x98>
 80183d8:	4b27      	ldr	r3, [pc, #156]	; (8018478 <ip_reass_free_complete_datagram+0x12c>)
 80183da:	22bc      	movs	r2, #188	; 0xbc
 80183dc:	492a      	ldr	r1, [pc, #168]	; (8018488 <ip_reass_free_complete_datagram+0x13c>)
 80183de:	4828      	ldr	r0, [pc, #160]	; (8018480 <ip_reass_free_complete_datagram+0x134>)
 80183e0:	f001 f86e 	bl	80194c0 <iprintf>
    pbufs_freed += clen;
 80183e4:	8bfa      	ldrh	r2, [r7, #30]
 80183e6:	8a7b      	ldrh	r3, [r7, #18]
 80183e8:	4413      	add	r3, r2
 80183ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80183ec:	69b8      	ldr	r0, [r7, #24]
 80183ee:	f7f8 fb8b 	bl	8010b08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80183f8:	e01f      	b.n	801843a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80183fa:	69bb      	ldr	r3, [r7, #24]
 80183fc:	685b      	ldr	r3, [r3, #4]
 80183fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018400:	69bb      	ldr	r3, [r7, #24]
 8018402:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801840a:	68f8      	ldr	r0, [r7, #12]
 801840c:	f7f8 fc16 	bl	8010c3c <pbuf_clen>
 8018410:	4603      	mov	r3, r0
 8018412:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018414:	8bfa      	ldrh	r2, [r7, #30]
 8018416:	8a7b      	ldrh	r3, [r7, #18]
 8018418:	4413      	add	r3, r2
 801841a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801841e:	db05      	blt.n	801842c <ip_reass_free_complete_datagram+0xe0>
 8018420:	4b15      	ldr	r3, [pc, #84]	; (8018478 <ip_reass_free_complete_datagram+0x12c>)
 8018422:	22cc      	movs	r2, #204	; 0xcc
 8018424:	4918      	ldr	r1, [pc, #96]	; (8018488 <ip_reass_free_complete_datagram+0x13c>)
 8018426:	4816      	ldr	r0, [pc, #88]	; (8018480 <ip_reass_free_complete_datagram+0x134>)
 8018428:	f001 f84a 	bl	80194c0 <iprintf>
    pbufs_freed += clen;
 801842c:	8bfa      	ldrh	r2, [r7, #30]
 801842e:	8a7b      	ldrh	r3, [r7, #18]
 8018430:	4413      	add	r3, r2
 8018432:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018434:	68f8      	ldr	r0, [r7, #12]
 8018436:	f7f8 fb67 	bl	8010b08 <pbuf_free>
  while (p != NULL) {
 801843a:	69bb      	ldr	r3, [r7, #24]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1dc      	bne.n	80183fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018440:	6839      	ldr	r1, [r7, #0]
 8018442:	6878      	ldr	r0, [r7, #4]
 8018444:	f000 f8c2 	bl	80185cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8018448:	4b10      	ldr	r3, [pc, #64]	; (801848c <ip_reass_free_complete_datagram+0x140>)
 801844a:	881b      	ldrh	r3, [r3, #0]
 801844c:	8bfa      	ldrh	r2, [r7, #30]
 801844e:	429a      	cmp	r2, r3
 8018450:	d905      	bls.n	801845e <ip_reass_free_complete_datagram+0x112>
 8018452:	4b09      	ldr	r3, [pc, #36]	; (8018478 <ip_reass_free_complete_datagram+0x12c>)
 8018454:	22d2      	movs	r2, #210	; 0xd2
 8018456:	490e      	ldr	r1, [pc, #56]	; (8018490 <ip_reass_free_complete_datagram+0x144>)
 8018458:	4809      	ldr	r0, [pc, #36]	; (8018480 <ip_reass_free_complete_datagram+0x134>)
 801845a:	f001 f831 	bl	80194c0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801845e:	4b0b      	ldr	r3, [pc, #44]	; (801848c <ip_reass_free_complete_datagram+0x140>)
 8018460:	881a      	ldrh	r2, [r3, #0]
 8018462:	8bfb      	ldrh	r3, [r7, #30]
 8018464:	1ad3      	subs	r3, r2, r3
 8018466:	b29a      	uxth	r2, r3
 8018468:	4b08      	ldr	r3, [pc, #32]	; (801848c <ip_reass_free_complete_datagram+0x140>)
 801846a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801846c:	8bfb      	ldrh	r3, [r7, #30]
}
 801846e:	4618      	mov	r0, r3
 8018470:	3720      	adds	r7, #32
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}
 8018476:	bf00      	nop
 8018478:	0801cd60 	.word	0x0801cd60
 801847c:	0801cdbc 	.word	0x0801cdbc
 8018480:	0801cdc8 	.word	0x0801cdc8
 8018484:	0801cdf0 	.word	0x0801cdf0
 8018488:	0801ce04 	.word	0x0801ce04
 801848c:	2000c93c 	.word	0x2000c93c
 8018490:	0801ce24 	.word	0x0801ce24

08018494 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b08a      	sub	sp, #40	; 0x28
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801849e:	2300      	movs	r3, #0
 80184a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80184a2:	2300      	movs	r3, #0
 80184a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80184a6:	2300      	movs	r3, #0
 80184a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80184aa:	2300      	movs	r3, #0
 80184ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80184ae:	2300      	movs	r3, #0
 80184b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80184b2:	4b28      	ldr	r3, [pc, #160]	; (8018554 <ip_reass_remove_oldest_datagram+0xc0>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80184b8:	e030      	b.n	801851c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80184ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184bc:	695a      	ldr	r2, [r3, #20]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	68db      	ldr	r3, [r3, #12]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d10c      	bne.n	80184e0 <ip_reass_remove_oldest_datagram+0x4c>
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	699a      	ldr	r2, [r3, #24]
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	691b      	ldr	r3, [r3, #16]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	d106      	bne.n	80184e0 <ip_reass_remove_oldest_datagram+0x4c>
 80184d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d4:	899a      	ldrh	r2, [r3, #12]
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	889b      	ldrh	r3, [r3, #4]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	429a      	cmp	r2, r3
 80184de:	d014      	beq.n	801850a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	3301      	adds	r3, #1
 80184e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80184e6:	6a3b      	ldr	r3, [r7, #32]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d104      	bne.n	80184f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80184f0:	69fb      	ldr	r3, [r7, #28]
 80184f2:	61bb      	str	r3, [r7, #24]
 80184f4:	e009      	b.n	801850a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80184f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f8:	7fda      	ldrb	r2, [r3, #31]
 80184fa:	6a3b      	ldr	r3, [r7, #32]
 80184fc:	7fdb      	ldrb	r3, [r3, #31]
 80184fe:	429a      	cmp	r2, r3
 8018500:	d803      	bhi.n	801850a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018504:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018506:	69fb      	ldr	r3, [r7, #28]
 8018508:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d001      	beq.n	8018516 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018514:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801851e:	2b00      	cmp	r3, #0
 8018520:	d1cb      	bne.n	80184ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018522:	6a3b      	ldr	r3, [r7, #32]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d008      	beq.n	801853a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018528:	69b9      	ldr	r1, [r7, #24]
 801852a:	6a38      	ldr	r0, [r7, #32]
 801852c:	f7ff ff0e 	bl	801834c <ip_reass_free_complete_datagram>
 8018530:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018532:	697a      	ldr	r2, [r7, #20]
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	4413      	add	r3, r2
 8018538:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801853a:	697a      	ldr	r2, [r7, #20]
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	429a      	cmp	r2, r3
 8018540:	da02      	bge.n	8018548 <ip_reass_remove_oldest_datagram+0xb4>
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	2b01      	cmp	r3, #1
 8018546:	dcac      	bgt.n	80184a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018548:	697b      	ldr	r3, [r7, #20]
}
 801854a:	4618      	mov	r0, r3
 801854c:	3728      	adds	r7, #40	; 0x28
 801854e:	46bd      	mov	sp, r7
 8018550:	bd80      	pop	{r7, pc}
 8018552:	bf00      	nop
 8018554:	2000c938 	.word	0x2000c938

08018558 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018562:	2004      	movs	r0, #4
 8018564:	f7f7 fcc2 	bl	800feec <memp_malloc>
 8018568:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d110      	bne.n	8018592 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018570:	6839      	ldr	r1, [r7, #0]
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f7ff ff8e 	bl	8018494 <ip_reass_remove_oldest_datagram>
 8018578:	4602      	mov	r2, r0
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	4293      	cmp	r3, r2
 801857e:	dc03      	bgt.n	8018588 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018580:	2004      	movs	r0, #4
 8018582:	f7f7 fcb3 	bl	800feec <memp_malloc>
 8018586:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d101      	bne.n	8018592 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801858e:	2300      	movs	r3, #0
 8018590:	e016      	b.n	80185c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018592:	2220      	movs	r2, #32
 8018594:	2100      	movs	r1, #0
 8018596:	68f8      	ldr	r0, [r7, #12]
 8018598:	f000 ff8a 	bl	80194b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2203      	movs	r2, #3
 80185a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80185a2:	4b09      	ldr	r3, [pc, #36]	; (80185c8 <ip_reass_enqueue_new_datagram+0x70>)
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80185aa:	4a07      	ldr	r2, [pc, #28]	; (80185c8 <ip_reass_enqueue_new_datagram+0x70>)
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	3308      	adds	r3, #8
 80185b4:	2214      	movs	r2, #20
 80185b6:	6879      	ldr	r1, [r7, #4]
 80185b8:	4618      	mov	r0, r3
 80185ba:	f000 ff6e 	bl	801949a <memcpy>
  return ipr;
 80185be:	68fb      	ldr	r3, [r7, #12]
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	3710      	adds	r7, #16
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bd80      	pop	{r7, pc}
 80185c8:	2000c938 	.word	0x2000c938

080185cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b082      	sub	sp, #8
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
 80185d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80185d6:	4b10      	ldr	r3, [pc, #64]	; (8018618 <ip_reass_dequeue_datagram+0x4c>)
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	687a      	ldr	r2, [r7, #4]
 80185dc:	429a      	cmp	r2, r3
 80185de:	d104      	bne.n	80185ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	4a0c      	ldr	r2, [pc, #48]	; (8018618 <ip_reass_dequeue_datagram+0x4c>)
 80185e6:	6013      	str	r3, [r2, #0]
 80185e8:	e00d      	b.n	8018606 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d106      	bne.n	80185fe <ip_reass_dequeue_datagram+0x32>
 80185f0:	4b0a      	ldr	r3, [pc, #40]	; (801861c <ip_reass_dequeue_datagram+0x50>)
 80185f2:	f240 1245 	movw	r2, #325	; 0x145
 80185f6:	490a      	ldr	r1, [pc, #40]	; (8018620 <ip_reass_dequeue_datagram+0x54>)
 80185f8:	480a      	ldr	r0, [pc, #40]	; (8018624 <ip_reass_dequeue_datagram+0x58>)
 80185fa:	f000 ff61 	bl	80194c0 <iprintf>
    prev->next = ipr->next;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681a      	ldr	r2, [r3, #0]
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018606:	6879      	ldr	r1, [r7, #4]
 8018608:	2004      	movs	r0, #4
 801860a:	f7f7 fce5 	bl	800ffd8 <memp_free>
}
 801860e:	bf00      	nop
 8018610:	3708      	adds	r7, #8
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	2000c938 	.word	0x2000c938
 801861c:	0801cd60 	.word	0x0801cd60
 8018620:	0801ce40 	.word	0x0801ce40
 8018624:	0801cdc8 	.word	0x0801cdc8

08018628 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b08c      	sub	sp, #48	; 0x30
 801862c:	af00      	add	r7, sp, #0
 801862e:	60f8      	str	r0, [r7, #12]
 8018630:	60b9      	str	r1, [r7, #8]
 8018632:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8018634:	2300      	movs	r3, #0
 8018636:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018638:	2301      	movs	r3, #1
 801863a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	685b      	ldr	r3, [r3, #4]
 8018640:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018642:	69fb      	ldr	r3, [r7, #28]
 8018644:	885b      	ldrh	r3, [r3, #2]
 8018646:	b29b      	uxth	r3, r3
 8018648:	4618      	mov	r0, r3
 801864a:	f7f7 f843 	bl	800f6d4 <lwip_htons>
 801864e:	4603      	mov	r3, r0
 8018650:	461a      	mov	r2, r3
 8018652:	69fb      	ldr	r3, [r7, #28]
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	b29b      	uxth	r3, r3
 8018658:	f003 030f 	and.w	r3, r3, #15
 801865c:	b29b      	uxth	r3, r3
 801865e:	009b      	lsls	r3, r3, #2
 8018660:	b29b      	uxth	r3, r3
 8018662:	1ad3      	subs	r3, r2, r3
 8018664:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8018666:	69fb      	ldr	r3, [r7, #28]
 8018668:	88db      	ldrh	r3, [r3, #6]
 801866a:	b29b      	uxth	r3, r3
 801866c:	4618      	mov	r0, r3
 801866e:	f7f7 f831 	bl	800f6d4 <lwip_htons>
 8018672:	4603      	mov	r3, r0
 8018674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018678:	b29b      	uxth	r3, r3
 801867a:	00db      	lsls	r3, r3, #3
 801867c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	685b      	ldr	r3, [r3, #4]
 8018682:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018686:	2200      	movs	r2, #0
 8018688:	701a      	strb	r2, [r3, #0]
 801868a:	2200      	movs	r2, #0
 801868c:	705a      	strb	r2, [r3, #1]
 801868e:	2200      	movs	r2, #0
 8018690:	709a      	strb	r2, [r3, #2]
 8018692:	2200      	movs	r2, #0
 8018694:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018698:	8b3a      	ldrh	r2, [r7, #24]
 801869a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801869c:	8b3a      	ldrh	r2, [r7, #24]
 801869e:	8b7b      	ldrh	r3, [r7, #26]
 80186a0:	4413      	add	r3, r2
 80186a2:	b29a      	uxth	r2, r3
 80186a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	685b      	ldr	r3, [r3, #4]
 80186ac:	627b      	str	r3, [r7, #36]	; 0x24
 80186ae:	e061      	b.n	8018774 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80186b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80186b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b8:	889b      	ldrh	r3, [r3, #4]
 80186ba:	b29a      	uxth	r2, r3
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	889b      	ldrh	r3, [r3, #4]
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d232      	bcs.n	801872c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80186c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186ca:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80186cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d01f      	beq.n	8018712 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80186d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d4:	889b      	ldrh	r3, [r3, #4]
 80186d6:	b29a      	uxth	r2, r3
 80186d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186da:	88db      	ldrh	r3, [r3, #6]
 80186dc:	b29b      	uxth	r3, r3
 80186de:	429a      	cmp	r2, r3
 80186e0:	f0c0 80e3 	bcc.w	80188aa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80186e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e6:	88db      	ldrh	r3, [r3, #6]
 80186e8:	b29a      	uxth	r2, r3
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	889b      	ldrh	r3, [r3, #4]
 80186ee:	b29b      	uxth	r3, r3
 80186f0:	429a      	cmp	r2, r3
 80186f2:	f200 80da 	bhi.w	80188aa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80186f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f8:	68ba      	ldr	r2, [r7, #8]
 80186fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80186fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fe:	88db      	ldrh	r3, [r3, #6]
 8018700:	b29a      	uxth	r2, r3
 8018702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018704:	889b      	ldrh	r3, [r3, #4]
 8018706:	b29b      	uxth	r3, r3
 8018708:	429a      	cmp	r2, r3
 801870a:	d037      	beq.n	801877c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801870c:	2300      	movs	r3, #0
 801870e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018710:	e034      	b.n	801877c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8018712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018714:	88db      	ldrh	r3, [r3, #6]
 8018716:	b29a      	uxth	r2, r3
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	889b      	ldrh	r3, [r3, #4]
 801871c:	b29b      	uxth	r3, r3
 801871e:	429a      	cmp	r2, r3
 8018720:	f200 80c5 	bhi.w	80188ae <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	68ba      	ldr	r2, [r7, #8]
 8018728:	605a      	str	r2, [r3, #4]
      break;
 801872a:	e027      	b.n	801877c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801872e:	889b      	ldrh	r3, [r3, #4]
 8018730:	b29a      	uxth	r2, r3
 8018732:	697b      	ldr	r3, [r7, #20]
 8018734:	889b      	ldrh	r3, [r3, #4]
 8018736:	b29b      	uxth	r3, r3
 8018738:	429a      	cmp	r2, r3
 801873a:	f000 80ba 	beq.w	80188b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018740:	889b      	ldrh	r3, [r3, #4]
 8018742:	b29a      	uxth	r2, r3
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	88db      	ldrh	r3, [r3, #6]
 8018748:	b29b      	uxth	r3, r3
 801874a:	429a      	cmp	r2, r3
 801874c:	f0c0 80b3 	bcc.w	80188b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018752:	2b00      	cmp	r3, #0
 8018754:	d009      	beq.n	801876a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8018756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018758:	88db      	ldrh	r3, [r3, #6]
 801875a:	b29a      	uxth	r2, r3
 801875c:	697b      	ldr	r3, [r7, #20]
 801875e:	889b      	ldrh	r3, [r3, #4]
 8018760:	b29b      	uxth	r3, r3
 8018762:	429a      	cmp	r2, r3
 8018764:	d001      	beq.n	801876a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018766:	2300      	movs	r3, #0
 8018768:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801876a:	697b      	ldr	r3, [r7, #20]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018776:	2b00      	cmp	r3, #0
 8018778:	d19a      	bne.n	80186b0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801877a:	e000      	b.n	801877e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801877c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018780:	2b00      	cmp	r3, #0
 8018782:	d12d      	bne.n	80187e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8018784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018786:	2b00      	cmp	r3, #0
 8018788:	d01c      	beq.n	80187c4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878c:	88db      	ldrh	r3, [r3, #6]
 801878e:	b29a      	uxth	r2, r3
 8018790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018792:	889b      	ldrh	r3, [r3, #4]
 8018794:	b29b      	uxth	r3, r3
 8018796:	429a      	cmp	r2, r3
 8018798:	d906      	bls.n	80187a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801879a:	4b51      	ldr	r3, [pc, #324]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801879c:	f240 12ab 	movw	r2, #427	; 0x1ab
 80187a0:	4950      	ldr	r1, [pc, #320]	; (80188e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187a2:	4851      	ldr	r0, [pc, #324]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80187a4:	f000 fe8c 	bl	80194c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80187a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187aa:	68ba      	ldr	r2, [r7, #8]
 80187ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80187ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b0:	88db      	ldrh	r3, [r3, #6]
 80187b2:	b29a      	uxth	r2, r3
 80187b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b6:	889b      	ldrh	r3, [r3, #4]
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	429a      	cmp	r2, r3
 80187bc:	d010      	beq.n	80187e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80187be:	2300      	movs	r3, #0
 80187c0:	623b      	str	r3, [r7, #32]
 80187c2:	e00d      	b.n	80187e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	685b      	ldr	r3, [r3, #4]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d006      	beq.n	80187da <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80187cc:	4b44      	ldr	r3, [pc, #272]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80187ce:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80187d2:	4946      	ldr	r1, [pc, #280]	; (80188ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187d4:	4844      	ldr	r0, [pc, #272]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80187d6:	f000 fe73 	bl	80194c0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	68ba      	ldr	r2, [r7, #8]
 80187de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d105      	bne.n	80187f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	7f9b      	ldrb	r3, [r3, #30]
 80187ea:	f003 0301 	and.w	r3, r3, #1
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d059      	beq.n	80188a6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d04f      	beq.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d006      	beq.n	801880e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	685b      	ldr	r3, [r3, #4]
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	889b      	ldrh	r3, [r3, #4]
 8018808:	b29b      	uxth	r3, r3
 801880a:	2b00      	cmp	r3, #0
 801880c:	d002      	beq.n	8018814 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801880e:	2300      	movs	r3, #0
 8018810:	623b      	str	r3, [r7, #32]
 8018812:	e041      	b.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018816:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801881e:	e012      	b.n	8018846 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8018820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018822:	685b      	ldr	r3, [r3, #4]
 8018824:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018828:	88db      	ldrh	r3, [r3, #6]
 801882a:	b29a      	uxth	r2, r3
 801882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801882e:	889b      	ldrh	r3, [r3, #4]
 8018830:	b29b      	uxth	r3, r3
 8018832:	429a      	cmp	r2, r3
 8018834:	d002      	beq.n	801883c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8018836:	2300      	movs	r3, #0
 8018838:	623b      	str	r3, [r7, #32]
            break;
 801883a:	e007      	b.n	801884c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801883e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018848:	2b00      	cmp	r3, #0
 801884a:	d1e9      	bne.n	8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801884c:	6a3b      	ldr	r3, [r7, #32]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d022      	beq.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d106      	bne.n	8018868 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801885a:	4b21      	ldr	r3, [pc, #132]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801885c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8018860:	4923      	ldr	r1, [pc, #140]	; (80188f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018862:	4821      	ldr	r0, [pc, #132]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018864:	f000 fe2c 	bl	80194c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018870:	429a      	cmp	r2, r3
 8018872:	d106      	bne.n	8018882 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8018874:	4b1a      	ldr	r3, [pc, #104]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018876:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801887a:	491d      	ldr	r1, [pc, #116]	; (80188f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801887c:	481a      	ldr	r0, [pc, #104]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801887e:	f000 fe1f 	bl	80194c0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d006      	beq.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801888a:	4b15      	ldr	r3, [pc, #84]	; (80188e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801888c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018890:	4918      	ldr	r1, [pc, #96]	; (80188f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018892:	4815      	ldr	r0, [pc, #84]	; (80188e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018894:	f000 fe14 	bl	80194c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018898:	6a3b      	ldr	r3, [r7, #32]
 801889a:	2b00      	cmp	r3, #0
 801889c:	bf14      	ite	ne
 801889e:	2301      	movne	r3, #1
 80188a0:	2300      	moveq	r3, #0
 80188a2:	b2db      	uxtb	r3, r3
 80188a4:	e018      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80188a6:	2300      	movs	r3, #0
 80188a8:	e016      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80188aa:	bf00      	nop
 80188ac:	e004      	b.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80188ae:	bf00      	nop
 80188b0:	e002      	b.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80188b2:	bf00      	nop
 80188b4:	e000      	b.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80188b6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80188b8:	68b8      	ldr	r0, [r7, #8]
 80188ba:	f7f8 f9bf 	bl	8010c3c <pbuf_clen>
 80188be:	4603      	mov	r3, r0
 80188c0:	461a      	mov	r2, r3
 80188c2:	4b0d      	ldr	r3, [pc, #52]	; (80188f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80188c4:	881b      	ldrh	r3, [r3, #0]
 80188c6:	1a9b      	subs	r3, r3, r2
 80188c8:	b29a      	uxth	r2, r3
 80188ca:	4b0b      	ldr	r3, [pc, #44]	; (80188f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80188cc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80188ce:	68b8      	ldr	r0, [r7, #8]
 80188d0:	f7f8 f91a 	bl	8010b08 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80188d4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3730      	adds	r7, #48	; 0x30
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	0801cd60 	.word	0x0801cd60
 80188e4:	0801ce5c 	.word	0x0801ce5c
 80188e8:	0801cdc8 	.word	0x0801cdc8
 80188ec:	0801ce7c 	.word	0x0801ce7c
 80188f0:	0801ceb4 	.word	0x0801ceb4
 80188f4:	0801cec4 	.word	0x0801cec4
 80188f8:	2000c93c 	.word	0x2000c93c

080188fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b08e      	sub	sp, #56	; 0x38
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801890c:	781b      	ldrb	r3, [r3, #0]
 801890e:	f003 030f 	and.w	r3, r3, #15
 8018912:	009b      	lsls	r3, r3, #2
 8018914:	2b14      	cmp	r3, #20
 8018916:	f040 8131 	bne.w	8018b7c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891c:	88db      	ldrh	r3, [r3, #6]
 801891e:	b29b      	uxth	r3, r3
 8018920:	4618      	mov	r0, r3
 8018922:	f7f6 fed7 	bl	800f6d4 <lwip_htons>
 8018926:	4603      	mov	r3, r0
 8018928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801892c:	b29b      	uxth	r3, r3
 801892e:	00db      	lsls	r3, r3, #3
 8018930:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018934:	885b      	ldrh	r3, [r3, #2]
 8018936:	b29b      	uxth	r3, r3
 8018938:	4618      	mov	r0, r3
 801893a:	f7f6 fecb 	bl	800f6d4 <lwip_htons>
 801893e:	4603      	mov	r3, r0
 8018940:	461a      	mov	r2, r3
 8018942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	b29b      	uxth	r3, r3
 8018948:	f003 030f 	and.w	r3, r3, #15
 801894c:	b29b      	uxth	r3, r3
 801894e:	009b      	lsls	r3, r3, #2
 8018950:	b29b      	uxth	r3, r3
 8018952:	1ad3      	subs	r3, r2, r3
 8018954:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018956:	6878      	ldr	r0, [r7, #4]
 8018958:	f7f8 f970 	bl	8010c3c <pbuf_clen>
 801895c:	4603      	mov	r3, r0
 801895e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018960:	4b8d      	ldr	r3, [pc, #564]	; (8018b98 <ip4_reass+0x29c>)
 8018962:	881b      	ldrh	r3, [r3, #0]
 8018964:	461a      	mov	r2, r3
 8018966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018968:	4413      	add	r3, r2
 801896a:	2b0a      	cmp	r3, #10
 801896c:	dd10      	ble.n	8018990 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801896e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018970:	4619      	mov	r1, r3
 8018972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018974:	f7ff fd8e 	bl	8018494 <ip_reass_remove_oldest_datagram>
 8018978:	4603      	mov	r3, r0
 801897a:	2b00      	cmp	r3, #0
 801897c:	f000 8100 	beq.w	8018b80 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018980:	4b85      	ldr	r3, [pc, #532]	; (8018b98 <ip4_reass+0x29c>)
 8018982:	881b      	ldrh	r3, [r3, #0]
 8018984:	461a      	mov	r2, r3
 8018986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018988:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801898a:	2b0a      	cmp	r3, #10
 801898c:	f300 80f8 	bgt.w	8018b80 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018990:	4b82      	ldr	r3, [pc, #520]	; (8018b9c <ip4_reass+0x2a0>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	633b      	str	r3, [r7, #48]	; 0x30
 8018996:	e015      	b.n	80189c4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801899a:	695a      	ldr	r2, [r3, #20]
 801899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899e:	68db      	ldr	r3, [r3, #12]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d10c      	bne.n	80189be <ip4_reass+0xc2>
 80189a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189a6:	699a      	ldr	r2, [r3, #24]
 80189a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189aa:	691b      	ldr	r3, [r3, #16]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d106      	bne.n	80189be <ip4_reass+0xc2>
 80189b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189b2:	899a      	ldrh	r2, [r3, #12]
 80189b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b6:	889b      	ldrh	r3, [r3, #4]
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	429a      	cmp	r2, r3
 80189bc:	d006      	beq.n	80189cc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	633b      	str	r3, [r7, #48]	; 0x30
 80189c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d1e6      	bne.n	8018998 <ip4_reass+0x9c>
 80189ca:	e000      	b.n	80189ce <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80189cc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80189ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d109      	bne.n	80189e8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80189d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189d6:	4619      	mov	r1, r3
 80189d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189da:	f7ff fdbd 	bl	8018558 <ip_reass_enqueue_new_datagram>
 80189de:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80189e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d11c      	bne.n	8018a20 <ip4_reass+0x124>
      goto nullreturn;
 80189e6:	e0ce      	b.n	8018b86 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80189e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ea:	88db      	ldrh	r3, [r3, #6]
 80189ec:	b29b      	uxth	r3, r3
 80189ee:	4618      	mov	r0, r3
 80189f0:	f7f6 fe70 	bl	800f6d4 <lwip_htons>
 80189f4:	4603      	mov	r3, r0
 80189f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d110      	bne.n	8018a20 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80189fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a00:	89db      	ldrh	r3, [r3, #14]
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7f6 fe66 	bl	800f6d4 <lwip_htons>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d006      	beq.n	8018a20 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a14:	3308      	adds	r3, #8
 8018a16:	2214      	movs	r2, #20
 8018a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f000 fd3d 	bl	801949a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a22:	88db      	ldrh	r3, [r3, #6]
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	f003 0320 	and.w	r3, r3, #32
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	bf0c      	ite	eq
 8018a2e:	2301      	moveq	r3, #1
 8018a30:	2300      	movne	r3, #0
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018a36:	69fb      	ldr	r3, [r7, #28]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d00e      	beq.n	8018a5a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a40:	4413      	add	r3, r2
 8018a42:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018a44:	8b7a      	ldrh	r2, [r7, #26]
 8018a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	f0c0 8099 	bcc.w	8018b80 <ip4_reass+0x284>
 8018a4e:	8b7b      	ldrh	r3, [r7, #26]
 8018a50:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018a54:	4293      	cmp	r3, r2
 8018a56:	f200 8093 	bhi.w	8018b80 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018a5a:	69fa      	ldr	r2, [r7, #28]
 8018a5c:	6879      	ldr	r1, [r7, #4]
 8018a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a60:	f7ff fde2 	bl	8018628 <ip_reass_chain_frag_into_datagram_and_validate>
 8018a64:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018a66:	697b      	ldr	r3, [r7, #20]
 8018a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a6c:	f000 808a 	beq.w	8018b84 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018a70:	4b49      	ldr	r3, [pc, #292]	; (8018b98 <ip4_reass+0x29c>)
 8018a72:	881a      	ldrh	r2, [r3, #0]
 8018a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a76:	4413      	add	r3, r2
 8018a78:	b29a      	uxth	r2, r3
 8018a7a:	4b47      	ldr	r3, [pc, #284]	; (8018b98 <ip4_reass+0x29c>)
 8018a7c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018a7e:	69fb      	ldr	r3, [r7, #28]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d00d      	beq.n	8018aa0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a88:	4413      	add	r3, r2
 8018a8a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a8e:	8a7a      	ldrh	r2, [r7, #18]
 8018a90:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a94:	7f9b      	ldrb	r3, [r3, #30]
 8018a96:	f043 0301 	orr.w	r3, r3, #1
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	2b01      	cmp	r3, #1
 8018aa4:	d168      	bne.n	8018b78 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8018aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa8:	8b9b      	ldrh	r3, [r3, #28]
 8018aaa:	3314      	adds	r3, #20
 8018aac:	b29a      	uxth	r2, r3
 8018aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8018ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	685b      	ldr	r3, [r3, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8018abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abe:	685b      	ldr	r3, [r3, #4]
 8018ac0:	685b      	ldr	r3, [r3, #4]
 8018ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac6:	3308      	adds	r3, #8
 8018ac8:	2214      	movs	r2, #20
 8018aca:	4619      	mov	r1, r3
 8018acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ace:	f000 fce4 	bl	801949a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8018ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad4:	8b9b      	ldrh	r3, [r3, #28]
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7f6 fdfc 	bl	800f6d4 <lwip_htons>
 8018adc:	4603      	mov	r3, r0
 8018ade:	461a      	mov	r2, r3
 8018ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	719a      	strb	r2, [r3, #6]
 8018aea:	2200      	movs	r2, #0
 8018aec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af0:	2200      	movs	r2, #0
 8018af2:	729a      	strb	r2, [r3, #10]
 8018af4:	2200      	movs	r2, #0
 8018af6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018afe:	e00e      	b.n	8018b1e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8018b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8018b06:	f06f 0113 	mvn.w	r1, #19
 8018b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018b0c:	f7f7 ffd8 	bl	8010ac0 <pbuf_header>
      pbuf_cat(p, r);
 8018b10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b12:	6878      	ldr	r0, [r7, #4]
 8018b14:	f7f8 f8d2 	bl	8010cbc <pbuf_cat>
      r = iprh->next_pbuf;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d1ed      	bne.n	8018b00 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018b24:	4b1d      	ldr	r3, [pc, #116]	; (8018b9c <ip4_reass+0x2a0>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b2a:	429a      	cmp	r2, r3
 8018b2c:	d102      	bne.n	8018b34 <ip4_reass+0x238>
      ipr_prev = NULL;
 8018b2e:	2300      	movs	r3, #0
 8018b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b32:	e010      	b.n	8018b56 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b34:	4b19      	ldr	r3, [pc, #100]	; (8018b9c <ip4_reass+0x2a0>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b3a:	e007      	b.n	8018b4c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8018b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b42:	429a      	cmp	r2, r3
 8018b44:	d006      	beq.n	8018b54 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d1f4      	bne.n	8018b3c <ip4_reass+0x240>
 8018b52:	e000      	b.n	8018b56 <ip4_reass+0x25a>
          break;
 8018b54:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b5a:	f7ff fd37 	bl	80185cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8018b5e:	6878      	ldr	r0, [r7, #4]
 8018b60:	f7f8 f86c 	bl	8010c3c <pbuf_clen>
 8018b64:	4603      	mov	r3, r0
 8018b66:	461a      	mov	r2, r3
 8018b68:	4b0b      	ldr	r3, [pc, #44]	; (8018b98 <ip4_reass+0x29c>)
 8018b6a:	881b      	ldrh	r3, [r3, #0]
 8018b6c:	1a9b      	subs	r3, r3, r2
 8018b6e:	b29a      	uxth	r2, r3
 8018b70:	4b09      	ldr	r3, [pc, #36]	; (8018b98 <ip4_reass+0x29c>)
 8018b72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	e00a      	b.n	8018b8e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018b78:	2300      	movs	r3, #0
 8018b7a:	e008      	b.n	8018b8e <ip4_reass+0x292>
    goto nullreturn;
 8018b7c:	bf00      	nop
 8018b7e:	e002      	b.n	8018b86 <ip4_reass+0x28a>

nullreturn:
 8018b80:	bf00      	nop
 8018b82:	e000      	b.n	8018b86 <ip4_reass+0x28a>
    goto nullreturn;
 8018b84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018b86:	6878      	ldr	r0, [r7, #4]
 8018b88:	f7f7 ffbe 	bl	8010b08 <pbuf_free>
  return NULL;
 8018b8c:	2300      	movs	r3, #0
}
 8018b8e:	4618      	mov	r0, r3
 8018b90:	3738      	adds	r7, #56	; 0x38
 8018b92:	46bd      	mov	sp, r7
 8018b94:	bd80      	pop	{r7, pc}
 8018b96:	bf00      	nop
 8018b98:	2000c93c 	.word	0x2000c93c
 8018b9c:	2000c938 	.word	0x2000c938

08018ba0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8018ba4:	2005      	movs	r0, #5
 8018ba6:	f7f7 f9a1 	bl	800feec <memp_malloc>
 8018baa:	4603      	mov	r3, r0
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	bd80      	pop	{r7, pc}

08018bb0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b082      	sub	sp, #8
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d106      	bne.n	8018bcc <ip_frag_free_pbuf_custom_ref+0x1c>
 8018bbe:	4b07      	ldr	r3, [pc, #28]	; (8018bdc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018bc0:	f240 22ae 	movw	r2, #686	; 0x2ae
 8018bc4:	4906      	ldr	r1, [pc, #24]	; (8018be0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018bc6:	4807      	ldr	r0, [pc, #28]	; (8018be4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018bc8:	f000 fc7a 	bl	80194c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018bcc:	6879      	ldr	r1, [r7, #4]
 8018bce:	2005      	movs	r0, #5
 8018bd0:	f7f7 fa02 	bl	800ffd8 <memp_free>
}
 8018bd4:	bf00      	nop
 8018bd6:	3708      	adds	r7, #8
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	0801cd60 	.word	0x0801cd60
 8018be0:	0801cee8 	.word	0x0801cee8
 8018be4:	0801cdc8 	.word	0x0801cdc8

08018be8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b084      	sub	sp, #16
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d106      	bne.n	8018c08 <ipfrag_free_pbuf_custom+0x20>
 8018bfa:	4b11      	ldr	r3, [pc, #68]	; (8018c40 <ipfrag_free_pbuf_custom+0x58>)
 8018bfc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8018c00:	4910      	ldr	r1, [pc, #64]	; (8018c44 <ipfrag_free_pbuf_custom+0x5c>)
 8018c02:	4811      	ldr	r0, [pc, #68]	; (8018c48 <ipfrag_free_pbuf_custom+0x60>)
 8018c04:	f000 fc5c 	bl	80194c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8018c08:	68fa      	ldr	r2, [r7, #12]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d006      	beq.n	8018c1e <ipfrag_free_pbuf_custom+0x36>
 8018c10:	4b0b      	ldr	r3, [pc, #44]	; (8018c40 <ipfrag_free_pbuf_custom+0x58>)
 8018c12:	f240 22b9 	movw	r2, #697	; 0x2b9
 8018c16:	490d      	ldr	r1, [pc, #52]	; (8018c4c <ipfrag_free_pbuf_custom+0x64>)
 8018c18:	480b      	ldr	r0, [pc, #44]	; (8018c48 <ipfrag_free_pbuf_custom+0x60>)
 8018c1a:	f000 fc51 	bl	80194c0 <iprintf>
  if (pcr->original != NULL) {
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	695b      	ldr	r3, [r3, #20]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d004      	beq.n	8018c30 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	695b      	ldr	r3, [r3, #20]
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7f7 ff6c 	bl	8010b08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018c30:	68f8      	ldr	r0, [r7, #12]
 8018c32:	f7ff ffbd 	bl	8018bb0 <ip_frag_free_pbuf_custom_ref>
}
 8018c36:	bf00      	nop
 8018c38:	3710      	adds	r7, #16
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	0801cd60 	.word	0x0801cd60
 8018c44:	0801cef4 	.word	0x0801cef4
 8018c48:	0801cdc8 	.word	0x0801cdc8
 8018c4c:	0801cf00 	.word	0x0801cf00

08018c50 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b092      	sub	sp, #72	; 0x48
 8018c54:	af02      	add	r7, sp, #8
 8018c56:	60f8      	str	r0, [r7, #12]
 8018c58:	60b9      	str	r1, [r7, #8]
 8018c5a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8018c60:	68bb      	ldr	r3, [r7, #8]
 8018c62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018c64:	3b14      	subs	r3, #20
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	da00      	bge.n	8018c6c <ip4_frag+0x1c>
 8018c6a:	3307      	adds	r3, #7
 8018c6c:	10db      	asrs	r3, r3, #3
 8018c6e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018c70:	2314      	movs	r3, #20
 8018c72:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	685b      	ldr	r3, [r3, #4]
 8018c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8018c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8018c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	f003 030f 	and.w	r3, r3, #15
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	2b14      	cmp	r3, #20
 8018c8a:	d009      	beq.n	8018ca0 <ip4_frag+0x50>
 8018c8c:	4b79      	ldr	r3, [pc, #484]	; (8018e74 <ip4_frag+0x224>)
 8018c8e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8018c92:	4979      	ldr	r1, [pc, #484]	; (8018e78 <ip4_frag+0x228>)
 8018c94:	4879      	ldr	r0, [pc, #484]	; (8018e7c <ip4_frag+0x22c>)
 8018c96:	f000 fc13 	bl	80194c0 <iprintf>
 8018c9a:	f06f 0305 	mvn.w	r3, #5
 8018c9e:	e0e5      	b.n	8018e6c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca2:	88db      	ldrh	r3, [r3, #6]
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7f6 fd14 	bl	800f6d4 <lwip_htons>
 8018cac:	4603      	mov	r3, r0
 8018cae:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8018cb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cb6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8018cb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d009      	beq.n	8018cd6 <ip4_frag+0x86>
 8018cc2:	4b6c      	ldr	r3, [pc, #432]	; (8018e74 <ip4_frag+0x224>)
 8018cc4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018cc8:	496d      	ldr	r1, [pc, #436]	; (8018e80 <ip4_frag+0x230>)
 8018cca:	486c      	ldr	r0, [pc, #432]	; (8018e7c <ip4_frag+0x22c>)
 8018ccc:	f000 fbf8 	bl	80194c0 <iprintf>
 8018cd0:	f06f 0305 	mvn.w	r3, #5
 8018cd4:	e0ca      	b.n	8018e6c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	891b      	ldrh	r3, [r3, #8]
 8018cda:	3b14      	subs	r3, #20
 8018cdc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8018cde:	e0bc      	b.n	8018e5a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8018ce0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018ce2:	00da      	lsls	r2, r3, #3
 8018ce4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ce6:	4293      	cmp	r3, r2
 8018ce8:	bfa8      	it	ge
 8018cea:	4613      	movge	r3, r2
 8018cec:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018cee:	2200      	movs	r2, #0
 8018cf0:	2114      	movs	r1, #20
 8018cf2:	2002      	movs	r0, #2
 8018cf4:	f7f7 fb96 	bl	8010424 <pbuf_alloc>
 8018cf8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8018cfa:	6a3b      	ldr	r3, [r7, #32]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	f000 80b2 	beq.w	8018e66 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	895b      	ldrh	r3, [r3, #10]
 8018d06:	2b13      	cmp	r3, #19
 8018d08:	d806      	bhi.n	8018d18 <ip4_frag+0xc8>
 8018d0a:	4b5a      	ldr	r3, [pc, #360]	; (8018e74 <ip4_frag+0x224>)
 8018d0c:	f240 3209 	movw	r2, #777	; 0x309
 8018d10:	495c      	ldr	r1, [pc, #368]	; (8018e84 <ip4_frag+0x234>)
 8018d12:	485a      	ldr	r0, [pc, #360]	; (8018e7c <ip4_frag+0x22c>)
 8018d14:	f000 fbd4 	bl	80194c0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018d18:	6a3b      	ldr	r3, [r7, #32]
 8018d1a:	685b      	ldr	r3, [r3, #4]
 8018d1c:	2214      	movs	r2, #20
 8018d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d20:	4618      	mov	r0, r3
 8018d22:	f000 fbba 	bl	801949a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018d26:	6a3b      	ldr	r3, [r7, #32]
 8018d28:	685b      	ldr	r3, [r3, #4]
 8018d2a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8018d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018d2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8018d30:	e04f      	b.n	8018dd2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	895a      	ldrh	r2, [r3, #10]
 8018d36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018d38:	1ad3      	subs	r3, r2, r3
 8018d3a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018d3c:	8b7a      	ldrh	r2, [r7, #26]
 8018d3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d40:	4293      	cmp	r3, r2
 8018d42:	bf28      	it	cs
 8018d44:	4613      	movcs	r3, r2
 8018d46:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018d48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d105      	bne.n	8018d5a <ip4_frag+0x10a>
        poff = 0;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	60fb      	str	r3, [r7, #12]
        continue;
 8018d58:	e03b      	b.n	8018dd2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018d5a:	f7ff ff21 	bl	8018ba0 <ip_frag_alloc_pbuf_custom_ref>
 8018d5e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d103      	bne.n	8018d6e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8018d66:	6a38      	ldr	r0, [r7, #32]
 8018d68:	f7f7 fece 	bl	8010b08 <pbuf_free>
        goto memerr;
 8018d6c:	e07c      	b.n	8018e68 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d6e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018d76:	4413      	add	r3, r2
 8018d78:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8018d7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018d7c:	9201      	str	r2, [sp, #4]
 8018d7e:	9300      	str	r3, [sp, #0]
 8018d80:	4603      	mov	r3, r0
 8018d82:	2202      	movs	r2, #2
 8018d84:	2004      	movs	r0, #4
 8018d86:	f7f7 fce1 	bl	801074c <pbuf_alloced_custom>
 8018d8a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d106      	bne.n	8018da0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018d92:	6978      	ldr	r0, [r7, #20]
 8018d94:	f7ff ff0c 	bl	8018bb0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018d98:	6a38      	ldr	r0, [r7, #32]
 8018d9a:	f7f7 feb5 	bl	8010b08 <pbuf_free>
        goto memerr;
 8018d9e:	e063      	b.n	8018e68 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8018da0:	68f8      	ldr	r0, [r7, #12]
 8018da2:	f7f7 ff63 	bl	8010c6c <pbuf_ref>
      pcr->original = p;
 8018da6:	697b      	ldr	r3, [r7, #20]
 8018da8:	68fa      	ldr	r2, [r7, #12]
 8018daa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	4a36      	ldr	r2, [pc, #216]	; (8018e88 <ip4_frag+0x238>)
 8018db0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018db2:	6939      	ldr	r1, [r7, #16]
 8018db4:	6a38      	ldr	r0, [r7, #32]
 8018db6:	f7f7 ff81 	bl	8010cbc <pbuf_cat>
      left_to_copy -= newpbuflen;
 8018dba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8018dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018dbe:	1ad3      	subs	r3, r2, r3
 8018dc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8018dc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d004      	beq.n	8018dd2 <ip4_frag+0x182>
        poff = 0;
 8018dc8:	2300      	movs	r3, #0
 8018dca:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018dd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d1ac      	bne.n	8018d32 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8018dd8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018dda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ddc:	4413      	add	r3, r2
 8018dde:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018de0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018de6:	3b14      	subs	r3, #20
 8018de8:	429a      	cmp	r2, r3
 8018dea:	bfd4      	ite	le
 8018dec:	2301      	movle	r3, #1
 8018dee:	2300      	movgt	r3, #0
 8018df0:	b2db      	uxtb	r3, r3
 8018df2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018df4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018df6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018dfa:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8018dfc:	69fb      	ldr	r3, [r7, #28]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d103      	bne.n	8018e0a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8018e02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018e08:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018e0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7f6 fc61 	bl	800f6d4 <lwip_htons>
 8018e12:	4603      	mov	r3, r0
 8018e14:	461a      	mov	r2, r3
 8018e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e18:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8018e1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e1c:	3314      	adds	r3, #20
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7f6 fc57 	bl	800f6d4 <lwip_htons>
 8018e26:	4603      	mov	r3, r0
 8018e28:	461a      	mov	r2, r3
 8018e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e2c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e30:	2200      	movs	r2, #0
 8018e32:	729a      	strb	r2, [r3, #10]
 8018e34:	2200      	movs	r2, #0
 8018e36:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018e38:	68bb      	ldr	r3, [r7, #8]
 8018e3a:	695b      	ldr	r3, [r3, #20]
 8018e3c:	687a      	ldr	r2, [r7, #4]
 8018e3e:	6a39      	ldr	r1, [r7, #32]
 8018e40:	68b8      	ldr	r0, [r7, #8]
 8018e42:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018e44:	6a38      	ldr	r0, [r7, #32]
 8018e46:	f7f7 fe5f 	bl	8010b08 <pbuf_free>
    left -= fragsize;
 8018e4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018e4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e4e:	1ad3      	subs	r3, r2, r3
 8018e50:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8018e52:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018e54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018e56:	4413      	add	r3, r2
 8018e58:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8018e5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f47f af3f 	bne.w	8018ce0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018e62:	2300      	movs	r3, #0
 8018e64:	e002      	b.n	8018e6c <ip4_frag+0x21c>
      goto memerr;
 8018e66:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	3740      	adds	r7, #64	; 0x40
 8018e70:	46bd      	mov	sp, r7
 8018e72:	bd80      	pop	{r7, pc}
 8018e74:	0801cd60 	.word	0x0801cd60
 8018e78:	0801cf0c 	.word	0x0801cf0c
 8018e7c:	0801cdc8 	.word	0x0801cdc8
 8018e80:	0801cf34 	.word	0x0801cf34
 8018e84:	0801cf50 	.word	0x0801cf50
 8018e88:	08018be9 	.word	0x08018be9

08018e8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8018e96:	230e      	movs	r3, #14
 8018e98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	895b      	ldrh	r3, [r3, #10]
 8018e9e:	2b0e      	cmp	r3, #14
 8018ea0:	d977      	bls.n	8018f92 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018ea8:	693b      	ldr	r3, [r7, #16]
 8018eaa:	7b1a      	ldrb	r2, [r3, #12]
 8018eac:	7b5b      	ldrb	r3, [r3, #13]
 8018eae:	021b      	lsls	r3, r3, #8
 8018eb0:	4313      	orrs	r3, r2
 8018eb2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	781b      	ldrb	r3, [r3, #0]
 8018eb8:	f003 0301 	and.w	r3, r3, #1
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d023      	beq.n	8018f08 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	781b      	ldrb	r3, [r3, #0]
 8018ec4:	2b01      	cmp	r3, #1
 8018ec6:	d10f      	bne.n	8018ee8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	785b      	ldrb	r3, [r3, #1]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d11b      	bne.n	8018f08 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ed4:	2b5e      	cmp	r3, #94	; 0x5e
 8018ed6:	d117      	bne.n	8018f08 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	7b5b      	ldrb	r3, [r3, #13]
 8018edc:	f043 0310 	orr.w	r3, r3, #16
 8018ee0:	b2da      	uxtb	r2, r3
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	735a      	strb	r2, [r3, #13]
 8018ee6:	e00f      	b.n	8018f08 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	2206      	movs	r2, #6
 8018eec:	4930      	ldr	r1, [pc, #192]	; (8018fb0 <ethernet_input+0x124>)
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f000 fac4 	bl	801947c <memcmp>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d106      	bne.n	8018f08 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	7b5b      	ldrb	r3, [r3, #13]
 8018efe:	f043 0308 	orr.w	r3, r3, #8
 8018f02:	b2da      	uxtb	r2, r3
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018f08:	89fb      	ldrh	r3, [r7, #14]
 8018f0a:	2b08      	cmp	r3, #8
 8018f0c:	d003      	beq.n	8018f16 <ethernet_input+0x8a>
 8018f0e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018f12:	d01e      	beq.n	8018f52 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018f14:	e044      	b.n	8018fa0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018f1c:	f003 0308 	and.w	r3, r3, #8
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d038      	beq.n	8018f96 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	895b      	ldrh	r3, [r3, #10]
 8018f28:	461a      	mov	r2, r3
 8018f2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	db33      	blt.n	8018f9a <ethernet_input+0x10e>
 8018f32:	8afb      	ldrh	r3, [r7, #22]
 8018f34:	425b      	negs	r3, r3
 8018f36:	b29b      	uxth	r3, r3
 8018f38:	b21b      	sxth	r3, r3
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	6878      	ldr	r0, [r7, #4]
 8018f3e:	f7f7 fdbf 	bl	8010ac0 <pbuf_header>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d128      	bne.n	8018f9a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8018f48:	6839      	ldr	r1, [r7, #0]
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7fe ff80 	bl	8017e50 <ip4_input>
      break;
 8018f50:	e01d      	b.n	8018f8e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f52:	683b      	ldr	r3, [r7, #0]
 8018f54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018f58:	f003 0308 	and.w	r3, r3, #8
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d01e      	beq.n	8018f9e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	895b      	ldrh	r3, [r3, #10]
 8018f64:	461a      	mov	r2, r3
 8018f66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	db15      	blt.n	8018f9a <ethernet_input+0x10e>
 8018f6e:	8afb      	ldrh	r3, [r7, #22]
 8018f70:	425b      	negs	r3, r3
 8018f72:	b29b      	uxth	r3, r3
 8018f74:	b21b      	sxth	r3, r3
 8018f76:	4619      	mov	r1, r3
 8018f78:	6878      	ldr	r0, [r7, #4]
 8018f7a:	f7f7 fda1 	bl	8010ac0 <pbuf_header>
 8018f7e:	4603      	mov	r3, r0
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d10a      	bne.n	8018f9a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8018f84:	6839      	ldr	r1, [r7, #0]
 8018f86:	6878      	ldr	r0, [r7, #4]
 8018f88:	f7fe f94e 	bl	8017228 <etharp_input>
      break;
 8018f8c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	e00a      	b.n	8018fa8 <ethernet_input+0x11c>
    goto free_and_return;
 8018f92:	bf00      	nop
 8018f94:	e004      	b.n	8018fa0 <ethernet_input+0x114>
        goto free_and_return;
 8018f96:	bf00      	nop
 8018f98:	e002      	b.n	8018fa0 <ethernet_input+0x114>

free_and_return:
 8018f9a:	bf00      	nop
 8018f9c:	e000      	b.n	8018fa0 <ethernet_input+0x114>
        goto free_and_return;
 8018f9e:	bf00      	nop
  pbuf_free(p);
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	f7f7 fdb1 	bl	8010b08 <pbuf_free>
  return ERR_OK;
 8018fa6:	2300      	movs	r3, #0
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	3718      	adds	r7, #24
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}
 8018fb0:	0801d154 	.word	0x0801d154

08018fb4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b086      	sub	sp, #24
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	607a      	str	r2, [r7, #4]
 8018fc0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018fc2:	8c3b      	ldrh	r3, [r7, #32]
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7f6 fb85 	bl	800f6d4 <lwip_htons>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8018fce:	210e      	movs	r1, #14
 8018fd0:	68b8      	ldr	r0, [r7, #8]
 8018fd2:	f7f7 fd75 	bl	8010ac0 <pbuf_header>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d125      	bne.n	8019028 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	685b      	ldr	r3, [r3, #4]
 8018fe0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	8afa      	ldrh	r2, [r7, #22]
 8018fe6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8018fe8:	693b      	ldr	r3, [r7, #16]
 8018fea:	2206      	movs	r2, #6
 8018fec:	6839      	ldr	r1, [r7, #0]
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f000 fa53 	bl	801949a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	3306      	adds	r3, #6
 8018ff8:	2206      	movs	r2, #6
 8018ffa:	6879      	ldr	r1, [r7, #4]
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f000 fa4c 	bl	801949a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019008:	2b06      	cmp	r3, #6
 801900a:	d006      	beq.n	801901a <ethernet_output+0x66>
 801900c:	4b0a      	ldr	r3, [pc, #40]	; (8019038 <ethernet_output+0x84>)
 801900e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019012:	490a      	ldr	r1, [pc, #40]	; (801903c <ethernet_output+0x88>)
 8019014:	480a      	ldr	r0, [pc, #40]	; (8019040 <ethernet_output+0x8c>)
 8019016:	f000 fa53 	bl	80194c0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	699b      	ldr	r3, [r3, #24]
 801901e:	68b9      	ldr	r1, [r7, #8]
 8019020:	68f8      	ldr	r0, [r7, #12]
 8019022:	4798      	blx	r3
 8019024:	4603      	mov	r3, r0
 8019026:	e002      	b.n	801902e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019028:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801902a:	f06f 0301 	mvn.w	r3, #1
}
 801902e:	4618      	mov	r0, r3
 8019030:	3718      	adds	r7, #24
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}
 8019036:	bf00      	nop
 8019038:	0801cf70 	.word	0x0801cf70
 801903c:	0801cfc8 	.word	0x0801cfc8
 8019040:	0801cffc 	.word	0x0801cffc

08019044 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b086      	sub	sp, #24
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801904e:	683b      	ldr	r3, [r7, #0]
 8019050:	60bb      	str	r3, [r7, #8]
 8019052:	2304      	movs	r3, #4
 8019054:	60fb      	str	r3, [r7, #12]
 8019056:	2300      	movs	r3, #0
 8019058:	613b      	str	r3, [r7, #16]
 801905a:	2300      	movs	r3, #0
 801905c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801905e:	f107 0308 	add.w	r3, r7, #8
 8019062:	2100      	movs	r1, #0
 8019064:	4618      	mov	r0, r3
 8019066:	f7f1 fbce 	bl	800a806 <osMessageCreate>
 801906a:	4602      	mov	r2, r0
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d102      	bne.n	801907e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019078:	f04f 33ff 	mov.w	r3, #4294967295
 801907c:	e000      	b.n	8019080 <sys_mbox_new+0x3c>

  return ERR_OK;
 801907e:	2300      	movs	r3, #0
}
 8019080:	4618      	mov	r0, r3
 8019082:	3718      	adds	r7, #24
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}

08019088 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b082      	sub	sp, #8
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	4618      	mov	r0, r3
 8019096:	f7f1 fc93 	bl	800a9c0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	4618      	mov	r0, r3
 80190a0:	f7f1 fca4 	bl	800a9ec <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80190a4:	bf00      	nop
 80190a6:	3708      	adds	r7, #8
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}

080190ac <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b082      	sub	sp, #8
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
 80190b4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80190b6:	bf00      	nop
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	6839      	ldr	r1, [r7, #0]
 80190be:	f04f 32ff 	mov.w	r2, #4294967295
 80190c2:	4618      	mov	r0, r3
 80190c4:	f7f1 fbc8 	bl	800a858 <osMessagePut>
 80190c8:	4603      	mov	r3, r0
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d1f4      	bne.n	80190b8 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80190ce:	bf00      	nop
 80190d0:	3708      	adds	r7, #8
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}

080190d6 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80190d6:	b580      	push	{r7, lr}
 80190d8:	b084      	sub	sp, #16
 80190da:	af00      	add	r7, sp, #0
 80190dc:	6078      	str	r0, [r7, #4]
 80190de:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	6839      	ldr	r1, [r7, #0]
 80190e6:	2200      	movs	r2, #0
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7f1 fbb5 	bl	800a858 <osMessagePut>
 80190ee:	4603      	mov	r3, r0
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d102      	bne.n	80190fa <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80190f4:	2300      	movs	r3, #0
 80190f6:	73fb      	strb	r3, [r7, #15]
 80190f8:	e001      	b.n	80190fe <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80190fa:	23ff      	movs	r3, #255	; 0xff
 80190fc:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80190fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019102:	4618      	mov	r0, r3
 8019104:	3710      	adds	r7, #16
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}

0801910a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801910a:	b580      	push	{r7, lr}
 801910c:	b08c      	sub	sp, #48	; 0x30
 801910e:	af00      	add	r7, sp, #0
 8019110:	61f8      	str	r0, [r7, #28]
 8019112:	61b9      	str	r1, [r7, #24]
 8019114:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019116:	f7f1 f99f 	bl	800a458 <osKernelSysTick>
 801911a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801911c:	697b      	ldr	r3, [r7, #20]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d017      	beq.n	8019152 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019122:	69fb      	ldr	r3, [r7, #28]
 8019124:	6819      	ldr	r1, [r3, #0]
 8019126:	f107 0320 	add.w	r3, r7, #32
 801912a:	697a      	ldr	r2, [r7, #20]
 801912c:	4618      	mov	r0, r3
 801912e:	f7f1 fbd3 	bl	800a8d8 <osMessageGet>

    if(event.status == osEventMessage)
 8019132:	6a3b      	ldr	r3, [r7, #32]
 8019134:	2b10      	cmp	r3, #16
 8019136:	d109      	bne.n	801914c <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801913a:	461a      	mov	r2, r3
 801913c:	69bb      	ldr	r3, [r7, #24]
 801913e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019140:	f7f1 f98a 	bl	800a458 <osKernelSysTick>
 8019144:	4602      	mov	r2, r0
 8019146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019148:	1ad3      	subs	r3, r2, r3
 801914a:	e019      	b.n	8019180 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801914c:	f04f 33ff 	mov.w	r3, #4294967295
 8019150:	e016      	b.n	8019180 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019152:	69fb      	ldr	r3, [r7, #28]
 8019154:	6819      	ldr	r1, [r3, #0]
 8019156:	463b      	mov	r3, r7
 8019158:	f04f 32ff 	mov.w	r2, #4294967295
 801915c:	4618      	mov	r0, r3
 801915e:	f7f1 fbbb 	bl	800a8d8 <osMessageGet>
 8019162:	f107 0320 	add.w	r3, r7, #32
 8019166:	463a      	mov	r2, r7
 8019168:	ca07      	ldmia	r2, {r0, r1, r2}
 801916a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019170:	461a      	mov	r2, r3
 8019172:	69bb      	ldr	r3, [r7, #24]
 8019174:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019176:	f7f1 f96f 	bl	800a458 <osKernelSysTick>
 801917a:	4602      	mov	r2, r0
 801917c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801917e:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019180:	4618      	mov	r0, r3
 8019182:	3730      	adds	r7, #48	; 0x30
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}

08019188 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b086      	sub	sp, #24
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
 8019190:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	6819      	ldr	r1, [r3, #0]
 8019196:	f107 030c 	add.w	r3, r7, #12
 801919a:	2200      	movs	r2, #0
 801919c:	4618      	mov	r0, r3
 801919e:	f7f1 fb9b 	bl	800a8d8 <osMessageGet>

  if(event.status == osEventMessage)
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2b10      	cmp	r3, #16
 80191a6:	d105      	bne.n	80191b4 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	461a      	mov	r2, r3
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80191b0:	2300      	movs	r3, #0
 80191b2:	e001      	b.n	80191b8 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80191b4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80191b8:	4618      	mov	r0, r3
 80191ba:	3718      	adds	r7, #24
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}

080191c0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80191c0:	b480      	push	{r7}
 80191c2:	b083      	sub	sp, #12
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d101      	bne.n	80191d4 <sys_mbox_valid+0x14>
    return 0;
 80191d0:	2300      	movs	r3, #0
 80191d2:	e000      	b.n	80191d6 <sys_mbox_valid+0x16>
  else
    return 1;
 80191d4:	2301      	movs	r3, #1
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	370c      	adds	r7, #12
 80191da:	46bd      	mov	sp, r7
 80191dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e0:	4770      	bx	lr

080191e2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80191e2:	b480      	push	{r7}
 80191e4:	b083      	sub	sp, #12
 80191e6:	af00      	add	r7, sp, #0
 80191e8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2200      	movs	r2, #0
 80191ee:	601a      	str	r2, [r3, #0]
}
 80191f0:	bf00      	nop
 80191f2:	370c      	adds	r7, #12
 80191f4:	46bd      	mov	sp, r7
 80191f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fa:	4770      	bx	lr

080191fc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b084      	sub	sp, #16
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	460b      	mov	r3, r1
 8019206:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019208:	2300      	movs	r3, #0
 801920a:	60bb      	str	r3, [r7, #8]
 801920c:	2300      	movs	r3, #0
 801920e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019210:	f107 0308 	add.w	r3, r7, #8
 8019214:	2101      	movs	r1, #1
 8019216:	4618      	mov	r0, r3
 8019218:	f7f1 fa2a 	bl	800a670 <osSemaphoreCreate>
 801921c:	4602      	mov	r2, r0
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d102      	bne.n	8019230 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801922a:	f04f 33ff 	mov.w	r3, #4294967295
 801922e:	e009      	b.n	8019244 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019230:	78fb      	ldrb	r3, [r7, #3]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d105      	bne.n	8019242 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2100      	movs	r1, #0
 801923c:	4618      	mov	r0, r3
 801923e:	f7f1 fa4b 	bl	800a6d8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019242:	2300      	movs	r3, #0
}
 8019244:	4618      	mov	r0, r3
 8019246:	3710      	adds	r7, #16
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}

0801924c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
 8019254:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019256:	f7f1 f8ff 	bl	800a458 <osKernelSysTick>
 801925a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d011      	beq.n	8019286 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	6839      	ldr	r1, [r7, #0]
 8019268:	4618      	mov	r0, r3
 801926a:	f7f1 fa35 	bl	800a6d8 <osSemaphoreWait>
 801926e:	4603      	mov	r3, r0
 8019270:	2b00      	cmp	r3, #0
 8019272:	d105      	bne.n	8019280 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019274:	f7f1 f8f0 	bl	800a458 <osKernelSysTick>
 8019278:	4602      	mov	r2, r0
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	1ad3      	subs	r3, r2, r3
 801927e:	e012      	b.n	80192a6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019280:	f04f 33ff 	mov.w	r3, #4294967295
 8019284:	e00f      	b.n	80192a6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019286:	bf00      	nop
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	f04f 31ff 	mov.w	r1, #4294967295
 8019290:	4618      	mov	r0, r3
 8019292:	f7f1 fa21 	bl	800a6d8 <osSemaphoreWait>
 8019296:	4603      	mov	r3, r0
 8019298:	2b00      	cmp	r3, #0
 801929a:	d1f5      	bne.n	8019288 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801929c:	f7f1 f8dc 	bl	800a458 <osKernelSysTick>
 80192a0:	4602      	mov	r2, r0
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80192a6:	4618      	mov	r0, r3
 80192a8:	3710      	adds	r7, #16
 80192aa:	46bd      	mov	sp, r7
 80192ac:	bd80      	pop	{r7, pc}

080192ae <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80192ae:	b580      	push	{r7, lr}
 80192b0:	b082      	sub	sp, #8
 80192b2:	af00      	add	r7, sp, #0
 80192b4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7f1 fa5a 	bl	800a774 <osSemaphoreRelease>
}
 80192c0:	bf00      	nop
 80192c2:	3708      	adds	r7, #8
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}

080192c8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b082      	sub	sp, #8
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7f1 fa83 	bl	800a7e0 <osSemaphoreDelete>
}
 80192da:	bf00      	nop
 80192dc:	3708      	adds	r7, #8
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}

080192e2 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80192e2:	b480      	push	{r7}
 80192e4:	b083      	sub	sp, #12
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d101      	bne.n	80192f6 <sys_sem_valid+0x14>
    return 0;
 80192f2:	2300      	movs	r3, #0
 80192f4:	e000      	b.n	80192f8 <sys_sem_valid+0x16>
  else
    return 1;
 80192f6:	2301      	movs	r3, #1
}
 80192f8:	4618      	mov	r0, r3
 80192fa:	370c      	adds	r7, #12
 80192fc:	46bd      	mov	sp, r7
 80192fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019302:	4770      	bx	lr

08019304 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019304:	b480      	push	{r7}
 8019306:	b083      	sub	sp, #12
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	2200      	movs	r2, #0
 8019310:	601a      	str	r2, [r3, #0]
}
 8019312:	bf00      	nop
 8019314:	370c      	adds	r7, #12
 8019316:	46bd      	mov	sp, r7
 8019318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931c:	4770      	bx	lr
	...

08019320 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019324:	4803      	ldr	r0, [pc, #12]	; (8019334 <sys_init+0x14>)
 8019326:	f7f1 f907 	bl	800a538 <osMutexCreate>
 801932a:	4602      	mov	r2, r0
 801932c:	4b02      	ldr	r3, [pc, #8]	; (8019338 <sys_init+0x18>)
 801932e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019330:	bf00      	nop
 8019332:	bd80      	pop	{r7, pc}
 8019334:	0801d164 	.word	0x0801d164
 8019338:	200101ec 	.word	0x200101ec

0801933c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801933c:	b580      	push	{r7, lr}
 801933e:	b084      	sub	sp, #16
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019344:	2300      	movs	r3, #0
 8019346:	60bb      	str	r3, [r7, #8]
 8019348:	2300      	movs	r3, #0
 801934a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801934c:	f107 0308 	add.w	r3, r7, #8
 8019350:	4618      	mov	r0, r3
 8019352:	f7f1 f8f1 	bl	800a538 <osMutexCreate>
 8019356:	4602      	mov	r2, r0
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d102      	bne.n	801936a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019364:	f04f 33ff 	mov.w	r3, #4294967295
 8019368:	e000      	b.n	801936c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801936a:	2300      	movs	r3, #0
}
 801936c:	4618      	mov	r0, r3
 801936e:	3710      	adds	r7, #16
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b082      	sub	sp, #8
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	f04f 31ff 	mov.w	r1, #4294967295
 8019384:	4618      	mov	r0, r3
 8019386:	f7f1 f8ef 	bl	800a568 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801938a:	bf00      	nop
 801938c:	3708      	adds	r7, #8
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}

08019392 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019392:	b580      	push	{r7, lr}
 8019394:	b082      	sub	sp, #8
 8019396:	af00      	add	r7, sp, #0
 8019398:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	4618      	mov	r0, r3
 80193a0:	f7f1 f930 	bl	800a604 <osMutexRelease>
}
 80193a4:	bf00      	nop
 80193a6:	3708      	adds	r7, #8
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}

080193ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b08c      	sub	sp, #48	; 0x30
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	607a      	str	r2, [r7, #4]
 80193b8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80193ba:	f107 0314 	add.w	r3, r7, #20
 80193be:	2200      	movs	r2, #0
 80193c0:	601a      	str	r2, [r3, #0]
 80193c2:	605a      	str	r2, [r3, #4]
 80193c4:	609a      	str	r2, [r3, #8]
 80193c6:	60da      	str	r2, [r3, #12]
 80193c8:	611a      	str	r2, [r3, #16]
 80193ca:	615a      	str	r2, [r3, #20]
 80193cc:	619a      	str	r2, [r3, #24]
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	617b      	str	r3, [r7, #20]
 80193d2:	68bb      	ldr	r3, [r7, #8]
 80193d4:	61bb      	str	r3, [r7, #24]
 80193d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193d8:	b21b      	sxth	r3, r3
 80193da:	83bb      	strh	r3, [r7, #28]
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80193e0:	f107 0314 	add.w	r3, r7, #20
 80193e4:	6879      	ldr	r1, [r7, #4]
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7f1 f846 	bl	800a478 <osThreadCreate>
 80193ec:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	3730      	adds	r7, #48	; 0x30
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
	...

080193f8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80193fc:	4b04      	ldr	r3, [pc, #16]	; (8019410 <sys_arch_protect+0x18>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	f04f 31ff 	mov.w	r1, #4294967295
 8019404:	4618      	mov	r0, r3
 8019406:	f7f1 f8af 	bl	800a568 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801940a:	2301      	movs	r3, #1
}
 801940c:	4618      	mov	r0, r3
 801940e:	bd80      	pop	{r7, pc}
 8019410:	200101ec 	.word	0x200101ec

08019414 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801941c:	4b04      	ldr	r3, [pc, #16]	; (8019430 <sys_arch_unprotect+0x1c>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	4618      	mov	r0, r3
 8019422:	f7f1 f8ef 	bl	800a604 <osMutexRelease>
}
 8019426:	bf00      	nop
 8019428:	3708      	adds	r7, #8
 801942a:	46bd      	mov	sp, r7
 801942c:	bd80      	pop	{r7, pc}
 801942e:	bf00      	nop
 8019430:	200101ec 	.word	0x200101ec

08019434 <__libc_init_array>:
 8019434:	b570      	push	{r4, r5, r6, lr}
 8019436:	4e0d      	ldr	r6, [pc, #52]	; (801946c <__libc_init_array+0x38>)
 8019438:	4c0d      	ldr	r4, [pc, #52]	; (8019470 <__libc_init_array+0x3c>)
 801943a:	1ba4      	subs	r4, r4, r6
 801943c:	10a4      	asrs	r4, r4, #2
 801943e:	2500      	movs	r5, #0
 8019440:	42a5      	cmp	r5, r4
 8019442:	d109      	bne.n	8019458 <__libc_init_array+0x24>
 8019444:	4e0b      	ldr	r6, [pc, #44]	; (8019474 <__libc_init_array+0x40>)
 8019446:	4c0c      	ldr	r4, [pc, #48]	; (8019478 <__libc_init_array+0x44>)
 8019448:	f001 f8d8 	bl	801a5fc <_init>
 801944c:	1ba4      	subs	r4, r4, r6
 801944e:	10a4      	asrs	r4, r4, #2
 8019450:	2500      	movs	r5, #0
 8019452:	42a5      	cmp	r5, r4
 8019454:	d105      	bne.n	8019462 <__libc_init_array+0x2e>
 8019456:	bd70      	pop	{r4, r5, r6, pc}
 8019458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801945c:	4798      	blx	r3
 801945e:	3501      	adds	r5, #1
 8019460:	e7ee      	b.n	8019440 <__libc_init_array+0xc>
 8019462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019466:	4798      	blx	r3
 8019468:	3501      	adds	r5, #1
 801946a:	e7f2      	b.n	8019452 <__libc_init_array+0x1e>
 801946c:	0801d20c 	.word	0x0801d20c
 8019470:	0801d20c 	.word	0x0801d20c
 8019474:	0801d20c 	.word	0x0801d20c
 8019478:	0801d210 	.word	0x0801d210

0801947c <memcmp>:
 801947c:	b530      	push	{r4, r5, lr}
 801947e:	2400      	movs	r4, #0
 8019480:	42a2      	cmp	r2, r4
 8019482:	d101      	bne.n	8019488 <memcmp+0xc>
 8019484:	2000      	movs	r0, #0
 8019486:	e007      	b.n	8019498 <memcmp+0x1c>
 8019488:	5d03      	ldrb	r3, [r0, r4]
 801948a:	3401      	adds	r4, #1
 801948c:	190d      	adds	r5, r1, r4
 801948e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8019492:	42ab      	cmp	r3, r5
 8019494:	d0f4      	beq.n	8019480 <memcmp+0x4>
 8019496:	1b58      	subs	r0, r3, r5
 8019498:	bd30      	pop	{r4, r5, pc}

0801949a <memcpy>:
 801949a:	b510      	push	{r4, lr}
 801949c:	1e43      	subs	r3, r0, #1
 801949e:	440a      	add	r2, r1
 80194a0:	4291      	cmp	r1, r2
 80194a2:	d100      	bne.n	80194a6 <memcpy+0xc>
 80194a4:	bd10      	pop	{r4, pc}
 80194a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194ae:	e7f7      	b.n	80194a0 <memcpy+0x6>

080194b0 <memset>:
 80194b0:	4402      	add	r2, r0
 80194b2:	4603      	mov	r3, r0
 80194b4:	4293      	cmp	r3, r2
 80194b6:	d100      	bne.n	80194ba <memset+0xa>
 80194b8:	4770      	bx	lr
 80194ba:	f803 1b01 	strb.w	r1, [r3], #1
 80194be:	e7f9      	b.n	80194b4 <memset+0x4>

080194c0 <iprintf>:
 80194c0:	b40f      	push	{r0, r1, r2, r3}
 80194c2:	4b0a      	ldr	r3, [pc, #40]	; (80194ec <iprintf+0x2c>)
 80194c4:	b513      	push	{r0, r1, r4, lr}
 80194c6:	681c      	ldr	r4, [r3, #0]
 80194c8:	b124      	cbz	r4, 80194d4 <iprintf+0x14>
 80194ca:	69a3      	ldr	r3, [r4, #24]
 80194cc:	b913      	cbnz	r3, 80194d4 <iprintf+0x14>
 80194ce:	4620      	mov	r0, r4
 80194d0:	f000 f86e 	bl	80195b0 <__sinit>
 80194d4:	ab05      	add	r3, sp, #20
 80194d6:	9a04      	ldr	r2, [sp, #16]
 80194d8:	68a1      	ldr	r1, [r4, #8]
 80194da:	9301      	str	r3, [sp, #4]
 80194dc:	4620      	mov	r0, r4
 80194de:	f000 fac7 	bl	8019a70 <_vfiprintf_r>
 80194e2:	b002      	add	sp, #8
 80194e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194e8:	b004      	add	sp, #16
 80194ea:	4770      	bx	lr
 80194ec:	20000034 	.word	0x20000034

080194f0 <siprintf>:
 80194f0:	b40e      	push	{r1, r2, r3}
 80194f2:	b500      	push	{lr}
 80194f4:	b09c      	sub	sp, #112	; 0x70
 80194f6:	ab1d      	add	r3, sp, #116	; 0x74
 80194f8:	9002      	str	r0, [sp, #8]
 80194fa:	9006      	str	r0, [sp, #24]
 80194fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019500:	4809      	ldr	r0, [pc, #36]	; (8019528 <siprintf+0x38>)
 8019502:	9107      	str	r1, [sp, #28]
 8019504:	9104      	str	r1, [sp, #16]
 8019506:	4909      	ldr	r1, [pc, #36]	; (801952c <siprintf+0x3c>)
 8019508:	f853 2b04 	ldr.w	r2, [r3], #4
 801950c:	9105      	str	r1, [sp, #20]
 801950e:	6800      	ldr	r0, [r0, #0]
 8019510:	9301      	str	r3, [sp, #4]
 8019512:	a902      	add	r1, sp, #8
 8019514:	f000 f98a 	bl	801982c <_svfiprintf_r>
 8019518:	9b02      	ldr	r3, [sp, #8]
 801951a:	2200      	movs	r2, #0
 801951c:	701a      	strb	r2, [r3, #0]
 801951e:	b01c      	add	sp, #112	; 0x70
 8019520:	f85d eb04 	ldr.w	lr, [sp], #4
 8019524:	b003      	add	sp, #12
 8019526:	4770      	bx	lr
 8019528:	20000034 	.word	0x20000034
 801952c:	ffff0208 	.word	0xffff0208

08019530 <std>:
 8019530:	2300      	movs	r3, #0
 8019532:	b510      	push	{r4, lr}
 8019534:	4604      	mov	r4, r0
 8019536:	e9c0 3300 	strd	r3, r3, [r0]
 801953a:	6083      	str	r3, [r0, #8]
 801953c:	8181      	strh	r1, [r0, #12]
 801953e:	6643      	str	r3, [r0, #100]	; 0x64
 8019540:	81c2      	strh	r2, [r0, #14]
 8019542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019546:	6183      	str	r3, [r0, #24]
 8019548:	4619      	mov	r1, r3
 801954a:	2208      	movs	r2, #8
 801954c:	305c      	adds	r0, #92	; 0x5c
 801954e:	f7ff ffaf 	bl	80194b0 <memset>
 8019552:	4b05      	ldr	r3, [pc, #20]	; (8019568 <std+0x38>)
 8019554:	6263      	str	r3, [r4, #36]	; 0x24
 8019556:	4b05      	ldr	r3, [pc, #20]	; (801956c <std+0x3c>)
 8019558:	62a3      	str	r3, [r4, #40]	; 0x28
 801955a:	4b05      	ldr	r3, [pc, #20]	; (8019570 <std+0x40>)
 801955c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801955e:	4b05      	ldr	r3, [pc, #20]	; (8019574 <std+0x44>)
 8019560:	6224      	str	r4, [r4, #32]
 8019562:	6323      	str	r3, [r4, #48]	; 0x30
 8019564:	bd10      	pop	{r4, pc}
 8019566:	bf00      	nop
 8019568:	08019fcd 	.word	0x08019fcd
 801956c:	08019fef 	.word	0x08019fef
 8019570:	0801a027 	.word	0x0801a027
 8019574:	0801a04b 	.word	0x0801a04b

08019578 <_cleanup_r>:
 8019578:	4901      	ldr	r1, [pc, #4]	; (8019580 <_cleanup_r+0x8>)
 801957a:	f000 b885 	b.w	8019688 <_fwalk_reent>
 801957e:	bf00      	nop
 8019580:	0801a325 	.word	0x0801a325

08019584 <__sfmoreglue>:
 8019584:	b570      	push	{r4, r5, r6, lr}
 8019586:	1e4a      	subs	r2, r1, #1
 8019588:	2568      	movs	r5, #104	; 0x68
 801958a:	4355      	muls	r5, r2
 801958c:	460e      	mov	r6, r1
 801958e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019592:	f000 f897 	bl	80196c4 <_malloc_r>
 8019596:	4604      	mov	r4, r0
 8019598:	b140      	cbz	r0, 80195ac <__sfmoreglue+0x28>
 801959a:	2100      	movs	r1, #0
 801959c:	e9c0 1600 	strd	r1, r6, [r0]
 80195a0:	300c      	adds	r0, #12
 80195a2:	60a0      	str	r0, [r4, #8]
 80195a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80195a8:	f7ff ff82 	bl	80194b0 <memset>
 80195ac:	4620      	mov	r0, r4
 80195ae:	bd70      	pop	{r4, r5, r6, pc}

080195b0 <__sinit>:
 80195b0:	6983      	ldr	r3, [r0, #24]
 80195b2:	b510      	push	{r4, lr}
 80195b4:	4604      	mov	r4, r0
 80195b6:	bb33      	cbnz	r3, 8019606 <__sinit+0x56>
 80195b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80195bc:	6503      	str	r3, [r0, #80]	; 0x50
 80195be:	4b12      	ldr	r3, [pc, #72]	; (8019608 <__sinit+0x58>)
 80195c0:	4a12      	ldr	r2, [pc, #72]	; (801960c <__sinit+0x5c>)
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	6282      	str	r2, [r0, #40]	; 0x28
 80195c6:	4298      	cmp	r0, r3
 80195c8:	bf04      	itt	eq
 80195ca:	2301      	moveq	r3, #1
 80195cc:	6183      	streq	r3, [r0, #24]
 80195ce:	f000 f81f 	bl	8019610 <__sfp>
 80195d2:	6060      	str	r0, [r4, #4]
 80195d4:	4620      	mov	r0, r4
 80195d6:	f000 f81b 	bl	8019610 <__sfp>
 80195da:	60a0      	str	r0, [r4, #8]
 80195dc:	4620      	mov	r0, r4
 80195de:	f000 f817 	bl	8019610 <__sfp>
 80195e2:	2200      	movs	r2, #0
 80195e4:	60e0      	str	r0, [r4, #12]
 80195e6:	2104      	movs	r1, #4
 80195e8:	6860      	ldr	r0, [r4, #4]
 80195ea:	f7ff ffa1 	bl	8019530 <std>
 80195ee:	2201      	movs	r2, #1
 80195f0:	2109      	movs	r1, #9
 80195f2:	68a0      	ldr	r0, [r4, #8]
 80195f4:	f7ff ff9c 	bl	8019530 <std>
 80195f8:	2202      	movs	r2, #2
 80195fa:	2112      	movs	r1, #18
 80195fc:	68e0      	ldr	r0, [r4, #12]
 80195fe:	f7ff ff97 	bl	8019530 <std>
 8019602:	2301      	movs	r3, #1
 8019604:	61a3      	str	r3, [r4, #24]
 8019606:	bd10      	pop	{r4, pc}
 8019608:	0801d16c 	.word	0x0801d16c
 801960c:	08019579 	.word	0x08019579

08019610 <__sfp>:
 8019610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019612:	4b1b      	ldr	r3, [pc, #108]	; (8019680 <__sfp+0x70>)
 8019614:	681e      	ldr	r6, [r3, #0]
 8019616:	69b3      	ldr	r3, [r6, #24]
 8019618:	4607      	mov	r7, r0
 801961a:	b913      	cbnz	r3, 8019622 <__sfp+0x12>
 801961c:	4630      	mov	r0, r6
 801961e:	f7ff ffc7 	bl	80195b0 <__sinit>
 8019622:	3648      	adds	r6, #72	; 0x48
 8019624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019628:	3b01      	subs	r3, #1
 801962a:	d503      	bpl.n	8019634 <__sfp+0x24>
 801962c:	6833      	ldr	r3, [r6, #0]
 801962e:	b133      	cbz	r3, 801963e <__sfp+0x2e>
 8019630:	6836      	ldr	r6, [r6, #0]
 8019632:	e7f7      	b.n	8019624 <__sfp+0x14>
 8019634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019638:	b16d      	cbz	r5, 8019656 <__sfp+0x46>
 801963a:	3468      	adds	r4, #104	; 0x68
 801963c:	e7f4      	b.n	8019628 <__sfp+0x18>
 801963e:	2104      	movs	r1, #4
 8019640:	4638      	mov	r0, r7
 8019642:	f7ff ff9f 	bl	8019584 <__sfmoreglue>
 8019646:	6030      	str	r0, [r6, #0]
 8019648:	2800      	cmp	r0, #0
 801964a:	d1f1      	bne.n	8019630 <__sfp+0x20>
 801964c:	230c      	movs	r3, #12
 801964e:	603b      	str	r3, [r7, #0]
 8019650:	4604      	mov	r4, r0
 8019652:	4620      	mov	r0, r4
 8019654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019656:	4b0b      	ldr	r3, [pc, #44]	; (8019684 <__sfp+0x74>)
 8019658:	6665      	str	r5, [r4, #100]	; 0x64
 801965a:	e9c4 5500 	strd	r5, r5, [r4]
 801965e:	60a5      	str	r5, [r4, #8]
 8019660:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019664:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019668:	2208      	movs	r2, #8
 801966a:	4629      	mov	r1, r5
 801966c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019670:	f7ff ff1e 	bl	80194b0 <memset>
 8019674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801967c:	e7e9      	b.n	8019652 <__sfp+0x42>
 801967e:	bf00      	nop
 8019680:	0801d16c 	.word	0x0801d16c
 8019684:	ffff0001 	.word	0xffff0001

08019688 <_fwalk_reent>:
 8019688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801968c:	4680      	mov	r8, r0
 801968e:	4689      	mov	r9, r1
 8019690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019694:	2600      	movs	r6, #0
 8019696:	b914      	cbnz	r4, 801969e <_fwalk_reent+0x16>
 8019698:	4630      	mov	r0, r6
 801969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801969e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80196a2:	3f01      	subs	r7, #1
 80196a4:	d501      	bpl.n	80196aa <_fwalk_reent+0x22>
 80196a6:	6824      	ldr	r4, [r4, #0]
 80196a8:	e7f5      	b.n	8019696 <_fwalk_reent+0xe>
 80196aa:	89ab      	ldrh	r3, [r5, #12]
 80196ac:	2b01      	cmp	r3, #1
 80196ae:	d907      	bls.n	80196c0 <_fwalk_reent+0x38>
 80196b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196b4:	3301      	adds	r3, #1
 80196b6:	d003      	beq.n	80196c0 <_fwalk_reent+0x38>
 80196b8:	4629      	mov	r1, r5
 80196ba:	4640      	mov	r0, r8
 80196bc:	47c8      	blx	r9
 80196be:	4306      	orrs	r6, r0
 80196c0:	3568      	adds	r5, #104	; 0x68
 80196c2:	e7ee      	b.n	80196a2 <_fwalk_reent+0x1a>

080196c4 <_malloc_r>:
 80196c4:	b570      	push	{r4, r5, r6, lr}
 80196c6:	1ccd      	adds	r5, r1, #3
 80196c8:	f025 0503 	bic.w	r5, r5, #3
 80196cc:	3508      	adds	r5, #8
 80196ce:	2d0c      	cmp	r5, #12
 80196d0:	bf38      	it	cc
 80196d2:	250c      	movcc	r5, #12
 80196d4:	2d00      	cmp	r5, #0
 80196d6:	4606      	mov	r6, r0
 80196d8:	db01      	blt.n	80196de <_malloc_r+0x1a>
 80196da:	42a9      	cmp	r1, r5
 80196dc:	d903      	bls.n	80196e6 <_malloc_r+0x22>
 80196de:	230c      	movs	r3, #12
 80196e0:	6033      	str	r3, [r6, #0]
 80196e2:	2000      	movs	r0, #0
 80196e4:	bd70      	pop	{r4, r5, r6, pc}
 80196e6:	f000 fed6 	bl	801a496 <__malloc_lock>
 80196ea:	4a21      	ldr	r2, [pc, #132]	; (8019770 <_malloc_r+0xac>)
 80196ec:	6814      	ldr	r4, [r2, #0]
 80196ee:	4621      	mov	r1, r4
 80196f0:	b991      	cbnz	r1, 8019718 <_malloc_r+0x54>
 80196f2:	4c20      	ldr	r4, [pc, #128]	; (8019774 <_malloc_r+0xb0>)
 80196f4:	6823      	ldr	r3, [r4, #0]
 80196f6:	b91b      	cbnz	r3, 8019700 <_malloc_r+0x3c>
 80196f8:	4630      	mov	r0, r6
 80196fa:	f000 fc57 	bl	8019fac <_sbrk_r>
 80196fe:	6020      	str	r0, [r4, #0]
 8019700:	4629      	mov	r1, r5
 8019702:	4630      	mov	r0, r6
 8019704:	f000 fc52 	bl	8019fac <_sbrk_r>
 8019708:	1c43      	adds	r3, r0, #1
 801970a:	d124      	bne.n	8019756 <_malloc_r+0x92>
 801970c:	230c      	movs	r3, #12
 801970e:	6033      	str	r3, [r6, #0]
 8019710:	4630      	mov	r0, r6
 8019712:	f000 fec1 	bl	801a498 <__malloc_unlock>
 8019716:	e7e4      	b.n	80196e2 <_malloc_r+0x1e>
 8019718:	680b      	ldr	r3, [r1, #0]
 801971a:	1b5b      	subs	r3, r3, r5
 801971c:	d418      	bmi.n	8019750 <_malloc_r+0x8c>
 801971e:	2b0b      	cmp	r3, #11
 8019720:	d90f      	bls.n	8019742 <_malloc_r+0x7e>
 8019722:	600b      	str	r3, [r1, #0]
 8019724:	50cd      	str	r5, [r1, r3]
 8019726:	18cc      	adds	r4, r1, r3
 8019728:	4630      	mov	r0, r6
 801972a:	f000 feb5 	bl	801a498 <__malloc_unlock>
 801972e:	f104 000b 	add.w	r0, r4, #11
 8019732:	1d23      	adds	r3, r4, #4
 8019734:	f020 0007 	bic.w	r0, r0, #7
 8019738:	1ac3      	subs	r3, r0, r3
 801973a:	d0d3      	beq.n	80196e4 <_malloc_r+0x20>
 801973c:	425a      	negs	r2, r3
 801973e:	50e2      	str	r2, [r4, r3]
 8019740:	e7d0      	b.n	80196e4 <_malloc_r+0x20>
 8019742:	428c      	cmp	r4, r1
 8019744:	684b      	ldr	r3, [r1, #4]
 8019746:	bf16      	itet	ne
 8019748:	6063      	strne	r3, [r4, #4]
 801974a:	6013      	streq	r3, [r2, #0]
 801974c:	460c      	movne	r4, r1
 801974e:	e7eb      	b.n	8019728 <_malloc_r+0x64>
 8019750:	460c      	mov	r4, r1
 8019752:	6849      	ldr	r1, [r1, #4]
 8019754:	e7cc      	b.n	80196f0 <_malloc_r+0x2c>
 8019756:	1cc4      	adds	r4, r0, #3
 8019758:	f024 0403 	bic.w	r4, r4, #3
 801975c:	42a0      	cmp	r0, r4
 801975e:	d005      	beq.n	801976c <_malloc_r+0xa8>
 8019760:	1a21      	subs	r1, r4, r0
 8019762:	4630      	mov	r0, r6
 8019764:	f000 fc22 	bl	8019fac <_sbrk_r>
 8019768:	3001      	adds	r0, #1
 801976a:	d0cf      	beq.n	801970c <_malloc_r+0x48>
 801976c:	6025      	str	r5, [r4, #0]
 801976e:	e7db      	b.n	8019728 <_malloc_r+0x64>
 8019770:	2000c940 	.word	0x2000c940
 8019774:	2000c944 	.word	0x2000c944

08019778 <__ssputs_r>:
 8019778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801977c:	688e      	ldr	r6, [r1, #8]
 801977e:	429e      	cmp	r6, r3
 8019780:	4682      	mov	sl, r0
 8019782:	460c      	mov	r4, r1
 8019784:	4690      	mov	r8, r2
 8019786:	4699      	mov	r9, r3
 8019788:	d837      	bhi.n	80197fa <__ssputs_r+0x82>
 801978a:	898a      	ldrh	r2, [r1, #12]
 801978c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019790:	d031      	beq.n	80197f6 <__ssputs_r+0x7e>
 8019792:	6825      	ldr	r5, [r4, #0]
 8019794:	6909      	ldr	r1, [r1, #16]
 8019796:	1a6f      	subs	r7, r5, r1
 8019798:	6965      	ldr	r5, [r4, #20]
 801979a:	2302      	movs	r3, #2
 801979c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80197a4:	f109 0301 	add.w	r3, r9, #1
 80197a8:	443b      	add	r3, r7
 80197aa:	429d      	cmp	r5, r3
 80197ac:	bf38      	it	cc
 80197ae:	461d      	movcc	r5, r3
 80197b0:	0553      	lsls	r3, r2, #21
 80197b2:	d530      	bpl.n	8019816 <__ssputs_r+0x9e>
 80197b4:	4629      	mov	r1, r5
 80197b6:	f7ff ff85 	bl	80196c4 <_malloc_r>
 80197ba:	4606      	mov	r6, r0
 80197bc:	b950      	cbnz	r0, 80197d4 <__ssputs_r+0x5c>
 80197be:	230c      	movs	r3, #12
 80197c0:	f8ca 3000 	str.w	r3, [sl]
 80197c4:	89a3      	ldrh	r3, [r4, #12]
 80197c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197ca:	81a3      	strh	r3, [r4, #12]
 80197cc:	f04f 30ff 	mov.w	r0, #4294967295
 80197d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197d4:	463a      	mov	r2, r7
 80197d6:	6921      	ldr	r1, [r4, #16]
 80197d8:	f7ff fe5f 	bl	801949a <memcpy>
 80197dc:	89a3      	ldrh	r3, [r4, #12]
 80197de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197e6:	81a3      	strh	r3, [r4, #12]
 80197e8:	6126      	str	r6, [r4, #16]
 80197ea:	6165      	str	r5, [r4, #20]
 80197ec:	443e      	add	r6, r7
 80197ee:	1bed      	subs	r5, r5, r7
 80197f0:	6026      	str	r6, [r4, #0]
 80197f2:	60a5      	str	r5, [r4, #8]
 80197f4:	464e      	mov	r6, r9
 80197f6:	454e      	cmp	r6, r9
 80197f8:	d900      	bls.n	80197fc <__ssputs_r+0x84>
 80197fa:	464e      	mov	r6, r9
 80197fc:	4632      	mov	r2, r6
 80197fe:	4641      	mov	r1, r8
 8019800:	6820      	ldr	r0, [r4, #0]
 8019802:	f000 fe2f 	bl	801a464 <memmove>
 8019806:	68a3      	ldr	r3, [r4, #8]
 8019808:	1b9b      	subs	r3, r3, r6
 801980a:	60a3      	str	r3, [r4, #8]
 801980c:	6823      	ldr	r3, [r4, #0]
 801980e:	441e      	add	r6, r3
 8019810:	6026      	str	r6, [r4, #0]
 8019812:	2000      	movs	r0, #0
 8019814:	e7dc      	b.n	80197d0 <__ssputs_r+0x58>
 8019816:	462a      	mov	r2, r5
 8019818:	f000 fe8e 	bl	801a538 <_realloc_r>
 801981c:	4606      	mov	r6, r0
 801981e:	2800      	cmp	r0, #0
 8019820:	d1e2      	bne.n	80197e8 <__ssputs_r+0x70>
 8019822:	6921      	ldr	r1, [r4, #16]
 8019824:	4650      	mov	r0, sl
 8019826:	f000 fe39 	bl	801a49c <_free_r>
 801982a:	e7c8      	b.n	80197be <__ssputs_r+0x46>

0801982c <_svfiprintf_r>:
 801982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019830:	461d      	mov	r5, r3
 8019832:	898b      	ldrh	r3, [r1, #12]
 8019834:	061f      	lsls	r7, r3, #24
 8019836:	b09d      	sub	sp, #116	; 0x74
 8019838:	4680      	mov	r8, r0
 801983a:	460c      	mov	r4, r1
 801983c:	4616      	mov	r6, r2
 801983e:	d50f      	bpl.n	8019860 <_svfiprintf_r+0x34>
 8019840:	690b      	ldr	r3, [r1, #16]
 8019842:	b96b      	cbnz	r3, 8019860 <_svfiprintf_r+0x34>
 8019844:	2140      	movs	r1, #64	; 0x40
 8019846:	f7ff ff3d 	bl	80196c4 <_malloc_r>
 801984a:	6020      	str	r0, [r4, #0]
 801984c:	6120      	str	r0, [r4, #16]
 801984e:	b928      	cbnz	r0, 801985c <_svfiprintf_r+0x30>
 8019850:	230c      	movs	r3, #12
 8019852:	f8c8 3000 	str.w	r3, [r8]
 8019856:	f04f 30ff 	mov.w	r0, #4294967295
 801985a:	e0c8      	b.n	80199ee <_svfiprintf_r+0x1c2>
 801985c:	2340      	movs	r3, #64	; 0x40
 801985e:	6163      	str	r3, [r4, #20]
 8019860:	2300      	movs	r3, #0
 8019862:	9309      	str	r3, [sp, #36]	; 0x24
 8019864:	2320      	movs	r3, #32
 8019866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801986a:	2330      	movs	r3, #48	; 0x30
 801986c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019870:	9503      	str	r5, [sp, #12]
 8019872:	f04f 0b01 	mov.w	fp, #1
 8019876:	4637      	mov	r7, r6
 8019878:	463d      	mov	r5, r7
 801987a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801987e:	b10b      	cbz	r3, 8019884 <_svfiprintf_r+0x58>
 8019880:	2b25      	cmp	r3, #37	; 0x25
 8019882:	d13e      	bne.n	8019902 <_svfiprintf_r+0xd6>
 8019884:	ebb7 0a06 	subs.w	sl, r7, r6
 8019888:	d00b      	beq.n	80198a2 <_svfiprintf_r+0x76>
 801988a:	4653      	mov	r3, sl
 801988c:	4632      	mov	r2, r6
 801988e:	4621      	mov	r1, r4
 8019890:	4640      	mov	r0, r8
 8019892:	f7ff ff71 	bl	8019778 <__ssputs_r>
 8019896:	3001      	adds	r0, #1
 8019898:	f000 80a4 	beq.w	80199e4 <_svfiprintf_r+0x1b8>
 801989c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801989e:	4453      	add	r3, sl
 80198a0:	9309      	str	r3, [sp, #36]	; 0x24
 80198a2:	783b      	ldrb	r3, [r7, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	f000 809d 	beq.w	80199e4 <_svfiprintf_r+0x1b8>
 80198aa:	2300      	movs	r3, #0
 80198ac:	f04f 32ff 	mov.w	r2, #4294967295
 80198b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198b4:	9304      	str	r3, [sp, #16]
 80198b6:	9307      	str	r3, [sp, #28]
 80198b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198bc:	931a      	str	r3, [sp, #104]	; 0x68
 80198be:	462f      	mov	r7, r5
 80198c0:	2205      	movs	r2, #5
 80198c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80198c6:	4850      	ldr	r0, [pc, #320]	; (8019a08 <_svfiprintf_r+0x1dc>)
 80198c8:	f7e6 fd12 	bl	80002f0 <memchr>
 80198cc:	9b04      	ldr	r3, [sp, #16]
 80198ce:	b9d0      	cbnz	r0, 8019906 <_svfiprintf_r+0xda>
 80198d0:	06d9      	lsls	r1, r3, #27
 80198d2:	bf44      	itt	mi
 80198d4:	2220      	movmi	r2, #32
 80198d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198da:	071a      	lsls	r2, r3, #28
 80198dc:	bf44      	itt	mi
 80198de:	222b      	movmi	r2, #43	; 0x2b
 80198e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198e4:	782a      	ldrb	r2, [r5, #0]
 80198e6:	2a2a      	cmp	r2, #42	; 0x2a
 80198e8:	d015      	beq.n	8019916 <_svfiprintf_r+0xea>
 80198ea:	9a07      	ldr	r2, [sp, #28]
 80198ec:	462f      	mov	r7, r5
 80198ee:	2000      	movs	r0, #0
 80198f0:	250a      	movs	r5, #10
 80198f2:	4639      	mov	r1, r7
 80198f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198f8:	3b30      	subs	r3, #48	; 0x30
 80198fa:	2b09      	cmp	r3, #9
 80198fc:	d94d      	bls.n	801999a <_svfiprintf_r+0x16e>
 80198fe:	b1b8      	cbz	r0, 8019930 <_svfiprintf_r+0x104>
 8019900:	e00f      	b.n	8019922 <_svfiprintf_r+0xf6>
 8019902:	462f      	mov	r7, r5
 8019904:	e7b8      	b.n	8019878 <_svfiprintf_r+0x4c>
 8019906:	4a40      	ldr	r2, [pc, #256]	; (8019a08 <_svfiprintf_r+0x1dc>)
 8019908:	1a80      	subs	r0, r0, r2
 801990a:	fa0b f000 	lsl.w	r0, fp, r0
 801990e:	4318      	orrs	r0, r3
 8019910:	9004      	str	r0, [sp, #16]
 8019912:	463d      	mov	r5, r7
 8019914:	e7d3      	b.n	80198be <_svfiprintf_r+0x92>
 8019916:	9a03      	ldr	r2, [sp, #12]
 8019918:	1d11      	adds	r1, r2, #4
 801991a:	6812      	ldr	r2, [r2, #0]
 801991c:	9103      	str	r1, [sp, #12]
 801991e:	2a00      	cmp	r2, #0
 8019920:	db01      	blt.n	8019926 <_svfiprintf_r+0xfa>
 8019922:	9207      	str	r2, [sp, #28]
 8019924:	e004      	b.n	8019930 <_svfiprintf_r+0x104>
 8019926:	4252      	negs	r2, r2
 8019928:	f043 0302 	orr.w	r3, r3, #2
 801992c:	9207      	str	r2, [sp, #28]
 801992e:	9304      	str	r3, [sp, #16]
 8019930:	783b      	ldrb	r3, [r7, #0]
 8019932:	2b2e      	cmp	r3, #46	; 0x2e
 8019934:	d10c      	bne.n	8019950 <_svfiprintf_r+0x124>
 8019936:	787b      	ldrb	r3, [r7, #1]
 8019938:	2b2a      	cmp	r3, #42	; 0x2a
 801993a:	d133      	bne.n	80199a4 <_svfiprintf_r+0x178>
 801993c:	9b03      	ldr	r3, [sp, #12]
 801993e:	1d1a      	adds	r2, r3, #4
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	9203      	str	r2, [sp, #12]
 8019944:	2b00      	cmp	r3, #0
 8019946:	bfb8      	it	lt
 8019948:	f04f 33ff 	movlt.w	r3, #4294967295
 801994c:	3702      	adds	r7, #2
 801994e:	9305      	str	r3, [sp, #20]
 8019950:	4d2e      	ldr	r5, [pc, #184]	; (8019a0c <_svfiprintf_r+0x1e0>)
 8019952:	7839      	ldrb	r1, [r7, #0]
 8019954:	2203      	movs	r2, #3
 8019956:	4628      	mov	r0, r5
 8019958:	f7e6 fcca 	bl	80002f0 <memchr>
 801995c:	b138      	cbz	r0, 801996e <_svfiprintf_r+0x142>
 801995e:	2340      	movs	r3, #64	; 0x40
 8019960:	1b40      	subs	r0, r0, r5
 8019962:	fa03 f000 	lsl.w	r0, r3, r0
 8019966:	9b04      	ldr	r3, [sp, #16]
 8019968:	4303      	orrs	r3, r0
 801996a:	3701      	adds	r7, #1
 801996c:	9304      	str	r3, [sp, #16]
 801996e:	7839      	ldrb	r1, [r7, #0]
 8019970:	4827      	ldr	r0, [pc, #156]	; (8019a10 <_svfiprintf_r+0x1e4>)
 8019972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019976:	2206      	movs	r2, #6
 8019978:	1c7e      	adds	r6, r7, #1
 801997a:	f7e6 fcb9 	bl	80002f0 <memchr>
 801997e:	2800      	cmp	r0, #0
 8019980:	d038      	beq.n	80199f4 <_svfiprintf_r+0x1c8>
 8019982:	4b24      	ldr	r3, [pc, #144]	; (8019a14 <_svfiprintf_r+0x1e8>)
 8019984:	bb13      	cbnz	r3, 80199cc <_svfiprintf_r+0x1a0>
 8019986:	9b03      	ldr	r3, [sp, #12]
 8019988:	3307      	adds	r3, #7
 801998a:	f023 0307 	bic.w	r3, r3, #7
 801998e:	3308      	adds	r3, #8
 8019990:	9303      	str	r3, [sp, #12]
 8019992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019994:	444b      	add	r3, r9
 8019996:	9309      	str	r3, [sp, #36]	; 0x24
 8019998:	e76d      	b.n	8019876 <_svfiprintf_r+0x4a>
 801999a:	fb05 3202 	mla	r2, r5, r2, r3
 801999e:	2001      	movs	r0, #1
 80199a0:	460f      	mov	r7, r1
 80199a2:	e7a6      	b.n	80198f2 <_svfiprintf_r+0xc6>
 80199a4:	2300      	movs	r3, #0
 80199a6:	3701      	adds	r7, #1
 80199a8:	9305      	str	r3, [sp, #20]
 80199aa:	4619      	mov	r1, r3
 80199ac:	250a      	movs	r5, #10
 80199ae:	4638      	mov	r0, r7
 80199b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199b4:	3a30      	subs	r2, #48	; 0x30
 80199b6:	2a09      	cmp	r2, #9
 80199b8:	d903      	bls.n	80199c2 <_svfiprintf_r+0x196>
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d0c8      	beq.n	8019950 <_svfiprintf_r+0x124>
 80199be:	9105      	str	r1, [sp, #20]
 80199c0:	e7c6      	b.n	8019950 <_svfiprintf_r+0x124>
 80199c2:	fb05 2101 	mla	r1, r5, r1, r2
 80199c6:	2301      	movs	r3, #1
 80199c8:	4607      	mov	r7, r0
 80199ca:	e7f0      	b.n	80199ae <_svfiprintf_r+0x182>
 80199cc:	ab03      	add	r3, sp, #12
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	4622      	mov	r2, r4
 80199d2:	4b11      	ldr	r3, [pc, #68]	; (8019a18 <_svfiprintf_r+0x1ec>)
 80199d4:	a904      	add	r1, sp, #16
 80199d6:	4640      	mov	r0, r8
 80199d8:	f3af 8000 	nop.w
 80199dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80199e0:	4681      	mov	r9, r0
 80199e2:	d1d6      	bne.n	8019992 <_svfiprintf_r+0x166>
 80199e4:	89a3      	ldrh	r3, [r4, #12]
 80199e6:	065b      	lsls	r3, r3, #25
 80199e8:	f53f af35 	bmi.w	8019856 <_svfiprintf_r+0x2a>
 80199ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199ee:	b01d      	add	sp, #116	; 0x74
 80199f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f4:	ab03      	add	r3, sp, #12
 80199f6:	9300      	str	r3, [sp, #0]
 80199f8:	4622      	mov	r2, r4
 80199fa:	4b07      	ldr	r3, [pc, #28]	; (8019a18 <_svfiprintf_r+0x1ec>)
 80199fc:	a904      	add	r1, sp, #16
 80199fe:	4640      	mov	r0, r8
 8019a00:	f000 f9c2 	bl	8019d88 <_printf_i>
 8019a04:	e7ea      	b.n	80199dc <_svfiprintf_r+0x1b0>
 8019a06:	bf00      	nop
 8019a08:	0801d1d0 	.word	0x0801d1d0
 8019a0c:	0801d1d6 	.word	0x0801d1d6
 8019a10:	0801d1da 	.word	0x0801d1da
 8019a14:	00000000 	.word	0x00000000
 8019a18:	08019779 	.word	0x08019779

08019a1c <__sfputc_r>:
 8019a1c:	6893      	ldr	r3, [r2, #8]
 8019a1e:	3b01      	subs	r3, #1
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	b410      	push	{r4}
 8019a24:	6093      	str	r3, [r2, #8]
 8019a26:	da08      	bge.n	8019a3a <__sfputc_r+0x1e>
 8019a28:	6994      	ldr	r4, [r2, #24]
 8019a2a:	42a3      	cmp	r3, r4
 8019a2c:	db01      	blt.n	8019a32 <__sfputc_r+0x16>
 8019a2e:	290a      	cmp	r1, #10
 8019a30:	d103      	bne.n	8019a3a <__sfputc_r+0x1e>
 8019a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a36:	f000 bb0d 	b.w	801a054 <__swbuf_r>
 8019a3a:	6813      	ldr	r3, [r2, #0]
 8019a3c:	1c58      	adds	r0, r3, #1
 8019a3e:	6010      	str	r0, [r2, #0]
 8019a40:	7019      	strb	r1, [r3, #0]
 8019a42:	4608      	mov	r0, r1
 8019a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a48:	4770      	bx	lr

08019a4a <__sfputs_r>:
 8019a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a4c:	4606      	mov	r6, r0
 8019a4e:	460f      	mov	r7, r1
 8019a50:	4614      	mov	r4, r2
 8019a52:	18d5      	adds	r5, r2, r3
 8019a54:	42ac      	cmp	r4, r5
 8019a56:	d101      	bne.n	8019a5c <__sfputs_r+0x12>
 8019a58:	2000      	movs	r0, #0
 8019a5a:	e007      	b.n	8019a6c <__sfputs_r+0x22>
 8019a5c:	463a      	mov	r2, r7
 8019a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a62:	4630      	mov	r0, r6
 8019a64:	f7ff ffda 	bl	8019a1c <__sfputc_r>
 8019a68:	1c43      	adds	r3, r0, #1
 8019a6a:	d1f3      	bne.n	8019a54 <__sfputs_r+0xa>
 8019a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a70 <_vfiprintf_r>:
 8019a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a74:	460c      	mov	r4, r1
 8019a76:	b09d      	sub	sp, #116	; 0x74
 8019a78:	4617      	mov	r7, r2
 8019a7a:	461d      	mov	r5, r3
 8019a7c:	4606      	mov	r6, r0
 8019a7e:	b118      	cbz	r0, 8019a88 <_vfiprintf_r+0x18>
 8019a80:	6983      	ldr	r3, [r0, #24]
 8019a82:	b90b      	cbnz	r3, 8019a88 <_vfiprintf_r+0x18>
 8019a84:	f7ff fd94 	bl	80195b0 <__sinit>
 8019a88:	4b7c      	ldr	r3, [pc, #496]	; (8019c7c <_vfiprintf_r+0x20c>)
 8019a8a:	429c      	cmp	r4, r3
 8019a8c:	d158      	bne.n	8019b40 <_vfiprintf_r+0xd0>
 8019a8e:	6874      	ldr	r4, [r6, #4]
 8019a90:	89a3      	ldrh	r3, [r4, #12]
 8019a92:	0718      	lsls	r0, r3, #28
 8019a94:	d55e      	bpl.n	8019b54 <_vfiprintf_r+0xe4>
 8019a96:	6923      	ldr	r3, [r4, #16]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d05b      	beq.n	8019b54 <_vfiprintf_r+0xe4>
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8019aa0:	2320      	movs	r3, #32
 8019aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019aa6:	2330      	movs	r3, #48	; 0x30
 8019aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019aac:	9503      	str	r5, [sp, #12]
 8019aae:	f04f 0b01 	mov.w	fp, #1
 8019ab2:	46b8      	mov	r8, r7
 8019ab4:	4645      	mov	r5, r8
 8019ab6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019aba:	b10b      	cbz	r3, 8019ac0 <_vfiprintf_r+0x50>
 8019abc:	2b25      	cmp	r3, #37	; 0x25
 8019abe:	d154      	bne.n	8019b6a <_vfiprintf_r+0xfa>
 8019ac0:	ebb8 0a07 	subs.w	sl, r8, r7
 8019ac4:	d00b      	beq.n	8019ade <_vfiprintf_r+0x6e>
 8019ac6:	4653      	mov	r3, sl
 8019ac8:	463a      	mov	r2, r7
 8019aca:	4621      	mov	r1, r4
 8019acc:	4630      	mov	r0, r6
 8019ace:	f7ff ffbc 	bl	8019a4a <__sfputs_r>
 8019ad2:	3001      	adds	r0, #1
 8019ad4:	f000 80c2 	beq.w	8019c5c <_vfiprintf_r+0x1ec>
 8019ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ada:	4453      	add	r3, sl
 8019adc:	9309      	str	r3, [sp, #36]	; 0x24
 8019ade:	f898 3000 	ldrb.w	r3, [r8]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	f000 80ba 	beq.w	8019c5c <_vfiprintf_r+0x1ec>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	f04f 32ff 	mov.w	r2, #4294967295
 8019aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019af2:	9304      	str	r3, [sp, #16]
 8019af4:	9307      	str	r3, [sp, #28]
 8019af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019afa:	931a      	str	r3, [sp, #104]	; 0x68
 8019afc:	46a8      	mov	r8, r5
 8019afe:	2205      	movs	r2, #5
 8019b00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019b04:	485e      	ldr	r0, [pc, #376]	; (8019c80 <_vfiprintf_r+0x210>)
 8019b06:	f7e6 fbf3 	bl	80002f0 <memchr>
 8019b0a:	9b04      	ldr	r3, [sp, #16]
 8019b0c:	bb78      	cbnz	r0, 8019b6e <_vfiprintf_r+0xfe>
 8019b0e:	06d9      	lsls	r1, r3, #27
 8019b10:	bf44      	itt	mi
 8019b12:	2220      	movmi	r2, #32
 8019b14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b18:	071a      	lsls	r2, r3, #28
 8019b1a:	bf44      	itt	mi
 8019b1c:	222b      	movmi	r2, #43	; 0x2b
 8019b1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b22:	782a      	ldrb	r2, [r5, #0]
 8019b24:	2a2a      	cmp	r2, #42	; 0x2a
 8019b26:	d02a      	beq.n	8019b7e <_vfiprintf_r+0x10e>
 8019b28:	9a07      	ldr	r2, [sp, #28]
 8019b2a:	46a8      	mov	r8, r5
 8019b2c:	2000      	movs	r0, #0
 8019b2e:	250a      	movs	r5, #10
 8019b30:	4641      	mov	r1, r8
 8019b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b36:	3b30      	subs	r3, #48	; 0x30
 8019b38:	2b09      	cmp	r3, #9
 8019b3a:	d969      	bls.n	8019c10 <_vfiprintf_r+0x1a0>
 8019b3c:	b360      	cbz	r0, 8019b98 <_vfiprintf_r+0x128>
 8019b3e:	e024      	b.n	8019b8a <_vfiprintf_r+0x11a>
 8019b40:	4b50      	ldr	r3, [pc, #320]	; (8019c84 <_vfiprintf_r+0x214>)
 8019b42:	429c      	cmp	r4, r3
 8019b44:	d101      	bne.n	8019b4a <_vfiprintf_r+0xda>
 8019b46:	68b4      	ldr	r4, [r6, #8]
 8019b48:	e7a2      	b.n	8019a90 <_vfiprintf_r+0x20>
 8019b4a:	4b4f      	ldr	r3, [pc, #316]	; (8019c88 <_vfiprintf_r+0x218>)
 8019b4c:	429c      	cmp	r4, r3
 8019b4e:	bf08      	it	eq
 8019b50:	68f4      	ldreq	r4, [r6, #12]
 8019b52:	e79d      	b.n	8019a90 <_vfiprintf_r+0x20>
 8019b54:	4621      	mov	r1, r4
 8019b56:	4630      	mov	r0, r6
 8019b58:	f000 fae0 	bl	801a11c <__swsetup_r>
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	d09d      	beq.n	8019a9c <_vfiprintf_r+0x2c>
 8019b60:	f04f 30ff 	mov.w	r0, #4294967295
 8019b64:	b01d      	add	sp, #116	; 0x74
 8019b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b6a:	46a8      	mov	r8, r5
 8019b6c:	e7a2      	b.n	8019ab4 <_vfiprintf_r+0x44>
 8019b6e:	4a44      	ldr	r2, [pc, #272]	; (8019c80 <_vfiprintf_r+0x210>)
 8019b70:	1a80      	subs	r0, r0, r2
 8019b72:	fa0b f000 	lsl.w	r0, fp, r0
 8019b76:	4318      	orrs	r0, r3
 8019b78:	9004      	str	r0, [sp, #16]
 8019b7a:	4645      	mov	r5, r8
 8019b7c:	e7be      	b.n	8019afc <_vfiprintf_r+0x8c>
 8019b7e:	9a03      	ldr	r2, [sp, #12]
 8019b80:	1d11      	adds	r1, r2, #4
 8019b82:	6812      	ldr	r2, [r2, #0]
 8019b84:	9103      	str	r1, [sp, #12]
 8019b86:	2a00      	cmp	r2, #0
 8019b88:	db01      	blt.n	8019b8e <_vfiprintf_r+0x11e>
 8019b8a:	9207      	str	r2, [sp, #28]
 8019b8c:	e004      	b.n	8019b98 <_vfiprintf_r+0x128>
 8019b8e:	4252      	negs	r2, r2
 8019b90:	f043 0302 	orr.w	r3, r3, #2
 8019b94:	9207      	str	r2, [sp, #28]
 8019b96:	9304      	str	r3, [sp, #16]
 8019b98:	f898 3000 	ldrb.w	r3, [r8]
 8019b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8019b9e:	d10e      	bne.n	8019bbe <_vfiprintf_r+0x14e>
 8019ba0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8019ba6:	d138      	bne.n	8019c1a <_vfiprintf_r+0x1aa>
 8019ba8:	9b03      	ldr	r3, [sp, #12]
 8019baa:	1d1a      	adds	r2, r3, #4
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	9203      	str	r2, [sp, #12]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	bfb8      	it	lt
 8019bb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8019bb8:	f108 0802 	add.w	r8, r8, #2
 8019bbc:	9305      	str	r3, [sp, #20]
 8019bbe:	4d33      	ldr	r5, [pc, #204]	; (8019c8c <_vfiprintf_r+0x21c>)
 8019bc0:	f898 1000 	ldrb.w	r1, [r8]
 8019bc4:	2203      	movs	r2, #3
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	f7e6 fb92 	bl	80002f0 <memchr>
 8019bcc:	b140      	cbz	r0, 8019be0 <_vfiprintf_r+0x170>
 8019bce:	2340      	movs	r3, #64	; 0x40
 8019bd0:	1b40      	subs	r0, r0, r5
 8019bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8019bd6:	9b04      	ldr	r3, [sp, #16]
 8019bd8:	4303      	orrs	r3, r0
 8019bda:	f108 0801 	add.w	r8, r8, #1
 8019bde:	9304      	str	r3, [sp, #16]
 8019be0:	f898 1000 	ldrb.w	r1, [r8]
 8019be4:	482a      	ldr	r0, [pc, #168]	; (8019c90 <_vfiprintf_r+0x220>)
 8019be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019bea:	2206      	movs	r2, #6
 8019bec:	f108 0701 	add.w	r7, r8, #1
 8019bf0:	f7e6 fb7e 	bl	80002f0 <memchr>
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	d037      	beq.n	8019c68 <_vfiprintf_r+0x1f8>
 8019bf8:	4b26      	ldr	r3, [pc, #152]	; (8019c94 <_vfiprintf_r+0x224>)
 8019bfa:	bb1b      	cbnz	r3, 8019c44 <_vfiprintf_r+0x1d4>
 8019bfc:	9b03      	ldr	r3, [sp, #12]
 8019bfe:	3307      	adds	r3, #7
 8019c00:	f023 0307 	bic.w	r3, r3, #7
 8019c04:	3308      	adds	r3, #8
 8019c06:	9303      	str	r3, [sp, #12]
 8019c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c0a:	444b      	add	r3, r9
 8019c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c0e:	e750      	b.n	8019ab2 <_vfiprintf_r+0x42>
 8019c10:	fb05 3202 	mla	r2, r5, r2, r3
 8019c14:	2001      	movs	r0, #1
 8019c16:	4688      	mov	r8, r1
 8019c18:	e78a      	b.n	8019b30 <_vfiprintf_r+0xc0>
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	f108 0801 	add.w	r8, r8, #1
 8019c20:	9305      	str	r3, [sp, #20]
 8019c22:	4619      	mov	r1, r3
 8019c24:	250a      	movs	r5, #10
 8019c26:	4640      	mov	r0, r8
 8019c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c2c:	3a30      	subs	r2, #48	; 0x30
 8019c2e:	2a09      	cmp	r2, #9
 8019c30:	d903      	bls.n	8019c3a <_vfiprintf_r+0x1ca>
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d0c3      	beq.n	8019bbe <_vfiprintf_r+0x14e>
 8019c36:	9105      	str	r1, [sp, #20]
 8019c38:	e7c1      	b.n	8019bbe <_vfiprintf_r+0x14e>
 8019c3a:	fb05 2101 	mla	r1, r5, r1, r2
 8019c3e:	2301      	movs	r3, #1
 8019c40:	4680      	mov	r8, r0
 8019c42:	e7f0      	b.n	8019c26 <_vfiprintf_r+0x1b6>
 8019c44:	ab03      	add	r3, sp, #12
 8019c46:	9300      	str	r3, [sp, #0]
 8019c48:	4622      	mov	r2, r4
 8019c4a:	4b13      	ldr	r3, [pc, #76]	; (8019c98 <_vfiprintf_r+0x228>)
 8019c4c:	a904      	add	r1, sp, #16
 8019c4e:	4630      	mov	r0, r6
 8019c50:	f3af 8000 	nop.w
 8019c54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019c58:	4681      	mov	r9, r0
 8019c5a:	d1d5      	bne.n	8019c08 <_vfiprintf_r+0x198>
 8019c5c:	89a3      	ldrh	r3, [r4, #12]
 8019c5e:	065b      	lsls	r3, r3, #25
 8019c60:	f53f af7e 	bmi.w	8019b60 <_vfiprintf_r+0xf0>
 8019c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c66:	e77d      	b.n	8019b64 <_vfiprintf_r+0xf4>
 8019c68:	ab03      	add	r3, sp, #12
 8019c6a:	9300      	str	r3, [sp, #0]
 8019c6c:	4622      	mov	r2, r4
 8019c6e:	4b0a      	ldr	r3, [pc, #40]	; (8019c98 <_vfiprintf_r+0x228>)
 8019c70:	a904      	add	r1, sp, #16
 8019c72:	4630      	mov	r0, r6
 8019c74:	f000 f888 	bl	8019d88 <_printf_i>
 8019c78:	e7ec      	b.n	8019c54 <_vfiprintf_r+0x1e4>
 8019c7a:	bf00      	nop
 8019c7c:	0801d190 	.word	0x0801d190
 8019c80:	0801d1d0 	.word	0x0801d1d0
 8019c84:	0801d1b0 	.word	0x0801d1b0
 8019c88:	0801d170 	.word	0x0801d170
 8019c8c:	0801d1d6 	.word	0x0801d1d6
 8019c90:	0801d1da 	.word	0x0801d1da
 8019c94:	00000000 	.word	0x00000000
 8019c98:	08019a4b 	.word	0x08019a4b

08019c9c <_printf_common>:
 8019c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ca0:	4691      	mov	r9, r2
 8019ca2:	461f      	mov	r7, r3
 8019ca4:	688a      	ldr	r2, [r1, #8]
 8019ca6:	690b      	ldr	r3, [r1, #16]
 8019ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019cac:	4293      	cmp	r3, r2
 8019cae:	bfb8      	it	lt
 8019cb0:	4613      	movlt	r3, r2
 8019cb2:	f8c9 3000 	str.w	r3, [r9]
 8019cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019cba:	4606      	mov	r6, r0
 8019cbc:	460c      	mov	r4, r1
 8019cbe:	b112      	cbz	r2, 8019cc6 <_printf_common+0x2a>
 8019cc0:	3301      	adds	r3, #1
 8019cc2:	f8c9 3000 	str.w	r3, [r9]
 8019cc6:	6823      	ldr	r3, [r4, #0]
 8019cc8:	0699      	lsls	r1, r3, #26
 8019cca:	bf42      	ittt	mi
 8019ccc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019cd0:	3302      	addmi	r3, #2
 8019cd2:	f8c9 3000 	strmi.w	r3, [r9]
 8019cd6:	6825      	ldr	r5, [r4, #0]
 8019cd8:	f015 0506 	ands.w	r5, r5, #6
 8019cdc:	d107      	bne.n	8019cee <_printf_common+0x52>
 8019cde:	f104 0a19 	add.w	sl, r4, #25
 8019ce2:	68e3      	ldr	r3, [r4, #12]
 8019ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8019ce8:	1a9b      	subs	r3, r3, r2
 8019cea:	42ab      	cmp	r3, r5
 8019cec:	dc28      	bgt.n	8019d40 <_printf_common+0xa4>
 8019cee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019cf2:	6822      	ldr	r2, [r4, #0]
 8019cf4:	3300      	adds	r3, #0
 8019cf6:	bf18      	it	ne
 8019cf8:	2301      	movne	r3, #1
 8019cfa:	0692      	lsls	r2, r2, #26
 8019cfc:	d42d      	bmi.n	8019d5a <_printf_common+0xbe>
 8019cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d02:	4639      	mov	r1, r7
 8019d04:	4630      	mov	r0, r6
 8019d06:	47c0      	blx	r8
 8019d08:	3001      	adds	r0, #1
 8019d0a:	d020      	beq.n	8019d4e <_printf_common+0xb2>
 8019d0c:	6823      	ldr	r3, [r4, #0]
 8019d0e:	68e5      	ldr	r5, [r4, #12]
 8019d10:	f8d9 2000 	ldr.w	r2, [r9]
 8019d14:	f003 0306 	and.w	r3, r3, #6
 8019d18:	2b04      	cmp	r3, #4
 8019d1a:	bf08      	it	eq
 8019d1c:	1aad      	subeq	r5, r5, r2
 8019d1e:	68a3      	ldr	r3, [r4, #8]
 8019d20:	6922      	ldr	r2, [r4, #16]
 8019d22:	bf0c      	ite	eq
 8019d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d28:	2500      	movne	r5, #0
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	bfc4      	itt	gt
 8019d2e:	1a9b      	subgt	r3, r3, r2
 8019d30:	18ed      	addgt	r5, r5, r3
 8019d32:	f04f 0900 	mov.w	r9, #0
 8019d36:	341a      	adds	r4, #26
 8019d38:	454d      	cmp	r5, r9
 8019d3a:	d11a      	bne.n	8019d72 <_printf_common+0xd6>
 8019d3c:	2000      	movs	r0, #0
 8019d3e:	e008      	b.n	8019d52 <_printf_common+0xb6>
 8019d40:	2301      	movs	r3, #1
 8019d42:	4652      	mov	r2, sl
 8019d44:	4639      	mov	r1, r7
 8019d46:	4630      	mov	r0, r6
 8019d48:	47c0      	blx	r8
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	d103      	bne.n	8019d56 <_printf_common+0xba>
 8019d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8019d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d56:	3501      	adds	r5, #1
 8019d58:	e7c3      	b.n	8019ce2 <_printf_common+0x46>
 8019d5a:	18e1      	adds	r1, r4, r3
 8019d5c:	1c5a      	adds	r2, r3, #1
 8019d5e:	2030      	movs	r0, #48	; 0x30
 8019d60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d64:	4422      	add	r2, r4
 8019d66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d6e:	3302      	adds	r3, #2
 8019d70:	e7c5      	b.n	8019cfe <_printf_common+0x62>
 8019d72:	2301      	movs	r3, #1
 8019d74:	4622      	mov	r2, r4
 8019d76:	4639      	mov	r1, r7
 8019d78:	4630      	mov	r0, r6
 8019d7a:	47c0      	blx	r8
 8019d7c:	3001      	adds	r0, #1
 8019d7e:	d0e6      	beq.n	8019d4e <_printf_common+0xb2>
 8019d80:	f109 0901 	add.w	r9, r9, #1
 8019d84:	e7d8      	b.n	8019d38 <_printf_common+0x9c>
	...

08019d88 <_printf_i>:
 8019d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019d90:	460c      	mov	r4, r1
 8019d92:	7e09      	ldrb	r1, [r1, #24]
 8019d94:	b085      	sub	sp, #20
 8019d96:	296e      	cmp	r1, #110	; 0x6e
 8019d98:	4617      	mov	r7, r2
 8019d9a:	4606      	mov	r6, r0
 8019d9c:	4698      	mov	r8, r3
 8019d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019da0:	f000 80b3 	beq.w	8019f0a <_printf_i+0x182>
 8019da4:	d822      	bhi.n	8019dec <_printf_i+0x64>
 8019da6:	2963      	cmp	r1, #99	; 0x63
 8019da8:	d036      	beq.n	8019e18 <_printf_i+0x90>
 8019daa:	d80a      	bhi.n	8019dc2 <_printf_i+0x3a>
 8019dac:	2900      	cmp	r1, #0
 8019dae:	f000 80b9 	beq.w	8019f24 <_printf_i+0x19c>
 8019db2:	2958      	cmp	r1, #88	; 0x58
 8019db4:	f000 8083 	beq.w	8019ebe <_printf_i+0x136>
 8019db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019dbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019dc0:	e032      	b.n	8019e28 <_printf_i+0xa0>
 8019dc2:	2964      	cmp	r1, #100	; 0x64
 8019dc4:	d001      	beq.n	8019dca <_printf_i+0x42>
 8019dc6:	2969      	cmp	r1, #105	; 0x69
 8019dc8:	d1f6      	bne.n	8019db8 <_printf_i+0x30>
 8019dca:	6820      	ldr	r0, [r4, #0]
 8019dcc:	6813      	ldr	r3, [r2, #0]
 8019dce:	0605      	lsls	r5, r0, #24
 8019dd0:	f103 0104 	add.w	r1, r3, #4
 8019dd4:	d52a      	bpl.n	8019e2c <_printf_i+0xa4>
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	6011      	str	r1, [r2, #0]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	da03      	bge.n	8019de6 <_printf_i+0x5e>
 8019dde:	222d      	movs	r2, #45	; 0x2d
 8019de0:	425b      	negs	r3, r3
 8019de2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019de6:	486f      	ldr	r0, [pc, #444]	; (8019fa4 <_printf_i+0x21c>)
 8019de8:	220a      	movs	r2, #10
 8019dea:	e039      	b.n	8019e60 <_printf_i+0xd8>
 8019dec:	2973      	cmp	r1, #115	; 0x73
 8019dee:	f000 809d 	beq.w	8019f2c <_printf_i+0x1a4>
 8019df2:	d808      	bhi.n	8019e06 <_printf_i+0x7e>
 8019df4:	296f      	cmp	r1, #111	; 0x6f
 8019df6:	d020      	beq.n	8019e3a <_printf_i+0xb2>
 8019df8:	2970      	cmp	r1, #112	; 0x70
 8019dfa:	d1dd      	bne.n	8019db8 <_printf_i+0x30>
 8019dfc:	6823      	ldr	r3, [r4, #0]
 8019dfe:	f043 0320 	orr.w	r3, r3, #32
 8019e02:	6023      	str	r3, [r4, #0]
 8019e04:	e003      	b.n	8019e0e <_printf_i+0x86>
 8019e06:	2975      	cmp	r1, #117	; 0x75
 8019e08:	d017      	beq.n	8019e3a <_printf_i+0xb2>
 8019e0a:	2978      	cmp	r1, #120	; 0x78
 8019e0c:	d1d4      	bne.n	8019db8 <_printf_i+0x30>
 8019e0e:	2378      	movs	r3, #120	; 0x78
 8019e10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019e14:	4864      	ldr	r0, [pc, #400]	; (8019fa8 <_printf_i+0x220>)
 8019e16:	e055      	b.n	8019ec4 <_printf_i+0x13c>
 8019e18:	6813      	ldr	r3, [r2, #0]
 8019e1a:	1d19      	adds	r1, r3, #4
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	6011      	str	r1, [r2, #0]
 8019e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e28:	2301      	movs	r3, #1
 8019e2a:	e08c      	b.n	8019f46 <_printf_i+0x1be>
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	6011      	str	r1, [r2, #0]
 8019e30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e34:	bf18      	it	ne
 8019e36:	b21b      	sxthne	r3, r3
 8019e38:	e7cf      	b.n	8019dda <_printf_i+0x52>
 8019e3a:	6813      	ldr	r3, [r2, #0]
 8019e3c:	6825      	ldr	r5, [r4, #0]
 8019e3e:	1d18      	adds	r0, r3, #4
 8019e40:	6010      	str	r0, [r2, #0]
 8019e42:	0628      	lsls	r0, r5, #24
 8019e44:	d501      	bpl.n	8019e4a <_printf_i+0xc2>
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	e002      	b.n	8019e50 <_printf_i+0xc8>
 8019e4a:	0668      	lsls	r0, r5, #25
 8019e4c:	d5fb      	bpl.n	8019e46 <_printf_i+0xbe>
 8019e4e:	881b      	ldrh	r3, [r3, #0]
 8019e50:	4854      	ldr	r0, [pc, #336]	; (8019fa4 <_printf_i+0x21c>)
 8019e52:	296f      	cmp	r1, #111	; 0x6f
 8019e54:	bf14      	ite	ne
 8019e56:	220a      	movne	r2, #10
 8019e58:	2208      	moveq	r2, #8
 8019e5a:	2100      	movs	r1, #0
 8019e5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e60:	6865      	ldr	r5, [r4, #4]
 8019e62:	60a5      	str	r5, [r4, #8]
 8019e64:	2d00      	cmp	r5, #0
 8019e66:	f2c0 8095 	blt.w	8019f94 <_printf_i+0x20c>
 8019e6a:	6821      	ldr	r1, [r4, #0]
 8019e6c:	f021 0104 	bic.w	r1, r1, #4
 8019e70:	6021      	str	r1, [r4, #0]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d13d      	bne.n	8019ef2 <_printf_i+0x16a>
 8019e76:	2d00      	cmp	r5, #0
 8019e78:	f040 808e 	bne.w	8019f98 <_printf_i+0x210>
 8019e7c:	4665      	mov	r5, ip
 8019e7e:	2a08      	cmp	r2, #8
 8019e80:	d10b      	bne.n	8019e9a <_printf_i+0x112>
 8019e82:	6823      	ldr	r3, [r4, #0]
 8019e84:	07db      	lsls	r3, r3, #31
 8019e86:	d508      	bpl.n	8019e9a <_printf_i+0x112>
 8019e88:	6923      	ldr	r3, [r4, #16]
 8019e8a:	6862      	ldr	r2, [r4, #4]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	bfde      	ittt	le
 8019e90:	2330      	movle	r3, #48	; 0x30
 8019e92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019e96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019e9a:	ebac 0305 	sub.w	r3, ip, r5
 8019e9e:	6123      	str	r3, [r4, #16]
 8019ea0:	f8cd 8000 	str.w	r8, [sp]
 8019ea4:	463b      	mov	r3, r7
 8019ea6:	aa03      	add	r2, sp, #12
 8019ea8:	4621      	mov	r1, r4
 8019eaa:	4630      	mov	r0, r6
 8019eac:	f7ff fef6 	bl	8019c9c <_printf_common>
 8019eb0:	3001      	adds	r0, #1
 8019eb2:	d14d      	bne.n	8019f50 <_printf_i+0x1c8>
 8019eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb8:	b005      	add	sp, #20
 8019eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ebe:	4839      	ldr	r0, [pc, #228]	; (8019fa4 <_printf_i+0x21c>)
 8019ec0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019ec4:	6813      	ldr	r3, [r2, #0]
 8019ec6:	6821      	ldr	r1, [r4, #0]
 8019ec8:	1d1d      	adds	r5, r3, #4
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	6015      	str	r5, [r2, #0]
 8019ece:	060a      	lsls	r2, r1, #24
 8019ed0:	d50b      	bpl.n	8019eea <_printf_i+0x162>
 8019ed2:	07ca      	lsls	r2, r1, #31
 8019ed4:	bf44      	itt	mi
 8019ed6:	f041 0120 	orrmi.w	r1, r1, #32
 8019eda:	6021      	strmi	r1, [r4, #0]
 8019edc:	b91b      	cbnz	r3, 8019ee6 <_printf_i+0x15e>
 8019ede:	6822      	ldr	r2, [r4, #0]
 8019ee0:	f022 0220 	bic.w	r2, r2, #32
 8019ee4:	6022      	str	r2, [r4, #0]
 8019ee6:	2210      	movs	r2, #16
 8019ee8:	e7b7      	b.n	8019e5a <_printf_i+0xd2>
 8019eea:	064d      	lsls	r5, r1, #25
 8019eec:	bf48      	it	mi
 8019eee:	b29b      	uxthmi	r3, r3
 8019ef0:	e7ef      	b.n	8019ed2 <_printf_i+0x14a>
 8019ef2:	4665      	mov	r5, ip
 8019ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8019ef8:	fb02 3311 	mls	r3, r2, r1, r3
 8019efc:	5cc3      	ldrb	r3, [r0, r3]
 8019efe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019f02:	460b      	mov	r3, r1
 8019f04:	2900      	cmp	r1, #0
 8019f06:	d1f5      	bne.n	8019ef4 <_printf_i+0x16c>
 8019f08:	e7b9      	b.n	8019e7e <_printf_i+0xf6>
 8019f0a:	6813      	ldr	r3, [r2, #0]
 8019f0c:	6825      	ldr	r5, [r4, #0]
 8019f0e:	6961      	ldr	r1, [r4, #20]
 8019f10:	1d18      	adds	r0, r3, #4
 8019f12:	6010      	str	r0, [r2, #0]
 8019f14:	0628      	lsls	r0, r5, #24
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	d501      	bpl.n	8019f1e <_printf_i+0x196>
 8019f1a:	6019      	str	r1, [r3, #0]
 8019f1c:	e002      	b.n	8019f24 <_printf_i+0x19c>
 8019f1e:	066a      	lsls	r2, r5, #25
 8019f20:	d5fb      	bpl.n	8019f1a <_printf_i+0x192>
 8019f22:	8019      	strh	r1, [r3, #0]
 8019f24:	2300      	movs	r3, #0
 8019f26:	6123      	str	r3, [r4, #16]
 8019f28:	4665      	mov	r5, ip
 8019f2a:	e7b9      	b.n	8019ea0 <_printf_i+0x118>
 8019f2c:	6813      	ldr	r3, [r2, #0]
 8019f2e:	1d19      	adds	r1, r3, #4
 8019f30:	6011      	str	r1, [r2, #0]
 8019f32:	681d      	ldr	r5, [r3, #0]
 8019f34:	6862      	ldr	r2, [r4, #4]
 8019f36:	2100      	movs	r1, #0
 8019f38:	4628      	mov	r0, r5
 8019f3a:	f7e6 f9d9 	bl	80002f0 <memchr>
 8019f3e:	b108      	cbz	r0, 8019f44 <_printf_i+0x1bc>
 8019f40:	1b40      	subs	r0, r0, r5
 8019f42:	6060      	str	r0, [r4, #4]
 8019f44:	6863      	ldr	r3, [r4, #4]
 8019f46:	6123      	str	r3, [r4, #16]
 8019f48:	2300      	movs	r3, #0
 8019f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f4e:	e7a7      	b.n	8019ea0 <_printf_i+0x118>
 8019f50:	6923      	ldr	r3, [r4, #16]
 8019f52:	462a      	mov	r2, r5
 8019f54:	4639      	mov	r1, r7
 8019f56:	4630      	mov	r0, r6
 8019f58:	47c0      	blx	r8
 8019f5a:	3001      	adds	r0, #1
 8019f5c:	d0aa      	beq.n	8019eb4 <_printf_i+0x12c>
 8019f5e:	6823      	ldr	r3, [r4, #0]
 8019f60:	079b      	lsls	r3, r3, #30
 8019f62:	d413      	bmi.n	8019f8c <_printf_i+0x204>
 8019f64:	68e0      	ldr	r0, [r4, #12]
 8019f66:	9b03      	ldr	r3, [sp, #12]
 8019f68:	4298      	cmp	r0, r3
 8019f6a:	bfb8      	it	lt
 8019f6c:	4618      	movlt	r0, r3
 8019f6e:	e7a3      	b.n	8019eb8 <_printf_i+0x130>
 8019f70:	2301      	movs	r3, #1
 8019f72:	464a      	mov	r2, r9
 8019f74:	4639      	mov	r1, r7
 8019f76:	4630      	mov	r0, r6
 8019f78:	47c0      	blx	r8
 8019f7a:	3001      	adds	r0, #1
 8019f7c:	d09a      	beq.n	8019eb4 <_printf_i+0x12c>
 8019f7e:	3501      	adds	r5, #1
 8019f80:	68e3      	ldr	r3, [r4, #12]
 8019f82:	9a03      	ldr	r2, [sp, #12]
 8019f84:	1a9b      	subs	r3, r3, r2
 8019f86:	42ab      	cmp	r3, r5
 8019f88:	dcf2      	bgt.n	8019f70 <_printf_i+0x1e8>
 8019f8a:	e7eb      	b.n	8019f64 <_printf_i+0x1dc>
 8019f8c:	2500      	movs	r5, #0
 8019f8e:	f104 0919 	add.w	r9, r4, #25
 8019f92:	e7f5      	b.n	8019f80 <_printf_i+0x1f8>
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d1ac      	bne.n	8019ef2 <_printf_i+0x16a>
 8019f98:	7803      	ldrb	r3, [r0, #0]
 8019f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fa2:	e76c      	b.n	8019e7e <_printf_i+0xf6>
 8019fa4:	0801d1e1 	.word	0x0801d1e1
 8019fa8:	0801d1f2 	.word	0x0801d1f2

08019fac <_sbrk_r>:
 8019fac:	b538      	push	{r3, r4, r5, lr}
 8019fae:	4c06      	ldr	r4, [pc, #24]	; (8019fc8 <_sbrk_r+0x1c>)
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	4605      	mov	r5, r0
 8019fb4:	4608      	mov	r0, r1
 8019fb6:	6023      	str	r3, [r4, #0]
 8019fb8:	f7e7 f9d0 	bl	800135c <_sbrk>
 8019fbc:	1c43      	adds	r3, r0, #1
 8019fbe:	d102      	bne.n	8019fc6 <_sbrk_r+0x1a>
 8019fc0:	6823      	ldr	r3, [r4, #0]
 8019fc2:	b103      	cbz	r3, 8019fc6 <_sbrk_r+0x1a>
 8019fc4:	602b      	str	r3, [r5, #0]
 8019fc6:	bd38      	pop	{r3, r4, r5, pc}
 8019fc8:	200101e8 	.word	0x200101e8

08019fcc <__sread>:
 8019fcc:	b510      	push	{r4, lr}
 8019fce:	460c      	mov	r4, r1
 8019fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fd4:	f000 fad6 	bl	801a584 <_read_r>
 8019fd8:	2800      	cmp	r0, #0
 8019fda:	bfab      	itete	ge
 8019fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019fde:	89a3      	ldrhlt	r3, [r4, #12]
 8019fe0:	181b      	addge	r3, r3, r0
 8019fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019fe6:	bfac      	ite	ge
 8019fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8019fea:	81a3      	strhlt	r3, [r4, #12]
 8019fec:	bd10      	pop	{r4, pc}

08019fee <__swrite>:
 8019fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ff2:	461f      	mov	r7, r3
 8019ff4:	898b      	ldrh	r3, [r1, #12]
 8019ff6:	05db      	lsls	r3, r3, #23
 8019ff8:	4605      	mov	r5, r0
 8019ffa:	460c      	mov	r4, r1
 8019ffc:	4616      	mov	r6, r2
 8019ffe:	d505      	bpl.n	801a00c <__swrite+0x1e>
 801a000:	2302      	movs	r3, #2
 801a002:	2200      	movs	r2, #0
 801a004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a008:	f000 f9b6 	bl	801a378 <_lseek_r>
 801a00c:	89a3      	ldrh	r3, [r4, #12]
 801a00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a016:	81a3      	strh	r3, [r4, #12]
 801a018:	4632      	mov	r2, r6
 801a01a:	463b      	mov	r3, r7
 801a01c:	4628      	mov	r0, r5
 801a01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a022:	f000 b869 	b.w	801a0f8 <_write_r>

0801a026 <__sseek>:
 801a026:	b510      	push	{r4, lr}
 801a028:	460c      	mov	r4, r1
 801a02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a02e:	f000 f9a3 	bl	801a378 <_lseek_r>
 801a032:	1c43      	adds	r3, r0, #1
 801a034:	89a3      	ldrh	r3, [r4, #12]
 801a036:	bf15      	itete	ne
 801a038:	6560      	strne	r0, [r4, #84]	; 0x54
 801a03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a042:	81a3      	strheq	r3, [r4, #12]
 801a044:	bf18      	it	ne
 801a046:	81a3      	strhne	r3, [r4, #12]
 801a048:	bd10      	pop	{r4, pc}

0801a04a <__sclose>:
 801a04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a04e:	f000 b8d3 	b.w	801a1f8 <_close_r>
	...

0801a054 <__swbuf_r>:
 801a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a056:	460e      	mov	r6, r1
 801a058:	4614      	mov	r4, r2
 801a05a:	4605      	mov	r5, r0
 801a05c:	b118      	cbz	r0, 801a066 <__swbuf_r+0x12>
 801a05e:	6983      	ldr	r3, [r0, #24]
 801a060:	b90b      	cbnz	r3, 801a066 <__swbuf_r+0x12>
 801a062:	f7ff faa5 	bl	80195b0 <__sinit>
 801a066:	4b21      	ldr	r3, [pc, #132]	; (801a0ec <__swbuf_r+0x98>)
 801a068:	429c      	cmp	r4, r3
 801a06a:	d12a      	bne.n	801a0c2 <__swbuf_r+0x6e>
 801a06c:	686c      	ldr	r4, [r5, #4]
 801a06e:	69a3      	ldr	r3, [r4, #24]
 801a070:	60a3      	str	r3, [r4, #8]
 801a072:	89a3      	ldrh	r3, [r4, #12]
 801a074:	071a      	lsls	r2, r3, #28
 801a076:	d52e      	bpl.n	801a0d6 <__swbuf_r+0x82>
 801a078:	6923      	ldr	r3, [r4, #16]
 801a07a:	b363      	cbz	r3, 801a0d6 <__swbuf_r+0x82>
 801a07c:	6923      	ldr	r3, [r4, #16]
 801a07e:	6820      	ldr	r0, [r4, #0]
 801a080:	1ac0      	subs	r0, r0, r3
 801a082:	6963      	ldr	r3, [r4, #20]
 801a084:	b2f6      	uxtb	r6, r6
 801a086:	4283      	cmp	r3, r0
 801a088:	4637      	mov	r7, r6
 801a08a:	dc04      	bgt.n	801a096 <__swbuf_r+0x42>
 801a08c:	4621      	mov	r1, r4
 801a08e:	4628      	mov	r0, r5
 801a090:	f000 f948 	bl	801a324 <_fflush_r>
 801a094:	bb28      	cbnz	r0, 801a0e2 <__swbuf_r+0x8e>
 801a096:	68a3      	ldr	r3, [r4, #8]
 801a098:	3b01      	subs	r3, #1
 801a09a:	60a3      	str	r3, [r4, #8]
 801a09c:	6823      	ldr	r3, [r4, #0]
 801a09e:	1c5a      	adds	r2, r3, #1
 801a0a0:	6022      	str	r2, [r4, #0]
 801a0a2:	701e      	strb	r6, [r3, #0]
 801a0a4:	6963      	ldr	r3, [r4, #20]
 801a0a6:	3001      	adds	r0, #1
 801a0a8:	4283      	cmp	r3, r0
 801a0aa:	d004      	beq.n	801a0b6 <__swbuf_r+0x62>
 801a0ac:	89a3      	ldrh	r3, [r4, #12]
 801a0ae:	07db      	lsls	r3, r3, #31
 801a0b0:	d519      	bpl.n	801a0e6 <__swbuf_r+0x92>
 801a0b2:	2e0a      	cmp	r6, #10
 801a0b4:	d117      	bne.n	801a0e6 <__swbuf_r+0x92>
 801a0b6:	4621      	mov	r1, r4
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	f000 f933 	bl	801a324 <_fflush_r>
 801a0be:	b190      	cbz	r0, 801a0e6 <__swbuf_r+0x92>
 801a0c0:	e00f      	b.n	801a0e2 <__swbuf_r+0x8e>
 801a0c2:	4b0b      	ldr	r3, [pc, #44]	; (801a0f0 <__swbuf_r+0x9c>)
 801a0c4:	429c      	cmp	r4, r3
 801a0c6:	d101      	bne.n	801a0cc <__swbuf_r+0x78>
 801a0c8:	68ac      	ldr	r4, [r5, #8]
 801a0ca:	e7d0      	b.n	801a06e <__swbuf_r+0x1a>
 801a0cc:	4b09      	ldr	r3, [pc, #36]	; (801a0f4 <__swbuf_r+0xa0>)
 801a0ce:	429c      	cmp	r4, r3
 801a0d0:	bf08      	it	eq
 801a0d2:	68ec      	ldreq	r4, [r5, #12]
 801a0d4:	e7cb      	b.n	801a06e <__swbuf_r+0x1a>
 801a0d6:	4621      	mov	r1, r4
 801a0d8:	4628      	mov	r0, r5
 801a0da:	f000 f81f 	bl	801a11c <__swsetup_r>
 801a0de:	2800      	cmp	r0, #0
 801a0e0:	d0cc      	beq.n	801a07c <__swbuf_r+0x28>
 801a0e2:	f04f 37ff 	mov.w	r7, #4294967295
 801a0e6:	4638      	mov	r0, r7
 801a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	0801d190 	.word	0x0801d190
 801a0f0:	0801d1b0 	.word	0x0801d1b0
 801a0f4:	0801d170 	.word	0x0801d170

0801a0f8 <_write_r>:
 801a0f8:	b538      	push	{r3, r4, r5, lr}
 801a0fa:	4c07      	ldr	r4, [pc, #28]	; (801a118 <_write_r+0x20>)
 801a0fc:	4605      	mov	r5, r0
 801a0fe:	4608      	mov	r0, r1
 801a100:	4611      	mov	r1, r2
 801a102:	2200      	movs	r2, #0
 801a104:	6022      	str	r2, [r4, #0]
 801a106:	461a      	mov	r2, r3
 801a108:	f7e7 f8d7 	bl	80012ba <_write>
 801a10c:	1c43      	adds	r3, r0, #1
 801a10e:	d102      	bne.n	801a116 <_write_r+0x1e>
 801a110:	6823      	ldr	r3, [r4, #0]
 801a112:	b103      	cbz	r3, 801a116 <_write_r+0x1e>
 801a114:	602b      	str	r3, [r5, #0]
 801a116:	bd38      	pop	{r3, r4, r5, pc}
 801a118:	200101e8 	.word	0x200101e8

0801a11c <__swsetup_r>:
 801a11c:	4b32      	ldr	r3, [pc, #200]	; (801a1e8 <__swsetup_r+0xcc>)
 801a11e:	b570      	push	{r4, r5, r6, lr}
 801a120:	681d      	ldr	r5, [r3, #0]
 801a122:	4606      	mov	r6, r0
 801a124:	460c      	mov	r4, r1
 801a126:	b125      	cbz	r5, 801a132 <__swsetup_r+0x16>
 801a128:	69ab      	ldr	r3, [r5, #24]
 801a12a:	b913      	cbnz	r3, 801a132 <__swsetup_r+0x16>
 801a12c:	4628      	mov	r0, r5
 801a12e:	f7ff fa3f 	bl	80195b0 <__sinit>
 801a132:	4b2e      	ldr	r3, [pc, #184]	; (801a1ec <__swsetup_r+0xd0>)
 801a134:	429c      	cmp	r4, r3
 801a136:	d10f      	bne.n	801a158 <__swsetup_r+0x3c>
 801a138:	686c      	ldr	r4, [r5, #4]
 801a13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a13e:	b29a      	uxth	r2, r3
 801a140:	0715      	lsls	r5, r2, #28
 801a142:	d42c      	bmi.n	801a19e <__swsetup_r+0x82>
 801a144:	06d0      	lsls	r0, r2, #27
 801a146:	d411      	bmi.n	801a16c <__swsetup_r+0x50>
 801a148:	2209      	movs	r2, #9
 801a14a:	6032      	str	r2, [r6, #0]
 801a14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a150:	81a3      	strh	r3, [r4, #12]
 801a152:	f04f 30ff 	mov.w	r0, #4294967295
 801a156:	e03e      	b.n	801a1d6 <__swsetup_r+0xba>
 801a158:	4b25      	ldr	r3, [pc, #148]	; (801a1f0 <__swsetup_r+0xd4>)
 801a15a:	429c      	cmp	r4, r3
 801a15c:	d101      	bne.n	801a162 <__swsetup_r+0x46>
 801a15e:	68ac      	ldr	r4, [r5, #8]
 801a160:	e7eb      	b.n	801a13a <__swsetup_r+0x1e>
 801a162:	4b24      	ldr	r3, [pc, #144]	; (801a1f4 <__swsetup_r+0xd8>)
 801a164:	429c      	cmp	r4, r3
 801a166:	bf08      	it	eq
 801a168:	68ec      	ldreq	r4, [r5, #12]
 801a16a:	e7e6      	b.n	801a13a <__swsetup_r+0x1e>
 801a16c:	0751      	lsls	r1, r2, #29
 801a16e:	d512      	bpl.n	801a196 <__swsetup_r+0x7a>
 801a170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a172:	b141      	cbz	r1, 801a186 <__swsetup_r+0x6a>
 801a174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a178:	4299      	cmp	r1, r3
 801a17a:	d002      	beq.n	801a182 <__swsetup_r+0x66>
 801a17c:	4630      	mov	r0, r6
 801a17e:	f000 f98d 	bl	801a49c <_free_r>
 801a182:	2300      	movs	r3, #0
 801a184:	6363      	str	r3, [r4, #52]	; 0x34
 801a186:	89a3      	ldrh	r3, [r4, #12]
 801a188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a18c:	81a3      	strh	r3, [r4, #12]
 801a18e:	2300      	movs	r3, #0
 801a190:	6063      	str	r3, [r4, #4]
 801a192:	6923      	ldr	r3, [r4, #16]
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	89a3      	ldrh	r3, [r4, #12]
 801a198:	f043 0308 	orr.w	r3, r3, #8
 801a19c:	81a3      	strh	r3, [r4, #12]
 801a19e:	6923      	ldr	r3, [r4, #16]
 801a1a0:	b94b      	cbnz	r3, 801a1b6 <__swsetup_r+0x9a>
 801a1a2:	89a3      	ldrh	r3, [r4, #12]
 801a1a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1ac:	d003      	beq.n	801a1b6 <__swsetup_r+0x9a>
 801a1ae:	4621      	mov	r1, r4
 801a1b0:	4630      	mov	r0, r6
 801a1b2:	f000 f917 	bl	801a3e4 <__smakebuf_r>
 801a1b6:	89a2      	ldrh	r2, [r4, #12]
 801a1b8:	f012 0301 	ands.w	r3, r2, #1
 801a1bc:	d00c      	beq.n	801a1d8 <__swsetup_r+0xbc>
 801a1be:	2300      	movs	r3, #0
 801a1c0:	60a3      	str	r3, [r4, #8]
 801a1c2:	6963      	ldr	r3, [r4, #20]
 801a1c4:	425b      	negs	r3, r3
 801a1c6:	61a3      	str	r3, [r4, #24]
 801a1c8:	6923      	ldr	r3, [r4, #16]
 801a1ca:	b953      	cbnz	r3, 801a1e2 <__swsetup_r+0xc6>
 801a1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a1d4:	d1ba      	bne.n	801a14c <__swsetup_r+0x30>
 801a1d6:	bd70      	pop	{r4, r5, r6, pc}
 801a1d8:	0792      	lsls	r2, r2, #30
 801a1da:	bf58      	it	pl
 801a1dc:	6963      	ldrpl	r3, [r4, #20]
 801a1de:	60a3      	str	r3, [r4, #8]
 801a1e0:	e7f2      	b.n	801a1c8 <__swsetup_r+0xac>
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	e7f7      	b.n	801a1d6 <__swsetup_r+0xba>
 801a1e6:	bf00      	nop
 801a1e8:	20000034 	.word	0x20000034
 801a1ec:	0801d190 	.word	0x0801d190
 801a1f0:	0801d1b0 	.word	0x0801d1b0
 801a1f4:	0801d170 	.word	0x0801d170

0801a1f8 <_close_r>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	4c06      	ldr	r4, [pc, #24]	; (801a214 <_close_r+0x1c>)
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	4605      	mov	r5, r0
 801a200:	4608      	mov	r0, r1
 801a202:	6023      	str	r3, [r4, #0]
 801a204:	f7e7 f875 	bl	80012f2 <_close>
 801a208:	1c43      	adds	r3, r0, #1
 801a20a:	d102      	bne.n	801a212 <_close_r+0x1a>
 801a20c:	6823      	ldr	r3, [r4, #0]
 801a20e:	b103      	cbz	r3, 801a212 <_close_r+0x1a>
 801a210:	602b      	str	r3, [r5, #0]
 801a212:	bd38      	pop	{r3, r4, r5, pc}
 801a214:	200101e8 	.word	0x200101e8

0801a218 <__sflush_r>:
 801a218:	898a      	ldrh	r2, [r1, #12]
 801a21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a21e:	4605      	mov	r5, r0
 801a220:	0710      	lsls	r0, r2, #28
 801a222:	460c      	mov	r4, r1
 801a224:	d458      	bmi.n	801a2d8 <__sflush_r+0xc0>
 801a226:	684b      	ldr	r3, [r1, #4]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	dc05      	bgt.n	801a238 <__sflush_r+0x20>
 801a22c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a22e:	2b00      	cmp	r3, #0
 801a230:	dc02      	bgt.n	801a238 <__sflush_r+0x20>
 801a232:	2000      	movs	r0, #0
 801a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a23a:	2e00      	cmp	r6, #0
 801a23c:	d0f9      	beq.n	801a232 <__sflush_r+0x1a>
 801a23e:	2300      	movs	r3, #0
 801a240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a244:	682f      	ldr	r7, [r5, #0]
 801a246:	6a21      	ldr	r1, [r4, #32]
 801a248:	602b      	str	r3, [r5, #0]
 801a24a:	d032      	beq.n	801a2b2 <__sflush_r+0x9a>
 801a24c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a24e:	89a3      	ldrh	r3, [r4, #12]
 801a250:	075a      	lsls	r2, r3, #29
 801a252:	d505      	bpl.n	801a260 <__sflush_r+0x48>
 801a254:	6863      	ldr	r3, [r4, #4]
 801a256:	1ac0      	subs	r0, r0, r3
 801a258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a25a:	b10b      	cbz	r3, 801a260 <__sflush_r+0x48>
 801a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a25e:	1ac0      	subs	r0, r0, r3
 801a260:	2300      	movs	r3, #0
 801a262:	4602      	mov	r2, r0
 801a264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a266:	6a21      	ldr	r1, [r4, #32]
 801a268:	4628      	mov	r0, r5
 801a26a:	47b0      	blx	r6
 801a26c:	1c43      	adds	r3, r0, #1
 801a26e:	89a3      	ldrh	r3, [r4, #12]
 801a270:	d106      	bne.n	801a280 <__sflush_r+0x68>
 801a272:	6829      	ldr	r1, [r5, #0]
 801a274:	291d      	cmp	r1, #29
 801a276:	d848      	bhi.n	801a30a <__sflush_r+0xf2>
 801a278:	4a29      	ldr	r2, [pc, #164]	; (801a320 <__sflush_r+0x108>)
 801a27a:	40ca      	lsrs	r2, r1
 801a27c:	07d6      	lsls	r6, r2, #31
 801a27e:	d544      	bpl.n	801a30a <__sflush_r+0xf2>
 801a280:	2200      	movs	r2, #0
 801a282:	6062      	str	r2, [r4, #4]
 801a284:	04d9      	lsls	r1, r3, #19
 801a286:	6922      	ldr	r2, [r4, #16]
 801a288:	6022      	str	r2, [r4, #0]
 801a28a:	d504      	bpl.n	801a296 <__sflush_r+0x7e>
 801a28c:	1c42      	adds	r2, r0, #1
 801a28e:	d101      	bne.n	801a294 <__sflush_r+0x7c>
 801a290:	682b      	ldr	r3, [r5, #0]
 801a292:	b903      	cbnz	r3, 801a296 <__sflush_r+0x7e>
 801a294:	6560      	str	r0, [r4, #84]	; 0x54
 801a296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a298:	602f      	str	r7, [r5, #0]
 801a29a:	2900      	cmp	r1, #0
 801a29c:	d0c9      	beq.n	801a232 <__sflush_r+0x1a>
 801a29e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2a2:	4299      	cmp	r1, r3
 801a2a4:	d002      	beq.n	801a2ac <__sflush_r+0x94>
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	f000 f8f8 	bl	801a49c <_free_r>
 801a2ac:	2000      	movs	r0, #0
 801a2ae:	6360      	str	r0, [r4, #52]	; 0x34
 801a2b0:	e7c0      	b.n	801a234 <__sflush_r+0x1c>
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	47b0      	blx	r6
 801a2b8:	1c41      	adds	r1, r0, #1
 801a2ba:	d1c8      	bne.n	801a24e <__sflush_r+0x36>
 801a2bc:	682b      	ldr	r3, [r5, #0]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d0c5      	beq.n	801a24e <__sflush_r+0x36>
 801a2c2:	2b1d      	cmp	r3, #29
 801a2c4:	d001      	beq.n	801a2ca <__sflush_r+0xb2>
 801a2c6:	2b16      	cmp	r3, #22
 801a2c8:	d101      	bne.n	801a2ce <__sflush_r+0xb6>
 801a2ca:	602f      	str	r7, [r5, #0]
 801a2cc:	e7b1      	b.n	801a232 <__sflush_r+0x1a>
 801a2ce:	89a3      	ldrh	r3, [r4, #12]
 801a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2d4:	81a3      	strh	r3, [r4, #12]
 801a2d6:	e7ad      	b.n	801a234 <__sflush_r+0x1c>
 801a2d8:	690f      	ldr	r7, [r1, #16]
 801a2da:	2f00      	cmp	r7, #0
 801a2dc:	d0a9      	beq.n	801a232 <__sflush_r+0x1a>
 801a2de:	0793      	lsls	r3, r2, #30
 801a2e0:	680e      	ldr	r6, [r1, #0]
 801a2e2:	bf08      	it	eq
 801a2e4:	694b      	ldreq	r3, [r1, #20]
 801a2e6:	600f      	str	r7, [r1, #0]
 801a2e8:	bf18      	it	ne
 801a2ea:	2300      	movne	r3, #0
 801a2ec:	eba6 0807 	sub.w	r8, r6, r7
 801a2f0:	608b      	str	r3, [r1, #8]
 801a2f2:	f1b8 0f00 	cmp.w	r8, #0
 801a2f6:	dd9c      	ble.n	801a232 <__sflush_r+0x1a>
 801a2f8:	4643      	mov	r3, r8
 801a2fa:	463a      	mov	r2, r7
 801a2fc:	6a21      	ldr	r1, [r4, #32]
 801a2fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a300:	4628      	mov	r0, r5
 801a302:	47b0      	blx	r6
 801a304:	2800      	cmp	r0, #0
 801a306:	dc06      	bgt.n	801a316 <__sflush_r+0xfe>
 801a308:	89a3      	ldrh	r3, [r4, #12]
 801a30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a30e:	81a3      	strh	r3, [r4, #12]
 801a310:	f04f 30ff 	mov.w	r0, #4294967295
 801a314:	e78e      	b.n	801a234 <__sflush_r+0x1c>
 801a316:	4407      	add	r7, r0
 801a318:	eba8 0800 	sub.w	r8, r8, r0
 801a31c:	e7e9      	b.n	801a2f2 <__sflush_r+0xda>
 801a31e:	bf00      	nop
 801a320:	20400001 	.word	0x20400001

0801a324 <_fflush_r>:
 801a324:	b538      	push	{r3, r4, r5, lr}
 801a326:	690b      	ldr	r3, [r1, #16]
 801a328:	4605      	mov	r5, r0
 801a32a:	460c      	mov	r4, r1
 801a32c:	b1db      	cbz	r3, 801a366 <_fflush_r+0x42>
 801a32e:	b118      	cbz	r0, 801a338 <_fflush_r+0x14>
 801a330:	6983      	ldr	r3, [r0, #24]
 801a332:	b90b      	cbnz	r3, 801a338 <_fflush_r+0x14>
 801a334:	f7ff f93c 	bl	80195b0 <__sinit>
 801a338:	4b0c      	ldr	r3, [pc, #48]	; (801a36c <_fflush_r+0x48>)
 801a33a:	429c      	cmp	r4, r3
 801a33c:	d109      	bne.n	801a352 <_fflush_r+0x2e>
 801a33e:	686c      	ldr	r4, [r5, #4]
 801a340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a344:	b17b      	cbz	r3, 801a366 <_fflush_r+0x42>
 801a346:	4621      	mov	r1, r4
 801a348:	4628      	mov	r0, r5
 801a34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a34e:	f7ff bf63 	b.w	801a218 <__sflush_r>
 801a352:	4b07      	ldr	r3, [pc, #28]	; (801a370 <_fflush_r+0x4c>)
 801a354:	429c      	cmp	r4, r3
 801a356:	d101      	bne.n	801a35c <_fflush_r+0x38>
 801a358:	68ac      	ldr	r4, [r5, #8]
 801a35a:	e7f1      	b.n	801a340 <_fflush_r+0x1c>
 801a35c:	4b05      	ldr	r3, [pc, #20]	; (801a374 <_fflush_r+0x50>)
 801a35e:	429c      	cmp	r4, r3
 801a360:	bf08      	it	eq
 801a362:	68ec      	ldreq	r4, [r5, #12]
 801a364:	e7ec      	b.n	801a340 <_fflush_r+0x1c>
 801a366:	2000      	movs	r0, #0
 801a368:	bd38      	pop	{r3, r4, r5, pc}
 801a36a:	bf00      	nop
 801a36c:	0801d190 	.word	0x0801d190
 801a370:	0801d1b0 	.word	0x0801d1b0
 801a374:	0801d170 	.word	0x0801d170

0801a378 <_lseek_r>:
 801a378:	b538      	push	{r3, r4, r5, lr}
 801a37a:	4c07      	ldr	r4, [pc, #28]	; (801a398 <_lseek_r+0x20>)
 801a37c:	4605      	mov	r5, r0
 801a37e:	4608      	mov	r0, r1
 801a380:	4611      	mov	r1, r2
 801a382:	2200      	movs	r2, #0
 801a384:	6022      	str	r2, [r4, #0]
 801a386:	461a      	mov	r2, r3
 801a388:	f7e6 ffda 	bl	8001340 <_lseek>
 801a38c:	1c43      	adds	r3, r0, #1
 801a38e:	d102      	bne.n	801a396 <_lseek_r+0x1e>
 801a390:	6823      	ldr	r3, [r4, #0]
 801a392:	b103      	cbz	r3, 801a396 <_lseek_r+0x1e>
 801a394:	602b      	str	r3, [r5, #0]
 801a396:	bd38      	pop	{r3, r4, r5, pc}
 801a398:	200101e8 	.word	0x200101e8

0801a39c <__swhatbuf_r>:
 801a39c:	b570      	push	{r4, r5, r6, lr}
 801a39e:	460e      	mov	r6, r1
 801a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3a4:	2900      	cmp	r1, #0
 801a3a6:	b096      	sub	sp, #88	; 0x58
 801a3a8:	4614      	mov	r4, r2
 801a3aa:	461d      	mov	r5, r3
 801a3ac:	da07      	bge.n	801a3be <__swhatbuf_r+0x22>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	602b      	str	r3, [r5, #0]
 801a3b2:	89b3      	ldrh	r3, [r6, #12]
 801a3b4:	061a      	lsls	r2, r3, #24
 801a3b6:	d410      	bmi.n	801a3da <__swhatbuf_r+0x3e>
 801a3b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a3bc:	e00e      	b.n	801a3dc <__swhatbuf_r+0x40>
 801a3be:	466a      	mov	r2, sp
 801a3c0:	f000 f8f2 	bl	801a5a8 <_fstat_r>
 801a3c4:	2800      	cmp	r0, #0
 801a3c6:	dbf2      	blt.n	801a3ae <__swhatbuf_r+0x12>
 801a3c8:	9a01      	ldr	r2, [sp, #4]
 801a3ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a3ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a3d2:	425a      	negs	r2, r3
 801a3d4:	415a      	adcs	r2, r3
 801a3d6:	602a      	str	r2, [r5, #0]
 801a3d8:	e7ee      	b.n	801a3b8 <__swhatbuf_r+0x1c>
 801a3da:	2340      	movs	r3, #64	; 0x40
 801a3dc:	2000      	movs	r0, #0
 801a3de:	6023      	str	r3, [r4, #0]
 801a3e0:	b016      	add	sp, #88	; 0x58
 801a3e2:	bd70      	pop	{r4, r5, r6, pc}

0801a3e4 <__smakebuf_r>:
 801a3e4:	898b      	ldrh	r3, [r1, #12]
 801a3e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a3e8:	079d      	lsls	r5, r3, #30
 801a3ea:	4606      	mov	r6, r0
 801a3ec:	460c      	mov	r4, r1
 801a3ee:	d507      	bpl.n	801a400 <__smakebuf_r+0x1c>
 801a3f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a3f4:	6023      	str	r3, [r4, #0]
 801a3f6:	6123      	str	r3, [r4, #16]
 801a3f8:	2301      	movs	r3, #1
 801a3fa:	6163      	str	r3, [r4, #20]
 801a3fc:	b002      	add	sp, #8
 801a3fe:	bd70      	pop	{r4, r5, r6, pc}
 801a400:	ab01      	add	r3, sp, #4
 801a402:	466a      	mov	r2, sp
 801a404:	f7ff ffca 	bl	801a39c <__swhatbuf_r>
 801a408:	9900      	ldr	r1, [sp, #0]
 801a40a:	4605      	mov	r5, r0
 801a40c:	4630      	mov	r0, r6
 801a40e:	f7ff f959 	bl	80196c4 <_malloc_r>
 801a412:	b948      	cbnz	r0, 801a428 <__smakebuf_r+0x44>
 801a414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a418:	059a      	lsls	r2, r3, #22
 801a41a:	d4ef      	bmi.n	801a3fc <__smakebuf_r+0x18>
 801a41c:	f023 0303 	bic.w	r3, r3, #3
 801a420:	f043 0302 	orr.w	r3, r3, #2
 801a424:	81a3      	strh	r3, [r4, #12]
 801a426:	e7e3      	b.n	801a3f0 <__smakebuf_r+0xc>
 801a428:	4b0d      	ldr	r3, [pc, #52]	; (801a460 <__smakebuf_r+0x7c>)
 801a42a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a42c:	89a3      	ldrh	r3, [r4, #12]
 801a42e:	6020      	str	r0, [r4, #0]
 801a430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a434:	81a3      	strh	r3, [r4, #12]
 801a436:	9b00      	ldr	r3, [sp, #0]
 801a438:	6163      	str	r3, [r4, #20]
 801a43a:	9b01      	ldr	r3, [sp, #4]
 801a43c:	6120      	str	r0, [r4, #16]
 801a43e:	b15b      	cbz	r3, 801a458 <__smakebuf_r+0x74>
 801a440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a444:	4630      	mov	r0, r6
 801a446:	f000 f8c1 	bl	801a5cc <_isatty_r>
 801a44a:	b128      	cbz	r0, 801a458 <__smakebuf_r+0x74>
 801a44c:	89a3      	ldrh	r3, [r4, #12]
 801a44e:	f023 0303 	bic.w	r3, r3, #3
 801a452:	f043 0301 	orr.w	r3, r3, #1
 801a456:	81a3      	strh	r3, [r4, #12]
 801a458:	89a3      	ldrh	r3, [r4, #12]
 801a45a:	431d      	orrs	r5, r3
 801a45c:	81a5      	strh	r5, [r4, #12]
 801a45e:	e7cd      	b.n	801a3fc <__smakebuf_r+0x18>
 801a460:	08019579 	.word	0x08019579

0801a464 <memmove>:
 801a464:	4288      	cmp	r0, r1
 801a466:	b510      	push	{r4, lr}
 801a468:	eb01 0302 	add.w	r3, r1, r2
 801a46c:	d807      	bhi.n	801a47e <memmove+0x1a>
 801a46e:	1e42      	subs	r2, r0, #1
 801a470:	4299      	cmp	r1, r3
 801a472:	d00a      	beq.n	801a48a <memmove+0x26>
 801a474:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a478:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a47c:	e7f8      	b.n	801a470 <memmove+0xc>
 801a47e:	4283      	cmp	r3, r0
 801a480:	d9f5      	bls.n	801a46e <memmove+0xa>
 801a482:	1881      	adds	r1, r0, r2
 801a484:	1ad2      	subs	r2, r2, r3
 801a486:	42d3      	cmn	r3, r2
 801a488:	d100      	bne.n	801a48c <memmove+0x28>
 801a48a:	bd10      	pop	{r4, pc}
 801a48c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a490:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a494:	e7f7      	b.n	801a486 <memmove+0x22>

0801a496 <__malloc_lock>:
 801a496:	4770      	bx	lr

0801a498 <__malloc_unlock>:
 801a498:	4770      	bx	lr
	...

0801a49c <_free_r>:
 801a49c:	b538      	push	{r3, r4, r5, lr}
 801a49e:	4605      	mov	r5, r0
 801a4a0:	2900      	cmp	r1, #0
 801a4a2:	d045      	beq.n	801a530 <_free_r+0x94>
 801a4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4a8:	1f0c      	subs	r4, r1, #4
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	bfb8      	it	lt
 801a4ae:	18e4      	addlt	r4, r4, r3
 801a4b0:	f7ff fff1 	bl	801a496 <__malloc_lock>
 801a4b4:	4a1f      	ldr	r2, [pc, #124]	; (801a534 <_free_r+0x98>)
 801a4b6:	6813      	ldr	r3, [r2, #0]
 801a4b8:	4610      	mov	r0, r2
 801a4ba:	b933      	cbnz	r3, 801a4ca <_free_r+0x2e>
 801a4bc:	6063      	str	r3, [r4, #4]
 801a4be:	6014      	str	r4, [r2, #0]
 801a4c0:	4628      	mov	r0, r5
 801a4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4c6:	f7ff bfe7 	b.w	801a498 <__malloc_unlock>
 801a4ca:	42a3      	cmp	r3, r4
 801a4cc:	d90c      	bls.n	801a4e8 <_free_r+0x4c>
 801a4ce:	6821      	ldr	r1, [r4, #0]
 801a4d0:	1862      	adds	r2, r4, r1
 801a4d2:	4293      	cmp	r3, r2
 801a4d4:	bf04      	itt	eq
 801a4d6:	681a      	ldreq	r2, [r3, #0]
 801a4d8:	685b      	ldreq	r3, [r3, #4]
 801a4da:	6063      	str	r3, [r4, #4]
 801a4dc:	bf04      	itt	eq
 801a4de:	1852      	addeq	r2, r2, r1
 801a4e0:	6022      	streq	r2, [r4, #0]
 801a4e2:	6004      	str	r4, [r0, #0]
 801a4e4:	e7ec      	b.n	801a4c0 <_free_r+0x24>
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	685a      	ldr	r2, [r3, #4]
 801a4ea:	b10a      	cbz	r2, 801a4f0 <_free_r+0x54>
 801a4ec:	42a2      	cmp	r2, r4
 801a4ee:	d9fa      	bls.n	801a4e6 <_free_r+0x4a>
 801a4f0:	6819      	ldr	r1, [r3, #0]
 801a4f2:	1858      	adds	r0, r3, r1
 801a4f4:	42a0      	cmp	r0, r4
 801a4f6:	d10b      	bne.n	801a510 <_free_r+0x74>
 801a4f8:	6820      	ldr	r0, [r4, #0]
 801a4fa:	4401      	add	r1, r0
 801a4fc:	1858      	adds	r0, r3, r1
 801a4fe:	4282      	cmp	r2, r0
 801a500:	6019      	str	r1, [r3, #0]
 801a502:	d1dd      	bne.n	801a4c0 <_free_r+0x24>
 801a504:	6810      	ldr	r0, [r2, #0]
 801a506:	6852      	ldr	r2, [r2, #4]
 801a508:	605a      	str	r2, [r3, #4]
 801a50a:	4401      	add	r1, r0
 801a50c:	6019      	str	r1, [r3, #0]
 801a50e:	e7d7      	b.n	801a4c0 <_free_r+0x24>
 801a510:	d902      	bls.n	801a518 <_free_r+0x7c>
 801a512:	230c      	movs	r3, #12
 801a514:	602b      	str	r3, [r5, #0]
 801a516:	e7d3      	b.n	801a4c0 <_free_r+0x24>
 801a518:	6820      	ldr	r0, [r4, #0]
 801a51a:	1821      	adds	r1, r4, r0
 801a51c:	428a      	cmp	r2, r1
 801a51e:	bf04      	itt	eq
 801a520:	6811      	ldreq	r1, [r2, #0]
 801a522:	6852      	ldreq	r2, [r2, #4]
 801a524:	6062      	str	r2, [r4, #4]
 801a526:	bf04      	itt	eq
 801a528:	1809      	addeq	r1, r1, r0
 801a52a:	6021      	streq	r1, [r4, #0]
 801a52c:	605c      	str	r4, [r3, #4]
 801a52e:	e7c7      	b.n	801a4c0 <_free_r+0x24>
 801a530:	bd38      	pop	{r3, r4, r5, pc}
 801a532:	bf00      	nop
 801a534:	2000c940 	.word	0x2000c940

0801a538 <_realloc_r>:
 801a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a53a:	4607      	mov	r7, r0
 801a53c:	4614      	mov	r4, r2
 801a53e:	460e      	mov	r6, r1
 801a540:	b921      	cbnz	r1, 801a54c <_realloc_r+0x14>
 801a542:	4611      	mov	r1, r2
 801a544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a548:	f7ff b8bc 	b.w	80196c4 <_malloc_r>
 801a54c:	b922      	cbnz	r2, 801a558 <_realloc_r+0x20>
 801a54e:	f7ff ffa5 	bl	801a49c <_free_r>
 801a552:	4625      	mov	r5, r4
 801a554:	4628      	mov	r0, r5
 801a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a558:	f000 f848 	bl	801a5ec <_malloc_usable_size_r>
 801a55c:	42a0      	cmp	r0, r4
 801a55e:	d20f      	bcs.n	801a580 <_realloc_r+0x48>
 801a560:	4621      	mov	r1, r4
 801a562:	4638      	mov	r0, r7
 801a564:	f7ff f8ae 	bl	80196c4 <_malloc_r>
 801a568:	4605      	mov	r5, r0
 801a56a:	2800      	cmp	r0, #0
 801a56c:	d0f2      	beq.n	801a554 <_realloc_r+0x1c>
 801a56e:	4631      	mov	r1, r6
 801a570:	4622      	mov	r2, r4
 801a572:	f7fe ff92 	bl	801949a <memcpy>
 801a576:	4631      	mov	r1, r6
 801a578:	4638      	mov	r0, r7
 801a57a:	f7ff ff8f 	bl	801a49c <_free_r>
 801a57e:	e7e9      	b.n	801a554 <_realloc_r+0x1c>
 801a580:	4635      	mov	r5, r6
 801a582:	e7e7      	b.n	801a554 <_realloc_r+0x1c>

0801a584 <_read_r>:
 801a584:	b538      	push	{r3, r4, r5, lr}
 801a586:	4c07      	ldr	r4, [pc, #28]	; (801a5a4 <_read_r+0x20>)
 801a588:	4605      	mov	r5, r0
 801a58a:	4608      	mov	r0, r1
 801a58c:	4611      	mov	r1, r2
 801a58e:	2200      	movs	r2, #0
 801a590:	6022      	str	r2, [r4, #0]
 801a592:	461a      	mov	r2, r3
 801a594:	f7e6 fe74 	bl	8001280 <_read>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d102      	bne.n	801a5a2 <_read_r+0x1e>
 801a59c:	6823      	ldr	r3, [r4, #0]
 801a59e:	b103      	cbz	r3, 801a5a2 <_read_r+0x1e>
 801a5a0:	602b      	str	r3, [r5, #0]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	200101e8 	.word	0x200101e8

0801a5a8 <_fstat_r>:
 801a5a8:	b538      	push	{r3, r4, r5, lr}
 801a5aa:	4c07      	ldr	r4, [pc, #28]	; (801a5c8 <_fstat_r+0x20>)
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	4605      	mov	r5, r0
 801a5b0:	4608      	mov	r0, r1
 801a5b2:	4611      	mov	r1, r2
 801a5b4:	6023      	str	r3, [r4, #0]
 801a5b6:	f7e6 fea8 	bl	800130a <_fstat>
 801a5ba:	1c43      	adds	r3, r0, #1
 801a5bc:	d102      	bne.n	801a5c4 <_fstat_r+0x1c>
 801a5be:	6823      	ldr	r3, [r4, #0]
 801a5c0:	b103      	cbz	r3, 801a5c4 <_fstat_r+0x1c>
 801a5c2:	602b      	str	r3, [r5, #0]
 801a5c4:	bd38      	pop	{r3, r4, r5, pc}
 801a5c6:	bf00      	nop
 801a5c8:	200101e8 	.word	0x200101e8

0801a5cc <_isatty_r>:
 801a5cc:	b538      	push	{r3, r4, r5, lr}
 801a5ce:	4c06      	ldr	r4, [pc, #24]	; (801a5e8 <_isatty_r+0x1c>)
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	4605      	mov	r5, r0
 801a5d4:	4608      	mov	r0, r1
 801a5d6:	6023      	str	r3, [r4, #0]
 801a5d8:	f7e6 fea7 	bl	800132a <_isatty>
 801a5dc:	1c43      	adds	r3, r0, #1
 801a5de:	d102      	bne.n	801a5e6 <_isatty_r+0x1a>
 801a5e0:	6823      	ldr	r3, [r4, #0]
 801a5e2:	b103      	cbz	r3, 801a5e6 <_isatty_r+0x1a>
 801a5e4:	602b      	str	r3, [r5, #0]
 801a5e6:	bd38      	pop	{r3, r4, r5, pc}
 801a5e8:	200101e8 	.word	0x200101e8

0801a5ec <_malloc_usable_size_r>:
 801a5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5f0:	1f18      	subs	r0, r3, #4
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	bfbc      	itt	lt
 801a5f6:	580b      	ldrlt	r3, [r1, r0]
 801a5f8:	18c0      	addlt	r0, r0, r3
 801a5fa:	4770      	bx	lr

0801a5fc <_init>:
 801a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5fe:	bf00      	nop
 801a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a602:	bc08      	pop	{r3}
 801a604:	469e      	mov	lr, r3
 801a606:	4770      	bx	lr

0801a608 <_fini>:
 801a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a60a:	bf00      	nop
 801a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a60e:	bc08      	pop	{r3}
 801a610:	469e      	mov	lr, r3
 801a612:	4770      	bx	lr
